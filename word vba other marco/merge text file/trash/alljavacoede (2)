package com.huanchengfly.tieba.post.adapters;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.google.gson.reflect.TypeToken;
import com.huanchengfly.tieba.post.R;
import com.huanchengfly.tieba.post.components.MyViewHolder;
import com.huanchengfly.tieba.post.models.database.Block;
import com.huanchengfly.tieba.post.utils.BlockUtil;
import com.huanchengfly.tieba.post.utils.GsonUtil;

import org.litepal.LitePal;

import java.util.List;

public class BlockListAdapter extends RecyclerView.Adapter<MyViewHolder> {
    private static final String TAG = "BlockListAdapter";
    private Context mContext;
    private List<Block> dataList;
    private int type;

    public BlockListAdapter(Context context, int type) {
        super();
        this.mContext = context;
        this.dataList = BlockUtil.getBlackList();
        this.type = type;
    }

    public void refresh() {
        refresh(true);
    }

    public void refresh(boolean notify) {
        if (this.type == Block.CATEGORY_WHITE_LIST) {
            this.dataList = LitePal.where("category = ?", "11").find(Block.class);
        } else {
            this.dataList = LitePal.where("category = ?", "10").find(Block.class);
        }
        if (notify) {
            notifyDataSetChanged();
        }
    }

    @Override
    public int getItemCount() {
        return dataList.size();
    }

    @NonNull
    @Override
    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_block_list, parent, false);
        return new MyViewHolder(view);
    }

    @Override
    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {
        Block block = get(position);
        TextView textView = holder.getView(R.id.item_block_list_word);
        if (block.getType() == Block.TYPE_KEYWORD) {
            List<String> stringList = GsonUtil.getGson().fromJson(block.getKeywords(), new TypeToken<List<String>>() {
            }.getType());
            textView.setText(listToString(stringList, " "));
        } else if (block.getType() == Block.TYPE_USER) {
            textView.setText(block.getUsername());
        }
    }

    public Block get(int position) {
        return dataList.get(position);
    }

    public void remove(int position) {
        if (position < dataList.size() && position >= 0) {
            dataList.remove(position);
            notifyItemRemoved(position);
            if (position != dataList.size()) {
                this.notifyItemRangeChanged(position, dataList.size() - position);
            }
        }
    }

    public void insert(Block block, int position) {
        if (position <= dataList.size() && position >= 0) {
            dataList.add(position, block);
            notifyItemInserted(position);
            notifyItemRangeChanged(position, dataList.size() - position);
        }
    }

    @NonNull
    private String listToString(List list, String separator) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < list.size(); i++) {
            sb.append(list.get(i)).append(separator);
        }
        return sb.toString().substring(0, sb.toString().length() - 1);
    }
}package com.huanchengfly.tieba.post.adapters;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.ViewGroup;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
import com.huanchengfly.tieba.post.api.models.PersonalizedBean;
import com.huanchengfly.tieba.post.R;
import com.huanchengfly.tieba.post.components.MyViewHolder;
import com.huanchengfly.tieba.post.utils.ThemeUtil;

import java.util.ArrayList;
import java.util.List;

public class DislikeAdapter extends RecyclerView.Adapter<MyViewHolder> {
    private Context mContext;
    private List<PersonalizedBean.DislikeResourceBean> beans;
    private List<String> selectedIds;

    public DislikeAdapter(Context context, List<PersonalizedBean.DislikeResourceBean> beans) {
        this.mContext = context;
        this.beans = beans;
        this.selectedIds = new ArrayList<>();
    }

    public List<String> getSelectedIds() {
        return selectedIds;
    }

    @NonNull
    @Override
    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        return new MyViewHolder(LayoutInflater.from(mContext).inflate(R.layout.item_dislike_reason, parent, false));
    }

    @Override
    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {
        PersonalizedBean.DislikeResourceBean bean = beans.get(position);
        TextView textView = holder.getView(R.id.classify_text);
        if (selectedIds.contains(bean.getDislikeId())) {
            textView.setTextColor(ThemeUtils.getColorByAttr(mContext, R.attr.colorAccent));
        } else {
            textView.setTextColor(ThemeUtil.getSecondaryTextColor(mContext));
        }
        textView.setText(bean.getDislikeReason());
        holder.setItemOnClickListener(v -> {
            if (selectedIds.contains(bean.getDislikeId())) {
                selectedIds.remove(bean.getDislikeId());
            } else {
                selectedIds.add(bean.getDislikeId());
            }
            //notifyItemChanged(position);
            notifyDataSetChanged();
        });
    }

    @Override
    public int getItemCount() {
        return beans.size();
    }

    public PersonalizedBean.DislikeResourceBean getItem(int position) {
        return beans.get(position);
    }
}package com.huanchengfly.tieba.post.adapters;

import android.content.Context;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AbsListView.LayoutParams;
import android.widget.BaseAdapter;
import android.widget.ImageView;

import com.huanchengfly.tieba.post.utils.EmotionUtil;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Created by zejian
 * Time  16/1/7 下午4:46
 * Email shinezejian@163.com
 * Description:
 */
public class EmotionGridViewAdapter extends BaseAdapter {

    private Context context;
    private int emotionType;
    private List<String> emotionNames;
    private int itemWidth;

    public EmotionGridViewAdapter(Context context, int itemWidth) {
        this(context, EmotionUtil.EMOTION_ALL_WEB_TYPE, itemWidth);
    }

    public EmotionGridViewAdapter(Context context, int type, int itemWidth) {
        super();
        this.context = context;
        this.emotionType = type;
        this.emotionNames = getEmotionNames();
        this.itemWidth = itemWidth;
    }

    public List<String> getEmotionNames() {
        Map<String, Integer> emojiMap = EmotionUtil.getEmojiMap(emotionType);
        return new ArrayList<>(emojiMap.keySet());
    }

    @Override
    public int getCount() {
        return emotionNames.size();
    }

    @Override
    public String getItem(int position) {
        return emotionNames.get(position);
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        ImageView iv_emotion = new ImageView(context);
        iv_emotion.setPadding(itemWidth / 8, itemWidth / 8, itemWidth / 8, itemWidth / 8);
        LayoutParams params = new LayoutParams(itemWidth, itemWidth);
        iv_emotion.setLayoutParams(params);
        String emotionName = emotionNames.get(position);
        iv_emotion.setImageResource(EmotionUtil.getImgByName(emotionType, emotionName));
        return iv_emotion;
    }
}
package com.huanchengfly.tieba.post.adapters;

import android.content.Context;
import android.content.Intent;
import android.text.TextUtils;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;
import androidx.cardview.widget.CardView;
import androidx.gridlayout.widget.GridLayout;
import androidx.recyclerview.widget.RecyclerView;
import com.bumptech.glide.Glide;
import com.huanchengfly.tieba.post.api.models.ForumPageBean;
import com.huanchengfly.tieba.post.BaseApplication;
import com.huanchengfly.tieba.post.R;
import com.huanchengfly.tieba.post.activities.ThreadActivity;
import com.huanchengfly.tieba.post.components.MyLinearLayoutManager;
import com.huanchengfly.tieba.post.components.dividers.SpacesItemDecoration;
import com.huanchengfly.tieba.post.interfaces.OnSwitchListener;
import com.huanchengfly.tieba.post.models.PhotoViewBean;
import com.huanchengfly.tieba.post.utils.*;
import com.huanchengfly.tieba.post.utils.preload.PreloadUtil;
import com.huanchengfly.tieba.post.utils.preload.loaders.ThreadContentLoader;
import com.huanchengfly.tieba.post.widgets.MarkedImageView;
import com.huanchengfly.tieba.post.widgets.VideoPlayerStandard;
import com.othershe.baseadapter.ViewHolder;
import com.othershe.baseadapter.base.MultiBaseAdapter;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static com.huanchengfly.tieba.post.activities.PhotoViewActivity.OBJ_TYPE_FORUM_PAGE;

public class ForumAdapter extends MultiBaseAdapter<ForumPageBean.ThreadBean> {
    public static final String TAG = ForumAdapter.class.getSimpleName();
    public static final int TYPE_THREAD_TOP = 10;
    public static final int TYPE_THREAD_COMMON = 11;
    public static final int TYPE_THREAD_SINGLE_PIC = 12;
    public static final int TYPE_THREAD_MULTI_PIC = 13;
    public static final int TYPE_THREAD_VIDEO = 14;
    private ForumPageBean data;
    private Map<String, ForumPageBean.UserBean> userBeanMap;
    private GoodClassifyAdapter goodClassifyAdapter;
    private List<Long> ids;
    private boolean good;

    public ForumAdapter(Context context, boolean isGood) {
        super(context, null, true);
        ids = new ArrayList<>();
        userBeanMap = new HashMap<>();
        good = isGood;
        if (isGood) {
            View goodView = Util.inflate(mContext, R.layout.layout_header_forum_good);
            if (goodView != null) {
                addHeaderView(goodView);
                goodClassifyAdapter = new GoodClassifyAdapter(mContext);
                RecyclerView goodClassifyView = goodView.findViewById(R.id.forum_good_classify);
                goodClassifyView.setLayoutManager(new MyLinearLayoutManager(mContext, MyLinearLayoutManager.HORIZONTAL, false));
                goodClassifyView.addItemDecoration(new SpacesItemDecoration(DisplayUtil.dp2px(mContext, 8)));
                goodClassifyView.setAdapter(goodClassifyAdapter);
                refreshGood();
            }
        }
    }

    public void setOnSwitchListener(OnSwitchListener onSwitchListener) {
        if (good) goodClassifyAdapter.setOnSwitchListener(onSwitchListener);
    }

    @Override
    public long getItemId(int position) {
        if (position > 1) {
            int p = position - 2;
            if (p < getDataCount()) {
                return Long.valueOf(getData(p).getId());
            }
        }
        return position;
    }

    private void refreshGood() {
        if (data == null || !good) {
            return;
        }
        goodClassifyAdapter.setData(data.getForum().getGoodClassify());
    }

    private int getMaxWidth() {
        return BaseApplication.ScreenInfo.EXACT_SCREEN_WIDTH - DisplayUtil.dp2px(mContext, 40);
    }

    private int getGridHeight() {
        return (BaseApplication.ScreenInfo.EXACT_SCREEN_WIDTH - DisplayUtil.dp2px(mContext, 70)) / 3;
    }

    private RelativeLayout.LayoutParams getLayoutParams(RelativeLayout.LayoutParams layoutParams) {
        layoutParams.width = getMaxWidth();
        layoutParams.height = (int) (getMaxWidth() * 0.5625);
        return layoutParams;
    }

    private ViewGroup.LayoutParams getGridLayoutParams(ViewGroup.LayoutParams layoutParams) {
        layoutParams.height = getGridHeight();
        return layoutParams;
    }

    public void setData(ForumPageBean data) {
        if (data.getThreadList() == null) {
            Toast.makeText(mContext, R.string.toast_cannot_view, Toast.LENGTH_SHORT).show();
            return;
        }
        this.data = data;
        ids = new ArrayList<>();
        List<ForumPageBean.ThreadBean> threadBeans = new ArrayList<>();
        for (ForumPageBean.ThreadBean threadBean : data.getThreadList()) {
            long id = Long.valueOf(threadBean.getId());
            if (!ids.contains(id) && !needBlock(threadBean)) {
                ids.add(id);
                threadBeans.add(threadBean);
            }
        }
        setNewData(threadBeans);
        addUser(data.getUserList());
        refreshGood();
    }

    public void addData(ForumPageBean data) {
        if (data.getThreadList() == null) {
            Toast.makeText(mContext, R.string.toast_cannot_view, Toast.LENGTH_SHORT).show();
            return;
        }
        this.data = data;
        addUser(data.getUserList());
        List<ForumPageBean.ThreadBean> threadBeans = new ArrayList<>();
        for (ForumPageBean.ThreadBean threadBean : data.getThreadList()) {
            long id = Long.valueOf(threadBean.getId());
            if (!ids.contains(id) && !needBlock(threadBean)) {
                ids.add(id);
                threadBeans.add(threadBean);
            }
        }
        setLoadMoreData(threadBeans);
        refreshGood();
    }

    private void addUser(List<ForumPageBean.UserBean> data) {
        for (ForumPageBean.UserBean userBean : data) {
            if (userBeanMap.get(userBean.getId()) == null) {
                userBeanMap.put(userBean.getId(), userBean);
            }
        }
    }

    private void setListenerForImageView(List<ForumPageBean.MediaInfoBean> mediaInfoBeans, ImageView imageView, int position, ForumPageBean.ThreadBean threadBean) {
        List<PhotoViewBean> photoViewBeans = new ArrayList<>();
        for (ForumPageBean.MediaInfoBean media : mediaInfoBeans) {
            photoViewBeans.add(new PhotoViewBean(ImageUtil.getNonNullString(media.getBigPic(), media.getSrcPic(), media.getOriginPic()),
                    ImageUtil.getNonNullString(media.getOriginPic(), media.getSrcPic(), media.getBigPic()),
                    "1".equals(media.isLongPic())));
        }
        ImageUtil.initImageView(imageView,
                photoViewBeans,
                position,
                data.getForum().getName(),
                data.getForum().getId(),
                threadBean.getId(),
                true,
                OBJ_TYPE_FORUM_PAGE);
    }

    private void load(ForumPageBean.MediaInfoBean mediaInfoBean, ImageView imageView) {
        imageView.setVisibility(View.VISIBLE);
        String url = ImageUtil.getUrl(mContext, true, mediaInfoBean.getOriginPic(), mediaInfoBean.getSrcPic());
        if ("3".equals(mediaInfoBean.getType())) {
            ImageUtil.load(imageView, ImageUtil.LOAD_TYPE_NO_RADIUS, url);
        }
    }

    private void startActivity(ForumPageBean.ThreadBean threadBean) {
        PreloadUtil.startActivityWithPreload(mContext,
                new Intent(mContext, ThreadActivity.class)
                        .putExtra("tid", threadBean.getTid())
                        .putExtra("from", ThreadActivity.FROM_FORUM),
                new ThreadContentLoader(threadBean.getTid(), 1, false));
    }

    @Override
    protected void convert(ViewHolder viewHolder, ForumPageBean.ThreadBean threadBean, int position, int type) {
        if (type == TYPE_THREAD_TOP) {
            viewHolder.setOnClickListener(R.id.forum_item_top, view -> startActivity(threadBean));
            viewHolder.setText(R.id.forum_item_top_title, threadBean.getTitle());
            return;
        }
        viewHolder.setText(R.id.forum_item_comment_count_text, threadBean.getReplyNum());
        if ("1".equals(threadBean.isGood())) {
            viewHolder.setVisibility(R.id.forum_item_good_tip, View.VISIBLE);
        } else {
            viewHolder.setVisibility(R.id.forum_item_good_tip, View.GONE);
        }
        viewHolder.setOnClickListener(R.id.forum_item, view -> startActivity(threadBean));
        if ("1".equals(threadBean.isNoTitle())) {
            viewHolder.setVisibility(R.id.forum_item_title_holder, View.GONE);
        } else {
            viewHolder.setVisibility(R.id.forum_item_title_holder, View.VISIBLE);
            viewHolder.setText(R.id.forum_item_title, threadBean.getTitle());
        }
        TextView textView = viewHolder.getView(R.id.forum_item_content_text);
        if (TextUtils.isEmpty(threadBean.getAbstractString())) {
            textView.setText(null);
            textView.setVisibility(View.GONE);
        } else {
            textView.setText(threadBean.getAbstractString());
            textView.setVisibility(View.VISIBLE);
        }
        ForumPageBean.UserBean userBean = userBeanMap.get(threadBean.getAuthorId());
        if (userBean != null) {
            viewHolder.setOnClickListener(R.id.forum_item_user_avatar, v -> {
                NavigationHelper.toUserSpaceWithAnim(mContext, userBean.getId(), userBean.getPortrait(), v);
            });
            viewHolder.setText(R.id.forum_item_user_name, StringUtil.getUsernameString(mContext, userBean.getName(), userBean.getNameShow()));
            viewHolder.setText(R.id.forum_item_user_time, Util.getTime(threadBean.getLastTimeInt()));
            ImageUtil.load(viewHolder.getView(R.id.forum_item_user_avatar), ImageUtil.LOAD_TYPE_AVATAR, userBean.getPortrait());
        }
        switch (type) {
            case TYPE_THREAD_SINGLE_PIC:
                if (Util.canLoadGlide(mContext) && "3".equals(threadBean.getMedia().get(0).getType())) {
                    MarkedImageView imageView = viewHolder.getView(R.id.forum_item_content_pic);
                    imageView.setLayoutParams(getLayoutParams((RelativeLayout.LayoutParams) imageView.getLayoutParams()));
                    setListenerForImageView(threadBean.getMedia(), imageView, 0, threadBean);
                    ForumPageBean.MediaInfoBean mediaInfoBean = threadBean.getMedia().get(0);
                    if ("1".equals(mediaInfoBean.isGif())) {
                        imageView.setMarkText("GIF");
                        imageView.setMarkVisible(true);
                    } else {
                        imageView.setMarkText("");
                        imageView.setMarkVisible(false);
                    }
                    ImageUtil.load(imageView, ImageUtil.LOAD_TYPE_SMALL_PIC, ImageUtil.getUrl(mContext, true, mediaInfoBean.getOriginPic(), mediaInfoBean.getSrcPic(), mediaInfoBean.getBigPic()));
                }
                break;
            case TYPE_THREAD_MULTI_PIC:
                GridLayout gridLayout = viewHolder.getView(R.id.forum_item_content_pics);
                CardView cardView = viewHolder.getView(R.id.forum_item_content_pics_card);
                cardView.setRadius(DisplayUtil.dp2px(mContext, SharedPreferencesUtil.get(mContext, SharedPreferencesUtil.SP_SETTINGS).getInt("radius", 8)));
                MarkedImageView firstImageView = viewHolder.getView(R.id.forum_item_content_pic_1);
                MarkedImageView secondImageView = viewHolder.getView(R.id.forum_item_content_pic_2);
                MarkedImageView thirdImageView = viewHolder.getView(R.id.forum_item_content_pic_3);
                gridLayout.setLayoutParams(getGridLayoutParams(gridLayout.getLayoutParams()));
                int size = threadBean.getMedia().size();
                if (size >= 1) {
                    setListenerForImageView(threadBean.getMedia(), firstImageView, 0, threadBean);
                    ForumPageBean.MediaInfoBean firstMedia = threadBean.getMedia().get(0);
                    load(firstMedia, firstImageView);
                } else {
                    firstImageView.setVisibility(View.GONE);
                    Glide.with(mContext)
                            .clear(firstImageView);
                }
                if (size >= 2) {
                    setListenerForImageView(threadBean.getMedia(), secondImageView, 1, threadBean);
                    ForumPageBean.MediaInfoBean secondMedia = threadBean.getMedia().get(1);
                    load(secondMedia, secondImageView);
                } else {
                    secondImageView.setVisibility(View.GONE);
                    Glide.with(mContext)
                            .clear(secondImageView);
                }
                if (size >= 3) {
                    setListenerForImageView(threadBean.getMedia(), thirdImageView, 2, threadBean);
                    ForumPageBean.MediaInfoBean thirdMedia = threadBean.getMedia().get(2);
                    load(thirdMedia, thirdImageView);
                } else {
                    thirdImageView.setVisibility(View.GONE);
                    Glide.with(mContext)
                            .clear(thirdImageView);
                }
                if (size > 3) {
                    viewHolder.setVisibility(R.id.forum_item_content_pic_badge, View.VISIBLE);
                    viewHolder.setText(R.id.forum_item_content_pic_badge_text, String.valueOf(size));
                } else {
                    viewHolder.setVisibility(R.id.forum_item_content_pic_badge, View.GONE);
                }
                break;
            case TYPE_THREAD_VIDEO:
                if (threadBean.getVideoInfo() == null) {
                    break;
                }
                VideoPlayerStandard videoPlayerStandard = viewHolder.getView(R.id.forum_item_content_video);
                videoPlayerStandard.setLayoutParams(getLayoutParams((RelativeLayout.LayoutParams) videoPlayerStandard.getLayoutParams()));
                videoPlayerStandard.setUp(threadBean.getVideoInfo().getVideoUrl(), "");
                ImageUtil.load(videoPlayerStandard.posterImageView, ImageUtil.LOAD_TYPE_SMALL_PIC, threadBean.getVideoInfo().getThumbnailUrl(), true);
                break;
        }
    }

    private boolean needBlock(ForumPageBean.ThreadBean threadBean) {
        if (!TextUtils.isEmpty(threadBean.getTitle()) && BlockUtil.needBlock(threadBean.getTitle())) {
            return true;
        }
        ForumPageBean.UserBean userBean = userBeanMap.get(threadBean.getAuthorId());
        if (BlockUtil.needBlock(userBean != null ? userBean.getName() : null, threadBean.getAuthorId())) {
            return true;
        }
        return !(TextUtils.isEmpty(threadBean.getAbstractString())) && BlockUtil.needBlock(threadBean.getAbstractString());
    }

    private String getAbstracts(List<ForumPageBean.AbstractBean> abstractBeans) {
        StringBuilder stringBuilder = new StringBuilder();
        for (ForumPageBean.AbstractBean abstractBean : abstractBeans) {
            if ("0".equals(abstractBean.getType())) {
                stringBuilder.append(abstractBean.getText());
            }
        }
        return stringBuilder.toString();
    }

    @Override
    protected int getItemLayoutId(int type) {
        switch (type) {
            case TYPE_THREAD_TOP:
                return R.layout.item_forum_thread_top;
            case TYPE_THREAD_COMMON:
                return R.layout.item_forum_thread_common;
            case TYPE_THREAD_VIDEO:
                return R.layout.item_forum_thread_video;
            case TYPE_THREAD_SINGLE_PIC:
                return R.layout.item_forum_thread_single_pic;
            case TYPE_THREAD_MULTI_PIC:
                return R.layout.item_forum_thread_multi_pic;
        }
        return R.layout.item_forum_thread_common;
    }

    @Override
    protected int getViewType(int position, ForumPageBean.ThreadBean threadBean) {
        if ("1".equals(threadBean.isTop())) {
            return TYPE_THREAD_TOP;
        }
        if (threadBean.getVideoInfo() != null) {
            return TYPE_THREAD_VIDEO;
        }
        if (threadBean.getMedia() == null) {
            return TYPE_THREAD_COMMON;
        }
        if (threadBean.getMedia().size() == 1) {
            return TYPE_THREAD_SINGLE_PIC;
        }
        if (threadBean.getMedia().size() > 1) {
            return TYPE_THREAD_MULTI_PIC;
        }
        return TYPE_THREAD_COMMON;
    }
}
package com.huanchengfly.tieba.post.adapters;

import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import androidx.fragment.app.FragmentPagerAdapter;

import java.util.ArrayList;
import java.util.List;

public class FragmentTabViewPagerAdapter extends FragmentPagerAdapter {
    public Fragment currentFragment;
    public int currentFragmentPosition;
    private List<Fragment> fragments;
    private List<String> titles;

    public FragmentTabViewPagerAdapter(FragmentManager fm) {
        super(fm);
        fragments = new ArrayList<>();
        titles = new ArrayList<>();
    }

    @Override
    public Fragment getItem(int position) {
        currentFragmentPosition = position;
        currentFragment = fragments.get(position);
        return fragments.get(position);
    }

    public Fragment getCurrentFragment() {
        return currentFragment;
    }

    public int getCurrentFragmentPosition() {
        return currentFragmentPosition;
    }

    @Override
    public int getCount() {
        return fragments.size();
    }

    public void addFragment(Fragment fragment, String title) {
        fragments.add(fragment);
        titles.add(title);
        notifyDataSetChanged();
    }

    public void clear() {
        fragments = new ArrayList<>();
        titles = new ArrayList<>();
        notifyDataSetChanged();
    }

    public List<Fragment> getFragments() {
        return fragments;
    }

    @Override
    public CharSequence getPageTitle(int position) {
        return titles.get(position);
    }
}package com.huanchengfly.tieba.post.adapters;

import android.content.Context;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
import com.huanchengfly.tieba.post.api.models.ForumPageBean;
import com.huanchengfly.tieba.post.R;
import com.huanchengfly.tieba.post.components.MyViewHolder;
import com.huanchengfly.tieba.post.interfaces.OnSwitchListener;
import com.huanchengfly.tieba.post.utils.ThemeUtil;
import com.huanchengfly.tieba.post.utils.Util;

import java.util.ArrayList;
import java.util.List;

public class GoodClassifyAdapter extends RecyclerView.Adapter<MyViewHolder> {
    private Context context;
    private List<ForumPageBean.GoodClassifyBean> goodClassifyBeans;
    private String selectedId;
    private OnSwitchListener mOnSwitchListener;

    public GoodClassifyAdapter(Context context) {
        this.context = context;
        this.goodClassifyBeans = new ArrayList<>();
        this.selectedId = "0";
    }

    public OnSwitchListener getOnSwitchListener() {
        return mOnSwitchListener;
    }

    public void setOnSwitchListener(OnSwitchListener onSwitchListener) {
        this.mOnSwitchListener = onSwitchListener;
    }

    public GoodClassifyAdapter setSelectedId(String selectedId) {
        this.selectedId = selectedId;
        return this;
    }

    public void setData(List<ForumPageBean.GoodClassifyBean> goodClassifyBeans) {
        this.goodClassifyBeans = goodClassifyBeans;
        notifyDataSetChanged();
    }

    @NonNull
    @Override
    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        return new MyViewHolder(Util.inflate(context, R.layout.item_good_classify));
    }

    @Override
    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {
        ForumPageBean.GoodClassifyBean goodClassifyBean = goodClassifyBeans.get(position);
        TextView textView = holder.getView(R.id.classify_text);
        View view = holder.getView(R.id.classify_item);
        view.setOnClickListener(v -> {
            setSelectedId(goodClassifyBean.getClassId());
            notifyDataSetChanged();
            if (getOnSwitchListener() != null) {
                getOnSwitchListener().onSwitch(position);
            }
        });
        textView.setText(goodClassifyBean.getClassName());
        if (selectedId.equals(goodClassifyBean.getClassId())) {
            textView.setTextColor(ThemeUtils.getColorByAttr(context, R.attr.colorAccent));
        } else {
            textView.setTextColor(ThemeUtil.getSecondaryTextColor(context));
        }
    }

    @Override
    public int getItemCount() {
        return goodClassifyBeans.size();
    }
}
package com.huanchengfly.tieba.post.adapters;

import android.annotation.SuppressLint;
import android.content.Context;
import android.text.TextUtils;
import android.text.format.DateUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.TextView;

import com.huanchengfly.tieba.post.R;
import com.huanchengfly.tieba.post.models.database.History;
import com.huanchengfly.tieba.post.utils.HistoryHelper;
import com.huanchengfly.tieba.post.utils.ImageUtil;

import java.util.List;

public class HistoryListAdapter extends BaseAdapter {
    private List<History> mList;
    private LayoutInflater mInflater;
    private Context mContext;

    public HistoryListAdapter(Context context, List<History> list) {
        mList = list;
        mInflater = LayoutInflater.from(context);
        mContext = context;
    }

    @Override
    public int getCount() {
        return mList.size();
    }

    @Override
    public Object getItem(int position) {
        return mList.get(position);
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    @SuppressLint("InflateParams")
    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        ViewHolder viewHolder;
        if (convertView == null) {
            viewHolder = new ViewHolder();
            convertView = mInflater.inflate(R.layout.item_history, null);
            viewHolder.titleTextView = convertView.findViewById(R.id.history_item_title);
            viewHolder.timeTextView = convertView.findViewById(R.id.history_item_header_title);
            viewHolder.iconView = convertView.findViewById(R.id.history_item_icon);
            viewHolder.avatarView = convertView.findViewById(R.id.history_item_avatar);
            convertView.setTag(viewHolder);
        } else {
            viewHolder = (ViewHolder) convertView.getTag();
        }
        History bean = mList.get(position);
        StringBuilder headerTitle = new StringBuilder();
        viewHolder.titleTextView.setText(bean.getTitle());
        switch (bean.getType()) {
            case HistoryHelper.TYPE_BA:
                headerTitle.append("贴吧 · ");
                viewHolder.iconView.setImageResource(R.drawable.ic_infinite);
                break;
            case HistoryHelper.TYPE_THREAD:
                if (!TextUtils.isEmpty(bean.getUsername())) {
                    headerTitle.append(bean.getUsername());
                    headerTitle.append(" 的");
                }
                headerTitle.append("贴子 · ");
                viewHolder.iconView.setImageResource(R.drawable.ic_inbox);
                break;
            default:
                headerTitle.append("网页 · ");
                viewHolder.iconView.setImageResource(R.drawable.ic_cisco_webex);
                break;
        }
        if (!TextUtils.isEmpty(bean.getAvatar())) {
            viewHolder.avatarView.setVisibility(View.VISIBLE);
            ImageUtil.load(viewHolder.avatarView, ImageUtil.LOAD_TYPE_AVATAR, bean.getAvatar());
        } else {
            viewHolder.avatarView.setVisibility(View.GONE);
        }
        headerTitle.append(DateUtils.getRelativeTimeSpanString(bean.getTimestamp()));
        viewHolder.timeTextView.setText(headerTitle.toString());
        return convertView;
    }

    class ViewHolder {
        TextView titleTextView;
        ImageView avatarView;
        TextView timeTextView;
        ImageView iconView;
    }
}
package com.huanchengfly.tieba.post.adapters;

import android.content.Context;
import android.view.View;
import android.widget.TextView;

import androidx.core.widget.TextViewCompat;

import com.huanchengfly.tieba.post.api.models.web.HotMessageListBean;
import com.huanchengfly.tieba.post.R;
import com.huanchengfly.tieba.post.utils.NavigationHelper;
import com.huanchengfly.tieba.post.utils.Util;
import com.othershe.baseadapter.ViewHolder;
import com.othershe.baseadapter.base.CommonBaseAdapter;

public class HotMessageListAdapter extends CommonBaseAdapter<HotMessageListBean.HotMessageRetBean> {
    public HotMessageListAdapter(Context context) {
        super(context, null, false);
        addHeaderView(Util.inflate(context, R.layout.header_hot_message_list));
        NavigationHelper navigationHelper = NavigationHelper.newInstance(mContext);
        setOnItemClickListener((viewHolder, hotMessageRetBean, position) -> navigationHelper.navigationByData(NavigationHelper.ACTION_URL, String.format("https://tieba.baidu.com/mo/q/hotMessage?topic_id=%1$s&topic_name=%2$s", hotMessageRetBean.getMulId(), hotMessageRetBean.getMulName())));
    }

    @Override
    protected void convert(ViewHolder viewHolder, HotMessageListBean.HotMessageRetBean hotMessageRetBean, int position) {
        viewHolder.setText(R.id.hot_order, String.valueOf(position + 1));
        viewHolder.setText(R.id.hot_title, hotMessageRetBean.getMulName());
        viewHolder.setText(R.id.hot_desc, hotMessageRetBean.getTopicInfo().getTopicDesc());
        TextView textView = viewHolder.getView(R.id.hot_order);
        if (position > 2) {
            TextViewCompat.setTextAppearance(textView, R.style.TextAppearance_Bold);
            textView.setTextColor(mContext.getResources().getColor(R.color.tieba));
        } else {
            TextViewCompat.setTextAppearance(textView, R.style.TextAppearance_Bold_Italic);
            textView.setTextColor(mContext.getResources().getColor(R.color.red_accent));
        }
        if (position > 2 || hotMessageRetBean.getTopicInfo().getTopicDesc() == null) {
            viewHolder.setVisibility(R.id.hot_desc, View.GONE);
        } else {
            viewHolder.setVisibility(R.id.hot_desc, View.VISIBLE);
        }
    }

    @Override
    protected int getItemLayoutId() {
        return R.layout.item_hot_message_list;
    }
}
package com.huanchengfly.tieba.post.adapters;

import android.app.Activity;
import android.content.Context;
import android.os.Build;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.bumptech.glide.Glide;
import com.bumptech.glide.request.RequestOptions;
import com.huanchengfly.tieba.post.R;
import com.huanchengfly.tieba.post.activities.ReplyActivity;
import com.huanchengfly.tieba.post.components.MyImageEngine;
import com.huanchengfly.tieba.post.components.MyViewHolder;
import com.huanchengfly.tieba.post.components.transformations.RadiusTransformation;
import com.huanchengfly.tieba.post.models.PhotoInfoBean;
import com.huanchengfly.tieba.post.utils.ThemeUtil;
import com.huanchengfly.tieba.post.utils.PermissionUtil;
import com.yanzhenjie.permission.Action;
import com.yanzhenjie.permission.runtime.Permission;
import com.zhihu.matisse.Matisse;
import com.zhihu.matisse.MimeType;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class InsertPhotoAdapter extends RecyclerView.Adapter<MyViewHolder> {
    public static final int TYPE_IMAGE = 0;
    public static final int TYPE_INSERT = 1;
    private static final String TAG = "InsertPhotoAdapter";
    private Context mContext;
    private List<PhotoInfoBean> fileList;

    public InsertPhotoAdapter(Context context) {
        super();
        this.mContext = context;
        this.fileList = new ArrayList<>();
    }

    public void remove(int position) {
        fileList.remove(position);
        notifyItemRemoved(position);
    }

    public void swap(int oldPosition, int newPosition) {
        Collections.swap(fileList, oldPosition, newPosition);
    }

    public List<PhotoInfoBean> getFileList() {
        return fileList;
    }

    public void setFileList(List<PhotoInfoBean> fileList) {
        this.fileList = fileList;
        notifyDataSetChanged();
    }

    @Override
    public int getItemViewType(int position) {
        if (position >= fileList.size()) return TYPE_INSERT;
        return TYPE_IMAGE;
    }

    @NonNull
    @Override
    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        if (viewType == TYPE_INSERT) {
            View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_insert_more, parent, false);
            return new MyViewHolder(view);
        }
        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_insert_image, parent, false);
        return new MyViewHolder(view);
    }

    @Override
    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {
        if (holder.getItemViewType() == TYPE_IMAGE) {
            PhotoInfoBean photoInfoBean = fileList.get(position);
            ImageView imageView = holder.getView(R.id.image_preview);
            Glide.with(mContext)
                    .load(photoInfoBean.getFileUri())
                    .apply(RequestOptions.bitmapTransform(new RadiusTransformation(mContext)))
                    .into(imageView);
        } else if (holder.getItemViewType() == TYPE_INSERT) {
            if (fileList.size() < 10) {
                holder.setItemOnClickListener((View view) -> {
                    if (mContext instanceof Activity) {
                        askPermission(data -> Matisse.from((Activity) mContext)
                                .choose(MimeType.ofImage())
                                .countable(true)
                                .maxSelectable(10 - fileList.size())
                                .theme(ThemeUtil.isNightMode(mContext) ? R.style.Matisse_Dracula : R.style.Matisse_Zhihu)
                                .imageEngine(new MyImageEngine())
                                .forResult(ReplyActivity.REQUEST_CODE_CHOOSE));
                    }
                });
            } else {
                Toast.makeText(mContext, R.string.toast_max_selectable, Toast.LENGTH_SHORT).show();
            }
        }
    }

    private void askPermission(Action<List<String>> granted) {
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {
            PermissionUtil.askPermission(mContext, granted, R.string.toast_no_permission_insert_photo,
                    new PermissionUtil.Permission(Permission.Group.STORAGE, mContext.getString(R.string.tip_permission_storage)));
        } else {
            PermissionUtil.askPermission(mContext, granted, R.string.toast_no_permission_insert_photo,
                    new PermissionUtil.Permission(Permission.READ_EXTERNAL_STORAGE, mContext.getString(R.string.tip_permission_storage)));
        }
    }

    @Override
    public int getItemCount() {
        return fileList.size() + 1;
    }

    public PhotoInfoBean getItem(int position) {
        return fileList.get(position);
    }
}package com.huanchengfly.tieba.post.adapters;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;

import androidx.annotation.LayoutRes;
import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.bumptech.glide.Glide;
import com.huanchengfly.tieba.post.api.models.ForumRecommend;
import com.huanchengfly.tieba.post.R;
import com.huanchengfly.tieba.post.components.MyLinearLayoutManager;
import com.huanchengfly.tieba.post.components.MyViewHolder;
import com.huanchengfly.tieba.post.components.dividers.HorizontalSpacesDecoration;
import com.huanchengfly.tieba.post.interfaces.OnItemClickListener;
import com.huanchengfly.tieba.post.interfaces.OnItemLongClickListener;
import com.huanchengfly.tieba.post.models.database.TopForum;
import com.huanchengfly.tieba.post.utils.DisplayUtil;
import com.huanchengfly.tieba.post.utils.ImageUtil;
import com.huanchengfly.tieba.post.utils.SharedPreferencesUtil;
import com.huanchengfly.tieba.post.utils.ThemeUtil;

import org.litepal.LitePal;

import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.List;

public class LikeForumListAdapter extends RecyclerView.Adapter<MyViewHolder> {
    public static final int TYPE_ERROR = -1;
    public static final int TYPE_TOP_FORUM_TITLE = 1;
    public static final int TYPE_TOP_FORUM = 2;
    public static final int TYPE_NORMAL_FORUM_TITLE = 3;
    public static final int TYPE_NORMAL_FORUM = 4;
    private boolean showTop;
    private boolean single;
    private WeakReference<Context> contextWeakReference;
    private List<ForumRecommend.LikeForum> topForums;
    private List<ForumRecommend.LikeForum> mLikeForums;
    private TopForumsAdapter topForumsAdapter;
    private OnItemClickListener<ForumRecommend.LikeForum> onItemClickListener;
    private OnItemLongClickListener<ForumRecommend.LikeForum> onItemLongClickListener;

    public LikeForumListAdapter(Context context) {
        contextWeakReference = new WeakReference<>(context);
        single = SharedPreferencesUtil.get(context, SharedPreferencesUtil.SP_SETTINGS).getBoolean("listSingle", false);
        mLikeForums = new ArrayList<>();
        topForums = new ArrayList<>();
        topForumsAdapter = new TopForumsAdapter(context);
        onItemClickListener = null;
        onItemLongClickListener = null;
        showTop = SharedPreferencesUtil.get(context, SharedPreferencesUtil.SP_APP_DATA).getBoolean("show_top_forum", true);
    }

    public Context getContext() {
        return contextWeakReference.get();
    }

    public void remove(int position) {
        if (position >= 0 && position < mLikeForums.size()) {
            mLikeForums.remove(position);
            notifyDataSetChanged();
        }
    }

    public OnItemClickListener<ForumRecommend.LikeForum> getOnItemClickListener() {
        return onItemClickListener;
    }

    public LikeForumListAdapter setOnItemClickListener(OnItemClickListener<ForumRecommend.LikeForum> onItemClickListener) {
        this.onItemClickListener = onItemClickListener;
        return this;
    }

    public OnItemLongClickListener<ForumRecommend.LikeForum> getOnItemLongClickListener() {
        return onItemLongClickListener;
    }

    public LikeForumListAdapter setOnItemLongClickListener(OnItemLongClickListener<ForumRecommend.LikeForum> onItemLongClickListener) {
        this.onItemLongClickListener = onItemLongClickListener;
        return this;
    }

    public boolean isHeader(int position) {
        return isForumItemTitle(position) || isTopForumItemTitle(position) || isTopForumItem(position);
    }

    @LayoutRes
    public int getItemLayoutId(int type) {
        switch (type) {
            case TYPE_TOP_FORUM_TITLE:
            case TYPE_NORMAL_FORUM_TITLE:
                return R.layout.layout_forum_list_header;
            case TYPE_TOP_FORUM:
                return R.layout.item_top_forums;
            case TYPE_NORMAL_FORUM:
                return R.layout.item_forum_list;
            default:
                return R.layout.item_empty;
        }
    }

    public boolean isShowTop() {
        return showTop;
    }

    public void setShowTop(boolean showTop) {
        this.showTop = showTop;
        SharedPreferencesUtil.get(getContext(), SharedPreferencesUtil.SP_APP_DATA).edit().putBoolean("show_top_forum", showTop).apply();
        notifyDataSetChanged();
    }

    @NonNull
    @Override
    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        return new MyViewHolder(LayoutInflater.from(getContext()).inflate(getItemLayoutId(viewType), parent, false));
    }

    public ForumRecommend.LikeForum getItem(int position) {
        return mLikeForums.get(position);
    }

    public int getSpanCount() {
        if (SharedPreferencesUtil.get(getContext(), SharedPreferencesUtil.SP_SETTINGS).getBoolean("listSingle", false)) {
            return 1;
        } else {
            return 2;
        }
    }

    @Override
    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {
        int viewType = getItemViewType(position);
        switch (viewType) {
            case TYPE_TOP_FORUM_TITLE:
                holder.setText(R.id.forum_title_text, R.string.title_top_forum);
                ImageView imageView = holder.getView(R.id.forum_title_icon);
                imageView.setVisibility(View.VISIBLE);
                imageView.setImageResource(isShowTop() ? R.drawable.ic_keyboard_arrow_down : R.drawable.ic_round_keyboard_arrow_right);
                holder.setItemOnClickListener(v -> setShowTop(!isShowTop()));
                break;
            case TYPE_NORMAL_FORUM_TITLE:
                holder.setText(R.id.forum_title_text, R.string.forum_list_title);
                holder.setVisibility(R.id.forum_title_icon, View.GONE);
                break;
            case TYPE_TOP_FORUM:
                topForumsAdapter.setOnItemClickListener(getOnItemClickListener());
                topForumsAdapter.setOnItemLongClickListener(getOnItemLongClickListener());
                RecyclerView topForumsView = holder.getView(R.id.forum_top_forums);
                topForumsView.setLayoutManager(new MyLinearLayoutManager(getContext(), MyLinearLayoutManager.HORIZONTAL, false));
                topForumsView.setAdapter(topForumsAdapter);
                topForumsView.setHasFixedSize(false);
                for (int i = 0; i < topForumsView.getItemDecorationCount(); i++) {
                    topForumsView.removeItemDecorationAt(i);
                }
                int dp16 = DisplayUtil.dp2px(getContext(), 16);
                int dp8 = DisplayUtil.dp2px(getContext(), 8);
                topForumsView.addItemDecoration(new HorizontalSpacesDecoration(dp8, dp8, dp16, dp16));
                break;
            case TYPE_NORMAL_FORUM:
                int realPosition = position - getTopForumItemCount() - 1;
                int padding = DisplayUtil.dp2px(getContext(), 18);
                int dp12 = DisplayUtil.dp2px(getContext(), 12);
                if (getSpanCount() == 1) {
                    holder.itemView.setPaddingRelative(padding, dp12, padding, dp12);
                } else if (realPosition % getSpanCount() == 0) {
                    holder.itemView.setPaddingRelative(padding, dp12, (int) (padding / 1.5), dp12);
                } else {
                    holder.itemView.setPaddingRelative((int) (padding / 1.5), dp12, padding, dp12);
                }
                if (realPosition >= 0) {
                    ForumRecommend.LikeForum likeForum = mLikeForums.get(realPosition);
                    holder.setItemOnClickListener(v -> {
                        if (getOnItemClickListener() != null) {
                            getOnItemClickListener().onClick(holder.itemView, likeForum, position, viewType);
                        }
                    });
                    holder.setItemOnLongClickListener(v -> {
                        if (getOnItemLongClickListener() != null) {
                            return getOnItemLongClickListener().onLongClick(holder.itemView, likeForum, position, viewType);
                        }
                        return false;
                    });
                    ImageView avatarView = holder.getView(R.id.forum_list_item_avatar);
                    if (isSingle()) {
                        avatarView.setVisibility(View.VISIBLE);
                        ImageUtil.load(avatarView, ImageUtil.LOAD_TYPE_AVATAR, likeForum.getAvatar());
                    } else {
                        avatarView.setVisibility(View.GONE);
                        Glide.with(getContext())
                                .clear(avatarView);
                    }
                    ThemeUtil.setChipThemeByLevel(likeForum.getLevelId(),
                            holder.getView(R.id.forum_list_item_status),
                            holder.getView(R.id.forum_list_item_level),
                            holder.getView(R.id.forum_list_item_sign_status));
                    holder.setText(R.id.forum_list_item_name, likeForum.getForumName());
                    holder.setText(R.id.forum_list_item_level, likeForum.getLevelId());
                    holder.setVisibility(R.id.forum_list_item_sign_status, "1".equals(likeForum.isSign()) ? View.VISIBLE : View.GONE);
                    holder.getView(R.id.forum_list_item_status).setMinimumWidth(DisplayUtil.dp2px(getContext(), "1".equals(likeForum.isSign()) ? 50 : 32));
                }
                break;
        }
    }

    private boolean isTopForumItemTitle(int position) {
        return position < getTopForumItemCount() && position == 0;
    }

    private boolean isTopForumItem(int position) {
        return position < getTopForumItemCount() && position > 0;
    }

    private boolean isForumItemTitle(int position) {
        return position == getTopForumItemCount();
    }

    private boolean isForumItem(int position) {
        return position > getTopForumItemCount();
    }

    @Override
    public int getItemViewType(int position) {
        if (isTopForumItemTitle(position)) {
            return TYPE_TOP_FORUM_TITLE;
        } else if (isTopForumItem(position)) {
            return TYPE_TOP_FORUM;
        } else if (isForumItemTitle(position)) {
            return TYPE_NORMAL_FORUM_TITLE;
        } else if (isForumItem(position)) {
            return TYPE_NORMAL_FORUM;
        }
        return TYPE_ERROR;
    }

    @Override
    public int getItemCount() {
        return getTopForumItemCount() + getForumItemCount();
    }

    public int getTopForumItemCount() {
        if (topForums.size() <= 0) {
            return 0;
        }
        if (!isShowTop()) {
            return 1;
        }
        return 2;
    }

    public int getForumItemCount() {
        if (mLikeForums.size() <= 0) {
            return 0;
        }
        return mLikeForums.size() + 1;
    }

    public void setData(List<ForumRecommend.LikeForum> likeForums) {
        if (likeForums == null) likeForums = new ArrayList<>();
        List<ForumRecommend.LikeForum> normal = new ArrayList<>();
        this.topForums = new ArrayList<>();
        List<TopForum> topForums = LitePal.findAll(TopForum.class);
        List<String> topIdList = new ArrayList<>();
        List<ForumRecommend.LikeForum> topList = new ArrayList<>();
        for (TopForum topForum : topForums) {
            topIdList.add(topForum.getForumId());
        }
        for (ForumRecommend.LikeForum likeForum : likeForums) {
            if (topIdList.contains(likeForum.getForumId())) {
                topList.add(likeForum);
                if (SharedPreferencesUtil.get(getContext(), SharedPreferencesUtil.SP_SETTINGS).getBoolean("show_top_forum_in_normal_list", true)) {
                    normal.add(likeForum);
                }
            } else {
                normal.add(likeForum);
            }
        }
        this.topForums = topList;
        this.mLikeForums = normal;
        topForumsAdapter.setData(this.topForums);
        notifyDataSetChanged();
    }

    public boolean isSingle() {
        return single;
    }

    public LikeForumListAdapter setSingle(boolean single) {
        this.single = single;
        notifyDataSetChanged();
        return this;
    }
}
package com.huanchengfly.tieba.post.adapters;

import android.content.Context;
import android.text.TextUtils;
import android.view.ViewGroup;
import android.widget.Filter;
import android.widget.Filterable;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.huanchengfly.tieba.post.R;
import com.huanchengfly.tieba.post.components.MyViewHolder;
import com.huanchengfly.tieba.post.models.database.SearchHistory;

import org.litepal.LitePal;

import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.List;

public class MainSearchAdapter extends RecyclerView.Adapter<MyViewHolder> implements Filterable {
    public static final String TAG = MainSearchAdapter.class.getSimpleName();
    private static final int TYPE_HISTORY = 0;
    private static final int TYPE_ACTION_CLEAR_ALL = 1;
    private WeakReference<Context> mContextWeakReference;
    private List<SearchHistory> mHistoryList;
    private List<SearchHistory> mResult;
    private String mConstraint;
    private OnSearchItemClickListener mListener;

    public MainSearchAdapter(Context context) {
        mContextWeakReference = new WeakReference<>(context);
        mResult = new ArrayList<>();
        refreshData();
    }

    public OnSearchItemClickListener getOnSearchItemClickListener() {
        return mListener;
    }

    public void setOnSearchItemClickListener(OnSearchItemClickListener onSearchItemClickListener) {
        this.mListener = onSearchItemClickListener;
    }

    public Context getContext() {
        return mContextWeakReference.get();
    }

    @NonNull
    @Override
    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        if (viewType == TYPE_ACTION_CLEAR_ALL) {
            return new MyViewHolder(getContext(), R.layout.item_action);
        }
        return new MyViewHolder(getContext(), R.layout.item_search_history);
    }

    @Override
    public int getItemViewType(int position) {
        if (position == mResult.size()) {
            return TYPE_ACTION_CLEAR_ALL;
        }
        return TYPE_HISTORY;
    }

    public void refreshData() {
        mHistoryList = LitePal.order("timestamp DESC").find(SearchHistory.class);
        if (!TextUtils.isEmpty(mConstraint)) {
            getFilter().filter(mConstraint);
        } else {
            notifyDataSetChanged();
        }
    }

    @Override
    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {
        if (getItemViewType(position) == TYPE_ACTION_CLEAR_ALL) {
            holder.setItemOnClickListener(v -> LitePal.deleteAllAsync(SearchHistory.class).listen(rowsAffected -> {
                mHistoryList = new ArrayList<>();
                mResult = new ArrayList<>();
                notifyDataSetChanged();
            }));
        } else {
            SearchHistory item = mResult.get(position);
            holder.setText(R.id.history_item_title, item.getContent());
            holder.setItemOnClickListener(v -> {
                if (getOnSearchItemClickListener() != null) {
                    getOnSearchItemClickListener().onSearchItemClick(position, item.getContent());
                }
            });
        }
    }

    @Override
    public int getItemCount() {
        if (mResult.size() == 0) {
            return 0;
        }
        if (!TextUtils.isEmpty(mConstraint)) {
            return mResult.size();
        }
        return mResult.size() + 1;
    }

    public void setData(List<SearchHistory> list) {
        mResult = list;
        notifyDataSetChanged();
    }

    @Override
    public Filter getFilter() {
        return new Filter() {
            @Override
            protected FilterResults performFiltering(CharSequence constraint) {
                FilterResults filterResults = new FilterResults();
                mConstraint = constraint.toString().toLowerCase();

                if (!TextUtils.isEmpty(mConstraint)) {
                    List<SearchHistory> history = new ArrayList<>();
                    List<SearchHistory> results = new ArrayList<>();

                    if (!mHistoryList.isEmpty()) {
                        history.addAll(mHistoryList);
                    }

                    for (SearchHistory item : history) {
                        String string = item.getContent().toLowerCase();
                        if (string.contains(mConstraint)) {
                            results.add(item);
                        }
                    }
                    if (results.size() > 0) {
                        filterResults.values = results;
                        filterResults.count = results.size();
                    }
                } else {
                    if (!mHistoryList.isEmpty()) {
                        filterResults.values = mHistoryList;
                        filterResults.count = mHistoryList.size();
                    }
                }
                return filterResults;
            }

            @Override
            protected void publishResults(CharSequence constraint, FilterResults results) {
                if (results.count > 0) {
                    List<SearchHistory> dataSet = new ArrayList<>();
                    List<?> resultSet = (List<?>) results.values;
                    int size = results.count < 8 ? results.count : 8;

                    for (int i = 0; i < size; i++) {
                        if (resultSet.get(i) instanceof SearchHistory) {
                            dataSet.add((SearchHistory) resultSet.get(i));
                        }
                    }

                    setData(dataSet);
                }
            }
        };
    }

    public interface OnSearchItemClickListener {
        void onSearchItemClick(int position, CharSequence content);
    }
}
package com.huanchengfly.tieba.post.adapters;

import android.app.Activity;
import android.content.Context;
import android.text.format.DateUtils;
import android.widget.TextView;
import androidx.annotation.NonNull;
import com.bumptech.glide.request.RequestOptions;
import com.huanchengfly.tieba.post.api.models.MessageListBean;
import com.huanchengfly.tieba.post.R;
import com.huanchengfly.tieba.post.fragments.BaseFragment;
import com.huanchengfly.tieba.post.fragments.MessageFragment;
import com.huanchengfly.tieba.post.utils.EmotionUtil;
import com.huanchengfly.tieba.post.utils.ImageUtil;
import com.huanchengfly.tieba.post.utils.NavigationHelper;
import com.huanchengfly.tieba.post.utils.StringUtil;
import com.othershe.baseadapter.ViewHolder;
import com.othershe.baseadapter.base.CommonBaseAdapter;

import java.util.HashMap;

public class MessageListAdapter extends CommonBaseAdapter<MessageListBean.MessageInfoBean> {
    private int type;

    private NavigationHelper navigationHelper;

    private RequestOptions avatarRequestOptions;

    public MessageListAdapter(@NonNull Context context, int type) {
        super(context, null, true);
        this.type = type;
        this.navigationHelper = NavigationHelper.newInstance(context);
        this.avatarRequestOptions = new RequestOptions()
                .placeholder(R.drawable.bg_placeholder_circle)
                .circleCrop()
                .skipMemoryCache(true);
    }

    public MessageListAdapter(@NonNull BaseFragment fragment, int type) {
        this(fragment.getAttachContext(), type);
    }

    public void setData(MessageListBean messageListBean) {
        if (type == MessageFragment.TYPE_REPLY_ME) {
            setNewData(messageListBean.getReplyList());
        } else if (type == MessageFragment.TYPE_AT_ME) {
            setNewData(messageListBean.getAtList());
        }
    }

    public void addData(MessageListBean messageListBean) {
        if (type == MessageFragment.TYPE_REPLY_ME) {
            setLoadMoreData(messageListBean.getReplyList());
        } else if (type == MessageFragment.TYPE_AT_ME) {
            setLoadMoreData(messageListBean.getAtList());
        }
    }

    @Override
    protected int getItemLayoutId() {
        return R.layout.item_message_list;
    }

    @Override
    protected void convert(ViewHolder viewHolder, MessageListBean.MessageInfoBean messageInfoBean, int i) {
        ImageUtil.load(viewHolder.getView(R.id.message_list_item_user_avatar), ImageUtil.LOAD_TYPE_AVATAR, messageInfoBean.getReplyer().getPortrait());
        viewHolder.setOnClickListener(R.id.message_list_item_user_avatar, view -> NavigationHelper.toUserSpaceWithAnim(mContext, messageInfoBean.getReplyer().getId(), StringUtil.getAvatarUrl(messageInfoBean.getReplyer().getPortrait()), view));
        viewHolder.setOnClickListener(R.id.message_list_item_user_name, view -> NavigationHelper.toUserSpaceWithAnim(mContext, messageInfoBean.getReplyer().getId(), StringUtil.getAvatarUrl(messageInfoBean.getReplyer().getPortrait()), view));
        viewHolder.setOnClickListener(R.id.message_list_item_main, view -> {
            HashMap<String, String> hashMap = new HashMap<>();
            hashMap.put("tid", messageInfoBean.getThreadId());
            hashMap.put("spid", messageInfoBean.getPostId());
            if (messageInfoBean.isFloor().equals("1")) {
                navigationHelper.navigationByData(NavigationHelper.ACTION_FLOOR, hashMap);
            } else {
                hashMap.put("pid", messageInfoBean.getPostId());
                navigationHelper.navigationByData(NavigationHelper.ACTION_THREAD, hashMap);
            }
        });
        viewHolder.setText(R.id.message_list_item_user_name, StringUtil.getUsernameString(mContext, messageInfoBean.getReplyer().getName(), messageInfoBean.getReplyer().getNameShow()));
        viewHolder.setText(R.id.message_list_item_user_time, String.valueOf(DateUtils.getRelativeTimeSpanString(Long.valueOf(messageInfoBean.getTime()) * 1000L)));
        TextView contentTextView = viewHolder.getView(R.id.message_list_item_content);
        contentTextView.setText(StringUtil.getEmotionContent(EmotionUtil.EMOTION_ALL_TYPE, contentTextView, messageInfoBean.getContent()));
        TextView textView = viewHolder.getView(R.id.message_list_item_quote);
        if (type == MessageFragment.TYPE_REPLY_ME) {
            if (messageInfoBean.isFloor().equals("1"))
                textView.setText(StringUtil.getEmotionContent(EmotionUtil.EMOTION_ALL_TYPE, textView, messageInfoBean.getQuoteContent()));
            else
                textView.setText(StringUtil.getEmotionContent(EmotionUtil.EMOTION_ALL_TYPE, textView, mContext.getString(R.string.text_message_list_item_reply_my_thread, messageInfoBean.getTitle())));
        } else {
            textView.setText(StringUtil.getEmotionContent(EmotionUtil.EMOTION_ALL_TYPE, textView, mContext.getString(R.string.text_message_list_item_reply_my_thread, messageInfoBean.getTitle())));
        }
        viewHolder.setText(R.id.message_list_item_source, mContext.getString(R.string.text_message_list_item_source, messageInfoBean.getForumName()));
    }

    private boolean canLoadGlide() {
        if (mContext instanceof Activity) {
            return !((Activity) mContext).isDestroyed();
        }
        return false;
    }
}
package com.huanchengfly.tieba.post.adapters;

import android.content.Context;
import android.content.Intent;
import android.text.TextUtils;
import android.text.format.DateUtils;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.cardview.widget.CardView;
import androidx.gridlayout.widget.GridLayout;
import com.bumptech.glide.Glide;
import com.huanchengfly.tieba.post.api.models.ForumPageBean;
import com.huanchengfly.tieba.post.api.models.PersonalizedBean;
import com.huanchengfly.tieba.post.activities.HotMessageListActivity;
import com.huanchengfly.tieba.post.BaseApplication;
import com.huanchengfly.tieba.post.R;
import com.huanchengfly.tieba.post.components.dialogs.DislikeDialog;
import com.huanchengfly.tieba.post.models.PhotoViewBean;
import com.huanchengfly.tieba.post.utils.*;
import com.huanchengfly.tieba.post.widgets.MarkedImageView;
import com.huanchengfly.tieba.post.widgets.VideoPlayerStandard;
import com.othershe.baseadapter.ViewHolder;
import com.othershe.baseadapter.base.MultiBaseAdapter;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PersonalizedFeedAdapter extends MultiBaseAdapter<PersonalizedBean.ThreadBean> {
    public static final int TYPE_THREAD_COMMON = 11;
    public static final int TYPE_THREAD_SINGLE_PIC = 12;
    public static final int TYPE_THREAD_MULTI_PIC = 13;
    public static final int TYPE_THREAD_VIDEO = 14;

    private NavigationHelper navigationHelper;
    private PersonalizedBean personalizedBean;

    private int refreshPosition;
    private OnRefreshListener onRefreshListener;

    public PersonalizedFeedAdapter(Context context) {
        super(context, null, true);
        refreshPosition = -1;
        setLoadingView(R.layout.layout_footer_loading);
        setLoadEndView(R.layout.layout_footer_loadend);
        setLoadFailedView(R.layout.layout_footer_load_failed);
        View header = Util.inflate(context, R.layout.header_feed);
        View hotMessage = header.findViewById(R.id.hot_message);
        hotMessage.setOnClickListener(v -> context.startActivity(new Intent(context, HotMessageListActivity.class)));
        addHeaderView(header);
        navigationHelper = NavigationHelper.newInstance(context);
    }

    public OnRefreshListener getOnRefreshListener() {
        return onRefreshListener;
    }

    public PersonalizedFeedAdapter setOnRefreshListener(OnRefreshListener onRefreshListener) {
        this.onRefreshListener = onRefreshListener;
        return this;
    }

    public int getRefreshPosition() {
        return refreshPosition;
    }

    public void setRefreshPosition(int refreshPosition) {
        this.refreshPosition = refreshPosition;
    }

    private int getMaxWidth() {
        return BaseApplication.ScreenInfo.EXACT_SCREEN_WIDTH - DisplayUtil.dp2px(mContext, 40);
    }

    private int getGridHeight() {
        return (BaseApplication.ScreenInfo.EXACT_SCREEN_WIDTH - DisplayUtil.dp2px(mContext, 70)) / 3;
    }

    private RelativeLayout.LayoutParams getLayoutParams(RelativeLayout.LayoutParams layoutParams) {
        layoutParams.width = getMaxWidth();
        layoutParams.height = (int) (getMaxWidth() * 0.5625);
        return layoutParams;
    }

    private ViewGroup.LayoutParams getGridLayoutParams(ViewGroup.LayoutParams layoutParams) {
        layoutParams.height = getGridHeight();
        return layoutParams;
    }

    private void setListenerForImageView(List<ForumPageBean.MediaInfoBean> mediaInfoBeans, ImageView imageView, int position) {
        List<PhotoViewBean> photoViewBeans = new ArrayList<>();
        for (ForumPageBean.MediaInfoBean media : mediaInfoBeans) {
            photoViewBeans.add(new PhotoViewBean(ImageUtil.getNonNullString(media.getSrcPic(), media.getOriginPic()),
                    ImageUtil.getNonNullString(media.getOriginPic(), media.getSrcPic()),
                    "1".equals(media.getShowOriginalBtn())));
        }
        ImageUtil.initImageView(imageView, photoViewBeans, position);
    }

    public void setData(PersonalizedBean personalizedBean) {
        this.personalizedBean = personalizedBean;
    }

    private void load(ForumPageBean.MediaInfoBean mediaInfoBean, ImageView imageView) {
        imageView.setVisibility(View.VISIBLE);
        String url = ImageUtil.getUrl(mContext, true, mediaInfoBean.getOriginPic(), mediaInfoBean.getSrcPic());
        if ("3".equals(mediaInfoBean.getType())) {
            ImageUtil.load(imageView, ImageUtil.LOAD_TYPE_NO_RADIUS, url);
        }
    }

    @Override
    protected void convert(ViewHolder viewHolder, PersonalizedBean.ThreadBean threadBean, int position, int viewType) {
        View refreshTip = viewHolder.getView(R.id.feed_refresh_tip);
        if (position == getRefreshPosition()) {
            refreshTip.setVisibility(View.VISIBLE);
            refreshTip.setOnClickListener(v -> {
                if (getOnRefreshListener() != null) {
                    getOnRefreshListener().onRefresh();
                }
            });
        } else {
            refreshTip.setVisibility(View.GONE);
        }
        viewHolder.setText(R.id.forum_item_comment_count_text, threadBean.getReplyNum());
        viewHolder.setVisibility(R.id.dislike, View.VISIBLE);
        if (threadBean.getThreadPersonalizedBean() == null) {
            viewHolder.setVisibility(R.id.dislike, View.INVISIBLE);
        } else {
            viewHolder.setVisibility(R.id.dislike, View.VISIBLE);
        }
        viewHolder.setOnClickListener(R.id.dislike, v -> {
            if (threadBean.getThreadPersonalizedBean() == null || threadBean.getThreadPersonalizedBean().getDislikeResource() == null) {
                if (position <= refreshPosition && refreshPosition > -1) {
                    refreshPosition -= 1;
                    if (position == (refreshPosition + 1)) {
                        notifyItemChanged(position);
                    }
                    if (refreshPosition > -1) {
                        notifyItemChanged(refreshPosition);
                    }
                }
                remove(position);
            } else {
                DislikeDialog dislikeDialog = new DislikeDialog(mContext, threadBean.getThreadPersonalizedBean(), threadBean.getForumId());
                dislikeDialog.setOnSubmitListener(() -> {
                    if (position <= refreshPosition && refreshPosition > -1) {
                        refreshPosition -= 1;
                        if (position == (refreshPosition + 1)) {
                            notifyItemChanged(position);
                        }
                        if (refreshPosition > -1) {
                            notifyItemChanged(refreshPosition);
                        }
                    }
                    remove(position);
                });
                dislikeDialog.show();
            }
        });
        if ("1".equals(threadBean.isGood())) {
            viewHolder.setVisibility(R.id.forum_item_good_tip, View.VISIBLE);
        } else {
            viewHolder.setVisibility(R.id.forum_item_good_tip, View.GONE);
        }
        viewHolder.setOnClickListener(R.id.forum_item, view -> {
            Map<String, String> map = new HashMap<>();
            map.put("tid", threadBean.getTid());
            navigationHelper.navigationByData(NavigationHelper.ACTION_THREAD, map);
        });
        if ("1".equals(threadBean.isNoTitle())) {
            viewHolder.setVisibility(R.id.forum_item_title_holder, View.GONE);
        } else {
            viewHolder.setVisibility(R.id.forum_item_title_holder, View.VISIBLE);
            viewHolder.setText(R.id.forum_item_title, threadBean.getTitle());
        }
        TextView textView = viewHolder.getView(R.id.forum_item_content_text);
        if (threadBean.getAbstractBeans().size() > 0 && "0".equals(threadBean.getAbstractBeans().get(0).getType())) {
            if (TextUtils.isEmpty(threadBean.getAbstractBeans().get(0).getText())) {
                textView.setText(null);
                textView.setVisibility(View.GONE);
            } else {
                textView.setVisibility(View.VISIBLE);
                textView.setText(threadBean.getAbstractBeans().get(0).getText());
            }
        } else {
            textView.setText(null);
            textView.setVisibility(View.GONE);
        }
        PersonalizedBean.AuthorBean authorBean = threadBean.getAuthor();
        if (authorBean != null) {
            viewHolder.setOnClickListener(R.id.forum_item_user_avatar, v -> NavigationHelper.toUserSpaceWithAnim(mContext, authorBean.getId(), authorBean.getPortrait(), v));
            viewHolder.setText(R.id.forum_item_user_name, authorBean.getNameShow());
            viewHolder.setText(R.id.forum_item_user_time, String.valueOf(DateUtils.getRelativeTimeSpanString(Long.valueOf(threadBean.getLastTimeInt()) * 1000L)));
            ImageUtil.load(viewHolder.getView(R.id.forum_item_user_avatar), ImageUtil.LOAD_TYPE_AVATAR, authorBean.getPortrait());
        }
        switch (viewType) {
            case TYPE_THREAD_SINGLE_PIC:
                if (Util.canLoadGlide(mContext) && "3".equals(threadBean.getMedia().get(0).getType())) {
                    ImageView imageView = viewHolder.getView(R.id.forum_item_content_pic);
                    imageView.setLayoutParams(getLayoutParams((RelativeLayout.LayoutParams) imageView.getLayoutParams()));
                    setListenerForImageView(threadBean.getMedia(), imageView, 0);
                    ForumPageBean.MediaInfoBean mediaInfoBean = threadBean.getMedia().get(0);
                    ImageUtil.load(imageView, ImageUtil.LOAD_TYPE_SMALL_PIC, ImageUtil.getUrl(mContext, true, mediaInfoBean.getOriginPic(), mediaInfoBean.getSrcPic()));
                }
                break;
            case TYPE_THREAD_MULTI_PIC:
                GridLayout gridLayout = viewHolder.getView(R.id.forum_item_content_pics);
                CardView cardView = viewHolder.getView(R.id.forum_item_content_pics_card);
                cardView.setRadius(DisplayUtil.dp2px(mContext, SharedPreferencesUtil.get(mContext, SharedPreferencesUtil.SP_SETTINGS).getInt("radius", 8)));
                MarkedImageView firstImageView = viewHolder.getView(R.id.forum_item_content_pic_1);
                MarkedImageView secondImageView = viewHolder.getView(R.id.forum_item_content_pic_2);
                MarkedImageView thirdImageView = viewHolder.getView(R.id.forum_item_content_pic_3);
                gridLayout.setLayoutParams(getGridLayoutParams(gridLayout.getLayoutParams()));
                int size = threadBean.getMedia().size();
                if (size >= 1) {
                    setListenerForImageView(threadBean.getMedia(), firstImageView, 0);
                    ForumPageBean.MediaInfoBean firstMedia = threadBean.getMedia().get(0);
                    load(firstMedia, firstImageView);
                } else {
                    firstImageView.setVisibility(View.GONE);
                    Glide.with(mContext)
                            .clear(firstImageView);
                }
                if (size >= 2) {
                    setListenerForImageView(threadBean.getMedia(), secondImageView, 1);
                    ForumPageBean.MediaInfoBean secondMedia = threadBean.getMedia().get(1);
                    load(secondMedia, secondImageView);
                } else {
                    secondImageView.setVisibility(View.GONE);
                    Glide.with(mContext)
                            .clear(secondImageView);
                }
                if (size >= 3) {
                    setListenerForImageView(threadBean.getMedia(), thirdImageView, 2);
                    ForumPageBean.MediaInfoBean thirdMedia = threadBean.getMedia().get(2);
                    load(thirdMedia, thirdImageView);
                } else {
                    thirdImageView.setVisibility(View.GONE);
                    Glide.with(mContext)
                            .clear(thirdImageView);
                }
                if (size > 3) {
                    viewHolder.setVisibility(R.id.forum_item_content_pic_badge, View.VISIBLE);
                    viewHolder.setText(R.id.forum_item_content_pic_badge_text, String.valueOf(size));
                } else {
                    viewHolder.setVisibility(R.id.forum_item_content_pic_badge, View.GONE);
                }
                break;
            case TYPE_THREAD_VIDEO:
                if (threadBean.getVideoInfo() == null) {
                    break;
                }
                VideoPlayerStandard videoPlayerStandard = viewHolder.getView(R.id.forum_item_content_video);
                videoPlayerStandard.setLayoutParams(getLayoutParams((RelativeLayout.LayoutParams) videoPlayerStandard.getLayoutParams()));
                videoPlayerStandard.setUp(threadBean.getVideoInfo().getVideoUrl(), "");
                ImageUtil.load(videoPlayerStandard.posterImageView, ImageUtil.LOAD_TYPE_SMALL_PIC, threadBean.getVideoInfo().getThumbnailUrl(), true);
                break;
        }
        if (!TextUtils.isEmpty(threadBean.getForumName()))
            viewHolder.setText(R.id.forum_item_forum_name, mContext.getString(R.string.tip_forum_name, threadBean.getForumName()));
        else
            viewHolder.setText(R.id.forum_item_forum_name, "");
    }

    @Override
    protected int getItemLayoutId(int viewType) {
        switch (viewType) {
            case TYPE_THREAD_COMMON:
                return R.layout.item_forum_thread_common;
            case TYPE_THREAD_VIDEO:
                return R.layout.item_forum_thread_video;
            case TYPE_THREAD_SINGLE_PIC:
                return R.layout.item_forum_thread_single_pic;
            case TYPE_THREAD_MULTI_PIC:
                return R.layout.item_forum_thread_multi_pic;
        }
        return R.layout.item_forum_thread_common;
    }

    @Override
    protected int getViewType(int position, PersonalizedBean.ThreadBean threadBean) {
        if (threadBean.getVideoInfo() != null) {
            return TYPE_THREAD_VIDEO;
        }
        if (threadBean.getMedia() == null) {
            return TYPE_THREAD_COMMON;
        }
        if (threadBean.getMedia().size() == 1) {
            return TYPE_THREAD_SINGLE_PIC;
        }
        if (threadBean.getMedia().size() > 1) {
            return TYPE_THREAD_MULTI_PIC;
        }
        return TYPE_THREAD_COMMON;
    }

    public interface OnRefreshListener {
        void onRefresh();
    }
}
package com.huanchengfly.tieba.post.adapters;

import android.annotation.SuppressLint;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentActivity;
import androidx.viewpager2.adapter.FragmentStateAdapter;

import com.huanchengfly.tieba.post.fragments.PhotoViewFragment;
import com.huanchengfly.tieba.post.models.PhotoViewBean;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

public class PhotoViewAdapter extends FragmentStateAdapter {
    private List<PhotoViewBean> mList;

    @SuppressLint("WrongConstant")
    public PhotoViewAdapter(@NonNull FragmentActivity fragmentActivity, List<PhotoViewBean> list) {
        super(fragmentActivity);
        mList = new ArrayList<>(list);
    }

    public PhotoViewBean getBean(int position) {
        return mList.get(position);
    }

    public List<PhotoViewBean> getData() {
        return mList;
    }

    public void insert(Collection<? extends PhotoViewBean> photoViewBeans) {
        insert(mList.size(), photoViewBeans);
    }

    public void insert(int position, Collection<? extends PhotoViewBean> photoViewBeans) {
        if (position <= mList.size() && position >= 0) {
            mList.addAll(position, photoViewBeans);
            this.notifyItemRangeInserted(position, photoViewBeans.size());
            this.notifyItemRangeChanged(position, mList.size() - position);
        }
    }

    public void insert(PhotoViewBean photoViewBean) {
        insert(mList.size(), photoViewBean);
    }

    public void insert(int position, PhotoViewBean photoViewBean) {
        if (position <= mList.size() && position >= 0) {
            mList.add(position, photoViewBean);
            this.notifyItemInserted(position);
            this.notifyItemRangeChanged(position, mList.size() - position);
        }
    }

    @NonNull
    @Override
    public Fragment createFragment(int position) {
        return PhotoViewFragment.newInstance(mList.get(position));
    }

    @Override
    public int getItemCount() {
        return mList.size();
    }
}
package com.huanchengfly.tieba.post.adapters;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.text.SpannableStringBuilder;
import android.text.Spanned;
import android.text.TextUtils;
import android.text.format.DateUtils;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.bumptech.glide.request.RequestOptions;
import com.huanchengfly.tieba.post.R;
import com.huanchengfly.tieba.post.activities.BaseActivity;
import com.huanchengfly.tieba.post.activities.ReplyActivity;
import com.huanchengfly.tieba.post.api.TiebaApi;
import com.huanchengfly.tieba.post.api.models.CommonResponse;
import com.huanchengfly.tieba.post.api.models.SubFloorListBean;
import com.huanchengfly.tieba.post.api.models.ThreadContentBean;
import com.huanchengfly.tieba.post.components.LinkMovementClickMethod;
import com.huanchengfly.tieba.post.components.LinkTouchMovementMethod;
import com.huanchengfly.tieba.post.components.spans.MyURLSpan;
import com.huanchengfly.tieba.post.components.spans.MyUserSpan;
import com.huanchengfly.tieba.post.fragments.ConfirmDialogFragment;
import com.huanchengfly.tieba.post.fragments.MenuDialogFragment;
import com.huanchengfly.tieba.post.models.PhotoViewBean;
import com.huanchengfly.tieba.post.models.ReplyInfoBean;
import com.huanchengfly.tieba.post.utils.AccountUtil;
import com.huanchengfly.tieba.post.utils.BilibiliUtil;
import com.huanchengfly.tieba.post.utils.EmotionUtil;
import com.huanchengfly.tieba.post.utils.ImageUtil;
import com.huanchengfly.tieba.post.utils.NavigationHelper;
import com.huanchengfly.tieba.post.utils.StringUtil;
import com.huanchengfly.tieba.post.utils.ThemeUtil;
import com.huanchengfly.tieba.post.utils.Util;
import com.huanchengfly.tieba.post.widgets.MyLinearLayout;
import com.huanchengfly.tieba.post.widgets.VoicePlayerView;
import com.huanchengfly.tieba.post.widgets.theme.TintMySpannableTextView;
import com.huanchengfly.tieba.post.widgets.theme.TintTextView;
import com.othershe.baseadapter.ViewHolder;
import com.othershe.baseadapter.base.CommonBaseAdapter;

import org.jetbrains.annotations.NotNull;

import java.util.ArrayList;
import java.util.List;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class RecyclerFloorAdapter extends CommonBaseAdapter<SubFloorListBean.PostInfo> {
    public static final String TAG = "RecyclerFloorAdapter";
    private static final int TEXT_VIEW_TYPE_CONTENT = 0;
    private NavigationHelper navigationHelper;
    private RequestOptions avatarRequestOptions;
    private LinearLayout.LayoutParams defaultLayoutParams;
    private RequestOptions defaultRequestOptions;
    private Float maxWidth;
    private SubFloorListBean dataBean;

    public RecyclerFloorAdapter(Context context) {
        super(context, null, true);
        setOnItemClickListener((viewHolder, postInfo, position) -> {
            int floor = Integer.parseInt(dataBean.getPost().getFloor());
            int pn = floor - (floor % 30);
            ThreadContentBean.UserInfoBean userInfoBean = postInfo.getAuthor();
            mContext.startActivity(new Intent(mContext, ReplyActivity.class)
                    .putExtra("data", new ReplyInfoBean(dataBean.getThread().getId(),
                            dataBean.getForum().getId(),
                            dataBean.getForum().getName(),
                            dataBean.getAnti().getTbs(),
                            dataBean.getPost().getId(),
                            postInfo.getId(),
                            dataBean.getPost().getFloor(),
                            userInfoBean != null ? userInfoBean.getNameShow() : "",
                            AccountUtil.getLoginInfo(mContext).getNameShow()).setPn(String.valueOf(pn)).toString()));
        });
        avatarRequestOptions = new RequestOptions()
                .placeholder(R.drawable.bg_placeholder_circle)
                .circleCrop()
                .skipMemoryCache(true);
        navigationHelper = NavigationHelper.newInstance(mContext);
        DisplayMetrics dm = mContext.getResources().getDisplayMetrics();
        maxWidth = (float) dm.widthPixels;
        defaultLayoutParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
        defaultLayoutParams.setMargins(0, 8, 0, 8);
        defaultRequestOptions = new RequestOptions()
                .placeholder(R.drawable.bg_placeholder)
                .skipMemoryCache(true);
    }

    public void setData(SubFloorListBean data) {
        dataBean = data;
        data.getSubPostList().add(0, data.getPost());
        setNewData(data.getSubPostList());
    }

    public void addData(SubFloorListBean data) {
        dataBean = data;
        setLoadMoreData(data.getSubPostList());
    }

    private void showMenu(SubFloorListBean.PostInfo postInfo, int position) {
        ThreadContentBean.UserInfoBean userInfoBean = postInfo.getAuthor();
        MenuDialogFragment.newInstance(R.menu.menu_thread_item, null)
                .setOnNavigationItemSelectedListener(item -> {
                    switch (item.getItemId()) {
                        case R.id.menu_reply:
                            int floor = Integer.parseInt(dataBean.getPost().getFloor());
                            int pn = floor - (floor % 30);
                            String replyData = new ReplyInfoBean(dataBean.getThread().getId(),
                                    dataBean.getForum().getId(),
                                    dataBean.getForum().getName(),
                                    dataBean.getAnti().getTbs(),
                                    dataBean.getPost().getId(),
                                    postInfo.getId(),
                                    dataBean.getPost().getFloor(),
                                    userInfoBean != null ? userInfoBean.getNameShow() : "",
                                    AccountUtil.getLoginInfo(mContext).getNameShow()).setPn(String.valueOf(pn)).toString();
                            Log.i(TAG, "convert: " + replyData);
                            mContext.startActivity(new Intent(mContext, ReplyActivity.class)
                                    .putExtra("data", replyData));
                            return true;
                        case R.id.menu_report:
                            navigationHelper.navigationByData(NavigationHelper.ACTION_URL, mContext.getString(R.string.url_post_report, dataBean.getForum().getId(), dataBean.getThread().getId(), postInfo.getId()));
                            return true;
                        case R.id.menu_copy:
                            StringBuilder stringBuilder = new StringBuilder();
                            for (ThreadContentBean.ContentBean contentBean : postInfo.getContent()) {
                                switch (contentBean.getType()) {
                                    case "2":
                                        contentBean.setText("#(" + contentBean.getC() + ")");
                                        break;
                                    case "3":
                                    case "20":
                                        contentBean.setText("[图片]\n");
                                        break;
                                    case "10":
                                        contentBean.setText("[语音]\n");
                                        break;
                                }
                                if (contentBean.getText() != null) {
                                    stringBuilder.append(contentBean.getText());
                                }
                            }
                            Util.showCopyDialog((BaseActivity) mContext, stringBuilder.toString(), postInfo.getId());
                            return true;
                        case R.id.menu_delete:
                            if (TextUtils.equals(AccountUtil.getLoginInfo(mContext).getUid(), postInfo.getAuthor().getId())) {
                                ConfirmDialogFragment.newInstance(mContext.getString(R.string.title_dialog_del_post))
                                        .setOnConfirmListener(() -> {
                                            TiebaApi.getInstance()
                                                    .delPost(dataBean.getForum().getId(), dataBean.getForum().getName(), dataBean.getThread().getId(), postInfo.getId(), dataBean.getAnti().getTbs(), true, true)
                                                    .enqueue(new Callback<CommonResponse>() {
                                                        @Override
                                                        public void onResponse(@NotNull Call<CommonResponse> call, @NotNull Response<CommonResponse> response) {
                                                            Toast.makeText(mContext, R.string.toast_success, Toast.LENGTH_SHORT).show();
                                                            remove(position);
                                                        }

                                                        @Override
                                                        public void onFailure(@NotNull Call<CommonResponse> call, @NotNull Throwable t) {
                                                            Toast.makeText(mContext, t.getMessage(), Toast.LENGTH_SHORT).show();
                                                        }
                                                    });
                                        })
                                        .show(((BaseActivity) mContext).getSupportFragmentManager(), postInfo.getId() + "_Confirm");
                            }
                            return true;
                    }
                    return false;
                })
                .setInitMenuCallback(menu -> {
                    if (TextUtils.equals(AccountUtil.getLoginInfo(mContext).getUid(), postInfo.getAuthor().getId())) {
                        menu.findItem(R.id.menu_delete).setVisible(true);
                    }
                })
                .show(((BaseActivity) mContext).getSupportFragmentManager(), postInfo.getId() + "_Menu");
    }

    @Override
    protected void convert(ViewHolder holder, SubFloorListBean.PostInfo data, int position) {
        ThreadContentBean.UserInfoBean userInfoBean = data.getAuthor();
        if (dataBean != null && dataBean.getThread() != null && dataBean.getThread().getAuthor() != null && userInfoBean != null && userInfoBean.getId() != null && userInfoBean.getId().equals(dataBean.getThread().getAuthor().getId())) {
            holder.setVisibility(R.id.thread_list_item_user_lz_tip, View.VISIBLE);
        } else {
            holder.setVisibility(R.id.thread_list_item_user_lz_tip, View.GONE);
        }
        holder.getConvertView().setOnLongClickListener(v -> {
            showMenu(data, position);
            return true;
        });
        holder.setOnClickListener(R.id.thread_list_item_reply, view -> showMenu(data, position));
        holder.setText(R.id.thread_list_item_user_name, userInfoBean == null ? "" : StringUtil.getUsernameString(mContext, userInfoBean.getName(), userInfoBean.getNameShow()));
        holder.setText(R.id.thread_list_item_user_time, String.valueOf(DateUtils.getRelativeTimeSpanString(Long.valueOf(data.getTime()) * 1000L)));
        if (userInfoBean != null) {
            String levelId = userInfoBean.getLevelId() == null || TextUtils.isEmpty(userInfoBean.getLevelId()) ? "?" : userInfoBean.getLevelId();
            ThemeUtil.setChipThemeByLevel(levelId,
                    holder.getView(R.id.thread_list_item_user_status),
                    holder.getView(R.id.thread_list_item_user_level),
                    holder.getView(R.id.thread_list_item_user_lz_tip));
            holder.setText(R.id.thread_list_item_user_level, levelId);
            holder.setOnClickListener(R.id.thread_list_item_user_avatar, view -> {
                NavigationHelper.toUserSpaceWithAnim(mContext, userInfoBean.getId(), StringUtil.getAvatarUrl(userInfoBean.getPortrait()), view);
            });
            ImageUtil.load(holder.getView(R.id.thread_list_item_user_avatar), ImageUtil.LOAD_TYPE_AVATAR, userInfoBean.getPortrait());
        }
        holder.setVisibility(R.id.thread_list_item_content_title, View.GONE);
        initContentView(holder, data);
    }

    @Override
    protected int getItemLayoutId() {
        return R.layout.item_thread_list;
    }

    private boolean appendTextToLastTextView(List<View> views, CharSequence newContent) {
        if (views.size() > 0) {
            View lastView = views.get(views.size() - 1);
            if (lastView instanceof TextView) {
                TextView lastTextView = (TextView) lastView;
                SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(lastTextView.getText());
                spannableStringBuilder.append(newContent);
                setText(lastTextView, spannableStringBuilder);
                return false;
            }
        }
        return true;
    }

    private TextView createTextView(int type) {
        TextView textView;
        if (type == TEXT_VIEW_TYPE_CONTENT) {
            TintMySpannableTextView mySpannableTextView = new TintMySpannableTextView(mContext);
            mySpannableTextView.setTintResId(R.color.default_color_text);
            mySpannableTextView.setLinkTouchMovementMethod(LinkTouchMovementMethod.getInstance());
            textView = mySpannableTextView;
        } else {
            TintTextView tintTextView = new TintTextView(mContext);
            tintTextView.setTintResId(R.color.default_color_text);
            tintTextView.setMovementMethod(LinkMovementClickMethod.getInstance());
            textView = tintTextView;
        }
        textView.setFocusable(false);
        textView.setClickable(false);
        textView.setLongClickable(false);
        textView.setTextIsSelectable(false);
        textView.setOnClickListener(null);
        textView.setOnLongClickListener(null);
        textView.setLetterSpacing(0.02F);
        if (type == TEXT_VIEW_TYPE_CONTENT) {
            textView.setTextSize(16);
        }
        return textView;
    }

    private void setText(TextView textView, CharSequence content) {
        content = BilibiliUtil.replaceVideoNumberSpan(mContext, content);
        content = StringUtil.getEmotionContent(EmotionUtil.EMOTION_ALL_TYPE, textView, content);
        textView.setText(content);
    }

    private LinearLayout.LayoutParams getLayoutParams(ThreadContentBean.ContentBean contentBean) {
        if (!contentBean.getType().equals("3") && !contentBean.getType().equals("5")) {
            return defaultLayoutParams;
        }
        float widthFloat, heightFloat;
        if (contentBean.getType().equals("3") || contentBean.getType().equals("20")) {
            String[] strings = contentBean.getBsize().split(",");
            widthFloat = Float.parseFloat(strings[0]);
            heightFloat = Float.parseFloat(strings[1]);
            heightFloat *= this.maxWidth / widthFloat;
            widthFloat = this.maxWidth;
        } else {
            float width = Float.parseFloat(contentBean.getWidth());
            widthFloat = this.maxWidth;
            heightFloat = Float.parseFloat(contentBean.getHeight());
            heightFloat *= widthFloat / width;
        }
        int width = Math.round(widthFloat);
        int height = Math.round(heightFloat);
        LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(width, height);
        layoutParams.gravity = Gravity.CENTER_HORIZONTAL;
        layoutParams.setMargins(0, 8, 0, 8);
        return layoutParams;
    }

    private CharSequence getLinkContent(CharSequence newContent, String url) {
        return getLinkContent("", newContent, url);
    }

    private CharSequence getLinkContent(CharSequence oldContent, CharSequence newContent, String url) {
        int start = oldContent.length();
        int end = start + newContent.length();
        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(oldContent);
        spannableStringBuilder.append(newContent);
        spannableStringBuilder.setSpan(new MyURLSpan(mContext, url), start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
        return spannableStringBuilder;
    }

    private boolean appendLinkToLastTextView(List<View> views, CharSequence newContent, String url) {
        if (views.size() > 0) {
            View lastView = views.get(views.size() - 1);
            if (lastView instanceof TextView) {
                TextView lastTextView = (TextView) lastView;
                setText(lastTextView, getLinkContent(lastTextView.getText(), newContent, url));
                return false;
            }
        }
        return true;
    }

    private boolean canLoadGlide() {
        if (mContext instanceof Activity) {
            return !((Activity) mContext).isDestroyed();
        }
        return false;
    }

    private boolean appendUserToLastTextView(List<View> views, CharSequence newContent, String uid) {
        if (views.size() > 0) {
            View lastView = views.get(views.size() - 1);
            if (lastView instanceof TextView) {
                TextView lastTextView = (TextView) lastView;
                setText(lastTextView, getUserContent(lastTextView.getText(), newContent, uid));
                return false;
            }
        }
        return true;
    }

    private CharSequence getUserContent(CharSequence newContent, String uid) {
        return getUserContent("", newContent, uid);
    }

    private CharSequence getUserContent(CharSequence oldContent, CharSequence newContent, String uid) {
        int start = oldContent.length();
        int end = start + newContent.length();
        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(oldContent);
        spannableStringBuilder.append(newContent);
        spannableStringBuilder.setSpan(new MyUserSpan(mContext, uid), start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
        return spannableStringBuilder;
    }

    private List<View> getContentViews(SubFloorListBean.PostInfo postListItemBean) {
        List<View> views = new ArrayList<>();
        for (ThreadContentBean.ContentBean contentBean : postListItemBean.getContent()) {
            switch (contentBean.getType()) {
                case "0":
                case "9": {
                    if (appendTextToLastTextView(views, contentBean.getText())) {
                        TextView textView = createTextView(TEXT_VIEW_TYPE_CONTENT);
                        textView.setLayoutParams(getLayoutParams(contentBean));
                        setText(textView, contentBean.getText());
                        views.add(textView);
                    }
                }
                break;
                case "1":
                    if (appendLinkToLastTextView(views, contentBean.getText(), contentBean.getLink())) {
                        TextView textView = createTextView(TEXT_VIEW_TYPE_CONTENT);
                        textView.setLayoutParams(getLayoutParams(contentBean));
                        setText(textView, getLinkContent(contentBean.getText(), contentBean.getLink()));
                        views.add(textView);
                    }
                    break;
                case "2":
                    String emojiText = "#(" + contentBean.getC() + ")";
                    if (appendTextToLastTextView(views, emojiText)) {
                        TextView textView = createTextView(TEXT_VIEW_TYPE_CONTENT);
                        textView.setLayoutParams(getLayoutParams(contentBean));
                        setText(textView, emojiText);
                        views.add(textView);
                    }
                    break;
                case "3":
                    ImageView imageView = new ImageView(mContext);
                    imageView.setLayoutParams(getLayoutParams(contentBean));
                    imageView.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
                    ImageUtil.load(imageView, ImageUtil.LOAD_TYPE_SMALL_PIC, contentBean.getSrc());
                    List<PhotoViewBean> photoViewBeans = new ArrayList<>();
                    photoViewBeans.add(new PhotoViewBean(ImageUtil.getNonNullString(contentBean.getSrc(), contentBean.getOriginSrc()),
                            ImageUtil.getNonNullString(contentBean.getOriginSrc(), contentBean.getSrc()),
                            "1".equals(contentBean.isLongPic())));
                    ImageUtil.initImageView(imageView, photoViewBeans, 0);
                    views.add(imageView);
                    break;
                case "4":
                    if (appendUserToLastTextView(views, contentBean.getText(), contentBean.getUid())) {
                        TextView textView = createTextView(TEXT_VIEW_TYPE_CONTENT);
                        textView.setLayoutParams(getLayoutParams(contentBean));
                        setText(textView, getUserContent(contentBean.getText(), contentBean.getUid()));
                        views.add(textView);
                    }
                    break;
                case "10":
                    String voiceUrl = "http://c.tieba.baidu.com/c/p/voice?voice_md5=" + contentBean.getVoiceMD5() + "&play_from=pb_voice_play";
                    VoicePlayerView voicePlayerView = new VoicePlayerView(mContext);
                    voicePlayerView.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
                    //voicePlayerView.setMini(false);
                    voicePlayerView.setDuration(Integer.valueOf(contentBean.getDuringTime()));
                    voicePlayerView.setUrl(voiceUrl);
                    views.add(voicePlayerView);
                    break;
            }
        }
        return views;
    }

    private void initContentView(ViewHolder viewHolder, SubFloorListBean.PostInfo postListItemBean) {
        MyLinearLayout myLinearLayout = viewHolder.getView(R.id.thread_list_item_content_content);
        myLinearLayout.removeAllViews();
        myLinearLayout.addViews(getContentViews(postListItemBean));
    }
}package com.huanchengfly.tieba.post.adapters;

import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.text.SpannableStringBuilder;
import android.text.Spanned;
import android.text.TextUtils;
import android.text.format.DateUtils;
import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;

import com.allen.library.SuperTextView;
import com.huanchengfly.tieba.post.BaseApplication;
import com.huanchengfly.tieba.post.R;
import com.huanchengfly.tieba.post.activities.BaseActivity;
import com.huanchengfly.tieba.post.activities.ReplyActivity;
import com.huanchengfly.tieba.post.api.TiebaApi;
import com.huanchengfly.tieba.post.api.models.CommonResponse;
import com.huanchengfly.tieba.post.api.models.ThreadContentBean;
import com.huanchengfly.tieba.post.components.LinkMovementClickMethod;
import com.huanchengfly.tieba.post.components.LinkTouchMovementMethod;
import com.huanchengfly.tieba.post.components.spans.MyImageSpan;
import com.huanchengfly.tieba.post.components.spans.MyURLSpan;
import com.huanchengfly.tieba.post.components.spans.MyUserSpan;
import com.huanchengfly.tieba.post.components.spans.RoundBackgroundColorSpan;
import com.huanchengfly.tieba.post.fragments.ConfirmDialogFragment;
import com.huanchengfly.tieba.post.fragments.FloorFragment;
import com.huanchengfly.tieba.post.fragments.MenuDialogFragment;
import com.huanchengfly.tieba.post.models.PhotoViewBean;
import com.huanchengfly.tieba.post.models.ReplyInfoBean;
import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
import com.huanchengfly.tieba.post.utils.AccountUtil;
import com.huanchengfly.tieba.post.utils.BilibiliUtil;
import com.huanchengfly.tieba.post.utils.BlockUtil;
import com.huanchengfly.tieba.post.utils.DisplayUtil;
import com.huanchengfly.tieba.post.utils.EmotionUtil;
import com.huanchengfly.tieba.post.utils.ImageUtil;
import com.huanchengfly.tieba.post.utils.NavigationHelper;
import com.huanchengfly.tieba.post.utils.StringUtil;
import com.huanchengfly.tieba.post.utils.ThemeUtil;
import com.huanchengfly.tieba.post.utils.Util;
import com.huanchengfly.tieba.post.widgets.MyImageView;
import com.huanchengfly.tieba.post.widgets.MyLinearLayout;
import com.huanchengfly.tieba.post.widgets.VideoPlayerStandard;
import com.huanchengfly.tieba.post.widgets.VoicePlayerView;
import com.huanchengfly.tieba.post.widgets.theme.TintMySpannableTextView;
import com.huanchengfly.tieba.post.widgets.theme.TintTextView;
import com.othershe.baseadapter.ViewHolder;
import com.othershe.baseadapter.base.MultiBaseAdapter;

import org.jetbrains.annotations.NotNull;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

import static com.huanchengfly.tieba.post.activities.PhotoViewActivity.OBJ_TYPE_THREAD_PAGE;
import static com.huanchengfly.tieba.post.utils.Util.alphaColor;

public class RecyclerThreadAdapter extends MultiBaseAdapter<ThreadContentBean.PostListItemBean> {
    public static final String TAG = "RecyclerThreadAdapter";
    public static final int TYPE_REPLY = 1000;
    public static final int TYPE_THREAD = 1001;
    private static final int TEXT_VIEW_TYPE_CONTENT = 0;
    private static final int TEXT_VIEW_TYPE_FLOOR = 1;
    public static final int MAX_SUB_POST_SHOW = 3;
    private Map<String, ThreadContentBean.UserInfoBean> userInfoBeanMap;
    private NavigationHelper navigationHelper;
    private LinearLayout.LayoutParams defaultLayoutParams;
    private LinearLayout.LayoutParams defaultLayoutParamsWithNoMargins;
    private ThreadContentBean.ThreadBean threadBean;
    private ThreadContentBean dataBean;
    private TreeMap<Integer, List<PhotoViewBean>> photoViewBeansMap;
    private int screenWidthPx;
    private boolean showForum;
    private Map<String, Boolean> blockCacheMap;
    private boolean immersive;
    private boolean seeLz;

    public RecyclerThreadAdapter(Context context) {
        super(context, null, true);
        setLoadingView(R.layout.layout_footer_loading);
        setLoadEndView(R.layout.layout_footer_loadend);
        setLoadFailedView(R.layout.layout_footer_load_failed);
        setOnMultiItemClickListener((viewHolder, postListItemBean, i, i1) -> {
            ThreadContentBean.UserInfoBean userInfoBean = userInfoBeanMap.get(postListItemBean.getAuthorId());
            mContext.startActivity(new Intent(mContext, ReplyActivity.class)
                    .putExtra("data", new ReplyInfoBean(dataBean.getThread().getId(),
                            dataBean.getForum().getId(),
                            dataBean.getForum().getName(),
                            dataBean.getAnti().getTbs(),
                            postListItemBean.getId(),
                            postListItemBean.getFloor(),
                            userInfoBean != null ? userInfoBean.getNameShow() : "",
                            dataBean.getUser().getNameShow()).setPn(dataBean.getPage().getOffset()).toString()));
        });
        showForum = true;
        userInfoBeanMap = new HashMap<>();
        navigationHelper = NavigationHelper.newInstance(mContext);
        immersive = false;
        this.screenWidthPx = BaseApplication.ScreenInfo.EXACT_SCREEN_WIDTH;
        defaultLayoutParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
        defaultLayoutParams.setMargins(0, 8, 0, 8);
        defaultLayoutParamsWithNoMargins = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
        photoViewBeansMap = new TreeMap<>();
        blockCacheMap = new HashMap<>();
    }

    public boolean isImmersive() {
        return immersive;
    }

    public RecyclerThreadAdapter setImmersive(boolean immersive) {
        this.immersive = immersive;
        notifyDataSetChanged();
        return this;
    }

    public boolean isShowForum() {
        return showForum;
    }

    public RecyclerThreadAdapter setShowForum(boolean showForum) {
        this.showForum = showForum;
        return this;
    }

    public boolean isSeeLz() {
        return seeLz;
    }

    public RecyclerThreadAdapter setSeeLz(boolean seeLz) {
        this.seeLz = seeLz;
        return this;
    }

    public void setData(ThreadContentBean data) {
        threadBean = data.getThread();
        dataBean = data;
        setUser(data.getUserList());
        setPic(data.getPostList());
        List<ThreadContentBean.PostListItemBean> postListItemBeans = new ArrayList<>();
        for (ThreadContentBean.PostListItemBean postListItemBean : data.getPostList()) {
            if (!needBlock(postListItemBean)) {
                postListItemBeans.add(postListItemBean);
            }
        }
        setNewData(postListItemBeans);
    }

    private void refreshForumView(ThreadContentBean.ForumInfoBean forumInfoBean, SuperTextView forumView, View dividerView) {
        if (forumView == null || dividerView == null || forumInfoBean == null) {
            return;
        }
        if (!showForum || !mContext.getSharedPreferences("settings", Context.MODE_PRIVATE).getBoolean("showShortcutInThread", true) || "0".equals(forumInfoBean.isExists()) || forumInfoBean.getName().isEmpty()) {
            forumView.setVisibility(View.GONE);
            dividerView.setVisibility(View.GONE);
            return;
        }
        forumView.getLeftTextView().getPaint().setFakeBoldText(true);
        forumView.setVisibility(View.VISIBLE);
        forumView.setOnSuperTextViewClickListener((SuperTextView superTextView) -> {
            navigationHelper.navigationByData(NavigationHelper.ACTION_FORUM, forumInfoBean.getName());
        });
        forumView.setLeftString(forumInfoBean.getName());
        ImageUtil.load(forumView.getLeftIconIV(), ImageUtil.LOAD_TYPE_AVATAR, forumInfoBean.getAvatar());
    }

    public void addData(@NonNull ThreadContentBean data) {
        threadBean = data.getThread();
        dataBean = data;
        addUser(data.getUserList());
        addPic(data.getPostList());
        List<ThreadContentBean.PostListItemBean> postListItemBeans = new ArrayList<>();
        for (ThreadContentBean.PostListItemBean postListItemBean : data.getPostList()) {
            if (!needBlock(postListItemBean)) {
                postListItemBeans.add(postListItemBean);
            }
        }
        setLoadMoreData(postListItemBeans);
    }

    private void setUser(List<ThreadContentBean.UserInfoBean> userInfoBeans) {
        userInfoBeanMap = new HashMap<>();
        addUser(userInfoBeans);
    }

    private void addUser(List<ThreadContentBean.UserInfoBean> userInfoBeans) {
        for (ThreadContentBean.UserInfoBean userInfoBean : userInfoBeans) {
            if (userInfoBeanMap.get(userInfoBean.getId()) == null) {
                userInfoBeanMap.put(userInfoBean.getId(), userInfoBean);
            }
        }
    }

    private void setPic(List<ThreadContentBean.PostListItemBean> postListItemBeans) {
        photoViewBeansMap = new TreeMap<>();
        addPic(postListItemBeans);
    }

    private void addPic(List<ThreadContentBean.PostListItemBean> postListItemBeans) {
        if (postListItemBeans != null) {
            for (ThreadContentBean.PostListItemBean postListItemBean : postListItemBeans) {
                List<PhotoViewBean> photoViewBeans = new ArrayList<>();
                for (ThreadContentBean.ContentBean contentBean : postListItemBean.getContent()) {
                    String url = ImageUtil.getUrl(mContext, true, contentBean.getOriginSrc(), contentBean.getBigCdnSrc(), contentBean.getCdnSrcActive(), contentBean.getCdnSrc());
                    if (TextUtils.isEmpty(url)) {
                        continue;
                    }
                    if (contentBean.getType().equals("3")) {
                        photoViewBeans.add(new PhotoViewBean(url,
                                ImageUtil.getNonNullString(contentBean.getOriginSrc(), contentBean.getBigCdnSrc(), contentBean.getCdnSrcActive(), contentBean.getCdnSrc()),
                                "1".equals(contentBean.isLongPic())));
                    }/* else if (contentBean.getType().equals("20")) {
                        photoViewBeans.add(new PhotoViewBean(contentBean.getSrc(), contentBean.getSrc(), false));
                    }
                   */
                }
                photoViewBeansMap.put(Integer.valueOf(postListItemBean.getFloor()), photoViewBeans);
            }
        }
    }

    private List<PhotoViewBean> getPhotoViewBeans() {
        List<PhotoViewBean> photoViewBeans = new ArrayList<>();
        for (int key : photoViewBeansMap.keySet()) {
            if (photoViewBeansMap.get(key) != null)
                photoViewBeans.addAll(photoViewBeansMap.get(key));
        }
        return photoViewBeans;
    }

    private View getContentView(ThreadContentBean.PostListItemBean subPostListItemBean, ThreadContentBean.PostListItemBean postListItemBean) {
        SpannableStringBuilder builder = new SpannableStringBuilder();
        ThreadContentBean.UserInfoBean userInfoBean = userInfoBeanMap.get(subPostListItemBean.getAuthorId());
        if (userInfoBean != null) {
            builder.append(userInfoBean.getNameShow(), new MyUserSpan(mContext, userInfoBean.getId()), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
            if (threadBean.getAuthor() != null && userInfoBean.getId() != null && userInfoBean.getId().equals(threadBean.getAuthor().getId())) {
                builder.append(" ");
                builder.append("楼主", new RoundBackgroundColorSpan(mContext,
                        alphaColor(ThemeUtils.getColorByAttr(mContext, R.attr.colorAccent), 30),
                        ThemeUtils.getColorByAttr(mContext, R.attr.colorAccent),
                        DisplayUtil.dp2px(mContext, 10)), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
                builder.append(" ");
            }
            builder.append(":");
        }
        if (subPostListItemBean.getContent().size() > 0 && "10".equals(subPostListItemBean.getContent().get(0).getType())) {
            String voiceUrl = "http://c.tieba.baidu.com/c/p/voice?voice_md5=" + subPostListItemBean.getContent().get(0).getVoiceMD5() + "&play_from=pb_voice_play";
            RelativeLayout container = new RelativeLayout(mContext);
            container.setLayoutParams(defaultLayoutParamsWithNoMargins);
            container.setPadding(DisplayUtil.dp2px(mContext, 8),
                    8,
                    DisplayUtil.dp2px(mContext, 8),
                    8);
            container.setBackground(Util.getDrawableByAttr(mContext, R.attr.selectableItemBackground));
            container.setOnClickListener(view -> mContext.startActivity(new Intent(mContext, ReplyActivity.class)
                    .putExtra("data", new ReplyInfoBean(dataBean.getThread().getId(),
                            dataBean.getForum().getId(),
                            dataBean.getForum().getName(),
                            dataBean.getAnti().getTbs(),
                            postListItemBean.getId(),
                            subPostListItemBean.getId(),
                            postListItemBean.getFloor(),
                            userInfoBean != null ? userInfoBean.getNameShow() : "",
                            dataBean.getUser().getNameShow()).setPn(dataBean.getPage().getOffset()).toString())));
            container.setOnLongClickListener(v -> {
                showMenu(postListItemBean, subPostListItemBean, getAllData().indexOf(postListItemBean), postListItemBean.getSubPostList().getSubPostList().indexOf(subPostListItemBean));
                return true;
            });
            View.inflate(mContext, R.layout.layout_floor_audio, container);
            TextView mTextView = container.findViewById(R.id.floor_user);
            VoicePlayerView mVoicePlayerView = container.findViewById(R.id.floor_audio);
            mVoicePlayerView.setMini(true);
            mTextView.setText(builder);
            mVoicePlayerView.setDuration(Integer.valueOf(subPostListItemBean.getContent().get(0).getDuringTime()));
            mVoicePlayerView.setUrl(voiceUrl);
            return container;
        }
        TextView textView = createTextView(TEXT_VIEW_TYPE_FLOOR);
        textView.setLayoutParams(defaultLayoutParamsWithNoMargins);
        for (ThreadContentBean.ContentBean contentBean : subPostListItemBean.getContent()) {
            switch (contentBean.getType()) {
                case "0":
                    if (BlockUtil.needBlock(contentBean.getText()) || BlockUtil.needBlock(userInfoBean)) {
                        textView.setVisibility(View.GONE);
                    }
                    builder.append(contentBean.getText());
                    break;
                case "1":
                    builder.append(contentBean.getText(), new MyURLSpan(mContext, contentBean.getLink()), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
                    break;
                case "2":
                    String emojiText = "#(" + contentBean.getC() + ")";
                    builder.append(emojiText);
                    break;
                case "4":
                case "9":
                    builder.append(contentBean.getText());
                    break;
                default:
                    break;
            }
        }
        textView.setText(BilibiliUtil.replaceVideoNumberSpan(mContext, StringUtil.getEmotionContent(EmotionUtil.EMOTION_ALL_TYPE, textView, builder)));
        textView.setPadding(DisplayUtil.dp2px(mContext, 8),
                8,
                DisplayUtil.dp2px(mContext, 8),
                8);
        textView.setBackground(Util.getDrawableByAttr(mContext, R.attr.selectableItemBackground));
        textView.setOnClickListener(view -> mContext.startActivity(new Intent(mContext, ReplyActivity.class)
                .putExtra("data", new ReplyInfoBean(dataBean.getThread().getId(),
                        dataBean.getForum().getId(),
                        dataBean.getForum().getName(),
                        dataBean.getAnti().getTbs(),
                        postListItemBean.getId(),
                        subPostListItemBean.getId(),
                        postListItemBean.getFloor(),
                        userInfoBean != null ? userInfoBean.getNameShow() : "",
                        dataBean.getUser().getNameShow()).setPn(dataBean.getPage().getOffset()).toString())));
        textView.setOnLongClickListener(v -> {
            showMenu(postListItemBean, subPostListItemBean, getAllData().indexOf(postListItemBean), postListItemBean.getSubPostList().getSubPostList().indexOf(subPostListItemBean));
            return true;
        });
        return textView;
    }

    private void initFloorView(ViewHolder holder, ThreadContentBean.PostListItemBean bean) {
        TextView more = holder.getView(R.id.thread_list_item_content_floor_more);
        MyLinearLayout myLinearLayout = holder.getView(R.id.thread_list_item_content_floor);
        myLinearLayout.removeAllViews();
        if (bean.getSubPostNumber() != null && bean.getSubPostList() != null && bean.getSubPostList().getSubPostList() != null && bean.getSubPostList().getSubPostList().size() > 0) {
            holder.setVisibility(R.id.thread_list_item_content_floor_card, View.VISIBLE);
            int count = Integer.parseInt(bean.getSubPostNumber());
            List<ThreadContentBean.PostListItemBean> subPostList = bean.getSubPostList().getSubPostList();
            List<View> views = new ArrayList<>();
            if (subPostList.size() > MAX_SUB_POST_SHOW) {
                subPostList = subPostList.subList(0, MAX_SUB_POST_SHOW);
                holder.setVisibility(R.id.thread_list_item_content_floor_more, View.VISIBLE);
            } else if (subPostList.size() < count) {
                holder.setVisibility(R.id.thread_list_item_content_floor_more, View.VISIBLE);
            } else {
                holder.setVisibility(R.id.thread_list_item_content_floor_more, View.GONE);
            }
            more.setText(mContext.getString(R.string.tip_floor_more_count, String.valueOf(count - subPostList.size())));
            for (ThreadContentBean.PostListItemBean postListItemBean : subPostList) {
                views.add(getContentView(postListItemBean, bean));
            }
            myLinearLayout.addViews(views);
            more.setOnClickListener(view -> {
                try {
                    if (bean.getSubPostList().getSubPostList().size() < count) {
                        FloorFragment.newInstance(threadBean.getId(), bean.getSubPostList().getPid(), null, true)
                                .show(((BaseActivity) mContext).getSupportFragmentManager(), threadBean.getId() + "_Floor");
                    } else {
                        myLinearLayout.removeAllViews();
                        List<View> newViews = new ArrayList<>();
                        for (ThreadContentBean.PostListItemBean postListItemBean : bean.getSubPostList().getSubPostList()) {
                            newViews.add(getContentView(postListItemBean, bean));
                        }
                        myLinearLayout.addViews(newViews);
                        more.setVisibility(View.GONE);
                    }
                } catch (NumberFormatException e) {
                    e.printStackTrace();
                }
            });
        } else {
            holder.setVisibility(R.id.thread_list_item_content_floor_card, View.GONE);
        }
    }

    private int getMaxWidth(String floor) {
        int maxWidth = screenWidthPx - DisplayUtil.dp2px(mContext, 28 + 38);
        if (isImmersive() || "1".equals(floor)) {
            maxWidth = screenWidthPx - DisplayUtil.dp2px(mContext, 28 + 4);
        }
        return maxWidth;
    }

    private void showMenu(ThreadContentBean.PostListItemBean postListItemBean, ThreadContentBean.PostListItemBean subPostListItemBean, int position, int subPosition) {
        ThreadContentBean.UserInfoBean userInfoBean = userInfoBeanMap.get(subPostListItemBean.getAuthorId());
        MenuDialogFragment.newInstance(R.menu.menu_thread_item, null)
                .setOnNavigationItemSelectedListener(item -> {
                    switch (item.getItemId()) {
                        case R.id.menu_reply:
                            String replyData = new ReplyInfoBean(dataBean.getThread().getId(),
                                    dataBean.getForum().getId(),
                                    dataBean.getForum().getName(),
                                    dataBean.getAnti().getTbs(),
                                    postListItemBean.getId(),
                                    subPostListItemBean.getId(),
                                    postListItemBean.getFloor(),
                                    userInfoBean != null ? userInfoBean.getNameShow() : "",
                                    dataBean.getUser().getNameShow()).setPn(dataBean.getPage().getOffset()).toString();
                            mContext.startActivity(new Intent(mContext, ReplyActivity.class)
                                    .putExtra("data", replyData));
                            return true;
                        case R.id.menu_report:
                            navigationHelper.navigationByData(NavigationHelper.ACTION_URL, mContext.getString(R.string.url_post_report, dataBean.getForum().getId(), dataBean.getThread().getId(), subPostListItemBean.getId()));
                            return true;
                        case R.id.menu_copy:
                            StringBuilder stringBuilder = new StringBuilder();
                            for (ThreadContentBean.ContentBean contentBean : subPostListItemBean.getContent()) {
                                switch (contentBean.getType()) {
                                    case "2":
                                        contentBean.setText("#(" + contentBean.getC() + ")");
                                        break;
                                    case "3":
                                    case "20":
                                        contentBean.setText("[图片]\n");
                                        break;
                                    case "10":
                                        contentBean.setText("[语音]\n");
                                        break;
                                }
                                if (contentBean.getText() != null) {
                                    stringBuilder.append(contentBean.getText());
                                }
                            }
                            Util.showCopyDialog((BaseActivity) mContext, stringBuilder.toString(), subPostListItemBean.getId());
                            return true;
                        case R.id.menu_delete:
                            if (TextUtils.equals(AccountUtil.getUid(mContext), subPostListItemBean.getAuthorId())) {
                                ConfirmDialogFragment.newInstance(mContext.getString(R.string.title_dialog_del_post))
                                        .setOnConfirmListener(() -> {
                                            TiebaApi.getInstance()
                                                    .delPost(dataBean.getForum().getId(), dataBean.getForum().getName(), dataBean.getThread().getId(), subPostListItemBean.getId(), dataBean.getAnti().getTbs(), true, true)
                                                    .enqueue(new Callback<CommonResponse>() {
                                                        @Override
                                                        public void onResponse(@NotNull Call<CommonResponse> call, @NotNull Response<CommonResponse> response) {
                                                            Toast.makeText(mContext, R.string.toast_success, Toast.LENGTH_SHORT).show();
                                                            postListItemBean.getSubPostList().getSubPostList().remove(subPosition);
                                                            notifyItemChanged(position);
                                                        }

                                                        @Override
                                                        public void onFailure(@NotNull Call<CommonResponse> call, @NotNull Throwable t) {
                                                            Toast.makeText(mContext, t.getMessage(), Toast.LENGTH_SHORT).show();
                                                        }
                                                    });
                                        })
                                        .show(((BaseActivity) mContext).getSupportFragmentManager(), subPostListItemBean.getId() + "_Confirm");
                            }
                            return true;
                    }
                    return false;
                })
                .setInitMenuCallback(menu -> {
                    if (TextUtils.equals(AccountUtil.getUid(mContext), subPostListItemBean.getAuthorId())) {
                        menu.findItem(R.id.menu_delete).setVisible(true);
                    }
                })
                .show(((BaseActivity) mContext).getSupportFragmentManager(), subPostListItemBean.getId() + "_" + postListItemBean.getId() + "_Menu");
    }

    private void showMenu(ThreadContentBean.PostListItemBean postListItemBean, int position) {
        ThreadContentBean.UserInfoBean userInfoBean = userInfoBeanMap.get(postListItemBean.getAuthorId());
        MenuDialogFragment.newInstance(R.menu.menu_thread_item, null)
                .setOnNavigationItemSelectedListener(item -> {
                    switch (item.getItemId()) {
                        case R.id.menu_reply:
                            mContext.startActivity(new Intent(mContext, ReplyActivity.class)
                                    .putExtra("data", new ReplyInfoBean(dataBean.getThread().getId(),
                                            dataBean.getForum().getId(),
                                            dataBean.getForum().getName(),
                                            dataBean.getAnti().getTbs(),
                                            postListItemBean.getId(),
                                            postListItemBean.getFloor(),
                                            userInfoBean != null ? userInfoBean.getNameShow() : "",
                                            dataBean.getUser().getNameShow()).setPn(dataBean.getPage().getOffset()).toString()));
                            return true;
                        case R.id.menu_report:
                            navigationHelper.navigationByData(NavigationHelper.ACTION_URL, mContext.getString(R.string.url_post_report, dataBean.getForum().getId(), dataBean.getThread().getId(), postListItemBean.getId()));
                            return true;
                        case R.id.menu_copy:
                            StringBuilder stringBuilder = new StringBuilder();
                            for (ThreadContentBean.ContentBean contentBean : postListItemBean.getContent()) {
                                switch (contentBean.getType()) {
                                    case "2":
                                        contentBean.setText("#(" + contentBean.getC() + ")");
                                        break;
                                    case "3":
                                    case "20":
                                        contentBean.setText("[图片]\n");
                                        break;
                                    case "10":
                                        contentBean.setText("[语音]\n");
                                        break;
                                }
                                if (contentBean.getText() != null) {
                                    stringBuilder.append(contentBean.getText());
                                }
                            }
                            Util.showCopyDialog((BaseActivity) mContext, stringBuilder.toString(), postListItemBean.getId());
                            return true;
                        case R.id.menu_delete:
                            if (TextUtils.equals(dataBean.getUser().getId(), postListItemBean.getAuthorId()) || TextUtils.equals(dataBean.getUser().getId(), dataBean.getThread().getAuthor().getId())) {
                                ConfirmDialogFragment.newInstance(mContext.getString(R.string.title_dialog_del_post))
                                        .setOnConfirmListener(() -> {
                                            TiebaApi.getInstance()
                                                    .delPost(dataBean.getForum().getId(), dataBean.getForum().getName(), dataBean.getThread().getId(), postListItemBean.getId(), dataBean.getAnti().getTbs(), TextUtils.equals(dataBean.getUser().getId(), postListItemBean.getAuthorId()), false)
                                                    .enqueue(new Callback<CommonResponse>() {
                                                        @Override
                                                        public void onResponse(@NotNull Call<CommonResponse> call, @NotNull Response<CommonResponse> response) {
                                                            Toast.makeText(mContext, R.string.toast_success, Toast.LENGTH_SHORT).show();
                                                            remove(position);
                                                        }

                                                        @Override
                                                        public void onFailure(@NotNull Call<CommonResponse> call, @NotNull Throwable t) {
                                                            Toast.makeText(mContext, t.getMessage(), Toast.LENGTH_SHORT).show();
                                                        }
                                                    });
                                        })
                                        .show(((BaseActivity) mContext).getSupportFragmentManager(), postListItemBean.getId() + "_Delete_Confirm");
                            }
                            return true;
                    }
                    return false;
                })
                .setInitMenuCallback(menu -> {
                    if (TextUtils.equals(dataBean.getUser().getId(), postListItemBean.getAuthorId()) || TextUtils.equals(dataBean.getUser().getId(), dataBean.getThread().getAuthor().getId())) {
                        menu.findItem(R.id.menu_delete).setVisible(true);
                    }
                })
                .show(((BaseActivity) mContext).getSupportFragmentManager(), postListItemBean.getId() + "_Menu");
    }

    @Override
    protected void convert(ViewHolder holder, ThreadContentBean.PostListItemBean data, int position, int type) {
        if (type == TYPE_THREAD) {
            SuperTextView forumView = holder.getView(R.id.forum_bar);
            View dividerView = holder.getView(R.id.forum_bar_divider);
            refreshForumView(dataBean.getForum(), forumView, dividerView);
        }
        ThreadContentBean.UserInfoBean userInfoBean = userInfoBeanMap.get(data.getAuthorId());
        if (dataBean != null && dataBean.getThread() != null && dataBean.getThread().getAuthor() != null && data.getAuthorId().equals(dataBean.getThread().getAuthor().getId())) {
            holder.setVisibility(R.id.thread_list_item_user_lz_tip, View.VISIBLE);
        } else {
            holder.setVisibility(R.id.thread_list_item_user_lz_tip, View.GONE);
        }
        holder.getConvertView().setOnLongClickListener(view -> {
            showMenu(data, position);
            return true;
        });
        holder.setText(R.id.thread_list_item_user_name, userInfoBean == null ? data.getAuthorId() : StringUtil.getUsernameString(mContext, userInfoBean.getName(), userInfoBean.getNameShow()));
        holder.setText(R.id.thread_list_item_user_time, mContext.getString(R.string.tip_thread_item, data.getFloor(), String.valueOf(DateUtils.getRelativeTimeSpanString(Long.valueOf(data.getTime()) * 1000L))));
        holder.setText(R.id.thread_list_item_content_title, data.getTitle());
        holder.setOnClickListener(R.id.thread_list_item_reply, view -> showMenu(data, position));
        if ("1".equals(data.getFloor()))
            holder.setVisibility(R.id.thread_list_item_reply, View.GONE);
        else
            holder.setVisibility(R.id.thread_list_item_reply, View.VISIBLE);
        if (userInfoBean != null) {
            String levelId = userInfoBean.getLevelId() == null || TextUtils.isEmpty(userInfoBean.getLevelId()) ? "?" : userInfoBean.getLevelId();
            ThemeUtil.setChipThemeByLevel(levelId,
                    holder.getView(R.id.thread_list_item_user_status),
                    holder.getView(R.id.thread_list_item_user_level),
                    holder.getView(R.id.thread_list_item_user_lz_tip));
            holder.setText(R.id.thread_list_item_user_level, levelId);
            holder.setOnClickListener(R.id.thread_list_item_user_avatar, view -> {
                NavigationHelper.toUserSpaceWithAnim(mContext, userInfoBean.getId(), StringUtil.getAvatarUrl(userInfoBean.getPortrait()), view);
            });
            ImageUtil.load(holder.getView(R.id.thread_list_item_user_avatar), ImageUtil.LOAD_TYPE_AVATAR, userInfoBean.getPortrait());
        }
        if (!"1".equals(data.getFloor()))
            holder.setVisibility(R.id.thread_list_item_content_title, View.GONE);
        else
            holder.setVisibility(R.id.thread_list_item_content_title, View.VISIBLE);
        initContentView(holder, data, position);
        initFloorView(holder, data);
        if (isImmersive()) {
            holder.getView(R.id.thread_list_item_content).setPadding(DisplayUtil.dp2px(mContext, 4), 0, DisplayUtil.dp2px(mContext, 4), 0);
            holder.setVisibility(R.id.thread_list_item_user, View.GONE);
            holder.setVisibility(R.id.thread_list_item_content_floor_card, View.GONE);
        } else {
            if (type == TYPE_THREAD) {
                holder.getView(R.id.thread_list_item_content).setPadding(DisplayUtil.dp2px(mContext, 4), 0, DisplayUtil.dp2px(mContext, 4), 0);
            } else {
                if (holder.getView(R.id.thread_list_item_content).getLayoutDirection() == View.LAYOUT_DIRECTION_LTR) {
                    holder.getView(R.id.thread_list_item_content).setPadding(DisplayUtil.dp2px(mContext, 38), 0, DisplayUtil.dp2px(mContext, 4), 0);
                } else {
                    holder.getView(R.id.thread_list_item_content).setPadding(DisplayUtil.dp2px(mContext, 4), 0, DisplayUtil.dp2px(mContext, 38), 0);
                }
            }
            holder.setVisibility(R.id.thread_list_item_user, View.VISIBLE);
        }
    }

    @Override
    protected int getItemLayoutId(int type) {
        return type == TYPE_THREAD ? R.layout.item_thread_list_post : R.layout.item_thread_list;
    }

    private boolean appendTextToLastTextView(List<View> views, CharSequence newContent) {
        if (views.size() > 0) {
            View lastView = views.get(views.size() - 1);
            if (lastView instanceof TextView) {
                TextView lastTextView = (TextView) lastView;
                SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(lastTextView.getText());
                spannableStringBuilder.append(newContent);
                setText(lastTextView, spannableStringBuilder);
                return false;
            }
        }
        return true;
    }

    private boolean appendLinkToLastTextView(List<View> views, CharSequence newContent, String url) {
        if (views.size() > 0) {
            View lastView = views.get(views.size() - 1);
            if (lastView instanceof TextView) {
                TextView lastTextView = (TextView) lastView;
                setText(lastTextView, getLinkContent(lastTextView.getText(), newContent, url));
                return false;
            }
        }
        return true;
    }

    private CharSequence getLinkContent(CharSequence newContent, String url) {
        return getLinkContent("", newContent, url);
    }

    private CharSequence getLinkContent(CharSequence oldContent, CharSequence newContent, String url) {
        String linkIconText = "[链接]";
        String s = " ";
        int start = oldContent.length();
        int end = start + s.length() + linkIconText.length() + newContent.length();
        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(oldContent);
        Bitmap bitmap = Util.getBitmapFromVectorDrawable(mContext, R.drawable.ic_link);
        int size = DisplayUtil.sp2px(mContext, 16);
        int color = ThemeUtils.getColorByAttr(mContext, R.attr.colorAccent);
        bitmap = Bitmap.createScaledBitmap(bitmap, size, size, true);
        bitmap = Util.tintBitmap(bitmap, color);
        spannableStringBuilder.append(linkIconText, new MyImageSpan(mContext, bitmap), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
        spannableStringBuilder.append(s);
        spannableStringBuilder.append(newContent);
        spannableStringBuilder.setSpan(new MyURLSpan(mContext, url), start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
        return spannableStringBuilder;
    }

    private boolean appendUserToLastTextView(List<View> views, CharSequence newContent, String uid) {
        if (views.size() > 0) {
            View lastView = views.get(views.size() - 1);
            if (lastView instanceof TextView) {
                TextView lastTextView = (TextView) lastView;
                setText(lastTextView, getUserContent(lastTextView.getText(), newContent, uid));
                return false;
            }
        }
        return true;
    }

    private CharSequence getUserContent(CharSequence newContent, String uid) {
        return getUserContent("", newContent, uid);
    }

    private CharSequence getUserContent(CharSequence oldContent, CharSequence newContent, String uid) {
        int start = oldContent.length();
        int end = start + newContent.length();
        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(oldContent);
        spannableStringBuilder.append(newContent);
        spannableStringBuilder.setSpan(new MyUserSpan(mContext, uid), start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
        return spannableStringBuilder;
    }

    private TextView createTextView(int type) {
        TextView textView;
        if (type == TEXT_VIEW_TYPE_CONTENT) {
            TintMySpannableTextView mySpannableTextView = new TintMySpannableTextView(mContext);
            mySpannableTextView.setTintResId(R.color.default_color_text);
            mySpannableTextView.setLinkTouchMovementMethod(LinkTouchMovementMethod.getInstance());
            textView = mySpannableTextView;
        } else {
            TintTextView tintTextView = new TintTextView(mContext);
            tintTextView.setTintResId(R.color.default_color_text);
            tintTextView.setMovementMethod(LinkMovementClickMethod.getInstance());
            textView = tintTextView;
        }
        textView.setFocusable(false);
        textView.setClickable(false);
        textView.setLongClickable(false);
        textView.setTextIsSelectable(false);
        textView.setOnClickListener(null);
        textView.setOnLongClickListener(null);
        textView.setLetterSpacing(0.02F);
        if (type == TEXT_VIEW_TYPE_CONTENT) {
            textView.setTextSize(16);
            if (isImmersive()) {
                textView.setLineSpacing(0.5F, 1.3F);
            } else {
                textView.setLineSpacing(0.5F, 1.2F);
            }
        }
        return textView;
    }

    private void setText(TextView textView, CharSequence content) {
        content = BilibiliUtil.replaceVideoNumberSpan(mContext, content);
        content = StringUtil.getEmotionContent(EmotionUtil.EMOTION_ALL_TYPE, textView, content);
        textView.setText(content);
    }

    private LinearLayout.LayoutParams getLayoutParams(ThreadContentBean.ContentBean contentBean, String floor) {
        if (!"3".equals(contentBean.getType()) && !"20".equals(contentBean.getType()) && !"5".equals(contentBean.getType())) {
            return defaultLayoutParams;
        }
        float widthFloat, heightFloat;
        if (contentBean.getType().equals("3") || contentBean.getType().equals("20")) {
            String[] strings = contentBean.getBsize().split(",");
            widthFloat = Float.valueOf(strings[0]);
            heightFloat = Float.valueOf(strings[1]);
            heightFloat *= getMaxWidth(floor) / widthFloat;
            widthFloat = getMaxWidth(floor);
        } else {
            float width = Float.valueOf(contentBean.getWidth());
            widthFloat = getMaxWidth(floor);
            heightFloat = Float.valueOf(contentBean.getHeight());
            heightFloat *= widthFloat / width;
        }
        int width = Math.round(widthFloat);
        int height = Math.round(heightFloat);
        LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(width, height);
        layoutParams.gravity = Gravity.CENTER_HORIZONTAL;
        int dp16 = DisplayUtil.dp2px(mContext, 16);
        int dp4 = DisplayUtil.dp2px(mContext, 4);
        int dp2 = DisplayUtil.dp2px(mContext, 2);
        if ("1".equals(floor)) {
            layoutParams.setMargins(dp16, dp2, dp16, dp2);
        } else {
            layoutParams.setMargins(dp4, dp2, dp4, dp2);
        }
        return layoutParams;
    }

    private boolean needBlock(ThreadContentBean.PostListItemBean postListItemBean) {
        if (blockCacheMap != null && blockCacheMap.get(postListItemBean.getFloor()) != null) {
            return blockCacheMap.get(postListItemBean.getFloor());
        }
        if (postListItemBean.getAuthor() != null && BlockUtil.needBlock(postListItemBean.getAuthor())) {
            blockCacheMap.put(postListItemBean.getFloor(), true);
            return true;
        }
        ThreadContentBean.UserInfoBean userInfoBean = userInfoBeanMap.get(postListItemBean.getAuthorId());
        if (userInfoBean != null && BlockUtil.needBlock(userInfoBean.getName(), userInfoBean.getId())) {
            blockCacheMap.put(postListItemBean.getFloor(), true);
            return true;
        }
        for (ThreadContentBean.ContentBean contentBean : postListItemBean.getContent()) {
            switch (contentBean.getType()) {
                case "0":
                    if (BlockUtil.needBlock(contentBean.getText())) {
                        blockCacheMap.put(postListItemBean.getFloor(), true);
                        return true;
                    }
                    break;
            }
        }
        blockCacheMap.put(postListItemBean.getFloor(), false);
        return false;
    }

    private List<View> getContentViews(ThreadContentBean.PostListItemBean postListItemBean, int position) {
        List<View> views = new ArrayList<>();
        for (ThreadContentBean.ContentBean contentBean : postListItemBean.getContent()) {
            switch (contentBean.getType()) {
                case "0":
                case "9": {
                    if (appendTextToLastTextView(views, contentBean.getText())) {
                        TextView textView = createTextView(TEXT_VIEW_TYPE_CONTENT);
                        textView.setLayoutParams(getLayoutParams(contentBean, postListItemBean.getFloor()));
                        setText(textView, contentBean.getText());
                        views.add(textView);
                    }
                }
                break;
                case "1":
                    if (appendLinkToLastTextView(views, contentBean.getText(), contentBean.getLink())) {
                        TextView textView = createTextView(TEXT_VIEW_TYPE_CONTENT);
                        textView.setLayoutParams(getLayoutParams(contentBean, postListItemBean.getFloor()));
                        setText(textView, getLinkContent(contentBean.getText(), contentBean.getLink()));
                        views.add(textView);
                    }
                    break;
                case "2":
                    String emojiText = "#(" + contentBean.getC() + ")";
                    if (appendTextToLastTextView(views, emojiText)) {
                        TextView textView = createTextView(TEXT_VIEW_TYPE_CONTENT);
                        textView.setLayoutParams(getLayoutParams(contentBean, postListItemBean.getFloor()));
                        setText(textView, emojiText);
                        views.add(textView);
                    }
                    break;
                case "3":
                    String url = ImageUtil.getUrl(mContext, true, contentBean.getOriginSrc(), contentBean.getBigCdnSrc(), contentBean.getCdnSrcActive(), contentBean.getCdnSrc());
                    if (TextUtils.isEmpty(url)) {
                        break;
                    }
                    MyImageView imageView = new MyImageView(mContext);
                    imageView.setLayoutParams(getLayoutParams(contentBean, postListItemBean.getFloor()));
                    imageView.setScaleType(ImageView.ScaleType.FIT_CENTER);
                    ImageUtil.load(imageView, ImageUtil.LOAD_TYPE_SMALL_PIC, url);
                    List<PhotoViewBean> photoViewBeans = getPhotoViewBeans();
                    for (PhotoViewBean photoViewBean : photoViewBeans) {
                        if (TextUtils.equals(photoViewBean.getOriginUrl(), contentBean.getOriginSrc())) {
                            ImageUtil.initImageView(imageView,
                                    photoViewBeans,
                                    photoViewBeans.indexOf(photoViewBean),
                                    dataBean.getForum().getName(),
                                    dataBean.getForum().getId(),
                                    dataBean.getThread().getId(),
                                    isSeeLz(),
                                    OBJ_TYPE_THREAD_PAGE);
                            break;
                        }
                    }
                    views.add(imageView);
                    break;
                case "4":
                    if (appendUserToLastTextView(views, contentBean.getText(), contentBean.getUid())) {
                        TextView textView = createTextView(TEXT_VIEW_TYPE_CONTENT);
                        textView.setLayoutParams(getLayoutParams(contentBean, postListItemBean.getFloor()));
                        setText(textView, getUserContent(contentBean.getText(), contentBean.getUid()));
                        views.add(textView);
                    }
                    break;
                case "5":
                    if (contentBean.getSrc() != null && contentBean.getWidth() != null && contentBean.getHeight() != null) {
                        if (contentBean.getLink() != null) {
                            VideoPlayerStandard videoPlayerStandard = new VideoPlayerStandard(mContext);
                            videoPlayerStandard.setUp(contentBean.getLink(), "");
                            videoPlayerStandard.setLayoutParams(getLayoutParams(contentBean, postListItemBean.getFloor()));
                            videoPlayerStandard.setId(R.id.video_player);
                            ImageUtil.load(videoPlayerStandard.posterImageView, ImageUtil.LOAD_TYPE_SMALL_PIC, contentBean.getSrc(), true);
                            views.add(videoPlayerStandard);
                        } else {
                            MyImageView videoImageView = new MyImageView(mContext);
                            videoImageView.setLayoutParams(getLayoutParams(contentBean, postListItemBean.getFloor()));
                            videoImageView.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
                            ImageUtil.load(videoImageView, ImageUtil.LOAD_TYPE_SMALL_PIC, contentBean.getSrc(), true);
                            videoImageView.setOnClickListener(view -> {
                                navigationHelper.navigationByData(NavigationHelper.ACTION_URL, contentBean.getText());
                            });
                            views.add(videoImageView);
                        }
                    } else {
                        if (appendLinkToLastTextView(views, "[视频] " + contentBean.getText(), contentBean.getText())) {
                            TextView textView = createTextView(TEXT_VIEW_TYPE_CONTENT);
                            textView.setLayoutParams(defaultLayoutParams);
                            setText(textView, getLinkContent("[视频] " + contentBean.getText(), contentBean.getText()));
                            views.add(textView);
                        }
                    }
                    break;
                case "10":
                    String voiceUrl = "http://c.tieba.baidu.com/c/p/voice?voice_md5=" + contentBean.getVoiceMD5() + "&play_from=pb_voice_play";
                    Log.i(TAG, "getContentViews: " + contentBean.getDuringTime());
                    VoicePlayerView voicePlayerView = new VoicePlayerView(mContext);
                    voicePlayerView.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
                    //voicePlayerView.setMini(false);
                    voicePlayerView.setDuration(Integer.valueOf(contentBean.getDuringTime()));
                    voicePlayerView.setUrl(voiceUrl);
                    views.add(voicePlayerView);
                    break;
                case "20":
                    MyImageView memeImageView = new MyImageView(mContext);
                    memeImageView.setLayoutParams(getLayoutParams(contentBean, postListItemBean.getFloor()));
                    memeImageView.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
                    ImageUtil.load(memeImageView, ImageUtil.LOAD_TYPE_SMALL_PIC, contentBean.getSrc());
                    ImageUtil.initImageView(memeImageView, new PhotoViewBean(contentBean.getSrc(), contentBean.getSrc(), false));
                    views.add(memeImageView);
                    break;
                default:
                    break;
            }
        }
        return views;
    }

    private void initContentView(ViewHolder viewHolder, ThreadContentBean.PostListItemBean postListItemBean, int position) {
        MyLinearLayout myLinearLayout = viewHolder.getView(R.id.thread_list_item_content_content);
        myLinearLayout.removeAllViews();
        myLinearLayout.addViews(getContentViews(postListItemBean, position));
    }

    @Override
    protected int getViewType(int i, ThreadContentBean.PostListItemBean postListItemBean) {
        if ("1".equals(postListItemBean.getFloor())) {
            return TYPE_THREAD;
        }
        return TYPE_REPLY;
    }
}package com.huanchengfly.tieba.post.adapters;

import android.app.Activity;
import android.content.Context;

import com.huanchengfly.tieba.post.api.models.SearchForumBean;
import com.huanchengfly.tieba.post.R;
import com.huanchengfly.tieba.post.utils.ImageUtil;
import com.huanchengfly.tieba.post.utils.NavigationHelper;
import com.othershe.baseadapter.ViewHolder;
import com.othershe.baseadapter.base.MultiBaseAdapter;

import java.util.ArrayList;
import java.util.List;

public class SearchForumAdapter extends MultiBaseAdapter<SearchForumBean.ForumInfoBean> {
    public static final int TYPE_EXACT = 0;
    public static final int TYPE_FUZZY = 1;
    private NavigationHelper navigationHelper;

    public SearchForumAdapter(Context context) {
        super(context, null, true);
        navigationHelper = NavigationHelper.newInstance(context);
    }

    public void setData(SearchForumBean.DataBean data) {
        List<SearchForumBean.ForumInfoBean> forumInfoBeans = new ArrayList<>();
        if (data.getExactMatch() != null && data.getExactMatch().getForumNameShow() != null) {
            forumInfoBeans.add(data.getExactMatch());
        }
        forumInfoBeans.addAll(data.getFuzzyMatch());
        setNewData(forumInfoBeans);
    }

    private boolean canLoadGlide() {
        if (mContext instanceof Activity) {
            return !((Activity) mContext).isDestroyed();
        }
        return false;
    }

    @Override
    protected void convert(ViewHolder viewHolder, SearchForumBean.ForumInfoBean forumInfoBean, int position, int type) {
        viewHolder.setText(R.id.item_search_forum_title, forumInfoBean.getForumNameShow() + "吧");
        viewHolder.setOnClickListener(R.id.item_search_forum, (view) -> {
            navigationHelper.navigationByData(NavigationHelper.ACTION_FORUM, forumInfoBean.getForumName());
        });
        ImageUtil.load(viewHolder.getView(R.id.item_search_forum_avatar), ImageUtil.LOAD_TYPE_AVATAR, forumInfoBean.getAvatar());
        if (type == TYPE_EXACT) {
            SearchForumBean.ExactForumInfoBean exactForumInfoBean = (SearchForumBean.ExactForumInfoBean) forumInfoBean;
            viewHolder.setText(R.id.item_search_forum_subtitle, exactForumInfoBean.getSlogan());
        }
    }

    @Override
    protected int getItemLayoutId(int type) {
        if (type == TYPE_EXACT) {
            return R.layout.item_search_forum_exact;
        }
        return R.layout.item_search_forum;
    }

    @Override
    protected int getViewType(int i, SearchForumBean.ForumInfoBean forumInfoBean) {
        if (forumInfoBean instanceof SearchForumBean.ExactForumInfoBean) {
            return TYPE_EXACT;
        }
        return TYPE_FUZZY;
    }
}
package com.huanchengfly.tieba.post.adapters;

import android.content.Context;
import android.text.format.DateUtils;
import android.widget.TextView;

import androidx.core.text.HtmlCompat;

import com.huanchengfly.tieba.post.api.models.SearchPostBean;
import com.huanchengfly.tieba.post.R;
import com.huanchengfly.tieba.post.utils.NavigationHelper;
import com.othershe.baseadapter.ViewHolder;
import com.othershe.baseadapter.base.CommonBaseAdapter;

import java.util.HashMap;
import java.util.Map;

public class SearchPostAdapter extends CommonBaseAdapter<SearchPostBean.ThreadInfoBean> {
    private NavigationHelper navigationHelper;

    public SearchPostAdapter(Context context) {
        super(context, null, true);
        navigationHelper = NavigationHelper.newInstance(context);
    }

    @Override
    protected void convert(ViewHolder viewHolder, SearchPostBean.ThreadInfoBean threadInfoBean, int position) {
        viewHolder.setOnClickListener(R.id.item_search_thread, (view) -> {
            Map<String, String> map = new HashMap<>();
            map.put("tid", threadInfoBean.getTid());
            map.put("pid", threadInfoBean.getPid());
            navigationHelper.navigationByData(NavigationHelper.ACTION_THREAD, map);
        });
        TextView contentTextView = viewHolder.getView(R.id.item_search_thread_content);
        TextView titleTextView = viewHolder.getView(R.id.item_search_thread_title);
        titleTextView.setText(HtmlCompat.fromHtml(threadInfoBean.getTitle(), HtmlCompat.FROM_HTML_MODE_COMPACT));
        contentTextView.setText(HtmlCompat.fromHtml(threadInfoBean.getContent(), HtmlCompat.FROM_HTML_MODE_COMPACT));
        viewHolder.setText(R.id.item_search_thread_user, threadInfoBean.getAuthor().getNameShow());
        if (threadInfoBean.getForumName() == null) {
            viewHolder.setText(R.id.item_search_thread_info, String.valueOf(DateUtils.getRelativeTimeSpanString(Long.valueOf(threadInfoBean.getTime()) * 1000L)));
        } else {
            viewHolder.setText(R.id.item_search_thread_info, threadInfoBean.getForumName() + " " + DateUtils.getRelativeTimeSpanString(Long.valueOf(threadInfoBean.getTime()) * 1000L));
        }
    }

    @Override
    protected int getItemLayoutId() {
        return R.layout.item_search_thread;
    }
}
package com.huanchengfly.tieba.post.adapters;

import android.content.Context;
import android.text.format.DateUtils;
import android.view.View;

import com.allen.library.SuperTextView;
import com.huanchengfly.tieba.post.api.SearchThreadFilter;
import com.huanchengfly.tieba.post.api.SearchThreadOrder;
import com.huanchengfly.tieba.post.api.models.SearchThreadBean;
import com.huanchengfly.tieba.post.R;
import com.huanchengfly.tieba.post.components.dialogs.SingleChooseDialog;
import com.huanchengfly.tieba.post.fragments.SearchThreadFragment;
import com.huanchengfly.tieba.post.utils.NavigationHelper;
import com.huanchengfly.tieba.post.utils.Util;
import com.othershe.baseadapter.ViewHolder;
import com.othershe.baseadapter.base.CommonBaseAdapter;

import java.util.HashMap;
import java.util.Map;

public class SearchThreadAdapter extends CommonBaseAdapter<SearchThreadBean.ThreadInfoBean> {
    private NavigationHelper navigationHelper;
    private int order;
    private int filter;

    public SearchThreadAdapter(SearchThreadFragment fragment) {
        super(fragment.getContext(), null, true);
        order = 0;
        filter = 0;
        Context context = fragment.getContext();
        navigationHelper = NavigationHelper.newInstance(context);
        View headerView = Util.inflate(context, R.layout.layout_search_header);
        if (headerView != null) {
            SuperTextView orderTextView = headerView.findViewById(R.id.search_order);
            SuperTextView filterTextView = headerView.findViewById(R.id.search_filter);
            orderTextView.setOnSuperTextViewClickListener(view -> {
                SingleChooseDialog singleChooseDialog = new SingleChooseDialog(context, new String[]{"新贴在前", "旧贴在前", "相关度"})
                        .setOnChooseListener((position, title) -> {
                            order = position;
                            view.setCenterString(title);
                            switch (position) {
                                case 0:
                                    fragment.onSwitch(0, SearchThreadOrder.NEW.getValue());
                                    break;
                                case 1:
                                    fragment.onSwitch(0, SearchThreadOrder.OLD.getValue());
                                    break;
                                case 2:
                                    fragment.onSwitch(0, SearchThreadOrder.RELEVANT.getValue());
                                    break;
                            }
                        })
                        .setChoosePosition(order);
                singleChooseDialog.show();
            });
            filterTextView.setOnSuperTextViewClickListener(view -> {
                SingleChooseDialog singleChooseDialog = new SingleChooseDialog(context, new String[]{"只看主题贴", "显示全部"})
                        .setOnChooseListener((position, title) -> {
                            filter = position;
                            view.setCenterString(title);
                            switch (position) {
                                case 0:
                                    fragment.onSwitch(1, SearchThreadFilter.ONLY_THREAD.getValue());
                                    break;
                                case 1:
                                    fragment.onSwitch(1, SearchThreadFilter.ALL.getValue());
                                    break;
                            }
                        })
                        .setChoosePosition(filter);
                singleChooseDialog.show();
            });
            addHeaderView(headerView);
        }
    }

    @Override
    protected void convert(ViewHolder viewHolder, SearchThreadBean.ThreadInfoBean threadInfoBean, int position) {
        viewHolder.setOnClickListener(R.id.item_search_thread, (view) -> {
            Map<String, String> map = new HashMap<>();
            map.put("tid", threadInfoBean.getTid());
            map.put("pid", threadInfoBean.getPid());
            navigationHelper.navigationByData(NavigationHelper.ACTION_THREAD, map);
        });
        viewHolder.setText(R.id.item_search_thread_title, threadInfoBean.getTitle());
        viewHolder.setText(R.id.item_search_thread_content, threadInfoBean.getContent());
        viewHolder.setText(R.id.item_search_thread_user, threadInfoBean.getUser().getUserName());
        if (threadInfoBean.getForumName() == null) {
            viewHolder.setText(R.id.item_search_thread_info, String.valueOf(DateUtils.getRelativeTimeSpanString(Long.valueOf(threadInfoBean.getTime()) * 1000L)));
        } else {
            viewHolder.setText(R.id.item_search_thread_info, threadInfoBean.getForumName() + " " + DateUtils.getRelativeTimeSpanString(Long.valueOf(threadInfoBean.getTime()) * 1000L));
        }
    }

    @Override
    protected int getItemLayoutId() {
        return R.layout.item_search_thread;
    }
}
package com.huanchengfly.tieba.post.adapters;

import android.content.Context;
import android.text.TextUtils;

import com.huanchengfly.tieba.post.api.models.SearchUserBean;
import com.huanchengfly.tieba.post.R;
import com.huanchengfly.tieba.post.utils.ImageUtil;
import com.huanchengfly.tieba.post.utils.NavigationHelper;
import com.huanchengfly.tieba.post.utils.StringUtil;
import com.othershe.baseadapter.ViewHolder;
import com.othershe.baseadapter.base.CommonBaseAdapter;

import java.util.ArrayList;
import java.util.List;

public class SearchUserAdapter extends CommonBaseAdapter<SearchUserBean.UserBean> {
    private NavigationHelper navigationHelper;

    public SearchUserAdapter(Context context) {
        super(context, null, true);
        navigationHelper = NavigationHelper.newInstance(context);
    }

    public void setData(SearchUserBean.SearchUserDataBean data) {
        List<SearchUserBean.UserBean> forumInfoBeans = new ArrayList<>();
        if (data.getExactMatch() != null) forumInfoBeans.add(data.getExactMatch());
        forumInfoBeans.addAll(data.getFuzzyMatch());
        setNewData(forumInfoBeans);
    }

    @Override
    protected void convert(ViewHolder viewHolder, SearchUserBean.UserBean userBean, int position) {
        viewHolder.setText(R.id.item_search_forum_title, StringUtil.getUsernameString(mContext, userBean.getName(), userBean.getUserNickname()));
        viewHolder.setOnClickListener(R.id.item_search_forum, (view) -> {
            navigationHelper.navigationByData(NavigationHelper.ACTION_USER_BY_UID, userBean.getId());
        });
        ImageUtil.load(viewHolder.getView(R.id.item_search_forum_avatar), ImageUtil.LOAD_TYPE_AVATAR, userBean.getPortrait());
        StringBuilder subTitleBuilder = new StringBuilder();
        if (!TextUtils.isEmpty(userBean.getIntro())) {
            subTitleBuilder.append(userBean.getIntro());
            subTitleBuilder.append("\n");
        }
        subTitleBuilder.append(mContext.getString(R.string.fans_num, userBean.getFansNum()));
        viewHolder.setText(R.id.item_search_forum_subtitle, subTitleBuilder.toString());
    }

    @Override
    protected int getItemLayoutId() {
        return R.layout.item_search_user;
    }
}
package com.huanchengfly.tieba.post.adapters;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.TextView;

import com.huanchengfly.tieba.post.R;

import java.util.List;

public class SingleChooseAdapter extends BaseAdapter {
    private List<String> strings;
    private int choosePosition;
    private LayoutInflater mInflater;

    public SingleChooseAdapter(Context context, List<String> strings) {
        this(context, strings, 0);
    }

    public SingleChooseAdapter(Context context, List<String> strings, int choosePosition) {
        this.mInflater = LayoutInflater.from(context);
        this.strings = strings;
        this.choosePosition = choosePosition;
    }

    public int getChoosePosition() {
        return choosePosition;
    }

    public void setChoosePosition(int choosePosition) {
        this.choosePosition = choosePosition;
        notifyDataSetChanged();
    }

    @Override
    public int getCount() {
        return strings.size();
    }

    @Override
    public Object getItem(int position) {
        return strings.get(position);
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        ViewHolder viewHolder;
        if (convertView == null) {
            viewHolder = new ViewHolder();
            convertView = mInflater.inflate(R.layout.item_choose, null);
            viewHolder.titleTextView = convertView.findViewById(R.id.item_choose_title);
            viewHolder.imageView = convertView.findViewById(R.id.item_choose_icon);
            convertView.setTag(viewHolder);
        } else {
            viewHolder = (ViewHolder) convertView.getTag();
        }
        viewHolder.titleTextView.setText(strings.get(position));
        if (position == choosePosition)
            viewHolder.imageView.setVisibility(View.VISIBLE);
        else
            viewHolder.imageView.setVisibility(View.GONE);
        return convertView;
    }

    private class ViewHolder {
        private TextView titleTextView;
        private ImageView imageView;
    }
}
package com.huanchengfly.tieba.post.adapters;

import android.view.View;
import android.view.ViewGroup;

import androidx.annotation.NonNull;
import androidx.viewpager.widget.PagerAdapter;

import java.util.ArrayList;
import java.util.List;

public class TabViewPagerAdapter extends PagerAdapter {
    private List<View> views = new ArrayList<>();
    private List<String> titles = new ArrayList<>();
    private int currentPosition;

    public int getCurrentPosition() {
        return currentPosition;
    }

    @Override
    public int getCount() {
        return views.size();
    }

    @Override
    public boolean isViewFromObject(@NonNull View view, @NonNull Object object) {
        return view == object;
    }

    public void addView(View view, String title) {
        views.add(view);
        titles.add(title);
    }

    @Override
    public CharSequence getPageTitle(int position) {
        return titles.get(position);
    }

    @NonNull
    @Override
    public Object instantiateItem(@NonNull ViewGroup container, int position) {
        currentPosition = position;
        View view = views.get(position);
        container.addView(view);
        return view;
    }

    @Override
    public void destroyItem(@NonNull ViewGroup container, int position, @NonNull Object object) {
        container.removeView((View) object);
    }
}package com.huanchengfly.tieba.post.adapters;

import android.text.Editable;
import android.text.TextWatcher;

public class TextWatcherAdapter implements TextWatcher {
    @Override
    public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
    }

    @Override
    public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
    }

    @Override
    public void afterTextChanged(Editable editable) {
    }
}
package com.huanchengfly.tieba.post.adapters;

import android.content.Context;
import android.content.Intent;
import android.content.res.ColorStateList;
import android.graphics.Color;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.ColorInt;
import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.huanchengfly.tieba.post.ui.theme.interfaces.ExtraRefreshable;
import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
import com.huanchengfly.tieba.post.R;
import com.huanchengfly.tieba.post.activities.TranslucentThemeActivity;
import com.huanchengfly.tieba.post.BaseApplication;
import com.huanchengfly.tieba.post.components.MyViewHolder;
import com.huanchengfly.tieba.post.components.dialogs.CustomThemeDialog;
import com.huanchengfly.tieba.post.interfaces.OnItemClickListener;
import com.huanchengfly.tieba.post.utils.ThemeUtil;
import com.huanchengfly.tieba.post.utils.ColorUtils;

import java.util.Arrays;
import java.util.List;

import static com.huanchengfly.tieba.post.utils.ThemeUtil.THEME_CUSTOM;
import static com.huanchengfly.tieba.post.utils.ThemeUtil.THEME_TRANSLUCENT;

public class ThemeAdapter extends RecyclerView.Adapter<MyViewHolder> implements View.OnClickListener {
    public static final int THEME_DAY = 0;
    public static final int THEME_NIGHT = 1;

    private Context mContext;
    private String[] themes;
    private String[] themeNames;
    private OnItemClickListener<String> onItemClickListener;
    private int selectedPosition;

    public ThemeAdapter(Context context) {
        this.mContext = context;
        themes = mContext.getResources().getStringArray(R.array.theme_values);
        themeNames = mContext.getResources().getStringArray(R.array.themeNames);
        List<String> themeList = Arrays.asList(themes);
        selectedPosition = themeList.indexOf(ThemeUtil.getTheme(mContext));
    }

    public OnItemClickListener<String> getOnItemClickListener() {
        return onItemClickListener;
    }

    public ThemeAdapter setOnItemClickListener(OnItemClickListener<String> onItemClickListener) {
        this.onItemClickListener = onItemClickListener;
        return this;
    }

    @NonNull
    @Override
    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        return new MyViewHolder(mContext, R.layout.item_theme);
    }

    private int alphaColor(@ColorInt int origin) {
        int r = Color.red(origin);
        int g = Color.green(origin);
        int b = Color.blue(origin);
        return Color.argb(254, r, g, b);
    }

    private int getToolbarColor(String theme) {
        if (ThemeUtil.THEME_WHITE.equals(theme) || ThemeUtil.isNightMode(theme)) {
            return BaseApplication.ThemeDelegate.INSTANCE.getColorByAttr(mContext, R.attr.colorToolbar, theme);
        } else if (THEME_TRANSLUCENT.equals(theme)) {
            return ColorUtils.alpha(BaseApplication.ThemeDelegate.INSTANCE.getColorByAttr(mContext, R.attr.colorPrimary, theme), 150);
        }
        return BaseApplication.ThemeDelegate.INSTANCE.getColorByAttr(mContext, R.attr.colorPrimary, theme);
    }

    @Override
    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {
        int type = getItemViewType(position);
        View previewView = holder.getView(R.id.theme_preview);
        TextView themeName = holder.getView(R.id.theme_name);
        holder.setVisibility(R.id.night_mode_tip, type == THEME_NIGHT ? View.VISIBLE : View.GONE);
        ImageView selected = holder.getView(R.id.theme_selected);
        String theme = themes[position];
        int toolbarColor = getToolbarColor(theme);
        themeName.setText(themeNames[position]);
        selected.setVisibility(position == selectedPosition ? View.VISIBLE : View.GONE);
        selected.setTag(theme);
        if (THEME_CUSTOM.equals(theme) || THEME_TRANSLUCENT.equals(theme)) {
            selected.setImageResource(R.drawable.ic_round_create);
            selected.setOnClickListener(this);
        } else {
            selected.setImageResource(R.drawable.ic_round_check);
            selected.setOnClickListener(null);
        }
        previewView.setBackgroundTintList(ColorStateList.valueOf(toolbarColor));
        holder.setItemOnClickListener(v -> {
            int oldPosition = selectedPosition + 0;
            selectedPosition = position;
            notifyItemChanged(oldPosition);
            notifyItemChanged(position);
            if (getOnItemClickListener() != null) {
                getOnItemClickListener().onClick(holder.itemView, theme, position, type);
            }
        });
    }

    @Override
    public int getItemCount() {
        return themes.length;
    }

    @Override
    public int getItemViewType(int position) {
        String theme = themes[position];
        if (ThemeUtil.isNightMode(theme)) {
            return THEME_NIGHT;
        }
        return THEME_DAY;
    }

    @Override
    public void onClick(View v) {
        if (v.getId() != R.id.theme_selected) {
            return;
        }
        String theme = (String) v.getTag();
        if (THEME_CUSTOM.equals(theme)) {
            CustomThemeDialog customThemeDialog = new CustomThemeDialog(mContext);
            customThemeDialog.setOnDismissListener(dialog -> {
                if (mContext instanceof ExtraRefreshable) {
                    ThemeUtils.refreshUI(mContext, (ExtraRefreshable) mContext);
                }
            });
            customThemeDialog.show();
        } else if (THEME_TRANSLUCENT.equals(theme)) {
            mContext.startActivity(new Intent(mContext, TranslucentThemeActivity.class));
        }
    }
}
package com.huanchengfly.tieba.post.adapters;

import android.content.Context;
import android.content.res.ColorStateList;
import android.graphics.Color;
import android.view.View;
import android.view.ViewGroup;

import androidx.annotation.NonNull;
import androidx.palette.graphics.Palette;
import androidx.recyclerview.widget.RecyclerView;

import com.huanchengfly.tieba.post.R;
import com.huanchengfly.tieba.post.components.MyViewHolder;
import com.huanchengfly.tieba.post.interfaces.OnItemClickListener;

import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.List;

public class ThemeColorAdapter extends RecyclerView.Adapter<MyViewHolder> {
    private static final int[] sColors = new int[]{
            Color.parseColor("#FF4477E0"),
            Color.parseColor("#FFFF9A9E"),
            Color.parseColor("#FFC51100"),
            Color.parseColor("#FF000000"),
            Color.parseColor("#FF512DA8")
    };
    private WeakReference<Context> mContextWeakReference;
    private List<Integer> mColors;
    private OnItemClickListener<Integer> mOnItemClickListener;
    private int mSelectedColor;

    public ThemeColorAdapter(Context context) {
        mContextWeakReference = new WeakReference<>(context);
    }

    public OnItemClickListener<Integer> getOnItemClickListener() {
        return mOnItemClickListener;
    }

    public void setOnItemClickListener(OnItemClickListener<Integer> onItemClickListener) {
        mOnItemClickListener = onItemClickListener;
        notifyDataSetChanged();
    }

    public Context getContext() {
        return mContextWeakReference.get();
    }

    public void setPalette(Palette palette) {
        mColors = new ArrayList<>();
        int[] colors = new int[]{
                palette.getVibrantColor(Color.TRANSPARENT),
                palette.getMutedColor(Color.TRANSPARENT),
                palette.getDominantColor(Color.TRANSPARENT)
        };
        for (int color : colors) {
            if (color != Color.TRANSPARENT) mColors.add(color);
        }
        for (int color : sColors) {
            mColors.add(color);
        }
        notifyDataSetChanged();
    }

    @NonNull
    @Override
    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        return new MyViewHolder(getContext(), R.layout.item_theme_color);
    }

    @Override
    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {
        holder.setItemOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mSelectedColor = mColors.get(position);
                notifyDataSetChanged();
                if (getOnItemClickListener() != null) {
                    getOnItemClickListener().onClick(holder.itemView, mColors.get(position), position, 0);
                }
            }
        });
        View preview = holder.getView(R.id.theme_preview);
        preview.setBackgroundTintList(ColorStateList.valueOf(mColors.get(position)));
        if (mSelectedColor == mColors.get(position)) {
            holder.setVisibility(R.id.theme_selected, View.VISIBLE);
        } else {
            holder.setVisibility(R.id.theme_selected, View.GONE);
        }
    }

    @Override
    public int getItemCount() {
        return mColors.size();
    }
}
package com.huanchengfly.tieba.post.adapters;

import android.content.Context;
import android.text.SpannableStringBuilder;
import android.text.Spanned;
import android.text.TextUtils;
import android.widget.TextView;

import com.huanchengfly.tieba.post.R;
import com.huanchengfly.tieba.post.api.models.ThreadStoreBean;
import com.huanchengfly.tieba.post.components.spans.RoundBackgroundColorSpan;
import com.huanchengfly.tieba.post.interfaces.OnDeleteListener;
import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
import com.huanchengfly.tieba.post.utils.DisplayUtil;
import com.huanchengfly.tieba.post.utils.ImageUtil;
import com.huanchengfly.tieba.post.utils.StringUtil;
import com.huanchengfly.tieba.post.utils.ThemeUtil;
import com.othershe.baseadapter.ViewHolder;
import com.othershe.baseadapter.base.CommonBaseAdapter;

import static com.huanchengfly.tieba.post.utils.Util.alphaColor;

public class ThreadStoreAdapter extends CommonBaseAdapter<ThreadStoreBean.ThreadStoreInfo> {
    public static final String TAG = "ThreadStoreAdapter";

    public ThreadStoreAdapter(Context context) {
        super(context, null, true);
    }

    public ThreadStoreAdapter setOnDeleteListener(OnDeleteListener onDeleteListener) {
        return this;
    }

    @Override
    protected void convert(ViewHolder viewHolder, ThreadStoreBean.ThreadStoreInfo threadStoreInfo, int position) {
        TextView textView = viewHolder.getView(R.id.collect_item_title);
        if ("1".equals(threadStoreInfo.isDeleted())) {
            textView.setTextColor(ThemeUtils.getColorByAttr(mContext, R.attr.color_text_disabled));
            viewHolder.setText(R.id.collect_item_header_title, R.string.tip_store_deleted);
        } else {
            textView.setTextColor(ThemeUtil.getTextColor(mContext));
            viewHolder.setText(R.id.collect_item_header_title, threadStoreInfo.getAuthor().getNameShow() + "的贴子");
        }
        ImageUtil.load(
                viewHolder.getView(R.id.collect_item_avatar),
                ImageUtil.LOAD_TYPE_AVATAR,
                StringUtil.getAvatarUrl(threadStoreInfo.getAuthor().getUserPortrait())
        );
        SpannableStringBuilder builder = new SpannableStringBuilder();
        if (!TextUtils.equals(threadStoreInfo.getCount(), "0") &&
                !TextUtils.equals(threadStoreInfo.getPostNo(), "0")) {
            builder.append(mContext.getString(R.string.tip_thread_store_update, threadStoreInfo.getPostNo()),
                    new RoundBackgroundColorSpan(mContext, alphaColor(ThemeUtils.getColorByAttr(mContext, R.attr.colorAccent), 30),
                            ThemeUtils.getColorByAttr(mContext, R.attr.colorAccent),
                            DisplayUtil.dp2px(mContext, 12)), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
            builder.append(" ");
        }
        builder.append(threadStoreInfo.getTitle());
        textView.setText(builder);
    }

    @Override
    protected int getItemLayoutId() {
        return R.layout.item_collect_thread;
    }
}
package com.huanchengfly.tieba.post.adapters;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.ViewGroup;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.huanchengfly.tieba.post.api.models.ForumRecommend;
import com.huanchengfly.tieba.post.R;
import com.huanchengfly.tieba.post.components.MyViewHolder;
import com.huanchengfly.tieba.post.interfaces.OnItemClickListener;
import com.huanchengfly.tieba.post.interfaces.OnItemLongClickListener;
import com.huanchengfly.tieba.post.utils.ImageUtil;

import java.util.ArrayList;
import java.util.List;

public class TopForumsAdapter extends RecyclerView.Adapter<MyViewHolder> {
    private Context mContext;
    private List<ForumRecommend.LikeForum> topForums;

    private OnItemClickListener<ForumRecommend.LikeForum> onItemClickListener;
    private OnItemLongClickListener<ForumRecommend.LikeForum> onItemLongClickListener;

    public TopForumsAdapter(Context context) {
        this.mContext = context;
        topForums = new ArrayList<>();
    }

    public OnItemClickListener<ForumRecommend.LikeForum> getOnItemClickListener() {
        return onItemClickListener;
    }

    public TopForumsAdapter setOnItemClickListener(OnItemClickListener<ForumRecommend.LikeForum> onItemClickListener) {
        this.onItemClickListener = onItemClickListener;
        return this;
    }

    public OnItemLongClickListener<ForumRecommend.LikeForum> getOnItemLongClickListener() {
        return onItemLongClickListener;
    }

    public TopForumsAdapter setOnItemLongClickListener(OnItemLongClickListener<ForumRecommend.LikeForum> onItemLongClickListener) {
        this.onItemLongClickListener = onItemLongClickListener;
        return this;
    }

    public void setData(List<ForumRecommend.LikeForum> likeForums) {
        this.topForums = likeForums;
        notifyDataSetChanged();
    }

    @NonNull
    @Override
    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        return new MyViewHolder(LayoutInflater.from(mContext).inflate(R.layout.item_top_forum, parent, false));
    }

    @Override
    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {
        ForumRecommend.LikeForum likeForum = topForums.get(position);
        holder.setText(R.id.forum_item_name, likeForum.getForumName());
        holder.setItemOnClickListener(v -> {
            if (getOnItemClickListener() != null) {
                getOnItemClickListener().onClick(holder.itemView, likeForum, position, getItemViewType(position));
            }
        });
        holder.setItemOnLongClickListener(v -> {
            if (getOnItemLongClickListener() != null) {
                return getOnItemLongClickListener().onLongClick(holder.itemView, likeForum, position, getItemViewType(position));
            }
            return false;
        });
        ImageUtil.load(holder.getView(R.id.forum_item_avatar), ImageUtil.LOAD_TYPE_AVATAR, likeForum.getAvatar());
    }

    @Override
    public int getItemCount() {
        return topForums.size();
    }
}
package com.huanchengfly.tieba.post.adapters;

import android.content.Context;
import android.text.TextUtils;
import android.view.View;

import com.huanchengfly.tieba.post.api.models.UserLikeForumBean;
import com.huanchengfly.tieba.post.R;
import com.huanchengfly.tieba.post.utils.ImageUtil;
import com.othershe.baseadapter.ViewHolder;
import com.othershe.baseadapter.base.CommonBaseAdapter;

public class UserLikeForumAdapter extends CommonBaseAdapter<UserLikeForumBean.ForumBean> {
    public UserLikeForumAdapter(Context context) {
        super(context, null, true);
    }

    @Override
    protected void convert(ViewHolder viewHolder, UserLikeForumBean.ForumBean forumBean, int position) {
        viewHolder.setText(R.id.forum_item_name, forumBean.getName());
        ImageUtil.load(viewHolder.getView(R.id.forum_item_avatar), ImageUtil.LOAD_TYPE_AVATAR, forumBean.getAvatar());
        viewHolder.setText(R.id.forum_item_slogan, forumBean.getSlogan());
        viewHolder.setVisibility(R.id.forum_item_slogan, TextUtils.isEmpty(forumBean.getSlogan()) ? View.GONE : View.VISIBLE);
    }

    @Override
    protected int getItemLayoutId() {
        return R.layout.item_user_like_forum;
    }
}
package com.huanchengfly.tieba.post.adapters;

import android.content.Context;
import android.text.TextUtils;
import android.text.format.DateUtils;
import android.util.Log;
import android.view.View;
import android.widget.TextView;

import com.huanchengfly.tieba.post.ExtensionsKt;
import com.huanchengfly.tieba.post.api.models.UserPostBean;
import com.huanchengfly.tieba.post.R;
import com.huanchengfly.tieba.post.utils.ImageUtil;
import com.huanchengfly.tieba.post.utils.NavigationHelper;
import com.huanchengfly.tieba.post.utils.StringUtil;
import com.othershe.baseadapter.ViewHolder;
import com.othershe.baseadapter.base.MultiBaseAdapter;

import java.util.HashMap;
import java.util.Map;

public class UserPostAdapter extends MultiBaseAdapter<UserPostBean.PostBean> {
    public static final int TYPE_THREAD = 0;
    public static final int TYPE_REPLY = 1;

    private NavigationHelper navigationHelper;

    public UserPostAdapter(Context context) {
        super(context, null, true);
        navigationHelper = NavigationHelper.newInstance(mContext);
    }

    @Override
    protected void convert(ViewHolder viewHolder, UserPostBean.PostBean postBean, int position, int type) {
        if (type == TYPE_THREAD) {
            viewHolder.setText(R.id.forum_item_comment_count_text, postBean.getReplyNum());
            viewHolder.setVisibility(R.id.forum_item_good_tip, View.GONE);
            viewHolder.setOnClickListener(R.id.forum_item, view -> {
                Map<String, String> map = new HashMap<>();
                map.put("tid", postBean.getThreadId());
                navigationHelper.navigationByData(NavigationHelper.ACTION_THREAD, map);
            });
            if (!TextUtils.isEmpty(postBean.getForumName())) {
                viewHolder.setVisibility(R.id.forum_item_forum_name, View.VISIBLE);
                viewHolder.setText(R.id.forum_item_forum_name, mContext.getString(R.string.tip_from_forum, postBean.getForumName()));
            } else {
                viewHolder.setVisibility(R.id.forum_item_forum_name, View.GONE);
            }
            if ("1".equals(postBean.getIsNoTitle())) {
                viewHolder.setVisibility(R.id.forum_item_title_holder, View.GONE);
            } else {
                viewHolder.setVisibility(R.id.forum_item_title_holder, View.VISIBLE);
                viewHolder.setText(R.id.forum_item_title, postBean.getTitle());
            }
            TextView textView = viewHolder.getView(R.id.forum_item_content_text);
            StringBuilder stringBuilder = new StringBuilder();
            if (postBean.getAbstracts() != null) {
                for (UserPostBean.PostContentBean postContentBean : postBean.getAbstracts()) {
                    stringBuilder.append(postContentBean.getText());
                }
                if (stringBuilder.length() > 0) {
                    textView.setVisibility(View.VISIBLE);
                    textView.setText(stringBuilder);
                } else {
                    textView.setText("");
                    textView.setVisibility(View.GONE);
                }
            } else {
                textView.setText("");
                textView.setVisibility(View.GONE);
            }
            viewHolder.setText(R.id.forum_item_user_name, StringUtil.getUsernameString(mContext, postBean.getUserName(), postBean.getNameShow()));
            viewHolder.setText(R.id.forum_item_user_time, String.valueOf(DateUtils.getRelativeTimeSpanString(Long.valueOf(postBean.getCreateTime()) * 1000L)));
            ImageUtil.load(viewHolder.getView(R.id.forum_item_user_avatar), ImageUtil.LOAD_TYPE_AVATAR, postBean.getUserPortrait());
        } else if (type == TYPE_REPLY) {
            ImageUtil.load(viewHolder.getView(R.id.message_list_item_user_avatar), ImageUtil.LOAD_TYPE_AVATAR, postBean.getUserPortrait());
            viewHolder.setText(R.id.message_list_item_user_name, StringUtil.getUsernameString(mContext, postBean.getUserName(), postBean.getNameShow()));
            viewHolder.setText(R.id.message_list_item_user_time, String.valueOf(DateUtils.getRelativeTimeSpanString(Long.valueOf(postBean.getCreateTime()) * 1000L)));
            TextView contentTextView = viewHolder.getView(R.id.message_list_item_content);
            StringBuilder content = new StringBuilder();
            for (UserPostBean.PostContentBean postContentBean : postBean.getContent().get(0).getPostContent()) {
                Log.i("UserPostAdapter", "convert: " + ExtensionsKt.toJson(postContentBean));
                content.append(postContentBean.getText());
            }
            contentTextView.setText(content);
            viewHolder.setText(R.id.message_list_item_quote, postBean.getTitle().replace("回复：", "原贴："));
            viewHolder.setOnClickListener(R.id.message_list_item_quote_parent, v -> {
                HashMap<String, String> hashMap = new HashMap<>();
                hashMap.put("tid", postBean.getThreadId());
                navigationHelper.navigationByData(NavigationHelper.ACTION_THREAD, hashMap);
            });
            viewHolder.setText(R.id.message_list_item_source, mContext.getString(R.string.text_message_list_item_source, postBean.getForumName()));
        }
    }

    @Override
    protected int getItemLayoutId(int type) {
        return type == TYPE_THREAD ? R.layout.item_forum_thread_common : R.layout.item_message_list;
    }

    @Override
    protected int getViewType(int position, UserPostBean.PostBean postBean) {
        return "1".equals(postBean.getIsThread()) ? TYPE_THREAD : TYPE_REPLY;
    }
}
package com.huanchengfly.tieba.post.adapters;

import android.view.ViewGroup;

import androidx.annotation.NonNull;
import androidx.fragment.app.FragmentManager;
import androidx.fragment.app.FragmentPagerAdapter;

import com.huanchengfly.tieba.post.fragments.BaseFragment;

import java.util.ArrayList;
import java.util.List;

public class ViewPagerAdapter extends FragmentPagerAdapter {
    private BaseFragment currentFragment;
    private int currentFragmentPosition;
    private List<BaseFragment> fragments = new ArrayList<>();

    public ViewPagerAdapter(FragmentManager fm) {
        super(fm);
    }

    public List<BaseFragment> getFragments() {
        return fragments;
    }

    @NonNull
    @Override
    public BaseFragment getItem(int position) {
        return fragments.get(position);
    }

    @Override
    public int getCount() {
        return fragments.size();
    }

    public void addFragment(BaseFragment fragment) {
        fragments.add(fragment);
    }

    public void addFragment(BaseFragment fragment, int position) {
        fragments.add(position, fragment);
    }

    @Override
    public void setPrimaryItem(@NonNull ViewGroup container, int position, @NonNull Object object) {
        currentFragment = (BaseFragment) object;
        currentFragmentPosition = position;
        super.setPrimaryItem(container, position, object);
    }

    public BaseFragment getCurrentFragment() {
        return currentFragment;
    }

    public int getCurrentFragmentPosition() {
        return currentFragmentPosition;
    }

    public void clear() {
        fragments.clear();
        notifyDataSetChanged();
    }
}package com.huanchengfly.tieba.post.adapters;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.ViewGroup;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.huanchengfly.tieba.post.R;
import com.huanchengfly.tieba.post.components.MyViewHolder;
import com.huanchengfly.tieba.post.utils.NavigationHelper;

import java.lang.ref.WeakReference;
import java.util.List;

public class ZyqFriendAdapter extends RecyclerView.Adapter<MyViewHolder> {
    private WeakReference<Context> mContextWeakReference;
    private List<String> mList;
    private NavigationHelper mHelper;

    public ZyqFriendAdapter(Context context, List<String> list) {
        mContextWeakReference = new WeakReference<>(context);
        mList = list;
        mHelper = NavigationHelper.newInstance(getContext());
    }

    public Context getContext() {
        return mContextWeakReference.get();
    }

    @NonNull
    @Override
    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        return new MyViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.item_zyq_friend, parent, false));
    }

    @Override
    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {
        holder.setText(R.id.title, getContext().getString(R.string.title_forum, mList.get(position)));
        holder.setItemOnClickListener(v -> mHelper.navigationByData(NavigationHelper.ACTION_FORUM, mList.get(position)));
    }

    @Override
    public int getItemCount() {
        return mList.size();
    }
}
