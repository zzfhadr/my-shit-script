/BaseApplication.kt:1:package com.huanchengfly.tieba.post
/BaseApplication.kt:3:import android.app.Activity
/BaseApplication.kt:4:import android.app.Application
/BaseApplication.kt:5:import android.content.ClipboardManager
/BaseApplication.kt:6:import android.content.Context
/BaseApplication.kt:7:import android.content.Intent
/BaseApplication.kt:8:import android.content.res.ColorStateList
/BaseApplication.kt:9:import android.content.res.Configuration
/BaseApplication.kt:10:import android.graphics.Color
/BaseApplication.kt:11:import android.graphics.drawable.Drawable
/BaseApplication.kt:12:import android.net.Uri
/BaseApplication.kt:13:import android.os.Bundle
/BaseApplication.kt:14:import android.text.TextUtils
/BaseApplication.kt:15:import android.view.View
/BaseApplication.kt:16:import android.widget.FrameLayout
/BaseApplication.kt:17:import android.widget.ImageView
/BaseApplication.kt:18:import android.widget.TextView
/BaseApplication.kt:19:import androidx.appcompat.app.AppCompatDelegate
/BaseApplication.kt:20:import com.flurry.android.FlurryAgent
/BaseApplication.kt:21:import com.huanchengfly.tieba.post.api.interfaces.CommonCallback
/BaseApplication.kt:22:import com.huanchengfly.tieba.post.ui.theme.interfaces.ThemeSwitcher
/BaseApplication.kt:23:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils
/BaseApplication.kt:24:import com.huanchengfly.tieba.post.utils.*
/BaseApplication.kt:25:import com.huanchengfly.tieba.post.utils.QuickPreviewUtil.PreviewInfo
/BaseApplication.kt:26:import com.huanchengfly.tieba.post.utils.QuickPreviewUtil.getForumName
/BaseApplication.kt:27:import com.huanchengfly.tieba.post.utils.QuickPreviewUtil.getPreviewInfo
/BaseApplication.kt:28:import com.huanchengfly.tieba.post.utils.QuickPreviewUtil.isForumUrl
/BaseApplication.kt:29:import com.huanchengfly.tieba.post.utils.QuickPreviewUtil.isThreadUrl
/BaseApplication.kt:30:import org.intellij.lang.annotations.RegExp
/BaseApplication.kt:31:import org.litepal.LitePal
/BaseApplication.kt:32:import java.util.*
/BaseApplication.kt:33:import java.util.regex.Pattern
/BaseApplication.kt:35:class BaseApplication : Application() {
/BaseApplication.kt:36:    private val mActivityList: MutableList<Activity> = mutableListOf()
/BaseApplication.kt:38:    override fun onCreate() {
/BaseApplication.kt:39:        instance = this
/BaseApplication.kt:40:        super.onCreate()
/BaseApplication.kt:41:        ThemeUtils.init(ThemeDelegate)
/BaseApplication.kt:42:        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM)
/BaseApplication.kt:43:        LitePal.initialize(this)
/BaseApplication.kt:44:        FlurryAgent.Builder()
/BaseApplication.kt:45:                .withCaptureUncaughtExceptions(true)
/BaseApplication.kt:46:                .build(this, "ZMRX6W76WNF95ZHT857X")
/BaseApplication.kt:47:        registerActivityLifecycleCallbacks(object : ActivityLifecycleCallbacks {
/BaseApplication.kt:48:            private var clipBoardHash: String? = null
/BaseApplication.kt:49:            private fun updateClipBoardHashCode() {
/BaseApplication.kt:50:                clipBoardHash = getClipBoardHash()
/BaseApplication.kt:51:            }
/BaseApplication.kt:53:            private fun getClipBoardHash(): String? {
/BaseApplication.kt:54:                val cm = getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager
/BaseApplication.kt:55:                val data = cm.primaryClip
/BaseApplication.kt:56:                if (data != null) {
/BaseApplication.kt:57:                    val item = data.getItemAt(0)
/BaseApplication.kt:58:                    return item.toString().toMD5()
/BaseApplication.kt:59:                }
/BaseApplication.kt:60:                return null
/BaseApplication.kt:61:            }
/BaseApplication.kt:63:            private val clipBoard: String
/BaseApplication.kt:64:                get() {
/BaseApplication.kt:65:                    val cm = getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager
/BaseApplication.kt:66:                    val data = cm.primaryClip ?: return ""
/BaseApplication.kt:67:                    val item = data.getItemAt(0)
/BaseApplication.kt:68:                    return if (item == null || item.text == null) {
/BaseApplication.kt:69:                        ""
/BaseApplication.kt:70:                    } else item.text.toString()
/BaseApplication.kt:71:                }
/BaseApplication.kt:73:            private fun isTiebaDomain(host: String?): Boolean {
/BaseApplication.kt:74:                return host != null && (host.equals("wapp.baidu.com", ignoreCase = true) ||
/BaseApplication.kt:75:                        host.equals("tieba.baidu.com", ignoreCase = true) ||
/BaseApplication.kt:76:                        host.equals("tiebac.baidu.com", ignoreCase = true))
/BaseApplication.kt:77:            }
/BaseApplication.kt:79:            override fun onActivityCreated(activity: Activity, savedInstanceState: Bundle?) {}
/BaseApplication.kt:80:            override fun onActivityStarted(activity: Activity) {}
/BaseApplication.kt:81:            private fun updatePreviewView(context: Context, previewView: View, data: PreviewInfo?) {
/BaseApplication.kt:82:                if (data == null) {
/BaseApplication.kt:83:                    previewView.visibility = View.GONE
/BaseApplication.kt:84:                    return
/BaseApplication.kt:85:                }
/BaseApplication.kt:86:                previewView.visibility = View.VISIBLE
/BaseApplication.kt:87:                val iconView = Objects.requireNonNull(previewView).findViewById<ImageView>(R.id.icon)
/BaseApplication.kt:88:                val title = previewView.findViewById<TextView>(R.id.title)
/BaseApplication.kt:89:                val subtitle = previewView.findViewById<TextView>(R.id.subtitle)
/BaseApplication.kt:90:                title.text = data.title
/BaseApplication.kt:91:                subtitle.text = data.subtitle
/BaseApplication.kt:92:                if (data.icon != null) when (data.icon!!.type) {
/BaseApplication.kt:93:                    QuickPreviewUtil.Icon.TYPE_DRAWABLE_RES -> {
/BaseApplication.kt:94:                        iconView.setImageResource(data.icon!!.res)
/BaseApplication.kt:95:                        val iconLayoutParams = iconView.layoutParams as FrameLayout.LayoutParams
/BaseApplication.kt:96:                        run {
/BaseApplication.kt:97:                            iconLayoutParams.height = 24f.dpToPx()
/BaseApplication.kt:98:                            iconLayoutParams.width = iconLayoutParams.height
/BaseApplication.kt:99:                        }
/BaseApplication.kt:100:                        iconView.layoutParams = iconLayoutParams
/BaseApplication.kt:101:                        iconView.imageTintList = ColorStateList.valueOf(ThemeUtils.getColorByAttr(context, R.attr.colorAccent))
/BaseApplication.kt:102:                    }
/BaseApplication.kt:103:                    QuickPreviewUtil.Icon.TYPE_URL -> {
/BaseApplication.kt:104:                        ImageUtil.load(iconView, ImageUtil.LOAD_TYPE_AVATAR, data.icon!!.url)
/BaseApplication.kt:105:                        val avatarLayoutParams = iconView.layoutParams as FrameLayout.LayoutParams
/BaseApplication.kt:106:                        run {
/BaseApplication.kt:107:                            avatarLayoutParams.height = 40f.dpToPx()
/BaseApplication.kt:108:                            avatarLayoutParams.width = avatarLayoutParams.height
/BaseApplication.kt:109:                        }
/BaseApplication.kt:110:                        iconView.layoutParams = avatarLayoutParams
/BaseApplication.kt:111:                        iconView.imageTintList = null
/BaseApplication.kt:112:                    }
/BaseApplication.kt:113:                }
/BaseApplication.kt:114:            }
/BaseApplication.kt:116:            override fun onActivityResumed(activity: Activity) {
/BaseApplication.kt:117:                if (!TextUtils.equals(clipBoardHash, getClipBoardHash())) {
/BaseApplication.kt:118:                    @RegExp val regex = "((http|https)://)(([a-zA-Z0-9._-]+\\.[a-zA-Z]{2,6})|([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}))(:[0-9]{1,4})*(/[a-zA-Z0-9&%_./-~-]*)?"
/BaseApplication.kt:119:                    val pattern = Pattern.compile(regex)
/BaseApplication.kt:120:                    val matcher = pattern.matcher(clipBoard)
/BaseApplication.kt:121:                    if (matcher.find()) {
/BaseApplication.kt:122:                        val url = matcher.group()
/BaseApplication.kt:123:                        val uri = Uri.parse(url)
/BaseApplication.kt:124:                        if (isTiebaDomain(uri.host)) {
/BaseApplication.kt:125:                            val previewView = Util.inflate(activity, R.layout.preview_url)
/BaseApplication.kt:126:                            if (isForumUrl(uri)) {
/BaseApplication.kt:127:                                updatePreviewView(activity, previewView, PreviewInfo()
/BaseApplication.kt:128:                                        .setIconRes(R.drawable.ic_round_forum)
/BaseApplication.kt:129:                                        .setTitle(activity.getString(R.string.title_forum, getForumName(uri)))
/BaseApplication.kt:130:                                        .setSubtitle(activity.getString(R.string.tip_loading))
/BaseApplication.kt:131:                                        .setUrl(url))
/BaseApplication.kt:132:                            } else if (isThreadUrl(uri)) {
/BaseApplication.kt:133:                                updatePreviewView(activity, previewView, PreviewInfo()
/BaseApplication.kt:134:                                        .setIconRes(R.drawable.ic_round_mode_comment)
/BaseApplication.kt:135:                                        .setTitle(url)
/BaseApplication.kt:136:                                        .setSubtitle(activity.getString(R.string.tip_loading))
/BaseApplication.kt:137:                                        .setUrl(url))
/BaseApplication.kt:138:                            }
/BaseApplication.kt:139:                            getPreviewInfo(activity, url, object : CommonCallback<PreviewInfo> {
/BaseApplication.kt:140:                                override fun onSuccess(data: PreviewInfo) {
/BaseApplication.kt:141:                                    updatePreviewView(activity, previewView, data)
/BaseApplication.kt:142:                                }
/BaseApplication.kt:144:                                override fun onFailure(code: Int, error: String) {
/BaseApplication.kt:145:                                    updatePreviewView(activity, previewView, PreviewInfo()
/BaseApplication.kt:146:                                            .setUrl(url)
/BaseApplication.kt:147:                                            .setTitle(url)
/BaseApplication.kt:148:                                            .setSubtitle(activity.getString(R.string.subtitle_link))
/BaseApplication.kt:149:                                            .setIconRes(R.drawable.ic_link))
/BaseApplication.kt:150:                                }
/BaseApplication.kt:151:                            })
/BaseApplication.kt:152:                            DialogUtil.build(activity)
/BaseApplication.kt:153:                                    .setTitle(R.string.title_dialog_clip_board_tieba_url)
/BaseApplication.kt:154:                                    .setPositiveButton(R.string.button_yes) { _, _ ->
/BaseApplication.kt:155:                                        startActivity(Intent("com.huanchengfly.tieba.post.ACTION_JUMP", uri)
/BaseApplication.kt:156:                                                .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
/BaseApplication.kt:157:                                                .addCategory(Intent.CATEGORY_DEFAULT))
/BaseApplication.kt:158:                                    }
/BaseApplication.kt:159:                                    .setView(previewView)
/BaseApplication.kt:160:                                    .setNegativeButton(R.string.button_no, null)
/BaseApplication.kt:161:                                    .show()
/BaseApplication.kt:162:                        }
/BaseApplication.kt:163:                    }
/BaseApplication.kt:164:                }
/BaseApplication.kt:165:                updateClipBoardHashCode()
/BaseApplication.kt:166:            }
/BaseApplication.kt:168:            override fun onActivityPaused(activity: Activity) {}
/BaseApplication.kt:169:            override fun onActivityStopped(activity: Activity) {}
/BaseApplication.kt:170:            override fun onActivitySaveInstanceState(activity: Activity, outState: Bundle) {}
/BaseApplication.kt:171:            override fun onActivityDestroyed(activity: Activity) {}
/BaseApplication.kt:172:        })
/BaseApplication.kt:173:        //CrashUtil.CrashHandler crashHandler = CrashUtil.CrashHandler.getInstance();
/BaseApplication.kt:174:        //crashHandler.init(this);
/BaseApplication.kt:175:    }
/BaseApplication.kt:177:    /**
/BaseApplication.kt:178:     * 添加Activity
/BaseApplication.kt:179:     */
/BaseApplication.kt:180:    fun addActivity(activity: Activity) {
/BaseApplication.kt:181:        // 判断当前集合中不存在该Activity
/BaseApplication.kt:182:        if (!mActivityList.contains(activity)) {
/BaseApplication.kt:183:            mActivityList.add(activity) //把当前Activity添加到集合中
/BaseApplication.kt:184:        }
/BaseApplication.kt:185:    }
/BaseApplication.kt:187:    /**
/BaseApplication.kt:188:     * 销毁单个Activity
/BaseApplication.kt:189:     */
/BaseApplication.kt:190:    @JvmOverloads
/BaseApplication.kt:191:    fun removeActivity(activity: Activity, finish: Boolean = false) {
/BaseApplication.kt:192:        //判断当前集合中存在该Activity
/BaseApplication.kt:193:        if (mActivityList.contains(activity)) {
/BaseApplication.kt:194:            mActivityList.remove(activity) //从集合中移除
/BaseApplication.kt:195:            if (finish) activity.finish() //销毁当前Activity
/BaseApplication.kt:196:        }
/BaseApplication.kt:197:    }
/BaseApplication.kt:199:    /**
/BaseApplication.kt:200:     * 销毁所有的Activity
/BaseApplication.kt:201:     */
/BaseApplication.kt:202:    fun removeAllActivity() {
/BaseApplication.kt:203:        //通过循环，把集合中的所有Activity销毁
/BaseApplication.kt:204:        for (activity in mActivityList) {
/BaseApplication.kt:205:            activity.finish()
/BaseApplication.kt:206:        }
/BaseApplication.kt:207:    }
/BaseApplication.kt:209:    object ScreenInfo {
/BaseApplication.kt:210:        @JvmField
/BaseApplication.kt:211:        var EXACT_SCREEN_HEIGHT = 0
/BaseApplication.kt:213:        @JvmField
/BaseApplication.kt:214:        var EXACT_SCREEN_WIDTH = 0
/BaseApplication.kt:216:        @JvmField
/BaseApplication.kt:217:        var SCREEN_HEIGHT = 0
/BaseApplication.kt:219:        @JvmField
/BaseApplication.kt:220:        var SCREEN_WIDTH = 0
/BaseApplication.kt:222:        @JvmField
/BaseApplication.kt:223:        var DENSITY = 0f
/BaseApplication.kt:224:    }
/BaseApplication.kt:226:    companion object {
/BaseApplication.kt:227:        val TAG = BaseApplication::class.java.simpleName
/BaseApplication.kt:229:        @JvmStatic
/BaseApplication.kt:230:        var translucentBackground: Drawable? = null
/BaseApplication.kt:232:        private val packageName: String
/BaseApplication.kt:233:            get() = instance.packageName
/BaseApplication.kt:235:        @JvmStatic
/BaseApplication.kt:236:        lateinit var instance: BaseApplication
/BaseApplication.kt:237:            private set
/BaseApplication.kt:239:        val isSystemNight: Boolean
/BaseApplication.kt:240:            get() = nightMode == Configuration.UI_MODE_NIGHT_YES
/BaseApplication.kt:242:        val isFirstRun: Boolean
/BaseApplication.kt:243:            get() = SharedPreferencesUtil.get(SharedPreferencesUtil.SP_APP_DATA).getBoolean("first", true)
/BaseApplication.kt:245:        private val nightMode: Int
/BaseApplication.kt:246:            get() = instance.resources.configuration.uiMode and Configuration.UI_MODE_NIGHT_MASK
/BaseApplication.kt:247:    }
/BaseApplication.kt:249:    object ThemeDelegate : ThemeSwitcher {
/BaseApplication.kt:250:        fun getColorByAttr(context: Context, attrId: Int, theme: String): Int {
/BaseApplication.kt:251:            val resources = context.resources
/BaseApplication.kt:252:            when (attrId) {
/BaseApplication.kt:253:                R.attr.colorPrimary -> {
/BaseApplication.kt:254:                    if (ThemeUtil.THEME_CUSTOM == theme) {
/BaseApplication.kt:255:                        val customPrimaryColorStr = context.appPreferences.customPrimaryColor
/BaseApplication.kt:256:                        return if (customPrimaryColorStr != null) {
/BaseApplication.kt:257:                            Color.parseColor(customPrimaryColorStr)
/BaseApplication.kt:258:                        } else getColorByAttr(context, attrId, ThemeUtil.THEME_WHITE)
/BaseApplication.kt:259:                    } else if (ThemeUtil.THEME_TRANSLUCENT == theme) {
/BaseApplication.kt:260:                        val primaryColorStr = context.appPreferences.translucentPrimaryColor
/BaseApplication.kt:261:                        return if (primaryColorStr != null) {
/BaseApplication.kt:262:                            Color.parseColor(primaryColorStr)
/BaseApplication.kt:263:                        } else getColorByAttr(context, attrId, ThemeUtil.THEME_WHITE)
/BaseApplication.kt:264:                    }
/BaseApplication.kt:265:                    return context.getColorCompat(resources.getIdentifier("theme_color_primary_$theme", "color", packageName))
/BaseApplication.kt:266:                }
/BaseApplication.kt:267:                R.attr.colorAccent -> {
/BaseApplication.kt:268:                    return if (ThemeUtil.THEME_CUSTOM == theme || ThemeUtil.THEME_TRANSLUCENT == theme) {
/BaseApplication.kt:269:                        getColorByAttr(context, R.attr.colorPrimary, theme)
/BaseApplication.kt:270:                    } else context.getColorCompat(
/BaseApplication.kt:271:                            resources.getIdentifier("theme_color_accent_$theme", "color", packageName)
/BaseApplication.kt:272:                    )
/BaseApplication.kt:273:                }
/BaseApplication.kt:274:                R.attr.colorToolbar -> {
/BaseApplication.kt:275:                    if (ThemeUtil.THEME_TRANSLUCENT == theme) {
/BaseApplication.kt:276:                        return context.getColorCompat(R.color.transparent)
/BaseApplication.kt:277:                    }
/BaseApplication.kt:278:                    if (ThemeUtil.THEME_CUSTOM == theme) {
/BaseApplication.kt:279:                        val primary = context.appPreferences.customToolbarPrimaryColor
/BaseApplication.kt:280:                        return if (primary) {
/BaseApplication.kt:281:                            getColorByAttr(context, R.attr.colorPrimary, theme)
/BaseApplication.kt:282:                        } else context.getColorCompat(R.color.white)
/BaseApplication.kt:283:                    }
/BaseApplication.kt:284:                    return if (ThemeUtil.THEME_WHITE == theme || ThemeUtil.isNightMode(theme)) {
/BaseApplication.kt:285:                        context.getColorCompat(resources.getIdentifier("theme_color_toolbar_$theme", "color", packageName))
/BaseApplication.kt:286:                    } else getColorByAttr(context, R.attr.colorPrimary, theme)
/BaseApplication.kt:287:                }
/BaseApplication.kt:288:                R.attr.colorText -> {
/BaseApplication.kt:289:                    return if (ThemeUtil.THEME_TRANSLUCENT == theme) {
/BaseApplication.kt:290:                        context.getColorCompat(R.color.color_text_translucent_light)
/BaseApplication.kt:291:                    } else context.getColorCompat(if (ThemeUtil.isNightMode(context)) R.color.color_text_night else R.color.color_text)
/BaseApplication.kt:292:                }
/BaseApplication.kt:293:                R.attr.color_text_disabled -> {
/BaseApplication.kt:294:                    return if (ThemeUtil.THEME_TRANSLUCENT == theme) {
/BaseApplication.kt:295:                        context.getColorCompat(R.color.color_text_disabled_translucent_light)
/BaseApplication.kt:296:                    } else context.getColorCompat(if (ThemeUtil.isNightMode(context)) R.color.color_text_disabled_night else R.color.color_text_disabled)
/BaseApplication.kt:297:                }
/BaseApplication.kt:298:                R.attr.colorTextSecondary -> {
/BaseApplication.kt:299:                    return if (ThemeUtil.THEME_TRANSLUCENT == theme) {
/BaseApplication.kt:300:                        context.getColorCompat(R.color.color_text_secondary_translucent_light)
/BaseApplication.kt:301:                    } else context.getColorCompat(if (ThemeUtil.isNightMode(context)) R.color.color_text_secondary_night else R.color.color_text_secondary)
/BaseApplication.kt:302:                }
/BaseApplication.kt:303:                R.attr.colorTextOnPrimary -> {
/BaseApplication.kt:304:                    return if (ThemeUtil.THEME_TRANSLUCENT == theme) {
/BaseApplication.kt:305:                        context.getColorCompat(R.color.white)
/BaseApplication.kt:306:                    } else getColorByAttr(context, R.attr.colorBg, theme)
/BaseApplication.kt:307:                }
/BaseApplication.kt:308:                R.attr.colorBg -> {
/BaseApplication.kt:309:                    if (ThemeUtil.THEME_TRANSLUCENT == theme) {
/BaseApplication.kt:310:                        return context.getColorCompat(R.color.transparent)
/BaseApplication.kt:311:                    }
/BaseApplication.kt:312:                    return if (ThemeUtil.isNightMode(context)) {
/BaseApplication.kt:313:                        context.getColorCompat(resources.getIdentifier("theme_color_background_$theme", "color", packageName))
/BaseApplication.kt:314:                    } else context.getColorCompat(R.color.theme_color_background_light)
/BaseApplication.kt:315:                }
/BaseApplication.kt:316:                R.attr.colorUnselected -> {
/BaseApplication.kt:317:                    return if (ThemeUtil.THEME_TRANSLUCENT == theme) {
/BaseApplication.kt:318:                        context.getColorCompat(R.color.theme_color_unselected_translucent_light)
/BaseApplication.kt:319:                    } else context.getColorCompat(if (ThemeUtil.isNightMode(context)) resources.getIdentifier("theme_color_unselected_$theme", "color", packageName) else R.color.theme_color_unselected_day)
/BaseApplication.kt:320:                }
/BaseApplication.kt:321:                R.attr.colorNavBar -> {
/BaseApplication.kt:322:                    if (ThemeUtil.THEME_TRANSLUCENT == theme) {
/BaseApplication.kt:323:                        return context.getColorCompat(R.color.transparent)
/BaseApplication.kt:324:                    }
/BaseApplication.kt:325:                    return if (ThemeUtil.isNightMode(context)) {
/BaseApplication.kt:326:                        context.getColorCompat(resources.getIdentifier("theme_color_nav_$theme", "color", packageName))
/BaseApplication.kt:327:                    } else context.getColorCompat(R.color.theme_color_nav_light)
/BaseApplication.kt:328:                }
/BaseApplication.kt:329:                R.attr.colorFloorCard -> {
/BaseApplication.kt:330:                    if (ThemeUtil.THEME_TRANSLUCENT == theme) {
/BaseApplication.kt:331:                        return context.getColorCompat(R.color.theme_color_floor_card_translucent_light)
/BaseApplication.kt:332:                    }
/BaseApplication.kt:333:                    return if (ThemeUtil.isNightMode(context)) {
/BaseApplication.kt:334:                        context.getColorCompat(resources.getIdentifier("theme_color_floor_card_$theme", "color", packageName))
/BaseApplication.kt:335:                    } else context.getColorCompat(R.color.theme_color_floor_card_light)
/BaseApplication.kt:336:                }
/BaseApplication.kt:337:                R.attr.colorCard -> {
/BaseApplication.kt:338:                    if (ThemeUtil.THEME_TRANSLUCENT == theme) {
/BaseApplication.kt:339:                        return context.getColorCompat(R.color.theme_color_card_translucent_light)
/BaseApplication.kt:340:                    }
/BaseApplication.kt:341:                    return if (ThemeUtil.isNightMode(context)) {
/BaseApplication.kt:342:                        context.getColorCompat(resources.getIdentifier("theme_color_card_$theme", "color", packageName))
/BaseApplication.kt:343:                    } else context.getColorCompat(R.color.theme_color_card_light)
/BaseApplication.kt:344:                }
/BaseApplication.kt:345:                R.attr.colorDivider -> {
/BaseApplication.kt:346:                    if (ThemeUtil.THEME_TRANSLUCENT == theme) {
/BaseApplication.kt:347:                        return context.getColorCompat(R.color.theme_color_divider_translucent_light)
/BaseApplication.kt:348:                    }
/BaseApplication.kt:349:                    return if (ThemeUtil.isNightMode(context)) {
/BaseApplication.kt:350:                        context.getColorCompat(resources.getIdentifier("theme_color_divider_$theme", "color", packageName))
/BaseApplication.kt:351:                    } else context.getColorCompat(R.color.theme_color_divider_light)
/BaseApplication.kt:352:                }
/BaseApplication.kt:353:                R.attr.shadow_color -> {
/BaseApplication.kt:354:                    return if (ThemeUtil.THEME_TRANSLUCENT == theme) {
/BaseApplication.kt:355:                        context.getColorCompat(R.color.transparent)
/BaseApplication.kt:356:                    } else context.getColorCompat(if (ThemeUtil.isNightMode(context)) R.color.theme_color_shadow_night else R.color.theme_color_shadow_day)
/BaseApplication.kt:357:                }
/BaseApplication.kt:358:                R.attr.colorToolbarItem -> {
/BaseApplication.kt:359:                    if (ThemeUtil.THEME_TRANSLUCENT == theme) {
/BaseApplication.kt:360:                        return context.getColorCompat(R.color.theme_color_toolbar_item_translucent_light)
/BaseApplication.kt:361:                    }
/BaseApplication.kt:362:                    return if (ThemeUtil.isNightMode(context)) {
/BaseApplication.kt:363:                        context.getColorCompat(R.color.theme_color_toolbar_item_night)
/BaseApplication.kt:364:                    } else context.getColorCompat(if (ThemeUtil.isStatusBarFontDark(context)) R.color.theme_color_toolbar_item_light else R.color.theme_color_toolbar_item_dark)
/BaseApplication.kt:365:                }
/BaseApplication.kt:366:                R.attr.colorToolbarItemActive -> {
/BaseApplication.kt:367:                    if (ThemeUtil.THEME_TRANSLUCENT == theme) {
/BaseApplication.kt:368:                        return context.getColorCompat(R.color.theme_color_toolbar_item_active_translucent_light)
/BaseApplication.kt:369:                    }
/BaseApplication.kt:370:                    if (ThemeUtil.THEME_WHITE == theme) {
/BaseApplication.kt:371:                        return context.getColorCompat(resources.getIdentifier("theme_color_toolbar_item_active_$theme", "color", packageName))
/BaseApplication.kt:372:                    } else if (ThemeUtil.isNightMode(theme)) {
/BaseApplication.kt:373:                        return getColorByAttr(context, R.attr.colorAccent, theme)
/BaseApplication.kt:374:                    }
/BaseApplication.kt:375:                    return context.getColorCompat(if (ThemeUtil.isStatusBarFontDark(context)) R.color.theme_color_toolbar_item_light else R.color.theme_color_toolbar_item_dark)
/BaseApplication.kt:376:                }
/BaseApplication.kt:377:                R.attr.color_toolbar_item_secondary -> {
/BaseApplication.kt:378:                    if (ThemeUtil.THEME_TRANSLUCENT == theme) {
/BaseApplication.kt:379:                        return context.getColorCompat(R.color.theme_color_toolbar_item_secondary_translucent_light)
/BaseApplication.kt:380:                    }
/BaseApplication.kt:381:                    return if (ThemeUtil.THEME_WHITE == theme || ThemeUtil.isNightMode(theme)) {
/BaseApplication.kt:382:                        context.getColorCompat(resources.getIdentifier("theme_color_toolbar_item_secondary_$theme", "color", packageName))
/BaseApplication.kt:383:                    } else context.getColorCompat(if (ThemeUtil.isStatusBarFontDark(context)) R.color.theme_color_toolbar_item_secondary_white else R.color.theme_color_toolbar_item_secondary_light)
/BaseApplication.kt:384:                }
/BaseApplication.kt:385:                R.attr.color_swipe_refresh_layout_background -> {
/BaseApplication.kt:386:                    if (ThemeUtil.THEME_TRANSLUCENT == theme) {
/BaseApplication.kt:387:                        return context.getColorCompat(R.color.theme_color_swipe_refresh_view_background_translucent_light)
/BaseApplication.kt:388:                    }
/BaseApplication.kt:389:                    return if (ThemeUtil.isNightMode(theme)) {
/BaseApplication.kt:390:                        context.getColorCompat(resources.getIdentifier("theme_color_swipe_refresh_view_background_$theme", "color", packageName))
/BaseApplication.kt:391:                    } else context.getColorCompat(R.color.theme_color_swipe_refresh_view_background_light)
/BaseApplication.kt:392:                }
/BaseApplication.kt:393:            }
/BaseApplication.kt:394:            return Util.getColorByAttr(context, attrId, R.color.transparent)
/BaseApplication.kt:395:        }
/BaseApplication.kt:397:        override fun getColorByAttr(context: Context, attrId: Int): Int {
/BaseApplication.kt:398:            return getColorByAttr(context, attrId, ThemeUtil.getTheme(context))
/BaseApplication.kt:399:        }
/BaseApplication.kt:401:        override fun getColorById(context: Context, colorId: Int): Int {
/BaseApplication.kt:402:            when (colorId) {
/BaseApplication.kt:403:                R.color.default_color_primary -> return getColorByAttr(context, R.attr.colorPrimary)
/BaseApplication.kt:404:                R.color.default_color_accent -> return getColorByAttr(context, R.attr.colorAccent)
/BaseApplication.kt:405:                R.color.default_color_background -> return getColorByAttr(context, R.attr.colorBg)
/BaseApplication.kt:406:                R.color.default_color_toolbar -> return getColorByAttr(context, R.attr.colorToolbar)
/BaseApplication.kt:407:                R.color.default_color_toolbar_item -> return getColorByAttr(context, R.attr.colorToolbarItem)
/BaseApplication.kt:408:                R.color.default_color_toolbar_item_active -> return getColorByAttr(context, R.attr.colorToolbarItemActive)
/BaseApplication.kt:409:                R.color.default_color_toolbar_item_secondary -> return getColorByAttr(context, R.attr.color_toolbar_item_secondary)
/BaseApplication.kt:410:                R.color.default_color_card -> return getColorByAttr(context, R.attr.colorCard)
/BaseApplication.kt:411:                R.color.default_color_floor_card -> return getColorByAttr(context, R.attr.colorFloorCard)
/BaseApplication.kt:412:                R.color.default_color_nav -> return getColorByAttr(context, R.attr.colorNavBar)
/BaseApplication.kt:413:                R.color.default_color_shadow -> return getColorByAttr(context, R.attr.shadow_color)
/BaseApplication.kt:414:                R.color.default_color_unselected -> return getColorByAttr(context, R.attr.colorUnselected)
/BaseApplication.kt:415:                R.color.default_color_text -> return getColorByAttr(context, R.attr.colorText)
/BaseApplication.kt:416:                R.color.default_color_text_on_primary -> return getColorByAttr(context, R.attr.colorTextOnPrimary)
/BaseApplication.kt:417:                R.color.default_color_text_secondary -> return getColorByAttr(context, R.attr.colorTextSecondary)
/BaseApplication.kt:418:                R.color.default_color_text_disabled -> return getColorByAttr(context, R.attr.color_text_disabled)
/BaseApplication.kt:419:                R.color.default_color_divider -> return getColorByAttr(context, R.attr.colorDivider)
/BaseApplication.kt:420:                R.color.default_color_swipe_refresh_view_background -> return getColorByAttr(context, R.attr.color_swipe_refresh_layout_background)
/BaseApplication.kt:421:            }
/BaseApplication.kt:422:            return context.getColorCompat(colorId)
/BaseApplication.kt:423:        }
/BaseApplication.kt:424:    }
/BaseApplication.kt:425:}/Consts.kt:1:package com.huanchengfly.tieba.post
/Consts.kt:3:object BundleConfig {
/Consts.kt:4:    const val MATCH_COMPONENT = "matchComponent"
/Consts.kt:5:    const val MATCH_ACTION = "matchAction"
/Consts.kt:6:    const val TARGET_URL = "targetUrl"
/Consts.kt:7:    const val TARGET_DATA = "targetData"
/Consts.kt:8:    const val TARGET_TITLE = "targetTitle"
/Consts.kt:9:    const val TARGET_IMAGE = "targetImage"
/Consts.kt:10:    const val TARGET_EXTRA = "targetExtra"
/Consts.kt:11:}
/Consts.kt:13:object IntentConfig {
/Consts.kt:14:    const val ACTION = "com.miui.personalassistant.action.FAVORITE"
/Consts.kt:15:    const val PACKAGE = "com.miui.personalassistant" //发送广播指定的包名
/Consts.kt:16:    const val PERMISSION = "com.miui.personalassistant.permission.FAVORITE" //发送广播指定的权限
/Consts.kt:17:    const val BUNDLES = "bundles"
/Consts.kt:18:    const val ACTION_FAV = "action_fav"
/Consts.kt:19:}
/Extensions.kt:1:package com.huanchengfly.tieba.post
/Extensions.kt:3:import android.app.Activity
/Extensions.kt:4:import android.content.Context
/Extensions.kt:5:import android.content.Intent
/Extensions.kt:6:import android.os.Build
/Extensions.kt:7:import android.widget.Toast
/Extensions.kt:8:import androidx.annotation.ColorRes
/Extensions.kt:9:import com.google.gson.Gson
/Extensions.kt:10:import com.huanchengfly.tieba.post.utils.MD5Util
/Extensions.kt:12:fun Float.toDp(): Int =
/Extensions.kt:13:        (this * BaseApplication.instance.resources.displayMetrics.density + 0.5f).toInt()
/Extensions.kt:15:fun Float.toSp(): Int =
/Extensions.kt:16:        (this * BaseApplication.instance.resources.displayMetrics.scaledDensity + 0.5f).toInt()
/Extensions.kt:18:fun Float.dpToPx(): Int =
/Extensions.kt:19:        (this / BaseApplication.instance.resources.displayMetrics.density + 0.5f).toInt()
/Extensions.kt:21:fun Float.spToPx(): Int =
/Extensions.kt:22:        (this / BaseApplication.instance.resources.displayMetrics.scaledDensity + 0.5f).toInt()
/Extensions.kt:24:fun Int.toDp(): Int = this.toFloat().toDp()
/Extensions.kt:26:fun Int.toSp(): Int = this.toFloat().toSp()
/Extensions.kt:28:fun Int.dpToPx(): Int = this.toFloat().dpToPx()
/Extensions.kt:30:fun Int.spToPx(): Int = this.toFloat().spToPx()
/Extensions.kt:32:fun Any.toJson(): String = Gson().toJson(this)
/Extensions.kt:34:fun String.toMD5(): String = MD5Util.toMd5(this)
/Extensions.kt:36:fun Context.getColorCompat(@ColorRes id: Int): Int {
/Extensions.kt:37:    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
/Extensions.kt:38:        resources.getColor(id, theme)
/Extensions.kt:39:    } else {
/Extensions.kt:40:        resources.getColor(id)
/Extensions.kt:41:    }
/Extensions.kt:42:}
/Extensions.kt:44:inline fun <reified T : Activity> Activity.goToActivity() {
/Extensions.kt:45:    startActivity(Intent(this, T::class.java))
/Extensions.kt:46:}
/Extensions.kt:48:fun Context.toastShort(text: String) {
/Extensions.kt:49:    Toast.makeText(this, text, Toast.LENGTH_SHORT).show()
/Extensions.kt:50:}
/Extensions.kt:52:fun Context.toastShort(resId: Int) {
/Extensions.kt:53:    Toast.makeText(this, resId, Toast.LENGTH_SHORT).show()
/Extensions.kt:54:}
/Extensions.kt:56:inline fun <reified T : Activity> Activity.goToActivity(pre: (Intent) -> Intent) {
/Extensions.kt:57:    startActivity(pre(Intent(this, T::class.java)))
/Extensions.kt:58:}
/activities\AboutActivity.java:1:package com.huanchengfly.tieba.post.activities;
/activities\AboutActivity.java:3:import android.content.Intent;
/activities\AboutActivity.java:4:import android.net.Uri;
/activities\AboutActivity.java:5:import android.os.Bundle;
/activities\AboutActivity.java:6:import android.view.View;
/activities\AboutActivity.java:7:import android.widget.Button;
/activities\AboutActivity.java:8:import android.widget.RelativeLayout;
/activities\AboutActivity.java:9:import android.widget.TextView;
/activities\AboutActivity.java:11:import androidx.appcompat.app.ActionBar;
/activities\AboutActivity.java:12:import androidx.appcompat.widget.Toolbar;
/activities\AboutActivity.java:14:import com.huanchengfly.tieba.post.ui.about.AboutPage;
/activities\AboutActivity.java:15:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/activities\AboutActivity.java:16:import com.huanchengfly.tieba.post.api.LiteApi;
/activities\AboutActivity.java:17:import com.huanchengfly.tieba.post.api.interfaces.CommonAPICallback;
/activities\AboutActivity.java:18:import com.huanchengfly.tieba.post.api.models.NewUpdateBean;
/activities\AboutActivity.java:19:import com.huanchengfly.tieba.post.R;
/activities\AboutActivity.java:20:import com.huanchengfly.tieba.post.utils.NavigationHelper;
/activities\AboutActivity.java:21:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/activities\AboutActivity.java:22:import com.huanchengfly.tieba.post.utils.VersionUtil;
/activities\AboutActivity.java:24:import butterknife.BindView;
/activities\AboutActivity.java:25:import butterknife.ButterKnife;
/activities\AboutActivity.java:26:import butterknife.OnClick;
/activities\AboutActivity.java:27:import butterknife.Unbinder;
/activities\AboutActivity.java:29:public class AboutActivity extends BaseActivity implements View.OnClickListener {
/activities\AboutActivity.java:30:    public static final int STATE_ERROR = 0;
/activities\AboutActivity.java:31:    public static final int STATE_NO_UPDATE = 1;
/activities\AboutActivity.java:32:    public static final int STATE_UPDATE = 2;
/activities\AboutActivity.java:33:    private View updateTip;
/activities\AboutActivity.java:34:    private TextView updateTipHeaderTv;
/activities\AboutActivity.java:35:    private TextView updateTipTitleTv;
/activities\AboutActivity.java:36:    private TextView updateTipContentTv;
/activities\AboutActivity.java:37:    private Button dismissBtn;
/activities\AboutActivity.java:38:    private Button downloadBtn;
/activities\AboutActivity.java:40:    private int updateState;
/activities\AboutActivity.java:41:    private NewUpdateBean.ResultBean resultBean;
/activities\AboutActivity.java:42:    private NavigationHelper navigationHelper;
/activities\AboutActivity.java:44:    @Override
/activities\AboutActivity.java:45:    protected int getLayoutId() {
/activities\AboutActivity.java:46:        return R.layout.activity_about;
/activities\AboutActivity.java:47:    }
/activities\AboutActivity.java:49:    @Override
/activities\AboutActivity.java:50:    protected void onCreate(Bundle savedInstanceState) {
/activities\AboutActivity.java:51:        super.onCreate(savedInstanceState);
/activities\AboutActivity.java:52:        ThemeUtil.setTranslucentThemeBackground(findViewById(R.id.background));
/activities\AboutActivity.java:53:        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
/activities\AboutActivity.java:54:        RelativeLayout mainView = (RelativeLayout) findViewById(R.id.main);
/activities\AboutActivity.java:55:        View headerView = View.inflate(this, R.layout.header_about, null);
/activities\AboutActivity.java:56:        updateTip = headerView.findViewById(R.id.header_update_tip_shadow);
/activities\AboutActivity.java:57:        updateTipHeaderTv = headerView.findViewById(R.id.header_update_tip_header_title);
/activities\AboutActivity.java:58:        updateTipTitleTv = headerView.findViewById(R.id.header_update_tip_title);
/activities\AboutActivity.java:59:        updateTipContentTv = headerView.findViewById(R.id.header_update_tip_content);
/activities\AboutActivity.java:60:        dismissBtn = headerView.findViewById(R.id.header_update_tip_button_dismiss);
/activities\AboutActivity.java:61:        downloadBtn = headerView.findViewById(R.id.header_update_tip_button_download);
/activities\AboutActivity.java:62:        navigationHelper = NavigationHelper.newInstance(this);
/activities\AboutActivity.java:63:        downloadBtn.setOnClickListener(this);
/activities\AboutActivity.java:64:        dismissBtn.setOnClickListener(this);
/activities\AboutActivity.java:65:        setSupportActionBar(toolbar);
/activities\AboutActivity.java:66:        ActionBar actionBar = getSupportActionBar();
/activities\AboutActivity.java:67:        if (actionBar != null) {
/activities\AboutActivity.java:68:            actionBar.setTitle(R.string.title_about);
/activities\AboutActivity.java:69:            actionBar.setDisplayHomeAsUpEnabled(true);
/activities\AboutActivity.java:70:        }
/activities\AboutActivity.java:71:        int colorIcon = ThemeUtils.getColorByAttr(this, R.attr.colorAccent);
/activities\AboutActivity.java:72:        new AboutPage(this)
/activities\AboutActivity.java:73:                .setHeaderView(headerView)
/activities\AboutActivity.java:74:                .addTitle("应用信息", colorIcon)
/activities\AboutActivity.java:75:                .addItem(new AboutPage.Item("当前版本", VersionUtil.getVersionName(this), R.drawable.ic_round_info, colorIcon))
/activities\AboutActivity.java:76:                .addItem(new AboutPage.Item("源代码").setIcon(R.drawable.ic_codepen, colorIcon).setOnClickListener(v -> navigationHelper.navigationByData(NavigationHelper.ACTION_URL, "https://github.com/HuanCheng65/TiebaLite")))
/activities\AboutActivity.java:77:                .into(mainView);
/activities\AboutActivity.java:78:        checkUpdate();
/activities\AboutActivity.java:79:    }
/activities\AboutActivity.java:81:    /*
/activities\AboutActivity.java:82:    private void openJoinGroupDialog() {
/activities\AboutActivity.java:83:        if (groupInfoList == null) {
/activities\AboutActivity.java:84:            return;
/activities\AboutActivity.java:85:        }
/activities\AboutActivity.java:86:        List<String> names = new ArrayList<>();
/activities\AboutActivity.java:87:        List<UpdateInfoBean.GroupInfo> groupInfos = new ArrayList<>();
/activities\AboutActivity.java:88:        for (UpdateInfoBean.GroupInfo groupInfo : groupInfoList) {
/activities\AboutActivity.java:89:            if (groupInfo.isEnabled()) {
/activities\AboutActivity.java:90:                groupInfos.add(groupInfo);
/activities\AboutActivity.java:91:                names.add(groupInfo.getType() + " " + groupInfo.getName());
/activities\AboutActivity.java:92:            }
/activities\AboutActivity.java:93:        }
/activities\AboutActivity.java:94:        DialogUtil.build(AboutActivity.this)
/activities\AboutActivity.java:95:                .setTitle(R.string.title_join_group)
/activities\AboutActivity.java:96:                .setItems(names.toArray(new String[0]), (dialog, which) -> {
/activities\AboutActivity.java:97:                    if (TextUtils.isEmpty(groupInfos.get(which).getQGroupKey()) || !joinQQGroup(groupInfos.get(which).getQGroupKey())) {
/activities\AboutActivity.java:98:                        navigationHelper.navigationByData(NavigationHelper.ACTION_URL, groupInfos.get(which).getLink());
/activities\AboutActivity.java:99:                    }
/activities\AboutActivity.java:100:                })
/activities\AboutActivity.java:101:                .show();
/activities\AboutActivity.java:102:    }
/activities\AboutActivity.java:103:    private void loadGroups() {
/activities\AboutActivity.java:104:        UpdateInfoBean cache = CacheUtil.getCache(this, CACHE_ID_QQ_GROUP, UpdateInfoBean.class);
/activities\AboutActivity.java:105:        if (cache != null) {
/activities\AboutActivity.java:106:            groupInfoList = cache.getGroups();
/activities\AboutActivity.java:107:            if (TextUtils.equals(EXTRA_ACTION_JOIN_GROUP, action)) {
/activities\AboutActivity.java:108:                openJoinGroupDialog();
/activities\AboutActivity.java:109:                actionExecuted = true;
/activities\AboutActivity.java:110:            }
/activities\AboutActivity.java:111:        }
/activities\AboutActivity.java:112:        LiteApi.getInstance().updateInfo(new CommonAPICallback<UpdateInfoBean>() {
/activities\AboutActivity.java:113:            @Override
/activities\AboutActivity.java:114:            public void onSuccess(UpdateInfoBean data) {
/activities\AboutActivity.java:115:                CacheUtil.putCache(AboutActivity.this, CACHE_ID_QQ_GROUP, data);
/activities\AboutActivity.java:116:                groupInfoList = data.getGroups();
/activities\AboutActivity.java:117:                if (!actionExecuted && TextUtils.equals(EXTRA_ACTION_JOIN_GROUP, action)) {
/activities\AboutActivity.java:118:                    openJoinGroupDialog();
/activities\AboutActivity.java:119:                }
/activities\AboutActivity.java:120:                for (UpdateInfoBean.SupportmentBean supportmentBean : data.getSupportment()) {
/activities\AboutActivity.java:121:                    AboutPage.Item item = new AboutPage.Item(supportmentBean.getTitle(), supportmentBean.getSubtitle());
/activities\AboutActivity.java:122:                    if (supportmentBean.getIcon() != null) {
/activities\AboutActivity.java:123:                        if (supportmentBean.getIcon().getType() == UpdateInfoBean.SupportmentBean.IconBean.TYPE_RESOURCE) {
/activities\AboutActivity.java:124:                            item.setIcon(getResources().getIdentifier(supportmentBean.getIcon().getId(), "drawable", BaseApplication._getPackageName()));
/activities\AboutActivity.java:125:                        } else if (supportmentBean.getIcon().getType() == UpdateInfoBean.SupportmentBean.IconBean.TYPE_IMAGE) {
/activities\AboutActivity.java:126:                            item.setIcon(supportmentBean.getIcon().getUrl());
/activities\AboutActivity.java:127:                        }
/activities\AboutActivity.java:128:                    }
/activities\AboutActivity.java:129:                    if (supportmentBean.getAction() != null) {
/activities\AboutActivity.java:130:                        item.setOnClickListener(v -> {
/activities\AboutActivity.java:131:                            FlurryAgent.logEvent("clicked" + supportmentBean.getId());
/activities\AboutActivity.java:132:                            if (supportmentBean.getAction().getType() == UpdateInfoBean.SupportmentBean.ActionBean.TYPE_LINK) {
/activities\AboutActivity.java:133:                                navigationHelper.navigationByData(NavigationHelper.ACTION_URL, supportmentBean.getAction().getUrl());
/activities\AboutActivity.java:134:                            } else if (supportmentBean.getAction().getType() == UpdateInfoBean.SupportmentBean.ActionBean.TYPE_IMAGE) {
/activities\AboutActivity.java:135:                                PhotoViewActivity.launch(AboutActivity.this, new PhotoViewBean(supportmentBean.getAction().getUrl(), true));
/activities\AboutActivity.java:136:                            }
/activities\AboutActivity.java:137:                        });
/activities\AboutActivity.java:138:                    }
/activities\AboutActivity.java:139:                    if (supportmentBean.getExpireTime() > System.currentTimeMillis()) {
/activities\AboutActivity.java:140:                        mAboutPage.addItem(item);
/activities\AboutActivity.java:141:                    }
/activities\AboutActivity.java:142:                }
/activities\AboutActivity.java:143:                mAboutPage.notifyDataSetChanged();
/activities\AboutActivity.java:144:            }
/activities\AboutActivity.java:146:            @Override
/activities\AboutActivity.java:147:            public void onFailure(int code, String error) {
/activities\AboutActivity.java:148:            }
/activities\AboutActivity.java:149:        });
/activities\AboutActivity.java:150:    }
/activities\AboutActivity.java:151:    */
/activities\AboutActivity.java:153:    private void checkUpdate() {
/activities\AboutActivity.java:154:        LiteApi.getInstance().newCheckUpdate(new CommonAPICallback<NewUpdateBean>() {
/activities\AboutActivity.java:155:            @Override
/activities\AboutActivity.java:156:            public void onSuccess(NewUpdateBean data) {
/activities\AboutActivity.java:157:                if (data.isHasUpdate()) {
/activities\AboutActivity.java:158:                    resultBean = data.getResult();
/activities\AboutActivity.java:159:                    updateState = STATE_UPDATE;
/activities\AboutActivity.java:160:                } else {
/activities\AboutActivity.java:161:                    resultBean = null;
/activities\AboutActivity.java:162:                    updateState = STATE_NO_UPDATE;
/activities\AboutActivity.java:163:                }
/activities\AboutActivity.java:164:                refreshUpdateTip();
/activities\AboutActivity.java:165:            }
/activities\AboutActivity.java:167:            @Override
/activities\AboutActivity.java:168:            public void onFailure(int code, String error) {
/activities\AboutActivity.java:169:                resultBean = null;
/activities\AboutActivity.java:170:                updateState = STATE_ERROR;
/activities\AboutActivity.java:171:                refreshUpdateTip();
/activities\AboutActivity.java:172:            }
/activities\AboutActivity.java:173:        });
/activities\AboutActivity.java:174:    }
/activities\AboutActivity.java:176:    private void refreshUpdateTip() {
/activities\AboutActivity.java:177:        switch (updateState) {
/activities\AboutActivity.java:178:            case STATE_NO_UPDATE:
/activities\AboutActivity.java:179:                downloadBtn.setText(R.string.button_check_update);
/activities\AboutActivity.java:180:                updateTip.setVisibility(View.VISIBLE);
/activities\AboutActivity.java:181:                dismissBtn.setVisibility(View.GONE);
/activities\AboutActivity.java:182:                updateTipHeaderTv.setText(getString(R.string.update_tip_no_header));
/activities\AboutActivity.java:183:                updateTipTitleTv.setText(getString(R.string.update_tip_no_title));
/activities\AboutActivity.java:184:                updateTipContentTv.setText(getString(R.string.update_tip_no_content));
/activities\AboutActivity.java:185:                break;
/activities\AboutActivity.java:186:            case STATE_UPDATE:
/activities\AboutActivity.java:187:                if (resultBean != null) {
/activities\AboutActivity.java:188:                    downloadBtn.setText(R.string.button_go_to_download);
/activities\AboutActivity.java:189:                    updateTip.setVisibility(View.VISIBLE);
/activities\AboutActivity.java:190:                    boolean cancelable = resultBean.isCancelable();
/activities\AboutActivity.java:191:                    updateTipHeaderTv.setText(getString(R.string.update_tip_header, resultBean.getVersionType() == 0 ? getString(R.string.tip_release_version) : getString(R.string.tip_version_beta)));
/activities\AboutActivity.java:192:                    updateTipTitleTv.setText(getString(R.string.update_tip_title, resultBean.getVersionName(), String.valueOf(resultBean.getVersionCode())));
/activities\AboutActivity.java:193:                    StringBuilder stringBuilder = new StringBuilder();
/activities\AboutActivity.java:194:                    for (String content : resultBean.getUpdateContent()) {
/activities\AboutActivity.java:195:                        stringBuilder.append(content);
/activities\AboutActivity.java:196:                        stringBuilder.append("\n");
/activities\AboutActivity.java:197:                    }
/activities\AboutActivity.java:198:                    updateTipContentTv.setText(stringBuilder);
/activities\AboutActivity.java:199:                    dismissBtn.setVisibility(cancelable ? View.VISIBLE : View.GONE);
/activities\AboutActivity.java:200:                    break;
/activities\AboutActivity.java:201:                }
/activities\AboutActivity.java:202:            default:
/activities\AboutActivity.java:203:                updateTip.setVisibility(View.GONE);
/activities\AboutActivity.java:204:                break;
/activities\AboutActivity.java:205:        }
/activities\AboutActivity.java:206:    }
/activities\AboutActivity.java:208:    @Override
/activities\AboutActivity.java:209:    public void onClick(View v) {
/activities\AboutActivity.java:210:        switch (v.getId()) {
/activities\AboutActivity.java:211:            case R.id.header_update_tip_button_download:
/activities\AboutActivity.java:212:                if (resultBean == null) {
/activities\AboutActivity.java:213:                    if (updateState != STATE_NO_UPDATE) {
/activities\AboutActivity.java:214:                        checkUpdate();
/activities\AboutActivity.java:215:                    }
/activities\AboutActivity.java:216:                    return;
/activities\AboutActivity.java:217:                }
/activities\AboutActivity.java:218:                VersionUtil.showDownloadDialog(this, resultBean);
/activities\AboutActivity.java:219:                break;
/activities\AboutActivity.java:220:            case R.id.header_update_tip_button_dismiss:
/activities\AboutActivity.java:221:                resultBean = null;
/activities\AboutActivity.java:222:                refreshUpdateTip();
/activities\AboutActivity.java:223:                break;
/activities\AboutActivity.java:224:        }
/activities\AboutActivity.java:225:    }
/activities\AboutActivity.java:227:    public boolean joinQQGroup(String key) {
/activities\AboutActivity.java:228:        Intent intent = new Intent();
/activities\AboutActivity.java:229:        intent.setData(Uri.parse("mqqopensdkapi://bizAgent/qm/qr?url=http%3A%2F%2Fqm.qq.com%2Fcgi-bin%2Fqm%2Fqr%3Ffrom%3Dapp%26p%3Dandroid%26k%3D" + key));
/activities\AboutActivity.java:230:        // 此Flag可根据具体产品需要自定义，如设置，则在加群界面按返回，返回手Q主界面，不设置，按返回会返回到呼起产品界面
/activities\AboutActivity.java:231:        // intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
/activities\AboutActivity.java:232:        try {
/activities\AboutActivity.java:233:            startActivity(intent);
/activities\AboutActivity.java:234:            return true;
/activities\AboutActivity.java:235:        } catch (Exception e) {
/activities\AboutActivity.java:236:            return false;
/activities\AboutActivity.java:237:        }
/activities\AboutActivity.java:238:    }
/activities\AboutActivity.java:240:}/activities\BaseActivity.java:1:package com.huanchengfly.tieba.post.activities;
/activities\BaseActivity.java:3:import android.animation.ObjectAnimator;
/activities\BaseActivity.java:4:import android.animation.ValueAnimator;
/activities\BaseActivity.java:5:import android.app.Activity;
/activities\BaseActivity.java:6:import android.app.Dialog;
/activities\BaseActivity.java:7:import android.content.res.ColorStateList;
/activities\BaseActivity.java:8:import android.graphics.Color;
/activities\BaseActivity.java:9:import android.os.Bundle;
/activities\BaseActivity.java:10:import android.text.TextUtils;
/activities\BaseActivity.java:11:import android.util.DisplayMetrics;
/activities\BaseActivity.java:12:import android.view.Menu;
/activities\BaseActivity.java:13:import android.view.MenuItem;
/activities\BaseActivity.java:14:import android.view.View;
/activities\BaseActivity.java:15:import android.view.ViewGroup;
/activities\BaseActivity.java:16:import android.view.animation.AccelerateDecelerateInterpolator;
/activities\BaseActivity.java:17:import android.widget.ImageView;
/activities\BaseActivity.java:18:import android.widget.TextView;
/activities\BaseActivity.java:20:import androidx.annotation.CallSuper;
/activities\BaseActivity.java:21:import androidx.annotation.ColorInt;
/activities\BaseActivity.java:22:import androidx.annotation.Keep;
/activities\BaseActivity.java:23:import androidx.annotation.Nullable;
/activities\BaseActivity.java:24:import androidx.appcompat.widget.Toolbar;
/activities\BaseActivity.java:26:import com.gyf.immersionbar.ImmersionBar;
/activities\BaseActivity.java:27:import com.huanchengfly.tieba.post.ui.theme.interfaces.ExtraRefreshable;
/activities\BaseActivity.java:28:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/activities\BaseActivity.java:29:import com.huanchengfly.tieba.post.R;
/activities\BaseActivity.java:30:import com.huanchengfly.tieba.post.BaseApplication;
/activities\BaseActivity.java:31:import com.huanchengfly.tieba.post.utils.AppPreferencesUtils;
/activities\BaseActivity.java:32:import com.huanchengfly.tieba.post.utils.HandleBackUtil;
/activities\BaseActivity.java:33:import com.huanchengfly.tieba.post.utils.SharedPreferencesUtil;
/activities\BaseActivity.java:34:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/activities\BaseActivity.java:35:import com.huanchengfly.tieba.post.widgets.VoicePlayerView;
/activities\BaseActivity.java:36:import com.huanchengfly.tieba.post.widgets.theme.TintToolbar;
/activities\BaseActivity.java:38:import butterknife.ButterKnife;
/activities\BaseActivity.java:39:import cn.jzvd.Jzvd;
/activities\BaseActivity.java:40:import me.imid.swipebacklayout.lib.app.SwipeBackActivity;
/activities\BaseActivity.java:42:import static com.huanchengfly.tieba.post.utils.ThemeUtil.SP_CUSTOM_TOOLBAR_PRIMARY_COLOR;
/activities\BaseActivity.java:43:import static com.huanchengfly.tieba.post.utils.ThemeUtil.THEME_CUSTOM;
/activities\BaseActivity.java:44:import static com.huanchengfly.tieba.post.utils.ThemeUtil.THEME_TRANSLUCENT;
/activities\BaseActivity.java:45:import static com.huanchengfly.tieba.post.utils.ColorUtils.getDarkerColor;
/activities\BaseActivity.java:47:public abstract class BaseActivity extends SwipeBackActivity implements ExtraRefreshable {
/activities\BaseActivity.java:48:    public static final int NO_LAYOUT = -1;
/activities\BaseActivity.java:49:    private TintToolbar mTintToolbar;
/activities\BaseActivity.java:50:    private String oldTheme;
/activities\BaseActivity.java:51:    private boolean activityRunning = true;
/activities\BaseActivity.java:53:    protected int getLayoutId() {
/activities\BaseActivity.java:54:        return NO_LAYOUT;
/activities\BaseActivity.java:55:    }
/activities\BaseActivity.java:57:    protected AppPreferencesUtils getAppPreferences() {
/activities\BaseActivity.java:58:        return new AppPreferencesUtils(this);
/activities\BaseActivity.java:59:    }
/activities\BaseActivity.java:61:    @Override
/activities\BaseActivity.java:62:    protected void onPause() {
/activities\BaseActivity.java:63:        super.onPause();
/activities\BaseActivity.java:64:        activityRunning = false;
/activities\BaseActivity.java:65:        Jzvd.releaseAllVideos();
/activities\BaseActivity.java:66:    }
/activities\BaseActivity.java:68:    protected boolean showDialog(Dialog dialog) {
/activities\BaseActivity.java:69:        if (isActivityRunning()) {
/activities\BaseActivity.java:70:            dialog.show();
/activities\BaseActivity.java:71:            return true;
/activities\BaseActivity.java:72:        }
/activities\BaseActivity.java:73:        return false;
/activities\BaseActivity.java:74:    }
/activities\BaseActivity.java:76:    public boolean isActivityRunning() {
/activities\BaseActivity.java:77:        return activityRunning;
/activities\BaseActivity.java:78:    }
/activities\BaseActivity.java:80:    @Override
/activities\BaseActivity.java:81:    protected void onStop() {
/activities\BaseActivity.java:82:        super.onStop();
/activities\BaseActivity.java:83:        VoicePlayerView.Manager.release();
/activities\BaseActivity.java:84:    }
/activities\BaseActivity.java:86:    public boolean isNeedImmersionBar() {
/activities\BaseActivity.java:87:        return true;
/activities\BaseActivity.java:88:    }
/activities\BaseActivity.java:90:    @Override
/activities\BaseActivity.java:91:    protected void onCreate(Bundle savedInstanceState) {
/activities\BaseActivity.java:92:        super.onCreate(savedInstanceState);
/activities\BaseActivity.java:93:        fixBackground();
/activities\BaseActivity.java:94:        getDeviceDensity();
/activities\BaseActivity.java:95:        BaseApplication.getInstance().addActivity(this);
/activities\BaseActivity.java:96:        ThemeUtil.setTheme(this);
/activities\BaseActivity.java:97:        oldTheme = ThemeUtil.getTheme(this);
/activities\BaseActivity.java:98:        if (isNeedImmersionBar()) {
/activities\BaseActivity.java:99:            refreshStatusBarColor();
/activities\BaseActivity.java:100:        }
/activities\BaseActivity.java:101:        if (getLayoutId() != NO_LAYOUT) {
/activities\BaseActivity.java:102:            setContentView(getLayoutId());
/activities\BaseActivity.java:103:            ButterKnife.bind(this);
/activities\BaseActivity.java:104:        }
/activities\BaseActivity.java:105:    }
/activities\BaseActivity.java:107:    private void fixBackground() {
/activities\BaseActivity.java:108:        ViewGroup decor = (ViewGroup) getWindow().getDecorView();
/activities\BaseActivity.java:109:        ViewGroup decorChild = (ViewGroup) decor.getChildAt(0);
/activities\BaseActivity.java:110:        decorChild.setBackgroundColor(Color.BLACK);
/activities\BaseActivity.java:111:    }
/activities\BaseActivity.java:113:    public void refreshUIIfNeed() {
/activities\BaseActivity.java:114:        if (TextUtils.equals(oldTheme, ThemeUtil.getTheme(this)) &&
/activities\BaseActivity.java:115:                !THEME_CUSTOM.equals(ThemeUtil.getTheme(this)) &&
/activities\BaseActivity.java:116:                !THEME_TRANSLUCENT.equals(ThemeUtil.getTheme(this))) {
/activities\BaseActivity.java:117:            return;
/activities\BaseActivity.java:118:        }
/activities\BaseActivity.java:119:        if (recreateIfNeed()) {
/activities\BaseActivity.java:120:            return;
/activities\BaseActivity.java:121:        }
/activities\BaseActivity.java:122:        ThemeUtils.refreshUI(this, this);
/activities\BaseActivity.java:123:    }
/activities\BaseActivity.java:125:    @Override
/activities\BaseActivity.java:126:    protected void onResume() {
/activities\BaseActivity.java:127:        super.onResume();
/activities\BaseActivity.java:128:        activityRunning = true;
/activities\BaseActivity.java:129:        refreshUIIfNeed();
/activities\BaseActivity.java:130:    }
/activities\BaseActivity.java:132:    @Override
/activities\BaseActivity.java:133:    protected void onDestroy() {
/activities\BaseActivity.java:134:        super.onDestroy();
/activities\BaseActivity.java:135:        BaseApplication.getInstance().removeActivity(this);
/activities\BaseActivity.java:136:    }
/activities\BaseActivity.java:138:    public void exitApplication() {
/activities\BaseActivity.java:139:        BaseApplication.getInstance().removeAllActivity();
/activities\BaseActivity.java:140:    }
/activities\BaseActivity.java:142:    @Override
/activities\BaseActivity.java:143:    public boolean onOptionsItemSelected(MenuItem item) {
/activities\BaseActivity.java:144:        switch (item.getItemId()) {
/activities\BaseActivity.java:145:            case android.R.id.home:
/activities\BaseActivity.java:146:                if (!HandleBackUtil.handleBackPress(this)) {
/activities\BaseActivity.java:147:                    finish();
/activities\BaseActivity.java:148:                }
/activities\BaseActivity.java:149:                return true;
/activities\BaseActivity.java:150:            case R.id.menu_exit:
/activities\BaseActivity.java:151:                finish();
/activities\BaseActivity.java:152:                return true;
/activities\BaseActivity.java:153:        }
/activities\BaseActivity.java:154:        return super.onOptionsItemSelected(item);
/activities\BaseActivity.java:155:    }
/activities\BaseActivity.java:157:    @Override
/activities\BaseActivity.java:158:    public boolean onCreateOptionsMenu(Menu menu) {
/activities\BaseActivity.java:159:        if (mTintToolbar != null) {
/activities\BaseActivity.java:160:            mTintToolbar.tint();
/activities\BaseActivity.java:161:        }
/activities\BaseActivity.java:162:        return true;
/activities\BaseActivity.java:163:    }
/activities\BaseActivity.java:165:    @Override
/activities\BaseActivity.java:166:    public boolean onPrepareOptionsMenu(Menu menu) {
/activities\BaseActivity.java:167:        if (mTintToolbar != null) {
/activities\BaseActivity.java:168:            mTintToolbar.tint();
/activities\BaseActivity.java:169:        }
/activities\BaseActivity.java:170:        return true;
/activities\BaseActivity.java:171:    }
/activities\BaseActivity.java:173:    @Override
/activities\BaseActivity.java:174:    public void setSupportActionBar(@Nullable Toolbar toolbar) {
/activities\BaseActivity.java:175:        super.setSupportActionBar(toolbar);
/activities\BaseActivity.java:176:        if (toolbar instanceof TintToolbar) {
/activities\BaseActivity.java:177:            mTintToolbar = (TintToolbar) toolbar;
/activities\BaseActivity.java:178:        }
/activities\BaseActivity.java:179:    }
/activities\BaseActivity.java:181:    @Override
/activities\BaseActivity.java:182:    public void onBackPressed() {
/activities\BaseActivity.java:183:        if (!HandleBackUtil.handleBackPress(this)) {
/activities\BaseActivity.java:184:            super.onBackPressed();
/activities\BaseActivity.java:185:        }
/activities\BaseActivity.java:186:    }
/activities\BaseActivity.java:188:    public void setTitle(String newTitle) {
/activities\BaseActivity.java:189:    }
/activities\BaseActivity.java:191:    public void setSubTitle(String newTitle) {
/activities\BaseActivity.java:192:    }
/activities\BaseActivity.java:194:    protected void getDeviceDensity() {
/activities\BaseActivity.java:195:        DisplayMetrics metrics = new DisplayMetrics();
/activities\BaseActivity.java:196:        getWindowManager().getDefaultDisplay().getMetrics(metrics);
/activities\BaseActivity.java:197:        int width = metrics.widthPixels;
/activities\BaseActivity.java:198:        int height = metrics.heightPixels;
/activities\BaseActivity.java:199:        BaseApplication.ScreenInfo.EXACT_SCREEN_HEIGHT = height;
/activities\BaseActivity.java:200:        BaseApplication.ScreenInfo.EXACT_SCREEN_WIDTH = width;
/activities\BaseActivity.java:201:        float density = metrics.density;
/activities\BaseActivity.java:202:        BaseApplication.ScreenInfo.DENSITY = metrics.density;
/activities\BaseActivity.java:203:        BaseApplication.ScreenInfo.SCREEN_HEIGHT = (int) (height / density);
/activities\BaseActivity.java:204:        BaseApplication.ScreenInfo.SCREEN_WIDTH = (int) (width / density);
/activities\BaseActivity.java:205:    }
/activities\BaseActivity.java:207:    protected ValueAnimator colorAnim(ImageView view, int... value) {
/activities\BaseActivity.java:208:        ValueAnimator animator = ObjectAnimator.ofArgb(new ImageViewAnimWrapper(view), "tint", value);
/activities\BaseActivity.java:209:        animator.setDuration(150);
/activities\BaseActivity.java:210:        animator.setInterpolator(new AccelerateDecelerateInterpolator());
/activities\BaseActivity.java:211:        return animator;
/activities\BaseActivity.java:212:    }
/activities\BaseActivity.java:214:    protected ValueAnimator colorAnim(TextView view, int... value) {
/activities\BaseActivity.java:215:        ValueAnimator animator = ObjectAnimator.ofArgb(new TextViewAnimWrapper(view), "textColor", value);
/activities\BaseActivity.java:216:        animator.setDuration(150);
/activities\BaseActivity.java:217:        animator.setInterpolator(new AccelerateDecelerateInterpolator());
/activities\BaseActivity.java:218:        return animator;
/activities\BaseActivity.java:219:    }
/activities\BaseActivity.java:221:    public void refreshStatusBarColor() {
/activities\BaseActivity.java:222:        if (THEME_TRANSLUCENT.equals(ThemeUtil.getTheme(this))) {
/activities\BaseActivity.java:223:            ImmersionBar.with(this)
/activities\BaseActivity.java:224:                    .transparentBar()
/activities\BaseActivity.java:225:                    .init();
/activities\BaseActivity.java:226:        } else {
/activities\BaseActivity.java:227:            ImmersionBar.with(this)
/activities\BaseActivity.java:228:                    .fitsSystemWindowsInt(true, ThemeUtils.getColorByAttr(this, R.attr.colorBg))
/activities\BaseActivity.java:229:                    .navigationBarColorInt(ThemeUtils.getColorByAttr(this, R.attr.colorNavBar))
/activities\BaseActivity.java:230:                    .navigationBarDarkIcon(ThemeUtil.isNavigationBarFontDark(this))
/activities\BaseActivity.java:231:                    .statusBarDarkFont(ThemeUtil.isStatusBarFontDark(this))
/activities\BaseActivity.java:232:                    .statusBarColorInt(calcStatusBarColor(ThemeUtils.getColorByAttr(this, R.attr.colorToolbar)))
/activities\BaseActivity.java:233:                    .init();
/activities\BaseActivity.java:234:        }
/activities\BaseActivity.java:235:    }
/activities\BaseActivity.java:237:    protected int calcStatusBarColor() {
/activities\BaseActivity.java:238:        return calcStatusBarColor(ThemeUtils.getColorByAttr(this, R.attr.colorToolbar));
/activities\BaseActivity.java:239:    }
/activities\BaseActivity.java:241:    protected int calcStatusBarColor(@ColorInt int originColor) {
/activities\BaseActivity.java:242:        boolean darkerStatusBar = true;
/activities\BaseActivity.java:243:        if (THEME_CUSTOM.equals(ThemeUtil.getTheme(this)) && !SharedPreferencesUtil.get(this, SharedPreferencesUtil.SP_SETTINGS)
/activities\BaseActivity.java:244:                .getBoolean(SP_CUSTOM_TOOLBAR_PRIMARY_COLOR, true)) {
/activities\BaseActivity.java:245:            darkerStatusBar = false;
/activities\BaseActivity.java:246:        } else if (ThemeUtil.getTheme(this).equals(ThemeUtil.THEME_WHITE)) {
/activities\BaseActivity.java:247:            darkerStatusBar = false;
/activities\BaseActivity.java:248:        } else if (!SharedPreferencesUtil.get(this, SharedPreferencesUtil.SP_SETTINGS).getBoolean("status_bar_darker", true)) {
/activities\BaseActivity.java:249:            darkerStatusBar = false;
/activities\BaseActivity.java:250:        }
/activities\BaseActivity.java:251:        return darkerStatusBar ? getDarkerColor(originColor) : originColor;
/activities\BaseActivity.java:252:    }
/activities\BaseActivity.java:254:    @CallSuper
/activities\BaseActivity.java:255:    @Override
/activities\BaseActivity.java:256:    public void refreshGlobal(Activity activity) {
/activities\BaseActivity.java:257:        if (isNeedImmersionBar()) {
/activities\BaseActivity.java:258:            refreshStatusBarColor();
/activities\BaseActivity.java:259:        }
/activities\BaseActivity.java:260:        oldTheme = ThemeUtil.getTheme(this);
/activities\BaseActivity.java:261:    }
/activities\BaseActivity.java:263:    private boolean recreateIfNeed() {
/activities\BaseActivity.java:264:        if ((ThemeUtil.isNightMode(this) && !ThemeUtil.isNightMode(oldTheme)) ||
/activities\BaseActivity.java:265:                (!ThemeUtil.isNightMode(this) && ThemeUtil.isNightMode(oldTheme))) {
/activities\BaseActivity.java:266:            recreate();
/activities\BaseActivity.java:267:            return true;
/activities\BaseActivity.java:268:        }
/activities\BaseActivity.java:269:        if ((oldTheme.equals(THEME_TRANSLUCENT) && !THEME_TRANSLUCENT.equals(ThemeUtil.getTheme(this))) ||
/activities\BaseActivity.java:270:                (THEME_TRANSLUCENT.equals(ThemeUtil.getTheme(this)) && !oldTheme.equals(THEME_TRANSLUCENT))) {
/activities\BaseActivity.java:271:            recreate();
/activities\BaseActivity.java:272:            return true;
/activities\BaseActivity.java:273:        }
/activities\BaseActivity.java:274:        return false;
/activities\BaseActivity.java:275:    }
/activities\BaseActivity.java:277:    @Override
/activities\BaseActivity.java:278:    public void refreshSpecificView(View view) {
/activities\BaseActivity.java:279:    }
/activities\BaseActivity.java:281:    @Keep
/activities\BaseActivity.java:282:    protected static class TextViewAnimWrapper {
/activities\BaseActivity.java:283:        private TextView mTarget;
/activities\BaseActivity.java:285:        public TextViewAnimWrapper(TextView view) {
/activities\BaseActivity.java:286:            mTarget = view;
/activities\BaseActivity.java:287:        }
/activities\BaseActivity.java:289:        @ColorInt
/activities\BaseActivity.java:290:        public int getTextColor() {
/activities\BaseActivity.java:291:            return mTarget.getCurrentTextColor();
/activities\BaseActivity.java:292:        }
/activities\BaseActivity.java:294:        public void setTextColor(@ColorInt int color) {
/activities\BaseActivity.java:295:            mTarget.setTextColor(color);
/activities\BaseActivity.java:296:        }
/activities\BaseActivity.java:297:    }
/activities\BaseActivity.java:299:    @Keep
/activities\BaseActivity.java:300:    protected static class ImageViewAnimWrapper {
/activities\BaseActivity.java:301:        private ImageView mTarget;
/activities\BaseActivity.java:303:        public ImageViewAnimWrapper(ImageView view) {
/activities\BaseActivity.java:304:            mTarget = view;
/activities\BaseActivity.java:305:        }
/activities\BaseActivity.java:307:        public int getTint() {
/activities\BaseActivity.java:308:            return mTarget.getImageTintList() != null ? mTarget.getImageTintList().getDefaultColor() : 0x00000000;
/activities\BaseActivity.java:309:        }
/activities\BaseActivity.java:311:        public void setTint(@ColorInt int color) {
/activities\BaseActivity.java:312:            mTarget.setImageTintList(ColorStateList.valueOf(color));
/activities\BaseActivity.java:313:        }
/activities\BaseActivity.java:314:    }
/activities\BaseActivity.java:315:}/activities\BlockListActivity.java:1:package com.huanchengfly.tieba.post.activities;
/activities\BlockListActivity.java:3:import android.content.Intent;
/activities\BlockListActivity.java:4:import android.graphics.Color;
/activities\BlockListActivity.java:5:import android.os.Bundle;
/activities\BlockListActivity.java:6:import android.view.Menu;
/activities\BlockListActivity.java:7:import android.view.MenuItem;
/activities\BlockListActivity.java:9:import androidx.annotation.NonNull;
/activities\BlockListActivity.java:10:import androidx.appcompat.app.ActionBar;
/activities\BlockListActivity.java:11:import androidx.appcompat.widget.Toolbar;
/activities\BlockListActivity.java:12:import androidx.recyclerview.widget.ItemTouchHelper;
/activities\BlockListActivity.java:13:import androidx.recyclerview.widget.LinearLayoutManager;
/activities\BlockListActivity.java:14:import androidx.recyclerview.widget.RecyclerView;
/activities\BlockListActivity.java:16:import com.google.android.material.appbar.AppBarLayout;
/activities\BlockListActivity.java:17:import com.google.android.material.snackbar.Snackbar;
/activities\BlockListActivity.java:18:import com.huanchengfly.tieba.post.R;
/activities\BlockListActivity.java:19:import com.huanchengfly.tieba.post.adapters.BlockListAdapter;
/activities\BlockListActivity.java:20:import com.huanchengfly.tieba.post.components.dialogs.EditTextDialog;
/activities\BlockListActivity.java:21:import com.huanchengfly.tieba.post.models.database.Block;
/activities\BlockListActivity.java:22:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/activities\BlockListActivity.java:23:import com.huanchengfly.tieba.post.utils.Util;
/activities\BlockListActivity.java:24:import com.huanchengfly.tieba.post.utils.GsonUtil;
/activities\BlockListActivity.java:26:public class BlockListActivity extends BaseActivity {
/activities\BlockListActivity.java:27:    private Toolbar toolbar;
/activities\BlockListActivity.java:28:    private AppBarLayout toolbarContainer;
/activities\BlockListActivity.java:29:    private RecyclerView recyclerView;
/activities\BlockListActivity.java:30:    private LinearLayoutManager layoutManager;
/activities\BlockListActivity.java:31:    private BlockListAdapter blockListAdapter;
/activities\BlockListActivity.java:32:    private EditTextDialog editTextDialog;
/activities\BlockListActivity.java:33:    private int type;
/activities\BlockListActivity.java:35:    @Override
/activities\BlockListActivity.java:36:    protected void onCreate(Bundle savedInstanceState) {
/activities\BlockListActivity.java:37:        super.onCreate(savedInstanceState);
/activities\BlockListActivity.java:38:        setContentView(R.layout.activity_block_list);
/activities\BlockListActivity.java:39:        ThemeUtil.setTranslucentThemeBackground(findViewById(R.id.background));
/activities\BlockListActivity.java:40:        toolbar = (Toolbar) findViewById(R.id.toolbar);
/activities\BlockListActivity.java:41:        toolbarContainer = (AppBarLayout) findViewById(R.id.appbar);
/activities\BlockListActivity.java:42:        recyclerView = (RecyclerView) findViewById(R.id.block_list_recycler_view);
/activities\BlockListActivity.java:43:        Intent intent = getIntent();
/activities\BlockListActivity.java:44:        this.type = intent.getIntExtra("category", Block.CATEGORY_BLACK_LIST);
/activities\BlockListActivity.java:45:        setSupportActionBar(toolbar);
/activities\BlockListActivity.java:46:        ActionBar actionBar = getSupportActionBar();
/activities\BlockListActivity.java:47:        if (actionBar != null) {
/activities\BlockListActivity.java:48:            actionBar.setDisplayHomeAsUpEnabled(true);
/activities\BlockListActivity.java:49:        }
/activities\BlockListActivity.java:50:        if (this.type == Block.CATEGORY_BLACK_LIST) {
/activities\BlockListActivity.java:51:            if (actionBar != null) {
/activities\BlockListActivity.java:52:                actionBar.setTitle(R.string.title_black_list);
/activities\BlockListActivity.java:53:            }
/activities\BlockListActivity.java:54:        } else if (this.type == Block.CATEGORY_WHITE_LIST) {
/activities\BlockListActivity.java:55:            if (actionBar != null) {
/activities\BlockListActivity.java:56:                actionBar.setTitle(R.string.title_white_list);
/activities\BlockListActivity.java:57:            }
/activities\BlockListActivity.java:58:        } else {
/activities\BlockListActivity.java:59:            finish();
/activities\BlockListActivity.java:60:            return;
/activities\BlockListActivity.java:61:        }
/activities\BlockListActivity.java:62:        layoutManager = new LinearLayoutManager(this);
/activities\BlockListActivity.java:63:        ItemTouchHelper mItemTouchHelper = new ItemTouchHelper(new ItemTouchHelper.Callback() {
/activities\BlockListActivity.java:64:            @Override
/activities\BlockListActivity.java:65:            public void clearView(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder) {
/activities\BlockListActivity.java:66:                super.clearView(recyclerView, viewHolder);
/activities\BlockListActivity.java:67:                viewHolder.itemView.setBackgroundColor(Color.TRANSPARENT);
/activities\BlockListActivity.java:68:            }
/activities\BlockListActivity.java:70:            @Override
/activities\BlockListActivity.java:71:            public void onSelectedChanged(RecyclerView.ViewHolder viewHolder, int actionState) {
/activities\BlockListActivity.java:72:                super.onSelectedChanged(viewHolder, actionState);
/activities\BlockListActivity.java:73:                if (actionState == ItemTouchHelper.ACTION_STATE_SWIPE) {
/activities\BlockListActivity.java:74:                    viewHolder.itemView.setBackgroundColor(Util.getColorByAttr(BlockListActivity.this, R.attr.colorControlHighlight, R.color.transparent));
/activities\BlockListActivity.java:75:                }
/activities\BlockListActivity.java:76:            }
/activities\BlockListActivity.java:78:            @Override
/activities\BlockListActivity.java:79:            public int getMovementFlags(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder) {
/activities\BlockListActivity.java:80:                int dragFlags = 0, swiped = ItemTouchHelper.RIGHT | ItemTouchHelper.LEFT;
/activities\BlockListActivity.java:81:                return makeMovementFlags(dragFlags, swiped);
/activities\BlockListActivity.java:82:            }
/activities\BlockListActivity.java:84:            @Override
/activities\BlockListActivity.java:85:            public boolean onMove(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder, @NonNull RecyclerView.ViewHolder target) {
/activities\BlockListActivity.java:86:                return true;
/activities\BlockListActivity.java:87:            }
/activities\BlockListActivity.java:89:            @Override
/activities\BlockListActivity.java:90:            public void onSwiped(@NonNull RecyclerView.ViewHolder viewHolder, int direction) {
/activities\BlockListActivity.java:91:                int position = viewHolder.getAdapterPosition();
/activities\BlockListActivity.java:92:                Block block = blockListAdapter.get(position);
/activities\BlockListActivity.java:93:                blockListAdapter.remove(position);
/activities\BlockListActivity.java:94:                Util.createSnackbar(recyclerView, R.string.toast_deleted, Snackbar.LENGTH_LONG)
/activities\BlockListActivity.java:95:                        .addCallback(new Snackbar.Callback() {
/activities\BlockListActivity.java:96:                            @Override
/activities\BlockListActivity.java:97:                            public void onDismissed(Snackbar snackbar, int event) {
/activities\BlockListActivity.java:98:                                if (event != DISMISS_EVENT_ACTION) {
/activities\BlockListActivity.java:99:                                    block.delete();
/activities\BlockListActivity.java:100:                                    blockListAdapter.refresh();
/activities\BlockListActivity.java:101:                                }
/activities\BlockListActivity.java:102:                            }
/activities\BlockListActivity.java:103:                        }).setAction(R.string.button_undo, mView -> blockListAdapter.insert(block, position)).show();
/activities\BlockListActivity.java:104:            }
/activities\BlockListActivity.java:105:        });
/activities\BlockListActivity.java:106:        mItemTouchHelper.attachToRecyclerView(recyclerView);
/activities\BlockListActivity.java:107:        recyclerView.setLayoutManager(layoutManager);
/activities\BlockListActivity.java:108:        blockListAdapter = new BlockListAdapter(this, this.type);
/activities\BlockListActivity.java:109:        recyclerView.setAdapter(blockListAdapter);
/activities\BlockListActivity.java:110:        blockListAdapter.refresh();
/activities\BlockListActivity.java:111:    }
/activities\BlockListActivity.java:113:    @Override
/activities\BlockListActivity.java:114:    public boolean onCreateOptionsMenu(Menu menu) {
/activities\BlockListActivity.java:115:        getMenuInflater().inflate(R.menu.menu_block_list_toolbar, menu);
/activities\BlockListActivity.java:116:        return super.onCreateOptionsMenu(menu);
/activities\BlockListActivity.java:117:    }
/activities\BlockListActivity.java:119:    @Override
/activities\BlockListActivity.java:120:    public boolean onOptionsItemSelected(MenuItem item) {
/activities\BlockListActivity.java:121:        switch (item.getItemId()) {
/activities\BlockListActivity.java:122:            case R.id.menu_add:
/activities\BlockListActivity.java:123:                editTextDialog = new EditTextDialog(this)
/activities\BlockListActivity.java:124:                        .setTipText(R.string.tip_input)
/activities\BlockListActivity.java:125:                        .setHelperText(R.string.tip_multi_block);
/activities\BlockListActivity.java:126:                if (this.type == Block.CATEGORY_BLACK_LIST)
/activities\BlockListActivity.java:127:                    editTextDialog.setTitle(R.string.title_add_black);
/activities\BlockListActivity.java:128:                else if (this.type == Block.CATEGORY_WHITE_LIST)
/activities\BlockListActivity.java:129:                    editTextDialog.setTitle(R.string.title_add_white);
/activities\BlockListActivity.java:130:                editTextDialog.setOnSubmitListener((String content) -> {
/activities\BlockListActivity.java:131:                    String[] strings = new String[]{content};
/activities\BlockListActivity.java:132:                    if (content.contains(" ")) {
/activities\BlockListActivity.java:133:                        strings = content.split(" ");
/activities\BlockListActivity.java:134:                    }
/activities\BlockListActivity.java:135:                    new Block()
/activities\BlockListActivity.java:136:                            .setKeywords(GsonUtil.getGson().toJson(strings))
/activities\BlockListActivity.java:137:                            .setType(Block.TYPE_KEYWORD)
/activities\BlockListActivity.java:138:                            .setCategory(this.type)
/activities\BlockListActivity.java:139:                            .save();
/activities\BlockListActivity.java:140:                    blockListAdapter.refresh();
/activities\BlockListActivity.java:141:                }).show();
/activities\BlockListActivity.java:142:                break;
/activities\BlockListActivity.java:143:            default:
/activities\BlockListActivity.java:144:                break;
/activities\BlockListActivity.java:145:        }
/activities\BlockListActivity.java:146:        return super.onOptionsItemSelected(item);
/activities\BlockListActivity.java:147:    }
/activities\BlockListActivity.java:148:}
/activities\DispatchActivity.java:1:package com.huanchengfly.tieba.post.activities;
/activities\DispatchActivity.java:3:import android.net.Uri;
/activities\DispatchActivity.java:4:import android.os.Bundle;
/activities\DispatchActivity.java:6:import androidx.appcompat.app.AppCompatActivity;
/activities\DispatchActivity.java:8:import com.huanchengfly.tieba.post.utils.NavigationHelper;
/activities\DispatchActivity.java:10:import java.util.HashMap;
/activities\DispatchActivity.java:11:import java.util.Map;
/activities\DispatchActivity.java:13:public class DispatchActivity extends AppCompatActivity {
/activities\DispatchActivity.java:14:    @Override
/activities\DispatchActivity.java:15:    protected void onCreate(Bundle savedInstanceState) {
/activities\DispatchActivity.java:16:        super.onCreate(savedInstanceState);
/activities\DispatchActivity.java:17:        Uri uri = getIntent().getData();
/activities\DispatchActivity.java:18:        NavigationHelper navigationHelper = NavigationHelper.newInstance(this);
/activities\DispatchActivity.java:19:        if (uri != null) {
/activities\DispatchActivity.java:20:            String url = uri.toString();
/activities\DispatchActivity.java:21:            Uri newUri = Uri.parse(url.replace("://tieba.baidu.com//", "://tieba.baidu.com/?"));
/activities\DispatchActivity.java:22:            if ("http".equalsIgnoreCase(newUri.getScheme()) || "https".equalsIgnoreCase(newUri.getScheme())) {
/activities\DispatchActivity.java:23:                navigationHelper.navigationByData(NavigationHelper.ACTION_URL, newUri.toString());
/activities\DispatchActivity.java:24:            } else if (newUri.getScheme().equals("tbfrs")) {
/activities\DispatchActivity.java:25:                navigationHelper.navigationByData(NavigationHelper.ACTION_FORUM, newUri.getQueryParameter("kw"));
/activities\DispatchActivity.java:26:            } else if (newUri.getScheme().equals("tbpb")) {
/activities\DispatchActivity.java:27:                Map<String, String> map = new HashMap<>();
/activities\DispatchActivity.java:28:                map.put("tid", newUri.getQueryParameter("tid"));
/activities\DispatchActivity.java:29:                navigationHelper.navigationByData(NavigationHelper.ACTION_THREAD, map);
/activities\DispatchActivity.java:30:            } else if (newUri.getScheme().equals("com.baidu.tieba") && "unidispatch".equals(newUri.getHost())) {
/activities\DispatchActivity.java:31:                if ("/frs".equals(newUri.getPath())) {
/activities\DispatchActivity.java:32:                    navigationHelper.navigationByData(NavigationHelper.ACTION_FORUM, newUri.getQueryParameter("kw"));
/activities\DispatchActivity.java:33:                } else if ("/pb".equals(newUri.getPath())) {
/activities\DispatchActivity.java:34:                    Map<String, String> map = new HashMap<>();
/activities\DispatchActivity.java:35:                    map.put("tid", newUri.getQueryParameter("tid"));
/activities\DispatchActivity.java:36:                    navigationHelper.navigationByData(NavigationHelper.ACTION_THREAD, map);
/activities\DispatchActivity.java:37:                }
/activities\DispatchActivity.java:38:            }
/activities\DispatchActivity.java:39:        }
/activities\DispatchActivity.java:40:        finish();
/activities\DispatchActivity.java:41:    }
/activities\DispatchActivity.java:42:}/activities\HistoryActivity.java:1:package com.huanchengfly.tieba.post.activities;
/activities\HistoryActivity.java:3:import android.graphics.drawable.ColorDrawable;
/activities\HistoryActivity.java:4:import android.os.Bundle;
/activities\HistoryActivity.java:5:import android.view.Menu;
/activities\HistoryActivity.java:6:import android.view.MenuItem;
/activities\HistoryActivity.java:7:import android.widget.ListView;
/activities\HistoryActivity.java:8:import android.widget.Toast;
/activities\HistoryActivity.java:10:import androidx.appcompat.app.ActionBar;
/activities\HistoryActivity.java:11:import androidx.appcompat.widget.Toolbar;
/activities\HistoryActivity.java:13:import com.google.gson.JsonSyntaxException;
/activities\HistoryActivity.java:14:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/activities\HistoryActivity.java:15:import com.huanchengfly.tieba.post.R;
/activities\HistoryActivity.java:16:import com.huanchengfly.tieba.post.adapters.HistoryListAdapter;
/activities\HistoryActivity.java:17:import com.huanchengfly.tieba.post.models.ThreadHistoryInfoBean;
/activities\HistoryActivity.java:18:import com.huanchengfly.tieba.post.models.database.History;
/activities\HistoryActivity.java:19:import com.huanchengfly.tieba.post.utils.DisplayUtil;
/activities\HistoryActivity.java:20:import com.huanchengfly.tieba.post.utils.HistoryHelper;
/activities\HistoryActivity.java:21:import com.huanchengfly.tieba.post.utils.NavigationHelper;
/activities\HistoryActivity.java:22:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/activities\HistoryActivity.java:23:import com.huanchengfly.tieba.post.utils.GsonUtil;
/activities\HistoryActivity.java:25:import java.util.HashMap;
/activities\HistoryActivity.java:26:import java.util.List;
/activities\HistoryActivity.java:27:import java.util.Map;
/activities\HistoryActivity.java:29:public class HistoryActivity extends BaseActivity {
/activities\HistoryActivity.java:30:    private HistoryHelper helper;
/activities\HistoryActivity.java:31:    private NavigationHelper navigationHelper;
/activities\HistoryActivity.java:32:    private ListView mListView;
/activities\HistoryActivity.java:34:    @Override
/activities\HistoryActivity.java:35:    protected void onCreate(Bundle savedInstanceState) {
/activities\HistoryActivity.java:36:        super.onCreate(savedInstanceState);
/activities\HistoryActivity.java:37:        setContentView(R.layout.activity_history);
/activities\HistoryActivity.java:38:        ThemeUtil.setTranslucentThemeBackground(findViewById(R.id.background));
/activities\HistoryActivity.java:39:        navigationHelper = NavigationHelper.newInstance(this);
/activities\HistoryActivity.java:40:        mListView = (ListView) findViewById(R.id.history_list);
/activities\HistoryActivity.java:41:        mListView.setDivider(new ColorDrawable(ThemeUtils.getColorByAttr(this, R.attr.colorDivider)));
/activities\HistoryActivity.java:42:        mListView.setDividerHeight(DisplayUtil.dp2px(this, 1));
/activities\HistoryActivity.java:43:        mListView.setOnItemClickListener((parent, view, position, id) -> {
/activities\HistoryActivity.java:44:            HistoryListAdapter adapter = (HistoryListAdapter) mListView.getAdapter();
/activities\HistoryActivity.java:45:            History dataBean = (History) adapter.getItem(position);
/activities\HistoryActivity.java:46:            switch (dataBean.getType()) {
/activities\HistoryActivity.java:47:                case HistoryHelper.TYPE_URL:
/activities\HistoryActivity.java:48:                    navigationHelper.navigationByData(NavigationHelper.ACTION_URL, dataBean.getData());
/activities\HistoryActivity.java:49:                    break;
/activities\HistoryActivity.java:50:                case HistoryHelper.TYPE_BA:
/activities\HistoryActivity.java:51:                    navigationHelper.navigationByData(NavigationHelper.ACTION_FORUM, dataBean.getData());
/activities\HistoryActivity.java:52:                    break;
/activities\HistoryActivity.java:53:                case HistoryHelper.TYPE_THREAD:
/activities\HistoryActivity.java:54:                    if (dataBean.getExtras() != null) {
/activities\HistoryActivity.java:55:                        try {
/activities\HistoryActivity.java:56:                            ThreadHistoryInfoBean historyInfoBean = GsonUtil.getGson().fromJson(dataBean.getExtras(), ThreadHistoryInfoBean.class);
/activities\HistoryActivity.java:57:                            if (historyInfoBean == null) {
/activities\HistoryActivity.java:58:                                break;
/activities\HistoryActivity.java:59:                            }
/activities\HistoryActivity.java:60:                            Map<String, String> map = new HashMap<>();
/activities\HistoryActivity.java:61:                            map.put("tid", dataBean.getData());
/activities\HistoryActivity.java:62:                            map.put("pid", historyInfoBean.getPid());
/activities\HistoryActivity.java:63:                            map.put("from", ThreadActivity.FROM_HISTORY);
/activities\HistoryActivity.java:64:                            map.put("seeLz", historyInfoBean.isSeeLz() ? "1" : "0");
/activities\HistoryActivity.java:65:                            navigationHelper.navigationByData(NavigationHelper.ACTION_THREAD, map);
/activities\HistoryActivity.java:66:                            break;
/activities\HistoryActivity.java:67:                        } catch (JsonSyntaxException ignored) {
/activities\HistoryActivity.java:68:                        }
/activities\HistoryActivity.java:69:                    }
/activities\HistoryActivity.java:70:                    Map<String, String> map = new HashMap<>();
/activities\HistoryActivity.java:71:                    map.put("tid", dataBean.getData());
/activities\HistoryActivity.java:72:                    navigationHelper.navigationByData(NavigationHelper.ACTION_THREAD, map);
/activities\HistoryActivity.java:73:                    break;
/activities\HistoryActivity.java:74:            }
/activities\HistoryActivity.java:75:        });
/activities\HistoryActivity.java:76:        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
/activities\HistoryActivity.java:77:        setSupportActionBar(toolbar);
/activities\HistoryActivity.java:78:        ActionBar actionBar = getSupportActionBar();
/activities\HistoryActivity.java:79:        if (actionBar != null) {
/activities\HistoryActivity.java:80:            actionBar.setDisplayHomeAsUpEnabled(true);
/activities\HistoryActivity.java:81:            actionBar.setTitle(R.string.title_history);
/activities\HistoryActivity.java:82:        }
/activities\HistoryActivity.java:83:        helper = new HistoryHelper(this);
/activities\HistoryActivity.java:84:        refreshData();
/activities\HistoryActivity.java:85:    }
/activities\HistoryActivity.java:87:    private void refreshData() {
/activities\HistoryActivity.java:88:        List<History> array = helper.getAll();
/activities\HistoryActivity.java:89:        mListView.setAdapter(new HistoryListAdapter(this, array));
/activities\HistoryActivity.java:90:    }
/activities\HistoryActivity.java:92:    @Override
/activities\HistoryActivity.java:93:    public boolean onCreateOptionsMenu(Menu menu) {
/activities\HistoryActivity.java:94:        getMenuInflater().inflate(R.menu.menu_history_toolbar, menu);
/activities\HistoryActivity.java:95:        return super.onCreateOptionsMenu(menu);
/activities\HistoryActivity.java:96:    }
/activities\HistoryActivity.java:98:    @Override
/activities\HistoryActivity.java:99:    public boolean onOptionsItemSelected(MenuItem item) {
/activities\HistoryActivity.java:100:        switch (item.getItemId()) {
/activities\HistoryActivity.java:101:            case android.R.id.home:
/activities\HistoryActivity.java:102:                finish();
/activities\HistoryActivity.java:103:                break;
/activities\HistoryActivity.java:104:            case R.id.menu_delete:
/activities\HistoryActivity.java:105:                helper.delete();
/activities\HistoryActivity.java:106:                Toast.makeText(this, R.string.toast_delete_success, Toast.LENGTH_SHORT).show();
/activities\HistoryActivity.java:107:                refreshData();
/activities\HistoryActivity.java:108:                break;
/activities\HistoryActivity.java:109:            default:
/activities\HistoryActivity.java:110:                break;
/activities\HistoryActivity.java:111:        }
/activities\HistoryActivity.java:112:        return super.onOptionsItemSelected(item);
/activities\HistoryActivity.java:113:    }
/activities\HistoryActivity.java:114:}
/activities\HotMessageListActivity.java:1:package com.huanchengfly.tieba.post.activities;
/activities\HotMessageListActivity.java:3:import android.os.Bundle;
/activities\HotMessageListActivity.java:4:import android.widget.Toast;
/activities\HotMessageListActivity.java:6:import androidx.appcompat.app.ActionBar;
/activities\HotMessageListActivity.java:7:import androidx.appcompat.widget.Toolbar;
/activities\HotMessageListActivity.java:8:import androidx.recyclerview.widget.LinearLayoutManager;
/activities\HotMessageListActivity.java:9:import androidx.recyclerview.widget.RecyclerView;
/activities\HotMessageListActivity.java:10:import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
/activities\HotMessageListActivity.java:12:import com.google.android.material.appbar.AppBarLayout;
/activities\HotMessageListActivity.java:13:import com.huanchengfly.tieba.post.api.TiebaApi;
/activities\HotMessageListActivity.java:14:import com.huanchengfly.tieba.post.api.models.web.HotMessageListBean;
/activities\HotMessageListActivity.java:15:import com.huanchengfly.tieba.post.adapters.HotMessageListAdapter;
/activities\HotMessageListActivity.java:16:import com.huanchengfly.tieba.post.R;
/activities\HotMessageListActivity.java:17:import com.huanchengfly.tieba.post.components.MyLinearLayoutManager;
/activities\HotMessageListActivity.java:18:import com.huanchengfly.tieba.post.components.dividers.CommonDivider;
/activities\HotMessageListActivity.java:19:import com.huanchengfly.tieba.post.utils.DisplayUtil;
/activities\HotMessageListActivity.java:21:import org.jetbrains.annotations.NotNull;
/activities\HotMessageListActivity.java:23:import retrofit2.Call;
/activities\HotMessageListActivity.java:24:import retrofit2.Callback;
/activities\HotMessageListActivity.java:25:import retrofit2.Response;
/activities\HotMessageListActivity.java:27:public class HotMessageListActivity extends BaseActivity {
/activities\HotMessageListActivity.java:28:    private Toolbar toolbar;
/activities\HotMessageListActivity.java:29:    private AppBarLayout appBarLayout;
/activities\HotMessageListActivity.java:30:    private SwipeRefreshLayout refreshLayout;
/activities\HotMessageListActivity.java:31:    private RecyclerView recyclerView;
/activities\HotMessageListActivity.java:33:    private HotMessageListAdapter adapter;
/activities\HotMessageListActivity.java:35:    @Override
/activities\HotMessageListActivity.java:36:    protected void onCreate(Bundle savedInstanceState) {
/activities\HotMessageListActivity.java:37:        super.onCreate(savedInstanceState);
/activities\HotMessageListActivity.java:38:        setContentView(R.layout.activity_hot_message_list);
/activities\HotMessageListActivity.java:39:        toolbar = (Toolbar) findViewById(R.id.toolbar);
/activities\HotMessageListActivity.java:40:        appBarLayout = (AppBarLayout) findViewById(R.id.appbar);
/activities\HotMessageListActivity.java:41:        refreshLayout = (SwipeRefreshLayout) findViewById(R.id.refresh);
/activities\HotMessageListActivity.java:42:        recyclerView = (RecyclerView) findViewById(R.id.recycler_view);
/activities\HotMessageListActivity.java:43:        setSupportActionBar(toolbar);
/activities\HotMessageListActivity.java:44:        ActionBar actionBar = getSupportActionBar();
/activities\HotMessageListActivity.java:45:        if (actionBar != null) {
/activities\HotMessageListActivity.java:46:            actionBar.setTitle(R.string.title_hot_message);
/activities\HotMessageListActivity.java:47:            actionBar.setDisplayHomeAsUpEnabled(true);
/activities\HotMessageListActivity.java:48:        }
/activities\HotMessageListActivity.java:49:        LinearLayoutManager layoutManager = new MyLinearLayoutManager(this);
/activities\HotMessageListActivity.java:50:        recyclerView.setLayoutManager(layoutManager);
/activities\HotMessageListActivity.java:51:        recyclerView.addItemDecoration(new CommonDivider(this, LinearLayoutManager.VERTICAL, R.drawable.drawable_divider_1dp, DisplayUtil.dp2px(this, 48)));
/activities\HotMessageListActivity.java:52:        adapter = new HotMessageListAdapter(this);
/activities\HotMessageListActivity.java:53:        adapter.setLoadFailedView(R.layout.layout_footer_load_failed);
/activities\HotMessageListActivity.java:54:        adapter.setOnLoadMoreListener(isReload -> refresh());
/activities\HotMessageListActivity.java:55:        recyclerView.setAdapter(adapter);
/activities\HotMessageListActivity.java:56:        refreshLayout.setOnRefreshListener(this::refresh);
/activities\HotMessageListActivity.java:57:        refresh();
/activities\HotMessageListActivity.java:58:    }
/activities\HotMessageListActivity.java:60:    private void refresh() {
/activities\HotMessageListActivity.java:61:        refreshLayout.setRefreshing(true);
/activities\HotMessageListActivity.java:62:        TiebaApi.getInstance().hotMessageList().enqueue(new Callback<HotMessageListBean>() {
/activities\HotMessageListActivity.java:63:            @Override
/activities\HotMessageListActivity.java:64:            public void onResponse(@NotNull Call<HotMessageListBean> call, @NotNull Response<HotMessageListBean> response) {
/activities\HotMessageListActivity.java:65:                adapter.setNewData(response.body().getData().getList().getRet());
/activities\HotMessageListActivity.java:66:                refreshLayout.setRefreshing(false);
/activities\HotMessageListActivity.java:67:            }
/activities\HotMessageListActivity.java:69:            @Override
/activities\HotMessageListActivity.java:70:            public void onFailure(@NotNull Call<HotMessageListBean> call, @NotNull Throwable t) {
/activities\HotMessageListActivity.java:71:                adapter.loadFailed();
/activities\HotMessageListActivity.java:72:                refreshLayout.setRefreshing(false);
/activities\HotMessageListActivity.java:73:                Toast.makeText(HotMessageListActivity.this, t.getMessage(), Toast.LENGTH_SHORT).show();
/activities\HotMessageListActivity.java:74:            }
/activities\HotMessageListActivity.java:75:        });
/activities\HotMessageListActivity.java:76:    }
/activities\HotMessageListActivity.java:77:}
/activities\LoginActivity.java:1:package com.huanchengfly.tieba.post.activities;
/activities\LoginActivity.java:3:import android.content.Intent;
/activities\LoginActivity.java:4:import android.graphics.Bitmap;
/activities\LoginActivity.java:5:import android.os.Bundle;
/activities\LoginActivity.java:6:import android.os.Handler;
/activities\LoginActivity.java:7:import android.util.Log;
/activities\LoginActivity.java:8:import android.webkit.CookieManager;
/activities\LoginActivity.java:9:import android.webkit.WebView;
/activities\LoginActivity.java:11:import androidx.appcompat.app.ActionBar;
/activities\LoginActivity.java:12:import androidx.appcompat.widget.Toolbar;
/activities\LoginActivity.java:14:import com.google.android.material.snackbar.Snackbar;
/activities\LoginActivity.java:15:import com.huanchengfly.tieba.post.api.interfaces.CommonCallback;
/activities\LoginActivity.java:16:import com.huanchengfly.tieba.post.R;
/activities\LoginActivity.java:17:import com.huanchengfly.tieba.post.fragments.WebViewFragment;
/activities\LoginActivity.java:18:import com.huanchengfly.tieba.post.interfaces.WebViewListener;
/activities\LoginActivity.java:19:import com.huanchengfly.tieba.post.models.MyInfoBean;
/activities\LoginActivity.java:20:import com.huanchengfly.tieba.post.models.database.Account;
/activities\LoginActivity.java:21:import com.huanchengfly.tieba.post.utils.AccountUtil;
/activities\LoginActivity.java:22:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/activities\LoginActivity.java:23:import com.huanchengfly.tieba.post.utils.Util;
/activities\LoginActivity.java:25:public class LoginActivity extends BaseActivity implements WebViewListener {
/activities\LoginActivity.java:26:    public static final String TAG = LoginActivity.class.getSimpleName();
/activities\LoginActivity.java:28:    private static Handler handler = new Handler();
/activities\LoginActivity.java:29:    private Toolbar toolbar;
/activities\LoginActivity.java:31:    @Override
/activities\LoginActivity.java:32:    protected void onCreate(Bundle savedInstanceState) {
/activities\LoginActivity.java:33:        super.onCreate(savedInstanceState);
/activities\LoginActivity.java:34:        setContentView(R.layout.activity_login);
/activities\LoginActivity.java:35:        ThemeUtil.setTranslucentThemeBackground(findViewById(R.id.background));
/activities\LoginActivity.java:36:        toolbar = (Toolbar) findViewById(R.id.toolbar);
/activities\LoginActivity.java:37:        setSupportActionBar(toolbar);
/activities\LoginActivity.java:38:        ActionBar actionBar = getSupportActionBar();
/activities\LoginActivity.java:39:        if (actionBar != null) {
/activities\LoginActivity.java:40:            actionBar.setDisplayHomeAsUpEnabled(true);
/activities\LoginActivity.java:41:            actionBar.setTitle(R.string.title_login);
/activities\LoginActivity.java:42:        }
/activities\LoginActivity.java:43:        if (savedInstanceState == null) {
/activities\LoginActivity.java:44:            WebViewFragment mWebViewFragment = WebViewFragment.newInstance("https://wappass.baidu.com/passport?login&u=https%3A%2F%2Ftieba.baidu.com%2Findex%2Ftbwise%2Fmine", "LoginActivity");
/activities\LoginActivity.java:45:            getSupportFragmentManager().beginTransaction()
/activities\LoginActivity.java:46:                    .replace(R.id.main, mWebViewFragment, "WebViewFragment")
/activities\LoginActivity.java:47:                    .commit();
/activities\LoginActivity.java:48:        }
/activities\LoginActivity.java:49:    }
/activities\LoginActivity.java:51:    @Override
/activities\LoginActivity.java:52:    public void setTitle(String newTitle) {
/activities\LoginActivity.java:53:        toolbar.setTitle(newTitle);
/activities\LoginActivity.java:54:    }
/activities\LoginActivity.java:56:    @Override
/activities\LoginActivity.java:57:    public void onPageFinished(WebView view, String url) {
/activities\LoginActivity.java:58:        CookieManager cookieManager = CookieManager.getInstance();
/activities\LoginActivity.java:59:        String cookies = cookieManager.getCookie(url);
/activities\LoginActivity.java:60:        Log.i(TAG, "onPageFinished: " + cookies);
/activities\LoginActivity.java:61:        if (cookies != null) {
/activities\LoginActivity.java:62:            String[] bdussSplit = cookies.split("BDUSS=");
/activities\LoginActivity.java:63:            if (bdussSplit.length > 1) {
/activities\LoginActivity.java:64:                String bduss = bdussSplit[1].split(";")[0];
/activities\LoginActivity.java:65:                Log.i(TAG, "onPageFinished: " + bduss);
/activities\LoginActivity.java:66:                if (url.startsWith("https://tieba.baidu.com/index/tbwise/") || url.startsWith("https://tiebac.baidu.com/index/tbwise/")) {
/activities\LoginActivity.java:67:                    Snackbar snackbar = Util.createSnackbar(view, "请稍后…", Snackbar.LENGTH_INDEFINITE);
/activities\LoginActivity.java:68:                    snackbar.show();
/activities\LoginActivity.java:69:                    AccountUtil.updateUserInfoByBduss(this, bduss, new CommonCallback<MyInfoBean>() {
/activities\LoginActivity.java:70:                        @Override
/activities\LoginActivity.java:71:                        public void onSuccess(MyInfoBean data) {
/activities\LoginActivity.java:72:                            Account account = AccountUtil.getLoginInfo(LoginActivity.this);
/activities\LoginActivity.java:73:                            if (account == null) {
/activities\LoginActivity.java:74:                                account = AccountUtil.getAccountInfoByBduss(bduss);
/activities\LoginActivity.java:75:                            }
/activities\LoginActivity.java:76:                            if (account == null) {
/activities\LoginActivity.java:77:                                account = AccountUtil.getAccountInfoByUid(String.valueOf(data.getData().getUid()));
/activities\LoginActivity.java:78:                            }
/activities\LoginActivity.java:79:                            if (account != null) {
/activities\LoginActivity.java:80:                                AccountUtil.switchUser(LoginActivity.this, account.getId());
/activities\LoginActivity.java:81:                                snackbar.setText("登录成功，即将跳转");
/activities\LoginActivity.java:82:                                handler.postDelayed(() -> {
/activities\LoginActivity.java:83:                                    snackbar.dismiss();
/activities\LoginActivity.java:84:                                    finish();
/activities\LoginActivity.java:85:                                    startActivity(new Intent(LoginActivity.this, UpdateInfoActivity.class));
/activities\LoginActivity.java:86:                                }, 1500);
/activities\LoginActivity.java:87:                            } else {
/activities\LoginActivity.java:88:                                snackbar.setText("登录失败 未知错误");
/activities\LoginActivity.java:89:                            }
/activities\LoginActivity.java:90:                        }
/activities\LoginActivity.java:92:                        @Override
/activities\LoginActivity.java:93:                        public void onFailure(int code, String error) {
/activities\LoginActivity.java:94:                            snackbar.setText("登录失败，无法获取用户信息 " + error);
/activities\LoginActivity.java:95:                            view.loadUrl("https://wappass.baidu.com/passport?login&u=https%3A%2F%2Ftieba.baidu.com%2Findex%2Ftbwise%2Fmine");
/activities\LoginActivity.java:96:                            handler.postDelayed(snackbar::dismiss, 1500);
/activities\LoginActivity.java:97:                        }
/activities\LoginActivity.java:98:                    });
/activities\LoginActivity.java:99:                }
/activities\LoginActivity.java:100:            }
/activities\LoginActivity.java:101:        }
/activities\LoginActivity.java:102:    }
/activities\LoginActivity.java:104:    @Override
/activities\LoginActivity.java:105:    public void onPageStarted(WebView view, String url, Bitmap favicon) {
/activities\LoginActivity.java:106:    }
/activities\LoginActivity.java:107:}
/activities\MessageActivity.java:1:package com.huanchengfly.tieba.post.activities;
/activities\MessageActivity.java:3:import android.content.Context;
/activities\MessageActivity.java:4:import android.content.Intent;
/activities\MessageActivity.java:5:import android.os.Bundle;
/activities\MessageActivity.java:7:import androidx.appcompat.app.ActionBar;
/activities\MessageActivity.java:8:import androidx.appcompat.widget.Toolbar;
/activities\MessageActivity.java:10:import com.google.android.material.appbar.AppBarLayout;
/activities\MessageActivity.java:11:import com.huanchengfly.tieba.post.R;
/activities\MessageActivity.java:12:import com.huanchengfly.tieba.post.fragments.MessageFragment;
/activities\MessageActivity.java:13:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/activities\MessageActivity.java:15:public class MessageActivity extends BaseActivity {
/activities\MessageActivity.java:17:    public static Intent createIntent(Context context, int type) {
/activities\MessageActivity.java:18:        return new Intent(context, MessageActivity.class)
/activities\MessageActivity.java:19:                .putExtra("type", type);
/activities\MessageActivity.java:20:    }
/activities\MessageActivity.java:22:    @Override
/activities\MessageActivity.java:23:    protected void onCreate(Bundle savedInstanceState) {
/activities\MessageActivity.java:24:        super.onCreate(savedInstanceState);
/activities\MessageActivity.java:25:        setContentView(R.layout.activity_message_list);
/activities\MessageActivity.java:26:        ThemeUtil.setTranslucentThemeBackground(findViewById(R.id.background));
/activities\MessageActivity.java:27:        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
/activities\MessageActivity.java:28:        AppBarLayout.LayoutParams layoutParams = (AppBarLayout.LayoutParams) toolbar.getLayoutParams();
/activities\MessageActivity.java:29:        layoutParams.setScrollFlags(AppBarLayout.LayoutParams.SCROLL_FLAG_SCROLL | AppBarLayout.LayoutParams.SCROLL_FLAG_ENTER_ALWAYS);
/activities\MessageActivity.java:30:        toolbar.setLayoutParams(layoutParams);
/activities\MessageActivity.java:31:        setSupportActionBar(toolbar);
/activities\MessageActivity.java:32:        ActionBar actionBar = getSupportActionBar();
/activities\MessageActivity.java:33:        if (actionBar != null) {
/activities\MessageActivity.java:34:            actionBar.setDisplayHomeAsUpEnabled(true);
/activities\MessageActivity.java:35:            actionBar.setTitle(R.string.title_message);
/activities\MessageActivity.java:36:        }
/activities\MessageActivity.java:37:        if (savedInstanceState == null) {
/activities\MessageActivity.java:38:            getSupportFragmentManager().beginTransaction()
/activities\MessageActivity.java:39:                    .replace(R.id.activity_message_list_content,
/activities\MessageActivity.java:40:                            MessageFragment.newInstance(getIntent().getIntExtra("type", MessageFragment.TYPE_REPLY_ME), true), MessageFragment.class.getSimpleName()).commit();
/activities\MessageActivity.java:41:        }
/activities\MessageActivity.java:42:    }
/activities\MessageActivity.java:43:}/activities\NewIntroActivity.java:1:package com.huanchengfly.tieba.post.activities;
/activities\NewIntroActivity.java:3:import android.content.Intent;
/activities\NewIntroActivity.java:4:import android.os.Build;
/activities\NewIntroActivity.java:6:import com.huanchengfly.tieba.post.ui.intro.BaseIntroActivity;
/activities\NewIntroActivity.java:7:import com.huanchengfly.tieba.post.ui.intro.fragments.AppIntroFragment;
/activities\NewIntroActivity.java:8:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/activities\NewIntroActivity.java:9:import com.huanchengfly.tieba.post.R;
/activities\NewIntroActivity.java:10:import com.huanchengfly.tieba.post.fragments.intro.CustomSettingsFragment;
/activities\NewIntroActivity.java:11:import com.huanchengfly.tieba.post.fragments.intro.ExploreFragment;
/activities\NewIntroActivity.java:12:import com.huanchengfly.tieba.post.fragments.intro.HabitSettingsFragment;
/activities\NewIntroActivity.java:13:import com.huanchengfly.tieba.post.fragments.intro.OtherSettingsFragment;
/activities\NewIntroActivity.java:14:import com.huanchengfly.tieba.post.fragments.intro.PermissionFragment;
/activities\NewIntroActivity.java:15:import com.huanchengfly.tieba.post.utils.AccountUtil;
/activities\NewIntroActivity.java:16:import com.huanchengfly.tieba.post.utils.SharedPreferencesUtil;
/activities\NewIntroActivity.java:18:public class NewIntroActivity extends BaseIntroActivity {
/activities\NewIntroActivity.java:19:    @Override
/activities\NewIntroActivity.java:20:    protected int getColor() {
/activities\NewIntroActivity.java:21:        return ThemeUtils.getColorByAttr(this, R.attr.colorAccent);
/activities\NewIntroActivity.java:22:    }
/activities\NewIntroActivity.java:24:    @Override
/activities\NewIntroActivity.java:25:    protected void onCreateIntro() {
/activities\NewIntroActivity.java:26:        getAdapter().addFragment(new AppIntroFragment.Builder(this)
/activities\NewIntroActivity.java:27:                .setIconRes(R.drawable.ic_splash)
/activities\NewIntroActivity.java:28:                .setTitle(getString(R.string.title_welcome))
/activities\NewIntroActivity.java:29:                .setSubtitle(getString(R.string.subtitle_welcome))
/activities\NewIntroActivity.java:30:                .setTitleTextColor(ThemeUtils.getColorByAttr(this, R.attr.colorText))
/activities\NewIntroActivity.java:31:                .setSubtitleTextColor(ThemeUtils.getColorByAttr(this, R.attr.colorTextSecondary))
/activities\NewIntroActivity.java:32:                .build());
/activities\NewIntroActivity.java:33:        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {
/activities\NewIntroActivity.java:34:            getAdapter().addFragment(new PermissionFragment());
/activities\NewIntroActivity.java:35:        }
/activities\NewIntroActivity.java:36:        getAdapter().addFragment(new HabitSettingsFragment());
/activities\NewIntroActivity.java:37:        getAdapter().addFragment(new CustomSettingsFragment());
/activities\NewIntroActivity.java:38:        getAdapter().addFragment(new OtherSettingsFragment());
/activities\NewIntroActivity.java:39:        getAdapter().addFragment(new ExploreFragment());
/activities\NewIntroActivity.java:40:        getAdapter().addFragment(new AppIntroFragment.Builder(this)
/activities\NewIntroActivity.java:41:                .setIconRes(R.drawable.ic_round_emoji_emotions)
/activities\NewIntroActivity.java:42:                .setTitle(getString(R.string.title_intro_completed))
/activities\NewIntroActivity.java:43:                .setSubtitle(getString(R.string.subtitle_intro_completed))
/activities\NewIntroActivity.java:44:                .setIconColor(ThemeUtils.getColorByAttr(this, R.attr.colorAccent))
/activities\NewIntroActivity.java:45:                .setTitleTextColor(ThemeUtils.getColorByAttr(this, R.attr.colorText))
/activities\NewIntroActivity.java:46:                .setSubtitleTextColor(ThemeUtils.getColorByAttr(this, R.attr.colorTextSecondary))
/activities\NewIntroActivity.java:47:                .build());
/activities\NewIntroActivity.java:48:    }
/activities\NewIntroActivity.java:50:    @Override
/activities\NewIntroActivity.java:51:    protected void onFinish() {
/activities\NewIntroActivity.java:52:        SharedPreferencesUtil.get(this, SharedPreferencesUtil.SP_APP_DATA)
/activities\NewIntroActivity.java:53:                .edit()
/activities\NewIntroActivity.java:54:                .putBoolean("first", false)
/activities\NewIntroActivity.java:55:                .apply();
/activities\NewIntroActivity.java:56:        if (!AccountUtil.isLoggedIn(this)) {
/activities\NewIntroActivity.java:57:            startActivity(new Intent(this, LoginActivity.class));
/activities\NewIntroActivity.java:58:        }
/activities\NewIntroActivity.java:59:    }
/activities\NewIntroActivity.java:60:}
/activities\OKSignActivity.java:1:package com.huanchengfly.tieba.post.activities;
/activities\OKSignActivity.java:3:import android.os.Bundle;
/activities\OKSignActivity.java:5:import com.huanchengfly.tieba.post.utils.TiebaUtil;
/activities\OKSignActivity.java:7:import me.imid.swipebacklayout.lib.app.SwipeBackActivity;
/activities\OKSignActivity.java:9:public class OKSignActivity extends SwipeBackActivity {
/activities\OKSignActivity.java:11:    @Override
/activities\OKSignActivity.java:12:    protected void onCreate(Bundle savedInstanceState) {
/activities\OKSignActivity.java:13:        super.onCreate(savedInstanceState);
/activities\OKSignActivity.java:14:        TiebaUtil.startSign(this);
/activities\OKSignActivity.java:15:        finish();
/activities\OKSignActivity.java:16:    }
/activities\OKSignActivity.java:17:}
/activities\ReplyActivity.java:1:package com.huanchengfly.tieba.post.activities;
/activities\ReplyActivity.java:3:import android.annotation.SuppressLint;
/activities\ReplyActivity.java:4:import android.content.Intent;
/activities\ReplyActivity.java:5:import android.graphics.Color;
/activities\ReplyActivity.java:6:import android.net.Uri;
/activities\ReplyActivity.java:7:import android.os.Bundle;
/activities\ReplyActivity.java:8:import android.text.Editable;
/activities\ReplyActivity.java:9:import android.text.TextUtils;
/activities\ReplyActivity.java:10:import android.util.Log;
/activities\ReplyActivity.java:11:import android.view.Menu;
/activities\ReplyActivity.java:12:import android.view.MenuItem;
/activities\ReplyActivity.java:13:import android.view.View;
/activities\ReplyActivity.java:14:import android.view.ViewGroup;
/activities\ReplyActivity.java:15:import android.webkit.WebView;
/activities\ReplyActivity.java:16:import android.widget.FrameLayout;
/activities\ReplyActivity.java:17:import android.widget.GridView;
/activities\ReplyActivity.java:18:import android.widget.RelativeLayout;
/activities\ReplyActivity.java:19:import android.widget.Toast;
/activities\ReplyActivity.java:21:import androidx.annotation.NonNull;
/activities\ReplyActivity.java:22:import androidx.appcompat.widget.Toolbar;
/activities\ReplyActivity.java:23:import androidx.recyclerview.widget.ItemTouchHelper;
/activities\ReplyActivity.java:24:import androidx.recyclerview.widget.LinearLayoutManager;
/activities\ReplyActivity.java:25:import androidx.recyclerview.widget.RecyclerView;
/activities\ReplyActivity.java:26:import androidx.viewpager.widget.ViewPager;
/activities\ReplyActivity.java:28:import com.google.android.material.tabs.TabLayout;
/activities\ReplyActivity.java:29:import com.huanchengfly.tieba.post.R;
/activities\ReplyActivity.java:30:import com.huanchengfly.tieba.post.adapters.InsertPhotoAdapter;
/activities\ReplyActivity.java:31:import com.huanchengfly.tieba.post.adapters.TabViewPagerAdapter;
/activities\ReplyActivity.java:32:import com.huanchengfly.tieba.post.adapters.TextWatcherAdapter;
/activities\ReplyActivity.java:33:import com.huanchengfly.tieba.post.api.TiebaApi;
/activities\ReplyActivity.java:34:import com.huanchengfly.tieba.post.api.interfaces.CommonCallback;
/activities\ReplyActivity.java:35:import com.huanchengfly.tieba.post.api.models.WebReplyResultBean;
/activities\ReplyActivity.java:36:import com.huanchengfly.tieba.post.api.retrofit.exception.TiebaException;
/activities\ReplyActivity.java:37:import com.huanchengfly.tieba.post.components.EmotionViewFactory;
/activities\ReplyActivity.java:38:import com.huanchengfly.tieba.post.components.dialogs.LoadingDialog;
/activities\ReplyActivity.java:39:import com.huanchengfly.tieba.post.interfaces.ReplyContentCallback;
/activities\ReplyActivity.java:40:import com.huanchengfly.tieba.post.interfaces.UploadCallback;
/activities\ReplyActivity.java:41:import com.huanchengfly.tieba.post.models.PhotoInfoBean;
/activities\ReplyActivity.java:42:import com.huanchengfly.tieba.post.models.ReplyInfoBean;
/activities\ReplyActivity.java:43:import com.huanchengfly.tieba.post.models.database.Draft;
/activities\ReplyActivity.java:44:import com.huanchengfly.tieba.post.utils.AssetUtil;
/activities\ReplyActivity.java:45:import com.huanchengfly.tieba.post.utils.EmotionUtil;
/activities\ReplyActivity.java:46:import com.huanchengfly.tieba.post.utils.GsonUtil;
/activities\ReplyActivity.java:47:import com.huanchengfly.tieba.post.utils.StringUtil;
/activities\ReplyActivity.java:48:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/activities\ReplyActivity.java:49:import com.huanchengfly.tieba.post.utils.UploadHelper;
/activities\ReplyActivity.java:50:import com.huanchengfly.tieba.post.utils.Util;
/activities\ReplyActivity.java:51:import com.huanchengfly.tieba.post.widgets.edittext.widget.UndoableEditText;
/activities\ReplyActivity.java:52:import com.huanchengfly.tieba.post.widgets.theme.TintConstraintLayout;
/activities\ReplyActivity.java:53:import com.huanchengfly.tieba.post.widgets.theme.TintImageView;
/activities\ReplyActivity.java:54:import com.zhihu.matisse.Matisse;
/activities\ReplyActivity.java:56:import org.jetbrains.annotations.NotNull;
/activities\ReplyActivity.java:57:import org.litepal.LitePal;
/activities\ReplyActivity.java:59:import java.util.List;
/activities\ReplyActivity.java:60:import java.util.Objects;
/activities\ReplyActivity.java:62:import butterknife.BindView;
/activities\ReplyActivity.java:63:import cn.dreamtobe.kpswitch.util.KPSwitchConflictUtil;
/activities\ReplyActivity.java:64:import cn.dreamtobe.kpswitch.util.KeyboardUtil;
/activities\ReplyActivity.java:65:import cn.dreamtobe.kpswitch.widget.KPSwitchFSPanelFrameLayout;
/activities\ReplyActivity.java:66:import retrofit2.Call;
/activities\ReplyActivity.java:67:import retrofit2.Callback;
/activities\ReplyActivity.java:68:import retrofit2.Response;
/activities\ReplyActivity.java:70:public class ReplyActivity extends BaseActivity implements View.OnClickListener {
/activities\ReplyActivity.java:71:    public static final int REQUEST_CODE_CHOOSE = 2;
/activities\ReplyActivity.java:73:    public static final String TAG = "ReplyActivity";
/activities\ReplyActivity.java:75:    @BindView(R.id.activity_reply_edit_text)
/activities\ReplyActivity.java:76:    UndoableEditText editText;
/activities\ReplyActivity.java:77:    @BindView(R.id.activity_reply_panel_root)
/activities\ReplyActivity.java:78:    KPSwitchFSPanelFrameLayout panelFrameLayout;
/activities\ReplyActivity.java:79:    @BindView(R.id.activity_reply_emotion)
/activities\ReplyActivity.java:80:    RelativeLayout emotionView;
/activities\ReplyActivity.java:81:    @BindView(R.id.activity_reply_insert_photo)
/activities\ReplyActivity.java:82:    FrameLayout insertImageView;
/activities\ReplyActivity.java:83:    @BindView(R.id.activity_reply_edit_emotion)
/activities\ReplyActivity.java:84:    TintImageView emotionBtn;
/activities\ReplyActivity.java:85:    @BindView(R.id.activity_reply_edit_insert_photo)
/activities\ReplyActivity.java:86:    TintImageView insertImageBtn;
/activities\ReplyActivity.java:87:    @BindView(R.id.activity_reply_emotion_view_pager)
/activities\ReplyActivity.java:88:    ViewPager emotionViewPager;
/activities\ReplyActivity.java:89:    @BindView(R.id.activity_reply_insert_photo_view)
/activities\ReplyActivity.java:90:    RecyclerView insertView;
/activities\ReplyActivity.java:91:    @BindView(R.id.webview_container)
/activities\ReplyActivity.java:92:    FrameLayout webViewContainer;
/activities\ReplyActivity.java:93:    @BindView(R.id.toolbar)
/activities\ReplyActivity.java:94:    Toolbar toolbar;
/activities\ReplyActivity.java:96:    private ReplyInfoBean replyInfoBean;
/activities\ReplyActivity.java:97:    private LoadingDialog loadingDialog;
/activities\ReplyActivity.java:98:    private InsertPhotoAdapter insertPhotoAdapter;
/activities\ReplyActivity.java:99:    private Callback<WebReplyResultBean> mCallback;
/activities\ReplyActivity.java:100:    private MenuItem sendItem;
/activities\ReplyActivity.java:101:    private boolean replySuccess;
/activities\ReplyActivity.java:102:    private String content;
/activities\ReplyActivity.java:104:    private WebView mWebView;
/activities\ReplyActivity.java:106:    @Override
/activities\ReplyActivity.java:107:    public boolean isNeedImmersionBar() {
/activities\ReplyActivity.java:108:        return false;
/activities\ReplyActivity.java:109:    }
/activities\ReplyActivity.java:111:    @Override
/activities\ReplyActivity.java:112:    protected int getLayoutId() {
/activities\ReplyActivity.java:113:        return R.layout.activity_reply;
/activities\ReplyActivity.java:114:    }
/activities\ReplyActivity.java:116:    @Override
/activities\ReplyActivity.java:117:    protected void onCreate(Bundle savedInstanceState) {
/activities\ReplyActivity.java:118:        super.onCreate(savedInstanceState);
/activities\ReplyActivity.java:119:        setSwipeBackEnable(false);
/activities\ReplyActivity.java:120:        if (ThemeUtil.THEME_TRANSLUCENT.equals(ThemeUtil.getTheme(this))) {
/activities\ReplyActivity.java:121:            TintConstraintLayout constraintLayout = (TintConstraintLayout) findViewById(R.id.activity_reply_layout);
/activities\ReplyActivity.java:122:            constraintLayout.setBackgroundTintResId(0);
/activities\ReplyActivity.java:123:            ThemeUtil.setTranslucentBackground(constraintLayout);
/activities\ReplyActivity.java:124:        }
/activities\ReplyActivity.java:125:        Util.setStatusBarTransparent(this);
/activities\ReplyActivity.java:126:        getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
/activities\ReplyActivity.java:127:        getWindow().getDecorView().setBackgroundColor(getResources().getColor(R.color.transparent));
/activities\ReplyActivity.java:128:        getWindow().setBackgroundDrawableResource(R.drawable.bg_trans);
/activities\ReplyActivity.java:129:        initData();
/activities\ReplyActivity.java:130:        initView();
/activities\ReplyActivity.java:131:    }
/activities\ReplyActivity.java:133:    private void destroyWebView() {
/activities\ReplyActivity.java:134:        if (mWebView != null) {
/activities\ReplyActivity.java:135:            ((ViewGroup) mWebView.getParent()).removeView(mWebView);
/activities\ReplyActivity.java:136:            mWebView.removeAllViews();
/activities\ReplyActivity.java:137:            mWebView.destroy();
/activities\ReplyActivity.java:138:            mWebView = null;
/activities\ReplyActivity.java:139:        }
/activities\ReplyActivity.java:140:    }
/activities\ReplyActivity.java:142:    @Override
/activities\ReplyActivity.java:143:    protected void onDestroy() {
/activities\ReplyActivity.java:144:        if (mWebView != null) {
/activities\ReplyActivity.java:145:            destroyWebView();
/activities\ReplyActivity.java:146:        }
/activities\ReplyActivity.java:147:        super.onDestroy();
/activities\ReplyActivity.java:148:    }
/activities\ReplyActivity.java:150:    @Override
/activities\ReplyActivity.java:151:    protected void onPause() {
/activities\ReplyActivity.java:152:        super.onPause();
/activities\ReplyActivity.java:153:        panelFrameLayout.recordKeyboardStatus(getWindow());
/activities\ReplyActivity.java:154:        if (replyInfoBean != null && !replySuccess) {
/activities\ReplyActivity.java:155:            new Draft(replyInfoBean.hash(), editText.getText() == null ? "" : editText.getText().toString())
/activities\ReplyActivity.java:156:                    .saveOrUpdate("hash = ?", replyInfoBean.hash());
/activities\ReplyActivity.java:157:        } else if (replySuccess) {
/activities\ReplyActivity.java:158:            Draft draft = LitePal.where("hash = ?", replyInfoBean.hash())
/activities\ReplyActivity.java:159:                    .findFirst(Draft.class);
/activities\ReplyActivity.java:160:            if (draft != null) {
/activities\ReplyActivity.java:161:                draft.delete();
/activities\ReplyActivity.java:162:            }
/activities\ReplyActivity.java:163:        }
/activities\ReplyActivity.java:164:    }
/activities\ReplyActivity.java:166:    private void initData() {
/activities\ReplyActivity.java:167:        Intent intent = getIntent();
/activities\ReplyActivity.java:168:        String jsonData = intent.getStringExtra("data");
/activities\ReplyActivity.java:169:        replyInfoBean = GsonUtil.getGson().fromJson(jsonData, ReplyInfoBean.class);
/activities\ReplyActivity.java:170:        Draft draft = LitePal.where("hash = ?", replyInfoBean.hash())
/activities\ReplyActivity.java:171:                .findFirst(Draft.class);
/activities\ReplyActivity.java:172:        if (draft != null) {
/activities\ReplyActivity.java:173:            content = draft.getContent();
/activities\ReplyActivity.java:174:        }
/activities\ReplyActivity.java:175:    }
/activities\ReplyActivity.java:177:    protected void initView() {
/activities\ReplyActivity.java:178:        setSupportActionBar(toolbar);
/activities\ReplyActivity.java:179:        Objects.requireNonNull(getSupportActionBar()).setDisplayHomeAsUpEnabled(true);
/activities\ReplyActivity.java:180:        ItemTouchHelper mItemTouchHelper = new ItemTouchHelper(new ItemTouchHelper.Callback() {
/activities\ReplyActivity.java:181:            @Override
/activities\ReplyActivity.java:182:            public void clearView(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder) {
/activities\ReplyActivity.java:183:                super.clearView(recyclerView, viewHolder);
/activities\ReplyActivity.java:184:                viewHolder.itemView.setBackgroundColor(Color.TRANSPARENT);
/activities\ReplyActivity.java:185:            }
/activities\ReplyActivity.java:187:            @Override
/activities\ReplyActivity.java:188:            public void onSelectedChanged(RecyclerView.ViewHolder viewHolder, int actionState) {
/activities\ReplyActivity.java:189:                super.onSelectedChanged(viewHolder, actionState);
/activities\ReplyActivity.java:190:                if (actionState == ItemTouchHelper.ACTION_STATE_DRAG) {
/activities\ReplyActivity.java:191:                    viewHolder.itemView.setBackgroundColor(Util.getColorByAttr(ReplyActivity.this, R.attr.colorControlHighlight, R.color.transparent));
/activities\ReplyActivity.java:192:                }
/activities\ReplyActivity.java:193:            }
/activities\ReplyActivity.java:195:            @Override
/activities\ReplyActivity.java:196:            public int getMovementFlags(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder) {
/activities\ReplyActivity.java:197:                int dragFlags = 0, swiped = 0;
/activities\ReplyActivity.java:198:                if (viewHolder.getAdapterPosition() < insertPhotoAdapter.getItemCount() - 1) {
/activities\ReplyActivity.java:199:                    swiped = ItemTouchHelper.UP | ItemTouchHelper.DOWN;
/activities\ReplyActivity.java:200:                    if (viewHolder.getAdapterPosition() < insertPhotoAdapter.getItemCount() - 2 && viewHolder.getAdapterPosition() > 0) {
/activities\ReplyActivity.java:201:                        dragFlags = ItemTouchHelper.RIGHT | ItemTouchHelper.LEFT;
/activities\ReplyActivity.java:202:                    } else if (viewHolder.getAdapterPosition() == insertPhotoAdapter.getItemCount() - 2) {
/activities\ReplyActivity.java:203:                        dragFlags = ItemTouchHelper.LEFT;
/activities\ReplyActivity.java:204:                    } else if (viewHolder.getAdapterPosition() == 0) {
/activities\ReplyActivity.java:205:                        dragFlags = ItemTouchHelper.RIGHT;
/activities\ReplyActivity.java:206:                    }
/activities\ReplyActivity.java:207:                }
/activities\ReplyActivity.java:208:                return makeMovementFlags(dragFlags, swiped);
/activities\ReplyActivity.java:209:            }
/activities\ReplyActivity.java:211:            @Override
/activities\ReplyActivity.java:212:            public boolean onMove(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder, @NonNull RecyclerView.ViewHolder target) {
/activities\ReplyActivity.java:213:                int oldPosition = viewHolder.getAdapterPosition();
/activities\ReplyActivity.java:214:                int newPosition = target.getAdapterPosition();
/activities\ReplyActivity.java:215:                if (newPosition < insertPhotoAdapter.getItemCount() - 1) {
/activities\ReplyActivity.java:216:                    if (oldPosition < newPosition) {
/activities\ReplyActivity.java:217:                        for (int i = oldPosition; i < newPosition; i++) {
/activities\ReplyActivity.java:218:                            insertPhotoAdapter.swap(i, i + 1);
/activities\ReplyActivity.java:219:                        }
/activities\ReplyActivity.java:220:                    } else {
/activities\ReplyActivity.java:221:                        for (int i = oldPosition; i > newPosition; i--) {
/activities\ReplyActivity.java:222:                            insertPhotoAdapter.swap(i, i - 1);
/activities\ReplyActivity.java:223:                        }
/activities\ReplyActivity.java:224:                    }
/activities\ReplyActivity.java:225:                    insertPhotoAdapter.notifyItemMoved(oldPosition, newPosition);
/activities\ReplyActivity.java:226:                    return true;
/activities\ReplyActivity.java:227:                }
/activities\ReplyActivity.java:228:                return false;
/activities\ReplyActivity.java:229:            }
/activities\ReplyActivity.java:231:            @Override
/activities\ReplyActivity.java:232:            public void onSwiped(@NonNull RecyclerView.ViewHolder viewHolder, int direction) {
/activities\ReplyActivity.java:233:                int position = viewHolder.getAdapterPosition();
/activities\ReplyActivity.java:234:                insertPhotoAdapter.remove(position);
/activities\ReplyActivity.java:235:            }
/activities\ReplyActivity.java:236:        });
/activities\ReplyActivity.java:237:        mItemTouchHelper.attachToRecyclerView(insertView);
/activities\ReplyActivity.java:238:        findViewById(R.id.activity_reply_root).setOnClickListener(this);
/activities\ReplyActivity.java:239:        findViewById(R.id.activity_reply_layout).setOnClickListener(this);
/activities\ReplyActivity.java:240:        toolbar.setNavigationIcon(R.drawable.ic_reply_toolbar_round_close);
/activities\ReplyActivity.java:241:        if (replyInfoBean.getPid() == null && replyInfoBean.getFloorNum() == null) {
/activities\ReplyActivity.java:242:            insertImageBtn.setVisibility(View.VISIBLE);
/activities\ReplyActivity.java:243:        } else {
/activities\ReplyActivity.java:244:            insertImageBtn.setVisibility(View.INVISIBLE);
/activities\ReplyActivity.java:245:        }
/activities\ReplyActivity.java:246:        insertPhotoAdapter = new InsertPhotoAdapter(this);
/activities\ReplyActivity.java:247:        insertView.setAdapter(insertPhotoAdapter);
/activities\ReplyActivity.java:248:        LinearLayoutManager layoutManager = new LinearLayoutManager(this);
/activities\ReplyActivity.java:249:        layoutManager.setOrientation(RecyclerView.HORIZONTAL);
/activities\ReplyActivity.java:250:        insertView.setLayoutManager(layoutManager);
/activities\ReplyActivity.java:251:        if (replyInfoBean.getReplyUser() != null) {
/activities\ReplyActivity.java:252:            editText.setHint(getString(R.string.hint_reply, replyInfoBean.getReplyUser()));
/activities\ReplyActivity.java:253:        }
/activities\ReplyActivity.java:254:        TabLayout tabLayout = (TabLayout) findViewById(R.id.activity_reply_emotion_tab);
/activities\ReplyActivity.java:255:        TabViewPagerAdapter emotionViewPagerAdapter = new TabViewPagerAdapter();
/activities\ReplyActivity.java:256:        GridView classicEmotionGridView = new GridView(this);
/activities\ReplyActivity.java:257:        GridView emojiEmotionGridView = new GridView(this);
/activities\ReplyActivity.java:258:        EmotionViewFactory.initGridView(this, EmotionUtil.EMOTION_CLASSIC_WEB_TYPE, classicEmotionGridView);
/activities\ReplyActivity.java:259:        EmotionViewFactory.initGridView(this, EmotionUtil.EMOTION_EMOJI_WEB_TYPE, emojiEmotionGridView);
/activities\ReplyActivity.java:260:        emotionViewPagerAdapter.addView(classicEmotionGridView, getString(R.string.title_emotion_classic));
/activities\ReplyActivity.java:261:        emotionViewPagerAdapter.addView(emojiEmotionGridView, getString(R.string.title_emotion_emoji));
/activities\ReplyActivity.java:262:        emotionViewPager.setAdapter(emotionViewPagerAdapter);
/activities\ReplyActivity.java:263:        tabLayout.setupWithViewPager(emotionViewPager);
/activities\ReplyActivity.java:264:        if (content != null) {
/activities\ReplyActivity.java:265:            editText.getMgr().disable();
/activities\ReplyActivity.java:266:            editText.setText(StringUtil.getEmotionContent(EmotionUtil.EMOTION_ALL_WEB_TYPE, editText, content));
/activities\ReplyActivity.java:267:            editText.getMgr().enable();
/activities\ReplyActivity.java:268:        }
/activities\ReplyActivity.java:269:        initListener();
/activities\ReplyActivity.java:270:    }
/activities\ReplyActivity.java:272:    private boolean canSend() {
/activities\ReplyActivity.java:273:        return (!(editText.getText().toString().isEmpty()) |
/activities\ReplyActivity.java:274:                insertPhotoAdapter.getFileList().size() > 0);
/activities\ReplyActivity.java:275:    }
/activities\ReplyActivity.java:277:    private boolean needUpload() {
/activities\ReplyActivity.java:278:        boolean needUpload = false;
/activities\ReplyActivity.java:279:        if (replyInfoBean.isSubFloor()) {
/activities\ReplyActivity.java:280:            return false;
/activities\ReplyActivity.java:281:        }
/activities\ReplyActivity.java:282:        for (PhotoInfoBean photoInfoBean : insertPhotoAdapter.getFileList()) {
/activities\ReplyActivity.java:283:            if (photoInfoBean.getWebUploadPicBean() == null) {
/activities\ReplyActivity.java:284:                needUpload = true;
/activities\ReplyActivity.java:285:                break;
/activities\ReplyActivity.java:286:            }
/activities\ReplyActivity.java:287:        }
/activities\ReplyActivity.java:288:        return needUpload;
/activities\ReplyActivity.java:289:    }
/activities\ReplyActivity.java:291:    private String getReplyContent() {
/activities\ReplyActivity.java:292:        StringBuilder builder = new StringBuilder();
/activities\ReplyActivity.java:293:        if (replyInfoBean.isSubFloor() && (replyInfoBean.getReplyUser() != null)) {
/activities\ReplyActivity.java:294:            builder.append("回复 ")
/activities\ReplyActivity.java:295:                    .append(replyInfoBean.getReplyUser())
/activities\ReplyActivity.java:296:                    .append(" :");
/activities\ReplyActivity.java:297:        }
/activities\ReplyActivity.java:298:        builder.append(editText.getText());
/activities\ReplyActivity.java:299:        if (getAppPreferences().getLittleTail() != null) {
/activities\ReplyActivity.java:300:            builder.append("\n")
/activities\ReplyActivity.java:301:                    .append(getAppPreferences().getLittleTail());
/activities\ReplyActivity.java:302:        }
/activities\ReplyActivity.java:303:        return builder.toString();
/activities\ReplyActivity.java:304:    }
/activities\ReplyActivity.java:306:    private void getImageInfo(ReplyContentCallback callback) {
/activities\ReplyActivity.java:307:        StringBuilder builder = new StringBuilder();
/activities\ReplyActivity.java:308:        if (hasPhoto()) {
/activities\ReplyActivity.java:309:            if (!needUpload()) {
/activities\ReplyActivity.java:310:                for (PhotoInfoBean photoInfoBean : insertPhotoAdapter.getFileList()) {
/activities\ReplyActivity.java:311:                    if (photoInfoBean.getWebUploadPicBean() != null) {
/activities\ReplyActivity.java:312:                        builder.append(photoInfoBean.getWebUploadPicBean().getImageInfo());
/activities\ReplyActivity.java:313:                        if ((insertPhotoAdapter.getFileList().size() - 1) > insertPhotoAdapter.getFileList().indexOf(photoInfoBean)) {
/activities\ReplyActivity.java:314:                            builder.append("|");
/activities\ReplyActivity.java:315:                        }
/activities\ReplyActivity.java:316:                    }
/activities\ReplyActivity.java:317:                }
/activities\ReplyActivity.java:318:                callback.onSuccess(builder.toString());
/activities\ReplyActivity.java:319:                return;
/activities\ReplyActivity.java:320:            }
/activities\ReplyActivity.java:321:            UploadHelper.with(this)
/activities\ReplyActivity.java:322:                    .setFileList(insertPhotoAdapter.getFileList())
/activities\ReplyActivity.java:323:                    .setCallback(new UploadCallback() {
/activities\ReplyActivity.java:324:                        @Override
/activities\ReplyActivity.java:325:                        public void onSuccess(List<PhotoInfoBean> photoInfoBeans) {
/activities\ReplyActivity.java:326:                            for (PhotoInfoBean photoInfoBean : photoInfoBeans) {
/activities\ReplyActivity.java:327:                                if (photoInfoBean.getWebUploadPicBean() != null) {
/activities\ReplyActivity.java:328:                                    builder.append(photoInfoBean.getWebUploadPicBean().getImageInfo());
/activities\ReplyActivity.java:329:                                    if ((photoInfoBeans.size() - 1) > photoInfoBeans.indexOf(photoInfoBean)) {
/activities\ReplyActivity.java:330:                                        builder.append("|");
/activities\ReplyActivity.java:331:                                    }
/activities\ReplyActivity.java:332:                                }
/activities\ReplyActivity.java:333:                            }
/activities\ReplyActivity.java:334:                            Log.i(TAG, "onSuccess: " + builder.toString());
/activities\ReplyActivity.java:335:                            callback.onSuccess(builder.toString());
/activities\ReplyActivity.java:336:                        }
/activities\ReplyActivity.java:338:                        @Override
/activities\ReplyActivity.java:339:                        public void onStart(int total) {
/activities\ReplyActivity.java:340:                            callback.onStart(total);
/activities\ReplyActivity.java:341:                        }
/activities\ReplyActivity.java:343:                        @Override
/activities\ReplyActivity.java:344:                        public void onProgress(int current, int total) {
/activities\ReplyActivity.java:345:                            callback.onProgress(current, total);
/activities\ReplyActivity.java:346:                        }
/activities\ReplyActivity.java:348:                        @Override
/activities\ReplyActivity.java:349:                        public void onFailure(String error) {
/activities\ReplyActivity.java:350:                            callback.onFailure(error);
/activities\ReplyActivity.java:351:                        }
/activities\ReplyActivity.java:352:                    })
/activities\ReplyActivity.java:353:                    .start();
/activities\ReplyActivity.java:354:            return;
/activities\ReplyActivity.java:355:        }
/activities\ReplyActivity.java:356:        callback.onSuccess("");
/activities\ReplyActivity.java:357:    }
/activities\ReplyActivity.java:359:    private boolean hasPhoto() {
/activities\ReplyActivity.java:360:        return insertPhotoAdapter.getFileList() != null && insertPhotoAdapter.getFileList().size() > 0;
/activities\ReplyActivity.java:361:    }
/activities\ReplyActivity.java:363:    private void setEnabled(TintImageView imageButton, boolean enable) {
/activities\ReplyActivity.java:364:        imageButton.setClickable(enable);
/activities\ReplyActivity.java:365:        imageButton.setEnabled(enable);
/activities\ReplyActivity.java:366:    }
/activities\ReplyActivity.java:368:    private void initListener() {
/activities\ReplyActivity.java:369:        TintImageView undo = (TintImageView) findViewById(R.id.activity_reply_edit_undo);
/activities\ReplyActivity.java:370:        TintImageView redo = (TintImageView) findViewById(R.id.activity_reply_edit_redo);
/activities\ReplyActivity.java:371:        TintImageView clear = (TintImageView) findViewById(R.id.activity_reply_edit_clear);
/activities\ReplyActivity.java:372:        undo.setOnClickListener(this);
/activities\ReplyActivity.java:373:        setEnabled(undo, false);
/activities\ReplyActivity.java:374:        redo.setOnClickListener(this);
/activities\ReplyActivity.java:375:        setEnabled(redo, false);
/activities\ReplyActivity.java:376:        clear.setOnClickListener(this);
/activities\ReplyActivity.java:377:        setEnabled(clear, false);
/activities\ReplyActivity.java:378:        editText.addTextChangedListener(new TextWatcherAdapter() {
/activities\ReplyActivity.java:379:            @Override
/activities\ReplyActivity.java:380:            public void afterTextChanged(Editable editable) {
/activities\ReplyActivity.java:381:                super.afterTextChanged(editable);
/activities\ReplyActivity.java:382:                setEnabled(undo, editText.canUndo());
/activities\ReplyActivity.java:383:                setEnabled(redo, editText.canRedo());
/activities\ReplyActivity.java:384:                setEnabled(clear, !TextUtils.isEmpty(editable));
/activities\ReplyActivity.java:385:                if (sendItem != null) sendItem.setEnabled(canSend());
/activities\ReplyActivity.java:386:            }
/activities\ReplyActivity.java:387:        });
/activities\ReplyActivity.java:388:        KeyboardUtil.attach(this, panelFrameLayout);
/activities\ReplyActivity.java:389:        KPSwitchConflictUtil.attach(
/activities\ReplyActivity.java:390:                panelFrameLayout,
/activities\ReplyActivity.java:391:                editText,
/activities\ReplyActivity.java:392:                new KPSwitchConflictUtil.SubPanelAndTrigger(emotionView, emotionBtn),
/activities\ReplyActivity.java:393:                new KPSwitchConflictUtil.SubPanelAndTrigger(insertImageView, insertImageBtn)
/activities\ReplyActivity.java:394:        );
/activities\ReplyActivity.java:395:        EmotionUtil.GlobalOnItemClickManagerUtil.getInstance(this).attachToEditText(editText);
/activities\ReplyActivity.java:396:    }
/activities\ReplyActivity.java:398:    @Override
/activities\ReplyActivity.java:399:    public boolean onCreateOptionsMenu(Menu menu) {
/activities\ReplyActivity.java:400:        getMenuInflater().inflate(R.menu.menu_reply_toolbar, menu);
/activities\ReplyActivity.java:401:        sendItem = menu.findItem(R.id.menu_send);
/activities\ReplyActivity.java:402:        sendItem.setEnabled(false);
/activities\ReplyActivity.java:403:        return super.onCreateOptionsMenu(menu);
/activities\ReplyActivity.java:404:    }
/activities\ReplyActivity.java:406:    @Override
/activities\ReplyActivity.java:407:    public void finish() {
/activities\ReplyActivity.java:408:        overridePendingTransition(R.anim.in_bottom, R.anim.out_bottom);
/activities\ReplyActivity.java:409:        super.finish();
/activities\ReplyActivity.java:410:    }
/activities\ReplyActivity.java:412:    @Override
/activities\ReplyActivity.java:413:    public boolean onOptionsItemSelected(MenuItem item) {
/activities\ReplyActivity.java:414:        if (item.getItemId() == R.id.menu_send) {
/activities\ReplyActivity.java:415:            mCallback = new Callback<WebReplyResultBean>() {
/activities\ReplyActivity.java:416:                @Override
/activities\ReplyActivity.java:417:                public void onResponse(@NotNull Call<WebReplyResultBean> call, @NotNull Response<WebReplyResultBean> response) {
/activities\ReplyActivity.java:418:                    WebReplyResultBean data = response.body();
/activities\ReplyActivity.java:419:                    if (loadingDialog != null) loadingDialog.cancel();
/activities\ReplyActivity.java:420:                    Toast.makeText(ReplyActivity.this, R.string.toast_reply_success, Toast.LENGTH_SHORT).show();
/activities\ReplyActivity.java:421:                    sendBroadcast(new Intent()
/activities\ReplyActivity.java:422:                            .setAction(ThreadActivity.ACTION_REPLY_SUCCESS)
/activities\ReplyActivity.java:423:                            .putExtra("pid", replyInfoBean.getPid() != null ? replyInfoBean.getPid() : data.getData().getPid()));
/activities\ReplyActivity.java:424:                    replySuccess = true;
/activities\ReplyActivity.java:425:                    finish();
/activities\ReplyActivity.java:426:                }
/activities\ReplyActivity.java:428:                @Override
/activities\ReplyActivity.java:429:                public void onFailure(@NotNull Call<WebReplyResultBean> call, @NotNull Throwable t) {
/activities\ReplyActivity.java:430:                    if (loadingDialog != null) loadingDialog.cancel();
/activities\ReplyActivity.java:431:                    int code = t instanceof TiebaException ? ((TiebaException) t).getCode() : -1;
/activities\ReplyActivity.java:432:                    Toast.makeText(ReplyActivity.this, getString(R.string.toast_reply_failed, code, t.getMessage()), Toast.LENGTH_SHORT).show();
/activities\ReplyActivity.java:433:                }
/activities\ReplyActivity.java:434:            };
/activities\ReplyActivity.java:435:            realReply();
/activities\ReplyActivity.java:436:        }
/activities\ReplyActivity.java:437:        return super.onOptionsItemSelected(item);
/activities\ReplyActivity.java:438:    }
/activities\ReplyActivity.java:440:    @SuppressLint("SetJavaScriptEnabled")
/activities\ReplyActivity.java:441:    private void getBSK(String tbs, CommonCallback<String> commonCallback) {
/activities\ReplyActivity.java:442:        mWebView = new WebView(this);
/activities\ReplyActivity.java:443:        mWebView.getSettings().setJavaScriptEnabled(true);
/activities\ReplyActivity.java:444:        webViewContainer.addView(mWebView);
/activities\ReplyActivity.java:445:        mWebView.evaluateJavascript(AssetUtil.getStringFromAsset(this, "new_bsk.js"), value -> {
/activities\ReplyActivity.java:446:            mWebView.evaluateJavascript("get_bsk_data(\"" + tbs + "\")", value1 -> {
/activities\ReplyActivity.java:447:                destroyWebView();
/activities\ReplyActivity.java:448:                if (commonCallback != null)
/activities\ReplyActivity.java:449:                    commonCallback.onSuccess(value1.replaceAll("\"", ""));
/activities\ReplyActivity.java:450:            });
/activities\ReplyActivity.java:451:        });
/activities\ReplyActivity.java:452:    }
/activities\ReplyActivity.java:454:    private void realReply(/*String code, String md5*/) {
/activities\ReplyActivity.java:455:        loadingDialog = new LoadingDialog(this);
/activities\ReplyActivity.java:456:        loadingDialog.show();
/activities\ReplyActivity.java:457:        getImageInfo(new ReplyContentCallback() {
/activities\ReplyActivity.java:458:            @Override
/activities\ReplyActivity.java:459:            public void onSuccess(String data) {
/activities\ReplyActivity.java:460:                loadingDialog.setTipText("正在提交...");
/activities\ReplyActivity.java:461:                getBSK(replyInfoBean.getTbs(), new CommonCallback<String>() {
/activities\ReplyActivity.java:462:                    @Override
/activities\ReplyActivity.java:463:                    public void onSuccess(String bsk) {
/activities\ReplyActivity.java:464:                        if (replyInfoBean.getPid() == null && replyInfoBean.getFloorNum() == null) {
/activities\ReplyActivity.java:465:                            TiebaApi.getInstance().webReply(
/activities\ReplyActivity.java:466:                                    replyInfoBean.getForumId(),
/activities\ReplyActivity.java:467:                                    replyInfoBean.getForumName(),
/activities\ReplyActivity.java:468:                                    replyInfoBean.getThreadId(),
/activities\ReplyActivity.java:469:                                    replyInfoBean.getTbs(),
/activities\ReplyActivity.java:470:                                    getReplyContent(),
/activities\ReplyActivity.java:471:                                    data,
/activities\ReplyActivity.java:472:                                    replyInfoBean.getNickName(),
/activities\ReplyActivity.java:473:                                    replyInfoBean.getPn(),
/activities\ReplyActivity.java:474:                                    bsk
/activities\ReplyActivity.java:475:                            ).enqueue(mCallback);
/activities\ReplyActivity.java:476:                        } else {
/activities\ReplyActivity.java:477:                            if (replyInfoBean.isSubFloor() && replyInfoBean.getSpid() != null) {
/activities\ReplyActivity.java:478:                                TiebaApi.getInstance().webReply(replyInfoBean.getForumId(), replyInfoBean.getForumName(),
/activities\ReplyActivity.java:479:                                        replyInfoBean.getThreadId(),
/activities\ReplyActivity.java:480:                                        replyInfoBean.getTbs(),
/activities\ReplyActivity.java:481:                                        getReplyContent(),
/activities\ReplyActivity.java:482:                                        data,
/activities\ReplyActivity.java:483:                                        replyInfoBean.getNickName(),
/activities\ReplyActivity.java:484:                                        replyInfoBean.getPid(),
/activities\ReplyActivity.java:485:                                        replyInfoBean.getSpid(),
/activities\ReplyActivity.java:486:                                        replyInfoBean.getFloorNum(),
/activities\ReplyActivity.java:487:                                        replyInfoBean.getPn(),
/activities\ReplyActivity.java:488:                                        bsk).enqueue(mCallback);
/activities\ReplyActivity.java:489:                            } else {
/activities\ReplyActivity.java:490:                                TiebaApi.getInstance().webReply(replyInfoBean.getForumId(), replyInfoBean.getForumName(),
/activities\ReplyActivity.java:491:                                        replyInfoBean.getThreadId(),
/activities\ReplyActivity.java:492:                                        replyInfoBean.getTbs(),
/activities\ReplyActivity.java:493:                                        getReplyContent(),
/activities\ReplyActivity.java:494:                                        data,
/activities\ReplyActivity.java:495:                                        replyInfoBean.getNickName(),
/activities\ReplyActivity.java:496:                                        replyInfoBean.getPid(),
/activities\ReplyActivity.java:497:                                        replyInfoBean.getFloorNum(),
/activities\ReplyActivity.java:498:                                        replyInfoBean.getPn(),
/activities\ReplyActivity.java:499:                                        bsk).enqueue(mCallback);
/activities\ReplyActivity.java:500:                            }
/activities\ReplyActivity.java:501:                        }
/activities\ReplyActivity.java:502:                    }
/activities\ReplyActivity.java:504:                    @Override
/activities\ReplyActivity.java:505:                    public void onFailure(int code, String error) {
/activities\ReplyActivity.java:506:                    }
/activities\ReplyActivity.java:507:                });
/activities\ReplyActivity.java:508:            }
/activities\ReplyActivity.java:510:            @Override
/activities\ReplyActivity.java:511:            public void onStart(int total) {
/activities\ReplyActivity.java:512:                loadingDialog.setTipText("正在上传图片...(0/" + total + ")");
/activities\ReplyActivity.java:513:            }
/activities\ReplyActivity.java:515:            @Override
/activities\ReplyActivity.java:516:            public void onProgress(int current, int total) {
/activities\ReplyActivity.java:517:                loadingDialog.setTipText("正在上传图片...(" + current + "/" + total + ")");
/activities\ReplyActivity.java:518:            }
/activities\ReplyActivity.java:520:            @Override
/activities\ReplyActivity.java:521:            public void onFailure(String error) {
/activities\ReplyActivity.java:522:                loadingDialog.cancel();
/activities\ReplyActivity.java:523:                Toast.makeText(ReplyActivity.this, error, Toast.LENGTH_SHORT).show();
/activities\ReplyActivity.java:524:            }
/activities\ReplyActivity.java:525:        });
/activities\ReplyActivity.java:526:    }
/activities\ReplyActivity.java:528:    @Override
/activities\ReplyActivity.java:529:    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
/activities\ReplyActivity.java:530:        super.onActivityResult(requestCode, resultCode, data);
/activities\ReplyActivity.java:531:        if (requestCode == REQUEST_CODE_CHOOSE && resultCode == RESULT_OK) {
/activities\ReplyActivity.java:532:            List<Uri> uriList = Matisse.obtainResult(data);
/activities\ReplyActivity.java:533:            List<PhotoInfoBean> photoInfoBeans = insertPhotoAdapter.getFileList();
/activities\ReplyActivity.java:534:            for (Uri uri : uriList) {
/activities\ReplyActivity.java:535:                PhotoInfoBean infoBean = new PhotoInfoBean(this, uri);
/activities\ReplyActivity.java:536:                photoInfoBeans.add(infoBean);
/activities\ReplyActivity.java:537:            }
/activities\ReplyActivity.java:538:            insertPhotoAdapter.setFileList(photoInfoBeans);
/activities\ReplyActivity.java:539:            sendItem.setEnabled(true);
/activities\ReplyActivity.java:540:        }
/activities\ReplyActivity.java:541:    }
/activities\ReplyActivity.java:543:    @Override
/activities\ReplyActivity.java:544:    public void onClick(View v) {
/activities\ReplyActivity.java:545:        switch (v.getId()) {
/activities\ReplyActivity.java:546:            case R.id.activity_reply_root:
/activities\ReplyActivity.java:547:                finish();
/activities\ReplyActivity.java:548:                break;
/activities\ReplyActivity.java:549:            case R.id.activity_reply_edit_undo:
/activities\ReplyActivity.java:550:                editText.undo();
/activities\ReplyActivity.java:551:                break;
/activities\ReplyActivity.java:552:            case R.id.activity_reply_edit_redo:
/activities\ReplyActivity.java:553:                editText.redo();
/activities\ReplyActivity.java:554:                break;
/activities\ReplyActivity.java:555:            case R.id.activity_reply_edit_clear:
/activities\ReplyActivity.java:556:                editText.setText(null);
/activities\ReplyActivity.java:557:                break;
/activities\ReplyActivity.java:558:        }
/activities\ReplyActivity.java:559:    }
/activities\ReplyActivity.java:560:}/activities\SearchActivity.java:1:package com.huanchengfly.tieba.post.activities;
/activities\SearchActivity.java:3:import android.content.Intent;
/activities\SearchActivity.java:4:import android.os.Bundle;
/activities\SearchActivity.java:5:import android.text.TextUtils;
/activities\SearchActivity.java:7:import com.google.android.material.tabs.TabLayout;
/activities\SearchActivity.java:8:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/activities\SearchActivity.java:9:import com.huanchengfly.tieba.post.R;
/activities\SearchActivity.java:10:import com.huanchengfly.tieba.post.adapters.FragmentTabViewPagerAdapter;
/activities\SearchActivity.java:11:import com.huanchengfly.tieba.post.fragments.SearchForumFragment;
/activities\SearchActivity.java:12:import com.huanchengfly.tieba.post.fragments.SearchThreadFragment;
/activities\SearchActivity.java:13:import com.huanchengfly.tieba.post.fragments.SearchUserFragment;
/activities\SearchActivity.java:14:import com.huanchengfly.tieba.post.models.database.SearchHistory;
/activities\SearchActivity.java:15:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/activities\SearchActivity.java:16:import com.huanchengfly.tieba.post.widgets.MyViewPager;
/activities\SearchActivity.java:17:import com.lapism.searchview.Search;
/activities\SearchActivity.java:18:import com.lapism.searchview.widget.SearchView;
/activities\SearchActivity.java:20:public class SearchActivity extends BaseActivity implements Search.OnQueryTextListener {
/activities\SearchActivity.java:21:    public static final String TAG = SearchActivity.class.getSimpleName();
/activities\SearchActivity.java:22:    public static final String EXTRA_KEYWORD = "keyword";
/activities\SearchActivity.java:24:    private String mKeyword;
/activities\SearchActivity.java:25:    private TabLayout mTabLayout;
/activities\SearchActivity.java:26:    private SearchForumFragment searchForumFragment;
/activities\SearchActivity.java:27:    private SearchThreadFragment searchThreadFragment;
/activities\SearchActivity.java:28:    private SearchUserFragment searchUserFragment;
/activities\SearchActivity.java:29:    private SearchView mSearchView;
/activities\SearchActivity.java:31:    @Override
/activities\SearchActivity.java:32:    protected void onCreate(Bundle savedInstanceState) {
/activities\SearchActivity.java:33:        super.onCreate(savedInstanceState);
/activities\SearchActivity.java:34:        setContentView(R.layout.activity_search);
/activities\SearchActivity.java:35:        ThemeUtil.setTranslucentThemeBackground(findViewById(R.id.background));
/activities\SearchActivity.java:36:        Intent intent = getIntent();
/activities\SearchActivity.java:37:        mKeyword = intent.getStringExtra(EXTRA_KEYWORD);
/activities\SearchActivity.java:38:        mSearchView = (SearchView) findViewById(R.id.toolbar_search_view);
/activities\SearchActivity.java:39:        mSearchView.setTheme(ThemeUtil.isNightMode(this) ? Search.Theme.DARK : Search.Theme.LIGHT);
/activities\SearchActivity.java:40:        mSearchView.setShadow(false);
/activities\SearchActivity.java:41:        mSearchView.setBackgroundColor(ThemeUtils.getColorByAttr(this, R.attr.colorToolbar));
/activities\SearchActivity.java:42:        mSearchView.setClearColor(ThemeUtils.getColorByAttr(this, R.attr.colorToolbarItem));
/activities\SearchActivity.java:43:        mSearchView.setLogoColor(ThemeUtils.getColorByAttr(this, R.attr.colorToolbarItem));
/activities\SearchActivity.java:44:        mSearchView.setTextColor(ThemeUtils.getColorByAttr(this, R.attr.colorToolbarItem));
/activities\SearchActivity.java:45:        mSearchView.setHintColor(ThemeUtils.getColorByAttr(this, R.attr.color_toolbar_item_secondary));
/activities\SearchActivity.java:46:        mTabLayout = (TabLayout) findViewById(R.id.tab);
/activities\SearchActivity.java:47:        MyViewPager mViewPager = (MyViewPager) findViewById(R.id.view_pager);
/activities\SearchActivity.java:48:        mViewPager.setOffscreenPageLimit(3);
/activities\SearchActivity.java:49:        mSearchView.setQuery(mKeyword, false);
/activities\SearchActivity.java:50:        mSearchView.setOnQueryTextListener(this);
/activities\SearchActivity.java:51:        mSearchView.setOnLogoClickListener(this::finish);
/activities\SearchActivity.java:52:        FragmentTabViewPagerAdapter mAdapter = new FragmentTabViewPagerAdapter(getSupportFragmentManager());
/activities\SearchActivity.java:53:        searchForumFragment = SearchForumFragment.newInstance(mKeyword);
/activities\SearchActivity.java:54:        searchThreadFragment = SearchThreadFragment.newInstance(mKeyword);
/activities\SearchActivity.java:55:        searchUserFragment = SearchUserFragment.newInstance(mKeyword);
/activities\SearchActivity.java:56:        mAdapter.addFragment(searchForumFragment, "吧");
/activities\SearchActivity.java:57:        mAdapter.addFragment(searchThreadFragment, "贴");
/activities\SearchActivity.java:58:        mAdapter.addFragment(searchUserFragment, "人");
/activities\SearchActivity.java:59:        mViewPager.setAdapter(mAdapter);
/activities\SearchActivity.java:60:        mTabLayout.setupWithViewPager(mViewPager);
/activities\SearchActivity.java:61:    }
/activities\SearchActivity.java:63:    @Override
/activities\SearchActivity.java:64:    public boolean onQueryTextSubmit(CharSequence query) {
/activities\SearchActivity.java:65:        setKeyword(query.toString());
/activities\SearchActivity.java:66:        new SearchHistory(query.toString())
/activities\SearchActivity.java:67:                .saveOrUpdate("content = ?", query.toString());
/activities\SearchActivity.java:68:        return true;
/activities\SearchActivity.java:69:    }
/activities\SearchActivity.java:71:    private void setKeyword(String keyword) {
/activities\SearchActivity.java:72:        if (TextUtils.equals(keyword, mKeyword)) {
/activities\SearchActivity.java:73:            return;
/activities\SearchActivity.java:74:        }
/activities\SearchActivity.java:75:        mKeyword = keyword;
/activities\SearchActivity.java:76:        searchForumFragment.setKeyword(keyword, mTabLayout.getSelectedTabPosition() == 0);
/activities\SearchActivity.java:77:        searchThreadFragment.setKeyword(keyword, mTabLayout.getSelectedTabPosition() == 1);
/activities\SearchActivity.java:78:        searchUserFragment.setKeyword(keyword, mTabLayout.getSelectedTabPosition() == 2);
/activities\SearchActivity.java:79:    }
/activities\SearchActivity.java:81:    @Override
/activities\SearchActivity.java:82:    public void onQueryTextChange(CharSequence newText) {
/activities\SearchActivity.java:83:    }
/activities\SearchActivity.java:84:}/activities\SearchPostActivity.java:1:package com.huanchengfly.tieba.post.activities;
/activities\SearchPostActivity.java:3:import android.content.Intent;
/activities\SearchPostActivity.java:4:import android.graphics.Color;
/activities\SearchPostActivity.java:5:import android.os.Bundle;
/activities\SearchPostActivity.java:6:import android.view.ViewGroup;
/activities\SearchPostActivity.java:8:import androidx.recyclerview.widget.LinearLayoutManager;
/activities\SearchPostActivity.java:9:import androidx.recyclerview.widget.RecyclerView;
/activities\SearchPostActivity.java:10:import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
/activities\SearchPostActivity.java:12:import com.huanchengfly.tieba.post.api.TiebaApi;
/activities\SearchPostActivity.java:13:import com.huanchengfly.tieba.post.api.models.SearchPostBean;
/activities\SearchPostActivity.java:14:import com.huanchengfly.tieba.post.R;
/activities\SearchPostActivity.java:15:import com.huanchengfly.tieba.post.adapters.SearchPostAdapter;
/activities\SearchPostActivity.java:16:import com.huanchengfly.tieba.post.components.MyLinearLayoutManager;
/activities\SearchPostActivity.java:17:import com.huanchengfly.tieba.post.components.dividers.RecycleViewDivider;
/activities\SearchPostActivity.java:18:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/activities\SearchPostActivity.java:19:import com.huanchengfly.tieba.post.utils.Util;
/activities\SearchPostActivity.java:20:import com.lapism.searchview.Search;
/activities\SearchPostActivity.java:21:import com.lapism.searchview.widget.SearchView;
/activities\SearchPostActivity.java:23:import org.jetbrains.annotations.NotNull;
/activities\SearchPostActivity.java:25:import retrofit2.Call;
/activities\SearchPostActivity.java:26:import retrofit2.Callback;
/activities\SearchPostActivity.java:27:import retrofit2.Response;
/activities\SearchPostActivity.java:29:public class SearchPostActivity extends BaseActivity implements Search.OnQueryTextListener {
/activities\SearchPostActivity.java:30:    public static final String TAG = SearchPostActivity.class.getSimpleName();
/activities\SearchPostActivity.java:31:    public static final String PARAM_FORUM = "forum_name";
/activities\SearchPostActivity.java:32:    public static final String PARAM_KEYWORD = "keyword";
/activities\SearchPostActivity.java:33:    private SwipeRefreshLayout refreshLayout;
/activities\SearchPostActivity.java:34:    private RecyclerView recyclerView;
/activities\SearchPostActivity.java:35:    private SearchPostAdapter searchPostAdapter;
/activities\SearchPostActivity.java:36:    private String forumName;
/activities\SearchPostActivity.java:37:    private String keyword;
/activities\SearchPostActivity.java:38:    private int page;
/activities\SearchPostActivity.java:39:    private SearchView searchView;
/activities\SearchPostActivity.java:41:    @Override
/activities\SearchPostActivity.java:42:    protected void onCreate(Bundle savedInstanceState) {
/activities\SearchPostActivity.java:43:        super.onCreate(savedInstanceState);
/activities\SearchPostActivity.java:44:        setContentView(R.layout.activity_search_post);
/activities\SearchPostActivity.java:45:        ThemeUtil.setTranslucentThemeBackground(findViewById(R.id.background));
/activities\SearchPostActivity.java:46:        Util.setStatusBarTransparent(this);
/activities\SearchPostActivity.java:47:        getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
/activities\SearchPostActivity.java:48:        getWindow().getDecorView().setBackgroundColor(Color.TRANSPARENT);
/activities\SearchPostActivity.java:49:        getWindow().setBackgroundDrawableResource(R.drawable.bg_trans);
/activities\SearchPostActivity.java:50:        Intent intent = getIntent();
/activities\SearchPostActivity.java:51:        forumName = intent.getStringExtra(PARAM_FORUM);
/activities\SearchPostActivity.java:52:        if (forumName == null) {
/activities\SearchPostActivity.java:53:            finish();
/activities\SearchPostActivity.java:54:        }
/activities\SearchPostActivity.java:55:        findView();
/activities\SearchPostActivity.java:56:        initView();
/activities\SearchPostActivity.java:57:        keyword = intent.getStringExtra(PARAM_KEYWORD);
/activities\SearchPostActivity.java:58:        if (keyword != null) {
/activities\SearchPostActivity.java:59:            searchView.setText(keyword);
/activities\SearchPostActivity.java:60:            refresh();
/activities\SearchPostActivity.java:61:        }
/activities\SearchPostActivity.java:62:    }
/activities\SearchPostActivity.java:64:    private void findView() {
/activities\SearchPostActivity.java:65:        searchView = (SearchView) findViewById(R.id.toolbar_search_view);
/activities\SearchPostActivity.java:66:        refreshLayout = (SwipeRefreshLayout) findViewById(R.id.search_post_refresh_layout);
/activities\SearchPostActivity.java:67:        recyclerView = (RecyclerView) findViewById(R.id.search_post_recycler_view);
/activities\SearchPostActivity.java:68:    }
/activities\SearchPostActivity.java:70:    private void initView() {
/activities\SearchPostActivity.java:71:        ThemeUtil.setThemeForSwipeRefreshLayout(refreshLayout);
/activities\SearchPostActivity.java:72:        searchPostAdapter = new SearchPostAdapter(this);
/activities\SearchPostActivity.java:73:        searchPostAdapter.setLoadingView(R.layout.layout_footer_loading);
/activities\SearchPostActivity.java:74:        searchPostAdapter.setLoadEndView(R.layout.layout_footer_loadend);
/activities\SearchPostActivity.java:75:        searchPostAdapter.setLoadFailedView(R.layout.layout_footer_load_failed);
/activities\SearchPostActivity.java:76:        searchPostAdapter.setOnLoadMoreListener(this::loadMore);
/activities\SearchPostActivity.java:77:        recyclerView.setLayoutManager(new MyLinearLayoutManager(this));
/activities\SearchPostActivity.java:78:        recyclerView.addItemDecoration(new RecycleViewDivider(this, LinearLayoutManager.VERTICAL, R.drawable.drawable_divider_8dp));
/activities\SearchPostActivity.java:79:        recyclerView.setAdapter(searchPostAdapter);
/activities\SearchPostActivity.java:80:        refreshLayout.setOnRefreshListener(this::refresh);
/activities\SearchPostActivity.java:81:        searchView.setHint(getString(R.string.hint_search_in_ba, forumName));
/activities\SearchPostActivity.java:82:        searchView.setOnQueryTextListener(this);
/activities\SearchPostActivity.java:83:        searchView.setOnLogoClickListener(this::finish);
/activities\SearchPostActivity.java:84:    }
/activities\SearchPostActivity.java:86:    public void refresh() {
/activities\SearchPostActivity.java:87:        refreshLayout.setRefreshing(true);
/activities\SearchPostActivity.java:88:        page = 1;
/activities\SearchPostActivity.java:89:        TiebaApi.getInstance().searchPost(keyword, forumName, false, page, 30).enqueue(new Callback<SearchPostBean>() {
/activities\SearchPostActivity.java:90:            @Override
/activities\SearchPostActivity.java:91:            public void onResponse(@NotNull Call<SearchPostBean> call, @NotNull Response<SearchPostBean> response) {
/activities\SearchPostActivity.java:92:                SearchPostBean data = response.body();
/activities\SearchPostActivity.java:93:                if (!"1".equals(data.getPage().getHasMore())) {
/activities\SearchPostActivity.java:94:                    searchPostAdapter.loadEnd();
/activities\SearchPostActivity.java:95:                }
/activities\SearchPostActivity.java:96:                searchPostAdapter.setNewData(data.getPostList());
/activities\SearchPostActivity.java:97:                refreshLayout.setRefreshing(false);
/activities\SearchPostActivity.java:98:            }
/activities\SearchPostActivity.java:100:            @Override
/activities\SearchPostActivity.java:101:            public void onFailure(@NotNull Call<SearchPostBean> call, @NotNull Throwable t) {
/activities\SearchPostActivity.java:102:                searchPostAdapter.loadFailed();
/activities\SearchPostActivity.java:103:                refreshLayout.setRefreshing(false);
/activities\SearchPostActivity.java:104:            }
/activities\SearchPostActivity.java:105:        });
/activities\SearchPostActivity.java:106:    }
/activities\SearchPostActivity.java:108:    public void loadMore(boolean isReload) {
/activities\SearchPostActivity.java:109:        if (!isReload) {
/activities\SearchPostActivity.java:110:            page += 1;
/activities\SearchPostActivity.java:111:        }
/activities\SearchPostActivity.java:112:        TiebaApi.getInstance().searchPost(keyword, forumName, false, page, 30).enqueue(new Callback<SearchPostBean>() {
/activities\SearchPostActivity.java:113:            @Override
/activities\SearchPostActivity.java:114:            public void onResponse(@NotNull Call<SearchPostBean> call, @NotNull Response<SearchPostBean> response) {
/activities\SearchPostActivity.java:115:                SearchPostBean data = response.body();
/activities\SearchPostActivity.java:116:                if (!"1".equals(data.getPage().getHasMore())) {
/activities\SearchPostActivity.java:117:                    searchPostAdapter.loadEnd();
/activities\SearchPostActivity.java:118:                }
/activities\SearchPostActivity.java:119:                searchPostAdapter.setLoadMoreData(data.getPostList());
/activities\SearchPostActivity.java:120:            }
/activities\SearchPostActivity.java:122:            @Override
/activities\SearchPostActivity.java:123:            public void onFailure(@NotNull Call<SearchPostBean> call, @NotNull Throwable t) {
/activities\SearchPostActivity.java:124:                searchPostAdapter.loadFailed();
/activities\SearchPostActivity.java:125:            }
/activities\SearchPostActivity.java:126:        });
/activities\SearchPostActivity.java:127:    }
/activities\SearchPostActivity.java:129:    @Override
/activities\SearchPostActivity.java:130:    public boolean onQueryTextSubmit(CharSequence query) {
/activities\SearchPostActivity.java:131:        keyword = query.toString();
/activities\SearchPostActivity.java:132:        refresh();
/activities\SearchPostActivity.java:133:        return true;
/activities\SearchPostActivity.java:134:    }
/activities\SearchPostActivity.java:136:    @Override
/activities\SearchPostActivity.java:137:    public void onQueryTextChange(CharSequence newText) {
/activities\SearchPostActivity.java:138:    }
/activities\SearchPostActivity.java:139:}
/activities\SettingsActivity.java:1:package com.huanchengfly.tieba.post.activities;
/activities\SettingsActivity.java:3:import android.os.Bundle;
/activities\SettingsActivity.java:5:import androidx.appcompat.app.ActionBar;
/activities\SettingsActivity.java:6:import androidx.appcompat.widget.Toolbar;
/activities\SettingsActivity.java:7:import androidx.fragment.app.FragmentManager;
/activities\SettingsActivity.java:9:import com.huanchengfly.tieba.post.R;
/activities\SettingsActivity.java:10:import com.huanchengfly.tieba.post.fragments.SettingsFragment;
/activities\SettingsActivity.java:11:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/activities\SettingsActivity.java:13:public class SettingsActivity extends BaseActivity {
/activities\SettingsActivity.java:15:    @Override
/activities\SettingsActivity.java:16:    protected void onCreate(Bundle savedInstanceState) {
/activities\SettingsActivity.java:17:        super.onCreate(savedInstanceState);
/activities\SettingsActivity.java:18:        setContentView(R.layout.activity_settings);
/activities\SettingsActivity.java:19:        ThemeUtil.setTranslucentThemeBackground(findViewById(R.id.background));
/activities\SettingsActivity.java:20:        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
/activities\SettingsActivity.java:21:        setSupportActionBar(toolbar);
/activities\SettingsActivity.java:22:        ActionBar actionBar = getSupportActionBar();
/activities\SettingsActivity.java:23:        if (actionBar != null) {
/activities\SettingsActivity.java:24:            actionBar.setHomeButtonEnabled(true);
/activities\SettingsActivity.java:25:            actionBar.setDisplayHomeAsUpEnabled(true);
/activities\SettingsActivity.java:26:            actionBar.setTitle(R.string.title_settings);
/activities\SettingsActivity.java:27:        }
/activities\SettingsActivity.java:28:        String scrollToPreference = getIntent().getStringExtra("scroll_to_preference");
/activities\SettingsActivity.java:29:        FragmentManager fragmentManager = getSupportFragmentManager();
/activities\SettingsActivity.java:30:        SettingsFragment settingsFragment = new SettingsFragment();
/activities\SettingsActivity.java:31:        fragmentManager.beginTransaction()
/activities\SettingsActivity.java:32:                .add(R.id.main, settingsFragment)
/activities\SettingsActivity.java:33:                .commit();
/activities\SettingsActivity.java:34:        if (scrollToPreference != null) {
/activities\SettingsActivity.java:35:            settingsFragment.scrollToPreference(scrollToPreference);
/activities\SettingsActivity.java:36:        }
/activities\SettingsActivity.java:37:    }
/activities\SettingsActivity.java:38:}
/activities\ThemeActivity.java:1:package com.huanchengfly.tieba.post.activities;
/activities\ThemeActivity.java:3:import android.annotation.SuppressLint;
/activities\ThemeActivity.java:4:import android.content.Intent;
/activities\ThemeActivity.java:5:import android.os.Bundle;
/activities\ThemeActivity.java:7:import androidx.appcompat.app.ActionBar;
/activities\ThemeActivity.java:8:import androidx.appcompat.widget.Toolbar;
/activities\ThemeActivity.java:9:import androidx.recyclerview.widget.LinearLayoutManager;
/activities\ThemeActivity.java:10:import androidx.recyclerview.widget.RecyclerView;
/activities\ThemeActivity.java:11:import androidx.recyclerview.widget.SimpleItemAnimator;
/activities\ThemeActivity.java:13:import com.huanchengfly.tieba.post.R;
/activities\ThemeActivity.java:14:import com.huanchengfly.tieba.post.adapters.ThemeAdapter;
/activities\ThemeActivity.java:15:import com.huanchengfly.tieba.post.utils.SharedPreferencesUtil;
/activities\ThemeActivity.java:16:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/activities\ThemeActivity.java:18:import java.util.Arrays;
/activities\ThemeActivity.java:19:import java.util.List;
/activities\ThemeActivity.java:21:import static com.huanchengfly.tieba.post.utils.ThemeUtil.SP_TRANSLUCENT_THEME_BACKGROUND_PATH;
/activities\ThemeActivity.java:22:import static com.huanchengfly.tieba.post.utils.ThemeUtil.THEME_TRANSLUCENT;
/activities\ThemeActivity.java:24:public class ThemeActivity extends BaseActivity {
/activities\ThemeActivity.java:25:    public static final String TAG = "ThemeActivity";
/activities\ThemeActivity.java:27:    private long lastClickTimestamp = 0;
/activities\ThemeActivity.java:28:    private int clickTimes = 0;
/activities\ThemeActivity.java:30:    private RecyclerView mRecyclerView;
/activities\ThemeActivity.java:32:    @Override
/activities\ThemeActivity.java:33:    protected void onCreate(Bundle savedInstanceState) {
/activities\ThemeActivity.java:34:        super.onCreate(savedInstanceState);
/activities\ThemeActivity.java:35:        setContentView(R.layout.activity_theme);
/activities\ThemeActivity.java:36:        mRecyclerView = (RecyclerView) findViewById(R.id.theme_list);
/activities\ThemeActivity.java:37:        mRecyclerView.setLayoutManager(new LinearLayoutManager(this));
/activities\ThemeActivity.java:38:        ThemeAdapter themeAdapter = new ThemeAdapter(this);
/activities\ThemeActivity.java:39:        mRecyclerView.setAdapter(themeAdapter);
/activities\ThemeActivity.java:40:        if (mRecyclerView.getItemAnimator() != null) {
/activities\ThemeActivity.java:41:            mRecyclerView.getItemAnimator().setAddDuration(0);
/activities\ThemeActivity.java:42:            mRecyclerView.getItemAnimator().setChangeDuration(0);
/activities\ThemeActivity.java:43:            mRecyclerView.getItemAnimator().setMoveDuration(0);
/activities\ThemeActivity.java:44:            mRecyclerView.getItemAnimator().setRemoveDuration(0);
/activities\ThemeActivity.java:45:            ((SimpleItemAnimator) mRecyclerView.getItemAnimator()).setSupportsChangeAnimations(false);
/activities\ThemeActivity.java:46:        }
/activities\ThemeActivity.java:47:        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
/activities\ThemeActivity.java:48:        /*
/activities\ThemeActivity.java:49:        toolbar.setOnClickListener(v -> {
/activities\ThemeActivity.java:50:            if (System.currentTimeMillis() - lastClickTimestamp < 2000) {
/activities\ThemeActivity.java:51:                clickTimes += 1;
/activities\ThemeActivity.java:52:            } else {
/activities\ThemeActivity.java:53:                clickTimes = 0;
/activities\ThemeActivity.java:54:            }
/activities\ThemeActivity.java:55:            if (clickTimes >= 7) {
/activities\ThemeActivity.java:56:                clickTimes = 0;
/activities\ThemeActivity.java:57:                startActivity(new Intent(this, TranslucentThemeActivity.class));
/activities\ThemeActivity.java:58:                Toast.makeText(this, "\uD83D\uDC23", Toast.LENGTH_SHORT).show();
/activities\ThemeActivity.java:59:                finish();
/activities\ThemeActivity.java:60:            } else if (clickTimes >= 2) {
/activities\ThemeActivity.java:61:                Toast.makeText(this, "\uD83E\uDD5A", Toast.LENGTH_SHORT).show();
/activities\ThemeActivity.java:62:            }
/activities\ThemeActivity.java:63:            lastClickTimestamp = System.currentTimeMillis();
/activities\ThemeActivity.java:64:        });
/activities\ThemeActivity.java:65:        */
/activities\ThemeActivity.java:66:        setSupportActionBar(toolbar);
/activities\ThemeActivity.java:67:        ActionBar actionBar = getSupportActionBar();
/activities\ThemeActivity.java:68:        if (actionBar != null) {
/activities\ThemeActivity.java:69:            actionBar.setDisplayHomeAsUpEnabled(true);
/activities\ThemeActivity.java:70:            actionBar.setTitle(R.string.title_theme);
/activities\ThemeActivity.java:71:        }
/activities\ThemeActivity.java:72:        List<String> values = Arrays.asList(getResources().getStringArray(R.array.theme_values));
/activities\ThemeActivity.java:73:        themeAdapter.setOnItemClickListener((itemView, str, position, viewType) -> {
/activities\ThemeActivity.java:74:            String backgroundFilePath = SharedPreferencesUtil.get(this, SharedPreferencesUtil.SP_SETTINGS)
/activities\ThemeActivity.java:75:                    .getString(SP_TRANSLUCENT_THEME_BACKGROUND_PATH, null);
/activities\ThemeActivity.java:76:            if (values.get(position).equals(THEME_TRANSLUCENT) && backgroundFilePath == null) {
/activities\ThemeActivity.java:77:                startActivity(new Intent(this, TranslucentThemeActivity.class));
/activities\ThemeActivity.java:78:            }
/activities\ThemeActivity.java:79:            setTheme(values.get(position));
/activities\ThemeActivity.java:80:        });
/activities\ThemeActivity.java:81:        mRecyclerView.setAdapter(themeAdapter);
/activities\ThemeActivity.java:82:        ThemeUtil.setTranslucentThemeBackground(findViewById(R.id.background));
/activities\ThemeActivity.java:83:    }
/activities\ThemeActivity.java:85:    @Override
/activities\ThemeActivity.java:86:    protected void onResume() {
/activities\ThemeActivity.java:87:        super.onResume();
/activities\ThemeActivity.java:88:        ThemeUtil.setTranslucentThemeBackground(findViewById(R.id.background));
/activities\ThemeActivity.java:89:    }
/activities\ThemeActivity.java:91:    @SuppressLint("ApplySharedPref")
/activities\ThemeActivity.java:92:    private void setTheme(String theme) {
/activities\ThemeActivity.java:93:        ThemeUtil.getSharedPreferences(ThemeActivity.this).edit().putString(ThemeUtil.SP_THEME, theme).commit();
/activities\ThemeActivity.java:94:        if (!theme.contains("dark")) {
/activities\ThemeActivity.java:95:            ThemeUtil.getSharedPreferences(ThemeActivity.this).edit().putString(ThemeUtil.SP_OLD_THEME, theme).commit();
/activities\ThemeActivity.java:96:        }
/activities\ThemeActivity.java:97:        refreshUIIfNeed();
/activities\ThemeActivity.java:98:        ThemeUtil.setTranslucentThemeBackground(findViewById(R.id.background));
/activities\ThemeActivity.java:99:    }
/activities\ThemeActivity.java:100:}/activities\UpdateInfoActivity.java:1:package com.huanchengfly.tieba.post.activities;
/activities\UpdateInfoActivity.java:3:import android.content.Context;
/activities\UpdateInfoActivity.java:4:import android.content.Intent;
/activities\UpdateInfoActivity.java:5:import android.graphics.Bitmap;
/activities\UpdateInfoActivity.java:6:import android.os.Bundle;
/activities\UpdateInfoActivity.java:7:import android.os.Handler;
/activities\UpdateInfoActivity.java:8:import android.webkit.CookieManager;
/activities\UpdateInfoActivity.java:9:import android.webkit.WebView;
/activities\UpdateInfoActivity.java:11:import androidx.appcompat.app.ActionBar;
/activities\UpdateInfoActivity.java:12:import androidx.appcompat.widget.Toolbar;
/activities\UpdateInfoActivity.java:14:import com.google.android.material.snackbar.Snackbar;
/activities\UpdateInfoActivity.java:15:import com.huanchengfly.tieba.post.R;
/activities\UpdateInfoActivity.java:16:import com.huanchengfly.tieba.post.fragments.WebViewFragment;
/activities\UpdateInfoActivity.java:17:import com.huanchengfly.tieba.post.interfaces.WebViewListener;
/activities\UpdateInfoActivity.java:18:import com.huanchengfly.tieba.post.utils.AccountUtil;
/activities\UpdateInfoActivity.java:19:import com.huanchengfly.tieba.post.utils.DialogUtil;
/activities\UpdateInfoActivity.java:20:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/activities\UpdateInfoActivity.java:21:import com.huanchengfly.tieba.post.utils.Util;
/activities\UpdateInfoActivity.java:23:public class UpdateInfoActivity extends BaseActivity implements WebViewListener {
/activities\UpdateInfoActivity.java:24:    public static final int ACTION_UPDATE_LOGIN_INFO = 0;
/activities\UpdateInfoActivity.java:25:    private static final String EXTRA_ACTION = "action";
/activities\UpdateInfoActivity.java:26:    private static Handler handler = new Handler();
/activities\UpdateInfoActivity.java:27:    private Toolbar toolbar;
/activities\UpdateInfoActivity.java:28:    private int action;
/activities\UpdateInfoActivity.java:29:    private WebViewFragment mWebViewFragment;
/activities\UpdateInfoActivity.java:31:    public static Intent newIntent(Context context, int action) {
/activities\UpdateInfoActivity.java:32:        return new Intent(context, UpdateInfoActivity.class).putExtra(EXTRA_ACTION, action);
/activities\UpdateInfoActivity.java:33:    }
/activities\UpdateInfoActivity.java:35:    @Override
/activities\UpdateInfoActivity.java:36:    protected void onCreate(Bundle savedInstanceState) {
/activities\UpdateInfoActivity.java:37:        super.onCreate(savedInstanceState);
/activities\UpdateInfoActivity.java:38:        setContentView(R.layout.activity_login);
/activities\UpdateInfoActivity.java:39:        ThemeUtil.setTranslucentThemeBackground(findViewById(R.id.background));
/activities\UpdateInfoActivity.java:40:        toolbar = (Toolbar) findViewById(R.id.toolbar);
/activities\UpdateInfoActivity.java:41:        action = getIntent().getIntExtra(EXTRA_ACTION, ACTION_UPDATE_LOGIN_INFO);
/activities\UpdateInfoActivity.java:42:        setSupportActionBar(toolbar);
/activities\UpdateInfoActivity.java:43:        ActionBar actionBar = getSupportActionBar();
/activities\UpdateInfoActivity.java:44:        if (actionBar != null) {
/activities\UpdateInfoActivity.java:45:            actionBar.setDisplayHomeAsUpEnabled(true);
/activities\UpdateInfoActivity.java:46:            if (action == ACTION_UPDATE_LOGIN_INFO) {
/activities\UpdateInfoActivity.java:47:                actionBar.setTitle(R.string.title_update_stoken);
/activities\UpdateInfoActivity.java:48:            } else {
/activities\UpdateInfoActivity.java:49:                finish();
/activities\UpdateInfoActivity.java:50:            }
/activities\UpdateInfoActivity.java:51:        }
/activities\UpdateInfoActivity.java:52:        if (savedInstanceState == null) {
/activities\UpdateInfoActivity.java:53:            mWebViewFragment = WebViewFragment.newInstance("https://wappass.baidu.com/passport?login&u=https%3A%2F%2Ftieba.baidu.com%2Findex%2Ftbwise%2Fmine", "UpdateInfoActivity", false);
/activities\UpdateInfoActivity.java:54:            getSupportFragmentManager().beginTransaction()
/activities\UpdateInfoActivity.java:55:                    .replace(R.id.main, mWebViewFragment, "WebViewFragment")
/activities\UpdateInfoActivity.java:56:                    .commit();
/activities\UpdateInfoActivity.java:57:        }
/activities\UpdateInfoActivity.java:58:    }
/activities\UpdateInfoActivity.java:60:    @Override
/activities\UpdateInfoActivity.java:61:    public void onPageFinished(WebView view, String url) {
/activities\UpdateInfoActivity.java:62:        if (action == ACTION_UPDATE_LOGIN_INFO) {
/activities\UpdateInfoActivity.java:63:            updateLoginInfo(url);
/activities\UpdateInfoActivity.java:64:        }
/activities\UpdateInfoActivity.java:65:    }
/activities\UpdateInfoActivity.java:67:    private void updateLoginInfo(String url) {
/activities\UpdateInfoActivity.java:68:        CookieManager cookieManager = CookieManager.getInstance();
/activities\UpdateInfoActivity.java:69:        String cookies = cookieManager.getCookie(url);
/activities\UpdateInfoActivity.java:70:        if (cookies != null && AccountUtil.updateLoginInfo(cookies)) {
/activities\UpdateInfoActivity.java:71:            Snackbar snackbar = Util.createSnackbar(mWebViewFragment.getWebView(), "更新成功，即将跳转", Snackbar.LENGTH_INDEFINITE);
/activities\UpdateInfoActivity.java:72:            snackbar.show();
/activities\UpdateInfoActivity.java:73:            handler.postDelayed(() -> {
/activities\UpdateInfoActivity.java:74:                snackbar.dismiss();
/activities\UpdateInfoActivity.java:75:                finish();
/activities\UpdateInfoActivity.java:76:            }, 1500);
/activities\UpdateInfoActivity.java:77:        } else {
/activities\UpdateInfoActivity.java:78:            DialogUtil.build(this)
/activities\UpdateInfoActivity.java:79:                    .setTitle("出现问题")
/activities\UpdateInfoActivity.java:80:                    .setMessage("看起来您还没有登录或登录已失效，请先登录")
/activities\UpdateInfoActivity.java:81:                    .setPositiveButton(R.string.button_sure_default, (dialog, which) -> {
/activities\UpdateInfoActivity.java:82:                        finish();
/activities\UpdateInfoActivity.java:83:                        startActivity(new Intent(this, LoginActivity.class));
/activities\UpdateInfoActivity.java:84:                    })
/activities\UpdateInfoActivity.java:85:                    .create()
/activities\UpdateInfoActivity.java:86:                    .show();
/activities\UpdateInfoActivity.java:87:        }
/activities\UpdateInfoActivity.java:88:    }
/activities\UpdateInfoActivity.java:90:    @Override
/activities\UpdateInfoActivity.java:91:    public void onPageStarted(WebView view, String url, Bitmap favicon) {
/activities\UpdateInfoActivity.java:92:    }
/activities\UpdateInfoActivity.java:93:}
/activities\UserActivity.java:1:package com.huanchengfly.tieba.post.activities;
/activities\UserActivity.java:3:import android.content.res.ColorStateList;
/activities\UserActivity.java:4:import android.graphics.Color;
/activities\UserActivity.java:5:import android.os.Bundle;
/activities\UserActivity.java:6:import android.text.TextUtils;
/activities\UserActivity.java:7:import android.view.Menu;
/activities\UserActivity.java:8:import android.view.MenuItem;
/activities\UserActivity.java:9:import android.view.View;
/activities\UserActivity.java:10:import android.widget.ImageView;
/activities\UserActivity.java:11:import android.widget.TextView;
/activities\UserActivity.java:12:import android.widget.Toast;
/activities\UserActivity.java:14:import androidx.appcompat.app.ActionBar;
/activities\UserActivity.java:15:import androidx.appcompat.widget.Toolbar;
/activities\UserActivity.java:16:import androidx.viewpager.widget.ViewPager;
/activities\UserActivity.java:18:import com.google.android.material.appbar.AppBarLayout;
/activities\UserActivity.java:19:import com.google.android.material.tabs.TabLayout;
/activities\UserActivity.java:20:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/activities\UserActivity.java:21:import com.huanchengfly.tieba.post.api.TiebaApi;
/activities\UserActivity.java:22:import com.huanchengfly.tieba.post.api.models.CommonResponse;
/activities\UserActivity.java:23:import com.huanchengfly.tieba.post.api.models.ProfileBean;
/activities\UserActivity.java:24:import com.huanchengfly.tieba.post.R;
/activities\UserActivity.java:25:import com.huanchengfly.tieba.post.adapters.FragmentTabViewPagerAdapter;
/activities\UserActivity.java:26:import com.huanchengfly.tieba.post.fragments.UserLikeForumFragment;
/activities\UserActivity.java:27:import com.huanchengfly.tieba.post.fragments.UserPostFragment;
/activities\UserActivity.java:28:import com.huanchengfly.tieba.post.models.PhotoViewBean;
/activities\UserActivity.java:29:import com.huanchengfly.tieba.post.models.database.Account;
/activities\UserActivity.java:30:import com.huanchengfly.tieba.post.models.database.Block;
/activities\UserActivity.java:31:import com.huanchengfly.tieba.post.utils.AccountUtil;
/activities\UserActivity.java:32:import com.huanchengfly.tieba.post.utils.ImageUtil;
/activities\UserActivity.java:33:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/activities\UserActivity.java:34:import com.huanchengfly.tieba.post.widgets.theme.TintMaterialButton;
/activities\UserActivity.java:36:import org.jetbrains.annotations.NotNull;
/activities\UserActivity.java:38:import butterknife.BindView;
/activities\UserActivity.java:39:import butterknife.OnClick;
/activities\UserActivity.java:40:import retrofit2.Call;
/activities\UserActivity.java:41:import retrofit2.Callback;
/activities\UserActivity.java:42:import retrofit2.Response;
/activities\UserActivity.java:44:import static com.huanchengfly.tieba.post.utils.Util.changeAlpha;
/activities\UserActivity.java:46:public class UserActivity extends BaseActivity {
/activities\UserActivity.java:47:    public static final String TAG = "UserActivity";
/activities\UserActivity.java:48:    public static final String EXTRA_UID = "uid";
/activities\UserActivity.java:49:    public static final String EXTRA_TAB = "tab";
/activities\UserActivity.java:50:    public static final String EXTRA_AVATAR = "avatar";
/activities\UserActivity.java:52:    public static final int TAB_THREAD = 0;
/activities\UserActivity.java:53:    public static final int TAB_REPLY = 1;
/activities\UserActivity.java:54:    public static final int TAB_LIKE_FORUM = 2;
/activities\UserActivity.java:56:    @BindView(R.id.toolbar)
/activities\UserActivity.java:57:    Toolbar toolbar;
/activities\UserActivity.java:58:    @BindView(R.id.user_center_avatar)
/activities\UserActivity.java:59:    ImageView avatarView;
/activities\UserActivity.java:60:    @BindView(R.id.title_view)
/activities\UserActivity.java:61:    TextView titleView;
/activities\UserActivity.java:62:    @BindView(R.id.user_center_stat)
/activities\UserActivity.java:63:    TextView statView;
/activities\UserActivity.java:64:    @BindView(R.id.user_center_action_btn)
/activities\UserActivity.java:65:    TintMaterialButton actionBtn;
/activities\UserActivity.java:66:    @BindView(R.id.loading_view)
/activities\UserActivity.java:67:    View loadingView;
/activities\UserActivity.java:69:    private ProfileBean profileBean;
/activities\UserActivity.java:71:    private String uid;
/activities\UserActivity.java:72:    private int tab;
/activities\UserActivity.java:74:    @Override
/activities\UserActivity.java:75:    protected int getLayoutId() {
/activities\UserActivity.java:76:        return R.layout.activity_user;
/activities\UserActivity.java:77:    }
/activities\UserActivity.java:79:    @Override
/activities\UserActivity.java:80:    protected void onCreate(Bundle savedInstanceState) {
/activities\UserActivity.java:81:        super.onCreate(savedInstanceState);
/activities\UserActivity.java:82:        ThemeUtil.setTranslucentThemeBackground(findViewById(R.id.background));
/activities\UserActivity.java:83:        uid = getIntent().getStringExtra(EXTRA_UID);
/activities\UserActivity.java:84:        tab = getIntent().getIntExtra(EXTRA_TAB, TAB_THREAD);
/activities\UserActivity.java:85:        String avatar = getIntent().getStringExtra(EXTRA_AVATAR);
/activities\UserActivity.java:86:        if (uid == null) {
/activities\UserActivity.java:87:            finish();
/activities\UserActivity.java:88:            return;
/activities\UserActivity.java:89:        }
/activities\UserActivity.java:90:        FragmentTabViewPagerAdapter adapter = new FragmentTabViewPagerAdapter(getSupportFragmentManager());
/activities\UserActivity.java:91:        ViewPager viewPager = (ViewPager) findViewById(R.id.user_center_vp);
/activities\UserActivity.java:92:        TabLayout tabLayout = (TabLayout) findViewById(R.id.user_center_tab);
/activities\UserActivity.java:93:        AppBarLayout appBarLayout = (AppBarLayout) findViewById(R.id.appbar);
/activities\UserActivity.java:94:        actionBtn.setVisibility(View.GONE);
/activities\UserActivity.java:95:        if (!TextUtils.isEmpty(avatar)) {
/activities\UserActivity.java:96:            loadingView.setVisibility(View.GONE);
/activities\UserActivity.java:97:            ImageUtil.load(avatarView, ImageUtil.LOAD_TYPE_AVATAR, avatar);
/activities\UserActivity.java:98:            ImageUtil.initImageView(avatarView, new PhotoViewBean(avatar));
/activities\UserActivity.java:99:        }
/activities\UserActivity.java:100:        appBarLayout.addOnOffsetChangedListener((appBarLayout1, verticalOffset) -> {
/activities\UserActivity.java:101:            toolbar.setBackgroundColor(changeAlpha(ThemeUtils.getColorByAttr(this, R.attr.colorToolbar), Math.abs(verticalOffset * 1.0f) / appBarLayout1.getTotalScrollRange()));
/activities\UserActivity.java:102:            if (profileBean != null && profileBean.getUser() != null && Math.abs(verticalOffset) >= appBarLayout1.getTotalScrollRange()) {
/activities\UserActivity.java:103:                toolbar.setTitle(profileBean.getUser().getNameShow());
/activities\UserActivity.java:104:            } else {
/activities\UserActivity.java:105:                toolbar.setTitle(null);
/activities\UserActivity.java:106:            }
/activities\UserActivity.java:107:        });
/activities\UserActivity.java:108:        setSupportActionBar(toolbar);
/activities\UserActivity.java:109:        ActionBar actionBar = getSupportActionBar();
/activities\UserActivity.java:110:        if (actionBar != null) {
/activities\UserActivity.java:111:            actionBar.setDisplayHomeAsUpEnabled(true);
/activities\UserActivity.java:112:        }
/activities\UserActivity.java:113:        viewPager.setAdapter(adapter);
/activities\UserActivity.java:114:        viewPager.setOffscreenPageLimit(3);
/activities\UserActivity.java:115:        tabLayout.setupWithViewPager(viewPager);
/activities\UserActivity.java:116:        TiebaApi.getInstance().profile(uid).enqueue(new Callback<ProfileBean>() {
/activities\UserActivity.java:117:            @Override
/activities\UserActivity.java:118:            public void onResponse(@NotNull Call<ProfileBean> call, @NotNull Response<ProfileBean> response) {
/activities\UserActivity.java:119:                ProfileBean data = response.body();
/activities\UserActivity.java:120:                actionBtn.setVisibility(View.VISIBLE);
/activities\UserActivity.java:121:                loadingView.setVisibility(View.GONE);
/activities\UserActivity.java:122:                View dividerView = findViewById(R.id.user_center_divider);
/activities\UserActivity.java:123:                if (ThemeUtils.getColorByAttr(UserActivity.this, R.attr.colorBg) == ThemeUtils.getColorByAttr(UserActivity.this, R.attr.colorToolbar)) {
/activities\UserActivity.java:124:                    dividerView.setVisibility(View.VISIBLE);
/activities\UserActivity.java:125:                }
/activities\UserActivity.java:126:                if (ThemeUtils.getColorByAttr(UserActivity.this, R.attr.colorToolbar) == ThemeUtils.getColorByAttr(UserActivity.this, R.attr.colorAccent)) {
/activities\UserActivity.java:127:                    actionBtn.setTextColor(ColorStateList.valueOf(Color.WHITE));
/activities\UserActivity.java:128:                    actionBtn.setStrokeColor(ColorStateList.valueOf(Color.WHITE));
/activities\UserActivity.java:129:                }
/activities\UserActivity.java:130:                profileBean = data;
/activities\UserActivity.java:131:                refreshHeader();
/activities\UserActivity.java:132:                adapter.clear();
/activities\UserActivity.java:133:                adapter.addFragment(UserPostFragment.newInstance(uid, true), "贴子 " + data.getUser().getThreadNum());
/activities\UserActivity.java:134:                adapter.addFragment(UserPostFragment.newInstance(uid, false), "回复 " + data.getUser().getRepostNum());
/activities\UserActivity.java:135:                adapter.addFragment(UserLikeForumFragment.newInstance(uid), "关注吧 " + data.getUser().getMyLikeNum());
/activities\UserActivity.java:136:                viewPager.setCurrentItem(tab, false);
/activities\UserActivity.java:137:            }
/activities\UserActivity.java:139:            @Override
/activities\UserActivity.java:140:            public void onFailure(@NotNull Call<ProfileBean> call, @NotNull Throwable t) {
/activities\UserActivity.java:141:            }
/activities\UserActivity.java:142:        });
/activities\UserActivity.java:143:    }
/activities\UserActivity.java:145:    public void refreshHeader() {
/activities\UserActivity.java:146:        titleView.setText(profileBean.getUser().getNameShow());
/activities\UserActivity.java:147:        statView.setText(getString(R.string.tip_stat, profileBean.getUser().getConcernNum(), profileBean.getUser().getFansNum()));
/activities\UserActivity.java:148:        if (avatarView.getTag() == null) {
/activities\UserActivity.java:149:            ImageUtil.load(avatarView, ImageUtil.LOAD_TYPE_AVATAR, "http://tb.himg.baidu.com/sys/portrait/item/" + profileBean.getUser().getPortrait());
/activities\UserActivity.java:150:            ImageUtil.initImageView(avatarView, new PhotoViewBean("http://tb.himg.baidu.com/sys/portrait/item/" + profileBean.getUser().getPortrait()));
/activities\UserActivity.java:151:        }
/activities\UserActivity.java:152:        if (TextUtils.equals(AccountUtil.getUid(this), profileBean.getUser().getId())) {
/activities\UserActivity.java:153:            actionBtn.setText(R.string.menu_edit_info);
/activities\UserActivity.java:154:        } else {
/activities\UserActivity.java:155:            if ("1".equals(profileBean.getUser().getHasConcerned())) {
/activities\UserActivity.java:156:                actionBtn.setText(R.string.button_unfollow);
/activities\UserActivity.java:157:            } else {
/activities\UserActivity.java:158:                actionBtn.setText(R.string.button_follow);
/activities\UserActivity.java:159:            }
/activities\UserActivity.java:160:        }
/activities\UserActivity.java:161:    }
/activities\UserActivity.java:163:    @Override
/activities\UserActivity.java:164:    public boolean onCreateOptionsMenu(Menu menu) {
/activities\UserActivity.java:165:        getMenuInflater().inflate(R.menu.menu_user_space, menu);
/activities\UserActivity.java:166:        Account account = AccountUtil.getLoginInfo(this);
/activities\UserActivity.java:167:        if (account != null && TextUtils.equals(account.getUid(), uid)) {
/activities\UserActivity.java:168:            menu.findItem(R.id.menu_block).setVisible(false);
/activities\UserActivity.java:169:            menu.findItem(R.id.menu_edit_info).setVisible(true);
/activities\UserActivity.java:170:        } else {
/activities\UserActivity.java:171:            menu.findItem(R.id.menu_block).setVisible(true);
/activities\UserActivity.java:172:            menu.findItem(R.id.menu_edit_info).setVisible(false);
/activities\UserActivity.java:173:        }
/activities\UserActivity.java:174:        return super.onCreateOptionsMenu(menu);
/activities\UserActivity.java:175:    }
/activities\UserActivity.java:177:    @Override
/activities\UserActivity.java:178:    public boolean onOptionsItemSelected(MenuItem item) {
/activities\UserActivity.java:179:        switch (item.getItemId()) {
/activities\UserActivity.java:180:            case R.id.menu_block_black:
/activities\UserActivity.java:181:            case R.id.menu_block_white:
/activities\UserActivity.java:182:                int category = item.getItemId() == R.id.menu_block_black ? Block.CATEGORY_BLACK_LIST : Block.CATEGORY_WHITE_LIST;
/activities\UserActivity.java:183:                new Block()
/activities\UserActivity.java:184:                        .setUid(profileBean.getUser().getId())
/activities\UserActivity.java:185:                        .setUsername(profileBean.getUser().getName())
/activities\UserActivity.java:186:                        .setType(Block.TYPE_USER)
/activities\UserActivity.java:187:                        .setCategory(category)
/activities\UserActivity.java:188:                        .saveAsync()
/activities\UserActivity.java:189:                        .listen(success -> {
/activities\UserActivity.java:190:                            if (success) {
/activities\UserActivity.java:191:                                Toast.makeText(this, R.string.toast_add_success, Toast.LENGTH_SHORT).show();
/activities\UserActivity.java:192:                            }
/activities\UserActivity.java:193:                        });
/activities\UserActivity.java:194:                return true;
/activities\UserActivity.java:195:            case R.id.menu_edit_info:
/activities\UserActivity.java:196:                startActivity(WebViewActivity.newIntent(this, getString(R.string.url_edit_info)));
/activities\UserActivity.java:197:                return true;
/activities\UserActivity.java:198:        }
/activities\UserActivity.java:199:        return super.onOptionsItemSelected(item);
/activities\UserActivity.java:200:    }
/activities\UserActivity.java:202:    @OnClick(R.id.user_center_action_btn)
/activities\UserActivity.java:203:    public void onActionBtnClick(View view) {
/activities\UserActivity.java:204:        if (TextUtils.equals(profileBean.getUser().getId(), AccountUtil.getUid(this))) {
/activities\UserActivity.java:205:            startActivity(WebViewActivity.newIntent(this, getString(R.string.url_edit_info)));
/activities\UserActivity.java:206:            return;
/activities\UserActivity.java:207:        }
/activities\UserActivity.java:208:        if ("1".equals(profileBean.getUser().getHasConcerned())) {
/activities\UserActivity.java:209:            TiebaApi.getInstance().unfollow(profileBean.getUser().getPortrait(), AccountUtil.getLoginInfo(this).getTbs()).enqueue(new Callback<CommonResponse>() {
/activities\UserActivity.java:210:                @Override
/activities\UserActivity.java:211:                public void onResponse(@NotNull Call<CommonResponse> call, @NotNull Response<CommonResponse> response) {
/activities\UserActivity.java:212:                    CommonResponse data = response.body();
/activities\UserActivity.java:213:                    Toast.makeText(UserActivity.this, data.getErrorMsg(), Toast.LENGTH_SHORT).show();
/activities\UserActivity.java:214:                    profileBean.getUser().setHasConcerned("0");
/activities\UserActivity.java:215:                    refreshHeader();
/activities\UserActivity.java:216:                }
/activities\UserActivity.java:218:                @Override
/activities\UserActivity.java:219:                public void onFailure(@NotNull Call<CommonResponse> call, @NotNull Throwable t) {
/activities\UserActivity.java:220:                    Toast.makeText(UserActivity.this, t.getMessage(), Toast.LENGTH_SHORT).show();
/activities\UserActivity.java:221:                }
/activities\UserActivity.java:222:            });
/activities\UserActivity.java:223:        } else {
/activities\UserActivity.java:224:            TiebaApi.getInstance().follow(profileBean.getUser().getPortrait(), AccountUtil.getLoginInfo(this).getTbs()).enqueue(new Callback<CommonResponse>() {
/activities\UserActivity.java:225:                @Override
/activities\UserActivity.java:226:                public void onResponse(@NotNull Call<CommonResponse> call, @NotNull Response<CommonResponse> response) {
/activities\UserActivity.java:227:                    CommonResponse data = response.body();
/activities\UserActivity.java:228:                    Toast.makeText(UserActivity.this, data.getErrorMsg(), Toast.LENGTH_SHORT).show();
/activities\UserActivity.java:229:                    profileBean.getUser().setHasConcerned("1");
/activities\UserActivity.java:230:                    refreshHeader();
/activities\UserActivity.java:231:                }
/activities\UserActivity.java:233:                @Override
/activities\UserActivity.java:234:                public void onFailure(@NotNull Call<CommonResponse> call, @NotNull Throwable t) {
/activities\UserActivity.java:235:                    Toast.makeText(UserActivity.this, t.getMessage(), Toast.LENGTH_SHORT).show();
/activities\UserActivity.java:236:                }
/activities\UserActivity.java:237:            });
/activities\UserActivity.java:238:        }
/activities\UserActivity.java:239:    }
/activities\UserActivity.java:240:}/activities\UserCollectActivity.java:1:package com.huanchengfly.tieba.post.activities;
/activities\UserCollectActivity.java:3:import android.os.Bundle;
/activities\UserCollectActivity.java:5:import androidx.appcompat.app.ActionBar;
/activities\UserCollectActivity.java:6:import androidx.appcompat.widget.Toolbar;
/activities\UserCollectActivity.java:8:import com.huanchengfly.tieba.post.R;
/activities\UserCollectActivity.java:9:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/activities\UserCollectActivity.java:11:public class UserCollectActivity extends BaseActivity {
/activities\UserCollectActivity.java:12:    @Override
/activities\UserCollectActivity.java:13:    protected void onCreate(Bundle savedInstanceState) {
/activities\UserCollectActivity.java:14:        super.onCreate(savedInstanceState);
/activities\UserCollectActivity.java:15:        setContentView(R.layout.activity_user_collect);
/activities\UserCollectActivity.java:16:        ThemeUtil.setTranslucentThemeBackground(findViewById(R.id.background));
/activities\UserCollectActivity.java:17:        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
/activities\UserCollectActivity.java:18:        setSupportActionBar(toolbar);
/activities\UserCollectActivity.java:19:        ActionBar actionBar = getSupportActionBar();
/activities\UserCollectActivity.java:20:        if (actionBar != null) {
/activities\UserCollectActivity.java:21:            actionBar.setDisplayHomeAsUpEnabled(true);
/activities\UserCollectActivity.java:22:            actionBar.setTitle(R.string.title_my_collect);
/activities\UserCollectActivity.java:23:        }
/activities\UserCollectActivity.java:24:    }
/activities\UserCollectActivity.java:25:}
/activities\WebViewActivity.java:1:package com.huanchengfly.tieba.post.activities;
/activities\WebViewActivity.java:3:import android.content.Context;
/activities\WebViewActivity.java:4:import android.content.Intent;
/activities\WebViewActivity.java:5:import android.net.Uri;
/activities\WebViewActivity.java:6:import android.os.Bundle;
/activities\WebViewActivity.java:7:import android.view.Menu;
/activities\WebViewActivity.java:8:import android.view.MenuItem;
/activities\WebViewActivity.java:9:import android.webkit.WebView;
/activities\WebViewActivity.java:11:import androidx.appcompat.app.ActionBar;
/activities\WebViewActivity.java:12:import androidx.appcompat.widget.Toolbar;
/activities\WebViewActivity.java:14:import com.huanchengfly.tieba.post.R;
/activities\WebViewActivity.java:15:import com.huanchengfly.tieba.post.fragments.WebViewFragment;
/activities\WebViewActivity.java:16:import com.huanchengfly.tieba.post.interfaces.OnReceivedTitleListener;
/activities\WebViewActivity.java:17:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/activities\WebViewActivity.java:18:import com.huanchengfly.tieba.post.utils.TiebaUtil;
/activities\WebViewActivity.java:20:public class WebViewActivity extends BaseActivity implements OnReceivedTitleListener {
/activities\WebViewActivity.java:21:    public static final String TAG = WebViewActivity.class.getSimpleName();
/activities\WebViewActivity.java:23:    public static final String DOMAIN_SAPI = "wappass.baidu.com";
/activities\WebViewActivity.java:24:    public static final String EXTRA_URL = "url";
/activities\WebViewActivity.java:25:    private static final String DOMAIN_TIEBA = "tieba.baidu.com";
/activities\WebViewActivity.java:27:    private WebViewFragment mWebViewFragment;
/activities\WebViewActivity.java:28:    private Toolbar toolbar;
/activities\WebViewActivity.java:29:    private String mUrl;
/activities\WebViewActivity.java:31:    public static Intent newIntent(Context context, String url) {
/activities\WebViewActivity.java:32:        return new Intent(context, WebViewActivity.class).putExtra(EXTRA_URL, url);
/activities\WebViewActivity.java:33:    }
/activities\WebViewActivity.java:35:    @Override
/activities\WebViewActivity.java:36:    protected void onCreate(Bundle savedInstanceState) {
/activities\WebViewActivity.java:37:        super.onCreate(savedInstanceState);
/activities\WebViewActivity.java:38:        setContentView(R.layout.activity_webview);
/activities\WebViewActivity.java:39:        ThemeUtil.setTranslucentThemeBackground(findViewById(R.id.background));
/activities\WebViewActivity.java:40:        toolbar = (Toolbar) findViewById(R.id.toolbar);
/activities\WebViewActivity.java:41:        setSupportActionBar(toolbar);
/activities\WebViewActivity.java:42:        ActionBar actionBar = getSupportActionBar();
/activities\WebViewActivity.java:43:        if (actionBar != null) actionBar.setDisplayHomeAsUpEnabled(true);
/activities\WebViewActivity.java:44:        Intent intent = getIntent();
/activities\WebViewActivity.java:45:        mUrl = intent.getStringExtra(EXTRA_URL);
/activities\WebViewActivity.java:46:        mWebViewFragment = WebViewFragment.newInstance(mUrl, TAG, null, false, true, mUrl.contains(DOMAIN_SAPI));
/activities\WebViewActivity.java:47:        getSupportFragmentManager().beginTransaction()
/activities\WebViewActivity.java:48:                .replace(R.id.main, mWebViewFragment, TAG)
/activities\WebViewActivity.java:49:                .commit();
/activities\WebViewActivity.java:50:    }
/activities\WebViewActivity.java:52:    @Override
/activities\WebViewActivity.java:53:    public void setTitle(String newTitle) {
/activities\WebViewActivity.java:54:        toolbar.setTitle(newTitle);
/activities\WebViewActivity.java:55:    }
/activities\WebViewActivity.java:57:    @Override
/activities\WebViewActivity.java:58:    public void setSubTitle(String newSubTitle) {
/activities\WebViewActivity.java:59:        toolbar.setSubtitle(newSubTitle);
/activities\WebViewActivity.java:60:    }
/activities\WebViewActivity.java:62:    @Override
/activities\WebViewActivity.java:63:    public boolean onOptionsItemSelected(MenuItem item) {
/activities\WebViewActivity.java:64:        switch (item.getItemId()) {
/activities\WebViewActivity.java:65:            case R.id.menu_open_in_browser:
/activities\WebViewActivity.java:66:                Uri uri = Uri.parse(mWebViewFragment.getWebView().getUrl() == null ?
/activities\WebViewActivity.java:67:                        mUrl :
/activities\WebViewActivity.java:68:                        mWebViewFragment.getWebView().getUrl());
/activities\WebViewActivity.java:69:                Intent intent = new Intent(Intent.ACTION_VIEW, uri);
/activities\WebViewActivity.java:70:                startActivity(intent);
/activities\WebViewActivity.java:71:                break;
/activities\WebViewActivity.java:72:            case R.id.menu_copy_link:
/activities\WebViewActivity.java:73:                TiebaUtil.copyText(this, mWebViewFragment.getWebView().getUrl());
/activities\WebViewActivity.java:74:                break;
/activities\WebViewActivity.java:75:            case R.id.menu_refresh:
/activities\WebViewActivity.java:76:                mWebViewFragment.getWebView().reload();
/activities\WebViewActivity.java:77:                break;
/activities\WebViewActivity.java:78:            case R.id.menu_share:
/activities\WebViewActivity.java:79:                TiebaUtil.shareText(this, mWebViewFragment.getWebView().getUrl());
/activities\WebViewActivity.java:80:                break;
/activities\WebViewActivity.java:81:            case R.id.menu_exit:
/activities\WebViewActivity.java:82:                finish();
/activities\WebViewActivity.java:83:                break;
/activities\WebViewActivity.java:84:            default:
/activities\WebViewActivity.java:85:                break;
/activities\WebViewActivity.java:86:        }
/activities\WebViewActivity.java:87:        return super.onOptionsItemSelected(item);
/activities\WebViewActivity.java:88:    }
/activities\WebViewActivity.java:90:    @Override
/activities\WebViewActivity.java:91:    public boolean onCreateOptionsMenu(Menu menu) {
/activities\WebViewActivity.java:92:        getMenuInflater().inflate(R.menu.menu_webview_toolbar, menu);
/activities\WebViewActivity.java:93:        return super.onCreateOptionsMenu(menu);
/activities\WebViewActivity.java:94:    }
/activities\WebViewActivity.java:96:    @Override
/activities\WebViewActivity.java:97:    public void onReceivedTitle(WebView view, String title, String url) {
/activities\WebViewActivity.java:98:        setTitle(title);
/activities\WebViewActivity.java:99:        Uri uri = Uri.parse(url);
/activities\WebViewActivity.java:100:        String host = uri.getHost();
/activities\WebViewActivity.java:101:        if (host != null && host.contains(DOMAIN_TIEBA)) {
/activities\WebViewActivity.java:102:            setSubTitle(null);
/activities\WebViewActivity.java:103:        } else {
/activities\WebViewActivity.java:104:            setSubTitle(host);
/activities\WebViewActivity.java:105:        }
/activities\WebViewActivity.java:106:    }
/activities\WebViewActivity.java:107:}/activities\FloorActivity.kt:1:package com.huanchengfly.tieba.post.activities
/activities\FloorActivity.kt:3:import android.content.BroadcastReceiver
/activities\FloorActivity.kt:4:import android.content.Context
/activities\FloorActivity.kt:5:import android.content.Intent
/activities\FloorActivity.kt:6:import android.content.IntentFilter
/activities\FloorActivity.kt:7:import android.os.Bundle
/activities\FloorActivity.kt:8:import android.view.Menu
/activities\FloorActivity.kt:9:import android.view.MenuItem
/activities\FloorActivity.kt:10:import android.view.View
/activities\FloorActivity.kt:11:import android.widget.Toast
/activities\FloorActivity.kt:12:import androidx.appcompat.widget.Toolbar
/activities\FloorActivity.kt:13:import androidx.recyclerview.widget.RecyclerView
/activities\FloorActivity.kt:14:import androidx.swiperefreshlayout.widget.SwipeRefreshLayout
/activities\FloorActivity.kt:15:import butterknife.BindView
/activities\FloorActivity.kt:16:import butterknife.OnClick
/activities\FloorActivity.kt:17:import com.huanchengfly.tieba.post.R
/activities\FloorActivity.kt:18:import com.huanchengfly.tieba.post.adapters.RecyclerFloorAdapter
/activities\FloorActivity.kt:19:import com.huanchengfly.tieba.post.api.TiebaApi
/activities\FloorActivity.kt:20:import com.huanchengfly.tieba.post.api.models.SubFloorListBean
/activities\FloorActivity.kt:21:import com.huanchengfly.tieba.post.components.MyLinearLayoutManager
/activities\FloorActivity.kt:22:import com.huanchengfly.tieba.post.components.dividers.ThreadDivider
/activities\FloorActivity.kt:23:import com.huanchengfly.tieba.post.models.ReplyInfoBean
/activities\FloorActivity.kt:24:import com.huanchengfly.tieba.post.utils.AccountUtil
/activities\FloorActivity.kt:25:import com.huanchengfly.tieba.post.utils.NavigationHelper
/activities\FloorActivity.kt:26:import com.huanchengfly.tieba.post.utils.ThemeUtil
/activities\FloorActivity.kt:27:import retrofit2.Call
/activities\FloorActivity.kt:28:import retrofit2.Callback
/activities\FloorActivity.kt:29:import retrofit2.Response
/activities\FloorActivity.kt:31:class FloorActivity : BaseActivity() {
/activities\FloorActivity.kt:32:    @BindView(R.id.toolbar)
/activities\FloorActivity.kt:33:    lateinit var toolbar: Toolbar
/activities\FloorActivity.kt:34:    @BindView(R.id.floor_refresh_view)
/activities\FloorActivity.kt:35:    lateinit var refreshLayout: SwipeRefreshLayout
/activities\FloorActivity.kt:36:    @BindView(R.id.floor_recycler_view)
/activities\FloorActivity.kt:37:    lateinit var recyclerView: RecyclerView
/activities\FloorActivity.kt:38:    private var dataBean: SubFloorListBean? = null
/activities\FloorActivity.kt:39:    private var recyclerViewAdapter: RecyclerFloorAdapter? = null
/activities\FloorActivity.kt:40:    private var navigationHelper: NavigationHelper? = null
/activities\FloorActivity.kt:41:    private var tid: String? = null
/activities\FloorActivity.kt:42:    private var pid: String? = null
/activities\FloorActivity.kt:43:    private var spid: String? = null
/activities\FloorActivity.kt:44:    private var hasMore = false
/activities\FloorActivity.kt:45:    private var pn = 1
/activities\FloorActivity.kt:46:    private val replyReceiver: BroadcastReceiver = object : BroadcastReceiver() {
/activities\FloorActivity.kt:47:        override fun onReceive(context: Context, intent: Intent) {
/activities\FloorActivity.kt:48:            val action = intent.action
/activities\FloorActivity.kt:49:            if (action != null && action == ThreadActivity.ACTION_REPLY_SUCCESS) {
/activities\FloorActivity.kt:50:                val pid = intent.getStringExtra("pid")
/activities\FloorActivity.kt:51:                if (pid == this@FloorActivity.pid) {
/activities\FloorActivity.kt:52:                    refresh()
/activities\FloorActivity.kt:53:                }
/activities\FloorActivity.kt:54:            }
/activities\FloorActivity.kt:55:        }
/activities\FloorActivity.kt:56:    }
/activities\FloorActivity.kt:58:    override fun onStart() {
/activities\FloorActivity.kt:59:        super.onStart()
/activities\FloorActivity.kt:60:        val filter = IntentFilter()
/activities\FloorActivity.kt:61:        filter.addAction(ThreadActivity.ACTION_REPLY_SUCCESS)
/activities\FloorActivity.kt:62:        registerReceiver(replyReceiver, filter)
/activities\FloorActivity.kt:63:    }
/activities\FloorActivity.kt:65:    override fun onStop() {
/activities\FloorActivity.kt:66:        super.onStop()
/activities\FloorActivity.kt:67:        unregisterReceiver(replyReceiver)
/activities\FloorActivity.kt:68:    }
/activities\FloorActivity.kt:70:    override fun getLayoutId(): Int {
/activities\FloorActivity.kt:71:        return R.layout.activity_floor
/activities\FloorActivity.kt:72:    }
/activities\FloorActivity.kt:74:    override fun onCreate(savedInstanceState: Bundle?) {
/activities\FloorActivity.kt:75:        super.onCreate(savedInstanceState)
/activities\FloorActivity.kt:76:        ThemeUtil.setTranslucentThemeBackground(findViewById(R.id.background))
/activities\FloorActivity.kt:77:        navigationHelper = NavigationHelper.newInstance(this)
/activities\FloorActivity.kt:78:        initView()
/activities\FloorActivity.kt:79:        if (savedInstanceState == null) {
/activities\FloorActivity.kt:80:            initData()
/activities\FloorActivity.kt:81:        }
/activities\FloorActivity.kt:82:    }
/activities\FloorActivity.kt:84:    override fun onCreateOptionsMenu(menu: Menu): Boolean {
/activities\FloorActivity.kt:85:        menuInflater.inflate(R.menu.menu_floor_toolbar, menu)
/activities\FloorActivity.kt:86:        return super.onCreateOptionsMenu(menu)
/activities\FloorActivity.kt:87:    }
/activities\FloorActivity.kt:89:    override fun onOptionsItemSelected(item: MenuItem): Boolean {
/activities\FloorActivity.kt:90:        when (item.itemId) {
/activities\FloorActivity.kt:91:            R.id.menu_to_thread -> {
/activities\FloorActivity.kt:92:                if (dataBean != null) {
/activities\FloorActivity.kt:93:                    navigationHelper!!.navigationByData(NavigationHelper.ACTION_THREAD, mapOf<String, String>(
/activities\FloorActivity.kt:94:                            "tid" to tid!!,
/activities\FloorActivity.kt:95:                            "pid" to pid!!
/activities\FloorActivity.kt:96:                    ))
/activities\FloorActivity.kt:97:                }
/activities\FloorActivity.kt:98:                return true
/activities\FloorActivity.kt:99:            }
/activities\FloorActivity.kt:100:        }
/activities\FloorActivity.kt:101:        return super.onOptionsItemSelected(item)
/activities\FloorActivity.kt:102:    }
/activities\FloorActivity.kt:104:    private fun initData() {
/activities\FloorActivity.kt:105:        val intent = intent
/activities\FloorActivity.kt:106:        tid = intent.getStringExtra("tid")
/activities\FloorActivity.kt:107:        pid = intent.getStringExtra("pid")
/activities\FloorActivity.kt:108:        spid = intent.getStringExtra("spid")
/activities\FloorActivity.kt:109:        if (tid != null && (pid != null || spid != null)) {
/activities\FloorActivity.kt:110:            hasMore = true
/activities\FloorActivity.kt:111:            refresh()
/activities\FloorActivity.kt:112:        }
/activities\FloorActivity.kt:113:    }
/activities\FloorActivity.kt:115:    private fun initView() {
/activities\FloorActivity.kt:116:        setSupportActionBar(toolbar)
/activities\FloorActivity.kt:117:        supportActionBar?.setTitle(R.string.title_floor)
/activities\FloorActivity.kt:118:        supportActionBar?.setDisplayHomeAsUpEnabled(true)
/activities\FloorActivity.kt:119:        recyclerViewAdapter = RecyclerFloorAdapter(this).apply {
/activities\FloorActivity.kt:120:            openAutoLoadMore()
/activities\FloorActivity.kt:121:            setLoadingView(R.layout.layout_footer_loading)
/activities\FloorActivity.kt:122:            setLoadEndView(R.layout.layout_footer_loadend)
/activities\FloorActivity.kt:123:            setLoadFailedView(R.layout.layout_footer_load_failed)
/activities\FloorActivity.kt:124:            setOnLoadMoreListener { isReload: Boolean ->
/activities\FloorActivity.kt:125:                if (isReload) {
/activities\FloorActivity.kt:126:                    refresh()
/activities\FloorActivity.kt:127:                } else {
/activities\FloorActivity.kt:128:                    loadMore()
/activities\FloorActivity.kt:129:                }
/activities\FloorActivity.kt:130:            }
/activities\FloorActivity.kt:131:        }
/activities\FloorActivity.kt:132:        recyclerView.apply {
/activities\FloorActivity.kt:133:            layoutManager = MyLinearLayoutManager(this@FloorActivity)
/activities\FloorActivity.kt:134:            adapter = recyclerViewAdapter
/activities\FloorActivity.kt:135:            addItemDecoration(ThreadDivider(this@FloorActivity))
/activities\FloorActivity.kt:136:        }
/activities\FloorActivity.kt:137:        refreshLayout.apply {
/activities\FloorActivity.kt:138:            ThemeUtil.setThemeForSwipeRefreshLayout(this)
/activities\FloorActivity.kt:139:            setOnRefreshListener { refresh() }
/activities\FloorActivity.kt:140:        }
/activities\FloorActivity.kt:141:    }
/activities\FloorActivity.kt:143:    @OnClick(R.id.floor_reply_bar)
/activities\FloorActivity.kt:144:    fun onReplyBarClick(view: View) {
/activities\FloorActivity.kt:145:        if (dataBean == null) {
/activities\FloorActivity.kt:146:            return
/activities\FloorActivity.kt:147:        }
/activities\FloorActivity.kt:148:        val floor = dataBean!!.post!!.floor.toInt()
/activities\FloorActivity.kt:149:        val pn = floor - floor % 30
/activities\FloorActivity.kt:150:        startActivity(Intent(this, ReplyActivity::class.java)
/activities\FloorActivity.kt:151:                .putExtra("data",
/activities\FloorActivity.kt:152:                        ReplyInfoBean(dataBean!!.thread!!.id,
/activities\FloorActivity.kt:153:                                dataBean!!.forum!!.id,
/activities\FloorActivity.kt:154:                                dataBean!!.forum!!.name,
/activities\FloorActivity.kt:155:                                dataBean!!.anti!!.tbs,
/activities\FloorActivity.kt:156:                                dataBean!!.post!!.id,
/activities\FloorActivity.kt:157:                                dataBean!!.post!!.floor,
/activities\FloorActivity.kt:158:                                dataBean!!.post!!.author.nameShow,
/activities\FloorActivity.kt:159:                                AccountUtil.getLoginInfo(this)!!.nameShow).setPn(pn.toString()).toString()))
/activities\FloorActivity.kt:160:    }
/activities\FloorActivity.kt:162:    private fun refresh() {
/activities\FloorActivity.kt:163:        refreshLayout.isRefreshing = true
/activities\FloorActivity.kt:164:        TiebaApi.getInstance()
/activities\FloorActivity.kt:165:                .floor(tid!!, pn, pid, spid)
/activities\FloorActivity.kt:166:                .enqueue(object : Callback<SubFloorListBean> {
/activities\FloorActivity.kt:167:                    override fun onFailure(call: Call<SubFloorListBean>, t: Throwable) {
/activities\FloorActivity.kt:168:                        Toast.makeText(this@FloorActivity, t.message, Toast.LENGTH_SHORT).show()
/activities\FloorActivity.kt:169:                        recyclerViewAdapter!!.loadFailed()
/activities\FloorActivity.kt:170:                        refreshLayout.isRefreshing = false
/activities\FloorActivity.kt:171:                    }
/activities\FloorActivity.kt:173:                    override fun onResponse(call: Call<SubFloorListBean>, response: Response<SubFloorListBean>) {
/activities\FloorActivity.kt:174:                        val subFloorListBean = response.body() ?: return
/activities\FloorActivity.kt:175:                        dataBean = subFloorListBean
/activities\FloorActivity.kt:176:                        recyclerViewAdapter!!.setData(subFloorListBean)
/activities\FloorActivity.kt:177:                        pid = subFloorListBean.post!!.id
/activities\FloorActivity.kt:178:                        spid = null
/activities\FloorActivity.kt:179:                        hasMore = subFloorListBean.page!!.currentPage.toInt() < subFloorListBean.page.totalPage.toInt()
/activities\FloorActivity.kt:180:                        if (!hasMore) {
/activities\FloorActivity.kt:181:                            recyclerViewAdapter!!.loadEnd()
/activities\FloorActivity.kt:182:                        }
/activities\FloorActivity.kt:183:                        toolbar.title = getString(R.string.title_floor_loaded, subFloorListBean.post.floor)
/activities\FloorActivity.kt:184:                        refreshLayout.isRefreshing = false
/activities\FloorActivity.kt:185:                    }
/activities\FloorActivity.kt:186:                })
/activities\FloorActivity.kt:187:    }
/activities\FloorActivity.kt:189:    private fun loadMore() {
/activities\FloorActivity.kt:190:        if (!hasMore) return
/activities\FloorActivity.kt:191:        TiebaApi.getInstance()
/activities\FloorActivity.kt:192:                .floor(tid!!, pn, pid, spid)
/activities\FloorActivity.kt:193:                .enqueue(object : Callback<SubFloorListBean> {
/activities\FloorActivity.kt:194:                    override fun onFailure(call: Call<SubFloorListBean>, t: Throwable) {
/activities\FloorActivity.kt:195:                        recyclerViewAdapter!!.loadFailed()
/activities\FloorActivity.kt:196:                    }
/activities\FloorActivity.kt:198:                    override fun onResponse(call: Call<SubFloorListBean>, response: Response<SubFloorListBean>) {
/activities\FloorActivity.kt:199:                        val subFloorListBean = response.body() ?: return
/activities\FloorActivity.kt:200:                        dataBean = subFloorListBean
/activities\FloorActivity.kt:201:                        recyclerViewAdapter!!.addData(subFloorListBean)
/activities\FloorActivity.kt:202:                        pid = subFloorListBean.post!!.id
/activities\FloorActivity.kt:203:                        spid = null
/activities\FloorActivity.kt:204:                        hasMore = subFloorListBean.page!!.currentPage.toInt() < subFloorListBean.page.totalPage.toInt()
/activities\FloorActivity.kt:205:                        if (!hasMore) {
/activities\FloorActivity.kt:206:                            recyclerViewAdapter!!.loadEnd()
/activities\FloorActivity.kt:207:                        }
/activities\FloorActivity.kt:208:                        pn += 1
/activities\FloorActivity.kt:209:                    }
/activities\FloorActivity.kt:210:                })
/activities\FloorActivity.kt:211:    }
/activities\FloorActivity.kt:212:}/activities\ForumActivity.kt:1:@file:Suppress("DEPRECATION")
/activities\ForumActivity.kt:3:package com.huanchengfly.tieba.post.activities
/activities\ForumActivity.kt:5:import android.animation.Animator
/activities\ForumActivity.kt:6:import android.animation.AnimatorListenerAdapter
/activities\ForumActivity.kt:7:import android.content.Intent
/activities\ForumActivity.kt:8:import android.content.res.ColorStateList
/activities\ForumActivity.kt:9:import android.graphics.Bitmap
/activities\ForumActivity.kt:10:import android.net.Uri
/activities\ForumActivity.kt:11:import android.os.Build
/activities\ForumActivity.kt:12:import android.os.Bundle
/activities\ForumActivity.kt:13:import android.text.TextUtils
/activities\ForumActivity.kt:14:import android.view.Menu
/activities\ForumActivity.kt:15:import android.view.MenuItem
/activities\ForumActivity.kt:16:import android.view.View
/activities\ForumActivity.kt:17:import android.view.ViewGroup
/activities\ForumActivity.kt:18:import android.widget.*
/activities\ForumActivity.kt:19:import androidx.appcompat.widget.ListPopupWindow
/activities\ForumActivity.kt:20:import androidx.core.content.pm.ShortcutInfoCompat
/activities\ForumActivity.kt:21:import androidx.core.content.pm.ShortcutManagerCompat
/activities\ForumActivity.kt:22:import androidx.core.graphics.drawable.IconCompat
/activities\ForumActivity.kt:23:import androidx.fragment.app.Fragment
/activities\ForumActivity.kt:24:import butterknife.BindView
/activities\ForumActivity.kt:25:import cn.jzvd.Jzvd
/activities\ForumActivity.kt:26:import com.bumptech.glide.Glide
/activities\ForumActivity.kt:27:import com.bumptech.glide.request.RequestOptions
/activities\ForumActivity.kt:28:import com.bumptech.glide.request.target.SimpleTarget
/activities\ForumActivity.kt:29:import com.bumptech.glide.request.transition.Transition
/activities\ForumActivity.kt:30:import com.google.android.material.appbar.AppBarLayout
/activities\ForumActivity.kt:31:import com.google.android.material.appbar.AppBarLayout.OnOffsetChangedListener
/activities\ForumActivity.kt:32:import com.google.android.material.appbar.CollapsingToolbarLayout
/activities\ForumActivity.kt:33:import com.google.android.material.button.MaterialButton
/activities\ForumActivity.kt:34:import com.google.android.material.floatingactionbutton.FloatingActionButton
/activities\ForumActivity.kt:35:import com.google.android.material.snackbar.Snackbar
/activities\ForumActivity.kt:36:import com.google.android.material.tabs.TabLayout
/activities\ForumActivity.kt:37:import com.google.android.material.tabs.TabLayout.OnTabSelectedListener
/activities\ForumActivity.kt:38:import com.huanchengfly.tieba.post.R
/activities\ForumActivity.kt:39:import com.huanchengfly.tieba.post.adapters.FragmentTabViewPagerAdapter
/activities\ForumActivity.kt:40:import com.huanchengfly.tieba.post.api.ForumSortType
/activities\ForumActivity.kt:41:import com.huanchengfly.tieba.post.api.TiebaApi
/activities\ForumActivity.kt:42:import com.huanchengfly.tieba.post.api.models.CommonResponse
/activities\ForumActivity.kt:43:import com.huanchengfly.tieba.post.api.models.ForumPageBean
/activities\ForumActivity.kt:44:import com.huanchengfly.tieba.post.api.models.LikeForumResultBean
/activities\ForumActivity.kt:45:import com.huanchengfly.tieba.post.api.models.SignResultBean
/activities\ForumActivity.kt:46:import com.huanchengfly.tieba.post.fragments.ForumFragment
/activities\ForumActivity.kt:47:import com.huanchengfly.tieba.post.fragments.ForumFragment.OnRefreshedListener
/activities\ForumActivity.kt:48:import com.huanchengfly.tieba.post.fragments.ForumInfoFragment
/activities\ForumActivity.kt:49:import com.huanchengfly.tieba.post.interfaces.Refreshable
/activities\ForumActivity.kt:50:import com.huanchengfly.tieba.post.interfaces.ScrollTopable
/activities\ForumActivity.kt:51:import com.huanchengfly.tieba.post.models.PhotoViewBean
/activities\ForumActivity.kt:52:import com.huanchengfly.tieba.post.models.database.History
/activities\ForumActivity.kt:53:import com.huanchengfly.tieba.post.toDp
/activities\ForumActivity.kt:54:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils
/activities\ForumActivity.kt:55:import com.huanchengfly.tieba.post.utils.*
/activities\ForumActivity.kt:56:import com.huanchengfly.tieba.post.utils.preload.PreloadUtil
/activities\ForumActivity.kt:57:import com.huanchengfly.tieba.post.widgets.MyViewPager
/activities\ForumActivity.kt:58:import com.huanchengfly.tieba.post.widgets.theme.TintProgressBar
/activities\ForumActivity.kt:59:import com.huanchengfly.tieba.post.widgets.theme.TintToolbar
/activities\ForumActivity.kt:60:import com.lapism.searchview.widget.SearchView
/activities\ForumActivity.kt:61:import retrofit2.Call
/activities\ForumActivity.kt:62:import retrofit2.Callback
/activities\ForumActivity.kt:63:import retrofit2.Response
/activities\ForumActivity.kt:64:import java.util.*
/activities\ForumActivity.kt:65:import kotlin.math.abs
/activities\ForumActivity.kt:67:class ForumActivity : BaseActivity(), View.OnClickListener, OnRefreshedListener {
/activities\ForumActivity.kt:68:    private var mSortType = ForumSortType.REPLY_TIME
/activities\ForumActivity.kt:69:    private var forumName: String? = null
/activities\ForumActivity.kt:70:    private var firstLoaded = false
/activities\ForumActivity.kt:71:    private var animated = false
/activities\ForumActivity.kt:73:    @BindView(R.id.toolbar)
/activities\ForumActivity.kt:74:    lateinit var toolbar: TintToolbar
/activities\ForumActivity.kt:76:    @BindView(R.id.forum_view_pager)
/activities\ForumActivity.kt:77:    lateinit var myViewPager: MyViewPager
/activities\ForumActivity.kt:78:    private var mAdapter: FragmentTabViewPagerAdapter? = null
/activities\ForumActivity.kt:79:    private var mDataBean: ForumPageBean? = null
/activities\ForumActivity.kt:81:    @BindView(R.id.fab)
/activities\ForumActivity.kt:82:    lateinit var fab: FloatingActionButton
/activities\ForumActivity.kt:83:    private var historyHelper: HistoryHelper? = null
/activities\ForumActivity.kt:85:    @BindView(R.id.toolbar_search_view)
/activities\ForumActivity.kt:86:    lateinit var searchView: SearchView
/activities\ForumActivity.kt:88:    @BindView(R.id.loading_view)
/activities\ForumActivity.kt:89:    lateinit var loadingView: View
/activities\ForumActivity.kt:91:    @BindView(R.id.toolbar_btn_right)
/activities\ForumActivity.kt:92:    lateinit var toolbarEndBtn: MaterialButton
/activities\ForumActivity.kt:94:    @BindView(R.id.header_view_parent)
/activities\ForumActivity.kt:95:    lateinit var headerView: View
/activities\ForumActivity.kt:97:    @BindView(R.id.forum_header_name)
/activities\ForumActivity.kt:98:    lateinit var headerNameTextView: TextView
/activities\ForumActivity.kt:100:    @BindView(R.id.forum_header_tip)
/activities\ForumActivity.kt:101:    lateinit var tipTextView: TextView
/activities\ForumActivity.kt:103:    @BindView(R.id.forum_header_avatar)
/activities\ForumActivity.kt:104:    lateinit var avatarView: ImageView
/activities\ForumActivity.kt:106:    @BindView(R.id.forum_header_button)
/activities\ForumActivity.kt:107:    lateinit var button: MaterialButton
/activities\ForumActivity.kt:109:    @BindView(R.id.forum_tab)
/activities\ForumActivity.kt:110:    lateinit var headerTabView: TabLayout
/activities\ForumActivity.kt:112:    @BindView(R.id.forum_header_progress)
/activities\ForumActivity.kt:113:    lateinit var progressBar: ProgressBar
/activities\ForumActivity.kt:115:    @BindView(R.id.appbar)
/activities\ForumActivity.kt:116:    lateinit var appbar: AppBarLayout
/activities\ForumActivity.kt:118:    @BindView(R.id.forum_sort_text)
/activities\ForumActivity.kt:119:    lateinit var sortTypeText: TextView
/activities\ForumActivity.kt:121:    @BindView(R.id.forum_tab_holder)
/activities\ForumActivity.kt:122:    lateinit var tabHolder: View
/activities\ForumActivity.kt:124:    override fun getLayoutId(): Int {
/activities\ForumActivity.kt:125:        return R.layout.activity_forum
/activities\ForumActivity.kt:126:    }
/activities\ForumActivity.kt:128:    override fun onCreate(savedInstanceState: Bundle?) {
/activities\ForumActivity.kt:129:        super.onCreate(savedInstanceState)
/activities\ForumActivity.kt:130:        ThemeUtil.setTranslucentThemeBackground(findViewById(R.id.background))
/activities\ForumActivity.kt:131:        historyHelper = HistoryHelper(this)
/activities\ForumActivity.kt:132:        animated = false
/activities\ForumActivity.kt:133:        val intent = intent
/activities\ForumActivity.kt:134:        val title: String
/activities\ForumActivity.kt:135:        if (intent.getBooleanExtra("jumpByUrl", false)) {
/activities\ForumActivity.kt:136:            val url = intent.getStringExtra("url")
/activities\ForumActivity.kt:137:            val uri = Uri.parse(url)
/activities\ForumActivity.kt:138:            forumName = uri.getQueryParameter("kw")
/activities\ForumActivity.kt:139:            title = getString(R.string.title_forum, forumName)
/activities\ForumActivity.kt:140:        } else {
/activities\ForumActivity.kt:141:            forumName = intent.getStringExtra(EXTRA_FORUM_NAME)
/activities\ForumActivity.kt:142:            title = getString(R.string.title_forum, forumName)
/activities\ForumActivity.kt:143:        }
/activities\ForumActivity.kt:144:        if (forumName == null) {
/activities\ForumActivity.kt:145:            finish()
/activities\ForumActivity.kt:146:            return
/activities\ForumActivity.kt:147:        }
/activities\ForumActivity.kt:148:        initView()
/activities\ForumActivity.kt:149:        setTitle(title)
/activities\ForumActivity.kt:150:        initData()
/activities\ForumActivity.kt:151:    }
/activities\ForumActivity.kt:153:    private fun getSortType(): ForumSortType {
/activities\ForumActivity.kt:154:        val defaultSortType = appPreferences.defaultSortType!!.toInt()
/activities\ForumActivity.kt:155:        return ForumSortType.valueOf(SharedPreferencesUtil.get(this, SharedPreferencesUtil.SP_SETTINGS)
/activities\ForumActivity.kt:156:                .getInt(forumName + "_sort_type", defaultSortType))
/activities\ForumActivity.kt:157:    }
/activities\ForumActivity.kt:159:    private fun setSortType(sortType: ForumSortType) {
/activities\ForumActivity.kt:160:        this.mSortType = sortType
/activities\ForumActivity.kt:161:        for (fragment in mAdapter!!.fragments) {
/activities\ForumActivity.kt:162:            if (fragment is ForumFragment) {
/activities\ForumActivity.kt:163:                fragment.setSortType(sortType)
/activities\ForumActivity.kt:164:            }
/activities\ForumActivity.kt:165:        }
/activities\ForumActivity.kt:166:        refresh()
/activities\ForumActivity.kt:167:        SharedPreferencesUtil.get(this, SharedPreferencesUtil.SP_SETTINGS)
/activities\ForumActivity.kt:168:                .edit()
/activities\ForumActivity.kt:169:                .putInt(forumName + "_sort_type", sortType.value)
/activities\ForumActivity.kt:170:                .apply()
/activities\ForumActivity.kt:171:    }
/activities\ForumActivity.kt:173:    private fun refresh() {
/activities\ForumActivity.kt:174:        refreshHeaderView()
/activities\ForumActivity.kt:175:        if (currentFragment is Refreshable) {
/activities\ForumActivity.kt:176:            (currentFragment as Refreshable).onRefresh()
/activities\ForumActivity.kt:177:        }
/activities\ForumActivity.kt:178:    }
/activities\ForumActivity.kt:180:    private fun initData() {
/activities\ForumActivity.kt:181:        firstLoaded = true
/activities\ForumActivity.kt:182:        mSortType = getSortType()
/activities\ForumActivity.kt:183:        /*
/activities\ForumActivity.kt:184:        if (baName != null) {
/activities\ForumActivity.kt:185:            refresh();
/activities\ForumActivity.kt:186:        }
/activities\ForumActivity.kt:187:        */
/activities\ForumActivity.kt:188:    }
/activities\ForumActivity.kt:190:    private fun initView() {
/activities\ForumActivity.kt:191:        findViewById(R.id.forum_sort).setOnClickListener(this)
/activities\ForumActivity.kt:192:        val collapsingToolbarLayout = findViewById(R.id.collapsing_toolbar) as CollapsingToolbarLayout
/activities\ForumActivity.kt:193:        collapsingToolbarLayout.setContentScrimColor(ThemeUtils.getColorByAttr(this, R.attr.colorToolbar))
/activities\ForumActivity.kt:194:        appbar.addOnOffsetChangedListener(OnOffsetChangedListener { appBarLayout: AppBarLayout, verticalOffset: Int ->
/activities\ForumActivity.kt:195:            if (animated && ThemeUtil.THEME_TRANSLUCENT == ThemeUtil.getTheme(this)) {
/activities\ForumActivity.kt:196:                val actionBarSize = Util.getDimenByAttr(this, R.attr.actionBarSize, 0)
/activities\ForumActivity.kt:197:                if (abs(verticalOffset) > actionBarSize / 2) {
/activities\ForumActivity.kt:198:                    AnimUtil.alphaOut(headerView).setListener(object : AnimatorListenerAdapter() {
/activities\ForumActivity.kt:199:                        override fun onAnimationEnd(animation: Animator) {
/activities\ForumActivity.kt:200:                            headerView.visibility = View.INVISIBLE
/activities\ForumActivity.kt:201:                        }
/activities\ForumActivity.kt:202:                    }).start()
/activities\ForumActivity.kt:203:                } else {
/activities\ForumActivity.kt:204:                    AnimUtil.alphaIn(headerView).start()
/activities\ForumActivity.kt:205:                }
/activities\ForumActivity.kt:206:            }
/activities\ForumActivity.kt:207:            if (mDataBean != null && mDataBean!!.forum != null && abs(verticalOffset) >= appBarLayout.totalScrollRange) {
/activities\ForumActivity.kt:208:                tabHolder.setBackgroundColor(ThemeUtils.getColorByAttr(this, R.attr.colorBg))
/activities\ForumActivity.kt:209:            } else {
/activities\ForumActivity.kt:210:                tabHolder.setBackgroundResource(R.drawable.bg_round)
/activities\ForumActivity.kt:211:            }
/activities\ForumActivity.kt:212:            val titleVisible = mDataBean != null && forumName != null && abs(verticalOffset) >= headerView.height / 2
/activities\ForumActivity.kt:213:            title = if (titleVisible) getString(R.string.title_forum, forumName) else null
/activities\ForumActivity.kt:214:            toolbarEndBtn.visibility = if (titleVisible) View.VISIBLE else View.GONE
/activities\ForumActivity.kt:215:        })
/activities\ForumActivity.kt:216:        mAdapter = FragmentTabViewPagerAdapter(supportFragmentManager).apply {
/activities\ForumActivity.kt:217:            addFragment(ForumInfoFragment.newInstance(forumName), getString(R.string.tab_forum_info))
/activities\ForumActivity.kt:218:            addFragment(
/activities\ForumActivity.kt:219:                    if (PreloadUtil.isPreloading(this@ForumActivity))
/activities\ForumActivity.kt:220:                        ForumFragment.newInstance(forumName, false, getSortType(), PreloadUtil.getPreloadId(this@ForumActivity))
/activities\ForumActivity.kt:221:                    else
/activities\ForumActivity.kt:222:                        ForumFragment.newInstance(forumName, false, getSortType()),
/activities\ForumActivity.kt:223:                    getString(R.string.tab_forum_1)
/activities\ForumActivity.kt:224:            )
/activities\ForumActivity.kt:225:            addFragment(ForumFragment.newInstance(forumName, true, getSortType()), getString(R.string.tab_forum_good))
/activities\ForumActivity.kt:226:        }
/activities\ForumActivity.kt:227:        myViewPager.apply {
/activities\ForumActivity.kt:228:            adapter = mAdapter
/activities\ForumActivity.kt:229:            offscreenPageLimit = 2
/activities\ForumActivity.kt:230:            setCurrentItem(1, false)
/activities\ForumActivity.kt:231:        }
/activities\ForumActivity.kt:232:        headerTabView.apply {
/activities\ForumActivity.kt:233:            setupWithViewPager(myViewPager)
/activities\ForumActivity.kt:234:            addOnTabSelectedListener(object : OnTabSelectedListener {
/activities\ForumActivity.kt:235:                override fun onTabSelected(tab: TabLayout.Tab) {}
/activities\ForumActivity.kt:236:                override fun onTabUnselected(tab: TabLayout.Tab) {}
/activities\ForumActivity.kt:237:                override fun onTabReselected(tab: TabLayout.Tab) {
/activities\ForumActivity.kt:238:                    refresh()
/activities\ForumActivity.kt:239:                }
/activities\ForumActivity.kt:240:            })
/activities\ForumActivity.kt:241:            getTabAt(0)!!.setText(null).setIcon(R.drawable.ic_round_info)
/activities\ForumActivity.kt:242:        }
/activities\ForumActivity.kt:243:        refreshHeaderView()
/activities\ForumActivity.kt:244:        fab.hide()
/activities\ForumActivity.kt:245:        fab.supportImageTintList = ColorStateList.valueOf(resources.getColor(R.color.white))
/activities\ForumActivity.kt:246:        myViewPager.visibility = View.INVISIBLE
/activities\ForumActivity.kt:247:        searchView.setHint(getString(R.string.hint_search_in_ba, forumName))
/activities\ForumActivity.kt:248:        setSupportActionBar(toolbar)
/activities\ForumActivity.kt:249:        val actionBar = supportActionBar
/activities\ForumActivity.kt:250:        actionBar?.setDisplayHomeAsUpEnabled(true)
/activities\ForumActivity.kt:251:        button.setOnClickListener(this)
/activities\ForumActivity.kt:252:        toolbar.setOnClickListener(this)
/activities\ForumActivity.kt:253:        toolbarEndBtn.setOnClickListener(this)
/activities\ForumActivity.kt:254:        fab.setOnClickListener(this)
/activities\ForumActivity.kt:255:    }
/activities\ForumActivity.kt:257:    override fun setTitle(newTitle: String) {
/activities\ForumActivity.kt:258:        toolbar.title = newTitle
/activities\ForumActivity.kt:259:    }
/activities\ForumActivity.kt:261:    override fun onOptionsItemSelected(item: MenuItem): Boolean {
/activities\ForumActivity.kt:262:        when (item.itemId) {
/activities\ForumActivity.kt:263:            R.id.menu_unfollow -> {
/activities\ForumActivity.kt:264:                if (mDataBean != null) {
/activities\ForumActivity.kt:265:                    DialogUtil.build(this@ForumActivity)
/activities\ForumActivity.kt:266:                            .setTitle(R.string.title_dialog_unfollow)
/activities\ForumActivity.kt:267:                            .setNegativeButton(R.string.button_cancel, null)
/activities\ForumActivity.kt:268:                            .setPositiveButton(R.string.button_sure_default) { _, _ ->
/activities\ForumActivity.kt:269:                                TiebaApi.getInstance().unlikeForum(mDataBean!!.forum?.id!!, mDataBean!!.forum?.name!!, mDataBean!!.anti?.tbs!!).enqueue(object : Callback<CommonResponse> {
/activities\ForumActivity.kt:270:                                    override fun onFailure(call: Call<CommonResponse>, t: Throwable) {
/activities\ForumActivity.kt:271:                                        Util.createSnackbar(myViewPager, getString(R.string.toast_unlike_failed, t.message), Snackbar.LENGTH_SHORT).show()
/activities\ForumActivity.kt:272:                                    }
/activities\ForumActivity.kt:274:                                    override fun onResponse(call: Call<CommonResponse>, response: Response<CommonResponse>) {
/activities\ForumActivity.kt:275:                                        Util.createSnackbar(myViewPager, R.string.toast_unlike_success, Snackbar.LENGTH_SHORT).show()
/activities\ForumActivity.kt:276:                                        refresh()
/activities\ForumActivity.kt:277:                                    }
/activities\ForumActivity.kt:278:                                })
/activities\ForumActivity.kt:279:                            }
/activities\ForumActivity.kt:280:                            .create()
/activities\ForumActivity.kt:281:                            .show()
/activities\ForumActivity.kt:282:                }
/activities\ForumActivity.kt:283:            }
/activities\ForumActivity.kt:284:            R.id.menu_share -> TiebaUtil.shareText(this, "https://tieba.baidu.com/f?kw=$forumName", getString(R.string.title_forum, forumName))
/activities\ForumActivity.kt:285:            R.id.menu_search -> startActivity(Intent(this, SearchPostActivity::class.java).putExtra(SearchPostActivity.PARAM_FORUM, forumName))
/activities\ForumActivity.kt:286:            R.id.menu_refresh -> refresh()
/activities\ForumActivity.kt:287:            R.id.menu_send_to_desktop -> if (ShortcutManagerCompat.isRequestPinShortcutSupported(this)) {
/activities\ForumActivity.kt:288:                if (mDataBean != null) {
/activities\ForumActivity.kt:289:                    Glide.with(this)
/activities\ForumActivity.kt:290:                            .asBitmap()
/activities\ForumActivity.kt:291:                            .apply(RequestOptions.circleCropTransform())
/activities\ForumActivity.kt:292:                            .load(mDataBean!!.forum?.avatar)
/activities\ForumActivity.kt:293:                            .into(object : SimpleTarget<Bitmap>() {
/activities\ForumActivity.kt:294:                                override fun onResourceReady(resource: Bitmap, transition: Transition<in Bitmap>?) {
/activities\ForumActivity.kt:295:                                    val shortcutInfoIntent = Intent(this@ForumActivity, ForumActivity::class.java)
/activities\ForumActivity.kt:296:                                            .setAction(Intent.ACTION_VIEW)
/activities\ForumActivity.kt:297:                                            .putExtra(EXTRA_FORUM_NAME, mDataBean!!.forum?.name)
/activities\ForumActivity.kt:298:                                    val shortcutInfoCompat = ShortcutInfoCompat.Builder(this@ForumActivity, mDataBean!!.forum?.id!!)
/activities\ForumActivity.kt:299:                                            .setIntent(shortcutInfoIntent)
/activities\ForumActivity.kt:300:                                            .setShortLabel(mDataBean!!.forum?.name + "吧")
/activities\ForumActivity.kt:301:                                            .setIcon(IconCompat.createWithBitmap(resource))
/activities\ForumActivity.kt:302:                                            .build()
/activities\ForumActivity.kt:303:                                    ShortcutManagerCompat.requestPinShortcut(this@ForumActivity, shortcutInfoCompat, null)
/activities\ForumActivity.kt:304:                                    Util.createSnackbar(myViewPager, R.string.toast_send_to_desktop_success, Snackbar.LENGTH_SHORT).show()
/activities\ForumActivity.kt:305:                                }
/activities\ForumActivity.kt:306:                            })
/activities\ForumActivity.kt:307:                } else {
/activities\ForumActivity.kt:308:                    Util.createSnackbar(myViewPager, getString(R.string.toast_send_to_desktop_failed, "获取吧信息失败"), Snackbar.LENGTH_SHORT).show()
/activities\ForumActivity.kt:309:                }
/activities\ForumActivity.kt:310:            } else {
/activities\ForumActivity.kt:311:                Util.createSnackbar(myViewPager, getString(R.string.toast_send_to_desktop_failed, "启动器不支持创建快捷方式"), Snackbar.LENGTH_SHORT).show()
/activities\ForumActivity.kt:312:            }
/activities\ForumActivity.kt:313:            R.id.menu_exit -> finish()
/activities\ForumActivity.kt:314:            else -> {
/activities\ForumActivity.kt:315:            }
/activities\ForumActivity.kt:316:        }
/activities\ForumActivity.kt:317:        return super.onOptionsItemSelected(item)
/activities\ForumActivity.kt:318:    }
/activities\ForumActivity.kt:320:    override fun onCreateOptionsMenu(menu: Menu): Boolean {
/activities\ForumActivity.kt:321:        menuInflater.inflate(R.menu.menu_ba_toolbar, menu)
/activities\ForumActivity.kt:322:        return super.onCreateOptionsMenu(menu)
/activities\ForumActivity.kt:323:    }
/activities\ForumActivity.kt:325:    override fun onClick(v: View) {
/activities\ForumActivity.kt:326:        when (v.id) {
/activities\ForumActivity.kt:327:            R.id.forum_sort -> {
/activities\ForumActivity.kt:328:                val sorts: MutableList<String> = ArrayList()
/activities\ForumActivity.kt:329:                sorts.add(getString(R.string.title_sort_by_reply))
/activities\ForumActivity.kt:330:                sorts.add(getString(R.string.title_sort_by_send))
/activities\ForumActivity.kt:331:                sorts.add(getString(R.string.title_sort_by_like_user))
/activities\ForumActivity.kt:332:                val listPopupWindow = ListPopupWindow(this)
/activities\ForumActivity.kt:333:                PopupUtil.replaceBackground(listPopupWindow)
/activities\ForumActivity.kt:334:                listPopupWindow.anchorView = v
/activities\ForumActivity.kt:335:                val width = v.width + 36.toDp()
/activities\ForumActivity.kt:336:                listPopupWindow.width = width
/activities\ForumActivity.kt:337:                listPopupWindow.height = ViewGroup.LayoutParams.WRAP_CONTENT
/activities\ForumActivity.kt:338:                val arrayAdapter: ArrayAdapter<*> = ArrayAdapter(this, R.layout.item_list, R.id.item_title, sorts)
/activities\ForumActivity.kt:339:                listPopupWindow.setAdapter(arrayAdapter)
/activities\ForumActivity.kt:340:                listPopupWindow.setOnItemClickListener { _, _, position: Int, _ ->
/activities\ForumActivity.kt:341:                    listPopupWindow.dismiss()
/activities\ForumActivity.kt:342:                    setSortType(ForumSortType.valueOf(position))
/activities\ForumActivity.kt:343:                }
/activities\ForumActivity.kt:344:                listPopupWindow.show()
/activities\ForumActivity.kt:345:                v.tag = listPopupWindow
/activities\ForumActivity.kt:346:            }
/activities\ForumActivity.kt:347:            R.id.fab -> {
/activities\ForumActivity.kt:348:                if (mDataBean == null) {
/activities\ForumActivity.kt:349:                    return
/activities\ForumActivity.kt:350:                }
/activities\ForumActivity.kt:351:                if ("0" != mDataBean!!.anti?.ifPost) {
/activities\ForumActivity.kt:352:                    NavigationHelper.newInstance(this).navigationByData(NavigationHelper.ACTION_THREAD_POST, forumName)
/activities\ForumActivity.kt:353:                } else {
/activities\ForumActivity.kt:354:                    if (!TextUtils.isEmpty(mDataBean!!.anti?.forbidInfo)) {
/activities\ForumActivity.kt:355:                        Toast.makeText(this, mDataBean!!.anti?.forbidInfo, Toast.LENGTH_SHORT).show()
/activities\ForumActivity.kt:356:                    }
/activities\ForumActivity.kt:357:                }
/activities\ForumActivity.kt:358:            }
/activities\ForumActivity.kt:359:            R.id.toolbar -> scrollToTop()
/activities\ForumActivity.kt:360:            R.id.forum_header_button, R.id.toolbar_btn_right -> if (mDataBean != null) {
/activities\ForumActivity.kt:361:                if ("1" == mDataBean!!.forum?.isLike) {
/activities\ForumActivity.kt:362:                    if ("0" == mDataBean!!.forum?.signInInfo?.userInfo?.isSignIn) {
/activities\ForumActivity.kt:363:                        TiebaApi.getInstance().sign(mDataBean!!.forum?.name!!, mDataBean!!.anti?.tbs!!).enqueue(object : Callback<SignResultBean> {
/activities\ForumActivity.kt:364:                            override fun onFailure(call: Call<SignResultBean>, t: Throwable) {
/activities\ForumActivity.kt:365:                                Util.createSnackbar(myViewPager, getString(R.string.toast_sign_failed, t.message), Snackbar.LENGTH_SHORT).show()
/activities\ForumActivity.kt:366:                            }
/activities\ForumActivity.kt:368:                            override fun onResponse(call: Call<SignResultBean>, response: Response<SignResultBean>) {
/activities\ForumActivity.kt:369:                                val signResultBean = response.body()!!
/activities\ForumActivity.kt:370:                                if (signResultBean.userInfo != null) {
/activities\ForumActivity.kt:371:                                    mDataBean!!.forum?.signInInfo?.userInfo?.isSignIn = "1"
/activities\ForumActivity.kt:372:                                    Util.createSnackbar(myViewPager, getString(R.string.toast_sign_success, signResultBean.userInfo.signBonusPoint, signResultBean.userInfo.userSignRank), Snackbar.LENGTH_SHORT).show()
/activities\ForumActivity.kt:373:                                    refreshHeaderView()
/activities\ForumActivity.kt:374:                                    refreshForumInfo()
/activities\ForumActivity.kt:375:                                }
/activities\ForumActivity.kt:376:                            }
/activities\ForumActivity.kt:377:                        })
/activities\ForumActivity.kt:378:                    }
/activities\ForumActivity.kt:379:                } else {
/activities\ForumActivity.kt:380:                    TiebaApi.getInstance().likeForum(mDataBean!!.forum?.id!!, mDataBean!!.forum?.name!!, mDataBean!!.anti?.tbs!!).enqueue(object : Callback<LikeForumResultBean> {
/activities\ForumActivity.kt:381:                        override fun onFailure(call: Call<LikeForumResultBean>, t: Throwable) {
/activities\ForumActivity.kt:382:                            Toast.makeText(this@ForumActivity, getString(R.string.toast_like_failed, t.message), Toast.LENGTH_SHORT).show()
/activities\ForumActivity.kt:383:                        }
/activities\ForumActivity.kt:385:                        override fun onResponse(call: Call<LikeForumResultBean>, response: Response<LikeForumResultBean>) {
/activities\ForumActivity.kt:386:                            mDataBean!!.forum?.isLike = "1"
/activities\ForumActivity.kt:387:                            Toast.makeText(this@ForumActivity, getString(R.string.toast_like_success, response.body()!!.info?.memberSum), Toast.LENGTH_SHORT).show()
/activities\ForumActivity.kt:388:                            refreshHeaderView()
/activities\ForumActivity.kt:389:                            refreshForumInfo()
/activities\ForumActivity.kt:390:                        }
/activities\ForumActivity.kt:391:                    })
/activities\ForumActivity.kt:392:                }
/activities\ForumActivity.kt:393:            }
/activities\ForumActivity.kt:394:        }
/activities\ForumActivity.kt:395:    }
/activities\ForumActivity.kt:397:    private fun refreshHeaderView() {
/activities\ForumActivity.kt:398:        if (mDataBean != null) {
/activities\ForumActivity.kt:399:            headerView.visibility = View.VISIBLE
/activities\ForumActivity.kt:400:            if (avatarView.tag == null) {
/activities\ForumActivity.kt:401:                ImageUtil.load(avatarView, ImageUtil.LOAD_TYPE_AVATAR, mDataBean!!.forum?.avatar)
/activities\ForumActivity.kt:402:                ImageUtil.initImageView(avatarView, PhotoViewBean(mDataBean!!.forum?.avatar, false))
/activities\ForumActivity.kt:403:            }
/activities\ForumActivity.kt:404:            (progressBar as TintProgressBar?)!!.setProgressBackgroundTintResId(if (ThemeUtils.getColorByAttr(this, R.attr.colorToolbar) == ThemeUtils.getColorByAttr(this, R.attr.colorBg)) R.color.default_color_divider else R.color.default_color_toolbar_item_secondary)
/activities\ForumActivity.kt:405:            progressBar.visibility = if ("1" == mDataBean!!.forum?.isLike) View.VISIBLE else View.GONE
/activities\ForumActivity.kt:406:            try {
/activities\ForumActivity.kt:407:                progressBar.max = Integer.valueOf(mDataBean!!.forum?.levelUpScore!!)
/activities\ForumActivity.kt:408:                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
/activities\ForumActivity.kt:409:                    progressBar.setProgress(Integer.valueOf(mDataBean!!.forum?.curScore!!), true)
/activities\ForumActivity.kt:410:                } else {
/activities\ForumActivity.kt:411:                    progressBar.progress = Integer.valueOf(mDataBean!!.forum?.curScore!!)
/activities\ForumActivity.kt:412:                }
/activities\ForumActivity.kt:413:            } catch (ignored: Exception) {
/activities\ForumActivity.kt:414:            }
/activities\ForumActivity.kt:415:            headerNameTextView.text = getString(R.string.tip_forum_name, mDataBean!!.forum?.name)
/activities\ForumActivity.kt:416:            if ("1" == mDataBean!!.forum?.isLike) {
/activities\ForumActivity.kt:417:                if ("0" == mDataBean!!.forum?.signInInfo?.userInfo?.isSignIn) {
/activities\ForumActivity.kt:418:                    button.setText(R.string.button_sign_in)
/activities\ForumActivity.kt:419:                    button.isEnabled = true
/activities\ForumActivity.kt:420:                    toolbarEndBtn.setText(R.string.button_sign_in)
/activities\ForumActivity.kt:421:                    toolbarEndBtn.isEnabled = true
/activities\ForumActivity.kt:422:                } else {
/activities\ForumActivity.kt:423:                    button.setText(R.string.button_signed)
/activities\ForumActivity.kt:424:                    button.isEnabled = false
/activities\ForumActivity.kt:425:                    toolbarEndBtn.setText(R.string.button_signed)
/activities\ForumActivity.kt:426:                    toolbarEndBtn.isEnabled = false
/activities\ForumActivity.kt:427:                }
/activities\ForumActivity.kt:428:                tipTextView.text = getString(R.string.tip_forum_header_liked, mDataBean!!.forum?.userLevel, mDataBean!!.forum?.levelName)
/activities\ForumActivity.kt:429:            } else {
/activities\ForumActivity.kt:430:                button.setText(R.string.button_like)
/activities\ForumActivity.kt:431:                button.isEnabled = true
/activities\ForumActivity.kt:432:                toolbarEndBtn.setText(R.string.button_like)
/activities\ForumActivity.kt:433:                toolbarEndBtn.isEnabled = true
/activities\ForumActivity.kt:434:                tipTextView.text = mDataBean!!.forum?.slogan
/activities\ForumActivity.kt:435:            }
/activities\ForumActivity.kt:436:            when (mSortType) {
/activities\ForumActivity.kt:437:                ForumSortType.REPLY_TIME -> sortTypeText.setText(R.string.title_sort_by_reply)
/activities\ForumActivity.kt:438:                ForumSortType.SEND_TIME -> sortTypeText.setText(R.string.title_sort_by_send)
/activities\ForumActivity.kt:439:                ForumSortType.ONLY_FOLLOWED -> sortTypeText.setText(R.string.title_sort_by_like_user)
/activities\ForumActivity.kt:440:            }
/activities\ForumActivity.kt:441:        } else {
/activities\ForumActivity.kt:442:            headerView.visibility = View.INVISIBLE
/activities\ForumActivity.kt:443:        }
/activities\ForumActivity.kt:444:    }
/activities\ForumActivity.kt:446:    private val currentFragment: Fragment
/activities\ForumActivity.kt:447:        get() = mAdapter!!.getItem(headerTabView.selectedTabPosition)
/activities\ForumActivity.kt:449:    private fun scrollToTop() {
/activities\ForumActivity.kt:450:        if (currentFragment is ScrollTopable) {
/activities\ForumActivity.kt:451:            (currentFragment as ScrollTopable).scrollToTop()
/activities\ForumActivity.kt:452:        }
/activities\ForumActivity.kt:453:    }
/activities\ForumActivity.kt:455:    private fun refreshForumInfo() {
/activities\ForumActivity.kt:456:        TiebaApi.getInstance().forumPage(forumName!!, 1).enqueue(object : Callback<ForumPageBean> {
/activities\ForumActivity.kt:457:            override fun onFailure(call: Call<ForumPageBean>, t: Throwable) {}
/activities\ForumActivity.kt:459:            override fun onResponse(call: Call<ForumPageBean>, response: Response<ForumPageBean>) {
/activities\ForumActivity.kt:460:                val forumPageBean = response.body()!!
/activities\ForumActivity.kt:461:                mDataBean!!.setForum(forumPageBean.forum)
/activities\ForumActivity.kt:462:                mDataBean!!.setAnti(forumPageBean.anti)
/activities\ForumActivity.kt:463:                refreshHeaderView()
/activities\ForumActivity.kt:464:            }
/activities\ForumActivity.kt:466:        })
/activities\ForumActivity.kt:467:    }
/activities\ForumActivity.kt:469:    override fun onBackPressed() {
/activities\ForumActivity.kt:470:        if (searchView.isOpen) {
/activities\ForumActivity.kt:471:            searchView.close()
/activities\ForumActivity.kt:472:        } else {
/activities\ForumActivity.kt:473:            if (Jzvd.backPress()) {
/activities\ForumActivity.kt:474:                return
/activities\ForumActivity.kt:475:            }
/activities\ForumActivity.kt:476:            super.onBackPressed()
/activities\ForumActivity.kt:477:        }
/activities\ForumActivity.kt:478:    }
/activities\ForumActivity.kt:480:    override fun onSuccess(forumPageBean: ForumPageBean) {
/activities\ForumActivity.kt:481:        this.mDataBean = forumPageBean
/activities\ForumActivity.kt:482:        forumName = forumPageBean.forum?.name
/activities\ForumActivity.kt:483:        loadingView.visibility = View.GONE
/activities\ForumActivity.kt:484:        refreshHeaderView()
/activities\ForumActivity.kt:485:        if (!animated) {
/activities\ForumActivity.kt:486:            animated = true
/activities\ForumActivity.kt:487:            AnimUtil.alphaIn(myViewPager).start()
/activities\ForumActivity.kt:488:            AnimUtil.alphaIn(tabHolder).start()
/activities\ForumActivity.kt:489:            if (fab.isOrWillBeHidden) {
/activities\ForumActivity.kt:490:                fab.show()
/activities\ForumActivity.kt:491:            }
/activities\ForumActivity.kt:492:        }
/activities\ForumActivity.kt:493:        if (firstLoaded) {
/activities\ForumActivity.kt:494:            firstLoaded = false
/activities\ForumActivity.kt:495:            historyHelper!!.writeHistory(History()
/activities\ForumActivity.kt:496:                    .setTitle(getString(R.string.title_forum, forumName))
/activities\ForumActivity.kt:497:                    .setTimestamp(System.currentTimeMillis())
/activities\ForumActivity.kt:498:                    .setAvatar(forumPageBean.forum?.avatar)
/activities\ForumActivity.kt:499:                    .setType(HistoryHelper.TYPE_BA)
/activities\ForumActivity.kt:500:                    .setData(forumName))
/activities\ForumActivity.kt:501:        }
/activities\ForumActivity.kt:502:    }
/activities\ForumActivity.kt:504:    override fun onFailure(errorCode: Int, errorMsg: String?) {
/activities\ForumActivity.kt:505:        refreshHeaderView()
/activities\ForumActivity.kt:506:    }
/activities\ForumActivity.kt:508:    companion object {
/activities\ForumActivity.kt:509:        private const val TAG = "ForumActivity"
/activities\ForumActivity.kt:510:        const val EXTRA_FORUM_NAME = "forum_name"
/activities\ForumActivity.kt:511:    }
/activities\ForumActivity.kt:512:}/activities\MainActivity.kt:1:package com.huanchengfly.tieba.post.activities
/activities\MainActivity.kt:3:import android.annotation.SuppressLint
/activities\MainActivity.kt:4:import android.app.Activity
/activities\MainActivity.kt:5:import android.app.job.JobInfo
/activities\MainActivity.kt:6:import android.app.job.JobScheduler
/activities\MainActivity.kt:7:import android.content.*
/activities\MainActivity.kt:8:import android.graphics.Typeface
/activities\MainActivity.kt:9:import android.os.Bundle
/activities\MainActivity.kt:10:import android.os.Handler
/activities\MainActivity.kt:11:import android.text.SpannableStringBuilder
/activities\MainActivity.kt:12:import android.text.Spanned
/activities\MainActivity.kt:13:import android.text.TextUtils
/activities\MainActivity.kt:14:import android.text.style.ForegroundColorSpan
/activities\MainActivity.kt:15:import android.text.style.StyleSpan
/activities\MainActivity.kt:16:import android.util.Log
/activities\MainActivity.kt:17:import android.view.LayoutInflater
/activities\MainActivity.kt:18:import android.view.Menu
/activities\MainActivity.kt:19:import android.view.MenuItem
/activities\MainActivity.kt:20:import android.view.View
/activities\MainActivity.kt:21:import android.widget.FrameLayout
/activities\MainActivity.kt:22:import android.widget.TextView
/activities\MainActivity.kt:23:import android.widget.Toast
/activities\MainActivity.kt:24:import androidx.viewpager.widget.ViewPager.OnPageChangeListener
/activities\MainActivity.kt:25:import com.google.android.material.bottomnavigation.BottomNavigationItemView
/activities\MainActivity.kt:26:import com.google.android.material.bottomnavigation.BottomNavigationMenuView
/activities\MainActivity.kt:27:import com.google.android.material.bottomnavigation.BottomNavigationView
/activities\MainActivity.kt:28:import com.google.android.material.bottomnavigation.BottomNavigationView.OnNavigationItemReselectedListener
/activities\MainActivity.kt:29:import com.google.android.material.snackbar.Snackbar
/activities\MainActivity.kt:30:import com.huanchengfly.tieba.post.BaseApplication
/activities\MainActivity.kt:31:import com.huanchengfly.tieba.post.R
/activities\MainActivity.kt:32:import com.huanchengfly.tieba.post.adapters.MainSearchAdapter
/activities\MainActivity.kt:33:import com.huanchengfly.tieba.post.adapters.ViewPagerAdapter
/activities\MainActivity.kt:34:import com.huanchengfly.tieba.post.api.Error
/activities\MainActivity.kt:35:import com.huanchengfly.tieba.post.api.LiteApi.Companion.instance
/activities\MainActivity.kt:36:import com.huanchengfly.tieba.post.api.interfaces.CommonAPICallback
/activities\MainActivity.kt:37:import com.huanchengfly.tieba.post.api.interfaces.CommonCallback
/activities\MainActivity.kt:38:import com.huanchengfly.tieba.post.api.models.ChangelogBean
/activities\MainActivity.kt:39:import com.huanchengfly.tieba.post.api.models.NewUpdateBean
/activities\MainActivity.kt:40:import com.huanchengfly.tieba.post.fragments.ForumListFragment
/activities\MainActivity.kt:41:import com.huanchengfly.tieba.post.fragments.MessageFragment
/activities\MainActivity.kt:42:import com.huanchengfly.tieba.post.fragments.MyInfoFragment
/activities\MainActivity.kt:43:import com.huanchengfly.tieba.post.fragments.PersonalizedFeedFragment
/activities\MainActivity.kt:44:import com.huanchengfly.tieba.post.getColorCompat
/activities\MainActivity.kt:45:import com.huanchengfly.tieba.post.goToActivity
/activities\MainActivity.kt:46:import com.huanchengfly.tieba.post.interfaces.Refreshable
/activities\MainActivity.kt:47:import com.huanchengfly.tieba.post.models.MyInfoBean
/activities\MainActivity.kt:48:import com.huanchengfly.tieba.post.models.database.SearchHistory
/activities\MainActivity.kt:49:import com.huanchengfly.tieba.post.services.NotifyJobService
/activities\MainActivity.kt:50:import com.huanchengfly.tieba.post.utils.*
/activities\MainActivity.kt:51:import com.huanchengfly.tieba.post.widgets.MyViewPager
/activities\MainActivity.kt:52:import com.huanchengfly.tieba.post.widgets.theme.TintToolbar
/activities\MainActivity.kt:53:import com.lapism.searchview.Search
/activities\MainActivity.kt:54:import com.lapism.searchview.widget.SearchView
/activities\MainActivity.kt:56:open class MainActivity : BaseActivity(), BottomNavigationView.OnNavigationItemSelectedListener, MainSearchAdapter.OnSearchItemClickListener, OnNavigationItemReselectedListener {
/activities\MainActivity.kt:57:    var mAdapter: ViewPagerAdapter? = ViewPagerAdapter(supportFragmentManager)
/activities\MainActivity.kt:58:    private var mToolbar: TintToolbar? = null
/activities\MainActivity.kt:59:    private var mViewPager: MyViewPager? = null
/activities\MainActivity.kt:60:    private var mBottomNavigationView: BottomNavigationView? = null
/activities\MainActivity.kt:61:    private var menuView: BottomNavigationMenuView? = null
/activities\MainActivity.kt:62:    private var mSearchView: SearchView? = null
/activities\MainActivity.kt:63:    private var lastTime: Long = 0
/activities\MainActivity.kt:64:    private var navigationHelper: NavigationHelper? = null
/activities\MainActivity.kt:65:    private var hideExplore = false
/activities\MainActivity.kt:66:    private var badgeTextView: TextView? = null
/activities\MainActivity.kt:67:    private val newMessageReceiver: BroadcastReceiver = NewMessageReceiver()
/activities\MainActivity.kt:68:    private val accountSwitchReceiver: BroadcastReceiver = AccountSwitchReceiver()
/activities\MainActivity.kt:69:    private var appbar: FrameLayout? = null
/activities\MainActivity.kt:70:    private var mSearchAdapter: MainSearchAdapter? = null
/activities\MainActivity.kt:71:    public override fun onResume() {
/activities\MainActivity.kt:72:        val reason = ThemeUtil.getSharedPreferences(this).getString(ThemeUtil.SP_SWITCH_REASON, null)
/activities\MainActivity.kt:73:        val followSystemNight = appPreferences.followSystemNight
/activities\MainActivity.kt:74:        if (followSystemNight) {
/activities\MainActivity.kt:75:            if (BaseApplication.isSystemNight && !ThemeUtil.isNightMode(this)) {
/activities\MainActivity.kt:76:                SharedPreferencesUtil.put(ThemeUtil.getSharedPreferences(this), SP_SHOULD_SHOW_SNACKBAR, true)
/activities\MainActivity.kt:77:                ThemeUtil.switchToNightMode(this, ThemeUtil.REASON_FOLLOW_SYSTEM, false)
/activities\MainActivity.kt:78:            } else if (!BaseApplication.isSystemNight && ThemeUtil.isNightMode(this) && TextUtils.equals(reason, ThemeUtil.REASON_FOLLOW_SYSTEM)) {
/activities\MainActivity.kt:79:                SharedPreferencesUtil.put(ThemeUtil.getSharedPreferences(this), SP_SHOULD_SHOW_SNACKBAR, true)
/activities\MainActivity.kt:80:                ThemeUtil.switchFromNightMode(this, ThemeUtil.REASON_FOLLOW_SYSTEM, false)
/activities\MainActivity.kt:81:            }
/activities\MainActivity.kt:82:        }
/activities\MainActivity.kt:83:        super.onResume()
/activities\MainActivity.kt:84:        refreshSearchView()
/activities\MainActivity.kt:85:        ThemeUtil.setTranslucentThemeBackground(findViewById(R.id.background))
/activities\MainActivity.kt:86:        if (ThemeUtil.THEME_TRANSLUCENT == ThemeUtil.getTheme(this)) {
/activities\MainActivity.kt:87:            mBottomNavigationView!!.elevation = 0f
/activities\MainActivity.kt:88:        } else {
/activities\MainActivity.kt:89:            mBottomNavigationView!!.elevation = DisplayUtil.dp2px(this, 4f).toFloat()
/activities\MainActivity.kt:90:        }
/activities\MainActivity.kt:91:    }
/activities\MainActivity.kt:93:    override fun onNavigationItemReselected(item: MenuItem) {
/activities\MainActivity.kt:94:        val fragment = mAdapter!!.currentFragment
/activities\MainActivity.kt:95:        if (fragment is Refreshable) {
/activities\MainActivity.kt:96:            (fragment as Refreshable).onRefresh()
/activities\MainActivity.kt:97:        }
/activities\MainActivity.kt:98:    }
/activities\MainActivity.kt:100:    fun openSearch() {
/activities\MainActivity.kt:101:        mSearchView!!.open(null)
/activities\MainActivity.kt:102:    }
/activities\MainActivity.kt:104:    override fun onNavigationItemSelected(item: MenuItem): Boolean {
/activities\MainActivity.kt:105:        when (item.itemId) {
/activities\MainActivity.kt:106:            R.id.navbar_home -> {
/activities\MainActivity.kt:107:                mViewPager!!.setCurrentItem(0, false)
/activities\MainActivity.kt:108:                return true
/activities\MainActivity.kt:109:            }
/activities\MainActivity.kt:110:            R.id.navbar_explore -> {
/activities\MainActivity.kt:111:                if (!hideExplore) {
/activities\MainActivity.kt:112:                    mViewPager!!.setCurrentItem(1, false)
/activities\MainActivity.kt:113:                }
/activities\MainActivity.kt:114:                return true
/activities\MainActivity.kt:115:            }
/activities\MainActivity.kt:116:            R.id.navbar_msg -> {
/activities\MainActivity.kt:117:                mViewPager!!.setCurrentItem(if (hideExplore) 1 else 2, false)
/activities\MainActivity.kt:118:                return true
/activities\MainActivity.kt:119:            }
/activities\MainActivity.kt:120:            R.id.navbar_user -> {
/activities\MainActivity.kt:121:                mViewPager!!.setCurrentItem(if (hideExplore) 2 else 3, false)
/activities\MainActivity.kt:122:                return true
/activities\MainActivity.kt:123:            }
/activities\MainActivity.kt:124:        }
/activities\MainActivity.kt:125:        return false
/activities\MainActivity.kt:126:    }
/activities\MainActivity.kt:128:    private fun findView() {
/activities\MainActivity.kt:129:        appbar = findViewById(R.id.appbar) as FrameLayout
/activities\MainActivity.kt:130:        mToolbar = findViewById(R.id.toolbar) as TintToolbar
/activities\MainActivity.kt:131:        mSearchView = findViewById(R.id.toolbar_search_view) as SearchView
/activities\MainActivity.kt:132:        mBottomNavigationView = findViewById(R.id.navbar) as BottomNavigationView
/activities\MainActivity.kt:133:        menuView = mBottomNavigationView!!.getChildAt(0) as BottomNavigationMenuView
/activities\MainActivity.kt:134:        mViewPager = findViewById(R.id.mViewPager) as MyViewPager
/activities\MainActivity.kt:135:        /*
/activities\MainActivity.kt:136:        int[][] states = new int[2][];
/activities\MainActivity.kt:137:        states[0] = new int[] { android.R.attr.state_checked };
/activities\MainActivity.kt:138:        states[1] = new int[] {};
/activities\MainActivity.kt:139:        int color = Util.getColorByStyle(this, R.styleable.Theme_colorAccent, R.color.colorAccent);
/activities\MainActivity.kt:140:        mBottomNavigationView.setItemIconTintList(new ColorStateList(states, new int[]{color, getLighterColor(color, 0.2f)}));
/activities\MainActivity.kt:141:        mBottomNavigationView.setItemTextColor(new ColorStateList(states, new int[]{color, getLighterColor(color, 0.2f)}));
/activities\MainActivity.kt:142:        mBottomNavigationView.setLabelVisibilityMode(LabelVisibilityMode.LABEL_VISIBILITY_AUTO);
/activities\MainActivity.kt:143:        */
/activities\MainActivity.kt:144:    }
/activities\MainActivity.kt:146:    protected fun initView() {
/activities\MainActivity.kt:147:        mSearchAdapter = MainSearchAdapter(this)
/activities\MainActivity.kt:148:        mSearchAdapter!!.onSearchItemClickListener = this
/activities\MainActivity.kt:149:        mSearchView!!.adapter = mSearchAdapter
/activities\MainActivity.kt:150:        val itemView = menuView!!.getChildAt(if (hideExplore) 1 else 2) as BottomNavigationItemView
/activities\MainActivity.kt:151:        val badge = LayoutInflater.from(this@MainActivity).inflate(R.layout.layout_badge, menuView, false)
/activities\MainActivity.kt:152:        itemView.addView(badge)
/activities\MainActivity.kt:153:        badgeTextView = badge.findViewById(R.id.tv_msg_count)
/activities\MainActivity.kt:154:        navigationHelper = NavigationHelper.newInstance(this)
/activities\MainActivity.kt:155:        setSupportActionBar(mToolbar)
/activities\MainActivity.kt:156:        hideExplore = getSharedPreferences("settings", Context.MODE_PRIVATE).getBoolean("hideExplore", false)
/activities\MainActivity.kt:157:        if (hideExplore) {
/activities\MainActivity.kt:158:            mBottomNavigationView!!.menu.removeItem(R.id.navbar_explore)
/activities\MainActivity.kt:159:        }
/activities\MainActivity.kt:160:        val fragmentHome = ForumListFragment()
/activities\MainActivity.kt:161:        mAdapter!!.addFragment(fragmentHome)
/activities\MainActivity.kt:162:        if (!hideExplore) {
/activities\MainActivity.kt:163:            val personalizedFeedFragment = PersonalizedFeedFragment()
/activities\MainActivity.kt:164:            mAdapter!!.addFragment(personalizedFeedFragment)
/activities\MainActivity.kt:165:        }
/activities\MainActivity.kt:166:        val messageFragment = MessageFragment.newInstance(MessageFragment.TYPE_REPLY_ME)
/activities\MainActivity.kt:167:        mAdapter!!.addFragment(messageFragment)
/activities\MainActivity.kt:168:        val fragmentMine = MyInfoFragment()
/activities\MainActivity.kt:169:        mAdapter!!.addFragment(fragmentMine)
/activities\MainActivity.kt:170:        mViewPager!!.isCanScroll = false
/activities\MainActivity.kt:171:        mViewPager!!.adapter = mAdapter
/activities\MainActivity.kt:172:        mViewPager!!.offscreenPageLimit = mAdapter!!.count
/activities\MainActivity.kt:173:        refreshSearchView()
/activities\MainActivity.kt:174:    }
/activities\MainActivity.kt:176:    override fun refreshGlobal(activity: Activity) {
/activities\MainActivity.kt:177:        super.refreshGlobal(activity)
/activities\MainActivity.kt:178:        refreshSearchView()
/activities\MainActivity.kt:179:    }
/activities\MainActivity.kt:181:    private fun refreshSearchView() {
/activities\MainActivity.kt:182:        if (mSearchView == null) {
/activities\MainActivity.kt:183:            return
/activities\MainActivity.kt:184:        }
/activities\MainActivity.kt:185:        mSearchAdapter!!.refreshData()
/activities\MainActivity.kt:186:        mSearchView!!.theme = if (ThemeUtil.isNightMode(this) || ThemeUtil.THEME_TRANSLUCENT == ThemeUtil.getTheme(this)) Search.Theme.DARK else Search.Theme.LIGHT
/activities\MainActivity.kt:187:    }
/activities\MainActivity.kt:189:    protected fun initListener() {
/activities\MainActivity.kt:190:        mBottomNavigationView!!.setOnNavigationItemSelectedListener(this)
/activities\MainActivity.kt:191:        mBottomNavigationView!!.setOnNavigationItemReselectedListener(this)
/activities\MainActivity.kt:192:        mSearchView!!.setOnQueryTextListener(object : Search.OnQueryTextListener {
/activities\MainActivity.kt:193:            override fun onQueryTextChange(newText: CharSequence) {}
/activities\MainActivity.kt:194:            override fun onQueryTextSubmit(key: CharSequence): Boolean {
/activities\MainActivity.kt:195:                startActivity(Intent(this@MainActivity, SearchActivity::class.java)
/activities\MainActivity.kt:196:                        .putExtra(SearchActivity.EXTRA_KEYWORD, key.toString()))
/activities\MainActivity.kt:197:                SearchHistory(key.toString())
/activities\MainActivity.kt:198:                        .saveOrUpdate("content = ?", key.toString())
/activities\MainActivity.kt:199:                return true
/activities\MainActivity.kt:200:            }
/activities\MainActivity.kt:201:        })
/activities\MainActivity.kt:202:        mViewPager!!.addOnPageChangeListener(object : OnPageChangeListener {
/activities\MainActivity.kt:203:            override fun onPageScrolled(position: Int, positionOffset: Float, positionOffsetPixels: Int) {}
/activities\MainActivity.kt:205:            @SuppressLint("RestrictedApi")
/activities\MainActivity.kt:206:            override fun onPageSelected(position: Int) {
/activities\MainActivity.kt:207:                val baseFragment = mAdapter!!.getItem(position)
/activities\MainActivity.kt:208:                appbar!!.visibility = if (baseFragment.hasOwnAppbar()) View.GONE else View.VISIBLE
/activities\MainActivity.kt:209:                mBottomNavigationView!!.menu.getItem(position).isChecked = true
/activities\MainActivity.kt:210:                mToolbar!!.title = mBottomNavigationView!!.menu.getItem(position).title
/activities\MainActivity.kt:211:                if (position == (if (hideExplore) 1 else 2)) {
/activities\MainActivity.kt:212:                    badgeTextView!!.visibility = View.GONE
/activities\MainActivity.kt:213:                }
/activities\MainActivity.kt:214:            }
/activities\MainActivity.kt:216:            override fun onPageScrollStateChanged(state: Int) {}
/activities\MainActivity.kt:217:        })
/activities\MainActivity.kt:218:    }
/activities\MainActivity.kt:220:    @SuppressLint("ApplySharedPref")
/activities\MainActivity.kt:221:    protected fun clearSwitchReason() {
/activities\MainActivity.kt:222:        if (TextUtils.equals(ThemeUtil.getSharedPreferences(this).getString(ThemeUtil.SP_SWITCH_REASON, null), ThemeUtil.REASON_MANUALLY)) {
/activities\MainActivity.kt:223:            ThemeUtil.getSharedPreferences(this).edit().remove(ThemeUtil.SP_SWITCH_REASON).commit()
/activities\MainActivity.kt:224:        }
/activities\MainActivity.kt:225:    }
/activities\MainActivity.kt:227:    protected fun shouldShowSwitchSnackbar(): Boolean {
/activities\MainActivity.kt:228:        return ThemeUtil.getSharedPreferences(this).getBoolean(SP_SHOULD_SHOW_SNACKBAR, false)
/activities\MainActivity.kt:229:    }
/activities\MainActivity.kt:231:    override fun onCreate(savedInstanceState: Bundle?) {
/activities\MainActivity.kt:232:        super.onCreate(savedInstanceState)
/activities\MainActivity.kt:233:        setSwipeBackEnable(false)
/activities\MainActivity.kt:234:        setContentView(R.layout.activity_main)
/activities\MainActivity.kt:235:        ThemeUtil.setTranslucentThemeBackground(findViewById(R.id.background))
/activities\MainActivity.kt:236:        findView()
/activities\MainActivity.kt:237:        initView()
/activities\MainActivity.kt:238:        initListener()
/activities\MainActivity.kt:239:        if (!SharedPreferencesUtil.get(SharedPreferencesUtil.SP_APP_DATA).getBoolean("notice_dialog", false)) {
/activities\MainActivity.kt:240:            showDialog(DialogUtil.build(this)
/activities\MainActivity.kt:241:                    .setTitle(R.string.title_dialog_notice)
/activities\MainActivity.kt:242:                    .setMessage(R.string.message_dialog_notice)
/activities\MainActivity.kt:243:                    .setPositiveButton(R.string.button_sure_default) { _: DialogInterface?,
/activities\MainActivity.kt:244:                                                                       _: Int ->
/activities\MainActivity.kt:245:                        SharedPreferencesUtil.put(this, SharedPreferencesUtil.SP_APP_DATA, "notice_dialog", true)
/activities\MainActivity.kt:246:                    }
/activities\MainActivity.kt:247:                    .setCancelable(false)
/activities\MainActivity.kt:248:                    .create())
/activities\MainActivity.kt:249:        }
/activities\MainActivity.kt:250:        if (savedInstanceState == null) {
/activities\MainActivity.kt:251:            clearSwitchReason()
/activities\MainActivity.kt:252:        }
/activities\MainActivity.kt:253:        if (shouldShowSwitchSnackbar()) {
/activities\MainActivity.kt:254:            Util.createSnackbar(mViewPager!!, if (ThemeUtil.isNightMode(this)) R.string.snackbar_auto_switch_to_night else R.string.snackbar_auto_switch_from_night, Snackbar.LENGTH_SHORT)
/activities\MainActivity.kt:255:                    .show()
/activities\MainActivity.kt:256:            SharedPreferencesUtil.put(ThemeUtil.getSharedPreferences(this), SP_SHOULD_SHOW_SNACKBAR, false)
/activities\MainActivity.kt:257:        }
/activities\MainActivity.kt:258:        handler.postDelayed({
/activities\MainActivity.kt:259:            checkUpdate()
/activities\MainActivity.kt:260:            try {
/activities\MainActivity.kt:261:                TiebaUtil.initAutoSign(this)
/activities\MainActivity.kt:262:            } catch (e: Exception) {
/activities\MainActivity.kt:263:                e.printStackTrace()
/activities\MainActivity.kt:264:            }
/activities\MainActivity.kt:265:            if (AccountUtil.isLoggedIn(this) && AccountUtil.getCookie(this) == null) {
/activities\MainActivity.kt:266:                showDialog(DialogUtil.build(this)
/activities\MainActivity.kt:267:                        .setTitle(R.string.title_dialog_update_stoken)
/activities\MainActivity.kt:268:                        .setMessage(R.string.message_dialog_update_stoken)
/activities\MainActivity.kt:269:                        .setPositiveButton(R.string.button_sure_default) { _: DialogInterface?, _: Int -> startActivity(UpdateInfoActivity.newIntent(this, UpdateInfoActivity.ACTION_UPDATE_LOGIN_INFO)) }
/activities\MainActivity.kt:270:                        .setCancelable(false)
/activities\MainActivity.kt:271:                        .create())
/activities\MainActivity.kt:272:            }
/activities\MainActivity.kt:273:            AccountUtil.updateUserInfo(this, object : CommonCallback<MyInfoBean?> {
/activities\MainActivity.kt:274:                override fun onSuccess(data: MyInfoBean?) {}
/activities\MainActivity.kt:275:                override fun onFailure(code: Int, error: String) {
/activities\MainActivity.kt:276:                    if (code == Error.ERROR_LOGGED_IN_EXPIRED) {
/activities\MainActivity.kt:277:                        showDialog(DialogUtil.build(this@MainActivity)
/activities\MainActivity.kt:278:                                .setTitle(R.string.title_dialog_logged_in_expired)
/activities\MainActivity.kt:279:                                .setMessage(R.string.message_dialog_logged_in_expired)
/activities\MainActivity.kt:280:                                .setPositiveButton(R.string.button_ok) { _: DialogInterface?, _: Int -> navigationHelper!!.navigationByData(NavigationHelper.ACTION_LOGIN) }
/activities\MainActivity.kt:281:                                .setCancelable(false)
/activities\MainActivity.kt:282:                                .create())
/activities\MainActivity.kt:283:                    }
/activities\MainActivity.kt:284:                }
/activities\MainActivity.kt:285:            })
/activities\MainActivity.kt:286:        }, 1000)
/activities\MainActivity.kt:287:        if (BaseApplication.isFirstRun) {
/activities\MainActivity.kt:288:            goToActivity<NewIntroActivity>()
/activities\MainActivity.kt:289:        } else if (!AccountUtil.isLoggedIn(this)) {
/activities\MainActivity.kt:290:            navigationHelper!!.navigationByData(NavigationHelper.ACTION_LOGIN)
/activities\MainActivity.kt:291:        }
/activities\MainActivity.kt:292:        /*
/activities\MainActivity.kt:293:        handler.postDelayed(() -> {
/activities\MainActivity.kt:294:            try {
/activities\MainActivity.kt:295:                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
/activities\MainActivity.kt:296:                    String relativePath = Environment.DIRECTORY_PICTURES + File.separator + "Tieba Lite" + File.separator + "shareTemp";
/activities\MainActivity.kt:297:                    String where = MediaStore.Images.Media.RELATIVE_PATH + " like \"" + relativePath + "%" + "\"";
/activities\MainActivity.kt:298:                    int i = getContentResolver().delete(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, where, null);
/activities\MainActivity.kt:299:                } else {
/activities\MainActivity.kt:300:                    if (AndPermission.hasPermissions(this, Permission.Group.STORAGE)) {
/activities\MainActivity.kt:301:                        File shareTemp = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES).getAbsoluteFile(), "Tieba Lite" + File.separator + "shareTemp");
/activities\MainActivity.kt:302:                        if (shareTemp.exists() && shareTemp.delete()) {
/activities\MainActivity.kt:303:                            FileUtil.deleteAllFiles(shareTemp);
/activities\MainActivity.kt:304:                        }
/activities\MainActivity.kt:305:                    }
/activities\MainActivity.kt:306:                }
/activities\MainActivity.kt:307:            } catch (Exception e) {
/activities\MainActivity.kt:308:                e.printStackTrace();
/activities\MainActivity.kt:309:            }
/activities\MainActivity.kt:310:        }, 100);
/activities\MainActivity.kt:311:        */
/activities\MainActivity.kt:312:    }
/activities\MainActivity.kt:314:    override fun recreate() {
/activities\MainActivity.kt:315:        super.recreate()
/activities\MainActivity.kt:316:        Log.i(TAG, "recreate: ")
/activities\MainActivity.kt:317:    }
/activities\MainActivity.kt:319:    override fun onStart() {
/activities\MainActivity.kt:320:        super.onStart()
/activities\MainActivity.kt:321:        registerReceiver(newMessageReceiver, ReceiverUtil.createIntentFilter(NotifyJobService.ACTION_NEW_MESSAGE))
/activities\MainActivity.kt:322:        registerReceiver(accountSwitchReceiver, ReceiverUtil.createIntentFilter(AccountUtil.ACTION_SWITCH_ACCOUNT))
/activities\MainActivity.kt:323:        try {
/activities\MainActivity.kt:324:            startService(Intent(this, NotifyJobService::class.java))
/activities\MainActivity.kt:325:            val builder = JobInfo.Builder(JobServiceUtil.getJobId(this), ComponentName(this, NotifyJobService::class.java))
/activities\MainActivity.kt:326:                    .setPersisted(true)
/activities\MainActivity.kt:327:                    .setPeriodic(30 * 60 * 1000L)
/activities\MainActivity.kt:328:                    .setRequiredNetworkType(JobInfo.NETWORK_TYPE_ANY)
/activities\MainActivity.kt:329:            val jobScheduler = getSystemService(Context.JOB_SCHEDULER_SERVICE) as JobScheduler
/activities\MainActivity.kt:330:            jobScheduler.schedule(builder.build())
/activities\MainActivity.kt:331:        } catch (ignored: Exception) {
/activities\MainActivity.kt:332:        }
/activities\MainActivity.kt:333:    }
/activities\MainActivity.kt:335:    override fun onStop() {
/activities\MainActivity.kt:336:        try {
/activities\MainActivity.kt:337:            stopService(Intent(this, NotifyJobService::class.java))
/activities\MainActivity.kt:338:        } catch (ignored: Exception) {
/activities\MainActivity.kt:339:        }
/activities\MainActivity.kt:340:        unregisterReceiver(newMessageReceiver)
/activities\MainActivity.kt:341:        unregisterReceiver(accountSwitchReceiver)
/activities\MainActivity.kt:342:        super.onStop()
/activities\MainActivity.kt:343:    }
/activities\MainActivity.kt:345:    private fun checkUpdate() {
/activities\MainActivity.kt:346:        val oldVersion = SharedPreferencesUtil.get(this, SharedPreferencesUtil.SP_APP_DATA).getInt("version", -1)
/activities\MainActivity.kt:347:        if (oldVersion < VersionUtil.getVersionCode(this)) {
/activities\MainActivity.kt:348:            instance!!.changelog(object : CommonAPICallback<ChangelogBean?> {
/activities\MainActivity.kt:349:                override fun onSuccess(data: ChangelogBean?) {
/activities\MainActivity.kt:350:                    SharedPreferencesUtil.get(this@MainActivity, SharedPreferencesUtil.SP_APP_DATA)
/activities\MainActivity.kt:351:                            .edit()
/activities\MainActivity.kt:352:                            .putInt("version", VersionUtil.getVersionCode(this@MainActivity))
/activities\MainActivity.kt:353:                            .apply()
/activities\MainActivity.kt:354:                    if (data != null) {
/activities\MainActivity.kt:355:                        if (!TextUtils.isEmpty(data.result)) {
/activities\MainActivity.kt:356:                            showDialog(DialogUtil.build(this@MainActivity)
/activities\MainActivity.kt:357:                                    .setTitle(R.string.title_dialog_changelog)
/activities\MainActivity.kt:358:                                    .setMessage(data.result)
/activities\MainActivity.kt:359:                                    .setPositiveButton(R.string.button_ok, null)
/activities\MainActivity.kt:360:                                    .create())
/activities\MainActivity.kt:361:                        }
/activities\MainActivity.kt:362:                    }
/activities\MainActivity.kt:363:                }
/activities\MainActivity.kt:365:                override fun onFailure(code: Int, error: String?) {}
/activities\MainActivity.kt:366:            })
/activities\MainActivity.kt:367:        }
/activities\MainActivity.kt:368:        instance!!.newCheckUpdate(object : CommonAPICallback<NewUpdateBean?> {
/activities\MainActivity.kt:369:            override fun onSuccess(data: NewUpdateBean?) {
/activities\MainActivity.kt:370:                if (data != null) {
/activities\MainActivity.kt:371:                    if (data.isHasUpdate) {
/activities\MainActivity.kt:372:                        val cancelable = data.result?.isCancelable
/activities\MainActivity.kt:373:                        val ignored = SharedPreferencesUtil.get(this@MainActivity, SharedPreferencesUtil.SP_IGNORE_VERSIONS)
/activities\MainActivity.kt:374:                                .getBoolean(data.result?.versionName + "_" + (data.result?.versionCode), false)
/activities\MainActivity.kt:375:                        if (ignored && cancelable!!) {
/activities\MainActivity.kt:376:                            return
/activities\MainActivity.kt:377:                        }
/activities\MainActivity.kt:378:                        val builder = SpannableStringBuilder()
/activities\MainActivity.kt:379:                        if (data.result?.versionType == 1) {
/activities\MainActivity.kt:380:                            val betaTip = getString(R.string.tip_beta_version)
/activities\MainActivity.kt:381:                            builder.append(betaTip, ForegroundColorSpan(getColorCompat(R.color.red)), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)
/activities\MainActivity.kt:382:                            builder.setSpan(StyleSpan(Typeface.BOLD), 0, betaTip.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)
/activities\MainActivity.kt:383:                        }
/activities\MainActivity.kt:384:                        for (content in data.result?.updateContent!!) {
/activities\MainActivity.kt:385:                            builder.append(content)
/activities\MainActivity.kt:386:                            builder.append("\n")
/activities\MainActivity.kt:387:                        }
/activities\MainActivity.kt:388:                        val dialogBuilder = DialogUtil.build(this@MainActivity)
/activities\MainActivity.kt:389:                                .setTitle(getString(R.string.title_dialog_update, data.result.versionName))
/activities\MainActivity.kt:390:                                .setMessage(builder)
/activities\MainActivity.kt:391:                                .setPositiveButton(R.string.button_go_to_download) { _: DialogInterface?, _: Int -> VersionUtil.showDownloadDialog(this@MainActivity, data.result) }
/activities\MainActivity.kt:392:                                .setCancelable(cancelable!!)
/activities\MainActivity.kt:393:                        if (cancelable) {
/activities\MainActivity.kt:394:                            dialogBuilder.setNegativeButton(R.string.button_next_time, null)
/activities\MainActivity.kt:395:                            dialogBuilder.setNeutralButton(R.string.button_ignore_this_version) { _: DialogInterface?, _: Int ->
/activities\MainActivity.kt:396:                                SharedPreferencesUtil.get(this@MainActivity, SharedPreferencesUtil.SP_IGNORE_VERSIONS)
/activities\MainActivity.kt:397:                                        .edit()
/activities\MainActivity.kt:398:                                        .putBoolean(data.result.versionName + "_" + data.result.versionCode, true)
/activities\MainActivity.kt:399:                                        .apply()
/activities\MainActivity.kt:400:                            }
/activities\MainActivity.kt:401:                        }
/activities\MainActivity.kt:402:                        showDialog(dialogBuilder.create())
/activities\MainActivity.kt:403:                    }
/activities\MainActivity.kt:404:                }
/activities\MainActivity.kt:405:            }
/activities\MainActivity.kt:407:            override fun onFailure(code: Int, error: String?) {}
/activities\MainActivity.kt:408:        })
/activities\MainActivity.kt:409:    }
/activities\MainActivity.kt:411:    override fun onCreateOptionsMenu(menu: Menu): Boolean {
/activities\MainActivity.kt:412:        menuInflater.inflate(R.menu.toolbar_menu, menu)
/activities\MainActivity.kt:413:        return super.onCreateOptionsMenu(menu)
/activities\MainActivity.kt:414:    }
/activities\MainActivity.kt:416:    override fun onOptionsItemSelected(item: MenuItem): Boolean {
/activities\MainActivity.kt:417:        when (item.itemId) {
/activities\MainActivity.kt:418:            R.id.menu_sign -> {
/activities\MainActivity.kt:419:                TiebaUtil.startSign(this@MainActivity)
/activities\MainActivity.kt:420:                return true
/activities\MainActivity.kt:421:            }
/activities\MainActivity.kt:422:            R.id.action_search -> {
/activities\MainActivity.kt:423:                mSearchView!!.open(item)
/activities\MainActivity.kt:424:                return true
/activities\MainActivity.kt:425:            }
/activities\MainActivity.kt:426:        }
/activities\MainActivity.kt:427:        return super.onOptionsItemSelected(item)
/activities\MainActivity.kt:428:    }
/activities\MainActivity.kt:430:    override fun onBackPressed() {
/activities\MainActivity.kt:431:        if (mSearchView!!.isOpen) {
/activities\MainActivity.kt:432:            mSearchView!!.close()
/activities\MainActivity.kt:433:        } else {
/activities\MainActivity.kt:434:            if (!HandleBackUtil.handleBackPress(this)) {
/activities\MainActivity.kt:435:                exit()
/activities\MainActivity.kt:436:            }
/activities\MainActivity.kt:437:        }
/activities\MainActivity.kt:438:    }
/activities\MainActivity.kt:440:    @JvmOverloads
/activities\MainActivity.kt:441:    fun exit(isDouble: Boolean = true) {
/activities\MainActivity.kt:442:        if (!isDouble || System.currentTimeMillis() - lastTime < 2000) {
/activities\MainActivity.kt:443:            exitApplication()
/activities\MainActivity.kt:444:        } else {
/activities\MainActivity.kt:445:            lastTime = System.currentTimeMillis()
/activities\MainActivity.kt:446:            Toast.makeText(this, R.string.toast_double_key_exit, Toast.LENGTH_SHORT).show()
/activities\MainActivity.kt:447:        }
/activities\MainActivity.kt:448:    }
/activities\MainActivity.kt:450:    override fun setTitle(newTitle: String) {
/activities\MainActivity.kt:451:        mToolbar!!.title = newTitle
/activities\MainActivity.kt:452:    }
/activities\MainActivity.kt:454:    override fun onSearchItemClick(position: Int, content: CharSequence) {
/activities\MainActivity.kt:455:        startActivity(Intent(this@MainActivity, SearchActivity::class.java)
/activities\MainActivity.kt:456:                .putExtra(SearchActivity.EXTRA_KEYWORD, content.toString()))
/activities\MainActivity.kt:457:        SearchHistory(content.toString())
/activities\MainActivity.kt:458:                .saveOrUpdate("content = ?", content.toString())
/activities\MainActivity.kt:459:        refreshSearchView()
/activities\MainActivity.kt:460:    }
/activities\MainActivity.kt:462:    private inner class NewMessageReceiver : BroadcastReceiver() {
/activities\MainActivity.kt:463:        @SuppressLint("RestrictedApi")
/activities\MainActivity.kt:464:        override fun onReceive(context: Context, intent: Intent) {
/activities\MainActivity.kt:465:            try {
/activities\MainActivity.kt:466:                val action = intent.action
/activities\MainActivity.kt:467:                if (action != null && action == NotifyJobService.ACTION_NEW_MESSAGE) {
/activities\MainActivity.kt:468:                    val channel = intent.getStringExtra("channel")
/activities\MainActivity.kt:469:                    val count = intent.getIntExtra("count", 0)
/activities\MainActivity.kt:470:                    if (channel != null && channel == NotifyJobService.CHANNEL_TOTAL && badgeTextView != null) {
/activities\MainActivity.kt:471:                        badgeTextView!!.text = count.toString()
/activities\MainActivity.kt:472:                        if (count > 0) {
/activities\MainActivity.kt:473:                            badgeTextView!!.visibility = View.VISIBLE
/activities\MainActivity.kt:474:                        }
/activities\MainActivity.kt:475:                    }
/activities\MainActivity.kt:476:                }
/activities\MainActivity.kt:477:            } catch (ignored: Exception) {
/activities\MainActivity.kt:478:            }
/activities\MainActivity.kt:479:        }
/activities\MainActivity.kt:480:    }
/activities\MainActivity.kt:482:    private inner class AccountSwitchReceiver : BroadcastReceiver() {
/activities\MainActivity.kt:483:        override fun onReceive(context: Context, intent: Intent) {
/activities\MainActivity.kt:484:            val action = intent.action
/activities\MainActivity.kt:485:            if (action != null && action == AccountUtil.ACTION_SWITCH_ACCOUNT) {
/activities\MainActivity.kt:486:                if (mAdapter == null) {
/activities\MainActivity.kt:487:                    return
/activities\MainActivity.kt:488:                }
/activities\MainActivity.kt:489:                val fragments = mAdapter!!.fragments
/activities\MainActivity.kt:490:                for (fragment in fragments) {
/activities\MainActivity.kt:491:                    if (fragment != null) {
/activities\MainActivity.kt:492:                        try {
/activities\MainActivity.kt:493:                            fragment.onAccountSwitch()
/activities\MainActivity.kt:494:                        } catch (e: Exception) {
/activities\MainActivity.kt:495:                            e.printStackTrace()
/activities\MainActivity.kt:496:                        }
/activities\MainActivity.kt:497:                    }
/activities\MainActivity.kt:498:                }
/activities\MainActivity.kt:499:            }
/activities\MainActivity.kt:500:        }
/activities\MainActivity.kt:501:    }
/activities\MainActivity.kt:503:    companion object {
/activities\MainActivity.kt:504:        const val TAG = "MainActivity"
/activities\MainActivity.kt:505:        const val SP_SHOULD_SHOW_SNACKBAR = "should_show_snackbar"
/activities\MainActivity.kt:506:        private val handler = Handler()
/activities\MainActivity.kt:507:    }
/activities\MainActivity.kt:508:}/activities\PhotoViewActivity.kt:1:package com.huanchengfly.tieba.post.activities
/activities\PhotoViewActivity.kt:3:import android.animation.Animator
/activities\PhotoViewActivity.kt:4:import android.animation.AnimatorListenerAdapter
/activities\PhotoViewActivity.kt:5:import android.content.Context
/activities\PhotoViewActivity.kt:6:import android.content.Intent
/activities\PhotoViewActivity.kt:7:import android.graphics.Color
/activities\PhotoViewActivity.kt:8:import android.net.Uri
/activities\PhotoViewActivity.kt:9:import android.os.Build
/activities\PhotoViewActivity.kt:10:import android.os.Bundle
/activities\PhotoViewActivity.kt:11:import android.os.Handler
/activities\PhotoViewActivity.kt:12:import android.view.MenuItem
/activities\PhotoViewActivity.kt:13:import android.view.View
/activities\PhotoViewActivity.kt:14:import android.widget.TextView
/activities\PhotoViewActivity.kt:15:import android.widget.Toast
/activities\PhotoViewActivity.kt:16:import androidx.appcompat.widget.Toolbar
/activities\PhotoViewActivity.kt:17:import androidx.viewpager2.widget.ViewPager2
/activities\PhotoViewActivity.kt:18:import androidx.viewpager2.widget.ViewPager2.OnPageChangeCallback
/activities\PhotoViewActivity.kt:19:import butterknife.BindView
/activities\PhotoViewActivity.kt:20:import com.google.android.material.bottomappbar.BottomAppBar
/activities\PhotoViewActivity.kt:21:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils
/activities\PhotoViewActivity.kt:22:import com.huanchengfly.tieba.post.api.TiebaApi.getInstance
/activities\PhotoViewActivity.kt:23:import com.huanchengfly.tieba.post.api.models.PicPageBean
/activities\PhotoViewActivity.kt:24:import com.huanchengfly.tieba.post.api.models.PicPageBean.ImgInfoBean
/activities\PhotoViewActivity.kt:25:import com.huanchengfly.tieba.post.R
/activities\PhotoViewActivity.kt:26:import com.huanchengfly.tieba.post.adapters.PhotoViewAdapter
/activities\PhotoViewActivity.kt:27:import com.huanchengfly.tieba.post.BaseApplication.ScreenInfo
/activities\PhotoViewActivity.kt:28:import com.huanchengfly.tieba.post.fragments.PhotoViewFragment.OnChangeBottomBarVisibilityListener
/activities\PhotoViewActivity.kt:29:import com.huanchengfly.tieba.post.models.PhotoViewBean
/activities\PhotoViewActivity.kt:30:import com.huanchengfly.tieba.post.utils.AnimUtil
/activities\PhotoViewActivity.kt:31:import com.huanchengfly.tieba.post.utils.ImageUtil
/activities\PhotoViewActivity.kt:32:import retrofit2.Call
/activities\PhotoViewActivity.kt:33:import retrofit2.Callback
/activities\PhotoViewActivity.kt:34:import retrofit2.Response
/activities\PhotoViewActivity.kt:35:import java.util.*
/activities\PhotoViewActivity.kt:37:class PhotoViewActivity : BaseActivity(), OnChangeBottomBarVisibilityListener, Toolbar.OnMenuItemClickListener {
/activities\PhotoViewActivity.kt:38:    @BindView(R.id.counter)
/activities\PhotoViewActivity.kt:39:    lateinit var mCounter: TextView
/activities\PhotoViewActivity.kt:40:    @BindView(R.id.bottom_app_bar)
/activities\PhotoViewActivity.kt:41:    lateinit var mAppBar: BottomAppBar
/activities\PhotoViewActivity.kt:42:    @BindView(R.id.view_pager)
/activities\PhotoViewActivity.kt:43:    lateinit var mViewPager: ViewPager2
/activities\PhotoViewActivity.kt:45:    private lateinit var photoViewBeans: MutableList<PhotoViewBean>
/activities\PhotoViewActivity.kt:46:    private lateinit var mAdapter: PhotoViewAdapter
/activities\PhotoViewActivity.kt:47:    private var startPosition = 0
/activities\PhotoViewActivity.kt:48:    private var lastIndex = 0
/activities\PhotoViewActivity.kt:49:    private var seeLz = false
/activities\PhotoViewActivity.kt:50:    private var isFrs = false
/activities\PhotoViewActivity.kt:51:    private var mLoading = false
/activities\PhotoViewActivity.kt:52:    private var loadFinished = false
/activities\PhotoViewActivity.kt:53:    private val autoHideRunnable = Runnable { onHide() }
/activities\PhotoViewActivity.kt:54:    private var amount: String? = null
/activities\PhotoViewActivity.kt:55:    private var forumName: String? = null
/activities\PhotoViewActivity.kt:56:    private var forumId: String? = null
/activities\PhotoViewActivity.kt:57:    private var threadId: String? = null
/activities\PhotoViewActivity.kt:58:    private var objType: String? = null
/activities\PhotoViewActivity.kt:60:    private fun loadMore() {
/activities\PhotoViewActivity.kt:61:        if (loadFinished) {
/activities\PhotoViewActivity.kt:62:            return
/activities\PhotoViewActivity.kt:63:        }
/activities\PhotoViewActivity.kt:64:        if (mLoading) {
/activities\PhotoViewActivity.kt:65:            return
/activities\PhotoViewActivity.kt:66:        }
/activities\PhotoViewActivity.kt:67:        mLoading = true
/activities\PhotoViewActivity.kt:68:        val lastBean = photoViewBeans[photoViewBeans.size - 1]
/activities\PhotoViewActivity.kt:69:        getInstance().picPage(
/activities\PhotoViewActivity.kt:70:                forumId!!,
/activities\PhotoViewActivity.kt:71:                forumName!!,
/activities\PhotoViewActivity.kt:72:                threadId!!,
/activities\PhotoViewActivity.kt:73:                seeLz,
/activities\PhotoViewActivity.kt:74:                ImageUtil.getPicId(lastBean.originUrl), photoViewBeans.size.toString(),
/activities\PhotoViewActivity.kt:75:                objType!!,
/activities\PhotoViewActivity.kt:76:                false
/activities\PhotoViewActivity.kt:77:        ).enqueue(object : Callback<PicPageBean?> {
/activities\PhotoViewActivity.kt:78:            override fun onResponse(call: Call<PicPageBean?>, response: Response<PicPageBean?>) {
/activities\PhotoViewActivity.kt:79:                val data = response.body()!!
/activities\PhotoViewActivity.kt:80:                mLoading = false
/activities\PhotoViewActivity.kt:81:                amount = data.picAmount ?: "${photoViewBeans.size}"
/activities\PhotoViewActivity.kt:82:                updateCounter(mViewPager.currentItem)
/activities\PhotoViewActivity.kt:83:                val picBeans: MutableList<PicPageBean.PicBean> = ArrayList()
/activities\PhotoViewActivity.kt:84:                val imgInfoBeans: MutableList<ImgInfoBean> = ArrayList()
/activities\PhotoViewActivity.kt:85:                if (data.picList?.isNotEmpty()!!) {
/activities\PhotoViewActivity.kt:86:                    val index = data.picList.last().overAllIndex?.toInt()
/activities\PhotoViewActivity.kt:87:                    if (index != null) {
/activities\PhotoViewActivity.kt:88:                        loadFinished = index >= amount!!.toInt()
/activities\PhotoViewActivity.kt:89:                    }
/activities\PhotoViewActivity.kt:90:                    picBeans.addAll(data.picList)
/activities\PhotoViewActivity.kt:91:                    picBeans.forEach {
/activities\PhotoViewActivity.kt:92:                        it.img?.original?.let { it1 -> imgInfoBeans.add(it1) }
/activities\PhotoViewActivity.kt:93:                    }
/activities\PhotoViewActivity.kt:94:                    lastIndex = picBeans.first().overAllIndex?.toInt()!!
/activities\PhotoViewActivity.kt:95:                    for (photoViewBean in photoViewBeans) {
/activities\PhotoViewActivity.kt:96:                        val ind = lastIndex - (photoViewBeans.size - 1 - photoViewBeans.indexOf(photoViewBean))
/activities\PhotoViewActivity.kt:97:                        photoViewBean.index = ind.toString()
/activities\PhotoViewActivity.kt:98:                    }
/activities\PhotoViewActivity.kt:99:                    picBeans.removeAt(0)
/activities\PhotoViewActivity.kt:100:                    imgInfoBeans.removeAt(0)
/activities\PhotoViewActivity.kt:101:                    val beans = imgInfoBeans.mapIndexed { i, it ->
/activities\PhotoViewActivity.kt:102:                        PhotoViewBean(it.bigCdnSrc,
/activities\PhotoViewActivity.kt:103:                                it.originalSrc,
/activities\PhotoViewActivity.kt:104:                                (it.height ?: "0").toInt() > ScreenInfo.EXACT_SCREEN_HEIGHT,
/activities\PhotoViewActivity.kt:105:                                picBeans[i].overAllIndex,
/activities\PhotoViewActivity.kt:106:                                "2" == it.format)
/activities\PhotoViewActivity.kt:107:                    }.toMutableList()
/activities\PhotoViewActivity.kt:108:                    mAdapter.insert(beans)
/activities\PhotoViewActivity.kt:109:                    photoViewBeans = mAdapter.data
/activities\PhotoViewActivity.kt:110:                    mAdapter.notifyDataSetChanged()
/activities\PhotoViewActivity.kt:111:                    updateCounter(mViewPager.currentItem)
/activities\PhotoViewActivity.kt:112:                } else {
/activities\PhotoViewActivity.kt:113:                    loadFinished = true
/activities\PhotoViewActivity.kt:114:                }
/activities\PhotoViewActivity.kt:115:            }
/activities\PhotoViewActivity.kt:117:            override fun onFailure(call: Call<PicPageBean?>, t: Throwable) {
/activities\PhotoViewActivity.kt:118:                mLoading = false
/activities\PhotoViewActivity.kt:119:            }
/activities\PhotoViewActivity.kt:120:        })
/activities\PhotoViewActivity.kt:121:    }
/activities\PhotoViewActivity.kt:123:    private fun loadFrs() {
/activities\PhotoViewActivity.kt:124:        forumName = intent.getStringExtra(EXTRA_FORUM_NAME)
/activities\PhotoViewActivity.kt:125:        forumId = intent.getStringExtra(EXTRA_FORUM_ID)
/activities\PhotoViewActivity.kt:126:        threadId = intent.getStringExtra(EXTRA_THREAD_ID)
/activities\PhotoViewActivity.kt:127:        seeLz = intent.getBooleanExtra(EXTRA_SEE_LZ, false)
/activities\PhotoViewActivity.kt:128:        objType = intent.getStringExtra(EXTRA_OBJ_TYPE)
/activities\PhotoViewActivity.kt:129:        loadMore()
/activities\PhotoViewActivity.kt:130:    }
/activities\PhotoViewActivity.kt:132:    override fun getLayoutId(): Int {
/activities\PhotoViewActivity.kt:133:        return R.layout.activity_photo_view
/activities\PhotoViewActivity.kt:134:    }
/activities\PhotoViewActivity.kt:136:    override fun onCreate(savedInstanceState: Bundle?) {
/activities\PhotoViewActivity.kt:137:        super.onCreate(savedInstanceState)
/activities\PhotoViewActivity.kt:138:        window.decorView.systemUiVisibility = (View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
/activities\PhotoViewActivity.kt:139:                or View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY)
/activities\PhotoViewActivity.kt:140:        mAppBar.setOnMenuItemClickListener(this)
/activities\PhotoViewActivity.kt:141:        val overflowIcon = mAppBar.overflowIcon
/activities\PhotoViewActivity.kt:142:        if (overflowIcon != null) {
/activities\PhotoViewActivity.kt:143:            mAppBar.overflowIcon = ThemeUtils.tintDrawable(overflowIcon, Color.WHITE)
/activities\PhotoViewActivity.kt:144:        }
/activities\PhotoViewActivity.kt:145:        isFrs = intent.getBooleanExtra(EXTRA_IS_FRS, false)
/activities\PhotoViewActivity.kt:146:        photoViewBeans = mutableListOf()
/activities\PhotoViewActivity.kt:147:        startPosition = intent.getIntExtra(EXTRA_POSITION, 0)
/activities\PhotoViewActivity.kt:148:        val parcelables = intent.getParcelableArrayExtra(EXTRA_BEANS)!!
/activities\PhotoViewActivity.kt:149:        photoViewBeans.addAll(parcelables.map { it as PhotoViewBean })
/activities\PhotoViewActivity.kt:150:        amount = photoViewBeans.size.toString()
/activities\PhotoViewActivity.kt:151:        mAdapter = PhotoViewAdapter(this, photoViewBeans)
/activities\PhotoViewActivity.kt:152:        mViewPager.adapter = mAdapter
/activities\PhotoViewActivity.kt:153:        mViewPager.setCurrentItem(startPosition, false)
/activities\PhotoViewActivity.kt:154:        updateCounter()
/activities\PhotoViewActivity.kt:155:        mViewPager.registerOnPageChangeCallback(object : OnPageChangeCallback() {
/activities\PhotoViewActivity.kt:156:            override fun onPageScrolled(position: Int, positionOffset: Float, positionOffsetPixels: Int) {
/activities\PhotoViewActivity.kt:157:                onShow(true)
/activities\PhotoViewActivity.kt:158:            }
/activities\PhotoViewActivity.kt:160:            override fun onPageSelected(position: Int) {
/activities\PhotoViewActivity.kt:161:                updateCounter(position)
/activities\PhotoViewActivity.kt:162:                onShow(true)
/activities\PhotoViewActivity.kt:163:                if (!mLoading && isFrs && position >= photoViewBeans.size - 1) {
/activities\PhotoViewActivity.kt:164:                    loadMore()
/activities\PhotoViewActivity.kt:165:                }
/activities\PhotoViewActivity.kt:166:            }
/activities\PhotoViewActivity.kt:167:        })
/activities\PhotoViewActivity.kt:168:        if (isFrs) {
/activities\PhotoViewActivity.kt:169:            loadFrs()
/activities\PhotoViewActivity.kt:170:        }
/activities\PhotoViewActivity.kt:171:    }
/activities\PhotoViewActivity.kt:173:    override fun isNeedImmersionBar(): Boolean {
/activities\PhotoViewActivity.kt:174:        return false
/activities\PhotoViewActivity.kt:175:    }
/activities\PhotoViewActivity.kt:177:    override fun finish() {
/activities\PhotoViewActivity.kt:178:        super.finish()
/activities\PhotoViewActivity.kt:179:        overridePendingTransition(R.anim.anim_fade_in, R.anim.anim_fade_out)
/activities\PhotoViewActivity.kt:180:    }
/activities\PhotoViewActivity.kt:182:    override fun onBackPressed() {
/activities\PhotoViewActivity.kt:183:        finish()
/activities\PhotoViewActivity.kt:184:    }
/activities\PhotoViewActivity.kt:186:    private fun updateCounter(position: Int = startPosition) {
/activities\PhotoViewActivity.kt:187:        onShow(true)
/activities\PhotoViewActivity.kt:188:        if (photoViewBeans.size <= 1) {
/activities\PhotoViewActivity.kt:189:            mCounter.text = null
/activities\PhotoViewActivity.kt:190:        } else if (isFrs && lastIndex > 0) {
/activities\PhotoViewActivity.kt:191:            val index = photoViewBeans[position].index
/activities\PhotoViewActivity.kt:192:            mCounter.text = getString(R.string.tip_position, (index ?: position
/activities\PhotoViewActivity.kt:193:            + 1).toString(), amount)
/activities\PhotoViewActivity.kt:194:        } else {
/activities\PhotoViewActivity.kt:195:            mCounter.text = getString(R.string.tip_position, (position + 1).toString(), amount)
/activities\PhotoViewActivity.kt:196:        }
/activities\PhotoViewActivity.kt:197:    }
/activities\PhotoViewActivity.kt:199:    override fun onShow(autoHide: Boolean) {
/activities\PhotoViewActivity.kt:200:        handler.removeCallbacks(autoHideRunnable)
/activities\PhotoViewActivity.kt:201:        if (mAppBar.visibility == View.VISIBLE) {
/activities\PhotoViewActivity.kt:202:            if (autoHide) {
/activities\PhotoViewActivity.kt:203:                handler.postDelayed(autoHideRunnable, DEFAULT_HIDE_DELAY.toLong())
/activities\PhotoViewActivity.kt:204:            }
/activities\PhotoViewActivity.kt:205:            return
/activities\PhotoViewActivity.kt:206:        }
/activities\PhotoViewActivity.kt:207:        AnimUtil.alphaIn(mAppBar)
/activities\PhotoViewActivity.kt:208:                .setListener(object : AnimatorListenerAdapter() {
/activities\PhotoViewActivity.kt:209:                    override fun onAnimationEnd(animation: Animator) {
/activities\PhotoViewActivity.kt:210:                        mAppBar.visibility = View.VISIBLE
/activities\PhotoViewActivity.kt:211:                    }
/activities\PhotoViewActivity.kt:213:                    override fun onAnimationEnd(animation: Animator, isReverse: Boolean) {
/activities\PhotoViewActivity.kt:214:                        if (autoHide) {
/activities\PhotoViewActivity.kt:215:                            handler.postDelayed(autoHideRunnable, DEFAULT_HIDE_DELAY.toLong())
/activities\PhotoViewActivity.kt:216:                        }
/activities\PhotoViewActivity.kt:217:                    }
/activities\PhotoViewActivity.kt:218:                })
/activities\PhotoViewActivity.kt:219:                .start()
/activities\PhotoViewActivity.kt:220:    }
/activities\PhotoViewActivity.kt:222:    override fun onHide() {
/activities\PhotoViewActivity.kt:223:        if (mAppBar.visibility == View.GONE || mViewPager.orientation != ViewPager2.ORIENTATION_HORIZONTAL) {
/activities\PhotoViewActivity.kt:224:            return
/activities\PhotoViewActivity.kt:225:        }
/activities\PhotoViewActivity.kt:226:        AnimUtil.alphaOut(mAppBar)
/activities\PhotoViewActivity.kt:227:                .setListener(object : AnimatorListenerAdapter() {
/activities\PhotoViewActivity.kt:228:                    override fun onAnimationEnd(animation: Animator) {
/activities\PhotoViewActivity.kt:229:                        mAppBar.visibility = View.GONE
/activities\PhotoViewActivity.kt:230:                    }
/activities\PhotoViewActivity.kt:231:                })
/activities\PhotoViewActivity.kt:232:                .start()
/activities\PhotoViewActivity.kt:233:    }
/activities\PhotoViewActivity.kt:235:    override fun onMenuItemClick(item: MenuItem): Boolean {
/activities\PhotoViewActivity.kt:236:        when (item.itemId) {
/activities\PhotoViewActivity.kt:237:            R.id.menu_toggle_orientation -> {
/activities\PhotoViewActivity.kt:238:                item.setIcon(if (mViewPager.orientation == ViewPager2.ORIENTATION_HORIZONTAL) R.drawable.ic_round_view_day_white else R.drawable.ic_round_view_carousel_white)
/activities\PhotoViewActivity.kt:239:                item.setTitle(if (mViewPager.orientation == ViewPager2.ORIENTATION_HORIZONTAL) R.string.title_comic_mode_on else R.string.title_comic_mode)
/activities\PhotoViewActivity.kt:240:                Toast.makeText(this, if (mViewPager.orientation == ViewPager2.ORIENTATION_HORIZONTAL) R.string.toast_comic_mode_on else R.string.toast_comic_mode_off, Toast.LENGTH_SHORT).show()
/activities\PhotoViewActivity.kt:241:                mViewPager.orientation = if (mViewPager.orientation == ViewPager2.ORIENTATION_HORIZONTAL) ViewPager2.ORIENTATION_VERTICAL else ViewPager2.ORIENTATION_HORIZONTAL
/activities\PhotoViewActivity.kt:242:                return true
/activities\PhotoViewActivity.kt:243:            }
/activities\PhotoViewActivity.kt:244:            R.id.menu_save_image -> {
/activities\PhotoViewActivity.kt:245:                ImageUtil.download(this, mAdapter.getBean(mViewPager.currentItem).originUrl, mAdapter.getBean(mViewPager.currentItem).isGif)
/activities\PhotoViewActivity.kt:246:                return true
/activities\PhotoViewActivity.kt:247:            }
/activities\PhotoViewActivity.kt:248:            R.id.menu_share -> {
/activities\PhotoViewActivity.kt:249:                Toast.makeText(this, R.string.toast_preparing_share_pic, Toast.LENGTH_SHORT).show()
/activities\PhotoViewActivity.kt:250:                ImageUtil.download(this, mAdapter.getBean(mViewPager.currentItem).originUrl, mAdapter.getBean(mViewPager.currentItem).isGif, true) { uri: Uri? ->
/activities\PhotoViewActivity.kt:251:                    val intent = Intent(Intent.ACTION_SEND)
/activities\PhotoViewActivity.kt:252:                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
/activities\PhotoViewActivity.kt:253:                        intent.putExtra(Intent.EXTRA_STREAM, uri)
/activities\PhotoViewActivity.kt:254:                        intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
/activities\PhotoViewActivity.kt:255:                    } else {
/activities\PhotoViewActivity.kt:256:                        intent.putExtra(Intent.EXTRA_STREAM, uri)
/activities\PhotoViewActivity.kt:257:                    }
/activities\PhotoViewActivity.kt:258:                    intent.type = Intent.normalizeMimeType("image/jpeg")
/activities\PhotoViewActivity.kt:259:                    val chooser = Intent.createChooser(intent, getString(R.string.title_share_pic))
/activities\PhotoViewActivity.kt:260:                    if (intent.resolveActivity(packageManager) != null) {
/activities\PhotoViewActivity.kt:261:                        startActivity(chooser)
/activities\PhotoViewActivity.kt:262:                    }
/activities\PhotoViewActivity.kt:263:                }
/activities\PhotoViewActivity.kt:264:                return true
/activities\PhotoViewActivity.kt:265:            }
/activities\PhotoViewActivity.kt:266:        }
/activities\PhotoViewActivity.kt:267:        return false
/activities\PhotoViewActivity.kt:268:    }
/activities\PhotoViewActivity.kt:270:    companion object {
/activities\PhotoViewActivity.kt:271:        val TAG = PhotoViewActivity::class.java.simpleName
/activities\PhotoViewActivity.kt:272:        const val EXTRA_BEANS = "beans"
/activities\PhotoViewActivity.kt:273:        const val EXTRA_POSITION = "position"
/activities\PhotoViewActivity.kt:274:        const val EXTRA_FORUM_ID = "forum_id"
/activities\PhotoViewActivity.kt:275:        const val EXTRA_FORUM_NAME = "forum_name"
/activities\PhotoViewActivity.kt:276:        const val EXTRA_THREAD_ID = "thread_id"
/activities\PhotoViewActivity.kt:277:        const val EXTRA_SEE_LZ = "see_lz"
/activities\PhotoViewActivity.kt:278:        const val EXTRA_IS_FRS = "is_frs"
/activities\PhotoViewActivity.kt:279:        const val EXTRA_OBJ_TYPE = "obj_type"
/activities\PhotoViewActivity.kt:280:        const val DEFAULT_HIDE_DELAY = 3000
/activities\PhotoViewActivity.kt:281:        const val OBJ_TYPE_THREAD_PAGE = "pb"
/activities\PhotoViewActivity.kt:282:        const val OBJ_TYPE_FORUM_PAGE = "frs"
/activities\PhotoViewActivity.kt:283:        private val handler = Handler()
/activities\PhotoViewActivity.kt:285:        @JvmStatic
/activities\PhotoViewActivity.kt:286:        fun launch(context: Context, photoViewBean: PhotoViewBean) {
/activities\PhotoViewActivity.kt:287:            launch(context, arrayOf(photoViewBean))
/activities\PhotoViewActivity.kt:288:        }
/activities\PhotoViewActivity.kt:290:        @JvmStatic
/activities\PhotoViewActivity.kt:291:        fun launch(context: Context, photoViewBeanList: List<PhotoViewBean>) {
/activities\PhotoViewActivity.kt:292:            launch(context, photoViewBeanList.toTypedArray(), 0)
/activities\PhotoViewActivity.kt:293:        }
/activities\PhotoViewActivity.kt:295:        @JvmStatic
/activities\PhotoViewActivity.kt:296:        fun launch(context: Context, photoViewBeanList: List<PhotoViewBean>, position: Int) {
/activities\PhotoViewActivity.kt:297:            launch(context, photoViewBeanList.toTypedArray(), position)
/activities\PhotoViewActivity.kt:298:        }
/activities\PhotoViewActivity.kt:300:        @JvmStatic
/activities\PhotoViewActivity.kt:301:        @JvmOverloads
/activities\PhotoViewActivity.kt:302:        fun launch(context: Context, photoViewBeans: Array<PhotoViewBean>, position: Int = 0) {
/activities\PhotoViewActivity.kt:303:            context.startActivity(Intent(context, PhotoViewActivity::class.java)
/activities\PhotoViewActivity.kt:304:                    .putExtra(EXTRA_BEANS, photoViewBeans)
/activities\PhotoViewActivity.kt:305:                    .putExtra(EXTRA_POSITION, position)
/activities\PhotoViewActivity.kt:306:                    .putExtra(EXTRA_IS_FRS, false))
/activities\PhotoViewActivity.kt:307:        }
/activities\PhotoViewActivity.kt:309:        @JvmStatic
/activities\PhotoViewActivity.kt:310:        fun launch(context: Context,
/activities\PhotoViewActivity.kt:311:                   photoViewBeans: Array<PhotoViewBean?>?,
/activities\PhotoViewActivity.kt:312:                   position: Int,
/activities\PhotoViewActivity.kt:313:                   forumName: String?,
/activities\PhotoViewActivity.kt:314:                   forumId: String?,
/activities\PhotoViewActivity.kt:315:                   threadId: String?,
/activities\PhotoViewActivity.kt:316:                   seeLz: Boolean,
/activities\PhotoViewActivity.kt:317:                   objType: String?) {
/activities\PhotoViewActivity.kt:318:            context.startActivity(Intent(context, PhotoViewActivity::class.java)
/activities\PhotoViewActivity.kt:319:                    .putExtra(EXTRA_BEANS, photoViewBeans)
/activities\PhotoViewActivity.kt:320:                    .putExtra(EXTRA_POSITION, position)
/activities\PhotoViewActivity.kt:321:                    .putExtra(EXTRA_IS_FRS, true)
/activities\PhotoViewActivity.kt:322:                    .putExtra(EXTRA_FORUM_NAME, forumName)
/activities\PhotoViewActivity.kt:323:                    .putExtra(EXTRA_FORUM_ID, forumId)
/activities\PhotoViewActivity.kt:324:                    .putExtra(EXTRA_THREAD_ID, threadId)
/activities\PhotoViewActivity.kt:325:                    .putExtra(EXTRA_SEE_LZ, seeLz)
/activities\PhotoViewActivity.kt:326:                    .putExtra(EXTRA_OBJ_TYPE, objType))
/activities\PhotoViewActivity.kt:327:        }
/activities\PhotoViewActivity.kt:328:    }
/activities\PhotoViewActivity.kt:329:}/activities\ThreadActivity.kt:1:package com.huanchengfly.tieba.post.activities
/activities\ThreadActivity.kt:3:import android.animation.Animator
/activities\ThreadActivity.kt:4:import android.animation.AnimatorListenerAdapter
/activities\ThreadActivity.kt:5:import android.animation.ValueAnimator
/activities\ThreadActivity.kt:6:import android.annotation.SuppressLint
/activities\ThreadActivity.kt:7:import android.content.*
/activities\ThreadActivity.kt:8:import android.content.res.ColorStateList
/activities\ThreadActivity.kt:9:import android.graphics.Rect
/activities\ThreadActivity.kt:10:import android.net.Uri
/activities\ThreadActivity.kt:11:import android.os.Bundle
/activities\ThreadActivity.kt:12:import android.text.InputType
/activities\ThreadActivity.kt:13:import android.text.TextUtils
/activities\ThreadActivity.kt:14:import android.view.Menu
/activities\ThreadActivity.kt:15:import android.view.MenuItem
/activities\ThreadActivity.kt:16:import android.view.View
/activities\ThreadActivity.kt:17:import android.widget.ImageView
/activities\ThreadActivity.kt:18:import android.widget.RelativeLayout
/activities\ThreadActivity.kt:19:import android.widget.TextView
/activities\ThreadActivity.kt:20:import android.widget.Toast
/activities\ThreadActivity.kt:21:import androidx.appcompat.widget.Toolbar
/activities\ThreadActivity.kt:22:import androidx.recyclerview.widget.RecyclerView
/activities\ThreadActivity.kt:23:import androidx.recyclerview.widget.RecyclerView.OnChildAttachStateChangeListener
/activities\ThreadActivity.kt:24:import androidx.swiperefreshlayout.widget.SwipeRefreshLayout
/activities\ThreadActivity.kt:25:import butterknife.BindView
/activities\ThreadActivity.kt:26:import cn.jzvd.Jzvd
/activities\ThreadActivity.kt:27:import com.billy.android.preloader.PreLoader
/activities\ThreadActivity.kt:28:import com.bumptech.glide.Glide
/activities\ThreadActivity.kt:29:import com.google.android.material.snackbar.Snackbar
/activities\ThreadActivity.kt:30:import com.huanchengfly.tieba.post.R
/activities\ThreadActivity.kt:31:import com.huanchengfly.tieba.post.adapters.RecyclerThreadAdapter
/activities\ThreadActivity.kt:32:import com.huanchengfly.tieba.post.api.TiebaApi
/activities\ThreadActivity.kt:33:import com.huanchengfly.tieba.post.api.interfaces.CommonAPICallback
/activities\ThreadActivity.kt:34:import com.huanchengfly.tieba.post.api.models.AgreeBean
/activities\ThreadActivity.kt:35:import com.huanchengfly.tieba.post.api.models.CommonResponse
/activities\ThreadActivity.kt:36:import com.huanchengfly.tieba.post.api.models.ThreadContentBean
/activities\ThreadActivity.kt:37:import com.huanchengfly.tieba.post.api.models.ThreadContentBean.PostListItemBean
/activities\ThreadActivity.kt:38:import com.huanchengfly.tieba.post.api.retrofit.exception.TiebaException
/activities\ThreadActivity.kt:39:import com.huanchengfly.tieba.post.components.MyLinearLayoutManager
/activities\ThreadActivity.kt:40:import com.huanchengfly.tieba.post.components.dialogs.EditTextDialog
/activities\ThreadActivity.kt:41:import com.huanchengfly.tieba.post.components.dividers.ThreadDivider
/activities\ThreadActivity.kt:42:import com.huanchengfly.tieba.post.models.ReplyInfoBean
/activities\ThreadActivity.kt:43:import com.huanchengfly.tieba.post.models.ThreadHistoryInfoBean
/activities\ThreadActivity.kt:44:import com.huanchengfly.tieba.post.models.database.History
/activities\ThreadActivity.kt:45:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils
/activities\ThreadActivity.kt:46:import com.huanchengfly.tieba.post.utils.*
/activities\ThreadActivity.kt:47:import com.huanchengfly.tieba.post.utils.preload.PreloadUtil
/activities\ThreadActivity.kt:48:import com.huanchengfly.tieba.post.utils.preload.loaders.ThreadContentLoader
/activities\ThreadActivity.kt:49:import com.huanchengfly.tieba.post.widgets.VideoPlayerStandard
/activities\ThreadActivity.kt:50:import me.imid.swipebacklayout.lib.SwipeBackLayout.SwipeListener
/activities\ThreadActivity.kt:51:import retrofit2.Call
/activities\ThreadActivity.kt:52:import retrofit2.Callback
/activities\ThreadActivity.kt:53:import retrofit2.Response
/activities\ThreadActivity.kt:55:class ThreadActivity : BaseActivity(), View.OnClickListener {
/activities\ThreadActivity.kt:56:    @BindView(R.id.toolbar)
/activities\ThreadActivity.kt:57:    lateinit var toolbar: Toolbar
/activities\ThreadActivity.kt:58:    private var dataBean: ThreadContentBean? = null
/activities\ThreadActivity.kt:59:    @BindView(R.id.thread_refresh_view)
/activities\ThreadActivity.kt:60:    lateinit var refreshLayout: SwipeRefreshLayout
/activities\ThreadActivity.kt:61:    private var historyHelper: HistoryHelper? = null
/activities\ThreadActivity.kt:62:    @BindView(R.id.thread_bottom_bar_agree_btn)
/activities\ThreadActivity.kt:63:    lateinit var agreeBtn: ImageView
/activities\ThreadActivity.kt:64:    @BindView(R.id.thread_bottom_bar_agree_num)
/activities\ThreadActivity.kt:65:    lateinit var agreeNumTextView: TextView
/activities\ThreadActivity.kt:66:    private var agreeNum = 0
/activities\ThreadActivity.kt:67:    @BindView(R.id.thread_recycler_view)
/activities\ThreadActivity.kt:68:    lateinit var recyclerView: RecyclerView
/activities\ThreadActivity.kt:69:    lateinit var mAdapter: RecyclerThreadAdapter
/activities\ThreadActivity.kt:70:    lateinit var mLayoutManager: MyLinearLayoutManager
/activities\ThreadActivity.kt:71:    private var tid: String? = ""
/activities\ThreadActivity.kt:72:    private var pid = ""
/activities\ThreadActivity.kt:73:    private var from = ""
/activities\ThreadActivity.kt:74:    private var maxPid: String? = ""
/activities\ThreadActivity.kt:75:    private var tip = false
/activities\ThreadActivity.kt:76:    private var seeLz = false
/activities\ThreadActivity.kt:77:    private var sort = false
/activities\ThreadActivity.kt:78:    private var collect = false
/activities\ThreadActivity.kt:79:    private var agree = false
/activities\ThreadActivity.kt:80:    private var page = 0
/activities\ThreadActivity.kt:81:    private var totalPage = 0
/activities\ThreadActivity.kt:82:    private val replyReceiver: BroadcastReceiver = object : BroadcastReceiver() {
/activities\ThreadActivity.kt:83:        override fun onReceive(context: Context, intent: Intent) {
/activities\ThreadActivity.kt:84:            val action = intent.action
/activities\ThreadActivity.kt:85:            if (action != null && action == ACTION_REPLY_SUCCESS) {
/activities\ThreadActivity.kt:86:                val pid = intent.getStringExtra("pid")
/activities\ThreadActivity.kt:87:                if (pid != null) refreshByPid(pid) else refresh(false)
/activities\ThreadActivity.kt:88:            }
/activities\ThreadActivity.kt:89:        }
/activities\ThreadActivity.kt:90:    }
/activities\ThreadActivity.kt:91:    private var navigationHelper: NavigationHelper? = null
/activities\ThreadActivity.kt:92:    public override fun onSaveInstanceState(outState: Bundle) {
/activities\ThreadActivity.kt:93:        outState.putString("tid", tid)
/activities\ThreadActivity.kt:94:        outState.putString("pid", pid)
/activities\ThreadActivity.kt:95:        outState.putString("from", from)
/activities\ThreadActivity.kt:96:        outState.putBoolean("seeLz", seeLz)
/activities\ThreadActivity.kt:97:        outState.putBoolean("tip", tip)
/activities\ThreadActivity.kt:98:        outState.putBoolean("sort", sort)
/activities\ThreadActivity.kt:99:        outState.putBoolean("collect", collect)
/activities\ThreadActivity.kt:100:        super.onSaveInstanceState(outState)
/activities\ThreadActivity.kt:101:    }
/activities\ThreadActivity.kt:103:    public override fun onRestoreInstanceState(outState: Bundle) {
/activities\ThreadActivity.kt:104:        super.onRestoreInstanceState(outState)
/activities\ThreadActivity.kt:105:        tid = outState.getString("tid", tid)
/activities\ThreadActivity.kt:106:        pid = outState.getString("pid", pid)
/activities\ThreadActivity.kt:107:        from = outState.getString("from", from)
/activities\ThreadActivity.kt:108:        seeLz = outState.getBoolean("seeLz", seeLz)
/activities\ThreadActivity.kt:109:        tip = outState.getBoolean("tip", tip)
/activities\ThreadActivity.kt:110:        sort = outState.getBoolean("sort", sort)
/activities\ThreadActivity.kt:111:        collect = outState.getBoolean("collect", collect)
/activities\ThreadActivity.kt:112:    }
/activities\ThreadActivity.kt:114:    private val isTitleVisible: Boolean
/activities\ThreadActivity.kt:115:        get() {
/activities\ThreadActivity.kt:116:            if (recyclerView.childCount <= 0) {
/activities\ThreadActivity.kt:117:                return false
/activities\ThreadActivity.kt:118:            }
/activities\ThreadActivity.kt:119:            if (firstVisibleItemPosition > 0) {
/activities\ThreadActivity.kt:120:                return true
/activities\ThreadActivity.kt:121:            }
/activities\ThreadActivity.kt:122:            val child = recyclerView.getChildAt(0)
/activities\ThreadActivity.kt:123:            if (recyclerView.getChildViewHolder(child).itemViewType == RecyclerThreadAdapter.TYPE_REPLY) {
/activities\ThreadActivity.kt:124:                return true
/activities\ThreadActivity.kt:125:            }
/activities\ThreadActivity.kt:126:            val title = child.findViewById<View>(R.id.thread_list_item_content_title)
/activities\ThreadActivity.kt:127:            return title != null && !title.getGlobalVisibleRect(Rect())
/activities\ThreadActivity.kt:128:        }
/activities\ThreadActivity.kt:130:    private fun refreshTitle() {
/activities\ThreadActivity.kt:131:        if (dataBean != null && dataBean!!.thread != null && isTitleVisible) {
/activities\ThreadActivity.kt:132:            toolbar.title = dataBean!!.thread?.title
/activities\ThreadActivity.kt:133:            //toolbar.setSubtitle(getString(R.string.title_forum, dataBean.getForum().getName()));
/activities\ThreadActivity.kt:134:        } else {
/activities\ThreadActivity.kt:135:            toolbar.title = null
/activities\ThreadActivity.kt:136:            //toolbar.setSubtitle(null);
/activities\ThreadActivity.kt:137:        }
/activities\ThreadActivity.kt:138:    }
/activities\ThreadActivity.kt:140:    override fun getLayoutId(): Int {
/activities\ThreadActivity.kt:141:        return R.layout.activity_thread
/activities\ThreadActivity.kt:142:    }
/activities\ThreadActivity.kt:144:    @SuppressLint("ClickableViewAccessibility")
/activities\ThreadActivity.kt:145:    override fun onCreate(savedInstanceState: Bundle?) {
/activities\ThreadActivity.kt:146:        super.onCreate(savedInstanceState)
/activities\ThreadActivity.kt:147:        navigationHelper = NavigationHelper.newInstance(this)
/activities\ThreadActivity.kt:148:        swipeBackLayout.addSwipeListener(object : SwipeListener {
/activities\ThreadActivity.kt:149:            override fun onScrollStateChange(state: Int, scrollPercent: Float) {}
/activities\ThreadActivity.kt:150:            override fun onEdgeTouch(edgeFlag: Int) {
/activities\ThreadActivity.kt:151:                exit()
/activities\ThreadActivity.kt:152:            }
/activities\ThreadActivity.kt:154:            override fun onScrollOverThreshold() {}
/activities\ThreadActivity.kt:155:        })
/activities\ThreadActivity.kt:156:        ThemeUtil.setTranslucentThemeBackground(findViewById(R.id.background))
/activities\ThreadActivity.kt:157:        refreshLayout.apply {
/activities\ThreadActivity.kt:158:            isNestedScrollingEnabled = true
/activities\ThreadActivity.kt:159:            setOnRefreshListener { refresh() }
/activities\ThreadActivity.kt:160:            ThemeUtil.setThemeForSwipeRefreshLayout(this)
/activities\ThreadActivity.kt:161:        }
/activities\ThreadActivity.kt:162:        val replyBar = findViewById(R.id.thread_reply_bar) as RelativeLayout
/activities\ThreadActivity.kt:163:        val agreeBtnHolder = findViewById(R.id.thread_bottom_bar_agree) as RelativeLayout
/activities\ThreadActivity.kt:164:        agreeBtnHolder.setOnClickListener(this)
/activities\ThreadActivity.kt:165:        toolbar.setOnClickListener(this)
/activities\ThreadActivity.kt:166:        historyHelper = HistoryHelper(this)
/activities\ThreadActivity.kt:167:        mLayoutManager = MyLinearLayoutManager(this)
/activities\ThreadActivity.kt:168:        mAdapter = RecyclerThreadAdapter(this).apply {
/activities\ThreadActivity.kt:169:            setOnLoadMoreListener { isReload: Boolean ->
/activities\ThreadActivity.kt:170:                if (isReload) {
/activities\ThreadActivity.kt:171:                    refresh(false)
/activities\ThreadActivity.kt:172:                } else {
/activities\ThreadActivity.kt:173:                    loadMore()
/activities\ThreadActivity.kt:174:                }
/activities\ThreadActivity.kt:175:            }
/activities\ThreadActivity.kt:176:        }
/activities\ThreadActivity.kt:177:        recyclerView.apply {
/activities\ThreadActivity.kt:178:            setOnTouchListener { _, _ -> refreshLayout.isRefreshing }
/activities\ThreadActivity.kt:179:            addItemDecoration(ThreadDivider(this@ThreadActivity))
/activities\ThreadActivity.kt:180:            layoutManager = mLayoutManager
/activities\ThreadActivity.kt:181:            adapter = mAdapter
/activities\ThreadActivity.kt:182:            if (!appPreferences.loadPictureWhenScroll) {
/activities\ThreadActivity.kt:183:                addOnScrollListener(object : RecyclerView.OnScrollListener() {
/activities\ThreadActivity.kt:184:                    override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) {
/activities\ThreadActivity.kt:185:                        super.onScrollStateChanged(recyclerView, newState)
/activities\ThreadActivity.kt:186:                        if (!Util.canLoadGlide(this@ThreadActivity)) {
/activities\ThreadActivity.kt:187:                            return
/activities\ThreadActivity.kt:188:                        }
/activities\ThreadActivity.kt:189:                        if (newState == RecyclerView.SCROLL_STATE_IDLE) {
/activities\ThreadActivity.kt:190:                            Glide.with(this@ThreadActivity)
/activities\ThreadActivity.kt:191:                                    .resumeRequests()
/activities\ThreadActivity.kt:192:                        } else {
/activities\ThreadActivity.kt:193:                            Glide.with(this@ThreadActivity)
/activities\ThreadActivity.kt:194:                                    .pauseRequests()
/activities\ThreadActivity.kt:195:                        }
/activities\ThreadActivity.kt:196:                    }
/activities\ThreadActivity.kt:197:                })
/activities\ThreadActivity.kt:198:            }
/activities\ThreadActivity.kt:199:            addOnScrollListener(object : RecyclerView.OnScrollListener() {
/activities\ThreadActivity.kt:200:                override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) {
/activities\ThreadActivity.kt:201:                    refreshTitle()
/activities\ThreadActivity.kt:202:                }
/activities\ThreadActivity.kt:204:                override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {
/activities\ThreadActivity.kt:205:                    refreshTitle()
/activities\ThreadActivity.kt:206:                }
/activities\ThreadActivity.kt:207:            })
/activities\ThreadActivity.kt:208:            addOnChildAttachStateChangeListener(object : OnChildAttachStateChangeListener {
/activities\ThreadActivity.kt:209:                override fun onChildViewAttachedToWindow(view: View) {}
/activities\ThreadActivity.kt:210:                override fun onChildViewDetachedFromWindow(view: View) {
/activities\ThreadActivity.kt:211:                    if (refreshLayout.isRefreshing) {
/activities\ThreadActivity.kt:212:                        return
/activities\ThreadActivity.kt:213:                    }
/activities\ThreadActivity.kt:214:                    val videoPlayerStandard: VideoPlayerStandard? = view.findViewById(R.id.video_player)
/activities\ThreadActivity.kt:215:                    if (videoPlayerStandard != null && Jzvd.CURRENT_JZVD != null &&
/activities\ThreadActivity.kt:216:                            videoPlayerStandard.jzDataSource.containsTheUrl(Jzvd.CURRENT_JZVD.jzDataSource.currentUrl)) {
/activities\ThreadActivity.kt:217:                        if (Jzvd.CURRENT_JZVD != null && Jzvd.CURRENT_JZVD.screen != Jzvd.SCREEN_FULLSCREEN) {
/activities\ThreadActivity.kt:218:                            Jzvd.releaseAllVideos()
/activities\ThreadActivity.kt:219:                        }
/activities\ThreadActivity.kt:220:                    }
/activities\ThreadActivity.kt:221:                }
/activities\ThreadActivity.kt:222:            })
/activities\ThreadActivity.kt:223:        }
/activities\ThreadActivity.kt:224:        replyBar.setOnClickListener(this)
/activities\ThreadActivity.kt:225:        setSupportActionBar(toolbar)
/activities\ThreadActivity.kt:226:        val actionBar = supportActionBar
/activities\ThreadActivity.kt:227:        if (actionBar != null) {
/activities\ThreadActivity.kt:228:            actionBar.title = null
/activities\ThreadActivity.kt:229:            actionBar.setDisplayHomeAsUpEnabled(true)
/activities\ThreadActivity.kt:230:        }
/activities\ThreadActivity.kt:231:        val intent = intent
/activities\ThreadActivity.kt:232:        var tid: String? = ""
/activities\ThreadActivity.kt:233:        val seeLz: String
/activities\ThreadActivity.kt:234:        val pid: String?
/activities\ThreadActivity.kt:235:        val from: String?
/activities\ThreadActivity.kt:236:        var maxPid: String? = ""
/activities\ThreadActivity.kt:237:        if (intent.getStringExtra("url") == null) {
/activities\ThreadActivity.kt:238:            tid = intent.getStringExtra("tid")
/activities\ThreadActivity.kt:239:            pid = intent.getStringExtra("pid")
/activities\ThreadActivity.kt:240:            seeLz = if (intent.getBooleanExtra("seeLz", false)) "1" else "0"
/activities\ThreadActivity.kt:241:            from = intent.getStringExtra("from")
/activities\ThreadActivity.kt:242:            if ("collect" == from) {
/activities\ThreadActivity.kt:243:                maxPid = intent.getStringExtra("max_pid")
/activities\ThreadActivity.kt:244:            }
/activities\ThreadActivity.kt:245:        } else {
/activities\ThreadActivity.kt:246:            val uri = Uri.parse(intent.getStringExtra("url"))
/activities\ThreadActivity.kt:247:            if (uri.path!!.startsWith("/p/")) tid = uri.path!!.split("/p/").toTypedArray()[1] else if ((uri.path == "/mo/q/m") or (uri.path == "/f")) tid = uri.getQueryParameter("kz")
/activities\ThreadActivity.kt:248:            seeLz = uri.getQueryParameter("see_lz") ?: "0"
/activities\ThreadActivity.kt:249:            pid = uri.getQueryParameter("sc")
/activities\ThreadActivity.kt:250:            from = ""
/activities\ThreadActivity.kt:251:        }
/activities\ThreadActivity.kt:252:        this.tid = tid
/activities\ThreadActivity.kt:253:        this.seeLz = seeLz == "1"
/activities\ThreadActivity.kt:254:        this.pid = pid ?: ""
/activities\ThreadActivity.kt:255:        this.from = from ?: ""
/activities\ThreadActivity.kt:256:        this.maxPid = maxPid ?: ""
/activities\ThreadActivity.kt:257:        if (!TextUtils.isEmpty(this.tid)) {
/activities\ThreadActivity.kt:258:            mAdapter.isShowForum = FROM_FORUM != from
/activities\ThreadActivity.kt:259:            loadFirstData()
/activities\ThreadActivity.kt:260:        } else {
/activities\ThreadActivity.kt:261:            Toast.makeText(this, R.string.toast_param_error, Toast.LENGTH_SHORT).show()
/activities\ThreadActivity.kt:262:            finish()
/activities\ThreadActivity.kt:263:        }
/activities\ThreadActivity.kt:264:        refreshTitle()
/activities\ThreadActivity.kt:265:    }
/activities\ThreadActivity.kt:267:    fun hasMore(): Boolean {
/activities\ThreadActivity.kt:268:        if (dataBean!!.page?.hasMore != "1") {
/activities\ThreadActivity.kt:269:            mAdapter.loadEnd()
/activities\ThreadActivity.kt:270:            return false
/activities\ThreadActivity.kt:271:        }
/activities\ThreadActivity.kt:272:        return true
/activities\ThreadActivity.kt:273:    }
/activities\ThreadActivity.kt:275:    private fun loadMoreSuccess(threadContentBean: ThreadContentBean) {
/activities\ThreadActivity.kt:276:        dataBean = threadContentBean
/activities\ThreadActivity.kt:277:        page = Integer.valueOf(threadContentBean.page?.currentPage!!)
/activities\ThreadActivity.kt:278:        totalPage = Integer.valueOf(threadContentBean.page.totalPage!!)
/activities\ThreadActivity.kt:279:        mAdapter.addData(dataBean!!)
/activities\ThreadActivity.kt:280:        hasMore()
/activities\ThreadActivity.kt:281:        invalidateOptionsMenu()
/activities\ThreadActivity.kt:282:        preload()
/activities\ThreadActivity.kt:283:    }
/activities\ThreadActivity.kt:285:    fun loadMore() {
/activities\ThreadActivity.kt:286:        mAdapter.isSeeLz = seeLz
/activities\ThreadActivity.kt:287:        if (hasMore()) {
/activities\ThreadActivity.kt:288:            var page = page
/activities\ThreadActivity.kt:289:            if (sort) {
/activities\ThreadActivity.kt:290:                page -= 1
/activities\ThreadActivity.kt:291:            } else {
/activities\ThreadActivity.kt:292:                page += 1
/activities\ThreadActivity.kt:293:            }
/activities\ThreadActivity.kt:294:            if (PreLoader.exists(preloadId)) {
/activities\ThreadActivity.kt:295:                PreLoader.listenData(preloadId) { threadContentBean: ThreadContentBean? ->
/activities\ThreadActivity.kt:296:                    if (threadContentBean == null) {
/activities\ThreadActivity.kt:297:                        PreLoader.destroy(preloadId)
/activities\ThreadActivity.kt:298:                        loadMore()
/activities\ThreadActivity.kt:299:                    } else loadMoreSuccess(threadContentBean)
/activities\ThreadActivity.kt:300:                }
/activities\ThreadActivity.kt:301:                return
/activities\ThreadActivity.kt:302:            }
/activities\ThreadActivity.kt:303:            TiebaApi.getInstance().threadContent(tid!!, page, seeLz, sort).enqueue(object : Callback<ThreadContentBean> {
/activities\ThreadActivity.kt:304:                override fun onFailure(call: Call<ThreadContentBean>, t: Throwable) {
/activities\ThreadActivity.kt:305:                    mAdapter.loadFailed()
/activities\ThreadActivity.kt:306:                }
/activities\ThreadActivity.kt:308:                override fun onResponse(call: Call<ThreadContentBean>, response: Response<ThreadContentBean>) {
/activities\ThreadActivity.kt:309:                    loadMoreSuccess(response.body()!!)
/activities\ThreadActivity.kt:310:                }
/activities\ThreadActivity.kt:312:            })
/activities\ThreadActivity.kt:313:        }
/activities\ThreadActivity.kt:314:    }
/activities\ThreadActivity.kt:316:    private var preloadId = -1
/activities\ThreadActivity.kt:317:    private fun preload() {
/activities\ThreadActivity.kt:318:        PreLoader.destroy(preloadId)
/activities\ThreadActivity.kt:319:        if (hasMore() && !sort) {
/activities\ThreadActivity.kt:320:            preloadId = PreLoader.preLoad(ThreadContentLoader(tid!!, page + 1, seeLz))
/activities\ThreadActivity.kt:321:        }
/activities\ThreadActivity.kt:322:    }
/activities\ThreadActivity.kt:324:    private fun refreshSuccess(threadContentBean: ThreadContentBean) {
/activities\ThreadActivity.kt:325:        dataBean = threadContentBean
/activities\ThreadActivity.kt:326:        page = Integer.valueOf(threadContentBean.page?.currentPage!!)
/activities\ThreadActivity.kt:327:        totalPage = Integer.valueOf(threadContentBean.page.totalPage!!)
/activities\ThreadActivity.kt:328:        mAdapter.reset()
/activities\ThreadActivity.kt:329:        mAdapter.setData(threadContentBean)
/activities\ThreadActivity.kt:330:        title = threadContentBean.thread?.title
/activities\ThreadActivity.kt:331:        collect = threadContentBean.thread != null && "0" != threadContentBean.thread.collectStatus
/activities\ThreadActivity.kt:332:        agree = threadContentBean.thread?.agree != null && "0" != threadContentBean.thread.agree.hasAgree
/activities\ThreadActivity.kt:333:        agreeNumTextView.text = threadContentBean.thread?.agreeNum
/activities\ThreadActivity.kt:334:        agreeNum = Integer.valueOf(if (TextUtils.isEmpty(threadContentBean.thread?.agreeNum)) "0" else threadContentBean.thread?.agreeNum!!)
/activities\ThreadActivity.kt:335:        invalidateOptionsMenu()
/activities\ThreadActivity.kt:336:        hasMore()
/activities\ThreadActivity.kt:337:        refreshLayout.isRefreshing = false
/activities\ThreadActivity.kt:338:        refreshTitle()
/activities\ThreadActivity.kt:339:        preload()
/activities\ThreadActivity.kt:340:    }
/activities\ThreadActivity.kt:342:    @JvmOverloads
/activities\ThreadActivity.kt:343:    fun refresh(reset: Boolean = true) {
/activities\ThreadActivity.kt:344:        mAdapter.isSeeLz = seeLz
/activities\ThreadActivity.kt:345:        refreshLayout.isRefreshing = true
/activities\ThreadActivity.kt:346:        if (reset) {
/activities\ThreadActivity.kt:347:            recyclerView.scrollToPosition(0)
/activities\ThreadActivity.kt:348:            page = if (sort) totalPage else 1
/activities\ThreadActivity.kt:349:        }
/activities\ThreadActivity.kt:350:        TiebaApi.getInstance().threadContent(tid!!, page, seeLz, sort).enqueue(object : Callback<ThreadContentBean> {
/activities\ThreadActivity.kt:351:            override fun onFailure(call: Call<ThreadContentBean>, t: Throwable) {
/activities\ThreadActivity.kt:352:                if (t !is TiebaException) {
/activities\ThreadActivity.kt:353:                    Util.showNetworkErrorSnackbar(recyclerView) { refresh() }
/activities\ThreadActivity.kt:354:                } else {
/activities\ThreadActivity.kt:355:                    Toast.makeText(this@ThreadActivity, t.message, Toast.LENGTH_SHORT).show()
/activities\ThreadActivity.kt:356:                    refreshLayout.isRefreshing = false
/activities\ThreadActivity.kt:357:                }
/activities\ThreadActivity.kt:358:            }
/activities\ThreadActivity.kt:360:            override fun onResponse(call: Call<ThreadContentBean>, response: Response<ThreadContentBean>) {
/activities\ThreadActivity.kt:361:                refreshSuccess(response.body()!!)
/activities\ThreadActivity.kt:362:            }
/activities\ThreadActivity.kt:363:        })
/activities\ThreadActivity.kt:364:    }
/activities\ThreadActivity.kt:366:    override fun onStart() {
/activities\ThreadActivity.kt:367:        super.onStart()
/activities\ThreadActivity.kt:368:        val filter = IntentFilter()
/activities\ThreadActivity.kt:369:        filter.addAction(ACTION_REPLY_SUCCESS)
/activities\ThreadActivity.kt:370:        registerReceiver(replyReceiver, filter)
/activities\ThreadActivity.kt:371:    }
/activities\ThreadActivity.kt:373:    override fun onStop() {
/activities\ThreadActivity.kt:374:        super.onStop()
/activities\ThreadActivity.kt:375:        unregisterReceiver(replyReceiver)
/activities\ThreadActivity.kt:376:    }
/activities\ThreadActivity.kt:378:    fun refresh(pid: String) {
/activities\ThreadActivity.kt:379:        mAdapter.isSeeLz = seeLz
/activities\ThreadActivity.kt:380:        refreshLayout.isRefreshing = true
/activities\ThreadActivity.kt:381:        TiebaApi.getInstance().threadContent(tid!!, page, seeLz, sort).enqueue(object : Callback<ThreadContentBean> {
/activities\ThreadActivity.kt:382:            override fun onFailure(call: Call<ThreadContentBean>, t: Throwable) {
/activities\ThreadActivity.kt:383:                if (t !is TiebaException) {
/activities\ThreadActivity.kt:384:                    Util.showNetworkErrorSnackbar(recyclerView) { refresh() }
/activities\ThreadActivity.kt:385:                } else {
/activities\ThreadActivity.kt:386:                    Toast.makeText(this@ThreadActivity, t.message, Toast.LENGTH_SHORT).show()
/activities\ThreadActivity.kt:387:                    refreshLayout.isRefreshing = false
/activities\ThreadActivity.kt:388:                }
/activities\ThreadActivity.kt:389:            }
/activities\ThreadActivity.kt:391:            override fun onResponse(call: Call<ThreadContentBean>, response: Response<ThreadContentBean>) {
/activities\ThreadActivity.kt:392:                val threadContentBean = response.body()!!
/activities\ThreadActivity.kt:393:                refreshSuccess(threadContentBean)
/activities\ThreadActivity.kt:394:                val postListItemBean = mAdapter.allData.firstOrNull { it.id == pid }
/activities\ThreadActivity.kt:395:                if (postListItemBean != null) {
/activities\ThreadActivity.kt:396:                    if (!tip) when {
/activities\ThreadActivity.kt:397:                        FROM_COLLECT == from && maxPid != null -> {
/activities\ThreadActivity.kt:398:                            tip = true
/activities\ThreadActivity.kt:399:                            if (pid != maxPid) {
/activities\ThreadActivity.kt:400:                                Util.createSnackbar(recyclerView, getString(R.string.tip_collect, postListItemBean.floor), Snackbar.LENGTH_LONG)
/activities\ThreadActivity.kt:401:                                        .setAction(R.string.button_load_new) { refreshByPid(maxPid!!) }
/activities\ThreadActivity.kt:402:                                        .show()
/activities\ThreadActivity.kt:403:                            }
/activities\ThreadActivity.kt:404:                        }
/activities\ThreadActivity.kt:405:                        FROM_HISTORY == from && "1" != postListItemBean.floor -> {
/activities\ThreadActivity.kt:406:                            tip = true
/activities\ThreadActivity.kt:407:                            Util.createSnackbar(recyclerView, getString(R.string.tip_from_history, postListItemBean.floor), Snackbar.LENGTH_LONG)
/activities\ThreadActivity.kt:408:                                    .setAction(R.string.button_load_top) {
/activities\ThreadActivity.kt:409:                                        if (page <= 1) {
/activities\ThreadActivity.kt:410:                                            recyclerView.scrollToPosition(0)
/activities\ThreadActivity.kt:411:                                        } else {
/activities\ThreadActivity.kt:412:                                            refresh()
/activities\ThreadActivity.kt:413:                                        }
/activities\ThreadActivity.kt:414:                                    }
/activities\ThreadActivity.kt:415:                                    .show()
/activities\ThreadActivity.kt:416:                        }
/activities\ThreadActivity.kt:417:                    }
/activities\ThreadActivity.kt:418:                    if (pid != threadContentBean.postList?.get(0)?.id) {
/activities\ThreadActivity.kt:419:                        val position = mAdapter.allData.indexOf(postListItemBean)
/activities\ThreadActivity.kt:420:                        if (position >= 0) mLayoutManager.scrollToPositionWithOffset(position, 0)
/activities\ThreadActivity.kt:421:                    }
/activities\ThreadActivity.kt:422:                }
/activities\ThreadActivity.kt:423:            }
/activities\ThreadActivity.kt:424:        })
/activities\ThreadActivity.kt:425:    }
/activities\ThreadActivity.kt:427:    val url: String
/activities\ThreadActivity.kt:428:        get() = "https://tieba.baidu.com/p/$tid?see_lz=${if (seeLz) "1" else "0"}"
/activities\ThreadActivity.kt:430:    private fun refreshByPid(pid: String) {
/activities\ThreadActivity.kt:431:        mAdapter.isSeeLz = seeLz
/activities\ThreadActivity.kt:432:        refreshLayout.isRefreshing = true
/activities\ThreadActivity.kt:433:        TiebaApi.getInstance().threadContent(tid!!, pid, seeLz, sort).enqueue(object : Callback<ThreadContentBean> {
/activities\ThreadActivity.kt:434:            override fun onFailure(call: Call<ThreadContentBean>, t: Throwable) {
/activities\ThreadActivity.kt:435:                if (t is TiebaException) {
/activities\ThreadActivity.kt:436:                    Toast.makeText(this@ThreadActivity, t.message, Toast.LENGTH_SHORT).show()
/activities\ThreadActivity.kt:437:                    refreshLayout.isRefreshing = false
/activities\ThreadActivity.kt:438:                } else {
/activities\ThreadActivity.kt:439:                    Util.showNetworkErrorSnackbar(recyclerView) { refresh() }
/activities\ThreadActivity.kt:440:                }
/activities\ThreadActivity.kt:441:            }
/activities\ThreadActivity.kt:443:            override fun onResponse(call: Call<ThreadContentBean>, response: Response<ThreadContentBean>) {
/activities\ThreadActivity.kt:444:                val threadContentBean = response.body()!!
/activities\ThreadActivity.kt:445:                dataBean = threadContentBean
/activities\ThreadActivity.kt:446:                page = Integer.valueOf(threadContentBean.page?.currentPage!!)
/activities\ThreadActivity.kt:447:                totalPage = Integer.valueOf(threadContentBean.page.totalPage!!)
/activities\ThreadActivity.kt:448:                refresh(pid)
/activities\ThreadActivity.kt:449:            }
/activities\ThreadActivity.kt:451:        })
/activities\ThreadActivity.kt:452:    }
/activities\ThreadActivity.kt:454:    private fun loadFirstData() {
/activities\ThreadActivity.kt:455:        if (TextUtils.isEmpty(pid)) {
/activities\ThreadActivity.kt:456:            if (PreloadUtil.isPreloading(this)) {
/activities\ThreadActivity.kt:457:                refreshLayout.isRefreshing = true
/activities\ThreadActivity.kt:458:                val preloadId = PreloadUtil.getPreloadId(this)
/activities\ThreadActivity.kt:459:                PreLoader.listenData(preloadId) { threadContentBean: ThreadContentBean? ->
/activities\ThreadActivity.kt:460:                    if (threadContentBean == null) {
/activities\ThreadActivity.kt:461:                        refresh()
/activities\ThreadActivity.kt:462:                    } else {
/activities\ThreadActivity.kt:463:                        refreshSuccess(threadContentBean)
/activities\ThreadActivity.kt:464:                        PreLoader.destroy(preloadId)
/activities\ThreadActivity.kt:465:                    }
/activities\ThreadActivity.kt:466:                }
/activities\ThreadActivity.kt:467:            } else refresh()
/activities\ThreadActivity.kt:468:        } else {
/activities\ThreadActivity.kt:469:            refreshByPid(pid)
/activities\ThreadActivity.kt:470:        }
/activities\ThreadActivity.kt:471:    }
/activities\ThreadActivity.kt:473:    override fun setTitle(newTitle: String) {
/activities\ThreadActivity.kt:474:        toolbar.title = newTitle
/activities\ThreadActivity.kt:475:    }
/activities\ThreadActivity.kt:477:    private fun isLz(postListItemBean: PostListItemBean?): Boolean {
/activities\ThreadActivity.kt:478:        return dataBean!!.thread != null && dataBean!!.thread?.author != null && postListItemBean != null &&
/activities\ThreadActivity.kt:479:                TextUtils.equals(dataBean!!.thread?.author?.id, postListItemBean.authorId)
/activities\ThreadActivity.kt:480:    }
/activities\ThreadActivity.kt:482:    override fun onOptionsItemSelected(item: MenuItem): Boolean {
/activities\ThreadActivity.kt:483:        when (item.itemId) {
/activities\ThreadActivity.kt:484:            R.id.menu_report -> navigationHelper!!.navigationByData(NavigationHelper.ACTION_URL,
/activities\ThreadActivity.kt:485:                    getString(R.string.url_post_report,
/activities\ThreadActivity.kt:486:                            dataBean!!.forum?.id,
/activities\ThreadActivity.kt:487:                            dataBean!!.thread?.threadId,
/activities\ThreadActivity.kt:488:                            dataBean!!.thread?.postId))
/activities\ThreadActivity.kt:489:            R.id.menu_share -> TiebaUtil.shareText(this, url, if (dataBean == null) null else dataBean!!.thread?.title)
/activities\ThreadActivity.kt:490:            R.id.menu_jump_page -> {
/activities\ThreadActivity.kt:491:                val dialog = EditTextDialog(this)
/activities\ThreadActivity.kt:492:                        .setInputType(InputType.TYPE_CLASS_NUMBER or InputType.TYPE_NUMBER_VARIATION_NORMAL)
/activities\ThreadActivity.kt:493:                        .setHelperText(String.format(getString(R.string.tip_jump_page), page, totalPage))
/activities\ThreadActivity.kt:494:                        .setOnSubmitListener { page: String? ->
/activities\ThreadActivity.kt:495:                            val pn = Integer.valueOf(page!!)
/activities\ThreadActivity.kt:496:                            if (pn in 1..totalPage) {
/activities\ThreadActivity.kt:497:                                this.page = pn
/activities\ThreadActivity.kt:498:                                refresh(false)
/activities\ThreadActivity.kt:499:                            } else {
/activities\ThreadActivity.kt:500:                                Toast.makeText(this@ThreadActivity, R.string.toast_jump_page_too_big, Toast.LENGTH_SHORT).show()
/activities\ThreadActivity.kt:501:                            }
/activities\ThreadActivity.kt:502:                        }
/activities\ThreadActivity.kt:503:                dialog.setTitle(R.string.title_jump_page)
/activities\ThreadActivity.kt:504:                dialog.show()
/activities\ThreadActivity.kt:505:            }
/activities\ThreadActivity.kt:506:            R.id.menu_see_lz -> {
/activities\ThreadActivity.kt:507:                seeLz = !seeLz
/activities\ThreadActivity.kt:508:                mAdapter.isSeeLz = seeLz
/activities\ThreadActivity.kt:509:                val postListItemBean = firstVisibleItem
/activities\ThreadActivity.kt:510:                if (postListItemBean == null || !isLz(postListItemBean)) {
/activities\ThreadActivity.kt:511:                    refresh()
/activities\ThreadActivity.kt:512:                } else {
/activities\ThreadActivity.kt:513:                    refreshByPid(postListItemBean.id!!)
/activities\ThreadActivity.kt:514:                }
/activities\ThreadActivity.kt:515:            }
/activities\ThreadActivity.kt:516:            R.id.menu_sort -> {
/activities\ThreadActivity.kt:517:                sort = !sort
/activities\ThreadActivity.kt:518:                refresh()
/activities\ThreadActivity.kt:519:            }
/activities\ThreadActivity.kt:520:            R.id.menu_pure_read -> if (!mAdapter.isImmersive) {
/activities\ThreadActivity.kt:521:                mAdapter.isImmersive = true
/activities\ThreadActivity.kt:522:                if (!seeLz) {
/activities\ThreadActivity.kt:523:                    seeLz = true
/activities\ThreadActivity.kt:524:                    mAdapter.isSeeLz = seeLz
/activities\ThreadActivity.kt:525:                    refresh()
/activities\ThreadActivity.kt:526:                }
/activities\ThreadActivity.kt:527:            } else {
/activities\ThreadActivity.kt:528:                mAdapter.isImmersive = false
/activities\ThreadActivity.kt:529:            }
/activities\ThreadActivity.kt:530:            R.id.menu_delete -> TiebaApi.getInstance().delThread(dataBean!!.forum?.id!!, dataBean!!.forum?.name!!, dataBean!!.thread?.id!!, dataBean!!.anti?.tbs!!).enqueue(object : Callback<CommonResponse> {
/activities\ThreadActivity.kt:531:                override fun onFailure(call: Call<CommonResponse>, t: Throwable) {
/activities\ThreadActivity.kt:532:                    Toast.makeText(this@ThreadActivity, getString(R.string.toast_delete_error, t.message), Toast.LENGTH_SHORT).show()
/activities\ThreadActivity.kt:533:                }
/activities\ThreadActivity.kt:535:                override fun onResponse(call: Call<CommonResponse>, response: Response<CommonResponse>) {
/activities\ThreadActivity.kt:536:                    Toast.makeText(this@ThreadActivity, R.string.toast_delete_thread_success, Toast.LENGTH_SHORT).show()
/activities\ThreadActivity.kt:537:                    finish()
/activities\ThreadActivity.kt:538:                }
/activities\ThreadActivity.kt:540:            })
/activities\ThreadActivity.kt:541:            R.id.menu_collect -> {
/activities\ThreadActivity.kt:542:                if (dataBean != null) {
/activities\ThreadActivity.kt:543:                    if (collect) {
/activities\ThreadActivity.kt:544:                        TiebaApi.getInstance().removeStore(tid!!, dataBean!!.anti?.tbs!!).enqueue(object : Callback<CommonResponse> {
/activities\ThreadActivity.kt:545:                            override fun onFailure(call: Call<CommonResponse>, t: Throwable) {
/activities\ThreadActivity.kt:546:                                Toast.makeText(this@ThreadActivity, getString(R.string.toast_collect_remove_error, t.message), Toast.LENGTH_SHORT).show()
/activities\ThreadActivity.kt:547:                            }
/activities\ThreadActivity.kt:549:                            override fun onResponse(call: Call<CommonResponse>, response: Response<CommonResponse>) {
/activities\ThreadActivity.kt:550:                                Toast.makeText(this@ThreadActivity, R.string.toast_collect_remove_success, Toast.LENGTH_SHORT).show()
/activities\ThreadActivity.kt:551:                                collect = !collect
/activities\ThreadActivity.kt:552:                                invalidateOptionsMenu()
/activities\ThreadActivity.kt:553:                            }
/activities\ThreadActivity.kt:555:                        })
/activities\ThreadActivity.kt:556:                    } else {
/activities\ThreadActivity.kt:557:                        collect(object : CommonAPICallback<CommonResponse> {
/activities\ThreadActivity.kt:558:                            override fun onSuccess(data: CommonResponse) {
/activities\ThreadActivity.kt:559:                                Toast.makeText(this@ThreadActivity, R.string.toast_collect_add_success, Toast.LENGTH_SHORT).show()
/activities\ThreadActivity.kt:560:                                collect = !collect
/activities\ThreadActivity.kt:561:                                invalidateOptionsMenu()
/activities\ThreadActivity.kt:562:                            }
/activities\ThreadActivity.kt:564:                            override fun onFailure(code: Int, error: String) {
/activities\ThreadActivity.kt:565:                                Toast.makeText(this@ThreadActivity, getString(R.string.toast_collect_add_error) + " " + error, Toast.LENGTH_SHORT).show()
/activities\ThreadActivity.kt:566:                            }
/activities\ThreadActivity.kt:567:                        }, false)
/activities\ThreadActivity.kt:568:                    }
/activities\ThreadActivity.kt:569:                }
/activities\ThreadActivity.kt:570:                return true
/activities\ThreadActivity.kt:571:            }
/activities\ThreadActivity.kt:572:        }
/activities\ThreadActivity.kt:573:        return super.onOptionsItemSelected(item)
/activities\ThreadActivity.kt:574:    }
/activities\ThreadActivity.kt:576:    private val firstVisibleItemPosition: Int
/activities\ThreadActivity.kt:577:        get() {
/activities\ThreadActivity.kt:578:            if (dataBean == null) return 0
/activities\ThreadActivity.kt:579:            var position = mLayoutManager.findFirstVisibleItemPosition() - 1
/activities\ThreadActivity.kt:580:            position = if (position < 0) 0 else if (position < mAdapter.dataCount) position else mAdapter.dataCount - 1
/activities\ThreadActivity.kt:581:            return position
/activities\ThreadActivity.kt:582:        }
/activities\ThreadActivity.kt:584:    private val firstVisibleItem: PostListItemBean?
/activities\ThreadActivity.kt:585:        get() {
/activities\ThreadActivity.kt:586:            if (dataBean == null) return null
/activities\ThreadActivity.kt:587:            var position = mLayoutManager.findFirstVisibleItemPosition() - 1
/activities\ThreadActivity.kt:588:            position = if (position < 0) 0 else if (position < mAdapter.dataCount) position else mAdapter.dataCount - 1
/activities\ThreadActivity.kt:589:            return mAdapter.getData(position)
/activities\ThreadActivity.kt:590:        }
/activities\ThreadActivity.kt:592:    private val lastVisibleItem: PostListItemBean?
/activities\ThreadActivity.kt:593:        get() {
/activities\ThreadActivity.kt:594:            if (dataBean == null) return null
/activities\ThreadActivity.kt:595:            var position = mLayoutManager.findLastVisibleItemPosition() - 1
/activities\ThreadActivity.kt:596:            position = if (position < 0) 0 else if (position < mAdapter.dataCount) position else mAdapter.dataCount - 1
/activities\ThreadActivity.kt:597:            return mAdapter.getData(position)
/activities\ThreadActivity.kt:598:        }
/activities\ThreadActivity.kt:600:    private fun collect(commonAPICallback: CommonAPICallback<CommonResponse>?, update: Boolean) {
/activities\ThreadActivity.kt:601:        if (dataBean == null || tid == null) return
/activities\ThreadActivity.kt:602:        val postListItemBean = firstVisibleItem ?: return
/activities\ThreadActivity.kt:603:        TiebaApi.getInstance().addStore(tid!!, postListItemBean.id!!, tbs = dataBean!!.anti?.tbs!!).enqueue(object : Callback<CommonResponse> {
/activities\ThreadActivity.kt:604:            override fun onFailure(call: Call<CommonResponse>, t: Throwable) {
/activities\ThreadActivity.kt:605:                if (t is TiebaException) {
/activities\ThreadActivity.kt:606:                    commonAPICallback?.onFailure(t.code, t.message)
/activities\ThreadActivity.kt:607:                } else {
/activities\ThreadActivity.kt:608:                    commonAPICallback?.onFailure(-1, t.message)
/activities\ThreadActivity.kt:609:                }
/activities\ThreadActivity.kt:610:            }
/activities\ThreadActivity.kt:612:            override fun onResponse(call: Call<CommonResponse>, response: Response<CommonResponse>) {
/activities\ThreadActivity.kt:613:                commonAPICallback?.onSuccess(response.body()!!)
/activities\ThreadActivity.kt:614:            }
/activities\ThreadActivity.kt:616:        })
/activities\ThreadActivity.kt:617:        if (!update) Util.miuiFav(this, getString(R.string.title_miui_fav, dataBean!!.thread?.title), url)
/activities\ThreadActivity.kt:618:    }
/activities\ThreadActivity.kt:620:    override fun onCreateOptionsMenu(menu: Menu): Boolean {
/activities\ThreadActivity.kt:621:        menuInflater.inflate(R.menu.menu_tie_toolbar, menu)
/activities\ThreadActivity.kt:622:        return super.onCreateOptionsMenu(menu)
/activities\ThreadActivity.kt:623:    }
/activities\ThreadActivity.kt:625:    override fun onPrepareOptionsMenu(menu: Menu): Boolean {
/activities\ThreadActivity.kt:626:        val itemSeeLz = menu.findItem(R.id.menu_see_lz)
/activities\ThreadActivity.kt:627:        val itemSort = menu.findItem(R.id.menu_sort)
/activities\ThreadActivity.kt:628:        val itemCollect = menu.findItem(R.id.menu_collect)
/activities\ThreadActivity.kt:629:        val itemPure = menu.findItem(R.id.menu_pure_read)
/activities\ThreadActivity.kt:630:        val itemDelete = menu.findItem(R.id.menu_delete)
/activities\ThreadActivity.kt:631:        if (seeLz) {
/activities\ThreadActivity.kt:632:            itemSeeLz.setIcon(R.drawable.ic_round_account_circle)
/activities\ThreadActivity.kt:633:            itemSeeLz.setTitle(R.string.title_see_lz_on)
/activities\ThreadActivity.kt:634:            itemSeeLz.isChecked = true
/activities\ThreadActivity.kt:635:        } else {
/activities\ThreadActivity.kt:636:            itemSeeLz.setIcon(R.drawable.ic_outline_account_circle)
/activities\ThreadActivity.kt:637:            itemSeeLz.setTitle(R.string.title_see_lz)
/activities\ThreadActivity.kt:638:            itemSeeLz.isChecked = false
/activities\ThreadActivity.kt:639:        }
/activities\ThreadActivity.kt:640:        mAdapter.isSeeLz = seeLz
/activities\ThreadActivity.kt:641:        if (sort) {
/activities\ThreadActivity.kt:642:            itemSort.setTitle(R.string.title_sort_on)
/activities\ThreadActivity.kt:643:        } else {
/activities\ThreadActivity.kt:644:            itemSort.setTitle(R.string.title_sort)
/activities\ThreadActivity.kt:645:        }
/activities\ThreadActivity.kt:646:        if (collect) {
/activities\ThreadActivity.kt:647:            itemCollect.title = getString(R.string.title_collect_on)
/activities\ThreadActivity.kt:648:        } else {
/activities\ThreadActivity.kt:649:            itemCollect.title = getString(R.string.title_collect)
/activities\ThreadActivity.kt:650:        }
/activities\ThreadActivity.kt:651:        if (agree) {
/activities\ThreadActivity.kt:652:            agreeBtn.setImageResource(R.drawable.ic_twotone_like)
/activities\ThreadActivity.kt:653:            agreeBtn.imageTintList = ColorStateList.valueOf(ThemeUtils.getColorByAttr(this, R.attr.colorAccent))
/activities\ThreadActivity.kt:654:            agreeNumTextView.setTextColor(ColorStateList.valueOf(ThemeUtils.getColorByAttr(this, R.attr.colorAccent)))
/activities\ThreadActivity.kt:655:            agreeBtn.contentDescription = getString(R.string.title_agreed)
/activities\ThreadActivity.kt:656:        } else {
/activities\ThreadActivity.kt:657:            agreeBtn.setImageResource(R.drawable.ic_outline_like)
/activities\ThreadActivity.kt:658:            agreeBtn.imageTintList = ColorStateList.valueOf(ThemeUtil.getTextColor(this))
/activities\ThreadActivity.kt:659:            agreeNumTextView.setTextColor(ColorStateList.valueOf(ThemeUtil.getTextColor(this)))
/activities\ThreadActivity.kt:660:            agreeBtn.contentDescription = getString(R.string.title_agree)
/activities\ThreadActivity.kt:661:        }
/activities\ThreadActivity.kt:662:        if (mAdapter.isImmersive) {
/activities\ThreadActivity.kt:663:            itemPure.setTitle(R.string.title_pure_read_on)
/activities\ThreadActivity.kt:664:        } else {
/activities\ThreadActivity.kt:665:            itemPure.setTitle(R.string.title_pure_read)
/activities\ThreadActivity.kt:666:        }
/activities\ThreadActivity.kt:667:        itemDelete.isVisible = dataBean != null && TextUtils.equals(dataBean!!.user?.id, dataBean!!.thread?.author?.id)
/activities\ThreadActivity.kt:668:        return super.onPrepareOptionsMenu(menu)
/activities\ThreadActivity.kt:669:    }
/activities\ThreadActivity.kt:671:    override fun finish() {
/activities\ThreadActivity.kt:672:        if (dataBean != null && dataBean!!.thread != null) {
/activities\ThreadActivity.kt:673:            val postListItemBean = lastVisibleItem
/activities\ThreadActivity.kt:674:            var extras = ""
/activities\ThreadActivity.kt:675:            if (postListItemBean != null) {
/activities\ThreadActivity.kt:676:                extras = ThreadHistoryInfoBean()
/activities\ThreadActivity.kt:677:                        .setPid(postListItemBean.id)
/activities\ThreadActivity.kt:678:                        .setSeeLz(seeLz)
/activities\ThreadActivity.kt:679:                        .toString()
/activities\ThreadActivity.kt:680:            }
/activities\ThreadActivity.kt:681:            val history = History()
/activities\ThreadActivity.kt:682:                    .setData(tid)
/activities\ThreadActivity.kt:683:                    .setExtras(extras)
/activities\ThreadActivity.kt:684:                    .setTitle(dataBean!!.thread?.title)
/activities\ThreadActivity.kt:685:                    .setType(HistoryHelper.TYPE_THREAD)
/activities\ThreadActivity.kt:686:            if (dataBean!!.thread?.author != null) {
/activities\ThreadActivity.kt:687:                history.avatar = dataBean!!.thread?.author?.portrait
/activities\ThreadActivity.kt:688:                history.username = dataBean!!.thread?.author?.nameShow
/activities\ThreadActivity.kt:689:            }
/activities\ThreadActivity.kt:690:            historyHelper!!.writeHistory(history)
/activities\ThreadActivity.kt:691:        }
/activities\ThreadActivity.kt:692:        super.finish()
/activities\ThreadActivity.kt:693:    }
/activities\ThreadActivity.kt:695:    private fun exit(): Boolean {
/activities\ThreadActivity.kt:696:        if (collect) {
/activities\ThreadActivity.kt:697:            DialogUtil.build(this)
/activities\ThreadActivity.kt:698:                    .setMessage(R.string.message_update_store_floor)
/activities\ThreadActivity.kt:699:                    .setPositiveButton(R.string.button_yes) { dialog: DialogInterface, _ ->
/activities\ThreadActivity.kt:700:                        collect(object : CommonAPICallback<CommonResponse> {
/activities\ThreadActivity.kt:701:                            override fun onSuccess(data: CommonResponse) {
/activities\ThreadActivity.kt:702:                                Toast.makeText(this@ThreadActivity, R.string.toast_collect_update_success, Toast.LENGTH_SHORT).show()
/activities\ThreadActivity.kt:703:                                dialog.cancel()
/activities\ThreadActivity.kt:704:                                finish()
/activities\ThreadActivity.kt:705:                            }
/activities\ThreadActivity.kt:707:                            override fun onFailure(code: Int, error: String) {
/activities\ThreadActivity.kt:708:                                Toast.makeText(this@ThreadActivity, getString(R.string.toast_collect_update_error, error), Toast.LENGTH_SHORT).show()
/activities\ThreadActivity.kt:709:                            }
/activities\ThreadActivity.kt:710:                        }, true)
/activities\ThreadActivity.kt:711:                    }
/activities\ThreadActivity.kt:712:                    .setNegativeButton(R.string.button_no) { dialog: DialogInterface, _ ->
/activities\ThreadActivity.kt:713:                        dialog.cancel()
/activities\ThreadActivity.kt:714:                        finish()
/activities\ThreadActivity.kt:715:                    }
/activities\ThreadActivity.kt:716:                    .setNeutralButton(R.string.button_cancel, null)
/activities\ThreadActivity.kt:717:                    .create()
/activities\ThreadActivity.kt:718:                    .show()
/activities\ThreadActivity.kt:719:            return false
/activities\ThreadActivity.kt:720:        }
/activities\ThreadActivity.kt:721:        return true
/activities\ThreadActivity.kt:722:    }
/activities\ThreadActivity.kt:724:    override fun onBackPressed() {
/activities\ThreadActivity.kt:725:        if (Jzvd.backPress()) {
/activities\ThreadActivity.kt:726:            return
/activities\ThreadActivity.kt:727:        }
/activities\ThreadActivity.kt:728:        if (exit()) {
/activities\ThreadActivity.kt:729:            super.onBackPressed()
/activities\ThreadActivity.kt:730:        }
/activities\ThreadActivity.kt:731:    }
/activities\ThreadActivity.kt:733:    override fun onClick(v: View) {
/activities\ThreadActivity.kt:734:        when (v.id) {
/activities\ThreadActivity.kt:735:            R.id.thread_reply_bar -> if (dataBean != null && dataBean!!.thread != null) {
/activities\ThreadActivity.kt:736:                startActivity(Intent(this@ThreadActivity, ReplyActivity::class.java)
/activities\ThreadActivity.kt:737:                        .putExtra("data", ReplyInfoBean(dataBean!!.thread?.id,
/activities\ThreadActivity.kt:738:                                dataBean!!.forum?.id,
/activities\ThreadActivity.kt:739:                                dataBean!!.forum?.name,
/activities\ThreadActivity.kt:740:                                dataBean!!.anti?.tbs,
/activities\ThreadActivity.kt:741:                                dataBean!!.user?.nameShow).setPn(dataBean!!.page?.offset).toString()))
/activities\ThreadActivity.kt:742:            }
/activities\ThreadActivity.kt:743:            R.id.toolbar -> recyclerView.scrollToPosition(0)
/activities\ThreadActivity.kt:744:            R.id.thread_bottom_bar_agree -> if (dataBean != null && dataBean!!.thread != null) {
/activities\ThreadActivity.kt:745:                if (!agree) {
/activities\ThreadActivity.kt:746:                    agree = true
/activities\ThreadActivity.kt:747:                    agreeNum += 1
/activities\ThreadActivity.kt:748:                    invalidateAgreeStatus()
/activities\ThreadActivity.kt:749:                    TiebaApi.getInstance().agree(dataBean!!.thread?.threadInfo?.threadId!!, dataBean!!.thread?.threadInfo?.firstPostId!!).enqueue(object : Callback<AgreeBean> {
/activities\ThreadActivity.kt:750:                        override fun onFailure(call: Call<AgreeBean>, t: Throwable) {
/activities\ThreadActivity.kt:751:                            agree = false
/activities\ThreadActivity.kt:752:                            agreeNum -= 1
/activities\ThreadActivity.kt:753:                            Toast.makeText(this@ThreadActivity, getString(R.string.toast_agree_failed, t.message), Toast.LENGTH_SHORT).show()
/activities\ThreadActivity.kt:754:                            invalidateAgreeStatus()
/activities\ThreadActivity.kt:755:                        }
/activities\ThreadActivity.kt:757:                        override fun onResponse(call: Call<AgreeBean>, response: Response<AgreeBean>) {
/activities\ThreadActivity.kt:758:                            if (!agree) {
/activities\ThreadActivity.kt:759:                                agree = true
/activities\ThreadActivity.kt:760:                                invalidateAgreeStatus()
/activities\ThreadActivity.kt:761:                            }
/activities\ThreadActivity.kt:762:                        }
/activities\ThreadActivity.kt:763:                    })
/activities\ThreadActivity.kt:764:                } else {
/activities\ThreadActivity.kt:765:                    agree = false
/activities\ThreadActivity.kt:766:                    agreeNum -= 1
/activities\ThreadActivity.kt:767:                    invalidateAgreeStatus()
/activities\ThreadActivity.kt:768:                    TiebaApi.getInstance().disagree(dataBean!!.thread?.threadInfo?.threadId!!, dataBean!!.thread?.threadInfo?.firstPostId!!).enqueue(object : Callback<AgreeBean> {
/activities\ThreadActivity.kt:769:                        override fun onFailure(call: Call<AgreeBean>, t: Throwable) {
/activities\ThreadActivity.kt:770:                            agree = true
/activities\ThreadActivity.kt:771:                            agreeNum += 1
/activities\ThreadActivity.kt:772:                            invalidateAgreeStatus()
/activities\ThreadActivity.kt:773:                            Toast.makeText(this@ThreadActivity, getString(R.string.toast_unagree_failed, t.message), Toast.LENGTH_SHORT).show()
/activities\ThreadActivity.kt:774:                        }
/activities\ThreadActivity.kt:776:                        override fun onResponse(call: Call<AgreeBean>, response: Response<AgreeBean>) {
/activities\ThreadActivity.kt:777:                            if (agree) {
/activities\ThreadActivity.kt:778:                                agree = false
/activities\ThreadActivity.kt:779:                                invalidateAgreeStatus()
/activities\ThreadActivity.kt:780:                            }
/activities\ThreadActivity.kt:781:                        }
/activities\ThreadActivity.kt:782:                    })
/activities\ThreadActivity.kt:783:                }
/activities\ThreadActivity.kt:784:            }
/activities\ThreadActivity.kt:785:        }
/activities\ThreadActivity.kt:786:    }
/activities\ThreadActivity.kt:788:    fun invalidateAgreeStatus() {
/activities\ThreadActivity.kt:789:        val color = ThemeUtils.getColorByAttr(this, R.attr.colorAccent)
/activities\ThreadActivity.kt:790:        if (agreeBtn.imageTintList != null) {
/activities\ThreadActivity.kt:791:            val agreeBtnAnimator: ValueAnimator
/activities\ThreadActivity.kt:792:            val agreeNumAnimator: ValueAnimator
/activities\ThreadActivity.kt:793:            if (agree) {
/activities\ThreadActivity.kt:794:                agreeNumAnimator = colorAnim(agreeNumTextView, ThemeUtil.getTextColor(this@ThreadActivity), color)
/activities\ThreadActivity.kt:795:                agreeBtnAnimator = colorAnim(agreeBtn, ThemeUtil.getTextColor(this@ThreadActivity), color)
/activities\ThreadActivity.kt:796:                agreeNumAnimator.addListener(object : AnimatorListenerAdapter() {
/activities\ThreadActivity.kt:797:                    override fun onAnimationEnd(animation: Animator) {
/activities\ThreadActivity.kt:798:                        agreeNumTextView.setTextColor(color)
/activities\ThreadActivity.kt:799:                        super.onAnimationEnd(animation)
/activities\ThreadActivity.kt:800:                    }
/activities\ThreadActivity.kt:802:                    override fun onAnimationStart(animation: Animator) {
/activities\ThreadActivity.kt:803:                        agreeNumTextView.text = agreeNum.toString()
/activities\ThreadActivity.kt:804:                        super.onAnimationStart(animation)
/activities\ThreadActivity.kt:805:                    }
/activities\ThreadActivity.kt:806:                })
/activities\ThreadActivity.kt:807:                agreeBtnAnimator.addListener(object : AnimatorListenerAdapter() {
/activities\ThreadActivity.kt:808:                    override fun onAnimationEnd(animation: Animator) {
/activities\ThreadActivity.kt:809:                        agreeBtn.imageTintList = ColorStateList.valueOf(color)
/activities\ThreadActivity.kt:810:                        agreeBtn.contentDescription = getString(R.string.title_agreed)
/activities\ThreadActivity.kt:811:                        super.onAnimationEnd(animation)
/activities\ThreadActivity.kt:812:                    }
/activities\ThreadActivity.kt:814:                    override fun onAnimationStart(animation: Animator) {
/activities\ThreadActivity.kt:815:                        agreeBtn.setImageResource(R.drawable.ic_twotone_like)
/activities\ThreadActivity.kt:816:                        super.onAnimationStart(animation)
/activities\ThreadActivity.kt:817:                    }
/activities\ThreadActivity.kt:818:                })
/activities\ThreadActivity.kt:819:            } else {
/activities\ThreadActivity.kt:820:                agreeNumAnimator = colorAnim(agreeNumTextView, color, ThemeUtil.getTextColor(this@ThreadActivity))
/activities\ThreadActivity.kt:821:                agreeBtnAnimator = colorAnim(agreeBtn, color, ThemeUtil.getTextColor(this@ThreadActivity))
/activities\ThreadActivity.kt:822:                agreeNumAnimator.addListener(object : AnimatorListenerAdapter() {
/activities\ThreadActivity.kt:823:                    override fun onAnimationEnd(animation: Animator) {
/activities\ThreadActivity.kt:824:                        agreeNumTextView.setTextColor(ThemeUtil.getTextColor(this@ThreadActivity))
/activities\ThreadActivity.kt:825:                        super.onAnimationEnd(animation)
/activities\ThreadActivity.kt:826:                    }
/activities\ThreadActivity.kt:828:                    override fun onAnimationStart(animation: Animator) {
/activities\ThreadActivity.kt:829:                        agreeNumTextView.text = agreeNum.toString()
/activities\ThreadActivity.kt:830:                        super.onAnimationStart(animation)
/activities\ThreadActivity.kt:831:                    }
/activities\ThreadActivity.kt:832:                })
/activities\ThreadActivity.kt:833:                agreeBtnAnimator.addListener(object : AnimatorListenerAdapter() {
/activities\ThreadActivity.kt:834:                    override fun onAnimationEnd(animation: Animator) {
/activities\ThreadActivity.kt:835:                        agreeBtn.imageTintList = ColorStateList.valueOf(ThemeUtil.getTextColor(this@ThreadActivity))
/activities\ThreadActivity.kt:836:                        agreeBtn.contentDescription = getString(R.string.title_agree)
/activities\ThreadActivity.kt:837:                        super.onAnimationEnd(animation)
/activities\ThreadActivity.kt:838:                    }
/activities\ThreadActivity.kt:840:                    override fun onAnimationStart(animation: Animator) {
/activities\ThreadActivity.kt:841:                        agreeBtn.setImageResource(R.drawable.ic_outline_like)
/activities\ThreadActivity.kt:842:                        super.onAnimationStart(animation)
/activities\ThreadActivity.kt:843:                    }
/activities\ThreadActivity.kt:844:                })
/activities\ThreadActivity.kt:845:            }
/activities\ThreadActivity.kt:846:            agreeNumAnimator.setDuration(150).start()
/activities\ThreadActivity.kt:847:            agreeBtnAnimator.setDuration(150).start()
/activities\ThreadActivity.kt:848:        } else {
/activities\ThreadActivity.kt:849:            if (agree) {
/activities\ThreadActivity.kt:850:                agreeBtn.setImageResource(R.drawable.ic_twotone_like)
/activities\ThreadActivity.kt:851:                agreeBtn.imageTintList = ColorStateList.valueOf(color)
/activities\ThreadActivity.kt:852:                agreeNumTextView.setTextColor(ColorStateList.valueOf(color))
/activities\ThreadActivity.kt:853:                agreeBtn.contentDescription = getString(R.string.title_agreed)
/activities\ThreadActivity.kt:854:            } else {
/activities\ThreadActivity.kt:855:                agreeBtn.setImageResource(R.drawable.ic_outline_like)
/activities\ThreadActivity.kt:856:                agreeBtn.imageTintList = ColorStateList.valueOf(ThemeUtil.getTextColor(this))
/activities\ThreadActivity.kt:857:                agreeNumTextView.setTextColor(ColorStateList.valueOf(ThemeUtil.getTextColor(this)))
/activities\ThreadActivity.kt:858:                agreeBtn.contentDescription = getString(R.string.title_agree)
/activities\ThreadActivity.kt:859:            }
/activities\ThreadActivity.kt:860:        }
/activities\ThreadActivity.kt:861:    }
/activities\ThreadActivity.kt:863:    companion object {
/activities\ThreadActivity.kt:864:        const val ACTION_REPLY_SUCCESS = "com.huanchengfly.tieba.post.action.REPLY_SUCCESS"
/activities\ThreadActivity.kt:865:        const val FROM_COLLECT = "collect"
/activities\ThreadActivity.kt:866:        const val FROM_HISTORY = "history"
/activities\ThreadActivity.kt:867:        const val FROM_FORUM = "forum"
/activities\ThreadActivity.kt:868:    }
/activities\ThreadActivity.kt:869:}/activities\TranslucentThemeActivity.kt:1:package com.huanchengfly.tieba.post.activities
/activities\TranslucentThemeActivity.kt:3:import android.annotation.SuppressLint
/activities\TranslucentThemeActivity.kt:4:import android.app.Activity
/activities\TranslucentThemeActivity.kt:5:import android.content.Intent
/activities\TranslucentThemeActivity.kt:6:import android.graphics.Bitmap
/activities\TranslucentThemeActivity.kt:7:import android.graphics.Color
/activities\TranslucentThemeActivity.kt:8:import android.graphics.drawable.BitmapDrawable
/activities\TranslucentThemeActivity.kt:9:import android.graphics.drawable.Drawable
/activities\TranslucentThemeActivity.kt:10:import android.net.Uri
/activities\TranslucentThemeActivity.kt:11:import android.os.Build
/activities\TranslucentThemeActivity.kt:12:import android.os.Bundle
/activities\TranslucentThemeActivity.kt:13:import android.view.Menu
/activities\TranslucentThemeActivity.kt:14:import android.view.MenuItem
/activities\TranslucentThemeActivity.kt:15:import android.view.MotionEvent
/activities\TranslucentThemeActivity.kt:16:import android.view.View
/activities\TranslucentThemeActivity.kt:17:import android.widget.Button
/activities\TranslucentThemeActivity.kt:18:import android.widget.SeekBar
/activities\TranslucentThemeActivity.kt:19:import android.widget.SeekBar.OnSeekBarChangeListener
/activities\TranslucentThemeActivity.kt:20:import android.widget.TextView
/activities\TranslucentThemeActivity.kt:21:import androidx.annotation.ColorInt
/activities\TranslucentThemeActivity.kt:22:import androidx.appcompat.widget.Toolbar
/activities\TranslucentThemeActivity.kt:23:import androidx.core.text.HtmlCompat
/activities\TranslucentThemeActivity.kt:24:import androidx.palette.graphics.Palette
/activities\TranslucentThemeActivity.kt:25:import androidx.recyclerview.widget.RecyclerView
/activities\TranslucentThemeActivity.kt:26:import butterknife.BindView
/activities\TranslucentThemeActivity.kt:27:import com.bumptech.glide.Glide
/activities\TranslucentThemeActivity.kt:28:import com.bumptech.glide.load.engine.DiskCacheStrategy
/activities\TranslucentThemeActivity.kt:29:import com.bumptech.glide.request.RequestOptions
/activities\TranslucentThemeActivity.kt:30:import com.bumptech.glide.request.target.CustomTarget
/activities\TranslucentThemeActivity.kt:31:import com.bumptech.glide.request.transition.Transition
/activities\TranslucentThemeActivity.kt:32:import com.gyf.immersionbar.ImmersionBar
/activities\TranslucentThemeActivity.kt:33:import com.huanchengfly.tieba.post.BaseApplication
/activities\TranslucentThemeActivity.kt:34:import com.huanchengfly.tieba.post.BaseApplication.Companion.translucentBackground
/activities\TranslucentThemeActivity.kt:35:import com.huanchengfly.tieba.post.R
/activities\TranslucentThemeActivity.kt:36:import com.huanchengfly.tieba.post.adapters.ThemeColorAdapter
/activities\TranslucentThemeActivity.kt:37:import com.huanchengfly.tieba.post.components.MyImageEngine
/activities\TranslucentThemeActivity.kt:38:import com.huanchengfly.tieba.post.components.MyLinearLayoutManager
/activities\TranslucentThemeActivity.kt:39:import com.huanchengfly.tieba.post.components.transformations.BlurTransformation
/activities\TranslucentThemeActivity.kt:40:import com.huanchengfly.tieba.post.interfaces.OnItemClickListener
/activities\TranslucentThemeActivity.kt:41:import com.huanchengfly.tieba.post.toastShort
/activities\TranslucentThemeActivity.kt:42:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils
/activities\TranslucentThemeActivity.kt:43:import com.huanchengfly.tieba.post.utils.ColorUtils
/activities\TranslucentThemeActivity.kt:44:import com.huanchengfly.tieba.post.utils.ImageUtil
/activities\TranslucentThemeActivity.kt:45:import com.huanchengfly.tieba.post.utils.PermissionUtil
/activities\TranslucentThemeActivity.kt:46:import com.huanchengfly.tieba.post.utils.ThemeUtil
/activities\TranslucentThemeActivity.kt:47:import com.jrummyapps.android.colorpicker.ColorPickerDialog
/activities\TranslucentThemeActivity.kt:48:import com.jrummyapps.android.colorpicker.ColorPickerDialogListener
/activities\TranslucentThemeActivity.kt:49:import com.yalantis.ucrop.UCrop
/activities\TranslucentThemeActivity.kt:50:import com.yanzhenjie.permission.Action
/activities\TranslucentThemeActivity.kt:51:import com.yanzhenjie.permission.runtime.Permission
/activities\TranslucentThemeActivity.kt:52:import com.zhihu.matisse.Matisse
/activities\TranslucentThemeActivity.kt:53:import com.zhihu.matisse.MimeType
/activities\TranslucentThemeActivity.kt:54:import java.io.File
/activities\TranslucentThemeActivity.kt:56:class TranslucentThemeActivity : BaseActivity(), View.OnClickListener, OnSeekBarChangeListener, ColorPickerDialogListener {
/activities\TranslucentThemeActivity.kt:57:    private var mUri: Uri? = null
/activities\TranslucentThemeActivity.kt:58:    private var alpha = 0
/activities\TranslucentThemeActivity.kt:59:    private var blur = 0
/activities\TranslucentThemeActivity.kt:60:    private var mPalette: Palette? = null
/activities\TranslucentThemeActivity.kt:62:    @BindView(R.id.select_color)
/activities\TranslucentThemeActivity.kt:63:    lateinit var mSelectColor: View
/activities\TranslucentThemeActivity.kt:64:    private var mAdapter: ThemeColorAdapter? = null
/activities\TranslucentThemeActivity.kt:66:    @BindView(R.id.progress)
/activities\TranslucentThemeActivity.kt:67:    lateinit var mProgress: View
/activities\TranslucentThemeActivity.kt:68:    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
/activities\TranslucentThemeActivity.kt:69:        super.onActivityResult(requestCode, resultCode, data)
/activities\TranslucentThemeActivity.kt:70:        if (requestCode == REQUEST_CODE_CHOOSE && resultCode == Activity.RESULT_OK) {
/activities\TranslucentThemeActivity.kt:71:            val sourceUri = Matisse.obtainResult(data)[0]
/activities\TranslucentThemeActivity.kt:72:            Glide.with(this)
/activities\TranslucentThemeActivity.kt:73:                    .asDrawable()
/activities\TranslucentThemeActivity.kt:74:                    .load(sourceUri)
/activities\TranslucentThemeActivity.kt:75:                    .into(object : CustomTarget<Drawable>() {
/activities\TranslucentThemeActivity.kt:76:                        override fun onLoadCleared(placeholder: Drawable?) {}
/activities\TranslucentThemeActivity.kt:78:                        override fun onResourceReady(resource: Drawable, transition: Transition<in Drawable>?) {
/activities\TranslucentThemeActivity.kt:79:                            val bitmap = ImageUtil.drawableToBitmap(resource)
/activities\TranslucentThemeActivity.kt:80:                            val file = ImageUtil.bitmapToFile(bitmap, File(cacheDir, "origin_background.jpg"))
/activities\TranslucentThemeActivity.kt:81:                            val sourceFileUri = Uri.fromFile(file)
/activities\TranslucentThemeActivity.kt:82:                            val destUri = Uri.fromFile(File(cacheDir, "cropped_background.jpg"))
/activities\TranslucentThemeActivity.kt:83:                            val height = BaseApplication.ScreenInfo.EXACT_SCREEN_HEIGHT.toFloat()
/activities\TranslucentThemeActivity.kt:84:                            val width = BaseApplication.ScreenInfo.EXACT_SCREEN_WIDTH.toFloat()
/activities\TranslucentThemeActivity.kt:85:                            val uCropOptions = UCrop.Options()
/activities\TranslucentThemeActivity.kt:86:                            uCropOptions.setShowCropFrame(true)
/activities\TranslucentThemeActivity.kt:87:                            uCropOptions.setShowCropGrid(true)
/activities\TranslucentThemeActivity.kt:88:                            uCropOptions.setStatusBarColor(ColorUtils.getDarkerColor(ThemeUtils.getColorByAttr(this@TranslucentThemeActivity, R.attr.colorPrimary)))
/activities\TranslucentThemeActivity.kt:89:                            uCropOptions.setToolbarColor(ThemeUtils.getColorByAttr(this@TranslucentThemeActivity, R.attr.colorPrimary))
/activities\TranslucentThemeActivity.kt:90:                            uCropOptions.setToolbarWidgetColor(ThemeUtils.getColorByAttr(this@TranslucentThemeActivity, R.attr.colorTextOnPrimary))
/activities\TranslucentThemeActivity.kt:91:                            uCropOptions.setActiveWidgetColor(ThemeUtils.getColorByAttr(this@TranslucentThemeActivity, R.attr.colorAccent))
/activities\TranslucentThemeActivity.kt:92:                            uCropOptions.setActiveControlsWidgetColor(ThemeUtils.getColorByAttr(this@TranslucentThemeActivity, R.attr.colorAccent))
/activities\TranslucentThemeActivity.kt:93:                            uCropOptions.setLogoColor(ThemeUtils.getColorByAttr(this@TranslucentThemeActivity, R.attr.colorPrimary))
/activities\TranslucentThemeActivity.kt:94:                            uCropOptions.setCompressionFormat(Bitmap.CompressFormat.JPEG)
/activities\TranslucentThemeActivity.kt:95:                            UCrop.of(sourceFileUri, destUri)
/activities\TranslucentThemeActivity.kt:96:                                    .withAspectRatio(width / height, 1f)
/activities\TranslucentThemeActivity.kt:97:                                    .withOptions(uCropOptions)
/activities\TranslucentThemeActivity.kt:98:                                    .start(this@TranslucentThemeActivity)
/activities\TranslucentThemeActivity.kt:99:                        }
/activities\TranslucentThemeActivity.kt:100:                    })
/activities\TranslucentThemeActivity.kt:101:        } else if (resultCode == Activity.RESULT_OK && requestCode == UCrop.REQUEST_CROP) {
/activities\TranslucentThemeActivity.kt:102:            mUri = UCrop.getOutput(data!!)
/activities\TranslucentThemeActivity.kt:103:            invalidateOptionsMenu()
/activities\TranslucentThemeActivity.kt:104:            refreshBackground()
/activities\TranslucentThemeActivity.kt:105:        } else if (resultCode == UCrop.RESULT_ERROR) {
/activities\TranslucentThemeActivity.kt:106:            val cropError = UCrop.getError(data!!)
/activities\TranslucentThemeActivity.kt:107:            cropError!!.printStackTrace()
/activities\TranslucentThemeActivity.kt:108:        }
/activities\TranslucentThemeActivity.kt:109:    }
/activities\TranslucentThemeActivity.kt:111:    private fun refreshBackground() {
/activities\TranslucentThemeActivity.kt:112:        mProgress.visibility = View.VISIBLE
/activities\TranslucentThemeActivity.kt:113:        if (mUri == null) {
/activities\TranslucentThemeActivity.kt:114:            findViewById(R.id.background).setBackgroundColor(Color.BLACK)
/activities\TranslucentThemeActivity.kt:115:            mProgress.visibility = View.GONE
/activities\TranslucentThemeActivity.kt:116:            return
/activities\TranslucentThemeActivity.kt:117:        }
/activities\TranslucentThemeActivity.kt:118:        var bgOptions = RequestOptions.centerCropTransform()
/activities\TranslucentThemeActivity.kt:119:                .skipMemoryCache(true)
/activities\TranslucentThemeActivity.kt:120:                .diskCacheStrategy(DiskCacheStrategy.NONE)
/activities\TranslucentThemeActivity.kt:121:        if (blur > 0) {
/activities\TranslucentThemeActivity.kt:122:            bgOptions = bgOptions.transform(BlurTransformation(blur))
/activities\TranslucentThemeActivity.kt:123:        }
/activities\TranslucentThemeActivity.kt:124:        Glide.with(this)
/activities\TranslucentThemeActivity.kt:125:                .asDrawable()
/activities\TranslucentThemeActivity.kt:126:                .load(mUri)
/activities\TranslucentThemeActivity.kt:127:                .apply(bgOptions)
/activities\TranslucentThemeActivity.kt:128:                .into(object : CustomTarget<Drawable>() {
/activities\TranslucentThemeActivity.kt:129:                    override fun onResourceReady(resource: Drawable, transition: Transition<in Drawable>?) {
/activities\TranslucentThemeActivity.kt:130:                        resource.alpha = alpha
/activities\TranslucentThemeActivity.kt:131:                        val bitmap = ImageUtil.drawableToBitmap(resource)
/activities\TranslucentThemeActivity.kt:132:                        findViewById(R.id.background).backgroundTintList = null
/activities\TranslucentThemeActivity.kt:133:                        findViewById(R.id.background).background = BitmapDrawable(resources, bitmap)
/activities\TranslucentThemeActivity.kt:134:                        mPalette = Palette.from(bitmap).generate()
/activities\TranslucentThemeActivity.kt:135:                        mAdapter!!.setPalette(mPalette)
/activities\TranslucentThemeActivity.kt:136:                        mSelectColor.visibility = View.VISIBLE
/activities\TranslucentThemeActivity.kt:137:                        mProgress.visibility = View.GONE
/activities\TranslucentThemeActivity.kt:138:                    }
/activities\TranslucentThemeActivity.kt:140:                    override fun onLoadCleared(placeholder: Drawable?) {}
/activities\TranslucentThemeActivity.kt:141:                })
/activities\TranslucentThemeActivity.kt:142:    }
/activities\TranslucentThemeActivity.kt:144:    override fun refreshStatusBarColor() {
/activities\TranslucentThemeActivity.kt:145:        ImmersionBar.with(this)
/activities\TranslucentThemeActivity.kt:146:                .transparentBar()
/activities\TranslucentThemeActivity.kt:147:                .init()
/activities\TranslucentThemeActivity.kt:148:    }
/activities\TranslucentThemeActivity.kt:150:    override fun getLayoutId(): Int {
/activities\TranslucentThemeActivity.kt:151:        return R.layout.activity_translucent_theme
/activities\TranslucentThemeActivity.kt:152:    }
/activities\TranslucentThemeActivity.kt:154:    @SuppressLint("ApplySharedPref", "ClickableViewAccessibility")
/activities\TranslucentThemeActivity.kt:155:    override fun onCreate(savedInstanceState: Bundle?) {
/activities\TranslucentThemeActivity.kt:156:        super.onCreate(savedInstanceState)
/activities\TranslucentThemeActivity.kt:157:        setSupportActionBar(findViewById(R.id.toolbar) as Toolbar)
/activities\TranslucentThemeActivity.kt:158:        supportActionBar!!.setDisplayHomeAsUpEnabled(true)
/activities\TranslucentThemeActivity.kt:159:        supportActionBar!!.setTitle(R.string.title_dialog_translucent_theme)
/activities\TranslucentThemeActivity.kt:160:        (findViewById(R.id.tip) as TextView).apply {
/activities\TranslucentThemeActivity.kt:161:            text = HtmlCompat.fromHtml(getString(R.string.tip_translucent_theme), HtmlCompat.FROM_HTML_MODE_LEGACY)
/activities\TranslucentThemeActivity.kt:162:        }
/activities\TranslucentThemeActivity.kt:163:        (findViewById(R.id.custom_color) as Button).apply {
/activities\TranslucentThemeActivity.kt:164:            setOnClickListener(this@TranslucentThemeActivity)
/activities\TranslucentThemeActivity.kt:165:        }
/activities\TranslucentThemeActivity.kt:166:        (findViewById(R.id.select_pic) as Button).apply {
/activities\TranslucentThemeActivity.kt:167:            setOnClickListener(this@TranslucentThemeActivity)
/activities\TranslucentThemeActivity.kt:168:        }
/activities\TranslucentThemeActivity.kt:169:        mAdapter = ThemeColorAdapter(this)
/activities\TranslucentThemeActivity.kt:170:        mAdapter!!.onItemClickListener = OnItemClickListener { _: View?, themeColor: Int, _: Int, _: Int ->
/activities\TranslucentThemeActivity.kt:171:            appPreferences.translucentPrimaryColor = toString(themeColor)
/activities\TranslucentThemeActivity.kt:172:            ThemeUtils.refreshUI(this)
/activities\TranslucentThemeActivity.kt:173:        }
/activities\TranslucentThemeActivity.kt:174:        (findViewById(R.id.select_color_recycler_view) as RecyclerView).apply {
/activities\TranslucentThemeActivity.kt:175:            layoutManager = MyLinearLayoutManager(this@TranslucentThemeActivity, MyLinearLayoutManager.HORIZONTAL, false)
/activities\TranslucentThemeActivity.kt:176:            adapter = mAdapter
/activities\TranslucentThemeActivity.kt:177:        }
/activities\TranslucentThemeActivity.kt:178:        alpha = appPreferences.translucentBackgroundAlpha
/activities\TranslucentThemeActivity.kt:179:        blur = appPreferences.translucentBackgroundBlur
/activities\TranslucentThemeActivity.kt:180:        (findViewById(R.id.alpha) as SeekBar).apply {
/activities\TranslucentThemeActivity.kt:181:            progress = this@TranslucentThemeActivity.alpha
/activities\TranslucentThemeActivity.kt:182:            setOnSeekBarChangeListener(this@TranslucentThemeActivity)
/activities\TranslucentThemeActivity.kt:183:        }
/activities\TranslucentThemeActivity.kt:184:        (findViewById(R.id.blur) as SeekBar).apply {
/activities\TranslucentThemeActivity.kt:185:            progress = this@TranslucentThemeActivity.blur
/activities\TranslucentThemeActivity.kt:186:            setOnSeekBarChangeListener(this@TranslucentThemeActivity)
/activities\TranslucentThemeActivity.kt:187:        }
/activities\TranslucentThemeActivity.kt:188:        mProgress.setOnTouchListener { _: View?, _: MotionEvent? -> true }
/activities\TranslucentThemeActivity.kt:189:        mProgress.visibility = View.GONE
/activities\TranslucentThemeActivity.kt:190:        findViewById(R.id.background).setBackgroundColor(Color.BLACK)
/activities\TranslucentThemeActivity.kt:191:    }
/activities\TranslucentThemeActivity.kt:193:    override fun onCreateOptionsMenu(menu: Menu): Boolean {
/activities\TranslucentThemeActivity.kt:194:        menuInflater.inflate(R.menu.menu_translucent_theme_toolbar, menu)
/activities\TranslucentThemeActivity.kt:195:        return super.onCreateOptionsMenu(menu)
/activities\TranslucentThemeActivity.kt:196:    }
/activities\TranslucentThemeActivity.kt:198:    @SuppressLint("ApplySharedPref")
/activities\TranslucentThemeActivity.kt:199:    override fun onColorSelected(dialogId: Int, color: Int) {
/activities\TranslucentThemeActivity.kt:200:        appPreferences.translucentPrimaryColor = toString(color)
/activities\TranslucentThemeActivity.kt:201:        ThemeUtils.refreshUI(this)
/activities\TranslucentThemeActivity.kt:202:    }
/activities\TranslucentThemeActivity.kt:204:    override fun onDialogDismissed(dialogId: Int) {}
/activities\TranslucentThemeActivity.kt:206:    @SuppressLint("ApplySharedPref")
/activities\TranslucentThemeActivity.kt:207:    override fun onOptionsItemSelected(item: MenuItem): Boolean {
/activities\TranslucentThemeActivity.kt:208:        when (item.itemId) {
/activities\TranslucentThemeActivity.kt:209:            R.id.menu_finish -> {
/activities\TranslucentThemeActivity.kt:210:                appPreferences.apply {
/activities\TranslucentThemeActivity.kt:211:                    translucentBackgroundAlpha = alpha
/activities\TranslucentThemeActivity.kt:212:                    translucentBackgroundBlur = blur
/activities\TranslucentThemeActivity.kt:213:                }
/activities\TranslucentThemeActivity.kt:214:                savePic(object : SavePicCallback<File> {
/activities\TranslucentThemeActivity.kt:215:                    override fun onSuccess(t: File) {
/activities\TranslucentThemeActivity.kt:216:                        ThemeUtil.getSharedPreferences(this@TranslucentThemeActivity)
/activities\TranslucentThemeActivity.kt:217:                                .edit()
/activities\TranslucentThemeActivity.kt:218:                                .putString(ThemeUtil.SP_THEME, ThemeUtil.THEME_TRANSLUCENT)
/activities\TranslucentThemeActivity.kt:219:                                .putString(ThemeUtil.SP_OLD_THEME, ThemeUtil.THEME_TRANSLUCENT)
/activities\TranslucentThemeActivity.kt:220:                                .commit()
/activities\TranslucentThemeActivity.kt:221:                        toastShort(R.string.toast_save_pic_success)
/activities\TranslucentThemeActivity.kt:222:                        translucentBackground = null
/activities\TranslucentThemeActivity.kt:223:                        mProgress.visibility = View.GONE
/activities\TranslucentThemeActivity.kt:224:                        finish()
/activities\TranslucentThemeActivity.kt:225:                    }
/activities\TranslucentThemeActivity.kt:226:                })
/activities\TranslucentThemeActivity.kt:227:                return true
/activities\TranslucentThemeActivity.kt:228:            }
/activities\TranslucentThemeActivity.kt:229:            R.id.select_color -> return true
/activities\TranslucentThemeActivity.kt:230:        }
/activities\TranslucentThemeActivity.kt:231:        return super.onOptionsItemSelected(item)
/activities\TranslucentThemeActivity.kt:232:    }
/activities\TranslucentThemeActivity.kt:234:    private fun savePic(callback: SavePicCallback<File>) {
/activities\TranslucentThemeActivity.kt:235:        mProgress.visibility = View.VISIBLE
/activities\TranslucentThemeActivity.kt:236:        var bgOptions = RequestOptions.centerCropTransform()
/activities\TranslucentThemeActivity.kt:237:                .skipMemoryCache(true)
/activities\TranslucentThemeActivity.kt:238:                .diskCacheStrategy(DiskCacheStrategy.NONE)
/activities\TranslucentThemeActivity.kt:239:        if (blur > 0) {
/activities\TranslucentThemeActivity.kt:240:            bgOptions = bgOptions.transform(BlurTransformation(blur))
/activities\TranslucentThemeActivity.kt:241:        }
/activities\TranslucentThemeActivity.kt:242:        Glide.with(this)
/activities\TranslucentThemeActivity.kt:243:                .asDrawable()
/activities\TranslucentThemeActivity.kt:244:                .load(mUri)
/activities\TranslucentThemeActivity.kt:245:                .apply(bgOptions)
/activities\TranslucentThemeActivity.kt:246:                .into(object : CustomTarget<Drawable>() {
/activities\TranslucentThemeActivity.kt:247:                    override fun onResourceReady(resource: Drawable, transition: Transition<in Drawable>?) {
/activities\TranslucentThemeActivity.kt:248:                        resource.alpha = alpha
/activities\TranslucentThemeActivity.kt:249:                        val bitmap = ImageUtil.drawableToBitmap(resource)
/activities\TranslucentThemeActivity.kt:250:                        val file = ImageUtil.compressImage(bitmap, File(filesDir, "background.jpg"))
/activities\TranslucentThemeActivity.kt:251:                        mPalette = Palette.from(bitmap).generate()
/activities\TranslucentThemeActivity.kt:252:                        appPreferences.translucentThemeBackgroundPath = file.absolutePath
/activities\TranslucentThemeActivity.kt:253:                        ThemeUtils.refreshUI(this@TranslucentThemeActivity, this@TranslucentThemeActivity)
/activities\TranslucentThemeActivity.kt:254:                        callback.onSuccess(file)
/activities\TranslucentThemeActivity.kt:255:                    }
/activities\TranslucentThemeActivity.kt:257:                    override fun onLoadCleared(placeholder: Drawable?) {}
/activities\TranslucentThemeActivity.kt:258:                })
/activities\TranslucentThemeActivity.kt:259:    }
/activities\TranslucentThemeActivity.kt:261:    override fun onPrepareOptionsMenu(menu: Menu): Boolean {
/activities\TranslucentThemeActivity.kt:262:        val finishItem = menu.findItem(R.id.menu_finish)
/activities\TranslucentThemeActivity.kt:263:        finishItem.isEnabled = mUri != null
/activities\TranslucentThemeActivity.kt:264:        return super.onPrepareOptionsMenu(menu)
/activities\TranslucentThemeActivity.kt:265:    }
/activities\TranslucentThemeActivity.kt:267:    override fun onProgressChanged(seekBar: SeekBar, progress: Int, fromUser: Boolean) {}
/activities\TranslucentThemeActivity.kt:268:    override fun onStartTrackingTouch(seekBar: SeekBar) {}
/activities\TranslucentThemeActivity.kt:269:    override fun onStopTrackingTouch(seekBar: SeekBar) {
/activities\TranslucentThemeActivity.kt:270:        when (seekBar.id) {
/activities\TranslucentThemeActivity.kt:271:            R.id.alpha -> alpha = seekBar.progress
/activities\TranslucentThemeActivity.kt:272:            R.id.blur -> blur = seekBar.progress
/activities\TranslucentThemeActivity.kt:273:        }
/activities\TranslucentThemeActivity.kt:274:        refreshBackground()
/activities\TranslucentThemeActivity.kt:275:    }
/activities\TranslucentThemeActivity.kt:277:    override fun onClick(v: View) {
/activities\TranslucentThemeActivity.kt:278:        when (v.id) {
/activities\TranslucentThemeActivity.kt:279:            R.id.select_pic -> askPermission(Action {
/activities\TranslucentThemeActivity.kt:280:                Matisse.from(this)
/activities\TranslucentThemeActivity.kt:281:                        .choose(MimeType.ofImage())
/activities\TranslucentThemeActivity.kt:282:                        .theme(if (ThemeUtil.isNightMode(this)) R.style.Matisse_Dracula else R.style.Matisse_Zhihu)
/activities\TranslucentThemeActivity.kt:283:                        .imageEngine(MyImageEngine())
/activities\TranslucentThemeActivity.kt:284:                        .forResult(REQUEST_CODE_CHOOSE)
/activities\TranslucentThemeActivity.kt:285:            })
/activities\TranslucentThemeActivity.kt:286:            R.id.custom_color -> {
/activities\TranslucentThemeActivity.kt:287:                val primaryColorPicker = ColorPickerDialog.newBuilder()
/activities\TranslucentThemeActivity.kt:288:                        .setDialogTitle(R.string.title_color_picker_primary)
/activities\TranslucentThemeActivity.kt:289:                        .setDialogType(ColorPickerDialog.TYPE_CUSTOM)
/activities\TranslucentThemeActivity.kt:290:                        .setShowAlphaSlider(true)
/activities\TranslucentThemeActivity.kt:291:                        .setDialogId(0)
/activities\TranslucentThemeActivity.kt:292:                        .setAllowPresets(false)
/activities\TranslucentThemeActivity.kt:293:                        .setColor(ThemeUtils.getColorById(this, R.color.default_color_primary))
/activities\TranslucentThemeActivity.kt:294:                        .create()
/activities\TranslucentThemeActivity.kt:295:                primaryColorPicker.setColorPickerDialogListener(this)
/activities\TranslucentThemeActivity.kt:296:                primaryColorPicker.show(fragmentManager, "ColorPicker_TranslucentThemePrimaryColor")
/activities\TranslucentThemeActivity.kt:297:            }
/activities\TranslucentThemeActivity.kt:298:        }
/activities\TranslucentThemeActivity.kt:299:    }
/activities\TranslucentThemeActivity.kt:301:    private fun askPermission(granted: Action<List<String?>>) {
/activities\TranslucentThemeActivity.kt:302:        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {
/activities\TranslucentThemeActivity.kt:303:            PermissionUtil.askPermission(this, granted, R.string.toast_no_permission_insert_photo,
/activities\TranslucentThemeActivity.kt:304:                    PermissionUtil.Permission(Permission.Group.STORAGE, getString(R.string.tip_permission_storage)))
/activities\TranslucentThemeActivity.kt:305:        } else {
/activities\TranslucentThemeActivity.kt:306:            PermissionUtil.askPermission(this, granted, R.string.toast_no_permission_insert_photo,
/activities\TranslucentThemeActivity.kt:307:                    PermissionUtil.Permission(Permission.READ_EXTERNAL_STORAGE, getString(R.string.tip_permission_storage)))
/activities\TranslucentThemeActivity.kt:308:        }
/activities\TranslucentThemeActivity.kt:309:    }
/activities\TranslucentThemeActivity.kt:311:    interface SavePicCallback<T> {
/activities\TranslucentThemeActivity.kt:312:        fun onSuccess(t: T)
/activities\TranslucentThemeActivity.kt:313:    }
/activities\TranslucentThemeActivity.kt:315:    companion object {
/activities\TranslucentThemeActivity.kt:316:        val TAG = TranslucentThemeActivity::class.java.simpleName
/activities\TranslucentThemeActivity.kt:317:        const val REQUEST_CODE_CHOOSE = 2
/activities\TranslucentThemeActivity.kt:318:        fun toString(alpha: Int, red: Int, green: Int, blue: Int): String {
/activities\TranslucentThemeActivity.kt:319:            val hr = Integer.toHexString(red)
/activities\TranslucentThemeActivity.kt:320:            val hg = Integer.toHexString(green)
/activities\TranslucentThemeActivity.kt:321:            val hb = Integer.toHexString(blue)
/activities\TranslucentThemeActivity.kt:322:            val ha = Integer.toHexString(alpha)
/activities\TranslucentThemeActivity.kt:323:            return "#" + fixHexString(ha) + fixHexString(hr) + fixHexString(hg) + fixHexString(hb)
/activities\TranslucentThemeActivity.kt:324:        }
/activities\TranslucentThemeActivity.kt:326:        private fun fixHexString(string: String): String {
/activities\TranslucentThemeActivity.kt:327:            var hexStr = string
/activities\TranslucentThemeActivity.kt:328:            if (hexStr.isEmpty()) {
/activities\TranslucentThemeActivity.kt:329:                hexStr = "00"
/activities\TranslucentThemeActivity.kt:330:            }
/activities\TranslucentThemeActivity.kt:331:            if (hexStr.length == 1) {
/activities\TranslucentThemeActivity.kt:332:                hexStr = "0$hexStr"
/activities\TranslucentThemeActivity.kt:333:            }
/activities\TranslucentThemeActivity.kt:334:            if (hexStr.length > 2) {
/activities\TranslucentThemeActivity.kt:335:                hexStr = hexStr.substring(0, 2)
/activities\TranslucentThemeActivity.kt:336:            }
/activities\TranslucentThemeActivity.kt:337:            return hexStr
/activities\TranslucentThemeActivity.kt:338:        }
/activities\TranslucentThemeActivity.kt:340:        fun toString(@ColorInt color: Int): String {
/activities\TranslucentThemeActivity.kt:341:            return toString(Color.alpha(color), Color.red(color), Color.green(color), Color.blue(color))
/activities\TranslucentThemeActivity.kt:342:        }
/activities\TranslucentThemeActivity.kt:343:    }
/activities\TranslucentThemeActivity.kt:344:}/adapters\BlockListAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\BlockListAdapter.java:3:import android.content.Context;
/adapters\BlockListAdapter.java:4:import android.view.LayoutInflater;
/adapters\BlockListAdapter.java:5:import android.view.View;
/adapters\BlockListAdapter.java:6:import android.view.ViewGroup;
/adapters\BlockListAdapter.java:7:import android.widget.TextView;
/adapters\BlockListAdapter.java:9:import androidx.annotation.NonNull;
/adapters\BlockListAdapter.java:10:import androidx.recyclerview.widget.RecyclerView;
/adapters\BlockListAdapter.java:12:import com.google.gson.reflect.TypeToken;
/adapters\BlockListAdapter.java:13:import com.huanchengfly.tieba.post.R;
/adapters\BlockListAdapter.java:14:import com.huanchengfly.tieba.post.components.MyViewHolder;
/adapters\BlockListAdapter.java:15:import com.huanchengfly.tieba.post.models.database.Block;
/adapters\BlockListAdapter.java:16:import com.huanchengfly.tieba.post.utils.BlockUtil;
/adapters\BlockListAdapter.java:17:import com.huanchengfly.tieba.post.utils.GsonUtil;
/adapters\BlockListAdapter.java:19:import org.litepal.LitePal;
/adapters\BlockListAdapter.java:21:import java.util.List;
/adapters\BlockListAdapter.java:23:public class BlockListAdapter extends RecyclerView.Adapter<MyViewHolder> {
/adapters\BlockListAdapter.java:24:    private static final String TAG = "BlockListAdapter";
/adapters\BlockListAdapter.java:25:    private Context mContext;
/adapters\BlockListAdapter.java:26:    private List<Block> dataList;
/adapters\BlockListAdapter.java:27:    private int type;
/adapters\BlockListAdapter.java:29:    public BlockListAdapter(Context context, int type) {
/adapters\BlockListAdapter.java:30:        super();
/adapters\BlockListAdapter.java:31:        this.mContext = context;
/adapters\BlockListAdapter.java:32:        this.dataList = BlockUtil.getBlackList();
/adapters\BlockListAdapter.java:33:        this.type = type;
/adapters\BlockListAdapter.java:34:    }
/adapters\BlockListAdapter.java:36:    public void refresh() {
/adapters\BlockListAdapter.java:37:        refresh(true);
/adapters\BlockListAdapter.java:38:    }
/adapters\BlockListAdapter.java:40:    public void refresh(boolean notify) {
/adapters\BlockListAdapter.java:41:        if (this.type == Block.CATEGORY_WHITE_LIST) {
/adapters\BlockListAdapter.java:42:            this.dataList = LitePal.where("category = ?", "11").find(Block.class);
/adapters\BlockListAdapter.java:43:        } else {
/adapters\BlockListAdapter.java:44:            this.dataList = LitePal.where("category = ?", "10").find(Block.class);
/adapters\BlockListAdapter.java:45:        }
/adapters\BlockListAdapter.java:46:        if (notify) {
/adapters\BlockListAdapter.java:47:            notifyDataSetChanged();
/adapters\BlockListAdapter.java:48:        }
/adapters\BlockListAdapter.java:49:    }
/adapters\BlockListAdapter.java:51:    @Override
/adapters\BlockListAdapter.java:52:    public int getItemCount() {
/adapters\BlockListAdapter.java:53:        return dataList.size();
/adapters\BlockListAdapter.java:54:    }
/adapters\BlockListAdapter.java:56:    @NonNull
/adapters\BlockListAdapter.java:57:    @Override
/adapters\BlockListAdapter.java:58:    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
/adapters\BlockListAdapter.java:59:        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_block_list, parent, false);
/adapters\BlockListAdapter.java:60:        return new MyViewHolder(view);
/adapters\BlockListAdapter.java:61:    }
/adapters\BlockListAdapter.java:63:    @Override
/adapters\BlockListAdapter.java:64:    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {
/adapters\BlockListAdapter.java:65:        Block block = get(position);
/adapters\BlockListAdapter.java:66:        TextView textView = holder.getView(R.id.item_block_list_word);
/adapters\BlockListAdapter.java:67:        if (block.getType() == Block.TYPE_KEYWORD) {
/adapters\BlockListAdapter.java:68:            List<String> stringList = GsonUtil.getGson().fromJson(block.getKeywords(), new TypeToken<List<String>>() {
/adapters\BlockListAdapter.java:69:            }.getType());
/adapters\BlockListAdapter.java:70:            textView.setText(listToString(stringList, " "));
/adapters\BlockListAdapter.java:71:        } else if (block.getType() == Block.TYPE_USER) {
/adapters\BlockListAdapter.java:72:            textView.setText(block.getUsername());
/adapters\BlockListAdapter.java:73:        }
/adapters\BlockListAdapter.java:74:    }
/adapters\BlockListAdapter.java:76:    public Block get(int position) {
/adapters\BlockListAdapter.java:77:        return dataList.get(position);
/adapters\BlockListAdapter.java:78:    }
/adapters\BlockListAdapter.java:80:    public void remove(int position) {
/adapters\BlockListAdapter.java:81:        if (position < dataList.size() && position >= 0) {
/adapters\BlockListAdapter.java:82:            dataList.remove(position);
/adapters\BlockListAdapter.java:83:            notifyItemRemoved(position);
/adapters\BlockListAdapter.java:84:            if (position != dataList.size()) {
/adapters\BlockListAdapter.java:85:                this.notifyItemRangeChanged(position, dataList.size() - position);
/adapters\BlockListAdapter.java:86:            }
/adapters\BlockListAdapter.java:87:        }
/adapters\BlockListAdapter.java:88:    }
/adapters\BlockListAdapter.java:90:    public void insert(Block block, int position) {
/adapters\BlockListAdapter.java:91:        if (position <= dataList.size() && position >= 0) {
/adapters\BlockListAdapter.java:92:            dataList.add(position, block);
/adapters\BlockListAdapter.java:93:            notifyItemInserted(position);
/adapters\BlockListAdapter.java:94:            notifyItemRangeChanged(position, dataList.size() - position);
/adapters\BlockListAdapter.java:95:        }
/adapters\BlockListAdapter.java:96:    }
/adapters\BlockListAdapter.java:98:    @NonNull
/adapters\BlockListAdapter.java:99:    private String listToString(List list, String separator) {
/adapters\BlockListAdapter.java:100:        StringBuilder sb = new StringBuilder();
/adapters\BlockListAdapter.java:101:        for (int i = 0; i < list.size(); i++) {
/adapters\BlockListAdapter.java:102:            sb.append(list.get(i)).append(separator);
/adapters\BlockListAdapter.java:103:        }
/adapters\BlockListAdapter.java:104:        return sb.toString().substring(0, sb.toString().length() - 1);
/adapters\BlockListAdapter.java:105:    }
/adapters\BlockListAdapter.java:106:}/adapters\DislikeAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\DislikeAdapter.java:3:import android.content.Context;
/adapters\DislikeAdapter.java:4:import android.view.LayoutInflater;
/adapters\DislikeAdapter.java:5:import android.view.ViewGroup;
/adapters\DislikeAdapter.java:6:import android.widget.TextView;
/adapters\DislikeAdapter.java:8:import androidx.annotation.NonNull;
/adapters\DislikeAdapter.java:9:import androidx.recyclerview.widget.RecyclerView;
/adapters\DislikeAdapter.java:11:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/adapters\DislikeAdapter.java:12:import com.huanchengfly.tieba.post.api.models.PersonalizedBean;
/adapters\DislikeAdapter.java:13:import com.huanchengfly.tieba.post.R;
/adapters\DislikeAdapter.java:14:import com.huanchengfly.tieba.post.components.MyViewHolder;
/adapters\DislikeAdapter.java:15:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/adapters\DislikeAdapter.java:17:import java.util.ArrayList;
/adapters\DislikeAdapter.java:18:import java.util.List;
/adapters\DislikeAdapter.java:20:public class DislikeAdapter extends RecyclerView.Adapter<MyViewHolder> {
/adapters\DislikeAdapter.java:21:    private Context mContext;
/adapters\DislikeAdapter.java:22:    private List<PersonalizedBean.DislikeResourceBean> beans;
/adapters\DislikeAdapter.java:23:    private List<String> selectedIds;
/adapters\DislikeAdapter.java:25:    public DislikeAdapter(Context context, List<PersonalizedBean.DislikeResourceBean> beans) {
/adapters\DislikeAdapter.java:26:        this.mContext = context;
/adapters\DislikeAdapter.java:27:        this.beans = beans;
/adapters\DislikeAdapter.java:28:        this.selectedIds = new ArrayList<>();
/adapters\DislikeAdapter.java:29:    }
/adapters\DislikeAdapter.java:31:    public List<String> getSelectedIds() {
/adapters\DislikeAdapter.java:32:        return selectedIds;
/adapters\DislikeAdapter.java:33:    }
/adapters\DislikeAdapter.java:35:    @NonNull
/adapters\DislikeAdapter.java:36:    @Override
/adapters\DislikeAdapter.java:37:    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
/adapters\DislikeAdapter.java:38:        return new MyViewHolder(LayoutInflater.from(mContext).inflate(R.layout.item_dislike_reason, parent, false));
/adapters\DislikeAdapter.java:39:    }
/adapters\DislikeAdapter.java:41:    @Override
/adapters\DislikeAdapter.java:42:    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {
/adapters\DislikeAdapter.java:43:        PersonalizedBean.DislikeResourceBean bean = beans.get(position);
/adapters\DislikeAdapter.java:44:        TextView textView = holder.getView(R.id.classify_text);
/adapters\DislikeAdapter.java:45:        if (selectedIds.contains(bean.getDislikeId())) {
/adapters\DislikeAdapter.java:46:            textView.setTextColor(ThemeUtils.getColorByAttr(mContext, R.attr.colorAccent));
/adapters\DislikeAdapter.java:47:        } else {
/adapters\DislikeAdapter.java:48:            textView.setTextColor(ThemeUtil.getSecondaryTextColor(mContext));
/adapters\DislikeAdapter.java:49:        }
/adapters\DislikeAdapter.java:50:        textView.setText(bean.getDislikeReason());
/adapters\DislikeAdapter.java:51:        holder.setItemOnClickListener(v -> {
/adapters\DislikeAdapter.java:52:            if (selectedIds.contains(bean.getDislikeId())) {
/adapters\DislikeAdapter.java:53:                selectedIds.remove(bean.getDislikeId());
/adapters\DislikeAdapter.java:54:            } else {
/adapters\DislikeAdapter.java:55:                selectedIds.add(bean.getDislikeId());
/adapters\DislikeAdapter.java:56:            }
/adapters\DislikeAdapter.java:57:            //notifyItemChanged(position);
/adapters\DislikeAdapter.java:58:            notifyDataSetChanged();
/adapters\DislikeAdapter.java:59:        });
/adapters\DislikeAdapter.java:60:    }
/adapters\DislikeAdapter.java:62:    @Override
/adapters\DislikeAdapter.java:63:    public int getItemCount() {
/adapters\DislikeAdapter.java:64:        return beans.size();
/adapters\DislikeAdapter.java:65:    }
/adapters\DislikeAdapter.java:67:    public PersonalizedBean.DislikeResourceBean getItem(int position) {
/adapters\DislikeAdapter.java:68:        return beans.get(position);
/adapters\DislikeAdapter.java:69:    }
/adapters\DislikeAdapter.java:70:}/adapters\EmotionGridViewAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\EmotionGridViewAdapter.java:3:import android.content.Context;
/adapters\EmotionGridViewAdapter.java:4:import android.view.View;
/adapters\EmotionGridViewAdapter.java:5:import android.view.ViewGroup;
/adapters\EmotionGridViewAdapter.java:6:import android.widget.AbsListView.LayoutParams;
/adapters\EmotionGridViewAdapter.java:7:import android.widget.BaseAdapter;
/adapters\EmotionGridViewAdapter.java:8:import android.widget.ImageView;
/adapters\EmotionGridViewAdapter.java:10:import com.huanchengfly.tieba.post.utils.EmotionUtil;
/adapters\EmotionGridViewAdapter.java:12:import java.util.ArrayList;
/adapters\EmotionGridViewAdapter.java:13:import java.util.List;
/adapters\EmotionGridViewAdapter.java:14:import java.util.Map;
/adapters\EmotionGridViewAdapter.java:16:/**
/adapters\EmotionGridViewAdapter.java:17: * Created by zejian
/adapters\EmotionGridViewAdapter.java:18: * Time  16/1/7 下午4:46
/adapters\EmotionGridViewAdapter.java:19: * Email shinezejian@163.com
/adapters\EmotionGridViewAdapter.java:20: * Description:
/adapters\EmotionGridViewAdapter.java:21: */
/adapters\EmotionGridViewAdapter.java:22:public class EmotionGridViewAdapter extends BaseAdapter {
/adapters\EmotionGridViewAdapter.java:24:    private Context context;
/adapters\EmotionGridViewAdapter.java:25:    private int emotionType;
/adapters\EmotionGridViewAdapter.java:26:    private List<String> emotionNames;
/adapters\EmotionGridViewAdapter.java:27:    private int itemWidth;
/adapters\EmotionGridViewAdapter.java:29:    public EmotionGridViewAdapter(Context context, int itemWidth) {
/adapters\EmotionGridViewAdapter.java:30:        this(context, EmotionUtil.EMOTION_ALL_WEB_TYPE, itemWidth);
/adapters\EmotionGridViewAdapter.java:31:    }
/adapters\EmotionGridViewAdapter.java:33:    public EmotionGridViewAdapter(Context context, int type, int itemWidth) {
/adapters\EmotionGridViewAdapter.java:34:        super();
/adapters\EmotionGridViewAdapter.java:35:        this.context = context;
/adapters\EmotionGridViewAdapter.java:36:        this.emotionType = type;
/adapters\EmotionGridViewAdapter.java:37:        this.emotionNames = getEmotionNames();
/adapters\EmotionGridViewAdapter.java:38:        this.itemWidth = itemWidth;
/adapters\EmotionGridViewAdapter.java:39:    }
/adapters\EmotionGridViewAdapter.java:41:    public List<String> getEmotionNames() {
/adapters\EmotionGridViewAdapter.java:42:        Map<String, Integer> emojiMap = EmotionUtil.getEmojiMap(emotionType);
/adapters\EmotionGridViewAdapter.java:43:        return new ArrayList<>(emojiMap.keySet());
/adapters\EmotionGridViewAdapter.java:44:    }
/adapters\EmotionGridViewAdapter.java:46:    @Override
/adapters\EmotionGridViewAdapter.java:47:    public int getCount() {
/adapters\EmotionGridViewAdapter.java:48:        return emotionNames.size();
/adapters\EmotionGridViewAdapter.java:49:    }
/adapters\EmotionGridViewAdapter.java:51:    @Override
/adapters\EmotionGridViewAdapter.java:52:    public String getItem(int position) {
/adapters\EmotionGridViewAdapter.java:53:        return emotionNames.get(position);
/adapters\EmotionGridViewAdapter.java:54:    }
/adapters\EmotionGridViewAdapter.java:56:    @Override
/adapters\EmotionGridViewAdapter.java:57:    public long getItemId(int position) {
/adapters\EmotionGridViewAdapter.java:58:        return position;
/adapters\EmotionGridViewAdapter.java:59:    }
/adapters\EmotionGridViewAdapter.java:61:    @Override
/adapters\EmotionGridViewAdapter.java:62:    public View getView(int position, View convertView, ViewGroup parent) {
/adapters\EmotionGridViewAdapter.java:63:        ImageView iv_emotion = new ImageView(context);
/adapters\EmotionGridViewAdapter.java:64:        iv_emotion.setPadding(itemWidth / 8, itemWidth / 8, itemWidth / 8, itemWidth / 8);
/adapters\EmotionGridViewAdapter.java:65:        LayoutParams params = new LayoutParams(itemWidth, itemWidth);
/adapters\EmotionGridViewAdapter.java:66:        iv_emotion.setLayoutParams(params);
/adapters\EmotionGridViewAdapter.java:67:        String emotionName = emotionNames.get(position);
/adapters\EmotionGridViewAdapter.java:68:        iv_emotion.setImageResource(EmotionUtil.getImgByName(emotionType, emotionName));
/adapters\EmotionGridViewAdapter.java:69:        return iv_emotion;
/adapters\EmotionGridViewAdapter.java:70:    }
/adapters\EmotionGridViewAdapter.java:71:}
/adapters\ForumAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\ForumAdapter.java:3:import android.content.Context;
/adapters\ForumAdapter.java:4:import android.content.Intent;
/adapters\ForumAdapter.java:5:import android.text.TextUtils;
/adapters\ForumAdapter.java:6:import android.view.View;
/adapters\ForumAdapter.java:7:import android.view.ViewGroup;
/adapters\ForumAdapter.java:8:import android.widget.ImageView;
/adapters\ForumAdapter.java:9:import android.widget.RelativeLayout;
/adapters\ForumAdapter.java:10:import android.widget.TextView;
/adapters\ForumAdapter.java:11:import android.widget.Toast;
/adapters\ForumAdapter.java:12:import androidx.cardview.widget.CardView;
/adapters\ForumAdapter.java:13:import androidx.gridlayout.widget.GridLayout;
/adapters\ForumAdapter.java:14:import androidx.recyclerview.widget.RecyclerView;
/adapters\ForumAdapter.java:15:import com.bumptech.glide.Glide;
/adapters\ForumAdapter.java:16:import com.huanchengfly.tieba.post.api.models.ForumPageBean;
/adapters\ForumAdapter.java:17:import com.huanchengfly.tieba.post.BaseApplication;
/adapters\ForumAdapter.java:18:import com.huanchengfly.tieba.post.R;
/adapters\ForumAdapter.java:19:import com.huanchengfly.tieba.post.activities.ThreadActivity;
/adapters\ForumAdapter.java:20:import com.huanchengfly.tieba.post.components.MyLinearLayoutManager;
/adapters\ForumAdapter.java:21:import com.huanchengfly.tieba.post.components.dividers.SpacesItemDecoration;
/adapters\ForumAdapter.java:22:import com.huanchengfly.tieba.post.interfaces.OnSwitchListener;
/adapters\ForumAdapter.java:23:import com.huanchengfly.tieba.post.models.PhotoViewBean;
/adapters\ForumAdapter.java:24:import com.huanchengfly.tieba.post.utils.*;
/adapters\ForumAdapter.java:25:import com.huanchengfly.tieba.post.utils.preload.PreloadUtil;
/adapters\ForumAdapter.java:26:import com.huanchengfly.tieba.post.utils.preload.loaders.ThreadContentLoader;
/adapters\ForumAdapter.java:27:import com.huanchengfly.tieba.post.widgets.MarkedImageView;
/adapters\ForumAdapter.java:28:import com.huanchengfly.tieba.post.widgets.VideoPlayerStandard;
/adapters\ForumAdapter.java:29:import com.othershe.baseadapter.ViewHolder;
/adapters\ForumAdapter.java:30:import com.othershe.baseadapter.base.MultiBaseAdapter;
/adapters\ForumAdapter.java:32:import java.util.ArrayList;
/adapters\ForumAdapter.java:33:import java.util.HashMap;
/adapters\ForumAdapter.java:34:import java.util.List;
/adapters\ForumAdapter.java:35:import java.util.Map;
/adapters\ForumAdapter.java:37:import static com.huanchengfly.tieba.post.activities.PhotoViewActivity.OBJ_TYPE_FORUM_PAGE;
/adapters\ForumAdapter.java:39:public class ForumAdapter extends MultiBaseAdapter<ForumPageBean.ThreadBean> {
/adapters\ForumAdapter.java:40:    public static final String TAG = ForumAdapter.class.getSimpleName();
/adapters\ForumAdapter.java:41:    public static final int TYPE_THREAD_TOP = 10;
/adapters\ForumAdapter.java:42:    public static final int TYPE_THREAD_COMMON = 11;
/adapters\ForumAdapter.java:43:    public static final int TYPE_THREAD_SINGLE_PIC = 12;
/adapters\ForumAdapter.java:44:    public static final int TYPE_THREAD_MULTI_PIC = 13;
/adapters\ForumAdapter.java:45:    public static final int TYPE_THREAD_VIDEO = 14;
/adapters\ForumAdapter.java:46:    private ForumPageBean data;
/adapters\ForumAdapter.java:47:    private Map<String, ForumPageBean.UserBean> userBeanMap;
/adapters\ForumAdapter.java:48:    private GoodClassifyAdapter goodClassifyAdapter;
/adapters\ForumAdapter.java:49:    private List<Long> ids;
/adapters\ForumAdapter.java:50:    private boolean good;
/adapters\ForumAdapter.java:52:    public ForumAdapter(Context context, boolean isGood) {
/adapters\ForumAdapter.java:53:        super(context, null, true);
/adapters\ForumAdapter.java:54:        ids = new ArrayList<>();
/adapters\ForumAdapter.java:55:        userBeanMap = new HashMap<>();
/adapters\ForumAdapter.java:56:        good = isGood;
/adapters\ForumAdapter.java:57:        if (isGood) {
/adapters\ForumAdapter.java:58:            View goodView = Util.inflate(mContext, R.layout.layout_header_forum_good);
/adapters\ForumAdapter.java:59:            if (goodView != null) {
/adapters\ForumAdapter.java:60:                addHeaderView(goodView);
/adapters\ForumAdapter.java:61:                goodClassifyAdapter = new GoodClassifyAdapter(mContext);
/adapters\ForumAdapter.java:62:                RecyclerView goodClassifyView = goodView.findViewById(R.id.forum_good_classify);
/adapters\ForumAdapter.java:63:                goodClassifyView.setLayoutManager(new MyLinearLayoutManager(mContext, MyLinearLayoutManager.HORIZONTAL, false));
/adapters\ForumAdapter.java:64:                goodClassifyView.addItemDecoration(new SpacesItemDecoration(DisplayUtil.dp2px(mContext, 8)));
/adapters\ForumAdapter.java:65:                goodClassifyView.setAdapter(goodClassifyAdapter);
/adapters\ForumAdapter.java:66:                refreshGood();
/adapters\ForumAdapter.java:67:            }
/adapters\ForumAdapter.java:68:        }
/adapters\ForumAdapter.java:69:    }
/adapters\ForumAdapter.java:71:    public void setOnSwitchListener(OnSwitchListener onSwitchListener) {
/adapters\ForumAdapter.java:72:        if (good) goodClassifyAdapter.setOnSwitchListener(onSwitchListener);
/adapters\ForumAdapter.java:73:    }
/adapters\ForumAdapter.java:75:    @Override
/adapters\ForumAdapter.java:76:    public long getItemId(int position) {
/adapters\ForumAdapter.java:77:        if (position > 1) {
/adapters\ForumAdapter.java:78:            int p = position - 2;
/adapters\ForumAdapter.java:79:            if (p < getDataCount()) {
/adapters\ForumAdapter.java:80:                return Long.valueOf(getData(p).getId());
/adapters\ForumAdapter.java:81:            }
/adapters\ForumAdapter.java:82:        }
/adapters\ForumAdapter.java:83:        return position;
/adapters\ForumAdapter.java:84:    }
/adapters\ForumAdapter.java:86:    private void refreshGood() {
/adapters\ForumAdapter.java:87:        if (data == null || !good) {
/adapters\ForumAdapter.java:88:            return;
/adapters\ForumAdapter.java:89:        }
/adapters\ForumAdapter.java:90:        goodClassifyAdapter.setData(data.getForum().getGoodClassify());
/adapters\ForumAdapter.java:91:    }
/adapters\ForumAdapter.java:93:    private int getMaxWidth() {
/adapters\ForumAdapter.java:94:        return BaseApplication.ScreenInfo.EXACT_SCREEN_WIDTH - DisplayUtil.dp2px(mContext, 40);
/adapters\ForumAdapter.java:95:    }
/adapters\ForumAdapter.java:97:    private int getGridHeight() {
/adapters\ForumAdapter.java:98:        return (BaseApplication.ScreenInfo.EXACT_SCREEN_WIDTH - DisplayUtil.dp2px(mContext, 70)) / 3;
/adapters\ForumAdapter.java:99:    }
/adapters\ForumAdapter.java:101:    private RelativeLayout.LayoutParams getLayoutParams(RelativeLayout.LayoutParams layoutParams) {
/adapters\ForumAdapter.java:102:        layoutParams.width = getMaxWidth();
/adapters\ForumAdapter.java:103:        layoutParams.height = (int) (getMaxWidth() * 0.5625);
/adapters\ForumAdapter.java:104:        return layoutParams;
/adapters\ForumAdapter.java:105:    }
/adapters\ForumAdapter.java:107:    private ViewGroup.LayoutParams getGridLayoutParams(ViewGroup.LayoutParams layoutParams) {
/adapters\ForumAdapter.java:108:        layoutParams.height = getGridHeight();
/adapters\ForumAdapter.java:109:        return layoutParams;
/adapters\ForumAdapter.java:110:    }
/adapters\ForumAdapter.java:112:    public void setData(ForumPageBean data) {
/adapters\ForumAdapter.java:113:        if (data.getThreadList() == null) {
/adapters\ForumAdapter.java:114:            Toast.makeText(mContext, R.string.toast_cannot_view, Toast.LENGTH_SHORT).show();
/adapters\ForumAdapter.java:115:            return;
/adapters\ForumAdapter.java:116:        }
/adapters\ForumAdapter.java:117:        this.data = data;
/adapters\ForumAdapter.java:118:        ids = new ArrayList<>();
/adapters\ForumAdapter.java:119:        List<ForumPageBean.ThreadBean> threadBeans = new ArrayList<>();
/adapters\ForumAdapter.java:120:        for (ForumPageBean.ThreadBean threadBean : data.getThreadList()) {
/adapters\ForumAdapter.java:121:            long id = Long.valueOf(threadBean.getId());
/adapters\ForumAdapter.java:122:            if (!ids.contains(id) && !needBlock(threadBean)) {
/adapters\ForumAdapter.java:123:                ids.add(id);
/adapters\ForumAdapter.java:124:                threadBeans.add(threadBean);
/adapters\ForumAdapter.java:125:            }
/adapters\ForumAdapter.java:126:        }
/adapters\ForumAdapter.java:127:        setNewData(threadBeans);
/adapters\ForumAdapter.java:128:        addUser(data.getUserList());
/adapters\ForumAdapter.java:129:        refreshGood();
/adapters\ForumAdapter.java:130:    }
/adapters\ForumAdapter.java:132:    public void addData(ForumPageBean data) {
/adapters\ForumAdapter.java:133:        if (data.getThreadList() == null) {
/adapters\ForumAdapter.java:134:            Toast.makeText(mContext, R.string.toast_cannot_view, Toast.LENGTH_SHORT).show();
/adapters\ForumAdapter.java:135:            return;
/adapters\ForumAdapter.java:136:        }
/adapters\ForumAdapter.java:137:        this.data = data;
/adapters\ForumAdapter.java:138:        addUser(data.getUserList());
/adapters\ForumAdapter.java:139:        List<ForumPageBean.ThreadBean> threadBeans = new ArrayList<>();
/adapters\ForumAdapter.java:140:        for (ForumPageBean.ThreadBean threadBean : data.getThreadList()) {
/adapters\ForumAdapter.java:141:            long id = Long.valueOf(threadBean.getId());
/adapters\ForumAdapter.java:142:            if (!ids.contains(id) && !needBlock(threadBean)) {
/adapters\ForumAdapter.java:143:                ids.add(id);
/adapters\ForumAdapter.java:144:                threadBeans.add(threadBean);
/adapters\ForumAdapter.java:145:            }
/adapters\ForumAdapter.java:146:        }
/adapters\ForumAdapter.java:147:        setLoadMoreData(threadBeans);
/adapters\ForumAdapter.java:148:        refreshGood();
/adapters\ForumAdapter.java:149:    }
/adapters\ForumAdapter.java:151:    private void addUser(List<ForumPageBean.UserBean> data) {
/adapters\ForumAdapter.java:152:        for (ForumPageBean.UserBean userBean : data) {
/adapters\ForumAdapter.java:153:            if (userBeanMap.get(userBean.getId()) == null) {
/adapters\ForumAdapter.java:154:                userBeanMap.put(userBean.getId(), userBean);
/adapters\ForumAdapter.java:155:            }
/adapters\ForumAdapter.java:156:        }
/adapters\ForumAdapter.java:157:    }
/adapters\ForumAdapter.java:159:    private void setListenerForImageView(List<ForumPageBean.MediaInfoBean> mediaInfoBeans, ImageView imageView, int position, ForumPageBean.ThreadBean threadBean) {
/adapters\ForumAdapter.java:160:        List<PhotoViewBean> photoViewBeans = new ArrayList<>();
/adapters\ForumAdapter.java:161:        for (ForumPageBean.MediaInfoBean media : mediaInfoBeans) {
/adapters\ForumAdapter.java:162:            photoViewBeans.add(new PhotoViewBean(ImageUtil.getNonNullString(media.getBigPic(), media.getSrcPic(), media.getOriginPic()),
/adapters\ForumAdapter.java:163:                    ImageUtil.getNonNullString(media.getOriginPic(), media.getSrcPic(), media.getBigPic()),
/adapters\ForumAdapter.java:164:                    "1".equals(media.isLongPic())));
/adapters\ForumAdapter.java:165:        }
/adapters\ForumAdapter.java:166:        ImageUtil.initImageView(imageView,
/adapters\ForumAdapter.java:167:                photoViewBeans,
/adapters\ForumAdapter.java:168:                position,
/adapters\ForumAdapter.java:169:                data.getForum().getName(),
/adapters\ForumAdapter.java:170:                data.getForum().getId(),
/adapters\ForumAdapter.java:171:                threadBean.getId(),
/adapters\ForumAdapter.java:172:                true,
/adapters\ForumAdapter.java:173:                OBJ_TYPE_FORUM_PAGE);
/adapters\ForumAdapter.java:174:    }
/adapters\ForumAdapter.java:176:    private void load(ForumPageBean.MediaInfoBean mediaInfoBean, ImageView imageView) {
/adapters\ForumAdapter.java:177:        imageView.setVisibility(View.VISIBLE);
/adapters\ForumAdapter.java:178:        String url = ImageUtil.getUrl(mContext, true, mediaInfoBean.getOriginPic(), mediaInfoBean.getSrcPic());
/adapters\ForumAdapter.java:179:        if ("3".equals(mediaInfoBean.getType())) {
/adapters\ForumAdapter.java:180:            ImageUtil.load(imageView, ImageUtil.LOAD_TYPE_NO_RADIUS, url);
/adapters\ForumAdapter.java:181:        }
/adapters\ForumAdapter.java:182:    }
/adapters\ForumAdapter.java:184:    private void startActivity(ForumPageBean.ThreadBean threadBean) {
/adapters\ForumAdapter.java:185:        PreloadUtil.startActivityWithPreload(mContext,
/adapters\ForumAdapter.java:186:                new Intent(mContext, ThreadActivity.class)
/adapters\ForumAdapter.java:187:                        .putExtra("tid", threadBean.getTid())
/adapters\ForumAdapter.java:188:                        .putExtra("from", ThreadActivity.FROM_FORUM),
/adapters\ForumAdapter.java:189:                new ThreadContentLoader(threadBean.getTid(), 1, false));
/adapters\ForumAdapter.java:190:    }
/adapters\ForumAdapter.java:192:    @Override
/adapters\ForumAdapter.java:193:    protected void convert(ViewHolder viewHolder, ForumPageBean.ThreadBean threadBean, int position, int type) {
/adapters\ForumAdapter.java:194:        if (type == TYPE_THREAD_TOP) {
/adapters\ForumAdapter.java:195:            viewHolder.setOnClickListener(R.id.forum_item_top, view -> startActivity(threadBean));
/adapters\ForumAdapter.java:196:            viewHolder.setText(R.id.forum_item_top_title, threadBean.getTitle());
/adapters\ForumAdapter.java:197:            return;
/adapters\ForumAdapter.java:198:        }
/adapters\ForumAdapter.java:199:        viewHolder.setText(R.id.forum_item_comment_count_text, threadBean.getReplyNum());
/adapters\ForumAdapter.java:200:        if ("1".equals(threadBean.isGood())) {
/adapters\ForumAdapter.java:201:            viewHolder.setVisibility(R.id.forum_item_good_tip, View.VISIBLE);
/adapters\ForumAdapter.java:202:        } else {
/adapters\ForumAdapter.java:203:            viewHolder.setVisibility(R.id.forum_item_good_tip, View.GONE);
/adapters\ForumAdapter.java:204:        }
/adapters\ForumAdapter.java:205:        viewHolder.setOnClickListener(R.id.forum_item, view -> startActivity(threadBean));
/adapters\ForumAdapter.java:206:        if ("1".equals(threadBean.isNoTitle())) {
/adapters\ForumAdapter.java:207:            viewHolder.setVisibility(R.id.forum_item_title_holder, View.GONE);
/adapters\ForumAdapter.java:208:        } else {
/adapters\ForumAdapter.java:209:            viewHolder.setVisibility(R.id.forum_item_title_holder, View.VISIBLE);
/adapters\ForumAdapter.java:210:            viewHolder.setText(R.id.forum_item_title, threadBean.getTitle());
/adapters\ForumAdapter.java:211:        }
/adapters\ForumAdapter.java:212:        TextView textView = viewHolder.getView(R.id.forum_item_content_text);
/adapters\ForumAdapter.java:213:        if (TextUtils.isEmpty(threadBean.getAbstractString())) {
/adapters\ForumAdapter.java:214:            textView.setText(null);
/adapters\ForumAdapter.java:215:            textView.setVisibility(View.GONE);
/adapters\ForumAdapter.java:216:        } else {
/adapters\ForumAdapter.java:217:            textView.setText(threadBean.getAbstractString());
/adapters\ForumAdapter.java:218:            textView.setVisibility(View.VISIBLE);
/adapters\ForumAdapter.java:219:        }
/adapters\ForumAdapter.java:220:        ForumPageBean.UserBean userBean = userBeanMap.get(threadBean.getAuthorId());
/adapters\ForumAdapter.java:221:        if (userBean != null) {
/adapters\ForumAdapter.java:222:            viewHolder.setOnClickListener(R.id.forum_item_user_avatar, v -> {
/adapters\ForumAdapter.java:223:                NavigationHelper.toUserSpaceWithAnim(mContext, userBean.getId(), userBean.getPortrait(), v);
/adapters\ForumAdapter.java:224:            });
/adapters\ForumAdapter.java:225:            viewHolder.setText(R.id.forum_item_user_name, StringUtil.getUsernameString(mContext, userBean.getName(), userBean.getNameShow()));
/adapters\ForumAdapter.java:226:            viewHolder.setText(R.id.forum_item_user_time, Util.getTime(threadBean.getLastTimeInt()));
/adapters\ForumAdapter.java:227:            ImageUtil.load(viewHolder.getView(R.id.forum_item_user_avatar), ImageUtil.LOAD_TYPE_AVATAR, userBean.getPortrait());
/adapters\ForumAdapter.java:228:        }
/adapters\ForumAdapter.java:229:        switch (type) {
/adapters\ForumAdapter.java:230:            case TYPE_THREAD_SINGLE_PIC:
/adapters\ForumAdapter.java:231:                if (Util.canLoadGlide(mContext) && "3".equals(threadBean.getMedia().get(0).getType())) {
/adapters\ForumAdapter.java:232:                    MarkedImageView imageView = viewHolder.getView(R.id.forum_item_content_pic);
/adapters\ForumAdapter.java:233:                    imageView.setLayoutParams(getLayoutParams((RelativeLayout.LayoutParams) imageView.getLayoutParams()));
/adapters\ForumAdapter.java:234:                    setListenerForImageView(threadBean.getMedia(), imageView, 0, threadBean);
/adapters\ForumAdapter.java:235:                    ForumPageBean.MediaInfoBean mediaInfoBean = threadBean.getMedia().get(0);
/adapters\ForumAdapter.java:236:                    if ("1".equals(mediaInfoBean.isGif())) {
/adapters\ForumAdapter.java:237:                        imageView.setMarkText("GIF");
/adapters\ForumAdapter.java:238:                        imageView.setMarkVisible(true);
/adapters\ForumAdapter.java:239:                    } else {
/adapters\ForumAdapter.java:240:                        imageView.setMarkText("");
/adapters\ForumAdapter.java:241:                        imageView.setMarkVisible(false);
/adapters\ForumAdapter.java:242:                    }
/adapters\ForumAdapter.java:243:                    ImageUtil.load(imageView, ImageUtil.LOAD_TYPE_SMALL_PIC, ImageUtil.getUrl(mContext, true, mediaInfoBean.getOriginPic(), mediaInfoBean.getSrcPic(), mediaInfoBean.getBigPic()));
/adapters\ForumAdapter.java:244:                }
/adapters\ForumAdapter.java:245:                break;
/adapters\ForumAdapter.java:246:            case TYPE_THREAD_MULTI_PIC:
/adapters\ForumAdapter.java:247:                GridLayout gridLayout = viewHolder.getView(R.id.forum_item_content_pics);
/adapters\ForumAdapter.java:248:                CardView cardView = viewHolder.getView(R.id.forum_item_content_pics_card);
/adapters\ForumAdapter.java:249:                cardView.setRadius(DisplayUtil.dp2px(mContext, SharedPreferencesUtil.get(mContext, SharedPreferencesUtil.SP_SETTINGS).getInt("radius", 8)));
/adapters\ForumAdapter.java:250:                MarkedImageView firstImageView = viewHolder.getView(R.id.forum_item_content_pic_1);
/adapters\ForumAdapter.java:251:                MarkedImageView secondImageView = viewHolder.getView(R.id.forum_item_content_pic_2);
/adapters\ForumAdapter.java:252:                MarkedImageView thirdImageView = viewHolder.getView(R.id.forum_item_content_pic_3);
/adapters\ForumAdapter.java:253:                gridLayout.setLayoutParams(getGridLayoutParams(gridLayout.getLayoutParams()));
/adapters\ForumAdapter.java:254:                int size = threadBean.getMedia().size();
/adapters\ForumAdapter.java:255:                if (size >= 1) {
/adapters\ForumAdapter.java:256:                    setListenerForImageView(threadBean.getMedia(), firstImageView, 0, threadBean);
/adapters\ForumAdapter.java:257:                    ForumPageBean.MediaInfoBean firstMedia = threadBean.getMedia().get(0);
/adapters\ForumAdapter.java:258:                    load(firstMedia, firstImageView);
/adapters\ForumAdapter.java:259:                } else {
/adapters\ForumAdapter.java:260:                    firstImageView.setVisibility(View.GONE);
/adapters\ForumAdapter.java:261:                    Glide.with(mContext)
/adapters\ForumAdapter.java:262:                            .clear(firstImageView);
/adapters\ForumAdapter.java:263:                }
/adapters\ForumAdapter.java:264:                if (size >= 2) {
/adapters\ForumAdapter.java:265:                    setListenerForImageView(threadBean.getMedia(), secondImageView, 1, threadBean);
/adapters\ForumAdapter.java:266:                    ForumPageBean.MediaInfoBean secondMedia = threadBean.getMedia().get(1);
/adapters\ForumAdapter.java:267:                    load(secondMedia, secondImageView);
/adapters\ForumAdapter.java:268:                } else {
/adapters\ForumAdapter.java:269:                    secondImageView.setVisibility(View.GONE);
/adapters\ForumAdapter.java:270:                    Glide.with(mContext)
/adapters\ForumAdapter.java:271:                            .clear(secondImageView);
/adapters\ForumAdapter.java:272:                }
/adapters\ForumAdapter.java:273:                if (size >= 3) {
/adapters\ForumAdapter.java:274:                    setListenerForImageView(threadBean.getMedia(), thirdImageView, 2, threadBean);
/adapters\ForumAdapter.java:275:                    ForumPageBean.MediaInfoBean thirdMedia = threadBean.getMedia().get(2);
/adapters\ForumAdapter.java:276:                    load(thirdMedia, thirdImageView);
/adapters\ForumAdapter.java:277:                } else {
/adapters\ForumAdapter.java:278:                    thirdImageView.setVisibility(View.GONE);
/adapters\ForumAdapter.java:279:                    Glide.with(mContext)
/adapters\ForumAdapter.java:280:                            .clear(thirdImageView);
/adapters\ForumAdapter.java:281:                }
/adapters\ForumAdapter.java:282:                if (size > 3) {
/adapters\ForumAdapter.java:283:                    viewHolder.setVisibility(R.id.forum_item_content_pic_badge, View.VISIBLE);
/adapters\ForumAdapter.java:284:                    viewHolder.setText(R.id.forum_item_content_pic_badge_text, String.valueOf(size));
/adapters\ForumAdapter.java:285:                } else {
/adapters\ForumAdapter.java:286:                    viewHolder.setVisibility(R.id.forum_item_content_pic_badge, View.GONE);
/adapters\ForumAdapter.java:287:                }
/adapters\ForumAdapter.java:288:                break;
/adapters\ForumAdapter.java:289:            case TYPE_THREAD_VIDEO:
/adapters\ForumAdapter.java:290:                if (threadBean.getVideoInfo() == null) {
/adapters\ForumAdapter.java:291:                    break;
/adapters\ForumAdapter.java:292:                }
/adapters\ForumAdapter.java:293:                VideoPlayerStandard videoPlayerStandard = viewHolder.getView(R.id.forum_item_content_video);
/adapters\ForumAdapter.java:294:                videoPlayerStandard.setLayoutParams(getLayoutParams((RelativeLayout.LayoutParams) videoPlayerStandard.getLayoutParams()));
/adapters\ForumAdapter.java:295:                videoPlayerStandard.setUp(threadBean.getVideoInfo().getVideoUrl(), "");
/adapters\ForumAdapter.java:296:                ImageUtil.load(videoPlayerStandard.posterImageView, ImageUtil.LOAD_TYPE_SMALL_PIC, threadBean.getVideoInfo().getThumbnailUrl(), true);
/adapters\ForumAdapter.java:297:                break;
/adapters\ForumAdapter.java:298:        }
/adapters\ForumAdapter.java:299:    }
/adapters\ForumAdapter.java:301:    private boolean needBlock(ForumPageBean.ThreadBean threadBean) {
/adapters\ForumAdapter.java:302:        if (!TextUtils.isEmpty(threadBean.getTitle()) && BlockUtil.needBlock(threadBean.getTitle())) {
/adapters\ForumAdapter.java:303:            return true;
/adapters\ForumAdapter.java:304:        }
/adapters\ForumAdapter.java:305:        ForumPageBean.UserBean userBean = userBeanMap.get(threadBean.getAuthorId());
/adapters\ForumAdapter.java:306:        if (BlockUtil.needBlock(userBean != null ? userBean.getName() : null, threadBean.getAuthorId())) {
/adapters\ForumAdapter.java:307:            return true;
/adapters\ForumAdapter.java:308:        }
/adapters\ForumAdapter.java:309:        return !(TextUtils.isEmpty(threadBean.getAbstractString())) && BlockUtil.needBlock(threadBean.getAbstractString());
/adapters\ForumAdapter.java:310:    }
/adapters\ForumAdapter.java:312:    private String getAbstracts(List<ForumPageBean.AbstractBean> abstractBeans) {
/adapters\ForumAdapter.java:313:        StringBuilder stringBuilder = new StringBuilder();
/adapters\ForumAdapter.java:314:        for (ForumPageBean.AbstractBean abstractBean : abstractBeans) {
/adapters\ForumAdapter.java:315:            if ("0".equals(abstractBean.getType())) {
/adapters\ForumAdapter.java:316:                stringBuilder.append(abstractBean.getText());
/adapters\ForumAdapter.java:317:            }
/adapters\ForumAdapter.java:318:        }
/adapters\ForumAdapter.java:319:        return stringBuilder.toString();
/adapters\ForumAdapter.java:320:    }
/adapters\ForumAdapter.java:322:    @Override
/adapters\ForumAdapter.java:323:    protected int getItemLayoutId(int type) {
/adapters\ForumAdapter.java:324:        switch (type) {
/adapters\ForumAdapter.java:325:            case TYPE_THREAD_TOP:
/adapters\ForumAdapter.java:326:                return R.layout.item_forum_thread_top;
/adapters\ForumAdapter.java:327:            case TYPE_THREAD_COMMON:
/adapters\ForumAdapter.java:328:                return R.layout.item_forum_thread_common;
/adapters\ForumAdapter.java:329:            case TYPE_THREAD_VIDEO:
/adapters\ForumAdapter.java:330:                return R.layout.item_forum_thread_video;
/adapters\ForumAdapter.java:331:            case TYPE_THREAD_SINGLE_PIC:
/adapters\ForumAdapter.java:332:                return R.layout.item_forum_thread_single_pic;
/adapters\ForumAdapter.java:333:            case TYPE_THREAD_MULTI_PIC:
/adapters\ForumAdapter.java:334:                return R.layout.item_forum_thread_multi_pic;
/adapters\ForumAdapter.java:335:        }
/adapters\ForumAdapter.java:336:        return R.layout.item_forum_thread_common;
/adapters\ForumAdapter.java:337:    }
/adapters\ForumAdapter.java:339:    @Override
/adapters\ForumAdapter.java:340:    protected int getViewType(int position, ForumPageBean.ThreadBean threadBean) {
/adapters\ForumAdapter.java:341:        if ("1".equals(threadBean.isTop())) {
/adapters\ForumAdapter.java:342:            return TYPE_THREAD_TOP;
/adapters\ForumAdapter.java:343:        }
/adapters\ForumAdapter.java:344:        if (threadBean.getVideoInfo() != null) {
/adapters\ForumAdapter.java:345:            return TYPE_THREAD_VIDEO;
/adapters\ForumAdapter.java:346:        }
/adapters\ForumAdapter.java:347:        if (threadBean.getMedia() == null) {
/adapters\ForumAdapter.java:348:            return TYPE_THREAD_COMMON;
/adapters\ForumAdapter.java:349:        }
/adapters\ForumAdapter.java:350:        if (threadBean.getMedia().size() == 1) {
/adapters\ForumAdapter.java:351:            return TYPE_THREAD_SINGLE_PIC;
/adapters\ForumAdapter.java:352:        }
/adapters\ForumAdapter.java:353:        if (threadBean.getMedia().size() > 1) {
/adapters\ForumAdapter.java:354:            return TYPE_THREAD_MULTI_PIC;
/adapters\ForumAdapter.java:355:        }
/adapters\ForumAdapter.java:356:        return TYPE_THREAD_COMMON;
/adapters\ForumAdapter.java:357:    }
/adapters\ForumAdapter.java:358:}
/adapters\FragmentTabViewPagerAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\FragmentTabViewPagerAdapter.java:3:import androidx.fragment.app.Fragment;
/adapters\FragmentTabViewPagerAdapter.java:4:import androidx.fragment.app.FragmentManager;
/adapters\FragmentTabViewPagerAdapter.java:5:import androidx.fragment.app.FragmentPagerAdapter;
/adapters\FragmentTabViewPagerAdapter.java:7:import java.util.ArrayList;
/adapters\FragmentTabViewPagerAdapter.java:8:import java.util.List;
/adapters\FragmentTabViewPagerAdapter.java:10:public class FragmentTabViewPagerAdapter extends FragmentPagerAdapter {
/adapters\FragmentTabViewPagerAdapter.java:11:    public Fragment currentFragment;
/adapters\FragmentTabViewPagerAdapter.java:12:    public int currentFragmentPosition;
/adapters\FragmentTabViewPagerAdapter.java:13:    private List<Fragment> fragments;
/adapters\FragmentTabViewPagerAdapter.java:14:    private List<String> titles;
/adapters\FragmentTabViewPagerAdapter.java:16:    public FragmentTabViewPagerAdapter(FragmentManager fm) {
/adapters\FragmentTabViewPagerAdapter.java:17:        super(fm);
/adapters\FragmentTabViewPagerAdapter.java:18:        fragments = new ArrayList<>();
/adapters\FragmentTabViewPagerAdapter.java:19:        titles = new ArrayList<>();
/adapters\FragmentTabViewPagerAdapter.java:20:    }
/adapters\FragmentTabViewPagerAdapter.java:22:    @Override
/adapters\FragmentTabViewPagerAdapter.java:23:    public Fragment getItem(int position) {
/adapters\FragmentTabViewPagerAdapter.java:24:        currentFragmentPosition = position;
/adapters\FragmentTabViewPagerAdapter.java:25:        currentFragment = fragments.get(position);
/adapters\FragmentTabViewPagerAdapter.java:26:        return fragments.get(position);
/adapters\FragmentTabViewPagerAdapter.java:27:    }
/adapters\FragmentTabViewPagerAdapter.java:29:    public Fragment getCurrentFragment() {
/adapters\FragmentTabViewPagerAdapter.java:30:        return currentFragment;
/adapters\FragmentTabViewPagerAdapter.java:31:    }
/adapters\FragmentTabViewPagerAdapter.java:33:    public int getCurrentFragmentPosition() {
/adapters\FragmentTabViewPagerAdapter.java:34:        return currentFragmentPosition;
/adapters\FragmentTabViewPagerAdapter.java:35:    }
/adapters\FragmentTabViewPagerAdapter.java:37:    @Override
/adapters\FragmentTabViewPagerAdapter.java:38:    public int getCount() {
/adapters\FragmentTabViewPagerAdapter.java:39:        return fragments.size();
/adapters\FragmentTabViewPagerAdapter.java:40:    }
/adapters\FragmentTabViewPagerAdapter.java:42:    public void addFragment(Fragment fragment, String title) {
/adapters\FragmentTabViewPagerAdapter.java:43:        fragments.add(fragment);
/adapters\FragmentTabViewPagerAdapter.java:44:        titles.add(title);
/adapters\FragmentTabViewPagerAdapter.java:45:        notifyDataSetChanged();
/adapters\FragmentTabViewPagerAdapter.java:46:    }
/adapters\FragmentTabViewPagerAdapter.java:48:    public void clear() {
/adapters\FragmentTabViewPagerAdapter.java:49:        fragments = new ArrayList<>();
/adapters\FragmentTabViewPagerAdapter.java:50:        titles = new ArrayList<>();
/adapters\FragmentTabViewPagerAdapter.java:51:        notifyDataSetChanged();
/adapters\FragmentTabViewPagerAdapter.java:52:    }
/adapters\FragmentTabViewPagerAdapter.java:54:    public List<Fragment> getFragments() {
/adapters\FragmentTabViewPagerAdapter.java:55:        return fragments;
/adapters\FragmentTabViewPagerAdapter.java:56:    }
/adapters\FragmentTabViewPagerAdapter.java:58:    @Override
/adapters\FragmentTabViewPagerAdapter.java:59:    public CharSequence getPageTitle(int position) {
/adapters\FragmentTabViewPagerAdapter.java:60:        return titles.get(position);
/adapters\FragmentTabViewPagerAdapter.java:61:    }
/adapters\FragmentTabViewPagerAdapter.java:62:}/adapters\GoodClassifyAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\GoodClassifyAdapter.java:3:import android.content.Context;
/adapters\GoodClassifyAdapter.java:4:import android.view.View;
/adapters\GoodClassifyAdapter.java:5:import android.view.ViewGroup;
/adapters\GoodClassifyAdapter.java:6:import android.widget.TextView;
/adapters\GoodClassifyAdapter.java:8:import androidx.annotation.NonNull;
/adapters\GoodClassifyAdapter.java:9:import androidx.recyclerview.widget.RecyclerView;
/adapters\GoodClassifyAdapter.java:11:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/adapters\GoodClassifyAdapter.java:12:import com.huanchengfly.tieba.post.api.models.ForumPageBean;
/adapters\GoodClassifyAdapter.java:13:import com.huanchengfly.tieba.post.R;
/adapters\GoodClassifyAdapter.java:14:import com.huanchengfly.tieba.post.components.MyViewHolder;
/adapters\GoodClassifyAdapter.java:15:import com.huanchengfly.tieba.post.interfaces.OnSwitchListener;
/adapters\GoodClassifyAdapter.java:16:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/adapters\GoodClassifyAdapter.java:17:import com.huanchengfly.tieba.post.utils.Util;
/adapters\GoodClassifyAdapter.java:19:import java.util.ArrayList;
/adapters\GoodClassifyAdapter.java:20:import java.util.List;
/adapters\GoodClassifyAdapter.java:22:public class GoodClassifyAdapter extends RecyclerView.Adapter<MyViewHolder> {
/adapters\GoodClassifyAdapter.java:23:    private Context context;
/adapters\GoodClassifyAdapter.java:24:    private List<ForumPageBean.GoodClassifyBean> goodClassifyBeans;
/adapters\GoodClassifyAdapter.java:25:    private String selectedId;
/adapters\GoodClassifyAdapter.java:26:    private OnSwitchListener mOnSwitchListener;
/adapters\GoodClassifyAdapter.java:28:    public GoodClassifyAdapter(Context context) {
/adapters\GoodClassifyAdapter.java:29:        this.context = context;
/adapters\GoodClassifyAdapter.java:30:        this.goodClassifyBeans = new ArrayList<>();
/adapters\GoodClassifyAdapter.java:31:        this.selectedId = "0";
/adapters\GoodClassifyAdapter.java:32:    }
/adapters\GoodClassifyAdapter.java:34:    public OnSwitchListener getOnSwitchListener() {
/adapters\GoodClassifyAdapter.java:35:        return mOnSwitchListener;
/adapters\GoodClassifyAdapter.java:36:    }
/adapters\GoodClassifyAdapter.java:38:    public void setOnSwitchListener(OnSwitchListener onSwitchListener) {
/adapters\GoodClassifyAdapter.java:39:        this.mOnSwitchListener = onSwitchListener;
/adapters\GoodClassifyAdapter.java:40:    }
/adapters\GoodClassifyAdapter.java:42:    public GoodClassifyAdapter setSelectedId(String selectedId) {
/adapters\GoodClassifyAdapter.java:43:        this.selectedId = selectedId;
/adapters\GoodClassifyAdapter.java:44:        return this;
/adapters\GoodClassifyAdapter.java:45:    }
/adapters\GoodClassifyAdapter.java:47:    public void setData(List<ForumPageBean.GoodClassifyBean> goodClassifyBeans) {
/adapters\GoodClassifyAdapter.java:48:        this.goodClassifyBeans = goodClassifyBeans;
/adapters\GoodClassifyAdapter.java:49:        notifyDataSetChanged();
/adapters\GoodClassifyAdapter.java:50:    }
/adapters\GoodClassifyAdapter.java:52:    @NonNull
/adapters\GoodClassifyAdapter.java:53:    @Override
/adapters\GoodClassifyAdapter.java:54:    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
/adapters\GoodClassifyAdapter.java:55:        return new MyViewHolder(Util.inflate(context, R.layout.item_good_classify));
/adapters\GoodClassifyAdapter.java:56:    }
/adapters\GoodClassifyAdapter.java:58:    @Override
/adapters\GoodClassifyAdapter.java:59:    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {
/adapters\GoodClassifyAdapter.java:60:        ForumPageBean.GoodClassifyBean goodClassifyBean = goodClassifyBeans.get(position);
/adapters\GoodClassifyAdapter.java:61:        TextView textView = holder.getView(R.id.classify_text);
/adapters\GoodClassifyAdapter.java:62:        View view = holder.getView(R.id.classify_item);
/adapters\GoodClassifyAdapter.java:63:        view.setOnClickListener(v -> {
/adapters\GoodClassifyAdapter.java:64:            setSelectedId(goodClassifyBean.getClassId());
/adapters\GoodClassifyAdapter.java:65:            notifyDataSetChanged();
/adapters\GoodClassifyAdapter.java:66:            if (getOnSwitchListener() != null) {
/adapters\GoodClassifyAdapter.java:67:                getOnSwitchListener().onSwitch(position);
/adapters\GoodClassifyAdapter.java:68:            }
/adapters\GoodClassifyAdapter.java:69:        });
/adapters\GoodClassifyAdapter.java:70:        textView.setText(goodClassifyBean.getClassName());
/adapters\GoodClassifyAdapter.java:71:        if (selectedId.equals(goodClassifyBean.getClassId())) {
/adapters\GoodClassifyAdapter.java:72:            textView.setTextColor(ThemeUtils.getColorByAttr(context, R.attr.colorAccent));
/adapters\GoodClassifyAdapter.java:73:        } else {
/adapters\GoodClassifyAdapter.java:74:            textView.setTextColor(ThemeUtil.getSecondaryTextColor(context));
/adapters\GoodClassifyAdapter.java:75:        }
/adapters\GoodClassifyAdapter.java:76:    }
/adapters\GoodClassifyAdapter.java:78:    @Override
/adapters\GoodClassifyAdapter.java:79:    public int getItemCount() {
/adapters\GoodClassifyAdapter.java:80:        return goodClassifyBeans.size();
/adapters\GoodClassifyAdapter.java:81:    }
/adapters\GoodClassifyAdapter.java:82:}
/adapters\HistoryListAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\HistoryListAdapter.java:3:import android.annotation.SuppressLint;
/adapters\HistoryListAdapter.java:4:import android.content.Context;
/adapters\HistoryListAdapter.java:5:import android.text.TextUtils;
/adapters\HistoryListAdapter.java:6:import android.text.format.DateUtils;
/adapters\HistoryListAdapter.java:7:import android.view.LayoutInflater;
/adapters\HistoryListAdapter.java:8:import android.view.View;
/adapters\HistoryListAdapter.java:9:import android.view.ViewGroup;
/adapters\HistoryListAdapter.java:10:import android.widget.BaseAdapter;
/adapters\HistoryListAdapter.java:11:import android.widget.ImageView;
/adapters\HistoryListAdapter.java:12:import android.widget.TextView;
/adapters\HistoryListAdapter.java:14:import com.huanchengfly.tieba.post.R;
/adapters\HistoryListAdapter.java:15:import com.huanchengfly.tieba.post.models.database.History;
/adapters\HistoryListAdapter.java:16:import com.huanchengfly.tieba.post.utils.HistoryHelper;
/adapters\HistoryListAdapter.java:17:import com.huanchengfly.tieba.post.utils.ImageUtil;
/adapters\HistoryListAdapter.java:19:import java.util.List;
/adapters\HistoryListAdapter.java:21:public class HistoryListAdapter extends BaseAdapter {
/adapters\HistoryListAdapter.java:22:    private List<History> mList;
/adapters\HistoryListAdapter.java:23:    private LayoutInflater mInflater;
/adapters\HistoryListAdapter.java:24:    private Context mContext;
/adapters\HistoryListAdapter.java:26:    public HistoryListAdapter(Context context, List<History> list) {
/adapters\HistoryListAdapter.java:27:        mList = list;
/adapters\HistoryListAdapter.java:28:        mInflater = LayoutInflater.from(context);
/adapters\HistoryListAdapter.java:29:        mContext = context;
/adapters\HistoryListAdapter.java:30:    }
/adapters\HistoryListAdapter.java:32:    @Override
/adapters\HistoryListAdapter.java:33:    public int getCount() {
/adapters\HistoryListAdapter.java:34:        return mList.size();
/adapters\HistoryListAdapter.java:35:    }
/adapters\HistoryListAdapter.java:37:    @Override
/adapters\HistoryListAdapter.java:38:    public Object getItem(int position) {
/adapters\HistoryListAdapter.java:39:        return mList.get(position);
/adapters\HistoryListAdapter.java:40:    }
/adapters\HistoryListAdapter.java:42:    @Override
/adapters\HistoryListAdapter.java:43:    public long getItemId(int position) {
/adapters\HistoryListAdapter.java:44:        return position;
/adapters\HistoryListAdapter.java:45:    }
/adapters\HistoryListAdapter.java:47:    @SuppressLint("InflateParams")
/adapters\HistoryListAdapter.java:48:    @Override
/adapters\HistoryListAdapter.java:49:    public View getView(int position, View convertView, ViewGroup parent) {
/adapters\HistoryListAdapter.java:50:        ViewHolder viewHolder;
/adapters\HistoryListAdapter.java:51:        if (convertView == null) {
/adapters\HistoryListAdapter.java:52:            viewHolder = new ViewHolder();
/adapters\HistoryListAdapter.java:53:            convertView = mInflater.inflate(R.layout.item_history, null);
/adapters\HistoryListAdapter.java:54:            viewHolder.titleTextView = convertView.findViewById(R.id.history_item_title);
/adapters\HistoryListAdapter.java:55:            viewHolder.timeTextView = convertView.findViewById(R.id.history_item_header_title);
/adapters\HistoryListAdapter.java:56:            viewHolder.iconView = convertView.findViewById(R.id.history_item_icon);
/adapters\HistoryListAdapter.java:57:            viewHolder.avatarView = convertView.findViewById(R.id.history_item_avatar);
/adapters\HistoryListAdapter.java:58:            convertView.setTag(viewHolder);
/adapters\HistoryListAdapter.java:59:        } else {
/adapters\HistoryListAdapter.java:60:            viewHolder = (ViewHolder) convertView.getTag();
/adapters\HistoryListAdapter.java:61:        }
/adapters\HistoryListAdapter.java:62:        History bean = mList.get(position);
/adapters\HistoryListAdapter.java:63:        StringBuilder headerTitle = new StringBuilder();
/adapters\HistoryListAdapter.java:64:        viewHolder.titleTextView.setText(bean.getTitle());
/adapters\HistoryListAdapter.java:65:        switch (bean.getType()) {
/adapters\HistoryListAdapter.java:66:            case HistoryHelper.TYPE_BA:
/adapters\HistoryListAdapter.java:67:                headerTitle.append("贴吧 · ");
/adapters\HistoryListAdapter.java:68:                viewHolder.iconView.setImageResource(R.drawable.ic_infinite);
/adapters\HistoryListAdapter.java:69:                break;
/adapters\HistoryListAdapter.java:70:            case HistoryHelper.TYPE_THREAD:
/adapters\HistoryListAdapter.java:71:                if (!TextUtils.isEmpty(bean.getUsername())) {
/adapters\HistoryListAdapter.java:72:                    headerTitle.append(bean.getUsername());
/adapters\HistoryListAdapter.java:73:                    headerTitle.append(" 的");
/adapters\HistoryListAdapter.java:74:                }
/adapters\HistoryListAdapter.java:75:                headerTitle.append("贴子 · ");
/adapters\HistoryListAdapter.java:76:                viewHolder.iconView.setImageResource(R.drawable.ic_inbox);
/adapters\HistoryListAdapter.java:77:                break;
/adapters\HistoryListAdapter.java:78:            default:
/adapters\HistoryListAdapter.java:79:                headerTitle.append("网页 · ");
/adapters\HistoryListAdapter.java:80:                viewHolder.iconView.setImageResource(R.drawable.ic_cisco_webex);
/adapters\HistoryListAdapter.java:81:                break;
/adapters\HistoryListAdapter.java:82:        }
/adapters\HistoryListAdapter.java:83:        if (!TextUtils.isEmpty(bean.getAvatar())) {
/adapters\HistoryListAdapter.java:84:            viewHolder.avatarView.setVisibility(View.VISIBLE);
/adapters\HistoryListAdapter.java:85:            ImageUtil.load(viewHolder.avatarView, ImageUtil.LOAD_TYPE_AVATAR, bean.getAvatar());
/adapters\HistoryListAdapter.java:86:        } else {
/adapters\HistoryListAdapter.java:87:            viewHolder.avatarView.setVisibility(View.GONE);
/adapters\HistoryListAdapter.java:88:        }
/adapters\HistoryListAdapter.java:89:        headerTitle.append(DateUtils.getRelativeTimeSpanString(bean.getTimestamp()));
/adapters\HistoryListAdapter.java:90:        viewHolder.timeTextView.setText(headerTitle.toString());
/adapters\HistoryListAdapter.java:91:        return convertView;
/adapters\HistoryListAdapter.java:92:    }
/adapters\HistoryListAdapter.java:94:    class ViewHolder {
/adapters\HistoryListAdapter.java:95:        TextView titleTextView;
/adapters\HistoryListAdapter.java:96:        ImageView avatarView;
/adapters\HistoryListAdapter.java:97:        TextView timeTextView;
/adapters\HistoryListAdapter.java:98:        ImageView iconView;
/adapters\HistoryListAdapter.java:99:    }
/adapters\HistoryListAdapter.java:100:}
/adapters\HotMessageListAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\HotMessageListAdapter.java:3:import android.content.Context;
/adapters\HotMessageListAdapter.java:4:import android.view.View;
/adapters\HotMessageListAdapter.java:5:import android.widget.TextView;
/adapters\HotMessageListAdapter.java:7:import androidx.core.widget.TextViewCompat;
/adapters\HotMessageListAdapter.java:9:import com.huanchengfly.tieba.post.api.models.web.HotMessageListBean;
/adapters\HotMessageListAdapter.java:10:import com.huanchengfly.tieba.post.R;
/adapters\HotMessageListAdapter.java:11:import com.huanchengfly.tieba.post.utils.NavigationHelper;
/adapters\HotMessageListAdapter.java:12:import com.huanchengfly.tieba.post.utils.Util;
/adapters\HotMessageListAdapter.java:13:import com.othershe.baseadapter.ViewHolder;
/adapters\HotMessageListAdapter.java:14:import com.othershe.baseadapter.base.CommonBaseAdapter;
/adapters\HotMessageListAdapter.java:16:public class HotMessageListAdapter extends CommonBaseAdapter<HotMessageListBean.HotMessageRetBean> {
/adapters\HotMessageListAdapter.java:17:    public HotMessageListAdapter(Context context) {
/adapters\HotMessageListAdapter.java:18:        super(context, null, false);
/adapters\HotMessageListAdapter.java:19:        addHeaderView(Util.inflate(context, R.layout.header_hot_message_list));
/adapters\HotMessageListAdapter.java:20:        NavigationHelper navigationHelper = NavigationHelper.newInstance(mContext);
/adapters\HotMessageListAdapter.java:21:        setOnItemClickListener((viewHolder, hotMessageRetBean, position) -> navigationHelper.navigationByData(NavigationHelper.ACTION_URL, String.format("https://tieba.baidu.com/mo/q/hotMessage?topic_id=%1$s&topic_name=%2$s", hotMessageRetBean.getMulId(), hotMessageRetBean.getMulName())));
/adapters\HotMessageListAdapter.java:22:    }
/adapters\HotMessageListAdapter.java:24:    @Override
/adapters\HotMessageListAdapter.java:25:    protected void convert(ViewHolder viewHolder, HotMessageListBean.HotMessageRetBean hotMessageRetBean, int position) {
/adapters\HotMessageListAdapter.java:26:        viewHolder.setText(R.id.hot_order, String.valueOf(position + 1));
/adapters\HotMessageListAdapter.java:27:        viewHolder.setText(R.id.hot_title, hotMessageRetBean.getMulName());
/adapters\HotMessageListAdapter.java:28:        viewHolder.setText(R.id.hot_desc, hotMessageRetBean.getTopicInfo().getTopicDesc());
/adapters\HotMessageListAdapter.java:29:        TextView textView = viewHolder.getView(R.id.hot_order);
/adapters\HotMessageListAdapter.java:30:        if (position > 2) {
/adapters\HotMessageListAdapter.java:31:            TextViewCompat.setTextAppearance(textView, R.style.TextAppearance_Bold);
/adapters\HotMessageListAdapter.java:32:            textView.setTextColor(mContext.getResources().getColor(R.color.tieba));
/adapters\HotMessageListAdapter.java:33:        } else {
/adapters\HotMessageListAdapter.java:34:            TextViewCompat.setTextAppearance(textView, R.style.TextAppearance_Bold_Italic);
/adapters\HotMessageListAdapter.java:35:            textView.setTextColor(mContext.getResources().getColor(R.color.red_accent));
/adapters\HotMessageListAdapter.java:36:        }
/adapters\HotMessageListAdapter.java:37:        if (position > 2 || hotMessageRetBean.getTopicInfo().getTopicDesc() == null) {
/adapters\HotMessageListAdapter.java:38:            viewHolder.setVisibility(R.id.hot_desc, View.GONE);
/adapters\HotMessageListAdapter.java:39:        } else {
/adapters\HotMessageListAdapter.java:40:            viewHolder.setVisibility(R.id.hot_desc, View.VISIBLE);
/adapters\HotMessageListAdapter.java:41:        }
/adapters\HotMessageListAdapter.java:42:    }
/adapters\HotMessageListAdapter.java:44:    @Override
/adapters\HotMessageListAdapter.java:45:    protected int getItemLayoutId() {
/adapters\HotMessageListAdapter.java:46:        return R.layout.item_hot_message_list;
/adapters\HotMessageListAdapter.java:47:    }
/adapters\HotMessageListAdapter.java:48:}
/adapters\InsertPhotoAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\InsertPhotoAdapter.java:3:import android.app.Activity;
/adapters\InsertPhotoAdapter.java:4:import android.content.Context;
/adapters\InsertPhotoAdapter.java:5:import android.os.Build;
/adapters\InsertPhotoAdapter.java:6:import android.view.LayoutInflater;
/adapters\InsertPhotoAdapter.java:7:import android.view.View;
/adapters\InsertPhotoAdapter.java:8:import android.view.ViewGroup;
/adapters\InsertPhotoAdapter.java:9:import android.widget.ImageView;
/adapters\InsertPhotoAdapter.java:10:import android.widget.Toast;
/adapters\InsertPhotoAdapter.java:12:import androidx.annotation.NonNull;
/adapters\InsertPhotoAdapter.java:13:import androidx.recyclerview.widget.RecyclerView;
/adapters\InsertPhotoAdapter.java:15:import com.bumptech.glide.Glide;
/adapters\InsertPhotoAdapter.java:16:import com.bumptech.glide.request.RequestOptions;
/adapters\InsertPhotoAdapter.java:17:import com.huanchengfly.tieba.post.R;
/adapters\InsertPhotoAdapter.java:18:import com.huanchengfly.tieba.post.activities.ReplyActivity;
/adapters\InsertPhotoAdapter.java:19:import com.huanchengfly.tieba.post.components.MyImageEngine;
/adapters\InsertPhotoAdapter.java:20:import com.huanchengfly.tieba.post.components.MyViewHolder;
/adapters\InsertPhotoAdapter.java:21:import com.huanchengfly.tieba.post.components.transformations.RadiusTransformation;
/adapters\InsertPhotoAdapter.java:22:import com.huanchengfly.tieba.post.models.PhotoInfoBean;
/adapters\InsertPhotoAdapter.java:23:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/adapters\InsertPhotoAdapter.java:24:import com.huanchengfly.tieba.post.utils.PermissionUtil;
/adapters\InsertPhotoAdapter.java:25:import com.yanzhenjie.permission.Action;
/adapters\InsertPhotoAdapter.java:26:import com.yanzhenjie.permission.runtime.Permission;
/adapters\InsertPhotoAdapter.java:27:import com.zhihu.matisse.Matisse;
/adapters\InsertPhotoAdapter.java:28:import com.zhihu.matisse.MimeType;
/adapters\InsertPhotoAdapter.java:30:import java.util.ArrayList;
/adapters\InsertPhotoAdapter.java:31:import java.util.Collections;
/adapters\InsertPhotoAdapter.java:32:import java.util.List;
/adapters\InsertPhotoAdapter.java:34:public class InsertPhotoAdapter extends RecyclerView.Adapter<MyViewHolder> {
/adapters\InsertPhotoAdapter.java:35:    public static final int TYPE_IMAGE = 0;
/adapters\InsertPhotoAdapter.java:36:    public static final int TYPE_INSERT = 1;
/adapters\InsertPhotoAdapter.java:37:    private static final String TAG = "InsertPhotoAdapter";
/adapters\InsertPhotoAdapter.java:38:    private Context mContext;
/adapters\InsertPhotoAdapter.java:39:    private List<PhotoInfoBean> fileList;
/adapters\InsertPhotoAdapter.java:41:    public InsertPhotoAdapter(Context context) {
/adapters\InsertPhotoAdapter.java:42:        super();
/adapters\InsertPhotoAdapter.java:43:        this.mContext = context;
/adapters\InsertPhotoAdapter.java:44:        this.fileList = new ArrayList<>();
/adapters\InsertPhotoAdapter.java:45:    }
/adapters\InsertPhotoAdapter.java:47:    public void remove(int position) {
/adapters\InsertPhotoAdapter.java:48:        fileList.remove(position);
/adapters\InsertPhotoAdapter.java:49:        notifyItemRemoved(position);
/adapters\InsertPhotoAdapter.java:50:    }
/adapters\InsertPhotoAdapter.java:52:    public void swap(int oldPosition, int newPosition) {
/adapters\InsertPhotoAdapter.java:53:        Collections.swap(fileList, oldPosition, newPosition);
/adapters\InsertPhotoAdapter.java:54:    }
/adapters\InsertPhotoAdapter.java:56:    public List<PhotoInfoBean> getFileList() {
/adapters\InsertPhotoAdapter.java:57:        return fileList;
/adapters\InsertPhotoAdapter.java:58:    }
/adapters\InsertPhotoAdapter.java:60:    public void setFileList(List<PhotoInfoBean> fileList) {
/adapters\InsertPhotoAdapter.java:61:        this.fileList = fileList;
/adapters\InsertPhotoAdapter.java:62:        notifyDataSetChanged();
/adapters\InsertPhotoAdapter.java:63:    }
/adapters\InsertPhotoAdapter.java:65:    @Override
/adapters\InsertPhotoAdapter.java:66:    public int getItemViewType(int position) {
/adapters\InsertPhotoAdapter.java:67:        if (position >= fileList.size()) return TYPE_INSERT;
/adapters\InsertPhotoAdapter.java:68:        return TYPE_IMAGE;
/adapters\InsertPhotoAdapter.java:69:    }
/adapters\InsertPhotoAdapter.java:71:    @NonNull
/adapters\InsertPhotoAdapter.java:72:    @Override
/adapters\InsertPhotoAdapter.java:73:    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
/adapters\InsertPhotoAdapter.java:74:        if (viewType == TYPE_INSERT) {
/adapters\InsertPhotoAdapter.java:75:            View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_insert_more, parent, false);
/adapters\InsertPhotoAdapter.java:76:            return new MyViewHolder(view);
/adapters\InsertPhotoAdapter.java:77:        }
/adapters\InsertPhotoAdapter.java:78:        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_insert_image, parent, false);
/adapters\InsertPhotoAdapter.java:79:        return new MyViewHolder(view);
/adapters\InsertPhotoAdapter.java:80:    }
/adapters\InsertPhotoAdapter.java:82:    @Override
/adapters\InsertPhotoAdapter.java:83:    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {
/adapters\InsertPhotoAdapter.java:84:        if (holder.getItemViewType() == TYPE_IMAGE) {
/adapters\InsertPhotoAdapter.java:85:            PhotoInfoBean photoInfoBean = fileList.get(position);
/adapters\InsertPhotoAdapter.java:86:            ImageView imageView = holder.getView(R.id.image_preview);
/adapters\InsertPhotoAdapter.java:87:            Glide.with(mContext)
/adapters\InsertPhotoAdapter.java:88:                    .load(photoInfoBean.getFileUri())
/adapters\InsertPhotoAdapter.java:89:                    .apply(RequestOptions.bitmapTransform(new RadiusTransformation(mContext)))
/adapters\InsertPhotoAdapter.java:90:                    .into(imageView);
/adapters\InsertPhotoAdapter.java:91:        } else if (holder.getItemViewType() == TYPE_INSERT) {
/adapters\InsertPhotoAdapter.java:92:            if (fileList.size() < 10) {
/adapters\InsertPhotoAdapter.java:93:                holder.setItemOnClickListener((View view) -> {
/adapters\InsertPhotoAdapter.java:94:                    if (mContext instanceof Activity) {
/adapters\InsertPhotoAdapter.java:95:                        askPermission(data -> Matisse.from((Activity) mContext)
/adapters\InsertPhotoAdapter.java:96:                                .choose(MimeType.ofImage())
/adapters\InsertPhotoAdapter.java:97:                                .countable(true)
/adapters\InsertPhotoAdapter.java:98:                                .maxSelectable(10 - fileList.size())
/adapters\InsertPhotoAdapter.java:99:                                .theme(ThemeUtil.isNightMode(mContext) ? R.style.Matisse_Dracula : R.style.Matisse_Zhihu)
/adapters\InsertPhotoAdapter.java:100:                                .imageEngine(new MyImageEngine())
/adapters\InsertPhotoAdapter.java:101:                                .forResult(ReplyActivity.REQUEST_CODE_CHOOSE));
/adapters\InsertPhotoAdapter.java:102:                    }
/adapters\InsertPhotoAdapter.java:103:                });
/adapters\InsertPhotoAdapter.java:104:            } else {
/adapters\InsertPhotoAdapter.java:105:                Toast.makeText(mContext, R.string.toast_max_selectable, Toast.LENGTH_SHORT).show();
/adapters\InsertPhotoAdapter.java:106:            }
/adapters\InsertPhotoAdapter.java:107:        }
/adapters\InsertPhotoAdapter.java:108:    }
/adapters\InsertPhotoAdapter.java:110:    private void askPermission(Action<List<String>> granted) {
/adapters\InsertPhotoAdapter.java:111:        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {
/adapters\InsertPhotoAdapter.java:112:            PermissionUtil.askPermission(mContext, granted, R.string.toast_no_permission_insert_photo,
/adapters\InsertPhotoAdapter.java:113:                    new PermissionUtil.Permission(Permission.Group.STORAGE, mContext.getString(R.string.tip_permission_storage)));
/adapters\InsertPhotoAdapter.java:114:        } else {
/adapters\InsertPhotoAdapter.java:115:            PermissionUtil.askPermission(mContext, granted, R.string.toast_no_permission_insert_photo,
/adapters\InsertPhotoAdapter.java:116:                    new PermissionUtil.Permission(Permission.READ_EXTERNAL_STORAGE, mContext.getString(R.string.tip_permission_storage)));
/adapters\InsertPhotoAdapter.java:117:        }
/adapters\InsertPhotoAdapter.java:118:    }
/adapters\InsertPhotoAdapter.java:120:    @Override
/adapters\InsertPhotoAdapter.java:121:    public int getItemCount() {
/adapters\InsertPhotoAdapter.java:122:        return fileList.size() + 1;
/adapters\InsertPhotoAdapter.java:123:    }
/adapters\InsertPhotoAdapter.java:125:    public PhotoInfoBean getItem(int position) {
/adapters\InsertPhotoAdapter.java:126:        return fileList.get(position);
/adapters\InsertPhotoAdapter.java:127:    }
/adapters\InsertPhotoAdapter.java:128:}/adapters\LikeForumListAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\LikeForumListAdapter.java:3:import android.content.Context;
/adapters\LikeForumListAdapter.java:4:import android.view.LayoutInflater;
/adapters\LikeForumListAdapter.java:5:import android.view.View;
/adapters\LikeForumListAdapter.java:6:import android.view.ViewGroup;
/adapters\LikeForumListAdapter.java:7:import android.widget.ImageView;
/adapters\LikeForumListAdapter.java:9:import androidx.annotation.LayoutRes;
/adapters\LikeForumListAdapter.java:10:import androidx.annotation.NonNull;
/adapters\LikeForumListAdapter.java:11:import androidx.recyclerview.widget.RecyclerView;
/adapters\LikeForumListAdapter.java:13:import com.bumptech.glide.Glide;
/adapters\LikeForumListAdapter.java:14:import com.huanchengfly.tieba.post.api.models.ForumRecommend;
/adapters\LikeForumListAdapter.java:15:import com.huanchengfly.tieba.post.R;
/adapters\LikeForumListAdapter.java:16:import com.huanchengfly.tieba.post.components.MyLinearLayoutManager;
/adapters\LikeForumListAdapter.java:17:import com.huanchengfly.tieba.post.components.MyViewHolder;
/adapters\LikeForumListAdapter.java:18:import com.huanchengfly.tieba.post.components.dividers.HorizontalSpacesDecoration;
/adapters\LikeForumListAdapter.java:19:import com.huanchengfly.tieba.post.interfaces.OnItemClickListener;
/adapters\LikeForumListAdapter.java:20:import com.huanchengfly.tieba.post.interfaces.OnItemLongClickListener;
/adapters\LikeForumListAdapter.java:21:import com.huanchengfly.tieba.post.models.database.TopForum;
/adapters\LikeForumListAdapter.java:22:import com.huanchengfly.tieba.post.utils.DisplayUtil;
/adapters\LikeForumListAdapter.java:23:import com.huanchengfly.tieba.post.utils.ImageUtil;
/adapters\LikeForumListAdapter.java:24:import com.huanchengfly.tieba.post.utils.SharedPreferencesUtil;
/adapters\LikeForumListAdapter.java:25:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/adapters\LikeForumListAdapter.java:27:import org.litepal.LitePal;
/adapters\LikeForumListAdapter.java:29:import java.lang.ref.WeakReference;
/adapters\LikeForumListAdapter.java:30:import java.util.ArrayList;
/adapters\LikeForumListAdapter.java:31:import java.util.List;
/adapters\LikeForumListAdapter.java:33:public class LikeForumListAdapter extends RecyclerView.Adapter<MyViewHolder> {
/adapters\LikeForumListAdapter.java:34:    public static final int TYPE_ERROR = -1;
/adapters\LikeForumListAdapter.java:35:    public static final int TYPE_TOP_FORUM_TITLE = 1;
/adapters\LikeForumListAdapter.java:36:    public static final int TYPE_TOP_FORUM = 2;
/adapters\LikeForumListAdapter.java:37:    public static final int TYPE_NORMAL_FORUM_TITLE = 3;
/adapters\LikeForumListAdapter.java:38:    public static final int TYPE_NORMAL_FORUM = 4;
/adapters\LikeForumListAdapter.java:39:    private boolean showTop;
/adapters\LikeForumListAdapter.java:40:    private boolean single;
/adapters\LikeForumListAdapter.java:41:    private WeakReference<Context> contextWeakReference;
/adapters\LikeForumListAdapter.java:42:    private List<ForumRecommend.LikeForum> topForums;
/adapters\LikeForumListAdapter.java:43:    private List<ForumRecommend.LikeForum> mLikeForums;
/adapters\LikeForumListAdapter.java:44:    private TopForumsAdapter topForumsAdapter;
/adapters\LikeForumListAdapter.java:45:    private OnItemClickListener<ForumRecommend.LikeForum> onItemClickListener;
/adapters\LikeForumListAdapter.java:46:    private OnItemLongClickListener<ForumRecommend.LikeForum> onItemLongClickListener;
/adapters\LikeForumListAdapter.java:48:    public LikeForumListAdapter(Context context) {
/adapters\LikeForumListAdapter.java:49:        contextWeakReference = new WeakReference<>(context);
/adapters\LikeForumListAdapter.java:50:        single = SharedPreferencesUtil.get(context, SharedPreferencesUtil.SP_SETTINGS).getBoolean("listSingle", false);
/adapters\LikeForumListAdapter.java:51:        mLikeForums = new ArrayList<>();
/adapters\LikeForumListAdapter.java:52:        topForums = new ArrayList<>();
/adapters\LikeForumListAdapter.java:53:        topForumsAdapter = new TopForumsAdapter(context);
/adapters\LikeForumListAdapter.java:54:        onItemClickListener = null;
/adapters\LikeForumListAdapter.java:55:        onItemLongClickListener = null;
/adapters\LikeForumListAdapter.java:56:        showTop = SharedPreferencesUtil.get(context, SharedPreferencesUtil.SP_APP_DATA).getBoolean("show_top_forum", true);
/adapters\LikeForumListAdapter.java:57:    }
/adapters\LikeForumListAdapter.java:59:    public Context getContext() {
/adapters\LikeForumListAdapter.java:60:        return contextWeakReference.get();
/adapters\LikeForumListAdapter.java:61:    }
/adapters\LikeForumListAdapter.java:63:    public void remove(int position) {
/adapters\LikeForumListAdapter.java:64:        if (position >= 0 && position < mLikeForums.size()) {
/adapters\LikeForumListAdapter.java:65:            mLikeForums.remove(position);
/adapters\LikeForumListAdapter.java:66:            notifyDataSetChanged();
/adapters\LikeForumListAdapter.java:67:        }
/adapters\LikeForumListAdapter.java:68:    }
/adapters\LikeForumListAdapter.java:70:    public OnItemClickListener<ForumRecommend.LikeForum> getOnItemClickListener() {
/adapters\LikeForumListAdapter.java:71:        return onItemClickListener;
/adapters\LikeForumListAdapter.java:72:    }
/adapters\LikeForumListAdapter.java:74:    public LikeForumListAdapter setOnItemClickListener(OnItemClickListener<ForumRecommend.LikeForum> onItemClickListener) {
/adapters\LikeForumListAdapter.java:75:        this.onItemClickListener = onItemClickListener;
/adapters\LikeForumListAdapter.java:76:        return this;
/adapters\LikeForumListAdapter.java:77:    }
/adapters\LikeForumListAdapter.java:79:    public OnItemLongClickListener<ForumRecommend.LikeForum> getOnItemLongClickListener() {
/adapters\LikeForumListAdapter.java:80:        return onItemLongClickListener;
/adapters\LikeForumListAdapter.java:81:    }
/adapters\LikeForumListAdapter.java:83:    public LikeForumListAdapter setOnItemLongClickListener(OnItemLongClickListener<ForumRecommend.LikeForum> onItemLongClickListener) {
/adapters\LikeForumListAdapter.java:84:        this.onItemLongClickListener = onItemLongClickListener;
/adapters\LikeForumListAdapter.java:85:        return this;
/adapters\LikeForumListAdapter.java:86:    }
/adapters\LikeForumListAdapter.java:88:    public boolean isHeader(int position) {
/adapters\LikeForumListAdapter.java:89:        return isForumItemTitle(position) || isTopForumItemTitle(position) || isTopForumItem(position);
/adapters\LikeForumListAdapter.java:90:    }
/adapters\LikeForumListAdapter.java:92:    @LayoutRes
/adapters\LikeForumListAdapter.java:93:    public int getItemLayoutId(int type) {
/adapters\LikeForumListAdapter.java:94:        switch (type) {
/adapters\LikeForumListAdapter.java:95:            case TYPE_TOP_FORUM_TITLE:
/adapters\LikeForumListAdapter.java:96:            case TYPE_NORMAL_FORUM_TITLE:
/adapters\LikeForumListAdapter.java:97:                return R.layout.layout_forum_list_header;
/adapters\LikeForumListAdapter.java:98:            case TYPE_TOP_FORUM:
/adapters\LikeForumListAdapter.java:99:                return R.layout.item_top_forums;
/adapters\LikeForumListAdapter.java:100:            case TYPE_NORMAL_FORUM:
/adapters\LikeForumListAdapter.java:101:                return R.layout.item_forum_list;
/adapters\LikeForumListAdapter.java:102:            default:
/adapters\LikeForumListAdapter.java:103:                return R.layout.item_empty;
/adapters\LikeForumListAdapter.java:104:        }
/adapters\LikeForumListAdapter.java:105:    }
/adapters\LikeForumListAdapter.java:107:    public boolean isShowTop() {
/adapters\LikeForumListAdapter.java:108:        return showTop;
/adapters\LikeForumListAdapter.java:109:    }
/adapters\LikeForumListAdapter.java:111:    public void setShowTop(boolean showTop) {
/adapters\LikeForumListAdapter.java:112:        this.showTop = showTop;
/adapters\LikeForumListAdapter.java:113:        SharedPreferencesUtil.get(getContext(), SharedPreferencesUtil.SP_APP_DATA).edit().putBoolean("show_top_forum", showTop).apply();
/adapters\LikeForumListAdapter.java:114:        notifyDataSetChanged();
/adapters\LikeForumListAdapter.java:115:    }
/adapters\LikeForumListAdapter.java:117:    @NonNull
/adapters\LikeForumListAdapter.java:118:    @Override
/adapters\LikeForumListAdapter.java:119:    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
/adapters\LikeForumListAdapter.java:120:        return new MyViewHolder(LayoutInflater.from(getContext()).inflate(getItemLayoutId(viewType), parent, false));
/adapters\LikeForumListAdapter.java:121:    }
/adapters\LikeForumListAdapter.java:123:    public ForumRecommend.LikeForum getItem(int position) {
/adapters\LikeForumListAdapter.java:124:        return mLikeForums.get(position);
/adapters\LikeForumListAdapter.java:125:    }
/adapters\LikeForumListAdapter.java:127:    public int getSpanCount() {
/adapters\LikeForumListAdapter.java:128:        if (SharedPreferencesUtil.get(getContext(), SharedPreferencesUtil.SP_SETTINGS).getBoolean("listSingle", false)) {
/adapters\LikeForumListAdapter.java:129:            return 1;
/adapters\LikeForumListAdapter.java:130:        } else {
/adapters\LikeForumListAdapter.java:131:            return 2;
/adapters\LikeForumListAdapter.java:132:        }
/adapters\LikeForumListAdapter.java:133:    }
/adapters\LikeForumListAdapter.java:135:    @Override
/adapters\LikeForumListAdapter.java:136:    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {
/adapters\LikeForumListAdapter.java:137:        int viewType = getItemViewType(position);
/adapters\LikeForumListAdapter.java:138:        switch (viewType) {
/adapters\LikeForumListAdapter.java:139:            case TYPE_TOP_FORUM_TITLE:
/adapters\LikeForumListAdapter.java:140:                holder.setText(R.id.forum_title_text, R.string.title_top_forum);
/adapters\LikeForumListAdapter.java:141:                ImageView imageView = holder.getView(R.id.forum_title_icon);
/adapters\LikeForumListAdapter.java:142:                imageView.setVisibility(View.VISIBLE);
/adapters\LikeForumListAdapter.java:143:                imageView.setImageResource(isShowTop() ? R.drawable.ic_keyboard_arrow_down : R.drawable.ic_round_keyboard_arrow_right);
/adapters\LikeForumListAdapter.java:144:                holder.setItemOnClickListener(v -> setShowTop(!isShowTop()));
/adapters\LikeForumListAdapter.java:145:                break;
/adapters\LikeForumListAdapter.java:146:            case TYPE_NORMAL_FORUM_TITLE:
/adapters\LikeForumListAdapter.java:147:                holder.setText(R.id.forum_title_text, R.string.forum_list_title);
/adapters\LikeForumListAdapter.java:148:                holder.setVisibility(R.id.forum_title_icon, View.GONE);
/adapters\LikeForumListAdapter.java:149:                break;
/adapters\LikeForumListAdapter.java:150:            case TYPE_TOP_FORUM:
/adapters\LikeForumListAdapter.java:151:                topForumsAdapter.setOnItemClickListener(getOnItemClickListener());
/adapters\LikeForumListAdapter.java:152:                topForumsAdapter.setOnItemLongClickListener(getOnItemLongClickListener());
/adapters\LikeForumListAdapter.java:153:                RecyclerView topForumsView = holder.getView(R.id.forum_top_forums);
/adapters\LikeForumListAdapter.java:154:                topForumsView.setLayoutManager(new MyLinearLayoutManager(getContext(), MyLinearLayoutManager.HORIZONTAL, false));
/adapters\LikeForumListAdapter.java:155:                topForumsView.setAdapter(topForumsAdapter);
/adapters\LikeForumListAdapter.java:156:                topForumsView.setHasFixedSize(false);
/adapters\LikeForumListAdapter.java:157:                for (int i = 0; i < topForumsView.getItemDecorationCount(); i++) {
/adapters\LikeForumListAdapter.java:158:                    topForumsView.removeItemDecorationAt(i);
/adapters\LikeForumListAdapter.java:159:                }
/adapters\LikeForumListAdapter.java:160:                int dp16 = DisplayUtil.dp2px(getContext(), 16);
/adapters\LikeForumListAdapter.java:161:                int dp8 = DisplayUtil.dp2px(getContext(), 8);
/adapters\LikeForumListAdapter.java:162:                topForumsView.addItemDecoration(new HorizontalSpacesDecoration(dp8, dp8, dp16, dp16));
/adapters\LikeForumListAdapter.java:163:                break;
/adapters\LikeForumListAdapter.java:164:            case TYPE_NORMAL_FORUM:
/adapters\LikeForumListAdapter.java:165:                int realPosition = position - getTopForumItemCount() - 1;
/adapters\LikeForumListAdapter.java:166:                int padding = DisplayUtil.dp2px(getContext(), 18);
/adapters\LikeForumListAdapter.java:167:                int dp12 = DisplayUtil.dp2px(getContext(), 12);
/adapters\LikeForumListAdapter.java:168:                if (getSpanCount() == 1) {
/adapters\LikeForumListAdapter.java:169:                    holder.itemView.setPaddingRelative(padding, dp12, padding, dp12);
/adapters\LikeForumListAdapter.java:170:                } else if (realPosition % getSpanCount() == 0) {
/adapters\LikeForumListAdapter.java:171:                    holder.itemView.setPaddingRelative(padding, dp12, (int) (padding / 1.5), dp12);
/adapters\LikeForumListAdapter.java:172:                } else {
/adapters\LikeForumListAdapter.java:173:                    holder.itemView.setPaddingRelative((int) (padding / 1.5), dp12, padding, dp12);
/adapters\LikeForumListAdapter.java:174:                }
/adapters\LikeForumListAdapter.java:175:                if (realPosition >= 0) {
/adapters\LikeForumListAdapter.java:176:                    ForumRecommend.LikeForum likeForum = mLikeForums.get(realPosition);
/adapters\LikeForumListAdapter.java:177:                    holder.setItemOnClickListener(v -> {
/adapters\LikeForumListAdapter.java:178:                        if (getOnItemClickListener() != null) {
/adapters\LikeForumListAdapter.java:179:                            getOnItemClickListener().onClick(holder.itemView, likeForum, position, viewType);
/adapters\LikeForumListAdapter.java:180:                        }
/adapters\LikeForumListAdapter.java:181:                    });
/adapters\LikeForumListAdapter.java:182:                    holder.setItemOnLongClickListener(v -> {
/adapters\LikeForumListAdapter.java:183:                        if (getOnItemLongClickListener() != null) {
/adapters\LikeForumListAdapter.java:184:                            return getOnItemLongClickListener().onLongClick(holder.itemView, likeForum, position, viewType);
/adapters\LikeForumListAdapter.java:185:                        }
/adapters\LikeForumListAdapter.java:186:                        return false;
/adapters\LikeForumListAdapter.java:187:                    });
/adapters\LikeForumListAdapter.java:188:                    ImageView avatarView = holder.getView(R.id.forum_list_item_avatar);
/adapters\LikeForumListAdapter.java:189:                    if (isSingle()) {
/adapters\LikeForumListAdapter.java:190:                        avatarView.setVisibility(View.VISIBLE);
/adapters\LikeForumListAdapter.java:191:                        ImageUtil.load(avatarView, ImageUtil.LOAD_TYPE_AVATAR, likeForum.getAvatar());
/adapters\LikeForumListAdapter.java:192:                    } else {
/adapters\LikeForumListAdapter.java:193:                        avatarView.setVisibility(View.GONE);
/adapters\LikeForumListAdapter.java:194:                        Glide.with(getContext())
/adapters\LikeForumListAdapter.java:195:                                .clear(avatarView);
/adapters\LikeForumListAdapter.java:196:                    }
/adapters\LikeForumListAdapter.java:197:                    ThemeUtil.setChipThemeByLevel(likeForum.getLevelId(),
/adapters\LikeForumListAdapter.java:198:                            holder.getView(R.id.forum_list_item_status),
/adapters\LikeForumListAdapter.java:199:                            holder.getView(R.id.forum_list_item_level),
/adapters\LikeForumListAdapter.java:200:                            holder.getView(R.id.forum_list_item_sign_status));
/adapters\LikeForumListAdapter.java:201:                    holder.setText(R.id.forum_list_item_name, likeForum.getForumName());
/adapters\LikeForumListAdapter.java:202:                    holder.setText(R.id.forum_list_item_level, likeForum.getLevelId());
/adapters\LikeForumListAdapter.java:203:                    holder.setVisibility(R.id.forum_list_item_sign_status, "1".equals(likeForum.isSign()) ? View.VISIBLE : View.GONE);
/adapters\LikeForumListAdapter.java:204:                    holder.getView(R.id.forum_list_item_status).setMinimumWidth(DisplayUtil.dp2px(getContext(), "1".equals(likeForum.isSign()) ? 50 : 32));
/adapters\LikeForumListAdapter.java:205:                }
/adapters\LikeForumListAdapter.java:206:                break;
/adapters\LikeForumListAdapter.java:207:        }
/adapters\LikeForumListAdapter.java:208:    }
/adapters\LikeForumListAdapter.java:210:    private boolean isTopForumItemTitle(int position) {
/adapters\LikeForumListAdapter.java:211:        return position < getTopForumItemCount() && position == 0;
/adapters\LikeForumListAdapter.java:212:    }
/adapters\LikeForumListAdapter.java:214:    private boolean isTopForumItem(int position) {
/adapters\LikeForumListAdapter.java:215:        return position < getTopForumItemCount() && position > 0;
/adapters\LikeForumListAdapter.java:216:    }
/adapters\LikeForumListAdapter.java:218:    private boolean isForumItemTitle(int position) {
/adapters\LikeForumListAdapter.java:219:        return position == getTopForumItemCount();
/adapters\LikeForumListAdapter.java:220:    }
/adapters\LikeForumListAdapter.java:222:    private boolean isForumItem(int position) {
/adapters\LikeForumListAdapter.java:223:        return position > getTopForumItemCount();
/adapters\LikeForumListAdapter.java:224:    }
/adapters\LikeForumListAdapter.java:226:    @Override
/adapters\LikeForumListAdapter.java:227:    public int getItemViewType(int position) {
/adapters\LikeForumListAdapter.java:228:        if (isTopForumItemTitle(position)) {
/adapters\LikeForumListAdapter.java:229:            return TYPE_TOP_FORUM_TITLE;
/adapters\LikeForumListAdapter.java:230:        } else if (isTopForumItem(position)) {
/adapters\LikeForumListAdapter.java:231:            return TYPE_TOP_FORUM;
/adapters\LikeForumListAdapter.java:232:        } else if (isForumItemTitle(position)) {
/adapters\LikeForumListAdapter.java:233:            return TYPE_NORMAL_FORUM_TITLE;
/adapters\LikeForumListAdapter.java:234:        } else if (isForumItem(position)) {
/adapters\LikeForumListAdapter.java:235:            return TYPE_NORMAL_FORUM;
/adapters\LikeForumListAdapter.java:236:        }
/adapters\LikeForumListAdapter.java:237:        return TYPE_ERROR;
/adapters\LikeForumListAdapter.java:238:    }
/adapters\LikeForumListAdapter.java:240:    @Override
/adapters\LikeForumListAdapter.java:241:    public int getItemCount() {
/adapters\LikeForumListAdapter.java:242:        return getTopForumItemCount() + getForumItemCount();
/adapters\LikeForumListAdapter.java:243:    }
/adapters\LikeForumListAdapter.java:245:    public int getTopForumItemCount() {
/adapters\LikeForumListAdapter.java:246:        if (topForums.size() <= 0) {
/adapters\LikeForumListAdapter.java:247:            return 0;
/adapters\LikeForumListAdapter.java:248:        }
/adapters\LikeForumListAdapter.java:249:        if (!isShowTop()) {
/adapters\LikeForumListAdapter.java:250:            return 1;
/adapters\LikeForumListAdapter.java:251:        }
/adapters\LikeForumListAdapter.java:252:        return 2;
/adapters\LikeForumListAdapter.java:253:    }
/adapters\LikeForumListAdapter.java:255:    public int getForumItemCount() {
/adapters\LikeForumListAdapter.java:256:        if (mLikeForums.size() <= 0) {
/adapters\LikeForumListAdapter.java:257:            return 0;
/adapters\LikeForumListAdapter.java:258:        }
/adapters\LikeForumListAdapter.java:259:        return mLikeForums.size() + 1;
/adapters\LikeForumListAdapter.java:260:    }
/adapters\LikeForumListAdapter.java:262:    public void setData(List<ForumRecommend.LikeForum> likeForums) {
/adapters\LikeForumListAdapter.java:263:        if (likeForums == null) likeForums = new ArrayList<>();
/adapters\LikeForumListAdapter.java:264:        List<ForumRecommend.LikeForum> normal = new ArrayList<>();
/adapters\LikeForumListAdapter.java:265:        this.topForums = new ArrayList<>();
/adapters\LikeForumListAdapter.java:266:        List<TopForum> topForums = LitePal.findAll(TopForum.class);
/adapters\LikeForumListAdapter.java:267:        List<String> topIdList = new ArrayList<>();
/adapters\LikeForumListAdapter.java:268:        List<ForumRecommend.LikeForum> topList = new ArrayList<>();
/adapters\LikeForumListAdapter.java:269:        for (TopForum topForum : topForums) {
/adapters\LikeForumListAdapter.java:270:            topIdList.add(topForum.getForumId());
/adapters\LikeForumListAdapter.java:271:        }
/adapters\LikeForumListAdapter.java:272:        for (ForumRecommend.LikeForum likeForum : likeForums) {
/adapters\LikeForumListAdapter.java:273:            if (topIdList.contains(likeForum.getForumId())) {
/adapters\LikeForumListAdapter.java:274:                topList.add(likeForum);
/adapters\LikeForumListAdapter.java:275:                if (SharedPreferencesUtil.get(getContext(), SharedPreferencesUtil.SP_SETTINGS).getBoolean("show_top_forum_in_normal_list", true)) {
/adapters\LikeForumListAdapter.java:276:                    normal.add(likeForum);
/adapters\LikeForumListAdapter.java:277:                }
/adapters\LikeForumListAdapter.java:278:            } else {
/adapters\LikeForumListAdapter.java:279:                normal.add(likeForum);
/adapters\LikeForumListAdapter.java:280:            }
/adapters\LikeForumListAdapter.java:281:        }
/adapters\LikeForumListAdapter.java:282:        this.topForums = topList;
/adapters\LikeForumListAdapter.java:283:        this.mLikeForums = normal;
/adapters\LikeForumListAdapter.java:284:        topForumsAdapter.setData(this.topForums);
/adapters\LikeForumListAdapter.java:285:        notifyDataSetChanged();
/adapters\LikeForumListAdapter.java:286:    }
/adapters\LikeForumListAdapter.java:288:    public boolean isSingle() {
/adapters\LikeForumListAdapter.java:289:        return single;
/adapters\LikeForumListAdapter.java:290:    }
/adapters\LikeForumListAdapter.java:292:    public LikeForumListAdapter setSingle(boolean single) {
/adapters\LikeForumListAdapter.java:293:        this.single = single;
/adapters\LikeForumListAdapter.java:294:        notifyDataSetChanged();
/adapters\LikeForumListAdapter.java:295:        return this;
/adapters\LikeForumListAdapter.java:296:    }
/adapters\LikeForumListAdapter.java:297:}
/adapters\MainSearchAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\MainSearchAdapter.java:3:import android.content.Context;
/adapters\MainSearchAdapter.java:4:import android.text.TextUtils;
/adapters\MainSearchAdapter.java:5:import android.view.ViewGroup;
/adapters\MainSearchAdapter.java:6:import android.widget.Filter;
/adapters\MainSearchAdapter.java:7:import android.widget.Filterable;
/adapters\MainSearchAdapter.java:9:import androidx.annotation.NonNull;
/adapters\MainSearchAdapter.java:10:import androidx.recyclerview.widget.RecyclerView;
/adapters\MainSearchAdapter.java:12:import com.huanchengfly.tieba.post.R;
/adapters\MainSearchAdapter.java:13:import com.huanchengfly.tieba.post.components.MyViewHolder;
/adapters\MainSearchAdapter.java:14:import com.huanchengfly.tieba.post.models.database.SearchHistory;
/adapters\MainSearchAdapter.java:16:import org.litepal.LitePal;
/adapters\MainSearchAdapter.java:18:import java.lang.ref.WeakReference;
/adapters\MainSearchAdapter.java:19:import java.util.ArrayList;
/adapters\MainSearchAdapter.java:20:import java.util.List;
/adapters\MainSearchAdapter.java:22:public class MainSearchAdapter extends RecyclerView.Adapter<MyViewHolder> implements Filterable {
/adapters\MainSearchAdapter.java:23:    public static final String TAG = MainSearchAdapter.class.getSimpleName();
/adapters\MainSearchAdapter.java:24:    private static final int TYPE_HISTORY = 0;
/adapters\MainSearchAdapter.java:25:    private static final int TYPE_ACTION_CLEAR_ALL = 1;
/adapters\MainSearchAdapter.java:26:    private WeakReference<Context> mContextWeakReference;
/adapters\MainSearchAdapter.java:27:    private List<SearchHistory> mHistoryList;
/adapters\MainSearchAdapter.java:28:    private List<SearchHistory> mResult;
/adapters\MainSearchAdapter.java:29:    private String mConstraint;
/adapters\MainSearchAdapter.java:30:    private OnSearchItemClickListener mListener;
/adapters\MainSearchAdapter.java:32:    public MainSearchAdapter(Context context) {
/adapters\MainSearchAdapter.java:33:        mContextWeakReference = new WeakReference<>(context);
/adapters\MainSearchAdapter.java:34:        mResult = new ArrayList<>();
/adapters\MainSearchAdapter.java:35:        refreshData();
/adapters\MainSearchAdapter.java:36:    }
/adapters\MainSearchAdapter.java:38:    public OnSearchItemClickListener getOnSearchItemClickListener() {
/adapters\MainSearchAdapter.java:39:        return mListener;
/adapters\MainSearchAdapter.java:40:    }
/adapters\MainSearchAdapter.java:42:    public void setOnSearchItemClickListener(OnSearchItemClickListener onSearchItemClickListener) {
/adapters\MainSearchAdapter.java:43:        this.mListener = onSearchItemClickListener;
/adapters\MainSearchAdapter.java:44:    }
/adapters\MainSearchAdapter.java:46:    public Context getContext() {
/adapters\MainSearchAdapter.java:47:        return mContextWeakReference.get();
/adapters\MainSearchAdapter.java:48:    }
/adapters\MainSearchAdapter.java:50:    @NonNull
/adapters\MainSearchAdapter.java:51:    @Override
/adapters\MainSearchAdapter.java:52:    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
/adapters\MainSearchAdapter.java:53:        if (viewType == TYPE_ACTION_CLEAR_ALL) {
/adapters\MainSearchAdapter.java:54:            return new MyViewHolder(getContext(), R.layout.item_action);
/adapters\MainSearchAdapter.java:55:        }
/adapters\MainSearchAdapter.java:56:        return new MyViewHolder(getContext(), R.layout.item_search_history);
/adapters\MainSearchAdapter.java:57:    }
/adapters\MainSearchAdapter.java:59:    @Override
/adapters\MainSearchAdapter.java:60:    public int getItemViewType(int position) {
/adapters\MainSearchAdapter.java:61:        if (position == mResult.size()) {
/adapters\MainSearchAdapter.java:62:            return TYPE_ACTION_CLEAR_ALL;
/adapters\MainSearchAdapter.java:63:        }
/adapters\MainSearchAdapter.java:64:        return TYPE_HISTORY;
/adapters\MainSearchAdapter.java:65:    }
/adapters\MainSearchAdapter.java:67:    public void refreshData() {
/adapters\MainSearchAdapter.java:68:        mHistoryList = LitePal.order("timestamp DESC").find(SearchHistory.class);
/adapters\MainSearchAdapter.java:69:        if (!TextUtils.isEmpty(mConstraint)) {
/adapters\MainSearchAdapter.java:70:            getFilter().filter(mConstraint);
/adapters\MainSearchAdapter.java:71:        } else {
/adapters\MainSearchAdapter.java:72:            notifyDataSetChanged();
/adapters\MainSearchAdapter.java:73:        }
/adapters\MainSearchAdapter.java:74:    }
/adapters\MainSearchAdapter.java:76:    @Override
/adapters\MainSearchAdapter.java:77:    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {
/adapters\MainSearchAdapter.java:78:        if (getItemViewType(position) == TYPE_ACTION_CLEAR_ALL) {
/adapters\MainSearchAdapter.java:79:            holder.setItemOnClickListener(v -> LitePal.deleteAllAsync(SearchHistory.class).listen(rowsAffected -> {
/adapters\MainSearchAdapter.java:80:                mHistoryList = new ArrayList<>();
/adapters\MainSearchAdapter.java:81:                mResult = new ArrayList<>();
/adapters\MainSearchAdapter.java:82:                notifyDataSetChanged();
/adapters\MainSearchAdapter.java:83:            }));
/adapters\MainSearchAdapter.java:84:        } else {
/adapters\MainSearchAdapter.java:85:            SearchHistory item = mResult.get(position);
/adapters\MainSearchAdapter.java:86:            holder.setText(R.id.history_item_title, item.getContent());
/adapters\MainSearchAdapter.java:87:            holder.setItemOnClickListener(v -> {
/adapters\MainSearchAdapter.java:88:                if (getOnSearchItemClickListener() != null) {
/adapters\MainSearchAdapter.java:89:                    getOnSearchItemClickListener().onSearchItemClick(position, item.getContent());
/adapters\MainSearchAdapter.java:90:                }
/adapters\MainSearchAdapter.java:91:            });
/adapters\MainSearchAdapter.java:92:        }
/adapters\MainSearchAdapter.java:93:    }
/adapters\MainSearchAdapter.java:95:    @Override
/adapters\MainSearchAdapter.java:96:    public int getItemCount() {
/adapters\MainSearchAdapter.java:97:        if (mResult.size() == 0) {
/adapters\MainSearchAdapter.java:98:            return 0;
/adapters\MainSearchAdapter.java:99:        }
/adapters\MainSearchAdapter.java:100:        if (!TextUtils.isEmpty(mConstraint)) {
/adapters\MainSearchAdapter.java:101:            return mResult.size();
/adapters\MainSearchAdapter.java:102:        }
/adapters\MainSearchAdapter.java:103:        return mResult.size() + 1;
/adapters\MainSearchAdapter.java:104:    }
/adapters\MainSearchAdapter.java:106:    public void setData(List<SearchHistory> list) {
/adapters\MainSearchAdapter.java:107:        mResult = list;
/adapters\MainSearchAdapter.java:108:        notifyDataSetChanged();
/adapters\MainSearchAdapter.java:109:    }
/adapters\MainSearchAdapter.java:111:    @Override
/adapters\MainSearchAdapter.java:112:    public Filter getFilter() {
/adapters\MainSearchAdapter.java:113:        return new Filter() {
/adapters\MainSearchAdapter.java:114:            @Override
/adapters\MainSearchAdapter.java:115:            protected FilterResults performFiltering(CharSequence constraint) {
/adapters\MainSearchAdapter.java:116:                FilterResults filterResults = new FilterResults();
/adapters\MainSearchAdapter.java:117:                mConstraint = constraint.toString().toLowerCase();
/adapters\MainSearchAdapter.java:119:                if (!TextUtils.isEmpty(mConstraint)) {
/adapters\MainSearchAdapter.java:120:                    List<SearchHistory> history = new ArrayList<>();
/adapters\MainSearchAdapter.java:121:                    List<SearchHistory> results = new ArrayList<>();
/adapters\MainSearchAdapter.java:123:                    if (!mHistoryList.isEmpty()) {
/adapters\MainSearchAdapter.java:124:                        history.addAll(mHistoryList);
/adapters\MainSearchAdapter.java:125:                    }
/adapters\MainSearchAdapter.java:127:                    for (SearchHistory item : history) {
/adapters\MainSearchAdapter.java:128:                        String string = item.getContent().toLowerCase();
/adapters\MainSearchAdapter.java:129:                        if (string.contains(mConstraint)) {
/adapters\MainSearchAdapter.java:130:                            results.add(item);
/adapters\MainSearchAdapter.java:131:                        }
/adapters\MainSearchAdapter.java:132:                    }
/adapters\MainSearchAdapter.java:133:                    if (results.size() > 0) {
/adapters\MainSearchAdapter.java:134:                        filterResults.values = results;
/adapters\MainSearchAdapter.java:135:                        filterResults.count = results.size();
/adapters\MainSearchAdapter.java:136:                    }
/adapters\MainSearchAdapter.java:137:                } else {
/adapters\MainSearchAdapter.java:138:                    if (!mHistoryList.isEmpty()) {
/adapters\MainSearchAdapter.java:139:                        filterResults.values = mHistoryList;
/adapters\MainSearchAdapter.java:140:                        filterResults.count = mHistoryList.size();
/adapters\MainSearchAdapter.java:141:                    }
/adapters\MainSearchAdapter.java:142:                }
/adapters\MainSearchAdapter.java:143:                return filterResults;
/adapters\MainSearchAdapter.java:144:            }
/adapters\MainSearchAdapter.java:146:            @Override
/adapters\MainSearchAdapter.java:147:            protected void publishResults(CharSequence constraint, FilterResults results) {
/adapters\MainSearchAdapter.java:148:                if (results.count > 0) {
/adapters\MainSearchAdapter.java:149:                    List<SearchHistory> dataSet = new ArrayList<>();
/adapters\MainSearchAdapter.java:150:                    List<?> resultSet = (List<?>) results.values;
/adapters\MainSearchAdapter.java:151:                    int size = results.count < 8 ? results.count : 8;
/adapters\MainSearchAdapter.java:153:                    for (int i = 0; i < size; i++) {
/adapters\MainSearchAdapter.java:154:                        if (resultSet.get(i) instanceof SearchHistory) {
/adapters\MainSearchAdapter.java:155:                            dataSet.add((SearchHistory) resultSet.get(i));
/adapters\MainSearchAdapter.java:156:                        }
/adapters\MainSearchAdapter.java:157:                    }
/adapters\MainSearchAdapter.java:159:                    setData(dataSet);
/adapters\MainSearchAdapter.java:160:                }
/adapters\MainSearchAdapter.java:161:            }
/adapters\MainSearchAdapter.java:162:        };
/adapters\MainSearchAdapter.java:163:    }
/adapters\MainSearchAdapter.java:165:    public interface OnSearchItemClickListener {
/adapters\MainSearchAdapter.java:166:        void onSearchItemClick(int position, CharSequence content);
/adapters\MainSearchAdapter.java:167:    }
/adapters\MainSearchAdapter.java:168:}
/adapters\MessageListAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\MessageListAdapter.java:3:import android.app.Activity;
/adapters\MessageListAdapter.java:4:import android.content.Context;
/adapters\MessageListAdapter.java:5:import android.text.format.DateUtils;
/adapters\MessageListAdapter.java:6:import android.widget.TextView;
/adapters\MessageListAdapter.java:7:import androidx.annotation.NonNull;
/adapters\MessageListAdapter.java:8:import com.bumptech.glide.request.RequestOptions;
/adapters\MessageListAdapter.java:9:import com.huanchengfly.tieba.post.api.models.MessageListBean;
/adapters\MessageListAdapter.java:10:import com.huanchengfly.tieba.post.R;
/adapters\MessageListAdapter.java:11:import com.huanchengfly.tieba.post.fragments.BaseFragment;
/adapters\MessageListAdapter.java:12:import com.huanchengfly.tieba.post.fragments.MessageFragment;
/adapters\MessageListAdapter.java:13:import com.huanchengfly.tieba.post.utils.EmotionUtil;
/adapters\MessageListAdapter.java:14:import com.huanchengfly.tieba.post.utils.ImageUtil;
/adapters\MessageListAdapter.java:15:import com.huanchengfly.tieba.post.utils.NavigationHelper;
/adapters\MessageListAdapter.java:16:import com.huanchengfly.tieba.post.utils.StringUtil;
/adapters\MessageListAdapter.java:17:import com.othershe.baseadapter.ViewHolder;
/adapters\MessageListAdapter.java:18:import com.othershe.baseadapter.base.CommonBaseAdapter;
/adapters\MessageListAdapter.java:20:import java.util.HashMap;
/adapters\MessageListAdapter.java:22:public class MessageListAdapter extends CommonBaseAdapter<MessageListBean.MessageInfoBean> {
/adapters\MessageListAdapter.java:23:    private int type;
/adapters\MessageListAdapter.java:25:    private NavigationHelper navigationHelper;
/adapters\MessageListAdapter.java:27:    private RequestOptions avatarRequestOptions;
/adapters\MessageListAdapter.java:29:    public MessageListAdapter(@NonNull Context context, int type) {
/adapters\MessageListAdapter.java:30:        super(context, null, true);
/adapters\MessageListAdapter.java:31:        this.type = type;
/adapters\MessageListAdapter.java:32:        this.navigationHelper = NavigationHelper.newInstance(context);
/adapters\MessageListAdapter.java:33:        this.avatarRequestOptions = new RequestOptions()
/adapters\MessageListAdapter.java:34:                .placeholder(R.drawable.bg_placeholder_circle)
/adapters\MessageListAdapter.java:35:                .circleCrop()
/adapters\MessageListAdapter.java:36:                .skipMemoryCache(true);
/adapters\MessageListAdapter.java:37:    }
/adapters\MessageListAdapter.java:39:    public MessageListAdapter(@NonNull BaseFragment fragment, int type) {
/adapters\MessageListAdapter.java:40:        this(fragment.getAttachContext(), type);
/adapters\MessageListAdapter.java:41:    }
/adapters\MessageListAdapter.java:43:    public void setData(MessageListBean messageListBean) {
/adapters\MessageListAdapter.java:44:        if (type == MessageFragment.TYPE_REPLY_ME) {
/adapters\MessageListAdapter.java:45:            setNewData(messageListBean.getReplyList());
/adapters\MessageListAdapter.java:46:        } else if (type == MessageFragment.TYPE_AT_ME) {
/adapters\MessageListAdapter.java:47:            setNewData(messageListBean.getAtList());
/adapters\MessageListAdapter.java:48:        }
/adapters\MessageListAdapter.java:49:    }
/adapters\MessageListAdapter.java:51:    public void addData(MessageListBean messageListBean) {
/adapters\MessageListAdapter.java:52:        if (type == MessageFragment.TYPE_REPLY_ME) {
/adapters\MessageListAdapter.java:53:            setLoadMoreData(messageListBean.getReplyList());
/adapters\MessageListAdapter.java:54:        } else if (type == MessageFragment.TYPE_AT_ME) {
/adapters\MessageListAdapter.java:55:            setLoadMoreData(messageListBean.getAtList());
/adapters\MessageListAdapter.java:56:        }
/adapters\MessageListAdapter.java:57:    }
/adapters\MessageListAdapter.java:59:    @Override
/adapters\MessageListAdapter.java:60:    protected int getItemLayoutId() {
/adapters\MessageListAdapter.java:61:        return R.layout.item_message_list;
/adapters\MessageListAdapter.java:62:    }
/adapters\MessageListAdapter.java:64:    @Override
/adapters\MessageListAdapter.java:65:    protected void convert(ViewHolder viewHolder, MessageListBean.MessageInfoBean messageInfoBean, int i) {
/adapters\MessageListAdapter.java:66:        ImageUtil.load(viewHolder.getView(R.id.message_list_item_user_avatar), ImageUtil.LOAD_TYPE_AVATAR, messageInfoBean.getReplyer().getPortrait());
/adapters\MessageListAdapter.java:67:        viewHolder.setOnClickListener(R.id.message_list_item_user_avatar, view -> NavigationHelper.toUserSpaceWithAnim(mContext, messageInfoBean.getReplyer().getId(), StringUtil.getAvatarUrl(messageInfoBean.getReplyer().getPortrait()), view));
/adapters\MessageListAdapter.java:68:        viewHolder.setOnClickListener(R.id.message_list_item_user_name, view -> NavigationHelper.toUserSpaceWithAnim(mContext, messageInfoBean.getReplyer().getId(), StringUtil.getAvatarUrl(messageInfoBean.getReplyer().getPortrait()), view));
/adapters\MessageListAdapter.java:69:        viewHolder.setOnClickListener(R.id.message_list_item_main, view -> {
/adapters\MessageListAdapter.java:70:            HashMap<String, String> hashMap = new HashMap<>();
/adapters\MessageListAdapter.java:71:            hashMap.put("tid", messageInfoBean.getThreadId());
/adapters\MessageListAdapter.java:72:            hashMap.put("spid", messageInfoBean.getPostId());
/adapters\MessageListAdapter.java:73:            if (messageInfoBean.isFloor().equals("1")) {
/adapters\MessageListAdapter.java:74:                navigationHelper.navigationByData(NavigationHelper.ACTION_FLOOR, hashMap);
/adapters\MessageListAdapter.java:75:            } else {
/adapters\MessageListAdapter.java:76:                hashMap.put("pid", messageInfoBean.getPostId());
/adapters\MessageListAdapter.java:77:                navigationHelper.navigationByData(NavigationHelper.ACTION_THREAD, hashMap);
/adapters\MessageListAdapter.java:78:            }
/adapters\MessageListAdapter.java:79:        });
/adapters\MessageListAdapter.java:80:        viewHolder.setText(R.id.message_list_item_user_name, StringUtil.getUsernameString(mContext, messageInfoBean.getReplyer().getName(), messageInfoBean.getReplyer().getNameShow()));
/adapters\MessageListAdapter.java:81:        viewHolder.setText(R.id.message_list_item_user_time, String.valueOf(DateUtils.getRelativeTimeSpanString(Long.valueOf(messageInfoBean.getTime()) * 1000L)));
/adapters\MessageListAdapter.java:82:        TextView contentTextView = viewHolder.getView(R.id.message_list_item_content);
/adapters\MessageListAdapter.java:83:        contentTextView.setText(StringUtil.getEmotionContent(EmotionUtil.EMOTION_ALL_TYPE, contentTextView, messageInfoBean.getContent()));
/adapters\MessageListAdapter.java:84:        TextView textView = viewHolder.getView(R.id.message_list_item_quote);
/adapters\MessageListAdapter.java:85:        if (type == MessageFragment.TYPE_REPLY_ME) {
/adapters\MessageListAdapter.java:86:            if (messageInfoBean.isFloor().equals("1"))
/adapters\MessageListAdapter.java:87:                textView.setText(StringUtil.getEmotionContent(EmotionUtil.EMOTION_ALL_TYPE, textView, messageInfoBean.getQuoteContent()));
/adapters\MessageListAdapter.java:88:            else
/adapters\MessageListAdapter.java:89:                textView.setText(StringUtil.getEmotionContent(EmotionUtil.EMOTION_ALL_TYPE, textView, mContext.getString(R.string.text_message_list_item_reply_my_thread, messageInfoBean.getTitle())));
/adapters\MessageListAdapter.java:90:        } else {
/adapters\MessageListAdapter.java:91:            textView.setText(StringUtil.getEmotionContent(EmotionUtil.EMOTION_ALL_TYPE, textView, mContext.getString(R.string.text_message_list_item_reply_my_thread, messageInfoBean.getTitle())));
/adapters\MessageListAdapter.java:92:        }
/adapters\MessageListAdapter.java:93:        viewHolder.setText(R.id.message_list_item_source, mContext.getString(R.string.text_message_list_item_source, messageInfoBean.getForumName()));
/adapters\MessageListAdapter.java:94:    }
/adapters\MessageListAdapter.java:96:    private boolean canLoadGlide() {
/adapters\MessageListAdapter.java:97:        if (mContext instanceof Activity) {
/adapters\MessageListAdapter.java:98:            return !((Activity) mContext).isDestroyed();
/adapters\MessageListAdapter.java:99:        }
/adapters\MessageListAdapter.java:100:        return false;
/adapters\MessageListAdapter.java:101:    }
/adapters\MessageListAdapter.java:102:}
/adapters\PersonalizedFeedAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\PersonalizedFeedAdapter.java:3:import android.content.Context;
/adapters\PersonalizedFeedAdapter.java:4:import android.content.Intent;
/adapters\PersonalizedFeedAdapter.java:5:import android.text.TextUtils;
/adapters\PersonalizedFeedAdapter.java:6:import android.text.format.DateUtils;
/adapters\PersonalizedFeedAdapter.java:7:import android.view.View;
/adapters\PersonalizedFeedAdapter.java:8:import android.view.ViewGroup;
/adapters\PersonalizedFeedAdapter.java:9:import android.widget.ImageView;
/adapters\PersonalizedFeedAdapter.java:10:import android.widget.RelativeLayout;
/adapters\PersonalizedFeedAdapter.java:11:import android.widget.TextView;
/adapters\PersonalizedFeedAdapter.java:12:import androidx.cardview.widget.CardView;
/adapters\PersonalizedFeedAdapter.java:13:import androidx.gridlayout.widget.GridLayout;
/adapters\PersonalizedFeedAdapter.java:14:import com.bumptech.glide.Glide;
/adapters\PersonalizedFeedAdapter.java:15:import com.huanchengfly.tieba.post.api.models.ForumPageBean;
/adapters\PersonalizedFeedAdapter.java:16:import com.huanchengfly.tieba.post.api.models.PersonalizedBean;
/adapters\PersonalizedFeedAdapter.java:17:import com.huanchengfly.tieba.post.activities.HotMessageListActivity;
/adapters\PersonalizedFeedAdapter.java:18:import com.huanchengfly.tieba.post.BaseApplication;
/adapters\PersonalizedFeedAdapter.java:19:import com.huanchengfly.tieba.post.R;
/adapters\PersonalizedFeedAdapter.java:20:import com.huanchengfly.tieba.post.components.dialogs.DislikeDialog;
/adapters\PersonalizedFeedAdapter.java:21:import com.huanchengfly.tieba.post.models.PhotoViewBean;
/adapters\PersonalizedFeedAdapter.java:22:import com.huanchengfly.tieba.post.utils.*;
/adapters\PersonalizedFeedAdapter.java:23:import com.huanchengfly.tieba.post.widgets.MarkedImageView;
/adapters\PersonalizedFeedAdapter.java:24:import com.huanchengfly.tieba.post.widgets.VideoPlayerStandard;
/adapters\PersonalizedFeedAdapter.java:25:import com.othershe.baseadapter.ViewHolder;
/adapters\PersonalizedFeedAdapter.java:26:import com.othershe.baseadapter.base.MultiBaseAdapter;
/adapters\PersonalizedFeedAdapter.java:28:import java.util.ArrayList;
/adapters\PersonalizedFeedAdapter.java:29:import java.util.HashMap;
/adapters\PersonalizedFeedAdapter.java:30:import java.util.List;
/adapters\PersonalizedFeedAdapter.java:31:import java.util.Map;
/adapters\PersonalizedFeedAdapter.java:33:public class PersonalizedFeedAdapter extends MultiBaseAdapter<PersonalizedBean.ThreadBean> {
/adapters\PersonalizedFeedAdapter.java:34:    public static final int TYPE_THREAD_COMMON = 11;
/adapters\PersonalizedFeedAdapter.java:35:    public static final int TYPE_THREAD_SINGLE_PIC = 12;
/adapters\PersonalizedFeedAdapter.java:36:    public static final int TYPE_THREAD_MULTI_PIC = 13;
/adapters\PersonalizedFeedAdapter.java:37:    public static final int TYPE_THREAD_VIDEO = 14;
/adapters\PersonalizedFeedAdapter.java:39:    private NavigationHelper navigationHelper;
/adapters\PersonalizedFeedAdapter.java:40:    private PersonalizedBean personalizedBean;
/adapters\PersonalizedFeedAdapter.java:42:    private int refreshPosition;
/adapters\PersonalizedFeedAdapter.java:43:    private OnRefreshListener onRefreshListener;
/adapters\PersonalizedFeedAdapter.java:45:    public PersonalizedFeedAdapter(Context context) {
/adapters\PersonalizedFeedAdapter.java:46:        super(context, null, true);
/adapters\PersonalizedFeedAdapter.java:47:        refreshPosition = -1;
/adapters\PersonalizedFeedAdapter.java:48:        setLoadingView(R.layout.layout_footer_loading);
/adapters\PersonalizedFeedAdapter.java:49:        setLoadEndView(R.layout.layout_footer_loadend);
/adapters\PersonalizedFeedAdapter.java:50:        setLoadFailedView(R.layout.layout_footer_load_failed);
/adapters\PersonalizedFeedAdapter.java:51:        View header = Util.inflate(context, R.layout.header_feed);
/adapters\PersonalizedFeedAdapter.java:52:        View hotMessage = header.findViewById(R.id.hot_message);
/adapters\PersonalizedFeedAdapter.java:53:        hotMessage.setOnClickListener(v -> context.startActivity(new Intent(context, HotMessageListActivity.class)));
/adapters\PersonalizedFeedAdapter.java:54:        addHeaderView(header);
/adapters\PersonalizedFeedAdapter.java:55:        navigationHelper = NavigationHelper.newInstance(context);
/adapters\PersonalizedFeedAdapter.java:56:    }
/adapters\PersonalizedFeedAdapter.java:58:    public OnRefreshListener getOnRefreshListener() {
/adapters\PersonalizedFeedAdapter.java:59:        return onRefreshListener;
/adapters\PersonalizedFeedAdapter.java:60:    }
/adapters\PersonalizedFeedAdapter.java:62:    public PersonalizedFeedAdapter setOnRefreshListener(OnRefreshListener onRefreshListener) {
/adapters\PersonalizedFeedAdapter.java:63:        this.onRefreshListener = onRefreshListener;
/adapters\PersonalizedFeedAdapter.java:64:        return this;
/adapters\PersonalizedFeedAdapter.java:65:    }
/adapters\PersonalizedFeedAdapter.java:67:    public int getRefreshPosition() {
/adapters\PersonalizedFeedAdapter.java:68:        return refreshPosition;
/adapters\PersonalizedFeedAdapter.java:69:    }
/adapters\PersonalizedFeedAdapter.java:71:    public void setRefreshPosition(int refreshPosition) {
/adapters\PersonalizedFeedAdapter.java:72:        this.refreshPosition = refreshPosition;
/adapters\PersonalizedFeedAdapter.java:73:    }
/adapters\PersonalizedFeedAdapter.java:75:    private int getMaxWidth() {
/adapters\PersonalizedFeedAdapter.java:76:        return BaseApplication.ScreenInfo.EXACT_SCREEN_WIDTH - DisplayUtil.dp2px(mContext, 40);
/adapters\PersonalizedFeedAdapter.java:77:    }
/adapters\PersonalizedFeedAdapter.java:79:    private int getGridHeight() {
/adapters\PersonalizedFeedAdapter.java:80:        return (BaseApplication.ScreenInfo.EXACT_SCREEN_WIDTH - DisplayUtil.dp2px(mContext, 70)) / 3;
/adapters\PersonalizedFeedAdapter.java:81:    }
/adapters\PersonalizedFeedAdapter.java:83:    private RelativeLayout.LayoutParams getLayoutParams(RelativeLayout.LayoutParams layoutParams) {
/adapters\PersonalizedFeedAdapter.java:84:        layoutParams.width = getMaxWidth();
/adapters\PersonalizedFeedAdapter.java:85:        layoutParams.height = (int) (getMaxWidth() * 0.5625);
/adapters\PersonalizedFeedAdapter.java:86:        return layoutParams;
/adapters\PersonalizedFeedAdapter.java:87:    }
/adapters\PersonalizedFeedAdapter.java:89:    private ViewGroup.LayoutParams getGridLayoutParams(ViewGroup.LayoutParams layoutParams) {
/adapters\PersonalizedFeedAdapter.java:90:        layoutParams.height = getGridHeight();
/adapters\PersonalizedFeedAdapter.java:91:        return layoutParams;
/adapters\PersonalizedFeedAdapter.java:92:    }
/adapters\PersonalizedFeedAdapter.java:94:    private void setListenerForImageView(List<ForumPageBean.MediaInfoBean> mediaInfoBeans, ImageView imageView, int position) {
/adapters\PersonalizedFeedAdapter.java:95:        List<PhotoViewBean> photoViewBeans = new ArrayList<>();
/adapters\PersonalizedFeedAdapter.java:96:        for (ForumPageBean.MediaInfoBean media : mediaInfoBeans) {
/adapters\PersonalizedFeedAdapter.java:97:            photoViewBeans.add(new PhotoViewBean(ImageUtil.getNonNullString(media.getSrcPic(), media.getOriginPic()),
/adapters\PersonalizedFeedAdapter.java:98:                    ImageUtil.getNonNullString(media.getOriginPic(), media.getSrcPic()),
/adapters\PersonalizedFeedAdapter.java:99:                    "1".equals(media.getShowOriginalBtn())));
/adapters\PersonalizedFeedAdapter.java:100:        }
/adapters\PersonalizedFeedAdapter.java:101:        ImageUtil.initImageView(imageView, photoViewBeans, position);
/adapters\PersonalizedFeedAdapter.java:102:    }
/adapters\PersonalizedFeedAdapter.java:104:    public void setData(PersonalizedBean personalizedBean) {
/adapters\PersonalizedFeedAdapter.java:105:        this.personalizedBean = personalizedBean;
/adapters\PersonalizedFeedAdapter.java:106:    }
/adapters\PersonalizedFeedAdapter.java:108:    private void load(ForumPageBean.MediaInfoBean mediaInfoBean, ImageView imageView) {
/adapters\PersonalizedFeedAdapter.java:109:        imageView.setVisibility(View.VISIBLE);
/adapters\PersonalizedFeedAdapter.java:110:        String url = ImageUtil.getUrl(mContext, true, mediaInfoBean.getOriginPic(), mediaInfoBean.getSrcPic());
/adapters\PersonalizedFeedAdapter.java:111:        if ("3".equals(mediaInfoBean.getType())) {
/adapters\PersonalizedFeedAdapter.java:112:            ImageUtil.load(imageView, ImageUtil.LOAD_TYPE_NO_RADIUS, url);
/adapters\PersonalizedFeedAdapter.java:113:        }
/adapters\PersonalizedFeedAdapter.java:114:    }
/adapters\PersonalizedFeedAdapter.java:116:    @Override
/adapters\PersonalizedFeedAdapter.java:117:    protected void convert(ViewHolder viewHolder, PersonalizedBean.ThreadBean threadBean, int position, int viewType) {
/adapters\PersonalizedFeedAdapter.java:118:        View refreshTip = viewHolder.getView(R.id.feed_refresh_tip);
/adapters\PersonalizedFeedAdapter.java:119:        if (position == getRefreshPosition()) {
/adapters\PersonalizedFeedAdapter.java:120:            refreshTip.setVisibility(View.VISIBLE);
/adapters\PersonalizedFeedAdapter.java:121:            refreshTip.setOnClickListener(v -> {
/adapters\PersonalizedFeedAdapter.java:122:                if (getOnRefreshListener() != null) {
/adapters\PersonalizedFeedAdapter.java:123:                    getOnRefreshListener().onRefresh();
/adapters\PersonalizedFeedAdapter.java:124:                }
/adapters\PersonalizedFeedAdapter.java:125:            });
/adapters\PersonalizedFeedAdapter.java:126:        } else {
/adapters\PersonalizedFeedAdapter.java:127:            refreshTip.setVisibility(View.GONE);
/adapters\PersonalizedFeedAdapter.java:128:        }
/adapters\PersonalizedFeedAdapter.java:129:        viewHolder.setText(R.id.forum_item_comment_count_text, threadBean.getReplyNum());
/adapters\PersonalizedFeedAdapter.java:130:        viewHolder.setVisibility(R.id.dislike, View.VISIBLE);
/adapters\PersonalizedFeedAdapter.java:131:        if (threadBean.getThreadPersonalizedBean() == null) {
/adapters\PersonalizedFeedAdapter.java:132:            viewHolder.setVisibility(R.id.dislike, View.INVISIBLE);
/adapters\PersonalizedFeedAdapter.java:133:        } else {
/adapters\PersonalizedFeedAdapter.java:134:            viewHolder.setVisibility(R.id.dislike, View.VISIBLE);
/adapters\PersonalizedFeedAdapter.java:135:        }
/adapters\PersonalizedFeedAdapter.java:136:        viewHolder.setOnClickListener(R.id.dislike, v -> {
/adapters\PersonalizedFeedAdapter.java:137:            if (threadBean.getThreadPersonalizedBean() == null || threadBean.getThreadPersonalizedBean().getDislikeResource() == null) {
/adapters\PersonalizedFeedAdapter.java:138:                if (position <= refreshPosition && refreshPosition > -1) {
/adapters\PersonalizedFeedAdapter.java:139:                    refreshPosition -= 1;
/adapters\PersonalizedFeedAdapter.java:140:                    if (position == (refreshPosition + 1)) {
/adapters\PersonalizedFeedAdapter.java:141:                        notifyItemChanged(position);
/adapters\PersonalizedFeedAdapter.java:142:                    }
/adapters\PersonalizedFeedAdapter.java:143:                    if (refreshPosition > -1) {
/adapters\PersonalizedFeedAdapter.java:144:                        notifyItemChanged(refreshPosition);
/adapters\PersonalizedFeedAdapter.java:145:                    }
/adapters\PersonalizedFeedAdapter.java:146:                }
/adapters\PersonalizedFeedAdapter.java:147:                remove(position);
/adapters\PersonalizedFeedAdapter.java:148:            } else {
/adapters\PersonalizedFeedAdapter.java:149:                DislikeDialog dislikeDialog = new DislikeDialog(mContext, threadBean.getThreadPersonalizedBean(), threadBean.getForumId());
/adapters\PersonalizedFeedAdapter.java:150:                dislikeDialog.setOnSubmitListener(() -> {
/adapters\PersonalizedFeedAdapter.java:151:                    if (position <= refreshPosition && refreshPosition > -1) {
/adapters\PersonalizedFeedAdapter.java:152:                        refreshPosition -= 1;
/adapters\PersonalizedFeedAdapter.java:153:                        if (position == (refreshPosition + 1)) {
/adapters\PersonalizedFeedAdapter.java:154:                            notifyItemChanged(position);
/adapters\PersonalizedFeedAdapter.java:155:                        }
/adapters\PersonalizedFeedAdapter.java:156:                        if (refreshPosition > -1) {
/adapters\PersonalizedFeedAdapter.java:157:                            notifyItemChanged(refreshPosition);
/adapters\PersonalizedFeedAdapter.java:158:                        }
/adapters\PersonalizedFeedAdapter.java:159:                    }
/adapters\PersonalizedFeedAdapter.java:160:                    remove(position);
/adapters\PersonalizedFeedAdapter.java:161:                });
/adapters\PersonalizedFeedAdapter.java:162:                dislikeDialog.show();
/adapters\PersonalizedFeedAdapter.java:163:            }
/adapters\PersonalizedFeedAdapter.java:164:        });
/adapters\PersonalizedFeedAdapter.java:165:        if ("1".equals(threadBean.isGood())) {
/adapters\PersonalizedFeedAdapter.java:166:            viewHolder.setVisibility(R.id.forum_item_good_tip, View.VISIBLE);
/adapters\PersonalizedFeedAdapter.java:167:        } else {
/adapters\PersonalizedFeedAdapter.java:168:            viewHolder.setVisibility(R.id.forum_item_good_tip, View.GONE);
/adapters\PersonalizedFeedAdapter.java:169:        }
/adapters\PersonalizedFeedAdapter.java:170:        viewHolder.setOnClickListener(R.id.forum_item, view -> {
/adapters\PersonalizedFeedAdapter.java:171:            Map<String, String> map = new HashMap<>();
/adapters\PersonalizedFeedAdapter.java:172:            map.put("tid", threadBean.getTid());
/adapters\PersonalizedFeedAdapter.java:173:            navigationHelper.navigationByData(NavigationHelper.ACTION_THREAD, map);
/adapters\PersonalizedFeedAdapter.java:174:        });
/adapters\PersonalizedFeedAdapter.java:175:        if ("1".equals(threadBean.isNoTitle())) {
/adapters\PersonalizedFeedAdapter.java:176:            viewHolder.setVisibility(R.id.forum_item_title_holder, View.GONE);
/adapters\PersonalizedFeedAdapter.java:177:        } else {
/adapters\PersonalizedFeedAdapter.java:178:            viewHolder.setVisibility(R.id.forum_item_title_holder, View.VISIBLE);
/adapters\PersonalizedFeedAdapter.java:179:            viewHolder.setText(R.id.forum_item_title, threadBean.getTitle());
/adapters\PersonalizedFeedAdapter.java:180:        }
/adapters\PersonalizedFeedAdapter.java:181:        TextView textView = viewHolder.getView(R.id.forum_item_content_text);
/adapters\PersonalizedFeedAdapter.java:182:        if (threadBean.getAbstractBeans().size() > 0 && "0".equals(threadBean.getAbstractBeans().get(0).getType())) {
/adapters\PersonalizedFeedAdapter.java:183:            if (TextUtils.isEmpty(threadBean.getAbstractBeans().get(0).getText())) {
/adapters\PersonalizedFeedAdapter.java:184:                textView.setText(null);
/adapters\PersonalizedFeedAdapter.java:185:                textView.setVisibility(View.GONE);
/adapters\PersonalizedFeedAdapter.java:186:            } else {
/adapters\PersonalizedFeedAdapter.java:187:                textView.setVisibility(View.VISIBLE);
/adapters\PersonalizedFeedAdapter.java:188:                textView.setText(threadBean.getAbstractBeans().get(0).getText());
/adapters\PersonalizedFeedAdapter.java:189:            }
/adapters\PersonalizedFeedAdapter.java:190:        } else {
/adapters\PersonalizedFeedAdapter.java:191:            textView.setText(null);
/adapters\PersonalizedFeedAdapter.java:192:            textView.setVisibility(View.GONE);
/adapters\PersonalizedFeedAdapter.java:193:        }
/adapters\PersonalizedFeedAdapter.java:194:        PersonalizedBean.AuthorBean authorBean = threadBean.getAuthor();
/adapters\PersonalizedFeedAdapter.java:195:        if (authorBean != null) {
/adapters\PersonalizedFeedAdapter.java:196:            viewHolder.setOnClickListener(R.id.forum_item_user_avatar, v -> NavigationHelper.toUserSpaceWithAnim(mContext, authorBean.getId(), authorBean.getPortrait(), v));
/adapters\PersonalizedFeedAdapter.java:197:            viewHolder.setText(R.id.forum_item_user_name, authorBean.getNameShow());
/adapters\PersonalizedFeedAdapter.java:198:            viewHolder.setText(R.id.forum_item_user_time, String.valueOf(DateUtils.getRelativeTimeSpanString(Long.valueOf(threadBean.getLastTimeInt()) * 1000L)));
/adapters\PersonalizedFeedAdapter.java:199:            ImageUtil.load(viewHolder.getView(R.id.forum_item_user_avatar), ImageUtil.LOAD_TYPE_AVATAR, authorBean.getPortrait());
/adapters\PersonalizedFeedAdapter.java:200:        }
/adapters\PersonalizedFeedAdapter.java:201:        switch (viewType) {
/adapters\PersonalizedFeedAdapter.java:202:            case TYPE_THREAD_SINGLE_PIC:
/adapters\PersonalizedFeedAdapter.java:203:                if (Util.canLoadGlide(mContext) && "3".equals(threadBean.getMedia().get(0).getType())) {
/adapters\PersonalizedFeedAdapter.java:204:                    ImageView imageView = viewHolder.getView(R.id.forum_item_content_pic);
/adapters\PersonalizedFeedAdapter.java:205:                    imageView.setLayoutParams(getLayoutParams((RelativeLayout.LayoutParams) imageView.getLayoutParams()));
/adapters\PersonalizedFeedAdapter.java:206:                    setListenerForImageView(threadBean.getMedia(), imageView, 0);
/adapters\PersonalizedFeedAdapter.java:207:                    ForumPageBean.MediaInfoBean mediaInfoBean = threadBean.getMedia().get(0);
/adapters\PersonalizedFeedAdapter.java:208:                    ImageUtil.load(imageView, ImageUtil.LOAD_TYPE_SMALL_PIC, ImageUtil.getUrl(mContext, true, mediaInfoBean.getOriginPic(), mediaInfoBean.getSrcPic()));
/adapters\PersonalizedFeedAdapter.java:209:                }
/adapters\PersonalizedFeedAdapter.java:210:                break;
/adapters\PersonalizedFeedAdapter.java:211:            case TYPE_THREAD_MULTI_PIC:
/adapters\PersonalizedFeedAdapter.java:212:                GridLayout gridLayout = viewHolder.getView(R.id.forum_item_content_pics);
/adapters\PersonalizedFeedAdapter.java:213:                CardView cardView = viewHolder.getView(R.id.forum_item_content_pics_card);
/adapters\PersonalizedFeedAdapter.java:214:                cardView.setRadius(DisplayUtil.dp2px(mContext, SharedPreferencesUtil.get(mContext, SharedPreferencesUtil.SP_SETTINGS).getInt("radius", 8)));
/adapters\PersonalizedFeedAdapter.java:215:                MarkedImageView firstImageView = viewHolder.getView(R.id.forum_item_content_pic_1);
/adapters\PersonalizedFeedAdapter.java:216:                MarkedImageView secondImageView = viewHolder.getView(R.id.forum_item_content_pic_2);
/adapters\PersonalizedFeedAdapter.java:217:                MarkedImageView thirdImageView = viewHolder.getView(R.id.forum_item_content_pic_3);
/adapters\PersonalizedFeedAdapter.java:218:                gridLayout.setLayoutParams(getGridLayoutParams(gridLayout.getLayoutParams()));
/adapters\PersonalizedFeedAdapter.java:219:                int size = threadBean.getMedia().size();
/adapters\PersonalizedFeedAdapter.java:220:                if (size >= 1) {
/adapters\PersonalizedFeedAdapter.java:221:                    setListenerForImageView(threadBean.getMedia(), firstImageView, 0);
/adapters\PersonalizedFeedAdapter.java:222:                    ForumPageBean.MediaInfoBean firstMedia = threadBean.getMedia().get(0);
/adapters\PersonalizedFeedAdapter.java:223:                    load(firstMedia, firstImageView);
/adapters\PersonalizedFeedAdapter.java:224:                } else {
/adapters\PersonalizedFeedAdapter.java:225:                    firstImageView.setVisibility(View.GONE);
/adapters\PersonalizedFeedAdapter.java:226:                    Glide.with(mContext)
/adapters\PersonalizedFeedAdapter.java:227:                            .clear(firstImageView);
/adapters\PersonalizedFeedAdapter.java:228:                }
/adapters\PersonalizedFeedAdapter.java:229:                if (size >= 2) {
/adapters\PersonalizedFeedAdapter.java:230:                    setListenerForImageView(threadBean.getMedia(), secondImageView, 1);
/adapters\PersonalizedFeedAdapter.java:231:                    ForumPageBean.MediaInfoBean secondMedia = threadBean.getMedia().get(1);
/adapters\PersonalizedFeedAdapter.java:232:                    load(secondMedia, secondImageView);
/adapters\PersonalizedFeedAdapter.java:233:                } else {
/adapters\PersonalizedFeedAdapter.java:234:                    secondImageView.setVisibility(View.GONE);
/adapters\PersonalizedFeedAdapter.java:235:                    Glide.with(mContext)
/adapters\PersonalizedFeedAdapter.java:236:                            .clear(secondImageView);
/adapters\PersonalizedFeedAdapter.java:237:                }
/adapters\PersonalizedFeedAdapter.java:238:                if (size >= 3) {
/adapters\PersonalizedFeedAdapter.java:239:                    setListenerForImageView(threadBean.getMedia(), thirdImageView, 2);
/adapters\PersonalizedFeedAdapter.java:240:                    ForumPageBean.MediaInfoBean thirdMedia = threadBean.getMedia().get(2);
/adapters\PersonalizedFeedAdapter.java:241:                    load(thirdMedia, thirdImageView);
/adapters\PersonalizedFeedAdapter.java:242:                } else {
/adapters\PersonalizedFeedAdapter.java:243:                    thirdImageView.setVisibility(View.GONE);
/adapters\PersonalizedFeedAdapter.java:244:                    Glide.with(mContext)
/adapters\PersonalizedFeedAdapter.java:245:                            .clear(thirdImageView);
/adapters\PersonalizedFeedAdapter.java:246:                }
/adapters\PersonalizedFeedAdapter.java:247:                if (size > 3) {
/adapters\PersonalizedFeedAdapter.java:248:                    viewHolder.setVisibility(R.id.forum_item_content_pic_badge, View.VISIBLE);
/adapters\PersonalizedFeedAdapter.java:249:                    viewHolder.setText(R.id.forum_item_content_pic_badge_text, String.valueOf(size));
/adapters\PersonalizedFeedAdapter.java:250:                } else {
/adapters\PersonalizedFeedAdapter.java:251:                    viewHolder.setVisibility(R.id.forum_item_content_pic_badge, View.GONE);
/adapters\PersonalizedFeedAdapter.java:252:                }
/adapters\PersonalizedFeedAdapter.java:253:                break;
/adapters\PersonalizedFeedAdapter.java:254:            case TYPE_THREAD_VIDEO:
/adapters\PersonalizedFeedAdapter.java:255:                if (threadBean.getVideoInfo() == null) {
/adapters\PersonalizedFeedAdapter.java:256:                    break;
/adapters\PersonalizedFeedAdapter.java:257:                }
/adapters\PersonalizedFeedAdapter.java:258:                VideoPlayerStandard videoPlayerStandard = viewHolder.getView(R.id.forum_item_content_video);
/adapters\PersonalizedFeedAdapter.java:259:                videoPlayerStandard.setLayoutParams(getLayoutParams((RelativeLayout.LayoutParams) videoPlayerStandard.getLayoutParams()));
/adapters\PersonalizedFeedAdapter.java:260:                videoPlayerStandard.setUp(threadBean.getVideoInfo().getVideoUrl(), "");
/adapters\PersonalizedFeedAdapter.java:261:                ImageUtil.load(videoPlayerStandard.posterImageView, ImageUtil.LOAD_TYPE_SMALL_PIC, threadBean.getVideoInfo().getThumbnailUrl(), true);
/adapters\PersonalizedFeedAdapter.java:262:                break;
/adapters\PersonalizedFeedAdapter.java:263:        }
/adapters\PersonalizedFeedAdapter.java:264:        if (!TextUtils.isEmpty(threadBean.getForumName()))
/adapters\PersonalizedFeedAdapter.java:265:            viewHolder.setText(R.id.forum_item_forum_name, mContext.getString(R.string.tip_forum_name, threadBean.getForumName()));
/adapters\PersonalizedFeedAdapter.java:266:        else
/adapters\PersonalizedFeedAdapter.java:267:            viewHolder.setText(R.id.forum_item_forum_name, "");
/adapters\PersonalizedFeedAdapter.java:268:    }
/adapters\PersonalizedFeedAdapter.java:270:    @Override
/adapters\PersonalizedFeedAdapter.java:271:    protected int getItemLayoutId(int viewType) {
/adapters\PersonalizedFeedAdapter.java:272:        switch (viewType) {
/adapters\PersonalizedFeedAdapter.java:273:            case TYPE_THREAD_COMMON:
/adapters\PersonalizedFeedAdapter.java:274:                return R.layout.item_forum_thread_common;
/adapters\PersonalizedFeedAdapter.java:275:            case TYPE_THREAD_VIDEO:
/adapters\PersonalizedFeedAdapter.java:276:                return R.layout.item_forum_thread_video;
/adapters\PersonalizedFeedAdapter.java:277:            case TYPE_THREAD_SINGLE_PIC:
/adapters\PersonalizedFeedAdapter.java:278:                return R.layout.item_forum_thread_single_pic;
/adapters\PersonalizedFeedAdapter.java:279:            case TYPE_THREAD_MULTI_PIC:
/adapters\PersonalizedFeedAdapter.java:280:                return R.layout.item_forum_thread_multi_pic;
/adapters\PersonalizedFeedAdapter.java:281:        }
/adapters\PersonalizedFeedAdapter.java:282:        return R.layout.item_forum_thread_common;
/adapters\PersonalizedFeedAdapter.java:283:    }
/adapters\PersonalizedFeedAdapter.java:285:    @Override
/adapters\PersonalizedFeedAdapter.java:286:    protected int getViewType(int position, PersonalizedBean.ThreadBean threadBean) {
/adapters\PersonalizedFeedAdapter.java:287:        if (threadBean.getVideoInfo() != null) {
/adapters\PersonalizedFeedAdapter.java:288:            return TYPE_THREAD_VIDEO;
/adapters\PersonalizedFeedAdapter.java:289:        }
/adapters\PersonalizedFeedAdapter.java:290:        if (threadBean.getMedia() == null) {
/adapters\PersonalizedFeedAdapter.java:291:            return TYPE_THREAD_COMMON;
/adapters\PersonalizedFeedAdapter.java:292:        }
/adapters\PersonalizedFeedAdapter.java:293:        if (threadBean.getMedia().size() == 1) {
/adapters\PersonalizedFeedAdapter.java:294:            return TYPE_THREAD_SINGLE_PIC;
/adapters\PersonalizedFeedAdapter.java:295:        }
/adapters\PersonalizedFeedAdapter.java:296:        if (threadBean.getMedia().size() > 1) {
/adapters\PersonalizedFeedAdapter.java:297:            return TYPE_THREAD_MULTI_PIC;
/adapters\PersonalizedFeedAdapter.java:298:        }
/adapters\PersonalizedFeedAdapter.java:299:        return TYPE_THREAD_COMMON;
/adapters\PersonalizedFeedAdapter.java:300:    }
/adapters\PersonalizedFeedAdapter.java:302:    public interface OnRefreshListener {
/adapters\PersonalizedFeedAdapter.java:303:        void onRefresh();
/adapters\PersonalizedFeedAdapter.java:304:    }
/adapters\PersonalizedFeedAdapter.java:305:}
/adapters\PhotoViewAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\PhotoViewAdapter.java:3:import android.annotation.SuppressLint;
/adapters\PhotoViewAdapter.java:5:import androidx.annotation.NonNull;
/adapters\PhotoViewAdapter.java:6:import androidx.fragment.app.Fragment;
/adapters\PhotoViewAdapter.java:7:import androidx.fragment.app.FragmentActivity;
/adapters\PhotoViewAdapter.java:8:import androidx.viewpager2.adapter.FragmentStateAdapter;
/adapters\PhotoViewAdapter.java:10:import com.huanchengfly.tieba.post.fragments.PhotoViewFragment;
/adapters\PhotoViewAdapter.java:11:import com.huanchengfly.tieba.post.models.PhotoViewBean;
/adapters\PhotoViewAdapter.java:13:import java.util.ArrayList;
/adapters\PhotoViewAdapter.java:14:import java.util.Collection;
/adapters\PhotoViewAdapter.java:15:import java.util.List;
/adapters\PhotoViewAdapter.java:17:public class PhotoViewAdapter extends FragmentStateAdapter {
/adapters\PhotoViewAdapter.java:18:    private List<PhotoViewBean> mList;
/adapters\PhotoViewAdapter.java:20:    @SuppressLint("WrongConstant")
/adapters\PhotoViewAdapter.java:21:    public PhotoViewAdapter(@NonNull FragmentActivity fragmentActivity, List<PhotoViewBean> list) {
/adapters\PhotoViewAdapter.java:22:        super(fragmentActivity);
/adapters\PhotoViewAdapter.java:23:        mList = new ArrayList<>(list);
/adapters\PhotoViewAdapter.java:24:    }
/adapters\PhotoViewAdapter.java:26:    public PhotoViewBean getBean(int position) {
/adapters\PhotoViewAdapter.java:27:        return mList.get(position);
/adapters\PhotoViewAdapter.java:28:    }
/adapters\PhotoViewAdapter.java:30:    public List<PhotoViewBean> getData() {
/adapters\PhotoViewAdapter.java:31:        return mList;
/adapters\PhotoViewAdapter.java:32:    }
/adapters\PhotoViewAdapter.java:34:    public void insert(Collection<? extends PhotoViewBean> photoViewBeans) {
/adapters\PhotoViewAdapter.java:35:        insert(mList.size(), photoViewBeans);
/adapters\PhotoViewAdapter.java:36:    }
/adapters\PhotoViewAdapter.java:38:    public void insert(int position, Collection<? extends PhotoViewBean> photoViewBeans) {
/adapters\PhotoViewAdapter.java:39:        if (position <= mList.size() && position >= 0) {
/adapters\PhotoViewAdapter.java:40:            mList.addAll(position, photoViewBeans);
/adapters\PhotoViewAdapter.java:41:            this.notifyItemRangeInserted(position, photoViewBeans.size());
/adapters\PhotoViewAdapter.java:42:            this.notifyItemRangeChanged(position, mList.size() - position);
/adapters\PhotoViewAdapter.java:43:        }
/adapters\PhotoViewAdapter.java:44:    }
/adapters\PhotoViewAdapter.java:46:    public void insert(PhotoViewBean photoViewBean) {
/adapters\PhotoViewAdapter.java:47:        insert(mList.size(), photoViewBean);
/adapters\PhotoViewAdapter.java:48:    }
/adapters\PhotoViewAdapter.java:50:    public void insert(int position, PhotoViewBean photoViewBean) {
/adapters\PhotoViewAdapter.java:51:        if (position <= mList.size() && position >= 0) {
/adapters\PhotoViewAdapter.java:52:            mList.add(position, photoViewBean);
/adapters\PhotoViewAdapter.java:53:            this.notifyItemInserted(position);
/adapters\PhotoViewAdapter.java:54:            this.notifyItemRangeChanged(position, mList.size() - position);
/adapters\PhotoViewAdapter.java:55:        }
/adapters\PhotoViewAdapter.java:56:    }
/adapters\PhotoViewAdapter.java:58:    @NonNull
/adapters\PhotoViewAdapter.java:59:    @Override
/adapters\PhotoViewAdapter.java:60:    public Fragment createFragment(int position) {
/adapters\PhotoViewAdapter.java:61:        return PhotoViewFragment.newInstance(mList.get(position));
/adapters\PhotoViewAdapter.java:62:    }
/adapters\PhotoViewAdapter.java:64:    @Override
/adapters\PhotoViewAdapter.java:65:    public int getItemCount() {
/adapters\PhotoViewAdapter.java:66:        return mList.size();
/adapters\PhotoViewAdapter.java:67:    }
/adapters\PhotoViewAdapter.java:68:}
/adapters\RecyclerFloorAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\RecyclerFloorAdapter.java:3:import android.app.Activity;
/adapters\RecyclerFloorAdapter.java:4:import android.content.Context;
/adapters\RecyclerFloorAdapter.java:5:import android.content.Intent;
/adapters\RecyclerFloorAdapter.java:6:import android.text.SpannableStringBuilder;
/adapters\RecyclerFloorAdapter.java:7:import android.text.Spanned;
/adapters\RecyclerFloorAdapter.java:8:import android.text.TextUtils;
/adapters\RecyclerFloorAdapter.java:9:import android.text.format.DateUtils;
/adapters\RecyclerFloorAdapter.java:10:import android.util.DisplayMetrics;
/adapters\RecyclerFloorAdapter.java:11:import android.util.Log;
/adapters\RecyclerFloorAdapter.java:12:import android.view.Gravity;
/adapters\RecyclerFloorAdapter.java:13:import android.view.View;
/adapters\RecyclerFloorAdapter.java:14:import android.view.ViewGroup;
/adapters\RecyclerFloorAdapter.java:15:import android.widget.ImageView;
/adapters\RecyclerFloorAdapter.java:16:import android.widget.LinearLayout;
/adapters\RecyclerFloorAdapter.java:17:import android.widget.TextView;
/adapters\RecyclerFloorAdapter.java:18:import android.widget.Toast;
/adapters\RecyclerFloorAdapter.java:20:import com.bumptech.glide.request.RequestOptions;
/adapters\RecyclerFloorAdapter.java:21:import com.huanchengfly.tieba.post.R;
/adapters\RecyclerFloorAdapter.java:22:import com.huanchengfly.tieba.post.activities.BaseActivity;
/adapters\RecyclerFloorAdapter.java:23:import com.huanchengfly.tieba.post.activities.ReplyActivity;
/adapters\RecyclerFloorAdapter.java:24:import com.huanchengfly.tieba.post.api.TiebaApi;
/adapters\RecyclerFloorAdapter.java:25:import com.huanchengfly.tieba.post.api.models.CommonResponse;
/adapters\RecyclerFloorAdapter.java:26:import com.huanchengfly.tieba.post.api.models.SubFloorListBean;
/adapters\RecyclerFloorAdapter.java:27:import com.huanchengfly.tieba.post.api.models.ThreadContentBean;
/adapters\RecyclerFloorAdapter.java:28:import com.huanchengfly.tieba.post.components.LinkMovementClickMethod;
/adapters\RecyclerFloorAdapter.java:29:import com.huanchengfly.tieba.post.components.LinkTouchMovementMethod;
/adapters\RecyclerFloorAdapter.java:30:import com.huanchengfly.tieba.post.components.spans.MyURLSpan;
/adapters\RecyclerFloorAdapter.java:31:import com.huanchengfly.tieba.post.components.spans.MyUserSpan;
/adapters\RecyclerFloorAdapter.java:32:import com.huanchengfly.tieba.post.fragments.ConfirmDialogFragment;
/adapters\RecyclerFloorAdapter.java:33:import com.huanchengfly.tieba.post.fragments.MenuDialogFragment;
/adapters\RecyclerFloorAdapter.java:34:import com.huanchengfly.tieba.post.models.PhotoViewBean;
/adapters\RecyclerFloorAdapter.java:35:import com.huanchengfly.tieba.post.models.ReplyInfoBean;
/adapters\RecyclerFloorAdapter.java:36:import com.huanchengfly.tieba.post.utils.AccountUtil;
/adapters\RecyclerFloorAdapter.java:37:import com.huanchengfly.tieba.post.utils.BilibiliUtil;
/adapters\RecyclerFloorAdapter.java:38:import com.huanchengfly.tieba.post.utils.EmotionUtil;
/adapters\RecyclerFloorAdapter.java:39:import com.huanchengfly.tieba.post.utils.ImageUtil;
/adapters\RecyclerFloorAdapter.java:40:import com.huanchengfly.tieba.post.utils.NavigationHelper;
/adapters\RecyclerFloorAdapter.java:41:import com.huanchengfly.tieba.post.utils.StringUtil;
/adapters\RecyclerFloorAdapter.java:42:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/adapters\RecyclerFloorAdapter.java:43:import com.huanchengfly.tieba.post.utils.Util;
/adapters\RecyclerFloorAdapter.java:44:import com.huanchengfly.tieba.post.widgets.MyLinearLayout;
/adapters\RecyclerFloorAdapter.java:45:import com.huanchengfly.tieba.post.widgets.VoicePlayerView;
/adapters\RecyclerFloorAdapter.java:46:import com.huanchengfly.tieba.post.widgets.theme.TintMySpannableTextView;
/adapters\RecyclerFloorAdapter.java:47:import com.huanchengfly.tieba.post.widgets.theme.TintTextView;
/adapters\RecyclerFloorAdapter.java:48:import com.othershe.baseadapter.ViewHolder;
/adapters\RecyclerFloorAdapter.java:49:import com.othershe.baseadapter.base.CommonBaseAdapter;
/adapters\RecyclerFloorAdapter.java:51:import org.jetbrains.annotations.NotNull;
/adapters\RecyclerFloorAdapter.java:53:import java.util.ArrayList;
/adapters\RecyclerFloorAdapter.java:54:import java.util.List;
/adapters\RecyclerFloorAdapter.java:56:import retrofit2.Call;
/adapters\RecyclerFloorAdapter.java:57:import retrofit2.Callback;
/adapters\RecyclerFloorAdapter.java:58:import retrofit2.Response;
/adapters\RecyclerFloorAdapter.java:60:public class RecyclerFloorAdapter extends CommonBaseAdapter<SubFloorListBean.PostInfo> {
/adapters\RecyclerFloorAdapter.java:61:    public static final String TAG = "RecyclerFloorAdapter";
/adapters\RecyclerFloorAdapter.java:62:    private static final int TEXT_VIEW_TYPE_CONTENT = 0;
/adapters\RecyclerFloorAdapter.java:63:    private NavigationHelper navigationHelper;
/adapters\RecyclerFloorAdapter.java:64:    private RequestOptions avatarRequestOptions;
/adapters\RecyclerFloorAdapter.java:65:    private LinearLayout.LayoutParams defaultLayoutParams;
/adapters\RecyclerFloorAdapter.java:66:    private RequestOptions defaultRequestOptions;
/adapters\RecyclerFloorAdapter.java:67:    private Float maxWidth;
/adapters\RecyclerFloorAdapter.java:68:    private SubFloorListBean dataBean;
/adapters\RecyclerFloorAdapter.java:70:    public RecyclerFloorAdapter(Context context) {
/adapters\RecyclerFloorAdapter.java:71:        super(context, null, true);
/adapters\RecyclerFloorAdapter.java:72:        setOnItemClickListener((viewHolder, postInfo, position) -> {
/adapters\RecyclerFloorAdapter.java:73:            int floor = Integer.parseInt(dataBean.getPost().getFloor());
/adapters\RecyclerFloorAdapter.java:74:            int pn = floor - (floor % 30);
/adapters\RecyclerFloorAdapter.java:75:            ThreadContentBean.UserInfoBean userInfoBean = postInfo.getAuthor();
/adapters\RecyclerFloorAdapter.java:76:            mContext.startActivity(new Intent(mContext, ReplyActivity.class)
/adapters\RecyclerFloorAdapter.java:77:                    .putExtra("data", new ReplyInfoBean(dataBean.getThread().getId(),
/adapters\RecyclerFloorAdapter.java:78:                            dataBean.getForum().getId(),
/adapters\RecyclerFloorAdapter.java:79:                            dataBean.getForum().getName(),
/adapters\RecyclerFloorAdapter.java:80:                            dataBean.getAnti().getTbs(),
/adapters\RecyclerFloorAdapter.java:81:                            dataBean.getPost().getId(),
/adapters\RecyclerFloorAdapter.java:82:                            postInfo.getId(),
/adapters\RecyclerFloorAdapter.java:83:                            dataBean.getPost().getFloor(),
/adapters\RecyclerFloorAdapter.java:84:                            userInfoBean != null ? userInfoBean.getNameShow() : "",
/adapters\RecyclerFloorAdapter.java:85:                            AccountUtil.getLoginInfo(mContext).getNameShow()).setPn(String.valueOf(pn)).toString()));
/adapters\RecyclerFloorAdapter.java:86:        });
/adapters\RecyclerFloorAdapter.java:87:        avatarRequestOptions = new RequestOptions()
/adapters\RecyclerFloorAdapter.java:88:                .placeholder(R.drawable.bg_placeholder_circle)
/adapters\RecyclerFloorAdapter.java:89:                .circleCrop()
/adapters\RecyclerFloorAdapter.java:90:                .skipMemoryCache(true);
/adapters\RecyclerFloorAdapter.java:91:        navigationHelper = NavigationHelper.newInstance(mContext);
/adapters\RecyclerFloorAdapter.java:92:        DisplayMetrics dm = mContext.getResources().getDisplayMetrics();
/adapters\RecyclerFloorAdapter.java:93:        maxWidth = (float) dm.widthPixels;
/adapters\RecyclerFloorAdapter.java:94:        defaultLayoutParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
/adapters\RecyclerFloorAdapter.java:95:        defaultLayoutParams.setMargins(0, 8, 0, 8);
/adapters\RecyclerFloorAdapter.java:96:        defaultRequestOptions = new RequestOptions()
/adapters\RecyclerFloorAdapter.java:97:                .placeholder(R.drawable.bg_placeholder)
/adapters\RecyclerFloorAdapter.java:98:                .skipMemoryCache(true);
/adapters\RecyclerFloorAdapter.java:99:    }
/adapters\RecyclerFloorAdapter.java:101:    public void setData(SubFloorListBean data) {
/adapters\RecyclerFloorAdapter.java:102:        dataBean = data;
/adapters\RecyclerFloorAdapter.java:103:        data.getSubPostList().add(0, data.getPost());
/adapters\RecyclerFloorAdapter.java:104:        setNewData(data.getSubPostList());
/adapters\RecyclerFloorAdapter.java:105:    }
/adapters\RecyclerFloorAdapter.java:107:    public void addData(SubFloorListBean data) {
/adapters\RecyclerFloorAdapter.java:108:        dataBean = data;
/adapters\RecyclerFloorAdapter.java:109:        setLoadMoreData(data.getSubPostList());
/adapters\RecyclerFloorAdapter.java:110:    }
/adapters\RecyclerFloorAdapter.java:112:    private void showMenu(SubFloorListBean.PostInfo postInfo, int position) {
/adapters\RecyclerFloorAdapter.java:113:        ThreadContentBean.UserInfoBean userInfoBean = postInfo.getAuthor();
/adapters\RecyclerFloorAdapter.java:114:        MenuDialogFragment.newInstance(R.menu.menu_thread_item, null)
/adapters\RecyclerFloorAdapter.java:115:                .setOnNavigationItemSelectedListener(item -> {
/adapters\RecyclerFloorAdapter.java:116:                    switch (item.getItemId()) {
/adapters\RecyclerFloorAdapter.java:117:                        case R.id.menu_reply:
/adapters\RecyclerFloorAdapter.java:118:                            int floor = Integer.parseInt(dataBean.getPost().getFloor());
/adapters\RecyclerFloorAdapter.java:119:                            int pn = floor - (floor % 30);
/adapters\RecyclerFloorAdapter.java:120:                            String replyData = new ReplyInfoBean(dataBean.getThread().getId(),
/adapters\RecyclerFloorAdapter.java:121:                                    dataBean.getForum().getId(),
/adapters\RecyclerFloorAdapter.java:122:                                    dataBean.getForum().getName(),
/adapters\RecyclerFloorAdapter.java:123:                                    dataBean.getAnti().getTbs(),
/adapters\RecyclerFloorAdapter.java:124:                                    dataBean.getPost().getId(),
/adapters\RecyclerFloorAdapter.java:125:                                    postInfo.getId(),
/adapters\RecyclerFloorAdapter.java:126:                                    dataBean.getPost().getFloor(),
/adapters\RecyclerFloorAdapter.java:127:                                    userInfoBean != null ? userInfoBean.getNameShow() : "",
/adapters\RecyclerFloorAdapter.java:128:                                    AccountUtil.getLoginInfo(mContext).getNameShow()).setPn(String.valueOf(pn)).toString();
/adapters\RecyclerFloorAdapter.java:129:                            Log.i(TAG, "convert: " + replyData);
/adapters\RecyclerFloorAdapter.java:130:                            mContext.startActivity(new Intent(mContext, ReplyActivity.class)
/adapters\RecyclerFloorAdapter.java:131:                                    .putExtra("data", replyData));
/adapters\RecyclerFloorAdapter.java:132:                            return true;
/adapters\RecyclerFloorAdapter.java:133:                        case R.id.menu_report:
/adapters\RecyclerFloorAdapter.java:134:                            navigationHelper.navigationByData(NavigationHelper.ACTION_URL, mContext.getString(R.string.url_post_report, dataBean.getForum().getId(), dataBean.getThread().getId(), postInfo.getId()));
/adapters\RecyclerFloorAdapter.java:135:                            return true;
/adapters\RecyclerFloorAdapter.java:136:                        case R.id.menu_copy:
/adapters\RecyclerFloorAdapter.java:137:                            StringBuilder stringBuilder = new StringBuilder();
/adapters\RecyclerFloorAdapter.java:138:                            for (ThreadContentBean.ContentBean contentBean : postInfo.getContent()) {
/adapters\RecyclerFloorAdapter.java:139:                                switch (contentBean.getType()) {
/adapters\RecyclerFloorAdapter.java:140:                                    case "2":
/adapters\RecyclerFloorAdapter.java:141:                                        contentBean.setText("#(" + contentBean.getC() + ")");
/adapters\RecyclerFloorAdapter.java:142:                                        break;
/adapters\RecyclerFloorAdapter.java:143:                                    case "3":
/adapters\RecyclerFloorAdapter.java:144:                                    case "20":
/adapters\RecyclerFloorAdapter.java:145:                                        contentBean.setText("[图片]\n");
/adapters\RecyclerFloorAdapter.java:146:                                        break;
/adapters\RecyclerFloorAdapter.java:147:                                    case "10":
/adapters\RecyclerFloorAdapter.java:148:                                        contentBean.setText("[语音]\n");
/adapters\RecyclerFloorAdapter.java:149:                                        break;
/adapters\RecyclerFloorAdapter.java:150:                                }
/adapters\RecyclerFloorAdapter.java:151:                                if (contentBean.getText() != null) {
/adapters\RecyclerFloorAdapter.java:152:                                    stringBuilder.append(contentBean.getText());
/adapters\RecyclerFloorAdapter.java:153:                                }
/adapters\RecyclerFloorAdapter.java:154:                            }
/adapters\RecyclerFloorAdapter.java:155:                            Util.showCopyDialog((BaseActivity) mContext, stringBuilder.toString(), postInfo.getId());
/adapters\RecyclerFloorAdapter.java:156:                            return true;
/adapters\RecyclerFloorAdapter.java:157:                        case R.id.menu_delete:
/adapters\RecyclerFloorAdapter.java:158:                            if (TextUtils.equals(AccountUtil.getLoginInfo(mContext).getUid(), postInfo.getAuthor().getId())) {
/adapters\RecyclerFloorAdapter.java:159:                                ConfirmDialogFragment.newInstance(mContext.getString(R.string.title_dialog_del_post))
/adapters\RecyclerFloorAdapter.java:160:                                        .setOnConfirmListener(() -> {
/adapters\RecyclerFloorAdapter.java:161:                                            TiebaApi.getInstance()
/adapters\RecyclerFloorAdapter.java:162:                                                    .delPost(dataBean.getForum().getId(), dataBean.getForum().getName(), dataBean.getThread().getId(), postInfo.getId(), dataBean.getAnti().getTbs(), true, true)
/adapters\RecyclerFloorAdapter.java:163:                                                    .enqueue(new Callback<CommonResponse>() {
/adapters\RecyclerFloorAdapter.java:164:                                                        @Override
/adapters\RecyclerFloorAdapter.java:165:                                                        public void onResponse(@NotNull Call<CommonResponse> call, @NotNull Response<CommonResponse> response) {
/adapters\RecyclerFloorAdapter.java:166:                                                            Toast.makeText(mContext, R.string.toast_success, Toast.LENGTH_SHORT).show();
/adapters\RecyclerFloorAdapter.java:167:                                                            remove(position);
/adapters\RecyclerFloorAdapter.java:168:                                                        }
/adapters\RecyclerFloorAdapter.java:170:                                                        @Override
/adapters\RecyclerFloorAdapter.java:171:                                                        public void onFailure(@NotNull Call<CommonResponse> call, @NotNull Throwable t) {
/adapters\RecyclerFloorAdapter.java:172:                                                            Toast.makeText(mContext, t.getMessage(), Toast.LENGTH_SHORT).show();
/adapters\RecyclerFloorAdapter.java:173:                                                        }
/adapters\RecyclerFloorAdapter.java:174:                                                    });
/adapters\RecyclerFloorAdapter.java:175:                                        })
/adapters\RecyclerFloorAdapter.java:176:                                        .show(((BaseActivity) mContext).getSupportFragmentManager(), postInfo.getId() + "_Confirm");
/adapters\RecyclerFloorAdapter.java:177:                            }
/adapters\RecyclerFloorAdapter.java:178:                            return true;
/adapters\RecyclerFloorAdapter.java:179:                    }
/adapters\RecyclerFloorAdapter.java:180:                    return false;
/adapters\RecyclerFloorAdapter.java:181:                })
/adapters\RecyclerFloorAdapter.java:182:                .setInitMenuCallback(menu -> {
/adapters\RecyclerFloorAdapter.java:183:                    if (TextUtils.equals(AccountUtil.getLoginInfo(mContext).getUid(), postInfo.getAuthor().getId())) {
/adapters\RecyclerFloorAdapter.java:184:                        menu.findItem(R.id.menu_delete).setVisible(true);
/adapters\RecyclerFloorAdapter.java:185:                    }
/adapters\RecyclerFloorAdapter.java:186:                })
/adapters\RecyclerFloorAdapter.java:187:                .show(((BaseActivity) mContext).getSupportFragmentManager(), postInfo.getId() + "_Menu");
/adapters\RecyclerFloorAdapter.java:188:    }
/adapters\RecyclerFloorAdapter.java:190:    @Override
/adapters\RecyclerFloorAdapter.java:191:    protected void convert(ViewHolder holder, SubFloorListBean.PostInfo data, int position) {
/adapters\RecyclerFloorAdapter.java:192:        ThreadContentBean.UserInfoBean userInfoBean = data.getAuthor();
/adapters\RecyclerFloorAdapter.java:193:        if (dataBean != null && dataBean.getThread() != null && dataBean.getThread().getAuthor() != null && userInfoBean != null && userInfoBean.getId() != null && userInfoBean.getId().equals(dataBean.getThread().getAuthor().getId())) {
/adapters\RecyclerFloorAdapter.java:194:            holder.setVisibility(R.id.thread_list_item_user_lz_tip, View.VISIBLE);
/adapters\RecyclerFloorAdapter.java:195:        } else {
/adapters\RecyclerFloorAdapter.java:196:            holder.setVisibility(R.id.thread_list_item_user_lz_tip, View.GONE);
/adapters\RecyclerFloorAdapter.java:197:        }
/adapters\RecyclerFloorAdapter.java:198:        holder.getConvertView().setOnLongClickListener(v -> {
/adapters\RecyclerFloorAdapter.java:199:            showMenu(data, position);
/adapters\RecyclerFloorAdapter.java:200:            return true;
/adapters\RecyclerFloorAdapter.java:201:        });
/adapters\RecyclerFloorAdapter.java:202:        holder.setOnClickListener(R.id.thread_list_item_reply, view -> showMenu(data, position));
/adapters\RecyclerFloorAdapter.java:203:        holder.setText(R.id.thread_list_item_user_name, userInfoBean == null ? "" : StringUtil.getUsernameString(mContext, userInfoBean.getName(), userInfoBean.getNameShow()));
/adapters\RecyclerFloorAdapter.java:204:        holder.setText(R.id.thread_list_item_user_time, String.valueOf(DateUtils.getRelativeTimeSpanString(Long.valueOf(data.getTime()) * 1000L)));
/adapters\RecyclerFloorAdapter.java:205:        if (userInfoBean != null) {
/adapters\RecyclerFloorAdapter.java:206:            String levelId = userInfoBean.getLevelId() == null || TextUtils.isEmpty(userInfoBean.getLevelId()) ? "?" : userInfoBean.getLevelId();
/adapters\RecyclerFloorAdapter.java:207:            ThemeUtil.setChipThemeByLevel(levelId,
/adapters\RecyclerFloorAdapter.java:208:                    holder.getView(R.id.thread_list_item_user_status),
/adapters\RecyclerFloorAdapter.java:209:                    holder.getView(R.id.thread_list_item_user_level),
/adapters\RecyclerFloorAdapter.java:210:                    holder.getView(R.id.thread_list_item_user_lz_tip));
/adapters\RecyclerFloorAdapter.java:211:            holder.setText(R.id.thread_list_item_user_level, levelId);
/adapters\RecyclerFloorAdapter.java:212:            holder.setOnClickListener(R.id.thread_list_item_user_avatar, view -> {
/adapters\RecyclerFloorAdapter.java:213:                NavigationHelper.toUserSpaceWithAnim(mContext, userInfoBean.getId(), StringUtil.getAvatarUrl(userInfoBean.getPortrait()), view);
/adapters\RecyclerFloorAdapter.java:214:            });
/adapters\RecyclerFloorAdapter.java:215:            ImageUtil.load(holder.getView(R.id.thread_list_item_user_avatar), ImageUtil.LOAD_TYPE_AVATAR, userInfoBean.getPortrait());
/adapters\RecyclerFloorAdapter.java:216:        }
/adapters\RecyclerFloorAdapter.java:217:        holder.setVisibility(R.id.thread_list_item_content_title, View.GONE);
/adapters\RecyclerFloorAdapter.java:218:        initContentView(holder, data);
/adapters\RecyclerFloorAdapter.java:219:    }
/adapters\RecyclerFloorAdapter.java:221:    @Override
/adapters\RecyclerFloorAdapter.java:222:    protected int getItemLayoutId() {
/adapters\RecyclerFloorAdapter.java:223:        return R.layout.item_thread_list;
/adapters\RecyclerFloorAdapter.java:224:    }
/adapters\RecyclerFloorAdapter.java:226:    private boolean appendTextToLastTextView(List<View> views, CharSequence newContent) {
/adapters\RecyclerFloorAdapter.java:227:        if (views.size() > 0) {
/adapters\RecyclerFloorAdapter.java:228:            View lastView = views.get(views.size() - 1);
/adapters\RecyclerFloorAdapter.java:229:            if (lastView instanceof TextView) {
/adapters\RecyclerFloorAdapter.java:230:                TextView lastTextView = (TextView) lastView;
/adapters\RecyclerFloorAdapter.java:231:                SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(lastTextView.getText());
/adapters\RecyclerFloorAdapter.java:232:                spannableStringBuilder.append(newContent);
/adapters\RecyclerFloorAdapter.java:233:                setText(lastTextView, spannableStringBuilder);
/adapters\RecyclerFloorAdapter.java:234:                return false;
/adapters\RecyclerFloorAdapter.java:235:            }
/adapters\RecyclerFloorAdapter.java:236:        }
/adapters\RecyclerFloorAdapter.java:237:        return true;
/adapters\RecyclerFloorAdapter.java:238:    }
/adapters\RecyclerFloorAdapter.java:240:    private TextView createTextView(int type) {
/adapters\RecyclerFloorAdapter.java:241:        TextView textView;
/adapters\RecyclerFloorAdapter.java:242:        if (type == TEXT_VIEW_TYPE_CONTENT) {
/adapters\RecyclerFloorAdapter.java:243:            TintMySpannableTextView mySpannableTextView = new TintMySpannableTextView(mContext);
/adapters\RecyclerFloorAdapter.java:244:            mySpannableTextView.setTintResId(R.color.default_color_text);
/adapters\RecyclerFloorAdapter.java:245:            mySpannableTextView.setLinkTouchMovementMethod(LinkTouchMovementMethod.getInstance());
/adapters\RecyclerFloorAdapter.java:246:            textView = mySpannableTextView;
/adapters\RecyclerFloorAdapter.java:247:        } else {
/adapters\RecyclerFloorAdapter.java:248:            TintTextView tintTextView = new TintTextView(mContext);
/adapters\RecyclerFloorAdapter.java:249:            tintTextView.setTintResId(R.color.default_color_text);
/adapters\RecyclerFloorAdapter.java:250:            tintTextView.setMovementMethod(LinkMovementClickMethod.getInstance());
/adapters\RecyclerFloorAdapter.java:251:            textView = tintTextView;
/adapters\RecyclerFloorAdapter.java:252:        }
/adapters\RecyclerFloorAdapter.java:253:        textView.setFocusable(false);
/adapters\RecyclerFloorAdapter.java:254:        textView.setClickable(false);
/adapters\RecyclerFloorAdapter.java:255:        textView.setLongClickable(false);
/adapters\RecyclerFloorAdapter.java:256:        textView.setTextIsSelectable(false);
/adapters\RecyclerFloorAdapter.java:257:        textView.setOnClickListener(null);
/adapters\RecyclerFloorAdapter.java:258:        textView.setOnLongClickListener(null);
/adapters\RecyclerFloorAdapter.java:259:        textView.setLetterSpacing(0.02F);
/adapters\RecyclerFloorAdapter.java:260:        if (type == TEXT_VIEW_TYPE_CONTENT) {
/adapters\RecyclerFloorAdapter.java:261:            textView.setTextSize(16);
/adapters\RecyclerFloorAdapter.java:262:        }
/adapters\RecyclerFloorAdapter.java:263:        return textView;
/adapters\RecyclerFloorAdapter.java:264:    }
/adapters\RecyclerFloorAdapter.java:266:    private void setText(TextView textView, CharSequence content) {
/adapters\RecyclerFloorAdapter.java:267:        content = BilibiliUtil.replaceVideoNumberSpan(mContext, content);
/adapters\RecyclerFloorAdapter.java:268:        content = StringUtil.getEmotionContent(EmotionUtil.EMOTION_ALL_TYPE, textView, content);
/adapters\RecyclerFloorAdapter.java:269:        textView.setText(content);
/adapters\RecyclerFloorAdapter.java:270:    }
/adapters\RecyclerFloorAdapter.java:272:    private LinearLayout.LayoutParams getLayoutParams(ThreadContentBean.ContentBean contentBean) {
/adapters\RecyclerFloorAdapter.java:273:        if (!contentBean.getType().equals("3") && !contentBean.getType().equals("5")) {
/adapters\RecyclerFloorAdapter.java:274:            return defaultLayoutParams;
/adapters\RecyclerFloorAdapter.java:275:        }
/adapters\RecyclerFloorAdapter.java:276:        float widthFloat, heightFloat;
/adapters\RecyclerFloorAdapter.java:277:        if (contentBean.getType().equals("3") || contentBean.getType().equals("20")) {
/adapters\RecyclerFloorAdapter.java:278:            String[] strings = contentBean.getBsize().split(",");
/adapters\RecyclerFloorAdapter.java:279:            widthFloat = Float.parseFloat(strings[0]);
/adapters\RecyclerFloorAdapter.java:280:            heightFloat = Float.parseFloat(strings[1]);
/adapters\RecyclerFloorAdapter.java:281:            heightFloat *= this.maxWidth / widthFloat;
/adapters\RecyclerFloorAdapter.java:282:            widthFloat = this.maxWidth;
/adapters\RecyclerFloorAdapter.java:283:        } else {
/adapters\RecyclerFloorAdapter.java:284:            float width = Float.parseFloat(contentBean.getWidth());
/adapters\RecyclerFloorAdapter.java:285:            widthFloat = this.maxWidth;
/adapters\RecyclerFloorAdapter.java:286:            heightFloat = Float.parseFloat(contentBean.getHeight());
/adapters\RecyclerFloorAdapter.java:287:            heightFloat *= widthFloat / width;
/adapters\RecyclerFloorAdapter.java:288:        }
/adapters\RecyclerFloorAdapter.java:289:        int width = Math.round(widthFloat);
/adapters\RecyclerFloorAdapter.java:290:        int height = Math.round(heightFloat);
/adapters\RecyclerFloorAdapter.java:291:        LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(width, height);
/adapters\RecyclerFloorAdapter.java:292:        layoutParams.gravity = Gravity.CENTER_HORIZONTAL;
/adapters\RecyclerFloorAdapter.java:293:        layoutParams.setMargins(0, 8, 0, 8);
/adapters\RecyclerFloorAdapter.java:294:        return layoutParams;
/adapters\RecyclerFloorAdapter.java:295:    }
/adapters\RecyclerFloorAdapter.java:297:    private CharSequence getLinkContent(CharSequence newContent, String url) {
/adapters\RecyclerFloorAdapter.java:298:        return getLinkContent("", newContent, url);
/adapters\RecyclerFloorAdapter.java:299:    }
/adapters\RecyclerFloorAdapter.java:301:    private CharSequence getLinkContent(CharSequence oldContent, CharSequence newContent, String url) {
/adapters\RecyclerFloorAdapter.java:302:        int start = oldContent.length();
/adapters\RecyclerFloorAdapter.java:303:        int end = start + newContent.length();
/adapters\RecyclerFloorAdapter.java:304:        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(oldContent);
/adapters\RecyclerFloorAdapter.java:305:        spannableStringBuilder.append(newContent);
/adapters\RecyclerFloorAdapter.java:306:        spannableStringBuilder.setSpan(new MyURLSpan(mContext, url), start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
/adapters\RecyclerFloorAdapter.java:307:        return spannableStringBuilder;
/adapters\RecyclerFloorAdapter.java:308:    }
/adapters\RecyclerFloorAdapter.java:310:    private boolean appendLinkToLastTextView(List<View> views, CharSequence newContent, String url) {
/adapters\RecyclerFloorAdapter.java:311:        if (views.size() > 0) {
/adapters\RecyclerFloorAdapter.java:312:            View lastView = views.get(views.size() - 1);
/adapters\RecyclerFloorAdapter.java:313:            if (lastView instanceof TextView) {
/adapters\RecyclerFloorAdapter.java:314:                TextView lastTextView = (TextView) lastView;
/adapters\RecyclerFloorAdapter.java:315:                setText(lastTextView, getLinkContent(lastTextView.getText(), newContent, url));
/adapters\RecyclerFloorAdapter.java:316:                return false;
/adapters\RecyclerFloorAdapter.java:317:            }
/adapters\RecyclerFloorAdapter.java:318:        }
/adapters\RecyclerFloorAdapter.java:319:        return true;
/adapters\RecyclerFloorAdapter.java:320:    }
/adapters\RecyclerFloorAdapter.java:322:    private boolean canLoadGlide() {
/adapters\RecyclerFloorAdapter.java:323:        if (mContext instanceof Activity) {
/adapters\RecyclerFloorAdapter.java:324:            return !((Activity) mContext).isDestroyed();
/adapters\RecyclerFloorAdapter.java:325:        }
/adapters\RecyclerFloorAdapter.java:326:        return false;
/adapters\RecyclerFloorAdapter.java:327:    }
/adapters\RecyclerFloorAdapter.java:329:    private boolean appendUserToLastTextView(List<View> views, CharSequence newContent, String uid) {
/adapters\RecyclerFloorAdapter.java:330:        if (views.size() > 0) {
/adapters\RecyclerFloorAdapter.java:331:            View lastView = views.get(views.size() - 1);
/adapters\RecyclerFloorAdapter.java:332:            if (lastView instanceof TextView) {
/adapters\RecyclerFloorAdapter.java:333:                TextView lastTextView = (TextView) lastView;
/adapters\RecyclerFloorAdapter.java:334:                setText(lastTextView, getUserContent(lastTextView.getText(), newContent, uid));
/adapters\RecyclerFloorAdapter.java:335:                return false;
/adapters\RecyclerFloorAdapter.java:336:            }
/adapters\RecyclerFloorAdapter.java:337:        }
/adapters\RecyclerFloorAdapter.java:338:        return true;
/adapters\RecyclerFloorAdapter.java:339:    }
/adapters\RecyclerFloorAdapter.java:341:    private CharSequence getUserContent(CharSequence newContent, String uid) {
/adapters\RecyclerFloorAdapter.java:342:        return getUserContent("", newContent, uid);
/adapters\RecyclerFloorAdapter.java:343:    }
/adapters\RecyclerFloorAdapter.java:345:    private CharSequence getUserContent(CharSequence oldContent, CharSequence newContent, String uid) {
/adapters\RecyclerFloorAdapter.java:346:        int start = oldContent.length();
/adapters\RecyclerFloorAdapter.java:347:        int end = start + newContent.length();
/adapters\RecyclerFloorAdapter.java:348:        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(oldContent);
/adapters\RecyclerFloorAdapter.java:349:        spannableStringBuilder.append(newContent);
/adapters\RecyclerFloorAdapter.java:350:        spannableStringBuilder.setSpan(new MyUserSpan(mContext, uid), start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
/adapters\RecyclerFloorAdapter.java:351:        return spannableStringBuilder;
/adapters\RecyclerFloorAdapter.java:352:    }
/adapters\RecyclerFloorAdapter.java:354:    private List<View> getContentViews(SubFloorListBean.PostInfo postListItemBean) {
/adapters\RecyclerFloorAdapter.java:355:        List<View> views = new ArrayList<>();
/adapters\RecyclerFloorAdapter.java:356:        for (ThreadContentBean.ContentBean contentBean : postListItemBean.getContent()) {
/adapters\RecyclerFloorAdapter.java:357:            switch (contentBean.getType()) {
/adapters\RecyclerFloorAdapter.java:358:                case "0":
/adapters\RecyclerFloorAdapter.java:359:                case "9": {
/adapters\RecyclerFloorAdapter.java:360:                    if (appendTextToLastTextView(views, contentBean.getText())) {
/adapters\RecyclerFloorAdapter.java:361:                        TextView textView = createTextView(TEXT_VIEW_TYPE_CONTENT);
/adapters\RecyclerFloorAdapter.java:362:                        textView.setLayoutParams(getLayoutParams(contentBean));
/adapters\RecyclerFloorAdapter.java:363:                        setText(textView, contentBean.getText());
/adapters\RecyclerFloorAdapter.java:364:                        views.add(textView);
/adapters\RecyclerFloorAdapter.java:365:                    }
/adapters\RecyclerFloorAdapter.java:366:                }
/adapters\RecyclerFloorAdapter.java:367:                break;
/adapters\RecyclerFloorAdapter.java:368:                case "1":
/adapters\RecyclerFloorAdapter.java:369:                    if (appendLinkToLastTextView(views, contentBean.getText(), contentBean.getLink())) {
/adapters\RecyclerFloorAdapter.java:370:                        TextView textView = createTextView(TEXT_VIEW_TYPE_CONTENT);
/adapters\RecyclerFloorAdapter.java:371:                        textView.setLayoutParams(getLayoutParams(contentBean));
/adapters\RecyclerFloorAdapter.java:372:                        setText(textView, getLinkContent(contentBean.getText(), contentBean.getLink()));
/adapters\RecyclerFloorAdapter.java:373:                        views.add(textView);
/adapters\RecyclerFloorAdapter.java:374:                    }
/adapters\RecyclerFloorAdapter.java:375:                    break;
/adapters\RecyclerFloorAdapter.java:376:                case "2":
/adapters\RecyclerFloorAdapter.java:377:                    String emojiText = "#(" + contentBean.getC() + ")";
/adapters\RecyclerFloorAdapter.java:378:                    if (appendTextToLastTextView(views, emojiText)) {
/adapters\RecyclerFloorAdapter.java:379:                        TextView textView = createTextView(TEXT_VIEW_TYPE_CONTENT);
/adapters\RecyclerFloorAdapter.java:380:                        textView.setLayoutParams(getLayoutParams(contentBean));
/adapters\RecyclerFloorAdapter.java:381:                        setText(textView, emojiText);
/adapters\RecyclerFloorAdapter.java:382:                        views.add(textView);
/adapters\RecyclerFloorAdapter.java:383:                    }
/adapters\RecyclerFloorAdapter.java:384:                    break;
/adapters\RecyclerFloorAdapter.java:385:                case "3":
/adapters\RecyclerFloorAdapter.java:386:                    ImageView imageView = new ImageView(mContext);
/adapters\RecyclerFloorAdapter.java:387:                    imageView.setLayoutParams(getLayoutParams(contentBean));
/adapters\RecyclerFloorAdapter.java:388:                    imageView.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
/adapters\RecyclerFloorAdapter.java:389:                    ImageUtil.load(imageView, ImageUtil.LOAD_TYPE_SMALL_PIC, contentBean.getSrc());
/adapters\RecyclerFloorAdapter.java:390:                    List<PhotoViewBean> photoViewBeans = new ArrayList<>();
/adapters\RecyclerFloorAdapter.java:391:                    photoViewBeans.add(new PhotoViewBean(ImageUtil.getNonNullString(contentBean.getSrc(), contentBean.getOriginSrc()),
/adapters\RecyclerFloorAdapter.java:392:                            ImageUtil.getNonNullString(contentBean.getOriginSrc(), contentBean.getSrc()),
/adapters\RecyclerFloorAdapter.java:393:                            "1".equals(contentBean.isLongPic())));
/adapters\RecyclerFloorAdapter.java:394:                    ImageUtil.initImageView(imageView, photoViewBeans, 0);
/adapters\RecyclerFloorAdapter.java:395:                    views.add(imageView);
/adapters\RecyclerFloorAdapter.java:396:                    break;
/adapters\RecyclerFloorAdapter.java:397:                case "4":
/adapters\RecyclerFloorAdapter.java:398:                    if (appendUserToLastTextView(views, contentBean.getText(), contentBean.getUid())) {
/adapters\RecyclerFloorAdapter.java:399:                        TextView textView = createTextView(TEXT_VIEW_TYPE_CONTENT);
/adapters\RecyclerFloorAdapter.java:400:                        textView.setLayoutParams(getLayoutParams(contentBean));
/adapters\RecyclerFloorAdapter.java:401:                        setText(textView, getUserContent(contentBean.getText(), contentBean.getUid()));
/adapters\RecyclerFloorAdapter.java:402:                        views.add(textView);
/adapters\RecyclerFloorAdapter.java:403:                    }
/adapters\RecyclerFloorAdapter.java:404:                    break;
/adapters\RecyclerFloorAdapter.java:405:                case "10":
/adapters\RecyclerFloorAdapter.java:406:                    String voiceUrl = "http://c.tieba.baidu.com/c/p/voice?voice_md5=" + contentBean.getVoiceMD5() + "&play_from=pb_voice_play";
/adapters\RecyclerFloorAdapter.java:407:                    VoicePlayerView voicePlayerView = new VoicePlayerView(mContext);
/adapters\RecyclerFloorAdapter.java:408:                    voicePlayerView.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
/adapters\RecyclerFloorAdapter.java:409:                    //voicePlayerView.setMini(false);
/adapters\RecyclerFloorAdapter.java:410:                    voicePlayerView.setDuration(Integer.valueOf(contentBean.getDuringTime()));
/adapters\RecyclerFloorAdapter.java:411:                    voicePlayerView.setUrl(voiceUrl);
/adapters\RecyclerFloorAdapter.java:412:                    views.add(voicePlayerView);
/adapters\RecyclerFloorAdapter.java:413:                    break;
/adapters\RecyclerFloorAdapter.java:414:            }
/adapters\RecyclerFloorAdapter.java:415:        }
/adapters\RecyclerFloorAdapter.java:416:        return views;
/adapters\RecyclerFloorAdapter.java:417:    }
/adapters\RecyclerFloorAdapter.java:419:    private void initContentView(ViewHolder viewHolder, SubFloorListBean.PostInfo postListItemBean) {
/adapters\RecyclerFloorAdapter.java:420:        MyLinearLayout myLinearLayout = viewHolder.getView(R.id.thread_list_item_content_content);
/adapters\RecyclerFloorAdapter.java:421:        myLinearLayout.removeAllViews();
/adapters\RecyclerFloorAdapter.java:422:        myLinearLayout.addViews(getContentViews(postListItemBean));
/adapters\RecyclerFloorAdapter.java:423:    }
/adapters\RecyclerFloorAdapter.java:424:}/adapters\RecyclerThreadAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\RecyclerThreadAdapter.java:3:import android.content.Context;
/adapters\RecyclerThreadAdapter.java:4:import android.content.Intent;
/adapters\RecyclerThreadAdapter.java:5:import android.graphics.Bitmap;
/adapters\RecyclerThreadAdapter.java:6:import android.text.SpannableStringBuilder;
/adapters\RecyclerThreadAdapter.java:7:import android.text.Spanned;
/adapters\RecyclerThreadAdapter.java:8:import android.text.TextUtils;
/adapters\RecyclerThreadAdapter.java:9:import android.text.format.DateUtils;
/adapters\RecyclerThreadAdapter.java:10:import android.util.Log;
/adapters\RecyclerThreadAdapter.java:11:import android.view.Gravity;
/adapters\RecyclerThreadAdapter.java:12:import android.view.View;
/adapters\RecyclerThreadAdapter.java:13:import android.view.ViewGroup;
/adapters\RecyclerThreadAdapter.java:14:import android.widget.ImageView;
/adapters\RecyclerThreadAdapter.java:15:import android.widget.LinearLayout;
/adapters\RecyclerThreadAdapter.java:16:import android.widget.RelativeLayout;
/adapters\RecyclerThreadAdapter.java:17:import android.widget.TextView;
/adapters\RecyclerThreadAdapter.java:18:import android.widget.Toast;
/adapters\RecyclerThreadAdapter.java:20:import androidx.annotation.NonNull;
/adapters\RecyclerThreadAdapter.java:22:import com.allen.library.SuperTextView;
/adapters\RecyclerThreadAdapter.java:23:import com.huanchengfly.tieba.post.BaseApplication;
/adapters\RecyclerThreadAdapter.java:24:import com.huanchengfly.tieba.post.R;
/adapters\RecyclerThreadAdapter.java:25:import com.huanchengfly.tieba.post.activities.BaseActivity;
/adapters\RecyclerThreadAdapter.java:26:import com.huanchengfly.tieba.post.activities.ReplyActivity;
/adapters\RecyclerThreadAdapter.java:27:import com.huanchengfly.tieba.post.api.TiebaApi;
/adapters\RecyclerThreadAdapter.java:28:import com.huanchengfly.tieba.post.api.models.CommonResponse;
/adapters\RecyclerThreadAdapter.java:29:import com.huanchengfly.tieba.post.api.models.ThreadContentBean;
/adapters\RecyclerThreadAdapter.java:30:import com.huanchengfly.tieba.post.components.LinkMovementClickMethod;
/adapters\RecyclerThreadAdapter.java:31:import com.huanchengfly.tieba.post.components.LinkTouchMovementMethod;
/adapters\RecyclerThreadAdapter.java:32:import com.huanchengfly.tieba.post.components.spans.MyImageSpan;
/adapters\RecyclerThreadAdapter.java:33:import com.huanchengfly.tieba.post.components.spans.MyURLSpan;
/adapters\RecyclerThreadAdapter.java:34:import com.huanchengfly.tieba.post.components.spans.MyUserSpan;
/adapters\RecyclerThreadAdapter.java:35:import com.huanchengfly.tieba.post.components.spans.RoundBackgroundColorSpan;
/adapters\RecyclerThreadAdapter.java:36:import com.huanchengfly.tieba.post.fragments.ConfirmDialogFragment;
/adapters\RecyclerThreadAdapter.java:37:import com.huanchengfly.tieba.post.fragments.FloorFragment;
/adapters\RecyclerThreadAdapter.java:38:import com.huanchengfly.tieba.post.fragments.MenuDialogFragment;
/adapters\RecyclerThreadAdapter.java:39:import com.huanchengfly.tieba.post.models.PhotoViewBean;
/adapters\RecyclerThreadAdapter.java:40:import com.huanchengfly.tieba.post.models.ReplyInfoBean;
/adapters\RecyclerThreadAdapter.java:41:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/adapters\RecyclerThreadAdapter.java:42:import com.huanchengfly.tieba.post.utils.AccountUtil;
/adapters\RecyclerThreadAdapter.java:43:import com.huanchengfly.tieba.post.utils.BilibiliUtil;
/adapters\RecyclerThreadAdapter.java:44:import com.huanchengfly.tieba.post.utils.BlockUtil;
/adapters\RecyclerThreadAdapter.java:45:import com.huanchengfly.tieba.post.utils.DisplayUtil;
/adapters\RecyclerThreadAdapter.java:46:import com.huanchengfly.tieba.post.utils.EmotionUtil;
/adapters\RecyclerThreadAdapter.java:47:import com.huanchengfly.tieba.post.utils.ImageUtil;
/adapters\RecyclerThreadAdapter.java:48:import com.huanchengfly.tieba.post.utils.NavigationHelper;
/adapters\RecyclerThreadAdapter.java:49:import com.huanchengfly.tieba.post.utils.StringUtil;
/adapters\RecyclerThreadAdapter.java:50:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/adapters\RecyclerThreadAdapter.java:51:import com.huanchengfly.tieba.post.utils.Util;
/adapters\RecyclerThreadAdapter.java:52:import com.huanchengfly.tieba.post.widgets.MyImageView;
/adapters\RecyclerThreadAdapter.java:53:import com.huanchengfly.tieba.post.widgets.MyLinearLayout;
/adapters\RecyclerThreadAdapter.java:54:import com.huanchengfly.tieba.post.widgets.VideoPlayerStandard;
/adapters\RecyclerThreadAdapter.java:55:import com.huanchengfly.tieba.post.widgets.VoicePlayerView;
/adapters\RecyclerThreadAdapter.java:56:import com.huanchengfly.tieba.post.widgets.theme.TintMySpannableTextView;
/adapters\RecyclerThreadAdapter.java:57:import com.huanchengfly.tieba.post.widgets.theme.TintTextView;
/adapters\RecyclerThreadAdapter.java:58:import com.othershe.baseadapter.ViewHolder;
/adapters\RecyclerThreadAdapter.java:59:import com.othershe.baseadapter.base.MultiBaseAdapter;
/adapters\RecyclerThreadAdapter.java:61:import org.jetbrains.annotations.NotNull;
/adapters\RecyclerThreadAdapter.java:63:import java.util.ArrayList;
/adapters\RecyclerThreadAdapter.java:64:import java.util.HashMap;
/adapters\RecyclerThreadAdapter.java:65:import java.util.List;
/adapters\RecyclerThreadAdapter.java:66:import java.util.Map;
/adapters\RecyclerThreadAdapter.java:67:import java.util.TreeMap;
/adapters\RecyclerThreadAdapter.java:69:import retrofit2.Call;
/adapters\RecyclerThreadAdapter.java:70:import retrofit2.Callback;
/adapters\RecyclerThreadAdapter.java:71:import retrofit2.Response;
/adapters\RecyclerThreadAdapter.java:73:import static com.huanchengfly.tieba.post.activities.PhotoViewActivity.OBJ_TYPE_THREAD_PAGE;
/adapters\RecyclerThreadAdapter.java:74:import static com.huanchengfly.tieba.post.utils.Util.alphaColor;
/adapters\RecyclerThreadAdapter.java:76:public class RecyclerThreadAdapter extends MultiBaseAdapter<ThreadContentBean.PostListItemBean> {
/adapters\RecyclerThreadAdapter.java:77:    public static final String TAG = "RecyclerThreadAdapter";
/adapters\RecyclerThreadAdapter.java:78:    public static final int TYPE_REPLY = 1000;
/adapters\RecyclerThreadAdapter.java:79:    public static final int TYPE_THREAD = 1001;
/adapters\RecyclerThreadAdapter.java:80:    private static final int TEXT_VIEW_TYPE_CONTENT = 0;
/adapters\RecyclerThreadAdapter.java:81:    private static final int TEXT_VIEW_TYPE_FLOOR = 1;
/adapters\RecyclerThreadAdapter.java:82:    public static final int MAX_SUB_POST_SHOW = 3;
/adapters\RecyclerThreadAdapter.java:83:    private Map<String, ThreadContentBean.UserInfoBean> userInfoBeanMap;
/adapters\RecyclerThreadAdapter.java:84:    private NavigationHelper navigationHelper;
/adapters\RecyclerThreadAdapter.java:85:    private LinearLayout.LayoutParams defaultLayoutParams;
/adapters\RecyclerThreadAdapter.java:86:    private LinearLayout.LayoutParams defaultLayoutParamsWithNoMargins;
/adapters\RecyclerThreadAdapter.java:87:    private ThreadContentBean.ThreadBean threadBean;
/adapters\RecyclerThreadAdapter.java:88:    private ThreadContentBean dataBean;
/adapters\RecyclerThreadAdapter.java:89:    private TreeMap<Integer, List<PhotoViewBean>> photoViewBeansMap;
/adapters\RecyclerThreadAdapter.java:90:    private int screenWidthPx;
/adapters\RecyclerThreadAdapter.java:91:    private boolean showForum;
/adapters\RecyclerThreadAdapter.java:92:    private Map<String, Boolean> blockCacheMap;
/adapters\RecyclerThreadAdapter.java:93:    private boolean immersive;
/adapters\RecyclerThreadAdapter.java:94:    private boolean seeLz;
/adapters\RecyclerThreadAdapter.java:96:    public RecyclerThreadAdapter(Context context) {
/adapters\RecyclerThreadAdapter.java:97:        super(context, null, true);
/adapters\RecyclerThreadAdapter.java:98:        setLoadingView(R.layout.layout_footer_loading);
/adapters\RecyclerThreadAdapter.java:99:        setLoadEndView(R.layout.layout_footer_loadend);
/adapters\RecyclerThreadAdapter.java:100:        setLoadFailedView(R.layout.layout_footer_load_failed);
/adapters\RecyclerThreadAdapter.java:101:        setOnMultiItemClickListener((viewHolder, postListItemBean, i, i1) -> {
/adapters\RecyclerThreadAdapter.java:102:            ThreadContentBean.UserInfoBean userInfoBean = userInfoBeanMap.get(postListItemBean.getAuthorId());
/adapters\RecyclerThreadAdapter.java:103:            mContext.startActivity(new Intent(mContext, ReplyActivity.class)
/adapters\RecyclerThreadAdapter.java:104:                    .putExtra("data", new ReplyInfoBean(dataBean.getThread().getId(),
/adapters\RecyclerThreadAdapter.java:105:                            dataBean.getForum().getId(),
/adapters\RecyclerThreadAdapter.java:106:                            dataBean.getForum().getName(),
/adapters\RecyclerThreadAdapter.java:107:                            dataBean.getAnti().getTbs(),
/adapters\RecyclerThreadAdapter.java:108:                            postListItemBean.getId(),
/adapters\RecyclerThreadAdapter.java:109:                            postListItemBean.getFloor(),
/adapters\RecyclerThreadAdapter.java:110:                            userInfoBean != null ? userInfoBean.getNameShow() : "",
/adapters\RecyclerThreadAdapter.java:111:                            dataBean.getUser().getNameShow()).setPn(dataBean.getPage().getOffset()).toString()));
/adapters\RecyclerThreadAdapter.java:112:        });
/adapters\RecyclerThreadAdapter.java:113:        showForum = true;
/adapters\RecyclerThreadAdapter.java:114:        userInfoBeanMap = new HashMap<>();
/adapters\RecyclerThreadAdapter.java:115:        navigationHelper = NavigationHelper.newInstance(mContext);
/adapters\RecyclerThreadAdapter.java:116:        immersive = false;
/adapters\RecyclerThreadAdapter.java:117:        this.screenWidthPx = BaseApplication.ScreenInfo.EXACT_SCREEN_WIDTH;
/adapters\RecyclerThreadAdapter.java:118:        defaultLayoutParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
/adapters\RecyclerThreadAdapter.java:119:        defaultLayoutParams.setMargins(0, 8, 0, 8);
/adapters\RecyclerThreadAdapter.java:120:        defaultLayoutParamsWithNoMargins = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
/adapters\RecyclerThreadAdapter.java:121:        photoViewBeansMap = new TreeMap<>();
/adapters\RecyclerThreadAdapter.java:122:        blockCacheMap = new HashMap<>();
/adapters\RecyclerThreadAdapter.java:123:    }
/adapters\RecyclerThreadAdapter.java:125:    public boolean isImmersive() {
/adapters\RecyclerThreadAdapter.java:126:        return immersive;
/adapters\RecyclerThreadAdapter.java:127:    }
/adapters\RecyclerThreadAdapter.java:129:    public RecyclerThreadAdapter setImmersive(boolean immersive) {
/adapters\RecyclerThreadAdapter.java:130:        this.immersive = immersive;
/adapters\RecyclerThreadAdapter.java:131:        notifyDataSetChanged();
/adapters\RecyclerThreadAdapter.java:132:        return this;
/adapters\RecyclerThreadAdapter.java:133:    }
/adapters\RecyclerThreadAdapter.java:135:    public boolean isShowForum() {
/adapters\RecyclerThreadAdapter.java:136:        return showForum;
/adapters\RecyclerThreadAdapter.java:137:    }
/adapters\RecyclerThreadAdapter.java:139:    public RecyclerThreadAdapter setShowForum(boolean showForum) {
/adapters\RecyclerThreadAdapter.java:140:        this.showForum = showForum;
/adapters\RecyclerThreadAdapter.java:141:        return this;
/adapters\RecyclerThreadAdapter.java:142:    }
/adapters\RecyclerThreadAdapter.java:144:    public boolean isSeeLz() {
/adapters\RecyclerThreadAdapter.java:145:        return seeLz;
/adapters\RecyclerThreadAdapter.java:146:    }
/adapters\RecyclerThreadAdapter.java:148:    public RecyclerThreadAdapter setSeeLz(boolean seeLz) {
/adapters\RecyclerThreadAdapter.java:149:        this.seeLz = seeLz;
/adapters\RecyclerThreadAdapter.java:150:        return this;
/adapters\RecyclerThreadAdapter.java:151:    }
/adapters\RecyclerThreadAdapter.java:153:    public void setData(ThreadContentBean data) {
/adapters\RecyclerThreadAdapter.java:154:        threadBean = data.getThread();
/adapters\RecyclerThreadAdapter.java:155:        dataBean = data;
/adapters\RecyclerThreadAdapter.java:156:        setUser(data.getUserList());
/adapters\RecyclerThreadAdapter.java:157:        setPic(data.getPostList());
/adapters\RecyclerThreadAdapter.java:158:        List<ThreadContentBean.PostListItemBean> postListItemBeans = new ArrayList<>();
/adapters\RecyclerThreadAdapter.java:159:        for (ThreadContentBean.PostListItemBean postListItemBean : data.getPostList()) {
/adapters\RecyclerThreadAdapter.java:160:            if (!needBlock(postListItemBean)) {
/adapters\RecyclerThreadAdapter.java:161:                postListItemBeans.add(postListItemBean);
/adapters\RecyclerThreadAdapter.java:162:            }
/adapters\RecyclerThreadAdapter.java:163:        }
/adapters\RecyclerThreadAdapter.java:164:        setNewData(postListItemBeans);
/adapters\RecyclerThreadAdapter.java:165:    }
/adapters\RecyclerThreadAdapter.java:167:    private void refreshForumView(ThreadContentBean.ForumInfoBean forumInfoBean, SuperTextView forumView, View dividerView) {
/adapters\RecyclerThreadAdapter.java:168:        if (forumView == null || dividerView == null || forumInfoBean == null) {
/adapters\RecyclerThreadAdapter.java:169:            return;
/adapters\RecyclerThreadAdapter.java:170:        }
/adapters\RecyclerThreadAdapter.java:171:        if (!showForum || !mContext.getSharedPreferences("settings", Context.MODE_PRIVATE).getBoolean("showShortcutInThread", true) || "0".equals(forumInfoBean.isExists()) || forumInfoBean.getName().isEmpty()) {
/adapters\RecyclerThreadAdapter.java:172:            forumView.setVisibility(View.GONE);
/adapters\RecyclerThreadAdapter.java:173:            dividerView.setVisibility(View.GONE);
/adapters\RecyclerThreadAdapter.java:174:            return;
/adapters\RecyclerThreadAdapter.java:175:        }
/adapters\RecyclerThreadAdapter.java:176:        forumView.getLeftTextView().getPaint().setFakeBoldText(true);
/adapters\RecyclerThreadAdapter.java:177:        forumView.setVisibility(View.VISIBLE);
/adapters\RecyclerThreadAdapter.java:178:        forumView.setOnSuperTextViewClickListener((SuperTextView superTextView) -> {
/adapters\RecyclerThreadAdapter.java:179:            navigationHelper.navigationByData(NavigationHelper.ACTION_FORUM, forumInfoBean.getName());
/adapters\RecyclerThreadAdapter.java:180:        });
/adapters\RecyclerThreadAdapter.java:181:        forumView.setLeftString(forumInfoBean.getName());
/adapters\RecyclerThreadAdapter.java:182:        ImageUtil.load(forumView.getLeftIconIV(), ImageUtil.LOAD_TYPE_AVATAR, forumInfoBean.getAvatar());
/adapters\RecyclerThreadAdapter.java:183:    }
/adapters\RecyclerThreadAdapter.java:185:    public void addData(@NonNull ThreadContentBean data) {
/adapters\RecyclerThreadAdapter.java:186:        threadBean = data.getThread();
/adapters\RecyclerThreadAdapter.java:187:        dataBean = data;
/adapters\RecyclerThreadAdapter.java:188:        addUser(data.getUserList());
/adapters\RecyclerThreadAdapter.java:189:        addPic(data.getPostList());
/adapters\RecyclerThreadAdapter.java:190:        List<ThreadContentBean.PostListItemBean> postListItemBeans = new ArrayList<>();
/adapters\RecyclerThreadAdapter.java:191:        for (ThreadContentBean.PostListItemBean postListItemBean : data.getPostList()) {
/adapters\RecyclerThreadAdapter.java:192:            if (!needBlock(postListItemBean)) {
/adapters\RecyclerThreadAdapter.java:193:                postListItemBeans.add(postListItemBean);
/adapters\RecyclerThreadAdapter.java:194:            }
/adapters\RecyclerThreadAdapter.java:195:        }
/adapters\RecyclerThreadAdapter.java:196:        setLoadMoreData(postListItemBeans);
/adapters\RecyclerThreadAdapter.java:197:    }
/adapters\RecyclerThreadAdapter.java:199:    private void setUser(List<ThreadContentBean.UserInfoBean> userInfoBeans) {
/adapters\RecyclerThreadAdapter.java:200:        userInfoBeanMap = new HashMap<>();
/adapters\RecyclerThreadAdapter.java:201:        addUser(userInfoBeans);
/adapters\RecyclerThreadAdapter.java:202:    }
/adapters\RecyclerThreadAdapter.java:204:    private void addUser(List<ThreadContentBean.UserInfoBean> userInfoBeans) {
/adapters\RecyclerThreadAdapter.java:205:        for (ThreadContentBean.UserInfoBean userInfoBean : userInfoBeans) {
/adapters\RecyclerThreadAdapter.java:206:            if (userInfoBeanMap.get(userInfoBean.getId()) == null) {
/adapters\RecyclerThreadAdapter.java:207:                userInfoBeanMap.put(userInfoBean.getId(), userInfoBean);
/adapters\RecyclerThreadAdapter.java:208:            }
/adapters\RecyclerThreadAdapter.java:209:        }
/adapters\RecyclerThreadAdapter.java:210:    }
/adapters\RecyclerThreadAdapter.java:212:    private void setPic(List<ThreadContentBean.PostListItemBean> postListItemBeans) {
/adapters\RecyclerThreadAdapter.java:213:        photoViewBeansMap = new TreeMap<>();
/adapters\RecyclerThreadAdapter.java:214:        addPic(postListItemBeans);
/adapters\RecyclerThreadAdapter.java:215:    }
/adapters\RecyclerThreadAdapter.java:217:    private void addPic(List<ThreadContentBean.PostListItemBean> postListItemBeans) {
/adapters\RecyclerThreadAdapter.java:218:        if (postListItemBeans != null) {
/adapters\RecyclerThreadAdapter.java:219:            for (ThreadContentBean.PostListItemBean postListItemBean : postListItemBeans) {
/adapters\RecyclerThreadAdapter.java:220:                List<PhotoViewBean> photoViewBeans = new ArrayList<>();
/adapters\RecyclerThreadAdapter.java:221:                for (ThreadContentBean.ContentBean contentBean : postListItemBean.getContent()) {
/adapters\RecyclerThreadAdapter.java:222:                    String url = ImageUtil.getUrl(mContext, true, contentBean.getOriginSrc(), contentBean.getBigCdnSrc(), contentBean.getCdnSrcActive(), contentBean.getCdnSrc());
/adapters\RecyclerThreadAdapter.java:223:                    if (TextUtils.isEmpty(url)) {
/adapters\RecyclerThreadAdapter.java:224:                        continue;
/adapters\RecyclerThreadAdapter.java:225:                    }
/adapters\RecyclerThreadAdapter.java:226:                    if (contentBean.getType().equals("3")) {
/adapters\RecyclerThreadAdapter.java:227:                        photoViewBeans.add(new PhotoViewBean(url,
/adapters\RecyclerThreadAdapter.java:228:                                ImageUtil.getNonNullString(contentBean.getOriginSrc(), contentBean.getBigCdnSrc(), contentBean.getCdnSrcActive(), contentBean.getCdnSrc()),
/adapters\RecyclerThreadAdapter.java:229:                                "1".equals(contentBean.isLongPic())));
/adapters\RecyclerThreadAdapter.java:230:                    }/* else if (contentBean.getType().equals("20")) {
/adapters\RecyclerThreadAdapter.java:231:                        photoViewBeans.add(new PhotoViewBean(contentBean.getSrc(), contentBean.getSrc(), false));
/adapters\RecyclerThreadAdapter.java:232:                    }
/adapters\RecyclerThreadAdapter.java:233:                   */
/adapters\RecyclerThreadAdapter.java:234:                }
/adapters\RecyclerThreadAdapter.java:235:                photoViewBeansMap.put(Integer.valueOf(postListItemBean.getFloor()), photoViewBeans);
/adapters\RecyclerThreadAdapter.java:236:            }
/adapters\RecyclerThreadAdapter.java:237:        }
/adapters\RecyclerThreadAdapter.java:238:    }
/adapters\RecyclerThreadAdapter.java:240:    private List<PhotoViewBean> getPhotoViewBeans() {
/adapters\RecyclerThreadAdapter.java:241:        List<PhotoViewBean> photoViewBeans = new ArrayList<>();
/adapters\RecyclerThreadAdapter.java:242:        for (int key : photoViewBeansMap.keySet()) {
/adapters\RecyclerThreadAdapter.java:243:            if (photoViewBeansMap.get(key) != null)
/adapters\RecyclerThreadAdapter.java:244:                photoViewBeans.addAll(photoViewBeansMap.get(key));
/adapters\RecyclerThreadAdapter.java:245:        }
/adapters\RecyclerThreadAdapter.java:246:        return photoViewBeans;
/adapters\RecyclerThreadAdapter.java:247:    }
/adapters\RecyclerThreadAdapter.java:249:    private View getContentView(ThreadContentBean.PostListItemBean subPostListItemBean, ThreadContentBean.PostListItemBean postListItemBean) {
/adapters\RecyclerThreadAdapter.java:250:        SpannableStringBuilder builder = new SpannableStringBuilder();
/adapters\RecyclerThreadAdapter.java:251:        ThreadContentBean.UserInfoBean userInfoBean = userInfoBeanMap.get(subPostListItemBean.getAuthorId());
/adapters\RecyclerThreadAdapter.java:252:        if (userInfoBean != null) {
/adapters\RecyclerThreadAdapter.java:253:            builder.append(userInfoBean.getNameShow(), new MyUserSpan(mContext, userInfoBean.getId()), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
/adapters\RecyclerThreadAdapter.java:254:            if (threadBean.getAuthor() != null && userInfoBean.getId() != null && userInfoBean.getId().equals(threadBean.getAuthor().getId())) {
/adapters\RecyclerThreadAdapter.java:255:                builder.append(" ");
/adapters\RecyclerThreadAdapter.java:256:                builder.append("楼主", new RoundBackgroundColorSpan(mContext,
/adapters\RecyclerThreadAdapter.java:257:                        alphaColor(ThemeUtils.getColorByAttr(mContext, R.attr.colorAccent), 30),
/adapters\RecyclerThreadAdapter.java:258:                        ThemeUtils.getColorByAttr(mContext, R.attr.colorAccent),
/adapters\RecyclerThreadAdapter.java:259:                        DisplayUtil.dp2px(mContext, 10)), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
/adapters\RecyclerThreadAdapter.java:260:                builder.append(" ");
/adapters\RecyclerThreadAdapter.java:261:            }
/adapters\RecyclerThreadAdapter.java:262:            builder.append(":");
/adapters\RecyclerThreadAdapter.java:263:        }
/adapters\RecyclerThreadAdapter.java:264:        if (subPostListItemBean.getContent().size() > 0 && "10".equals(subPostListItemBean.getContent().get(0).getType())) {
/adapters\RecyclerThreadAdapter.java:265:            String voiceUrl = "http://c.tieba.baidu.com/c/p/voice?voice_md5=" + subPostListItemBean.getContent().get(0).getVoiceMD5() + "&play_from=pb_voice_play";
/adapters\RecyclerThreadAdapter.java:266:            RelativeLayout container = new RelativeLayout(mContext);
/adapters\RecyclerThreadAdapter.java:267:            container.setLayoutParams(defaultLayoutParamsWithNoMargins);
/adapters\RecyclerThreadAdapter.java:268:            container.setPadding(DisplayUtil.dp2px(mContext, 8),
/adapters\RecyclerThreadAdapter.java:269:                    8,
/adapters\RecyclerThreadAdapter.java:270:                    DisplayUtil.dp2px(mContext, 8),
/adapters\RecyclerThreadAdapter.java:271:                    8);
/adapters\RecyclerThreadAdapter.java:272:            container.setBackground(Util.getDrawableByAttr(mContext, R.attr.selectableItemBackground));
/adapters\RecyclerThreadAdapter.java:273:            container.setOnClickListener(view -> mContext.startActivity(new Intent(mContext, ReplyActivity.class)
/adapters\RecyclerThreadAdapter.java:274:                    .putExtra("data", new ReplyInfoBean(dataBean.getThread().getId(),
/adapters\RecyclerThreadAdapter.java:275:                            dataBean.getForum().getId(),
/adapters\RecyclerThreadAdapter.java:276:                            dataBean.getForum().getName(),
/adapters\RecyclerThreadAdapter.java:277:                            dataBean.getAnti().getTbs(),
/adapters\RecyclerThreadAdapter.java:278:                            postListItemBean.getId(),
/adapters\RecyclerThreadAdapter.java:279:                            subPostListItemBean.getId(),
/adapters\RecyclerThreadAdapter.java:280:                            postListItemBean.getFloor(),
/adapters\RecyclerThreadAdapter.java:281:                            userInfoBean != null ? userInfoBean.getNameShow() : "",
/adapters\RecyclerThreadAdapter.java:282:                            dataBean.getUser().getNameShow()).setPn(dataBean.getPage().getOffset()).toString())));
/adapters\RecyclerThreadAdapter.java:283:            container.setOnLongClickListener(v -> {
/adapters\RecyclerThreadAdapter.java:284:                showMenu(postListItemBean, subPostListItemBean, getAllData().indexOf(postListItemBean), postListItemBean.getSubPostList().getSubPostList().indexOf(subPostListItemBean));
/adapters\RecyclerThreadAdapter.java:285:                return true;
/adapters\RecyclerThreadAdapter.java:286:            });
/adapters\RecyclerThreadAdapter.java:287:            View.inflate(mContext, R.layout.layout_floor_audio, container);
/adapters\RecyclerThreadAdapter.java:288:            TextView mTextView = container.findViewById(R.id.floor_user);
/adapters\RecyclerThreadAdapter.java:289:            VoicePlayerView mVoicePlayerView = container.findViewById(R.id.floor_audio);
/adapters\RecyclerThreadAdapter.java:290:            mVoicePlayerView.setMini(true);
/adapters\RecyclerThreadAdapter.java:291:            mTextView.setText(builder);
/adapters\RecyclerThreadAdapter.java:292:            mVoicePlayerView.setDuration(Integer.valueOf(subPostListItemBean.getContent().get(0).getDuringTime()));
/adapters\RecyclerThreadAdapter.java:293:            mVoicePlayerView.setUrl(voiceUrl);
/adapters\RecyclerThreadAdapter.java:294:            return container;
/adapters\RecyclerThreadAdapter.java:295:        }
/adapters\RecyclerThreadAdapter.java:296:        TextView textView = createTextView(TEXT_VIEW_TYPE_FLOOR);
/adapters\RecyclerThreadAdapter.java:297:        textView.setLayoutParams(defaultLayoutParamsWithNoMargins);
/adapters\RecyclerThreadAdapter.java:298:        for (ThreadContentBean.ContentBean contentBean : subPostListItemBean.getContent()) {
/adapters\RecyclerThreadAdapter.java:299:            switch (contentBean.getType()) {
/adapters\RecyclerThreadAdapter.java:300:                case "0":
/adapters\RecyclerThreadAdapter.java:301:                    if (BlockUtil.needBlock(contentBean.getText()) || BlockUtil.needBlock(userInfoBean)) {
/adapters\RecyclerThreadAdapter.java:302:                        textView.setVisibility(View.GONE);
/adapters\RecyclerThreadAdapter.java:303:                    }
/adapters\RecyclerThreadAdapter.java:304:                    builder.append(contentBean.getText());
/adapters\RecyclerThreadAdapter.java:305:                    break;
/adapters\RecyclerThreadAdapter.java:306:                case "1":
/adapters\RecyclerThreadAdapter.java:307:                    builder.append(contentBean.getText(), new MyURLSpan(mContext, contentBean.getLink()), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
/adapters\RecyclerThreadAdapter.java:308:                    break;
/adapters\RecyclerThreadAdapter.java:309:                case "2":
/adapters\RecyclerThreadAdapter.java:310:                    String emojiText = "#(" + contentBean.getC() + ")";
/adapters\RecyclerThreadAdapter.java:311:                    builder.append(emojiText);
/adapters\RecyclerThreadAdapter.java:312:                    break;
/adapters\RecyclerThreadAdapter.java:313:                case "4":
/adapters\RecyclerThreadAdapter.java:314:                case "9":
/adapters\RecyclerThreadAdapter.java:315:                    builder.append(contentBean.getText());
/adapters\RecyclerThreadAdapter.java:316:                    break;
/adapters\RecyclerThreadAdapter.java:317:                default:
/adapters\RecyclerThreadAdapter.java:318:                    break;
/adapters\RecyclerThreadAdapter.java:319:            }
/adapters\RecyclerThreadAdapter.java:320:        }
/adapters\RecyclerThreadAdapter.java:321:        textView.setText(BilibiliUtil.replaceVideoNumberSpan(mContext, StringUtil.getEmotionContent(EmotionUtil.EMOTION_ALL_TYPE, textView, builder)));
/adapters\RecyclerThreadAdapter.java:322:        textView.setPadding(DisplayUtil.dp2px(mContext, 8),
/adapters\RecyclerThreadAdapter.java:323:                8,
/adapters\RecyclerThreadAdapter.java:324:                DisplayUtil.dp2px(mContext, 8),
/adapters\RecyclerThreadAdapter.java:325:                8);
/adapters\RecyclerThreadAdapter.java:326:        textView.setBackground(Util.getDrawableByAttr(mContext, R.attr.selectableItemBackground));
/adapters\RecyclerThreadAdapter.java:327:        textView.setOnClickListener(view -> mContext.startActivity(new Intent(mContext, ReplyActivity.class)
/adapters\RecyclerThreadAdapter.java:328:                .putExtra("data", new ReplyInfoBean(dataBean.getThread().getId(),
/adapters\RecyclerThreadAdapter.java:329:                        dataBean.getForum().getId(),
/adapters\RecyclerThreadAdapter.java:330:                        dataBean.getForum().getName(),
/adapters\RecyclerThreadAdapter.java:331:                        dataBean.getAnti().getTbs(),
/adapters\RecyclerThreadAdapter.java:332:                        postListItemBean.getId(),
/adapters\RecyclerThreadAdapter.java:333:                        subPostListItemBean.getId(),
/adapters\RecyclerThreadAdapter.java:334:                        postListItemBean.getFloor(),
/adapters\RecyclerThreadAdapter.java:335:                        userInfoBean != null ? userInfoBean.getNameShow() : "",
/adapters\RecyclerThreadAdapter.java:336:                        dataBean.getUser().getNameShow()).setPn(dataBean.getPage().getOffset()).toString())));
/adapters\RecyclerThreadAdapter.java:337:        textView.setOnLongClickListener(v -> {
/adapters\RecyclerThreadAdapter.java:338:            showMenu(postListItemBean, subPostListItemBean, getAllData().indexOf(postListItemBean), postListItemBean.getSubPostList().getSubPostList().indexOf(subPostListItemBean));
/adapters\RecyclerThreadAdapter.java:339:            return true;
/adapters\RecyclerThreadAdapter.java:340:        });
/adapters\RecyclerThreadAdapter.java:341:        return textView;
/adapters\RecyclerThreadAdapter.java:342:    }
/adapters\RecyclerThreadAdapter.java:344:    private void initFloorView(ViewHolder holder, ThreadContentBean.PostListItemBean bean) {
/adapters\RecyclerThreadAdapter.java:345:        TextView more = holder.getView(R.id.thread_list_item_content_floor_more);
/adapters\RecyclerThreadAdapter.java:346:        MyLinearLayout myLinearLayout = holder.getView(R.id.thread_list_item_content_floor);
/adapters\RecyclerThreadAdapter.java:347:        myLinearLayout.removeAllViews();
/adapters\RecyclerThreadAdapter.java:348:        if (bean.getSubPostNumber() != null && bean.getSubPostList() != null && bean.getSubPostList().getSubPostList() != null && bean.getSubPostList().getSubPostList().size() > 0) {
/adapters\RecyclerThreadAdapter.java:349:            holder.setVisibility(R.id.thread_list_item_content_floor_card, View.VISIBLE);
/adapters\RecyclerThreadAdapter.java:350:            int count = Integer.parseInt(bean.getSubPostNumber());
/adapters\RecyclerThreadAdapter.java:351:            List<ThreadContentBean.PostListItemBean> subPostList = bean.getSubPostList().getSubPostList();
/adapters\RecyclerThreadAdapter.java:352:            List<View> views = new ArrayList<>();
/adapters\RecyclerThreadAdapter.java:353:            if (subPostList.size() > MAX_SUB_POST_SHOW) {
/adapters\RecyclerThreadAdapter.java:354:                subPostList = subPostList.subList(0, MAX_SUB_POST_SHOW);
/adapters\RecyclerThreadAdapter.java:355:                holder.setVisibility(R.id.thread_list_item_content_floor_more, View.VISIBLE);
/adapters\RecyclerThreadAdapter.java:356:            } else if (subPostList.size() < count) {
/adapters\RecyclerThreadAdapter.java:357:                holder.setVisibility(R.id.thread_list_item_content_floor_more, View.VISIBLE);
/adapters\RecyclerThreadAdapter.java:358:            } else {
/adapters\RecyclerThreadAdapter.java:359:                holder.setVisibility(R.id.thread_list_item_content_floor_more, View.GONE);
/adapters\RecyclerThreadAdapter.java:360:            }
/adapters\RecyclerThreadAdapter.java:361:            more.setText(mContext.getString(R.string.tip_floor_more_count, String.valueOf(count - subPostList.size())));
/adapters\RecyclerThreadAdapter.java:362:            for (ThreadContentBean.PostListItemBean postListItemBean : subPostList) {
/adapters\RecyclerThreadAdapter.java:363:                views.add(getContentView(postListItemBean, bean));
/adapters\RecyclerThreadAdapter.java:364:            }
/adapters\RecyclerThreadAdapter.java:365:            myLinearLayout.addViews(views);
/adapters\RecyclerThreadAdapter.java:366:            more.setOnClickListener(view -> {
/adapters\RecyclerThreadAdapter.java:367:                try {
/adapters\RecyclerThreadAdapter.java:368:                    if (bean.getSubPostList().getSubPostList().size() < count) {
/adapters\RecyclerThreadAdapter.java:369:                        FloorFragment.newInstance(threadBean.getId(), bean.getSubPostList().getPid(), null, true)
/adapters\RecyclerThreadAdapter.java:370:                                .show(((BaseActivity) mContext).getSupportFragmentManager(), threadBean.getId() + "_Floor");
/adapters\RecyclerThreadAdapter.java:371:                    } else {
/adapters\RecyclerThreadAdapter.java:372:                        myLinearLayout.removeAllViews();
/adapters\RecyclerThreadAdapter.java:373:                        List<View> newViews = new ArrayList<>();
/adapters\RecyclerThreadAdapter.java:374:                        for (ThreadContentBean.PostListItemBean postListItemBean : bean.getSubPostList().getSubPostList()) {
/adapters\RecyclerThreadAdapter.java:375:                            newViews.add(getContentView(postListItemBean, bean));
/adapters\RecyclerThreadAdapter.java:376:                        }
/adapters\RecyclerThreadAdapter.java:377:                        myLinearLayout.addViews(newViews);
/adapters\RecyclerThreadAdapter.java:378:                        more.setVisibility(View.GONE);
/adapters\RecyclerThreadAdapter.java:379:                    }
/adapters\RecyclerThreadAdapter.java:380:                } catch (NumberFormatException e) {
/adapters\RecyclerThreadAdapter.java:381:                    e.printStackTrace();
/adapters\RecyclerThreadAdapter.java:382:                }
/adapters\RecyclerThreadAdapter.java:383:            });
/adapters\RecyclerThreadAdapter.java:384:        } else {
/adapters\RecyclerThreadAdapter.java:385:            holder.setVisibility(R.id.thread_list_item_content_floor_card, View.GONE);
/adapters\RecyclerThreadAdapter.java:386:        }
/adapters\RecyclerThreadAdapter.java:387:    }
/adapters\RecyclerThreadAdapter.java:389:    private int getMaxWidth(String floor) {
/adapters\RecyclerThreadAdapter.java:390:        int maxWidth = screenWidthPx - DisplayUtil.dp2px(mContext, 28 + 38);
/adapters\RecyclerThreadAdapter.java:391:        if (isImmersive() || "1".equals(floor)) {
/adapters\RecyclerThreadAdapter.java:392:            maxWidth = screenWidthPx - DisplayUtil.dp2px(mContext, 28 + 4);
/adapters\RecyclerThreadAdapter.java:393:        }
/adapters\RecyclerThreadAdapter.java:394:        return maxWidth;
/adapters\RecyclerThreadAdapter.java:395:    }
/adapters\RecyclerThreadAdapter.java:397:    private void showMenu(ThreadContentBean.PostListItemBean postListItemBean, ThreadContentBean.PostListItemBean subPostListItemBean, int position, int subPosition) {
/adapters\RecyclerThreadAdapter.java:398:        ThreadContentBean.UserInfoBean userInfoBean = userInfoBeanMap.get(subPostListItemBean.getAuthorId());
/adapters\RecyclerThreadAdapter.java:399:        MenuDialogFragment.newInstance(R.menu.menu_thread_item, null)
/adapters\RecyclerThreadAdapter.java:400:                .setOnNavigationItemSelectedListener(item -> {
/adapters\RecyclerThreadAdapter.java:401:                    switch (item.getItemId()) {
/adapters\RecyclerThreadAdapter.java:402:                        case R.id.menu_reply:
/adapters\RecyclerThreadAdapter.java:403:                            String replyData = new ReplyInfoBean(dataBean.getThread().getId(),
/adapters\RecyclerThreadAdapter.java:404:                                    dataBean.getForum().getId(),
/adapters\RecyclerThreadAdapter.java:405:                                    dataBean.getForum().getName(),
/adapters\RecyclerThreadAdapter.java:406:                                    dataBean.getAnti().getTbs(),
/adapters\RecyclerThreadAdapter.java:407:                                    postListItemBean.getId(),
/adapters\RecyclerThreadAdapter.java:408:                                    subPostListItemBean.getId(),
/adapters\RecyclerThreadAdapter.java:409:                                    postListItemBean.getFloor(),
/adapters\RecyclerThreadAdapter.java:410:                                    userInfoBean != null ? userInfoBean.getNameShow() : "",
/adapters\RecyclerThreadAdapter.java:411:                                    dataBean.getUser().getNameShow()).setPn(dataBean.getPage().getOffset()).toString();
/adapters\RecyclerThreadAdapter.java:412:                            mContext.startActivity(new Intent(mContext, ReplyActivity.class)
/adapters\RecyclerThreadAdapter.java:413:                                    .putExtra("data", replyData));
/adapters\RecyclerThreadAdapter.java:414:                            return true;
/adapters\RecyclerThreadAdapter.java:415:                        case R.id.menu_report:
/adapters\RecyclerThreadAdapter.java:416:                            navigationHelper.navigationByData(NavigationHelper.ACTION_URL, mContext.getString(R.string.url_post_report, dataBean.getForum().getId(), dataBean.getThread().getId(), subPostListItemBean.getId()));
/adapters\RecyclerThreadAdapter.java:417:                            return true;
/adapters\RecyclerThreadAdapter.java:418:                        case R.id.menu_copy:
/adapters\RecyclerThreadAdapter.java:419:                            StringBuilder stringBuilder = new StringBuilder();
/adapters\RecyclerThreadAdapter.java:420:                            for (ThreadContentBean.ContentBean contentBean : subPostListItemBean.getContent()) {
/adapters\RecyclerThreadAdapter.java:421:                                switch (contentBean.getType()) {
/adapters\RecyclerThreadAdapter.java:422:                                    case "2":
/adapters\RecyclerThreadAdapter.java:423:                                        contentBean.setText("#(" + contentBean.getC() + ")");
/adapters\RecyclerThreadAdapter.java:424:                                        break;
/adapters\RecyclerThreadAdapter.java:425:                                    case "3":
/adapters\RecyclerThreadAdapter.java:426:                                    case "20":
/adapters\RecyclerThreadAdapter.java:427:                                        contentBean.setText("[图片]\n");
/adapters\RecyclerThreadAdapter.java:428:                                        break;
/adapters\RecyclerThreadAdapter.java:429:                                    case "10":
/adapters\RecyclerThreadAdapter.java:430:                                        contentBean.setText("[语音]\n");
/adapters\RecyclerThreadAdapter.java:431:                                        break;
/adapters\RecyclerThreadAdapter.java:432:                                }
/adapters\RecyclerThreadAdapter.java:433:                                if (contentBean.getText() != null) {
/adapters\RecyclerThreadAdapter.java:434:                                    stringBuilder.append(contentBean.getText());
/adapters\RecyclerThreadAdapter.java:435:                                }
/adapters\RecyclerThreadAdapter.java:436:                            }
/adapters\RecyclerThreadAdapter.java:437:                            Util.showCopyDialog((BaseActivity) mContext, stringBuilder.toString(), subPostListItemBean.getId());
/adapters\RecyclerThreadAdapter.java:438:                            return true;
/adapters\RecyclerThreadAdapter.java:439:                        case R.id.menu_delete:
/adapters\RecyclerThreadAdapter.java:440:                            if (TextUtils.equals(AccountUtil.getUid(mContext), subPostListItemBean.getAuthorId())) {
/adapters\RecyclerThreadAdapter.java:441:                                ConfirmDialogFragment.newInstance(mContext.getString(R.string.title_dialog_del_post))
/adapters\RecyclerThreadAdapter.java:442:                                        .setOnConfirmListener(() -> {
/adapters\RecyclerThreadAdapter.java:443:                                            TiebaApi.getInstance()
/adapters\RecyclerThreadAdapter.java:444:                                                    .delPost(dataBean.getForum().getId(), dataBean.getForum().getName(), dataBean.getThread().getId(), subPostListItemBean.getId(), dataBean.getAnti().getTbs(), true, true)
/adapters\RecyclerThreadAdapter.java:445:                                                    .enqueue(new Callback<CommonResponse>() {
/adapters\RecyclerThreadAdapter.java:446:                                                        @Override
/adapters\RecyclerThreadAdapter.java:447:                                                        public void onResponse(@NotNull Call<CommonResponse> call, @NotNull Response<CommonResponse> response) {
/adapters\RecyclerThreadAdapter.java:448:                                                            Toast.makeText(mContext, R.string.toast_success, Toast.LENGTH_SHORT).show();
/adapters\RecyclerThreadAdapter.java:449:                                                            postListItemBean.getSubPostList().getSubPostList().remove(subPosition);
/adapters\RecyclerThreadAdapter.java:450:                                                            notifyItemChanged(position);
/adapters\RecyclerThreadAdapter.java:451:                                                        }
/adapters\RecyclerThreadAdapter.java:453:                                                        @Override
/adapters\RecyclerThreadAdapter.java:454:                                                        public void onFailure(@NotNull Call<CommonResponse> call, @NotNull Throwable t) {
/adapters\RecyclerThreadAdapter.java:455:                                                            Toast.makeText(mContext, t.getMessage(), Toast.LENGTH_SHORT).show();
/adapters\RecyclerThreadAdapter.java:456:                                                        }
/adapters\RecyclerThreadAdapter.java:457:                                                    });
/adapters\RecyclerThreadAdapter.java:458:                                        })
/adapters\RecyclerThreadAdapter.java:459:                                        .show(((BaseActivity) mContext).getSupportFragmentManager(), subPostListItemBean.getId() + "_Confirm");
/adapters\RecyclerThreadAdapter.java:460:                            }
/adapters\RecyclerThreadAdapter.java:461:                            return true;
/adapters\RecyclerThreadAdapter.java:462:                    }
/adapters\RecyclerThreadAdapter.java:463:                    return false;
/adapters\RecyclerThreadAdapter.java:464:                })
/adapters\RecyclerThreadAdapter.java:465:                .setInitMenuCallback(menu -> {
/adapters\RecyclerThreadAdapter.java:466:                    if (TextUtils.equals(AccountUtil.getUid(mContext), subPostListItemBean.getAuthorId())) {
/adapters\RecyclerThreadAdapter.java:467:                        menu.findItem(R.id.menu_delete).setVisible(true);
/adapters\RecyclerThreadAdapter.java:468:                    }
/adapters\RecyclerThreadAdapter.java:469:                })
/adapters\RecyclerThreadAdapter.java:470:                .show(((BaseActivity) mContext).getSupportFragmentManager(), subPostListItemBean.getId() + "_" + postListItemBean.getId() + "_Menu");
/adapters\RecyclerThreadAdapter.java:471:    }
/adapters\RecyclerThreadAdapter.java:473:    private void showMenu(ThreadContentBean.PostListItemBean postListItemBean, int position) {
/adapters\RecyclerThreadAdapter.java:474:        ThreadContentBean.UserInfoBean userInfoBean = userInfoBeanMap.get(postListItemBean.getAuthorId());
/adapters\RecyclerThreadAdapter.java:475:        MenuDialogFragment.newInstance(R.menu.menu_thread_item, null)
/adapters\RecyclerThreadAdapter.java:476:                .setOnNavigationItemSelectedListener(item -> {
/adapters\RecyclerThreadAdapter.java:477:                    switch (item.getItemId()) {
/adapters\RecyclerThreadAdapter.java:478:                        case R.id.menu_reply:
/adapters\RecyclerThreadAdapter.java:479:                            mContext.startActivity(new Intent(mContext, ReplyActivity.class)
/adapters\RecyclerThreadAdapter.java:480:                                    .putExtra("data", new ReplyInfoBean(dataBean.getThread().getId(),
/adapters\RecyclerThreadAdapter.java:481:                                            dataBean.getForum().getId(),
/adapters\RecyclerThreadAdapter.java:482:                                            dataBean.getForum().getName(),
/adapters\RecyclerThreadAdapter.java:483:                                            dataBean.getAnti().getTbs(),
/adapters\RecyclerThreadAdapter.java:484:                                            postListItemBean.getId(),
/adapters\RecyclerThreadAdapter.java:485:                                            postListItemBean.getFloor(),
/adapters\RecyclerThreadAdapter.java:486:                                            userInfoBean != null ? userInfoBean.getNameShow() : "",
/adapters\RecyclerThreadAdapter.java:487:                                            dataBean.getUser().getNameShow()).setPn(dataBean.getPage().getOffset()).toString()));
/adapters\RecyclerThreadAdapter.java:488:                            return true;
/adapters\RecyclerThreadAdapter.java:489:                        case R.id.menu_report:
/adapters\RecyclerThreadAdapter.java:490:                            navigationHelper.navigationByData(NavigationHelper.ACTION_URL, mContext.getString(R.string.url_post_report, dataBean.getForum().getId(), dataBean.getThread().getId(), postListItemBean.getId()));
/adapters\RecyclerThreadAdapter.java:491:                            return true;
/adapters\RecyclerThreadAdapter.java:492:                        case R.id.menu_copy:
/adapters\RecyclerThreadAdapter.java:493:                            StringBuilder stringBuilder = new StringBuilder();
/adapters\RecyclerThreadAdapter.java:494:                            for (ThreadContentBean.ContentBean contentBean : postListItemBean.getContent()) {
/adapters\RecyclerThreadAdapter.java:495:                                switch (contentBean.getType()) {
/adapters\RecyclerThreadAdapter.java:496:                                    case "2":
/adapters\RecyclerThreadAdapter.java:497:                                        contentBean.setText("#(" + contentBean.getC() + ")");
/adapters\RecyclerThreadAdapter.java:498:                                        break;
/adapters\RecyclerThreadAdapter.java:499:                                    case "3":
/adapters\RecyclerThreadAdapter.java:500:                                    case "20":
/adapters\RecyclerThreadAdapter.java:501:                                        contentBean.setText("[图片]\n");
/adapters\RecyclerThreadAdapter.java:502:                                        break;
/adapters\RecyclerThreadAdapter.java:503:                                    case "10":
/adapters\RecyclerThreadAdapter.java:504:                                        contentBean.setText("[语音]\n");
/adapters\RecyclerThreadAdapter.java:505:                                        break;
/adapters\RecyclerThreadAdapter.java:506:                                }
/adapters\RecyclerThreadAdapter.java:507:                                if (contentBean.getText() != null) {
/adapters\RecyclerThreadAdapter.java:508:                                    stringBuilder.append(contentBean.getText());
/adapters\RecyclerThreadAdapter.java:509:                                }
/adapters\RecyclerThreadAdapter.java:510:                            }
/adapters\RecyclerThreadAdapter.java:511:                            Util.showCopyDialog((BaseActivity) mContext, stringBuilder.toString(), postListItemBean.getId());
/adapters\RecyclerThreadAdapter.java:512:                            return true;
/adapters\RecyclerThreadAdapter.java:513:                        case R.id.menu_delete:
/adapters\RecyclerThreadAdapter.java:514:                            if (TextUtils.equals(dataBean.getUser().getId(), postListItemBean.getAuthorId()) || TextUtils.equals(dataBean.getUser().getId(), dataBean.getThread().getAuthor().getId())) {
/adapters\RecyclerThreadAdapter.java:515:                                ConfirmDialogFragment.newInstance(mContext.getString(R.string.title_dialog_del_post))
/adapters\RecyclerThreadAdapter.java:516:                                        .setOnConfirmListener(() -> {
/adapters\RecyclerThreadAdapter.java:517:                                            TiebaApi.getInstance()
/adapters\RecyclerThreadAdapter.java:518:                                                    .delPost(dataBean.getForum().getId(), dataBean.getForum().getName(), dataBean.getThread().getId(), postListItemBean.getId(), dataBean.getAnti().getTbs(), TextUtils.equals(dataBean.getUser().getId(), postListItemBean.getAuthorId()), false)
/adapters\RecyclerThreadAdapter.java:519:                                                    .enqueue(new Callback<CommonResponse>() {
/adapters\RecyclerThreadAdapter.java:520:                                                        @Override
/adapters\RecyclerThreadAdapter.java:521:                                                        public void onResponse(@NotNull Call<CommonResponse> call, @NotNull Response<CommonResponse> response) {
/adapters\RecyclerThreadAdapter.java:522:                                                            Toast.makeText(mContext, R.string.toast_success, Toast.LENGTH_SHORT).show();
/adapters\RecyclerThreadAdapter.java:523:                                                            remove(position);
/adapters\RecyclerThreadAdapter.java:524:                                                        }
/adapters\RecyclerThreadAdapter.java:526:                                                        @Override
/adapters\RecyclerThreadAdapter.java:527:                                                        public void onFailure(@NotNull Call<CommonResponse> call, @NotNull Throwable t) {
/adapters\RecyclerThreadAdapter.java:528:                                                            Toast.makeText(mContext, t.getMessage(), Toast.LENGTH_SHORT).show();
/adapters\RecyclerThreadAdapter.java:529:                                                        }
/adapters\RecyclerThreadAdapter.java:530:                                                    });
/adapters\RecyclerThreadAdapter.java:531:                                        })
/adapters\RecyclerThreadAdapter.java:532:                                        .show(((BaseActivity) mContext).getSupportFragmentManager(), postListItemBean.getId() + "_Delete_Confirm");
/adapters\RecyclerThreadAdapter.java:533:                            }
/adapters\RecyclerThreadAdapter.java:534:                            return true;
/adapters\RecyclerThreadAdapter.java:535:                    }
/adapters\RecyclerThreadAdapter.java:536:                    return false;
/adapters\RecyclerThreadAdapter.java:537:                })
/adapters\RecyclerThreadAdapter.java:538:                .setInitMenuCallback(menu -> {
/adapters\RecyclerThreadAdapter.java:539:                    if (TextUtils.equals(dataBean.getUser().getId(), postListItemBean.getAuthorId()) || TextUtils.equals(dataBean.getUser().getId(), dataBean.getThread().getAuthor().getId())) {
/adapters\RecyclerThreadAdapter.java:540:                        menu.findItem(R.id.menu_delete).setVisible(true);
/adapters\RecyclerThreadAdapter.java:541:                    }
/adapters\RecyclerThreadAdapter.java:542:                })
/adapters\RecyclerThreadAdapter.java:543:                .show(((BaseActivity) mContext).getSupportFragmentManager(), postListItemBean.getId() + "_Menu");
/adapters\RecyclerThreadAdapter.java:544:    }
/adapters\RecyclerThreadAdapter.java:546:    @Override
/adapters\RecyclerThreadAdapter.java:547:    protected void convert(ViewHolder holder, ThreadContentBean.PostListItemBean data, int position, int type) {
/adapters\RecyclerThreadAdapter.java:548:        if (type == TYPE_THREAD) {
/adapters\RecyclerThreadAdapter.java:549:            SuperTextView forumView = holder.getView(R.id.forum_bar);
/adapters\RecyclerThreadAdapter.java:550:            View dividerView = holder.getView(R.id.forum_bar_divider);
/adapters\RecyclerThreadAdapter.java:551:            refreshForumView(dataBean.getForum(), forumView, dividerView);
/adapters\RecyclerThreadAdapter.java:552:        }
/adapters\RecyclerThreadAdapter.java:553:        ThreadContentBean.UserInfoBean userInfoBean = userInfoBeanMap.get(data.getAuthorId());
/adapters\RecyclerThreadAdapter.java:554:        if (dataBean != null && dataBean.getThread() != null && dataBean.getThread().getAuthor() != null && data.getAuthorId().equals(dataBean.getThread().getAuthor().getId())) {
/adapters\RecyclerThreadAdapter.java:555:            holder.setVisibility(R.id.thread_list_item_user_lz_tip, View.VISIBLE);
/adapters\RecyclerThreadAdapter.java:556:        } else {
/adapters\RecyclerThreadAdapter.java:557:            holder.setVisibility(R.id.thread_list_item_user_lz_tip, View.GONE);
/adapters\RecyclerThreadAdapter.java:558:        }
/adapters\RecyclerThreadAdapter.java:559:        holder.getConvertView().setOnLongClickListener(view -> {
/adapters\RecyclerThreadAdapter.java:560:            showMenu(data, position);
/adapters\RecyclerThreadAdapter.java:561:            return true;
/adapters\RecyclerThreadAdapter.java:562:        });
/adapters\RecyclerThreadAdapter.java:563:        holder.setText(R.id.thread_list_item_user_name, userInfoBean == null ? data.getAuthorId() : StringUtil.getUsernameString(mContext, userInfoBean.getName(), userInfoBean.getNameShow()));
/adapters\RecyclerThreadAdapter.java:564:        holder.setText(R.id.thread_list_item_user_time, mContext.getString(R.string.tip_thread_item, data.getFloor(), String.valueOf(DateUtils.getRelativeTimeSpanString(Long.valueOf(data.getTime()) * 1000L))));
/adapters\RecyclerThreadAdapter.java:565:        holder.setText(R.id.thread_list_item_content_title, data.getTitle());
/adapters\RecyclerThreadAdapter.java:566:        holder.setOnClickListener(R.id.thread_list_item_reply, view -> showMenu(data, position));
/adapters\RecyclerThreadAdapter.java:567:        if ("1".equals(data.getFloor()))
/adapters\RecyclerThreadAdapter.java:568:            holder.setVisibility(R.id.thread_list_item_reply, View.GONE);
/adapters\RecyclerThreadAdapter.java:569:        else
/adapters\RecyclerThreadAdapter.java:570:            holder.setVisibility(R.id.thread_list_item_reply, View.VISIBLE);
/adapters\RecyclerThreadAdapter.java:571:        if (userInfoBean != null) {
/adapters\RecyclerThreadAdapter.java:572:            String levelId = userInfoBean.getLevelId() == null || TextUtils.isEmpty(userInfoBean.getLevelId()) ? "?" : userInfoBean.getLevelId();
/adapters\RecyclerThreadAdapter.java:573:            ThemeUtil.setChipThemeByLevel(levelId,
/adapters\RecyclerThreadAdapter.java:574:                    holder.getView(R.id.thread_list_item_user_status),
/adapters\RecyclerThreadAdapter.java:575:                    holder.getView(R.id.thread_list_item_user_level),
/adapters\RecyclerThreadAdapter.java:576:                    holder.getView(R.id.thread_list_item_user_lz_tip));
/adapters\RecyclerThreadAdapter.java:577:            holder.setText(R.id.thread_list_item_user_level, levelId);
/adapters\RecyclerThreadAdapter.java:578:            holder.setOnClickListener(R.id.thread_list_item_user_avatar, view -> {
/adapters\RecyclerThreadAdapter.java:579:                NavigationHelper.toUserSpaceWithAnim(mContext, userInfoBean.getId(), StringUtil.getAvatarUrl(userInfoBean.getPortrait()), view);
/adapters\RecyclerThreadAdapter.java:580:            });
/adapters\RecyclerThreadAdapter.java:581:            ImageUtil.load(holder.getView(R.id.thread_list_item_user_avatar), ImageUtil.LOAD_TYPE_AVATAR, userInfoBean.getPortrait());
/adapters\RecyclerThreadAdapter.java:582:        }
/adapters\RecyclerThreadAdapter.java:583:        if (!"1".equals(data.getFloor()))
/adapters\RecyclerThreadAdapter.java:584:            holder.setVisibility(R.id.thread_list_item_content_title, View.GONE);
/adapters\RecyclerThreadAdapter.java:585:        else
/adapters\RecyclerThreadAdapter.java:586:            holder.setVisibility(R.id.thread_list_item_content_title, View.VISIBLE);
/adapters\RecyclerThreadAdapter.java:587:        initContentView(holder, data, position);
/adapters\RecyclerThreadAdapter.java:588:        initFloorView(holder, data);
/adapters\RecyclerThreadAdapter.java:589:        if (isImmersive()) {
/adapters\RecyclerThreadAdapter.java:590:            holder.getView(R.id.thread_list_item_content).setPadding(DisplayUtil.dp2px(mContext, 4), 0, DisplayUtil.dp2px(mContext, 4), 0);
/adapters\RecyclerThreadAdapter.java:591:            holder.setVisibility(R.id.thread_list_item_user, View.GONE);
/adapters\RecyclerThreadAdapter.java:592:            holder.setVisibility(R.id.thread_list_item_content_floor_card, View.GONE);
/adapters\RecyclerThreadAdapter.java:593:        } else {
/adapters\RecyclerThreadAdapter.java:594:            if (type == TYPE_THREAD) {
/adapters\RecyclerThreadAdapter.java:595:                holder.getView(R.id.thread_list_item_content).setPadding(DisplayUtil.dp2px(mContext, 4), 0, DisplayUtil.dp2px(mContext, 4), 0);
/adapters\RecyclerThreadAdapter.java:596:            } else {
/adapters\RecyclerThreadAdapter.java:597:                if (holder.getView(R.id.thread_list_item_content).getLayoutDirection() == View.LAYOUT_DIRECTION_LTR) {
/adapters\RecyclerThreadAdapter.java:598:                    holder.getView(R.id.thread_list_item_content).setPadding(DisplayUtil.dp2px(mContext, 38), 0, DisplayUtil.dp2px(mContext, 4), 0);
/adapters\RecyclerThreadAdapter.java:599:                } else {
/adapters\RecyclerThreadAdapter.java:600:                    holder.getView(R.id.thread_list_item_content).setPadding(DisplayUtil.dp2px(mContext, 4), 0, DisplayUtil.dp2px(mContext, 38), 0);
/adapters\RecyclerThreadAdapter.java:601:                }
/adapters\RecyclerThreadAdapter.java:602:            }
/adapters\RecyclerThreadAdapter.java:603:            holder.setVisibility(R.id.thread_list_item_user, View.VISIBLE);
/adapters\RecyclerThreadAdapter.java:604:        }
/adapters\RecyclerThreadAdapter.java:605:    }
/adapters\RecyclerThreadAdapter.java:607:    @Override
/adapters\RecyclerThreadAdapter.java:608:    protected int getItemLayoutId(int type) {
/adapters\RecyclerThreadAdapter.java:609:        return type == TYPE_THREAD ? R.layout.item_thread_list_post : R.layout.item_thread_list;
/adapters\RecyclerThreadAdapter.java:610:    }
/adapters\RecyclerThreadAdapter.java:612:    private boolean appendTextToLastTextView(List<View> views, CharSequence newContent) {
/adapters\RecyclerThreadAdapter.java:613:        if (views.size() > 0) {
/adapters\RecyclerThreadAdapter.java:614:            View lastView = views.get(views.size() - 1);
/adapters\RecyclerThreadAdapter.java:615:            if (lastView instanceof TextView) {
/adapters\RecyclerThreadAdapter.java:616:                TextView lastTextView = (TextView) lastView;
/adapters\RecyclerThreadAdapter.java:617:                SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(lastTextView.getText());
/adapters\RecyclerThreadAdapter.java:618:                spannableStringBuilder.append(newContent);
/adapters\RecyclerThreadAdapter.java:619:                setText(lastTextView, spannableStringBuilder);
/adapters\RecyclerThreadAdapter.java:620:                return false;
/adapters\RecyclerThreadAdapter.java:621:            }
/adapters\RecyclerThreadAdapter.java:622:        }
/adapters\RecyclerThreadAdapter.java:623:        return true;
/adapters\RecyclerThreadAdapter.java:624:    }
/adapters\RecyclerThreadAdapter.java:626:    private boolean appendLinkToLastTextView(List<View> views, CharSequence newContent, String url) {
/adapters\RecyclerThreadAdapter.java:627:        if (views.size() > 0) {
/adapters\RecyclerThreadAdapter.java:628:            View lastView = views.get(views.size() - 1);
/adapters\RecyclerThreadAdapter.java:629:            if (lastView instanceof TextView) {
/adapters\RecyclerThreadAdapter.java:630:                TextView lastTextView = (TextView) lastView;
/adapters\RecyclerThreadAdapter.java:631:                setText(lastTextView, getLinkContent(lastTextView.getText(), newContent, url));
/adapters\RecyclerThreadAdapter.java:632:                return false;
/adapters\RecyclerThreadAdapter.java:633:            }
/adapters\RecyclerThreadAdapter.java:634:        }
/adapters\RecyclerThreadAdapter.java:635:        return true;
/adapters\RecyclerThreadAdapter.java:636:    }
/adapters\RecyclerThreadAdapter.java:638:    private CharSequence getLinkContent(CharSequence newContent, String url) {
/adapters\RecyclerThreadAdapter.java:639:        return getLinkContent("", newContent, url);
/adapters\RecyclerThreadAdapter.java:640:    }
/adapters\RecyclerThreadAdapter.java:642:    private CharSequence getLinkContent(CharSequence oldContent, CharSequence newContent, String url) {
/adapters\RecyclerThreadAdapter.java:643:        String linkIconText = "[链接]";
/adapters\RecyclerThreadAdapter.java:644:        String s = " ";
/adapters\RecyclerThreadAdapter.java:645:        int start = oldContent.length();
/adapters\RecyclerThreadAdapter.java:646:        int end = start + s.length() + linkIconText.length() + newContent.length();
/adapters\RecyclerThreadAdapter.java:647:        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(oldContent);
/adapters\RecyclerThreadAdapter.java:648:        Bitmap bitmap = Util.getBitmapFromVectorDrawable(mContext, R.drawable.ic_link);
/adapters\RecyclerThreadAdapter.java:649:        int size = DisplayUtil.sp2px(mContext, 16);
/adapters\RecyclerThreadAdapter.java:650:        int color = ThemeUtils.getColorByAttr(mContext, R.attr.colorAccent);
/adapters\RecyclerThreadAdapter.java:651:        bitmap = Bitmap.createScaledBitmap(bitmap, size, size, true);
/adapters\RecyclerThreadAdapter.java:652:        bitmap = Util.tintBitmap(bitmap, color);
/adapters\RecyclerThreadAdapter.java:653:        spannableStringBuilder.append(linkIconText, new MyImageSpan(mContext, bitmap), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
/adapters\RecyclerThreadAdapter.java:654:        spannableStringBuilder.append(s);
/adapters\RecyclerThreadAdapter.java:655:        spannableStringBuilder.append(newContent);
/adapters\RecyclerThreadAdapter.java:656:        spannableStringBuilder.setSpan(new MyURLSpan(mContext, url), start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
/adapters\RecyclerThreadAdapter.java:657:        return spannableStringBuilder;
/adapters\RecyclerThreadAdapter.java:658:    }
/adapters\RecyclerThreadAdapter.java:660:    private boolean appendUserToLastTextView(List<View> views, CharSequence newContent, String uid) {
/adapters\RecyclerThreadAdapter.java:661:        if (views.size() > 0) {
/adapters\RecyclerThreadAdapter.java:662:            View lastView = views.get(views.size() - 1);
/adapters\RecyclerThreadAdapter.java:663:            if (lastView instanceof TextView) {
/adapters\RecyclerThreadAdapter.java:664:                TextView lastTextView = (TextView) lastView;
/adapters\RecyclerThreadAdapter.java:665:                setText(lastTextView, getUserContent(lastTextView.getText(), newContent, uid));
/adapters\RecyclerThreadAdapter.java:666:                return false;
/adapters\RecyclerThreadAdapter.java:667:            }
/adapters\RecyclerThreadAdapter.java:668:        }
/adapters\RecyclerThreadAdapter.java:669:        return true;
/adapters\RecyclerThreadAdapter.java:670:    }
/adapters\RecyclerThreadAdapter.java:672:    private CharSequence getUserContent(CharSequence newContent, String uid) {
/adapters\RecyclerThreadAdapter.java:673:        return getUserContent("", newContent, uid);
/adapters\RecyclerThreadAdapter.java:674:    }
/adapters\RecyclerThreadAdapter.java:676:    private CharSequence getUserContent(CharSequence oldContent, CharSequence newContent, String uid) {
/adapters\RecyclerThreadAdapter.java:677:        int start = oldContent.length();
/adapters\RecyclerThreadAdapter.java:678:        int end = start + newContent.length();
/adapters\RecyclerThreadAdapter.java:679:        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(oldContent);
/adapters\RecyclerThreadAdapter.java:680:        spannableStringBuilder.append(newContent);
/adapters\RecyclerThreadAdapter.java:681:        spannableStringBuilder.setSpan(new MyUserSpan(mContext, uid), start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
/adapters\RecyclerThreadAdapter.java:682:        return spannableStringBuilder;
/adapters\RecyclerThreadAdapter.java:683:    }
/adapters\RecyclerThreadAdapter.java:685:    private TextView createTextView(int type) {
/adapters\RecyclerThreadAdapter.java:686:        TextView textView;
/adapters\RecyclerThreadAdapter.java:687:        if (type == TEXT_VIEW_TYPE_CONTENT) {
/adapters\RecyclerThreadAdapter.java:688:            TintMySpannableTextView mySpannableTextView = new TintMySpannableTextView(mContext);
/adapters\RecyclerThreadAdapter.java:689:            mySpannableTextView.setTintResId(R.color.default_color_text);
/adapters\RecyclerThreadAdapter.java:690:            mySpannableTextView.setLinkTouchMovementMethod(LinkTouchMovementMethod.getInstance());
/adapters\RecyclerThreadAdapter.java:691:            textView = mySpannableTextView;
/adapters\RecyclerThreadAdapter.java:692:        } else {
/adapters\RecyclerThreadAdapter.java:693:            TintTextView tintTextView = new TintTextView(mContext);
/adapters\RecyclerThreadAdapter.java:694:            tintTextView.setTintResId(R.color.default_color_text);
/adapters\RecyclerThreadAdapter.java:695:            tintTextView.setMovementMethod(LinkMovementClickMethod.getInstance());
/adapters\RecyclerThreadAdapter.java:696:            textView = tintTextView;
/adapters\RecyclerThreadAdapter.java:697:        }
/adapters\RecyclerThreadAdapter.java:698:        textView.setFocusable(false);
/adapters\RecyclerThreadAdapter.java:699:        textView.setClickable(false);
/adapters\RecyclerThreadAdapter.java:700:        textView.setLongClickable(false);
/adapters\RecyclerThreadAdapter.java:701:        textView.setTextIsSelectable(false);
/adapters\RecyclerThreadAdapter.java:702:        textView.setOnClickListener(null);
/adapters\RecyclerThreadAdapter.java:703:        textView.setOnLongClickListener(null);
/adapters\RecyclerThreadAdapter.java:704:        textView.setLetterSpacing(0.02F);
/adapters\RecyclerThreadAdapter.java:705:        if (type == TEXT_VIEW_TYPE_CONTENT) {
/adapters\RecyclerThreadAdapter.java:706:            textView.setTextSize(16);
/adapters\RecyclerThreadAdapter.java:707:            if (isImmersive()) {
/adapters\RecyclerThreadAdapter.java:708:                textView.setLineSpacing(0.5F, 1.3F);
/adapters\RecyclerThreadAdapter.java:709:            } else {
/adapters\RecyclerThreadAdapter.java:710:                textView.setLineSpacing(0.5F, 1.2F);
/adapters\RecyclerThreadAdapter.java:711:            }
/adapters\RecyclerThreadAdapter.java:712:        }
/adapters\RecyclerThreadAdapter.java:713:        return textView;
/adapters\RecyclerThreadAdapter.java:714:    }
/adapters\RecyclerThreadAdapter.java:716:    private void setText(TextView textView, CharSequence content) {
/adapters\RecyclerThreadAdapter.java:717:        content = BilibiliUtil.replaceVideoNumberSpan(mContext, content);
/adapters\RecyclerThreadAdapter.java:718:        content = StringUtil.getEmotionContent(EmotionUtil.EMOTION_ALL_TYPE, textView, content);
/adapters\RecyclerThreadAdapter.java:719:        textView.setText(content);
/adapters\RecyclerThreadAdapter.java:720:    }
/adapters\RecyclerThreadAdapter.java:722:    private LinearLayout.LayoutParams getLayoutParams(ThreadContentBean.ContentBean contentBean, String floor) {
/adapters\RecyclerThreadAdapter.java:723:        if (!"3".equals(contentBean.getType()) && !"20".equals(contentBean.getType()) && !"5".equals(contentBean.getType())) {
/adapters\RecyclerThreadAdapter.java:724:            return defaultLayoutParams;
/adapters\RecyclerThreadAdapter.java:725:        }
/adapters\RecyclerThreadAdapter.java:726:        float widthFloat, heightFloat;
/adapters\RecyclerThreadAdapter.java:727:        if (contentBean.getType().equals("3") || contentBean.getType().equals("20")) {
/adapters\RecyclerThreadAdapter.java:728:            String[] strings = contentBean.getBsize().split(",");
/adapters\RecyclerThreadAdapter.java:729:            widthFloat = Float.valueOf(strings[0]);
/adapters\RecyclerThreadAdapter.java:730:            heightFloat = Float.valueOf(strings[1]);
/adapters\RecyclerThreadAdapter.java:731:            heightFloat *= getMaxWidth(floor) / widthFloat;
/adapters\RecyclerThreadAdapter.java:732:            widthFloat = getMaxWidth(floor);
/adapters\RecyclerThreadAdapter.java:733:        } else {
/adapters\RecyclerThreadAdapter.java:734:            float width = Float.valueOf(contentBean.getWidth());
/adapters\RecyclerThreadAdapter.java:735:            widthFloat = getMaxWidth(floor);
/adapters\RecyclerThreadAdapter.java:736:            heightFloat = Float.valueOf(contentBean.getHeight());
/adapters\RecyclerThreadAdapter.java:737:            heightFloat *= widthFloat / width;
/adapters\RecyclerThreadAdapter.java:738:        }
/adapters\RecyclerThreadAdapter.java:739:        int width = Math.round(widthFloat);
/adapters\RecyclerThreadAdapter.java:740:        int height = Math.round(heightFloat);
/adapters\RecyclerThreadAdapter.java:741:        LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(width, height);
/adapters\RecyclerThreadAdapter.java:742:        layoutParams.gravity = Gravity.CENTER_HORIZONTAL;
/adapters\RecyclerThreadAdapter.java:743:        int dp16 = DisplayUtil.dp2px(mContext, 16);
/adapters\RecyclerThreadAdapter.java:744:        int dp4 = DisplayUtil.dp2px(mContext, 4);
/adapters\RecyclerThreadAdapter.java:745:        int dp2 = DisplayUtil.dp2px(mContext, 2);
/adapters\RecyclerThreadAdapter.java:746:        if ("1".equals(floor)) {
/adapters\RecyclerThreadAdapter.java:747:            layoutParams.setMargins(dp16, dp2, dp16, dp2);
/adapters\RecyclerThreadAdapter.java:748:        } else {
/adapters\RecyclerThreadAdapter.java:749:            layoutParams.setMargins(dp4, dp2, dp4, dp2);
/adapters\RecyclerThreadAdapter.java:750:        }
/adapters\RecyclerThreadAdapter.java:751:        return layoutParams;
/adapters\RecyclerThreadAdapter.java:752:    }
/adapters\RecyclerThreadAdapter.java:754:    private boolean needBlock(ThreadContentBean.PostListItemBean postListItemBean) {
/adapters\RecyclerThreadAdapter.java:755:        if (blockCacheMap != null && blockCacheMap.get(postListItemBean.getFloor()) != null) {
/adapters\RecyclerThreadAdapter.java:756:            return blockCacheMap.get(postListItemBean.getFloor());
/adapters\RecyclerThreadAdapter.java:757:        }
/adapters\RecyclerThreadAdapter.java:758:        if (postListItemBean.getAuthor() != null && BlockUtil.needBlock(postListItemBean.getAuthor())) {
/adapters\RecyclerThreadAdapter.java:759:            blockCacheMap.put(postListItemBean.getFloor(), true);
/adapters\RecyclerThreadAdapter.java:760:            return true;
/adapters\RecyclerThreadAdapter.java:761:        }
/adapters\RecyclerThreadAdapter.java:762:        ThreadContentBean.UserInfoBean userInfoBean = userInfoBeanMap.get(postListItemBean.getAuthorId());
/adapters\RecyclerThreadAdapter.java:763:        if (userInfoBean != null && BlockUtil.needBlock(userInfoBean.getName(), userInfoBean.getId())) {
/adapters\RecyclerThreadAdapter.java:764:            blockCacheMap.put(postListItemBean.getFloor(), true);
/adapters\RecyclerThreadAdapter.java:765:            return true;
/adapters\RecyclerThreadAdapter.java:766:        }
/adapters\RecyclerThreadAdapter.java:767:        for (ThreadContentBean.ContentBean contentBean : postListItemBean.getContent()) {
/adapters\RecyclerThreadAdapter.java:768:            switch (contentBean.getType()) {
/adapters\RecyclerThreadAdapter.java:769:                case "0":
/adapters\RecyclerThreadAdapter.java:770:                    if (BlockUtil.needBlock(contentBean.getText())) {
/adapters\RecyclerThreadAdapter.java:771:                        blockCacheMap.put(postListItemBean.getFloor(), true);
/adapters\RecyclerThreadAdapter.java:772:                        return true;
/adapters\RecyclerThreadAdapter.java:773:                    }
/adapters\RecyclerThreadAdapter.java:774:                    break;
/adapters\RecyclerThreadAdapter.java:775:            }
/adapters\RecyclerThreadAdapter.java:776:        }
/adapters\RecyclerThreadAdapter.java:777:        blockCacheMap.put(postListItemBean.getFloor(), false);
/adapters\RecyclerThreadAdapter.java:778:        return false;
/adapters\RecyclerThreadAdapter.java:779:    }
/adapters\RecyclerThreadAdapter.java:781:    private List<View> getContentViews(ThreadContentBean.PostListItemBean postListItemBean, int position) {
/adapters\RecyclerThreadAdapter.java:782:        List<View> views = new ArrayList<>();
/adapters\RecyclerThreadAdapter.java:783:        for (ThreadContentBean.ContentBean contentBean : postListItemBean.getContent()) {
/adapters\RecyclerThreadAdapter.java:784:            switch (contentBean.getType()) {
/adapters\RecyclerThreadAdapter.java:785:                case "0":
/adapters\RecyclerThreadAdapter.java:786:                case "9": {
/adapters\RecyclerThreadAdapter.java:787:                    if (appendTextToLastTextView(views, contentBean.getText())) {
/adapters\RecyclerThreadAdapter.java:788:                        TextView textView = createTextView(TEXT_VIEW_TYPE_CONTENT);
/adapters\RecyclerThreadAdapter.java:789:                        textView.setLayoutParams(getLayoutParams(contentBean, postListItemBean.getFloor()));
/adapters\RecyclerThreadAdapter.java:790:                        setText(textView, contentBean.getText());
/adapters\RecyclerThreadAdapter.java:791:                        views.add(textView);
/adapters\RecyclerThreadAdapter.java:792:                    }
/adapters\RecyclerThreadAdapter.java:793:                }
/adapters\RecyclerThreadAdapter.java:794:                break;
/adapters\RecyclerThreadAdapter.java:795:                case "1":
/adapters\RecyclerThreadAdapter.java:796:                    if (appendLinkToLastTextView(views, contentBean.getText(), contentBean.getLink())) {
/adapters\RecyclerThreadAdapter.java:797:                        TextView textView = createTextView(TEXT_VIEW_TYPE_CONTENT);
/adapters\RecyclerThreadAdapter.java:798:                        textView.setLayoutParams(getLayoutParams(contentBean, postListItemBean.getFloor()));
/adapters\RecyclerThreadAdapter.java:799:                        setText(textView, getLinkContent(contentBean.getText(), contentBean.getLink()));
/adapters\RecyclerThreadAdapter.java:800:                        views.add(textView);
/adapters\RecyclerThreadAdapter.java:801:                    }
/adapters\RecyclerThreadAdapter.java:802:                    break;
/adapters\RecyclerThreadAdapter.java:803:                case "2":
/adapters\RecyclerThreadAdapter.java:804:                    String emojiText = "#(" + contentBean.getC() + ")";
/adapters\RecyclerThreadAdapter.java:805:                    if (appendTextToLastTextView(views, emojiText)) {
/adapters\RecyclerThreadAdapter.java:806:                        TextView textView = createTextView(TEXT_VIEW_TYPE_CONTENT);
/adapters\RecyclerThreadAdapter.java:807:                        textView.setLayoutParams(getLayoutParams(contentBean, postListItemBean.getFloor()));
/adapters\RecyclerThreadAdapter.java:808:                        setText(textView, emojiText);
/adapters\RecyclerThreadAdapter.java:809:                        views.add(textView);
/adapters\RecyclerThreadAdapter.java:810:                    }
/adapters\RecyclerThreadAdapter.java:811:                    break;
/adapters\RecyclerThreadAdapter.java:812:                case "3":
/adapters\RecyclerThreadAdapter.java:813:                    String url = ImageUtil.getUrl(mContext, true, contentBean.getOriginSrc(), contentBean.getBigCdnSrc(), contentBean.getCdnSrcActive(), contentBean.getCdnSrc());
/adapters\RecyclerThreadAdapter.java:814:                    if (TextUtils.isEmpty(url)) {
/adapters\RecyclerThreadAdapter.java:815:                        break;
/adapters\RecyclerThreadAdapter.java:816:                    }
/adapters\RecyclerThreadAdapter.java:817:                    MyImageView imageView = new MyImageView(mContext);
/adapters\RecyclerThreadAdapter.java:818:                    imageView.setLayoutParams(getLayoutParams(contentBean, postListItemBean.getFloor()));
/adapters\RecyclerThreadAdapter.java:819:                    imageView.setScaleType(ImageView.ScaleType.FIT_CENTER);
/adapters\RecyclerThreadAdapter.java:820:                    ImageUtil.load(imageView, ImageUtil.LOAD_TYPE_SMALL_PIC, url);
/adapters\RecyclerThreadAdapter.java:821:                    List<PhotoViewBean> photoViewBeans = getPhotoViewBeans();
/adapters\RecyclerThreadAdapter.java:822:                    for (PhotoViewBean photoViewBean : photoViewBeans) {
/adapters\RecyclerThreadAdapter.java:823:                        if (TextUtils.equals(photoViewBean.getOriginUrl(), contentBean.getOriginSrc())) {
/adapters\RecyclerThreadAdapter.java:824:                            ImageUtil.initImageView(imageView,
/adapters\RecyclerThreadAdapter.java:825:                                    photoViewBeans,
/adapters\RecyclerThreadAdapter.java:826:                                    photoViewBeans.indexOf(photoViewBean),
/adapters\RecyclerThreadAdapter.java:827:                                    dataBean.getForum().getName(),
/adapters\RecyclerThreadAdapter.java:828:                                    dataBean.getForum().getId(),
/adapters\RecyclerThreadAdapter.java:829:                                    dataBean.getThread().getId(),
/adapters\RecyclerThreadAdapter.java:830:                                    isSeeLz(),
/adapters\RecyclerThreadAdapter.java:831:                                    OBJ_TYPE_THREAD_PAGE);
/adapters\RecyclerThreadAdapter.java:832:                            break;
/adapters\RecyclerThreadAdapter.java:833:                        }
/adapters\RecyclerThreadAdapter.java:834:                    }
/adapters\RecyclerThreadAdapter.java:835:                    views.add(imageView);
/adapters\RecyclerThreadAdapter.java:836:                    break;
/adapters\RecyclerThreadAdapter.java:837:                case "4":
/adapters\RecyclerThreadAdapter.java:838:                    if (appendUserToLastTextView(views, contentBean.getText(), contentBean.getUid())) {
/adapters\RecyclerThreadAdapter.java:839:                        TextView textView = createTextView(TEXT_VIEW_TYPE_CONTENT);
/adapters\RecyclerThreadAdapter.java:840:                        textView.setLayoutParams(getLayoutParams(contentBean, postListItemBean.getFloor()));
/adapters\RecyclerThreadAdapter.java:841:                        setText(textView, getUserContent(contentBean.getText(), contentBean.getUid()));
/adapters\RecyclerThreadAdapter.java:842:                        views.add(textView);
/adapters\RecyclerThreadAdapter.java:843:                    }
/adapters\RecyclerThreadAdapter.java:844:                    break;
/adapters\RecyclerThreadAdapter.java:845:                case "5":
/adapters\RecyclerThreadAdapter.java:846:                    if (contentBean.getSrc() != null && contentBean.getWidth() != null && contentBean.getHeight() != null) {
/adapters\RecyclerThreadAdapter.java:847:                        if (contentBean.getLink() != null) {
/adapters\RecyclerThreadAdapter.java:848:                            VideoPlayerStandard videoPlayerStandard = new VideoPlayerStandard(mContext);
/adapters\RecyclerThreadAdapter.java:849:                            videoPlayerStandard.setUp(contentBean.getLink(), "");
/adapters\RecyclerThreadAdapter.java:850:                            videoPlayerStandard.setLayoutParams(getLayoutParams(contentBean, postListItemBean.getFloor()));
/adapters\RecyclerThreadAdapter.java:851:                            videoPlayerStandard.setId(R.id.video_player);
/adapters\RecyclerThreadAdapter.java:852:                            ImageUtil.load(videoPlayerStandard.posterImageView, ImageUtil.LOAD_TYPE_SMALL_PIC, contentBean.getSrc(), true);
/adapters\RecyclerThreadAdapter.java:853:                            views.add(videoPlayerStandard);
/adapters\RecyclerThreadAdapter.java:854:                        } else {
/adapters\RecyclerThreadAdapter.java:855:                            MyImageView videoImageView = new MyImageView(mContext);
/adapters\RecyclerThreadAdapter.java:856:                            videoImageView.setLayoutParams(getLayoutParams(contentBean, postListItemBean.getFloor()));
/adapters\RecyclerThreadAdapter.java:857:                            videoImageView.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
/adapters\RecyclerThreadAdapter.java:858:                            ImageUtil.load(videoImageView, ImageUtil.LOAD_TYPE_SMALL_PIC, contentBean.getSrc(), true);
/adapters\RecyclerThreadAdapter.java:859:                            videoImageView.setOnClickListener(view -> {
/adapters\RecyclerThreadAdapter.java:860:                                navigationHelper.navigationByData(NavigationHelper.ACTION_URL, contentBean.getText());
/adapters\RecyclerThreadAdapter.java:861:                            });
/adapters\RecyclerThreadAdapter.java:862:                            views.add(videoImageView);
/adapters\RecyclerThreadAdapter.java:863:                        }
/adapters\RecyclerThreadAdapter.java:864:                    } else {
/adapters\RecyclerThreadAdapter.java:865:                        if (appendLinkToLastTextView(views, "[视频] " + contentBean.getText(), contentBean.getText())) {
/adapters\RecyclerThreadAdapter.java:866:                            TextView textView = createTextView(TEXT_VIEW_TYPE_CONTENT);
/adapters\RecyclerThreadAdapter.java:867:                            textView.setLayoutParams(defaultLayoutParams);
/adapters\RecyclerThreadAdapter.java:868:                            setText(textView, getLinkContent("[视频] " + contentBean.getText(), contentBean.getText()));
/adapters\RecyclerThreadAdapter.java:869:                            views.add(textView);
/adapters\RecyclerThreadAdapter.java:870:                        }
/adapters\RecyclerThreadAdapter.java:871:                    }
/adapters\RecyclerThreadAdapter.java:872:                    break;
/adapters\RecyclerThreadAdapter.java:873:                case "10":
/adapters\RecyclerThreadAdapter.java:874:                    String voiceUrl = "http://c.tieba.baidu.com/c/p/voice?voice_md5=" + contentBean.getVoiceMD5() + "&play_from=pb_voice_play";
/adapters\RecyclerThreadAdapter.java:875:                    Log.i(TAG, "getContentViews: " + contentBean.getDuringTime());
/adapters\RecyclerThreadAdapter.java:876:                    VoicePlayerView voicePlayerView = new VoicePlayerView(mContext);
/adapters\RecyclerThreadAdapter.java:877:                    voicePlayerView.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
/adapters\RecyclerThreadAdapter.java:878:                    //voicePlayerView.setMini(false);
/adapters\RecyclerThreadAdapter.java:879:                    voicePlayerView.setDuration(Integer.valueOf(contentBean.getDuringTime()));
/adapters\RecyclerThreadAdapter.java:880:                    voicePlayerView.setUrl(voiceUrl);
/adapters\RecyclerThreadAdapter.java:881:                    views.add(voicePlayerView);
/adapters\RecyclerThreadAdapter.java:882:                    break;
/adapters\RecyclerThreadAdapter.java:883:                case "20":
/adapters\RecyclerThreadAdapter.java:884:                    MyImageView memeImageView = new MyImageView(mContext);
/adapters\RecyclerThreadAdapter.java:885:                    memeImageView.setLayoutParams(getLayoutParams(contentBean, postListItemBean.getFloor()));
/adapters\RecyclerThreadAdapter.java:886:                    memeImageView.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
/adapters\RecyclerThreadAdapter.java:887:                    ImageUtil.load(memeImageView, ImageUtil.LOAD_TYPE_SMALL_PIC, contentBean.getSrc());
/adapters\RecyclerThreadAdapter.java:888:                    ImageUtil.initImageView(memeImageView, new PhotoViewBean(contentBean.getSrc(), contentBean.getSrc(), false));
/adapters\RecyclerThreadAdapter.java:889:                    views.add(memeImageView);
/adapters\RecyclerThreadAdapter.java:890:                    break;
/adapters\RecyclerThreadAdapter.java:891:                default:
/adapters\RecyclerThreadAdapter.java:892:                    break;
/adapters\RecyclerThreadAdapter.java:893:            }
/adapters\RecyclerThreadAdapter.java:894:        }
/adapters\RecyclerThreadAdapter.java:895:        return views;
/adapters\RecyclerThreadAdapter.java:896:    }
/adapters\RecyclerThreadAdapter.java:898:    private void initContentView(ViewHolder viewHolder, ThreadContentBean.PostListItemBean postListItemBean, int position) {
/adapters\RecyclerThreadAdapter.java:899:        MyLinearLayout myLinearLayout = viewHolder.getView(R.id.thread_list_item_content_content);
/adapters\RecyclerThreadAdapter.java:900:        myLinearLayout.removeAllViews();
/adapters\RecyclerThreadAdapter.java:901:        myLinearLayout.addViews(getContentViews(postListItemBean, position));
/adapters\RecyclerThreadAdapter.java:902:    }
/adapters\RecyclerThreadAdapter.java:904:    @Override
/adapters\RecyclerThreadAdapter.java:905:    protected int getViewType(int i, ThreadContentBean.PostListItemBean postListItemBean) {
/adapters\RecyclerThreadAdapter.java:906:        if ("1".equals(postListItemBean.getFloor())) {
/adapters\RecyclerThreadAdapter.java:907:            return TYPE_THREAD;
/adapters\RecyclerThreadAdapter.java:908:        }
/adapters\RecyclerThreadAdapter.java:909:        return TYPE_REPLY;
/adapters\RecyclerThreadAdapter.java:910:    }
/adapters\RecyclerThreadAdapter.java:911:}/adapters\SearchForumAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\SearchForumAdapter.java:3:import android.app.Activity;
/adapters\SearchForumAdapter.java:4:import android.content.Context;
/adapters\SearchForumAdapter.java:6:import com.huanchengfly.tieba.post.api.models.SearchForumBean;
/adapters\SearchForumAdapter.java:7:import com.huanchengfly.tieba.post.R;
/adapters\SearchForumAdapter.java:8:import com.huanchengfly.tieba.post.utils.ImageUtil;
/adapters\SearchForumAdapter.java:9:import com.huanchengfly.tieba.post.utils.NavigationHelper;
/adapters\SearchForumAdapter.java:10:import com.othershe.baseadapter.ViewHolder;
/adapters\SearchForumAdapter.java:11:import com.othershe.baseadapter.base.MultiBaseAdapter;
/adapters\SearchForumAdapter.java:13:import java.util.ArrayList;
/adapters\SearchForumAdapter.java:14:import java.util.List;
/adapters\SearchForumAdapter.java:16:public class SearchForumAdapter extends MultiBaseAdapter<SearchForumBean.ForumInfoBean> {
/adapters\SearchForumAdapter.java:17:    public static final int TYPE_EXACT = 0;
/adapters\SearchForumAdapter.java:18:    public static final int TYPE_FUZZY = 1;
/adapters\SearchForumAdapter.java:19:    private NavigationHelper navigationHelper;
/adapters\SearchForumAdapter.java:21:    public SearchForumAdapter(Context context) {
/adapters\SearchForumAdapter.java:22:        super(context, null, true);
/adapters\SearchForumAdapter.java:23:        navigationHelper = NavigationHelper.newInstance(context);
/adapters\SearchForumAdapter.java:24:    }
/adapters\SearchForumAdapter.java:26:    public void setData(SearchForumBean.DataBean data) {
/adapters\SearchForumAdapter.java:27:        List<SearchForumBean.ForumInfoBean> forumInfoBeans = new ArrayList<>();
/adapters\SearchForumAdapter.java:28:        if (data.getExactMatch() != null && data.getExactMatch().getForumNameShow() != null) {
/adapters\SearchForumAdapter.java:29:            forumInfoBeans.add(data.getExactMatch());
/adapters\SearchForumAdapter.java:30:        }
/adapters\SearchForumAdapter.java:31:        forumInfoBeans.addAll(data.getFuzzyMatch());
/adapters\SearchForumAdapter.java:32:        setNewData(forumInfoBeans);
/adapters\SearchForumAdapter.java:33:    }
/adapters\SearchForumAdapter.java:35:    private boolean canLoadGlide() {
/adapters\SearchForumAdapter.java:36:        if (mContext instanceof Activity) {
/adapters\SearchForumAdapter.java:37:            return !((Activity) mContext).isDestroyed();
/adapters\SearchForumAdapter.java:38:        }
/adapters\SearchForumAdapter.java:39:        return false;
/adapters\SearchForumAdapter.java:40:    }
/adapters\SearchForumAdapter.java:42:    @Override
/adapters\SearchForumAdapter.java:43:    protected void convert(ViewHolder viewHolder, SearchForumBean.ForumInfoBean forumInfoBean, int position, int type) {
/adapters\SearchForumAdapter.java:44:        viewHolder.setText(R.id.item_search_forum_title, forumInfoBean.getForumNameShow() + "吧");
/adapters\SearchForumAdapter.java:45:        viewHolder.setOnClickListener(R.id.item_search_forum, (view) -> {
/adapters\SearchForumAdapter.java:46:            navigationHelper.navigationByData(NavigationHelper.ACTION_FORUM, forumInfoBean.getForumName());
/adapters\SearchForumAdapter.java:47:        });
/adapters\SearchForumAdapter.java:48:        ImageUtil.load(viewHolder.getView(R.id.item_search_forum_avatar), ImageUtil.LOAD_TYPE_AVATAR, forumInfoBean.getAvatar());
/adapters\SearchForumAdapter.java:49:        if (type == TYPE_EXACT) {
/adapters\SearchForumAdapter.java:50:            SearchForumBean.ExactForumInfoBean exactForumInfoBean = (SearchForumBean.ExactForumInfoBean) forumInfoBean;
/adapters\SearchForumAdapter.java:51:            viewHolder.setText(R.id.item_search_forum_subtitle, exactForumInfoBean.getSlogan());
/adapters\SearchForumAdapter.java:52:        }
/adapters\SearchForumAdapter.java:53:    }
/adapters\SearchForumAdapter.java:55:    @Override
/adapters\SearchForumAdapter.java:56:    protected int getItemLayoutId(int type) {
/adapters\SearchForumAdapter.java:57:        if (type == TYPE_EXACT) {
/adapters\SearchForumAdapter.java:58:            return R.layout.item_search_forum_exact;
/adapters\SearchForumAdapter.java:59:        }
/adapters\SearchForumAdapter.java:60:        return R.layout.item_search_forum;
/adapters\SearchForumAdapter.java:61:    }
/adapters\SearchForumAdapter.java:63:    @Override
/adapters\SearchForumAdapter.java:64:    protected int getViewType(int i, SearchForumBean.ForumInfoBean forumInfoBean) {
/adapters\SearchForumAdapter.java:65:        if (forumInfoBean instanceof SearchForumBean.ExactForumInfoBean) {
/adapters\SearchForumAdapter.java:66:            return TYPE_EXACT;
/adapters\SearchForumAdapter.java:67:        }
/adapters\SearchForumAdapter.java:68:        return TYPE_FUZZY;
/adapters\SearchForumAdapter.java:69:    }
/adapters\SearchForumAdapter.java:70:}
/adapters\SearchPostAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\SearchPostAdapter.java:3:import android.content.Context;
/adapters\SearchPostAdapter.java:4:import android.text.format.DateUtils;
/adapters\SearchPostAdapter.java:5:import android.widget.TextView;
/adapters\SearchPostAdapter.java:7:import androidx.core.text.HtmlCompat;
/adapters\SearchPostAdapter.java:9:import com.huanchengfly.tieba.post.api.models.SearchPostBean;
/adapters\SearchPostAdapter.java:10:import com.huanchengfly.tieba.post.R;
/adapters\SearchPostAdapter.java:11:import com.huanchengfly.tieba.post.utils.NavigationHelper;
/adapters\SearchPostAdapter.java:12:import com.othershe.baseadapter.ViewHolder;
/adapters\SearchPostAdapter.java:13:import com.othershe.baseadapter.base.CommonBaseAdapter;
/adapters\SearchPostAdapter.java:15:import java.util.HashMap;
/adapters\SearchPostAdapter.java:16:import java.util.Map;
/adapters\SearchPostAdapter.java:18:public class SearchPostAdapter extends CommonBaseAdapter<SearchPostBean.ThreadInfoBean> {
/adapters\SearchPostAdapter.java:19:    private NavigationHelper navigationHelper;
/adapters\SearchPostAdapter.java:21:    public SearchPostAdapter(Context context) {
/adapters\SearchPostAdapter.java:22:        super(context, null, true);
/adapters\SearchPostAdapter.java:23:        navigationHelper = NavigationHelper.newInstance(context);
/adapters\SearchPostAdapter.java:24:    }
/adapters\SearchPostAdapter.java:26:    @Override
/adapters\SearchPostAdapter.java:27:    protected void convert(ViewHolder viewHolder, SearchPostBean.ThreadInfoBean threadInfoBean, int position) {
/adapters\SearchPostAdapter.java:28:        viewHolder.setOnClickListener(R.id.item_search_thread, (view) -> {
/adapters\SearchPostAdapter.java:29:            Map<String, String> map = new HashMap<>();
/adapters\SearchPostAdapter.java:30:            map.put("tid", threadInfoBean.getTid());
/adapters\SearchPostAdapter.java:31:            map.put("pid", threadInfoBean.getPid());
/adapters\SearchPostAdapter.java:32:            navigationHelper.navigationByData(NavigationHelper.ACTION_THREAD, map);
/adapters\SearchPostAdapter.java:33:        });
/adapters\SearchPostAdapter.java:34:        TextView contentTextView = viewHolder.getView(R.id.item_search_thread_content);
/adapters\SearchPostAdapter.java:35:        TextView titleTextView = viewHolder.getView(R.id.item_search_thread_title);
/adapters\SearchPostAdapter.java:36:        titleTextView.setText(HtmlCompat.fromHtml(threadInfoBean.getTitle(), HtmlCompat.FROM_HTML_MODE_COMPACT));
/adapters\SearchPostAdapter.java:37:        contentTextView.setText(HtmlCompat.fromHtml(threadInfoBean.getContent(), HtmlCompat.FROM_HTML_MODE_COMPACT));
/adapters\SearchPostAdapter.java:38:        viewHolder.setText(R.id.item_search_thread_user, threadInfoBean.getAuthor().getNameShow());
/adapters\SearchPostAdapter.java:39:        if (threadInfoBean.getForumName() == null) {
/adapters\SearchPostAdapter.java:40:            viewHolder.setText(R.id.item_search_thread_info, String.valueOf(DateUtils.getRelativeTimeSpanString(Long.valueOf(threadInfoBean.getTime()) * 1000L)));
/adapters\SearchPostAdapter.java:41:        } else {
/adapters\SearchPostAdapter.java:42:            viewHolder.setText(R.id.item_search_thread_info, threadInfoBean.getForumName() + " " + DateUtils.getRelativeTimeSpanString(Long.valueOf(threadInfoBean.getTime()) * 1000L));
/adapters\SearchPostAdapter.java:43:        }
/adapters\SearchPostAdapter.java:44:    }
/adapters\SearchPostAdapter.java:46:    @Override
/adapters\SearchPostAdapter.java:47:    protected int getItemLayoutId() {
/adapters\SearchPostAdapter.java:48:        return R.layout.item_search_thread;
/adapters\SearchPostAdapter.java:49:    }
/adapters\SearchPostAdapter.java:50:}
/adapters\SearchThreadAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\SearchThreadAdapter.java:3:import android.content.Context;
/adapters\SearchThreadAdapter.java:4:import android.text.format.DateUtils;
/adapters\SearchThreadAdapter.java:5:import android.view.View;
/adapters\SearchThreadAdapter.java:7:import com.allen.library.SuperTextView;
/adapters\SearchThreadAdapter.java:8:import com.huanchengfly.tieba.post.api.SearchThreadFilter;
/adapters\SearchThreadAdapter.java:9:import com.huanchengfly.tieba.post.api.SearchThreadOrder;
/adapters\SearchThreadAdapter.java:10:import com.huanchengfly.tieba.post.api.models.SearchThreadBean;
/adapters\SearchThreadAdapter.java:11:import com.huanchengfly.tieba.post.R;
/adapters\SearchThreadAdapter.java:12:import com.huanchengfly.tieba.post.components.dialogs.SingleChooseDialog;
/adapters\SearchThreadAdapter.java:13:import com.huanchengfly.tieba.post.fragments.SearchThreadFragment;
/adapters\SearchThreadAdapter.java:14:import com.huanchengfly.tieba.post.utils.NavigationHelper;
/adapters\SearchThreadAdapter.java:15:import com.huanchengfly.tieba.post.utils.Util;
/adapters\SearchThreadAdapter.java:16:import com.othershe.baseadapter.ViewHolder;
/adapters\SearchThreadAdapter.java:17:import com.othershe.baseadapter.base.CommonBaseAdapter;
/adapters\SearchThreadAdapter.java:19:import java.util.HashMap;
/adapters\SearchThreadAdapter.java:20:import java.util.Map;
/adapters\SearchThreadAdapter.java:22:public class SearchThreadAdapter extends CommonBaseAdapter<SearchThreadBean.ThreadInfoBean> {
/adapters\SearchThreadAdapter.java:23:    private NavigationHelper navigationHelper;
/adapters\SearchThreadAdapter.java:24:    private int order;
/adapters\SearchThreadAdapter.java:25:    private int filter;
/adapters\SearchThreadAdapter.java:27:    public SearchThreadAdapter(SearchThreadFragment fragment) {
/adapters\SearchThreadAdapter.java:28:        super(fragment.getContext(), null, true);
/adapters\SearchThreadAdapter.java:29:        order = 0;
/adapters\SearchThreadAdapter.java:30:        filter = 0;
/adapters\SearchThreadAdapter.java:31:        Context context = fragment.getContext();
/adapters\SearchThreadAdapter.java:32:        navigationHelper = NavigationHelper.newInstance(context);
/adapters\SearchThreadAdapter.java:33:        View headerView = Util.inflate(context, R.layout.layout_search_header);
/adapters\SearchThreadAdapter.java:34:        if (headerView != null) {
/adapters\SearchThreadAdapter.java:35:            SuperTextView orderTextView = headerView.findViewById(R.id.search_order);
/adapters\SearchThreadAdapter.java:36:            SuperTextView filterTextView = headerView.findViewById(R.id.search_filter);
/adapters\SearchThreadAdapter.java:37:            orderTextView.setOnSuperTextViewClickListener(view -> {
/adapters\SearchThreadAdapter.java:38:                SingleChooseDialog singleChooseDialog = new SingleChooseDialog(context, new String[]{"新贴在前", "旧贴在前", "相关度"})
/adapters\SearchThreadAdapter.java:39:                        .setOnChooseListener((position, title) -> {
/adapters\SearchThreadAdapter.java:40:                            order = position;
/adapters\SearchThreadAdapter.java:41:                            view.setCenterString(title);
/adapters\SearchThreadAdapter.java:42:                            switch (position) {
/adapters\SearchThreadAdapter.java:43:                                case 0:
/adapters\SearchThreadAdapter.java:44:                                    fragment.onSwitch(0, SearchThreadOrder.NEW.getValue());
/adapters\SearchThreadAdapter.java:45:                                    break;
/adapters\SearchThreadAdapter.java:46:                                case 1:
/adapters\SearchThreadAdapter.java:47:                                    fragment.onSwitch(0, SearchThreadOrder.OLD.getValue());
/adapters\SearchThreadAdapter.java:48:                                    break;
/adapters\SearchThreadAdapter.java:49:                                case 2:
/adapters\SearchThreadAdapter.java:50:                                    fragment.onSwitch(0, SearchThreadOrder.RELEVANT.getValue());
/adapters\SearchThreadAdapter.java:51:                                    break;
/adapters\SearchThreadAdapter.java:52:                            }
/adapters\SearchThreadAdapter.java:53:                        })
/adapters\SearchThreadAdapter.java:54:                        .setChoosePosition(order);
/adapters\SearchThreadAdapter.java:55:                singleChooseDialog.show();
/adapters\SearchThreadAdapter.java:56:            });
/adapters\SearchThreadAdapter.java:57:            filterTextView.setOnSuperTextViewClickListener(view -> {
/adapters\SearchThreadAdapter.java:58:                SingleChooseDialog singleChooseDialog = new SingleChooseDialog(context, new String[]{"只看主题贴", "显示全部"})
/adapters\SearchThreadAdapter.java:59:                        .setOnChooseListener((position, title) -> {
/adapters\SearchThreadAdapter.java:60:                            filter = position;
/adapters\SearchThreadAdapter.java:61:                            view.setCenterString(title);
/adapters\SearchThreadAdapter.java:62:                            switch (position) {
/adapters\SearchThreadAdapter.java:63:                                case 0:
/adapters\SearchThreadAdapter.java:64:                                    fragment.onSwitch(1, SearchThreadFilter.ONLY_THREAD.getValue());
/adapters\SearchThreadAdapter.java:65:                                    break;
/adapters\SearchThreadAdapter.java:66:                                case 1:
/adapters\SearchThreadAdapter.java:67:                                    fragment.onSwitch(1, SearchThreadFilter.ALL.getValue());
/adapters\SearchThreadAdapter.java:68:                                    break;
/adapters\SearchThreadAdapter.java:69:                            }
/adapters\SearchThreadAdapter.java:70:                        })
/adapters\SearchThreadAdapter.java:71:                        .setChoosePosition(filter);
/adapters\SearchThreadAdapter.java:72:                singleChooseDialog.show();
/adapters\SearchThreadAdapter.java:73:            });
/adapters\SearchThreadAdapter.java:74:            addHeaderView(headerView);
/adapters\SearchThreadAdapter.java:75:        }
/adapters\SearchThreadAdapter.java:76:    }
/adapters\SearchThreadAdapter.java:78:    @Override
/adapters\SearchThreadAdapter.java:79:    protected void convert(ViewHolder viewHolder, SearchThreadBean.ThreadInfoBean threadInfoBean, int position) {
/adapters\SearchThreadAdapter.java:80:        viewHolder.setOnClickListener(R.id.item_search_thread, (view) -> {
/adapters\SearchThreadAdapter.java:81:            Map<String, String> map = new HashMap<>();
/adapters\SearchThreadAdapter.java:82:            map.put("tid", threadInfoBean.getTid());
/adapters\SearchThreadAdapter.java:83:            map.put("pid", threadInfoBean.getPid());
/adapters\SearchThreadAdapter.java:84:            navigationHelper.navigationByData(NavigationHelper.ACTION_THREAD, map);
/adapters\SearchThreadAdapter.java:85:        });
/adapters\SearchThreadAdapter.java:86:        viewHolder.setText(R.id.item_search_thread_title, threadInfoBean.getTitle());
/adapters\SearchThreadAdapter.java:87:        viewHolder.setText(R.id.item_search_thread_content, threadInfoBean.getContent());
/adapters\SearchThreadAdapter.java:88:        viewHolder.setText(R.id.item_search_thread_user, threadInfoBean.getUser().getUserName());
/adapters\SearchThreadAdapter.java:89:        if (threadInfoBean.getForumName() == null) {
/adapters\SearchThreadAdapter.java:90:            viewHolder.setText(R.id.item_search_thread_info, String.valueOf(DateUtils.getRelativeTimeSpanString(Long.valueOf(threadInfoBean.getTime()) * 1000L)));
/adapters\SearchThreadAdapter.java:91:        } else {
/adapters\SearchThreadAdapter.java:92:            viewHolder.setText(R.id.item_search_thread_info, threadInfoBean.getForumName() + " " + DateUtils.getRelativeTimeSpanString(Long.valueOf(threadInfoBean.getTime()) * 1000L));
/adapters\SearchThreadAdapter.java:93:        }
/adapters\SearchThreadAdapter.java:94:    }
/adapters\SearchThreadAdapter.java:96:    @Override
/adapters\SearchThreadAdapter.java:97:    protected int getItemLayoutId() {
/adapters\SearchThreadAdapter.java:98:        return R.layout.item_search_thread;
/adapters\SearchThreadAdapter.java:99:    }
/adapters\SearchThreadAdapter.java:100:}
/adapters\SearchUserAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\SearchUserAdapter.java:3:import android.content.Context;
/adapters\SearchUserAdapter.java:4:import android.text.TextUtils;
/adapters\SearchUserAdapter.java:6:import com.huanchengfly.tieba.post.api.models.SearchUserBean;
/adapters\SearchUserAdapter.java:7:import com.huanchengfly.tieba.post.R;
/adapters\SearchUserAdapter.java:8:import com.huanchengfly.tieba.post.utils.ImageUtil;
/adapters\SearchUserAdapter.java:9:import com.huanchengfly.tieba.post.utils.NavigationHelper;
/adapters\SearchUserAdapter.java:10:import com.huanchengfly.tieba.post.utils.StringUtil;
/adapters\SearchUserAdapter.java:11:import com.othershe.baseadapter.ViewHolder;
/adapters\SearchUserAdapter.java:12:import com.othershe.baseadapter.base.CommonBaseAdapter;
/adapters\SearchUserAdapter.java:14:import java.util.ArrayList;
/adapters\SearchUserAdapter.java:15:import java.util.List;
/adapters\SearchUserAdapter.java:17:public class SearchUserAdapter extends CommonBaseAdapter<SearchUserBean.UserBean> {
/adapters\SearchUserAdapter.java:18:    private NavigationHelper navigationHelper;
/adapters\SearchUserAdapter.java:20:    public SearchUserAdapter(Context context) {
/adapters\SearchUserAdapter.java:21:        super(context, null, true);
/adapters\SearchUserAdapter.java:22:        navigationHelper = NavigationHelper.newInstance(context);
/adapters\SearchUserAdapter.java:23:    }
/adapters\SearchUserAdapter.java:25:    public void setData(SearchUserBean.SearchUserDataBean data) {
/adapters\SearchUserAdapter.java:26:        List<SearchUserBean.UserBean> forumInfoBeans = new ArrayList<>();
/adapters\SearchUserAdapter.java:27:        if (data.getExactMatch() != null) forumInfoBeans.add(data.getExactMatch());
/adapters\SearchUserAdapter.java:28:        forumInfoBeans.addAll(data.getFuzzyMatch());
/adapters\SearchUserAdapter.java:29:        setNewData(forumInfoBeans);
/adapters\SearchUserAdapter.java:30:    }
/adapters\SearchUserAdapter.java:32:    @Override
/adapters\SearchUserAdapter.java:33:    protected void convert(ViewHolder viewHolder, SearchUserBean.UserBean userBean, int position) {
/adapters\SearchUserAdapter.java:34:        viewHolder.setText(R.id.item_search_forum_title, StringUtil.getUsernameString(mContext, userBean.getName(), userBean.getUserNickname()));
/adapters\SearchUserAdapter.java:35:        viewHolder.setOnClickListener(R.id.item_search_forum, (view) -> {
/adapters\SearchUserAdapter.java:36:            navigationHelper.navigationByData(NavigationHelper.ACTION_USER_BY_UID, userBean.getId());
/adapters\SearchUserAdapter.java:37:        });
/adapters\SearchUserAdapter.java:38:        ImageUtil.load(viewHolder.getView(R.id.item_search_forum_avatar), ImageUtil.LOAD_TYPE_AVATAR, userBean.getPortrait());
/adapters\SearchUserAdapter.java:39:        StringBuilder subTitleBuilder = new StringBuilder();
/adapters\SearchUserAdapter.java:40:        if (!TextUtils.isEmpty(userBean.getIntro())) {
/adapters\SearchUserAdapter.java:41:            subTitleBuilder.append(userBean.getIntro());
/adapters\SearchUserAdapter.java:42:            subTitleBuilder.append("\n");
/adapters\SearchUserAdapter.java:43:        }
/adapters\SearchUserAdapter.java:44:        subTitleBuilder.append(mContext.getString(R.string.fans_num, userBean.getFansNum()));
/adapters\SearchUserAdapter.java:45:        viewHolder.setText(R.id.item_search_forum_subtitle, subTitleBuilder.toString());
/adapters\SearchUserAdapter.java:46:    }
/adapters\SearchUserAdapter.java:48:    @Override
/adapters\SearchUserAdapter.java:49:    protected int getItemLayoutId() {
/adapters\SearchUserAdapter.java:50:        return R.layout.item_search_user;
/adapters\SearchUserAdapter.java:51:    }
/adapters\SearchUserAdapter.java:52:}
/adapters\SingleChooseAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\SingleChooseAdapter.java:3:import android.content.Context;
/adapters\SingleChooseAdapter.java:4:import android.view.LayoutInflater;
/adapters\SingleChooseAdapter.java:5:import android.view.View;
/adapters\SingleChooseAdapter.java:6:import android.view.ViewGroup;
/adapters\SingleChooseAdapter.java:7:import android.widget.BaseAdapter;
/adapters\SingleChooseAdapter.java:8:import android.widget.ImageView;
/adapters\SingleChooseAdapter.java:9:import android.widget.TextView;
/adapters\SingleChooseAdapter.java:11:import com.huanchengfly.tieba.post.R;
/adapters\SingleChooseAdapter.java:13:import java.util.List;
/adapters\SingleChooseAdapter.java:15:public class SingleChooseAdapter extends BaseAdapter {
/adapters\SingleChooseAdapter.java:16:    private List<String> strings;
/adapters\SingleChooseAdapter.java:17:    private int choosePosition;
/adapters\SingleChooseAdapter.java:18:    private LayoutInflater mInflater;
/adapters\SingleChooseAdapter.java:20:    public SingleChooseAdapter(Context context, List<String> strings) {
/adapters\SingleChooseAdapter.java:21:        this(context, strings, 0);
/adapters\SingleChooseAdapter.java:22:    }
/adapters\SingleChooseAdapter.java:24:    public SingleChooseAdapter(Context context, List<String> strings, int choosePosition) {
/adapters\SingleChooseAdapter.java:25:        this.mInflater = LayoutInflater.from(context);
/adapters\SingleChooseAdapter.java:26:        this.strings = strings;
/adapters\SingleChooseAdapter.java:27:        this.choosePosition = choosePosition;
/adapters\SingleChooseAdapter.java:28:    }
/adapters\SingleChooseAdapter.java:30:    public int getChoosePosition() {
/adapters\SingleChooseAdapter.java:31:        return choosePosition;
/adapters\SingleChooseAdapter.java:32:    }
/adapters\SingleChooseAdapter.java:34:    public void setChoosePosition(int choosePosition) {
/adapters\SingleChooseAdapter.java:35:        this.choosePosition = choosePosition;
/adapters\SingleChooseAdapter.java:36:        notifyDataSetChanged();
/adapters\SingleChooseAdapter.java:37:    }
/adapters\SingleChooseAdapter.java:39:    @Override
/adapters\SingleChooseAdapter.java:40:    public int getCount() {
/adapters\SingleChooseAdapter.java:41:        return strings.size();
/adapters\SingleChooseAdapter.java:42:    }
/adapters\SingleChooseAdapter.java:44:    @Override
/adapters\SingleChooseAdapter.java:45:    public Object getItem(int position) {
/adapters\SingleChooseAdapter.java:46:        return strings.get(position);
/adapters\SingleChooseAdapter.java:47:    }
/adapters\SingleChooseAdapter.java:49:    @Override
/adapters\SingleChooseAdapter.java:50:    public long getItemId(int position) {
/adapters\SingleChooseAdapter.java:51:        return position;
/adapters\SingleChooseAdapter.java:52:    }
/adapters\SingleChooseAdapter.java:54:    @Override
/adapters\SingleChooseAdapter.java:55:    public View getView(int position, View convertView, ViewGroup parent) {
/adapters\SingleChooseAdapter.java:56:        ViewHolder viewHolder;
/adapters\SingleChooseAdapter.java:57:        if (convertView == null) {
/adapters\SingleChooseAdapter.java:58:            viewHolder = new ViewHolder();
/adapters\SingleChooseAdapter.java:59:            convertView = mInflater.inflate(R.layout.item_choose, null);
/adapters\SingleChooseAdapter.java:60:            viewHolder.titleTextView = convertView.findViewById(R.id.item_choose_title);
/adapters\SingleChooseAdapter.java:61:            viewHolder.imageView = convertView.findViewById(R.id.item_choose_icon);
/adapters\SingleChooseAdapter.java:62:            convertView.setTag(viewHolder);
/adapters\SingleChooseAdapter.java:63:        } else {
/adapters\SingleChooseAdapter.java:64:            viewHolder = (ViewHolder) convertView.getTag();
/adapters\SingleChooseAdapter.java:65:        }
/adapters\SingleChooseAdapter.java:66:        viewHolder.titleTextView.setText(strings.get(position));
/adapters\SingleChooseAdapter.java:67:        if (position == choosePosition)
/adapters\SingleChooseAdapter.java:68:            viewHolder.imageView.setVisibility(View.VISIBLE);
/adapters\SingleChooseAdapter.java:69:        else
/adapters\SingleChooseAdapter.java:70:            viewHolder.imageView.setVisibility(View.GONE);
/adapters\SingleChooseAdapter.java:71:        return convertView;
/adapters\SingleChooseAdapter.java:72:    }
/adapters\SingleChooseAdapter.java:74:    private class ViewHolder {
/adapters\SingleChooseAdapter.java:75:        private TextView titleTextView;
/adapters\SingleChooseAdapter.java:76:        private ImageView imageView;
/adapters\SingleChooseAdapter.java:77:    }
/adapters\SingleChooseAdapter.java:78:}
/adapters\TabViewPagerAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\TabViewPagerAdapter.java:3:import android.view.View;
/adapters\TabViewPagerAdapter.java:4:import android.view.ViewGroup;
/adapters\TabViewPagerAdapter.java:6:import androidx.annotation.NonNull;
/adapters\TabViewPagerAdapter.java:7:import androidx.viewpager.widget.PagerAdapter;
/adapters\TabViewPagerAdapter.java:9:import java.util.ArrayList;
/adapters\TabViewPagerAdapter.java:10:import java.util.List;
/adapters\TabViewPagerAdapter.java:12:public class TabViewPagerAdapter extends PagerAdapter {
/adapters\TabViewPagerAdapter.java:13:    private List<View> views = new ArrayList<>();
/adapters\TabViewPagerAdapter.java:14:    private List<String> titles = new ArrayList<>();
/adapters\TabViewPagerAdapter.java:15:    private int currentPosition;
/adapters\TabViewPagerAdapter.java:17:    public int getCurrentPosition() {
/adapters\TabViewPagerAdapter.java:18:        return currentPosition;
/adapters\TabViewPagerAdapter.java:19:    }
/adapters\TabViewPagerAdapter.java:21:    @Override
/adapters\TabViewPagerAdapter.java:22:    public int getCount() {
/adapters\TabViewPagerAdapter.java:23:        return views.size();
/adapters\TabViewPagerAdapter.java:24:    }
/adapters\TabViewPagerAdapter.java:26:    @Override
/adapters\TabViewPagerAdapter.java:27:    public boolean isViewFromObject(@NonNull View view, @NonNull Object object) {
/adapters\TabViewPagerAdapter.java:28:        return view == object;
/adapters\TabViewPagerAdapter.java:29:    }
/adapters\TabViewPagerAdapter.java:31:    public void addView(View view, String title) {
/adapters\TabViewPagerAdapter.java:32:        views.add(view);
/adapters\TabViewPagerAdapter.java:33:        titles.add(title);
/adapters\TabViewPagerAdapter.java:34:    }
/adapters\TabViewPagerAdapter.java:36:    @Override
/adapters\TabViewPagerAdapter.java:37:    public CharSequence getPageTitle(int position) {
/adapters\TabViewPagerAdapter.java:38:        return titles.get(position);
/adapters\TabViewPagerAdapter.java:39:    }
/adapters\TabViewPagerAdapter.java:41:    @NonNull
/adapters\TabViewPagerAdapter.java:42:    @Override
/adapters\TabViewPagerAdapter.java:43:    public Object instantiateItem(@NonNull ViewGroup container, int position) {
/adapters\TabViewPagerAdapter.java:44:        currentPosition = position;
/adapters\TabViewPagerAdapter.java:45:        View view = views.get(position);
/adapters\TabViewPagerAdapter.java:46:        container.addView(view);
/adapters\TabViewPagerAdapter.java:47:        return view;
/adapters\TabViewPagerAdapter.java:48:    }
/adapters\TabViewPagerAdapter.java:50:    @Override
/adapters\TabViewPagerAdapter.java:51:    public void destroyItem(@NonNull ViewGroup container, int position, @NonNull Object object) {
/adapters\TabViewPagerAdapter.java:52:        container.removeView((View) object);
/adapters\TabViewPagerAdapter.java:53:    }
/adapters\TabViewPagerAdapter.java:54:}/adapters\TextWatcherAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\TextWatcherAdapter.java:3:import android.text.Editable;
/adapters\TextWatcherAdapter.java:4:import android.text.TextWatcher;
/adapters\TextWatcherAdapter.java:6:public class TextWatcherAdapter implements TextWatcher {
/adapters\TextWatcherAdapter.java:7:    @Override
/adapters\TextWatcherAdapter.java:8:    public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
/adapters\TextWatcherAdapter.java:9:    }
/adapters\TextWatcherAdapter.java:11:    @Override
/adapters\TextWatcherAdapter.java:12:    public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
/adapters\TextWatcherAdapter.java:13:    }
/adapters\TextWatcherAdapter.java:15:    @Override
/adapters\TextWatcherAdapter.java:16:    public void afterTextChanged(Editable editable) {
/adapters\TextWatcherAdapter.java:17:    }
/adapters\TextWatcherAdapter.java:18:}
/adapters\ThemeAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\ThemeAdapter.java:3:import android.content.Context;
/adapters\ThemeAdapter.java:4:import android.content.Intent;
/adapters\ThemeAdapter.java:5:import android.content.res.ColorStateList;
/adapters\ThemeAdapter.java:6:import android.graphics.Color;
/adapters\ThemeAdapter.java:7:import android.view.View;
/adapters\ThemeAdapter.java:8:import android.view.ViewGroup;
/adapters\ThemeAdapter.java:9:import android.widget.ImageView;
/adapters\ThemeAdapter.java:10:import android.widget.TextView;
/adapters\ThemeAdapter.java:12:import androidx.annotation.ColorInt;
/adapters\ThemeAdapter.java:13:import androidx.annotation.NonNull;
/adapters\ThemeAdapter.java:14:import androidx.recyclerview.widget.RecyclerView;
/adapters\ThemeAdapter.java:16:import com.huanchengfly.tieba.post.ui.theme.interfaces.ExtraRefreshable;
/adapters\ThemeAdapter.java:17:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/adapters\ThemeAdapter.java:18:import com.huanchengfly.tieba.post.R;
/adapters\ThemeAdapter.java:19:import com.huanchengfly.tieba.post.activities.TranslucentThemeActivity;
/adapters\ThemeAdapter.java:20:import com.huanchengfly.tieba.post.BaseApplication;
/adapters\ThemeAdapter.java:21:import com.huanchengfly.tieba.post.components.MyViewHolder;
/adapters\ThemeAdapter.java:22:import com.huanchengfly.tieba.post.components.dialogs.CustomThemeDialog;
/adapters\ThemeAdapter.java:23:import com.huanchengfly.tieba.post.interfaces.OnItemClickListener;
/adapters\ThemeAdapter.java:24:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/adapters\ThemeAdapter.java:25:import com.huanchengfly.tieba.post.utils.ColorUtils;
/adapters\ThemeAdapter.java:27:import java.util.Arrays;
/adapters\ThemeAdapter.java:28:import java.util.List;
/adapters\ThemeAdapter.java:30:import static com.huanchengfly.tieba.post.utils.ThemeUtil.THEME_CUSTOM;
/adapters\ThemeAdapter.java:31:import static com.huanchengfly.tieba.post.utils.ThemeUtil.THEME_TRANSLUCENT;
/adapters\ThemeAdapter.java:33:public class ThemeAdapter extends RecyclerView.Adapter<MyViewHolder> implements View.OnClickListener {
/adapters\ThemeAdapter.java:34:    public static final int THEME_DAY = 0;
/adapters\ThemeAdapter.java:35:    public static final int THEME_NIGHT = 1;
/adapters\ThemeAdapter.java:37:    private Context mContext;
/adapters\ThemeAdapter.java:38:    private String[] themes;
/adapters\ThemeAdapter.java:39:    private String[] themeNames;
/adapters\ThemeAdapter.java:40:    private OnItemClickListener<String> onItemClickListener;
/adapters\ThemeAdapter.java:41:    private int selectedPosition;
/adapters\ThemeAdapter.java:43:    public ThemeAdapter(Context context) {
/adapters\ThemeAdapter.java:44:        this.mContext = context;
/adapters\ThemeAdapter.java:45:        themes = mContext.getResources().getStringArray(R.array.theme_values);
/adapters\ThemeAdapter.java:46:        themeNames = mContext.getResources().getStringArray(R.array.themeNames);
/adapters\ThemeAdapter.java:47:        List<String> themeList = Arrays.asList(themes);
/adapters\ThemeAdapter.java:48:        selectedPosition = themeList.indexOf(ThemeUtil.getTheme(mContext));
/adapters\ThemeAdapter.java:49:    }
/adapters\ThemeAdapter.java:51:    public OnItemClickListener<String> getOnItemClickListener() {
/adapters\ThemeAdapter.java:52:        return onItemClickListener;
/adapters\ThemeAdapter.java:53:    }
/adapters\ThemeAdapter.java:55:    public ThemeAdapter setOnItemClickListener(OnItemClickListener<String> onItemClickListener) {
/adapters\ThemeAdapter.java:56:        this.onItemClickListener = onItemClickListener;
/adapters\ThemeAdapter.java:57:        return this;
/adapters\ThemeAdapter.java:58:    }
/adapters\ThemeAdapter.java:60:    @NonNull
/adapters\ThemeAdapter.java:61:    @Override
/adapters\ThemeAdapter.java:62:    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
/adapters\ThemeAdapter.java:63:        return new MyViewHolder(mContext, R.layout.item_theme);
/adapters\ThemeAdapter.java:64:    }
/adapters\ThemeAdapter.java:66:    private int alphaColor(@ColorInt int origin) {
/adapters\ThemeAdapter.java:67:        int r = Color.red(origin);
/adapters\ThemeAdapter.java:68:        int g = Color.green(origin);
/adapters\ThemeAdapter.java:69:        int b = Color.blue(origin);
/adapters\ThemeAdapter.java:70:        return Color.argb(254, r, g, b);
/adapters\ThemeAdapter.java:71:    }
/adapters\ThemeAdapter.java:73:    private int getToolbarColor(String theme) {
/adapters\ThemeAdapter.java:74:        if (ThemeUtil.THEME_WHITE.equals(theme) || ThemeUtil.isNightMode(theme)) {
/adapters\ThemeAdapter.java:75:            return BaseApplication.ThemeDelegate.INSTANCE.getColorByAttr(mContext, R.attr.colorToolbar, theme);
/adapters\ThemeAdapter.java:76:        } else if (THEME_TRANSLUCENT.equals(theme)) {
/adapters\ThemeAdapter.java:77:            return ColorUtils.alpha(BaseApplication.ThemeDelegate.INSTANCE.getColorByAttr(mContext, R.attr.colorPrimary, theme), 150);
/adapters\ThemeAdapter.java:78:        }
/adapters\ThemeAdapter.java:79:        return BaseApplication.ThemeDelegate.INSTANCE.getColorByAttr(mContext, R.attr.colorPrimary, theme);
/adapters\ThemeAdapter.java:80:    }
/adapters\ThemeAdapter.java:82:    @Override
/adapters\ThemeAdapter.java:83:    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {
/adapters\ThemeAdapter.java:84:        int type = getItemViewType(position);
/adapters\ThemeAdapter.java:85:        View previewView = holder.getView(R.id.theme_preview);
/adapters\ThemeAdapter.java:86:        TextView themeName = holder.getView(R.id.theme_name);
/adapters\ThemeAdapter.java:87:        holder.setVisibility(R.id.night_mode_tip, type == THEME_NIGHT ? View.VISIBLE : View.GONE);
/adapters\ThemeAdapter.java:88:        ImageView selected = holder.getView(R.id.theme_selected);
/adapters\ThemeAdapter.java:89:        String theme = themes[position];
/adapters\ThemeAdapter.java:90:        int toolbarColor = getToolbarColor(theme);
/adapters\ThemeAdapter.java:91:        themeName.setText(themeNames[position]);
/adapters\ThemeAdapter.java:92:        selected.setVisibility(position == selectedPosition ? View.VISIBLE : View.GONE);
/adapters\ThemeAdapter.java:93:        selected.setTag(theme);
/adapters\ThemeAdapter.java:94:        if (THEME_CUSTOM.equals(theme) || THEME_TRANSLUCENT.equals(theme)) {
/adapters\ThemeAdapter.java:95:            selected.setImageResource(R.drawable.ic_round_create);
/adapters\ThemeAdapter.java:96:            selected.setOnClickListener(this);
/adapters\ThemeAdapter.java:97:        } else {
/adapters\ThemeAdapter.java:98:            selected.setImageResource(R.drawable.ic_round_check);
/adapters\ThemeAdapter.java:99:            selected.setOnClickListener(null);
/adapters\ThemeAdapter.java:100:        }
/adapters\ThemeAdapter.java:101:        previewView.setBackgroundTintList(ColorStateList.valueOf(toolbarColor));
/adapters\ThemeAdapter.java:102:        holder.setItemOnClickListener(v -> {
/adapters\ThemeAdapter.java:103:            int oldPosition = selectedPosition + 0;
/adapters\ThemeAdapter.java:104:            selectedPosition = position;
/adapters\ThemeAdapter.java:105:            notifyItemChanged(oldPosition);
/adapters\ThemeAdapter.java:106:            notifyItemChanged(position);
/adapters\ThemeAdapter.java:107:            if (getOnItemClickListener() != null) {
/adapters\ThemeAdapter.java:108:                getOnItemClickListener().onClick(holder.itemView, theme, position, type);
/adapters\ThemeAdapter.java:109:            }
/adapters\ThemeAdapter.java:110:        });
/adapters\ThemeAdapter.java:111:    }
/adapters\ThemeAdapter.java:113:    @Override
/adapters\ThemeAdapter.java:114:    public int getItemCount() {
/adapters\ThemeAdapter.java:115:        return themes.length;
/adapters\ThemeAdapter.java:116:    }
/adapters\ThemeAdapter.java:118:    @Override
/adapters\ThemeAdapter.java:119:    public int getItemViewType(int position) {
/adapters\ThemeAdapter.java:120:        String theme = themes[position];
/adapters\ThemeAdapter.java:121:        if (ThemeUtil.isNightMode(theme)) {
/adapters\ThemeAdapter.java:122:            return THEME_NIGHT;
/adapters\ThemeAdapter.java:123:        }
/adapters\ThemeAdapter.java:124:        return THEME_DAY;
/adapters\ThemeAdapter.java:125:    }
/adapters\ThemeAdapter.java:127:    @Override
/adapters\ThemeAdapter.java:128:    public void onClick(View v) {
/adapters\ThemeAdapter.java:129:        if (v.getId() != R.id.theme_selected) {
/adapters\ThemeAdapter.java:130:            return;
/adapters\ThemeAdapter.java:131:        }
/adapters\ThemeAdapter.java:132:        String theme = (String) v.getTag();
/adapters\ThemeAdapter.java:133:        if (THEME_CUSTOM.equals(theme)) {
/adapters\ThemeAdapter.java:134:            CustomThemeDialog customThemeDialog = new CustomThemeDialog(mContext);
/adapters\ThemeAdapter.java:135:            customThemeDialog.setOnDismissListener(dialog -> {
/adapters\ThemeAdapter.java:136:                if (mContext instanceof ExtraRefreshable) {
/adapters\ThemeAdapter.java:137:                    ThemeUtils.refreshUI(mContext, (ExtraRefreshable) mContext);
/adapters\ThemeAdapter.java:138:                }
/adapters\ThemeAdapter.java:139:            });
/adapters\ThemeAdapter.java:140:            customThemeDialog.show();
/adapters\ThemeAdapter.java:141:        } else if (THEME_TRANSLUCENT.equals(theme)) {
/adapters\ThemeAdapter.java:142:            mContext.startActivity(new Intent(mContext, TranslucentThemeActivity.class));
/adapters\ThemeAdapter.java:143:        }
/adapters\ThemeAdapter.java:144:    }
/adapters\ThemeAdapter.java:145:}
/adapters\ThemeColorAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\ThemeColorAdapter.java:3:import android.content.Context;
/adapters\ThemeColorAdapter.java:4:import android.content.res.ColorStateList;
/adapters\ThemeColorAdapter.java:5:import android.graphics.Color;
/adapters\ThemeColorAdapter.java:6:import android.view.View;
/adapters\ThemeColorAdapter.java:7:import android.view.ViewGroup;
/adapters\ThemeColorAdapter.java:9:import androidx.annotation.NonNull;
/adapters\ThemeColorAdapter.java:10:import androidx.palette.graphics.Palette;
/adapters\ThemeColorAdapter.java:11:import androidx.recyclerview.widget.RecyclerView;
/adapters\ThemeColorAdapter.java:13:import com.huanchengfly.tieba.post.R;
/adapters\ThemeColorAdapter.java:14:import com.huanchengfly.tieba.post.components.MyViewHolder;
/adapters\ThemeColorAdapter.java:15:import com.huanchengfly.tieba.post.interfaces.OnItemClickListener;
/adapters\ThemeColorAdapter.java:17:import java.lang.ref.WeakReference;
/adapters\ThemeColorAdapter.java:18:import java.util.ArrayList;
/adapters\ThemeColorAdapter.java:19:import java.util.List;
/adapters\ThemeColorAdapter.java:21:public class ThemeColorAdapter extends RecyclerView.Adapter<MyViewHolder> {
/adapters\ThemeColorAdapter.java:22:    private static final int[] sColors = new int[]{
/adapters\ThemeColorAdapter.java:23:            Color.parseColor("#FF4477E0"),
/adapters\ThemeColorAdapter.java:24:            Color.parseColor("#FFFF9A9E"),
/adapters\ThemeColorAdapter.java:25:            Color.parseColor("#FFC51100"),
/adapters\ThemeColorAdapter.java:26:            Color.parseColor("#FF000000"),
/adapters\ThemeColorAdapter.java:27:            Color.parseColor("#FF512DA8")
/adapters\ThemeColorAdapter.java:28:    };
/adapters\ThemeColorAdapter.java:29:    private WeakReference<Context> mContextWeakReference;
/adapters\ThemeColorAdapter.java:30:    private List<Integer> mColors;
/adapters\ThemeColorAdapter.java:31:    private OnItemClickListener<Integer> mOnItemClickListener;
/adapters\ThemeColorAdapter.java:32:    private int mSelectedColor;
/adapters\ThemeColorAdapter.java:34:    public ThemeColorAdapter(Context context) {
/adapters\ThemeColorAdapter.java:35:        mContextWeakReference = new WeakReference<>(context);
/adapters\ThemeColorAdapter.java:36:    }
/adapters\ThemeColorAdapter.java:38:    public OnItemClickListener<Integer> getOnItemClickListener() {
/adapters\ThemeColorAdapter.java:39:        return mOnItemClickListener;
/adapters\ThemeColorAdapter.java:40:    }
/adapters\ThemeColorAdapter.java:42:    public void setOnItemClickListener(OnItemClickListener<Integer> onItemClickListener) {
/adapters\ThemeColorAdapter.java:43:        mOnItemClickListener = onItemClickListener;
/adapters\ThemeColorAdapter.java:44:        notifyDataSetChanged();
/adapters\ThemeColorAdapter.java:45:    }
/adapters\ThemeColorAdapter.java:47:    public Context getContext() {
/adapters\ThemeColorAdapter.java:48:        return mContextWeakReference.get();
/adapters\ThemeColorAdapter.java:49:    }
/adapters\ThemeColorAdapter.java:51:    public void setPalette(Palette palette) {
/adapters\ThemeColorAdapter.java:52:        mColors = new ArrayList<>();
/adapters\ThemeColorAdapter.java:53:        int[] colors = new int[]{
/adapters\ThemeColorAdapter.java:54:                palette.getVibrantColor(Color.TRANSPARENT),
/adapters\ThemeColorAdapter.java:55:                palette.getMutedColor(Color.TRANSPARENT),
/adapters\ThemeColorAdapter.java:56:                palette.getDominantColor(Color.TRANSPARENT)
/adapters\ThemeColorAdapter.java:57:        };
/adapters\ThemeColorAdapter.java:58:        for (int color : colors) {
/adapters\ThemeColorAdapter.java:59:            if (color != Color.TRANSPARENT) mColors.add(color);
/adapters\ThemeColorAdapter.java:60:        }
/adapters\ThemeColorAdapter.java:61:        for (int color : sColors) {
/adapters\ThemeColorAdapter.java:62:            mColors.add(color);
/adapters\ThemeColorAdapter.java:63:        }
/adapters\ThemeColorAdapter.java:64:        notifyDataSetChanged();
/adapters\ThemeColorAdapter.java:65:    }
/adapters\ThemeColorAdapter.java:67:    @NonNull
/adapters\ThemeColorAdapter.java:68:    @Override
/adapters\ThemeColorAdapter.java:69:    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
/adapters\ThemeColorAdapter.java:70:        return new MyViewHolder(getContext(), R.layout.item_theme_color);
/adapters\ThemeColorAdapter.java:71:    }
/adapters\ThemeColorAdapter.java:73:    @Override
/adapters\ThemeColorAdapter.java:74:    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {
/adapters\ThemeColorAdapter.java:75:        holder.setItemOnClickListener(new View.OnClickListener() {
/adapters\ThemeColorAdapter.java:76:            @Override
/adapters\ThemeColorAdapter.java:77:            public void onClick(View v) {
/adapters\ThemeColorAdapter.java:78:                mSelectedColor = mColors.get(position);
/adapters\ThemeColorAdapter.java:79:                notifyDataSetChanged();
/adapters\ThemeColorAdapter.java:80:                if (getOnItemClickListener() != null) {
/adapters\ThemeColorAdapter.java:81:                    getOnItemClickListener().onClick(holder.itemView, mColors.get(position), position, 0);
/adapters\ThemeColorAdapter.java:82:                }
/adapters\ThemeColorAdapter.java:83:            }
/adapters\ThemeColorAdapter.java:84:        });
/adapters\ThemeColorAdapter.java:85:        View preview = holder.getView(R.id.theme_preview);
/adapters\ThemeColorAdapter.java:86:        preview.setBackgroundTintList(ColorStateList.valueOf(mColors.get(position)));
/adapters\ThemeColorAdapter.java:87:        if (mSelectedColor == mColors.get(position)) {
/adapters\ThemeColorAdapter.java:88:            holder.setVisibility(R.id.theme_selected, View.VISIBLE);
/adapters\ThemeColorAdapter.java:89:        } else {
/adapters\ThemeColorAdapter.java:90:            holder.setVisibility(R.id.theme_selected, View.GONE);
/adapters\ThemeColorAdapter.java:91:        }
/adapters\ThemeColorAdapter.java:92:    }
/adapters\ThemeColorAdapter.java:94:    @Override
/adapters\ThemeColorAdapter.java:95:    public int getItemCount() {
/adapters\ThemeColorAdapter.java:96:        return mColors.size();
/adapters\ThemeColorAdapter.java:97:    }
/adapters\ThemeColorAdapter.java:98:}
/adapters\ThreadStoreAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\ThreadStoreAdapter.java:3:import android.content.Context;
/adapters\ThreadStoreAdapter.java:4:import android.text.SpannableStringBuilder;
/adapters\ThreadStoreAdapter.java:5:import android.text.Spanned;
/adapters\ThreadStoreAdapter.java:6:import android.text.TextUtils;
/adapters\ThreadStoreAdapter.java:7:import android.widget.TextView;
/adapters\ThreadStoreAdapter.java:9:import com.huanchengfly.tieba.post.R;
/adapters\ThreadStoreAdapter.java:10:import com.huanchengfly.tieba.post.api.models.ThreadStoreBean;
/adapters\ThreadStoreAdapter.java:11:import com.huanchengfly.tieba.post.components.spans.RoundBackgroundColorSpan;
/adapters\ThreadStoreAdapter.java:12:import com.huanchengfly.tieba.post.interfaces.OnDeleteListener;
/adapters\ThreadStoreAdapter.java:13:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/adapters\ThreadStoreAdapter.java:14:import com.huanchengfly.tieba.post.utils.DisplayUtil;
/adapters\ThreadStoreAdapter.java:15:import com.huanchengfly.tieba.post.utils.ImageUtil;
/adapters\ThreadStoreAdapter.java:16:import com.huanchengfly.tieba.post.utils.StringUtil;
/adapters\ThreadStoreAdapter.java:17:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/adapters\ThreadStoreAdapter.java:18:import com.othershe.baseadapter.ViewHolder;
/adapters\ThreadStoreAdapter.java:19:import com.othershe.baseadapter.base.CommonBaseAdapter;
/adapters\ThreadStoreAdapter.java:21:import static com.huanchengfly.tieba.post.utils.Util.alphaColor;
/adapters\ThreadStoreAdapter.java:23:public class ThreadStoreAdapter extends CommonBaseAdapter<ThreadStoreBean.ThreadStoreInfo> {
/adapters\ThreadStoreAdapter.java:24:    public static final String TAG = "ThreadStoreAdapter";
/adapters\ThreadStoreAdapter.java:26:    public ThreadStoreAdapter(Context context) {
/adapters\ThreadStoreAdapter.java:27:        super(context, null, true);
/adapters\ThreadStoreAdapter.java:28:    }
/adapters\ThreadStoreAdapter.java:30:    public ThreadStoreAdapter setOnDeleteListener(OnDeleteListener onDeleteListener) {
/adapters\ThreadStoreAdapter.java:31:        return this;
/adapters\ThreadStoreAdapter.java:32:    }
/adapters\ThreadStoreAdapter.java:34:    @Override
/adapters\ThreadStoreAdapter.java:35:    protected void convert(ViewHolder viewHolder, ThreadStoreBean.ThreadStoreInfo threadStoreInfo, int position) {
/adapters\ThreadStoreAdapter.java:36:        TextView textView = viewHolder.getView(R.id.collect_item_title);
/adapters\ThreadStoreAdapter.java:37:        if ("1".equals(threadStoreInfo.isDeleted())) {
/adapters\ThreadStoreAdapter.java:38:            textView.setTextColor(ThemeUtils.getColorByAttr(mContext, R.attr.color_text_disabled));
/adapters\ThreadStoreAdapter.java:39:            viewHolder.setText(R.id.collect_item_header_title, R.string.tip_store_deleted);
/adapters\ThreadStoreAdapter.java:40:        } else {
/adapters\ThreadStoreAdapter.java:41:            textView.setTextColor(ThemeUtil.getTextColor(mContext));
/adapters\ThreadStoreAdapter.java:42:            viewHolder.setText(R.id.collect_item_header_title, threadStoreInfo.getAuthor().getNameShow() + "的贴子");
/adapters\ThreadStoreAdapter.java:43:        }
/adapters\ThreadStoreAdapter.java:44:        ImageUtil.load(
/adapters\ThreadStoreAdapter.java:45:                viewHolder.getView(R.id.collect_item_avatar),
/adapters\ThreadStoreAdapter.java:46:                ImageUtil.LOAD_TYPE_AVATAR,
/adapters\ThreadStoreAdapter.java:47:                StringUtil.getAvatarUrl(threadStoreInfo.getAuthor().getUserPortrait())
/adapters\ThreadStoreAdapter.java:48:        );
/adapters\ThreadStoreAdapter.java:49:        SpannableStringBuilder builder = new SpannableStringBuilder();
/adapters\ThreadStoreAdapter.java:50:        if (!TextUtils.equals(threadStoreInfo.getCount(), "0") &&
/adapters\ThreadStoreAdapter.java:51:                !TextUtils.equals(threadStoreInfo.getPostNo(), "0")) {
/adapters\ThreadStoreAdapter.java:52:            builder.append(mContext.getString(R.string.tip_thread_store_update, threadStoreInfo.getPostNo()),
/adapters\ThreadStoreAdapter.java:53:                    new RoundBackgroundColorSpan(mContext, alphaColor(ThemeUtils.getColorByAttr(mContext, R.attr.colorAccent), 30),
/adapters\ThreadStoreAdapter.java:54:                            ThemeUtils.getColorByAttr(mContext, R.attr.colorAccent),
/adapters\ThreadStoreAdapter.java:55:                            DisplayUtil.dp2px(mContext, 12)), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
/adapters\ThreadStoreAdapter.java:56:            builder.append(" ");
/adapters\ThreadStoreAdapter.java:57:        }
/adapters\ThreadStoreAdapter.java:58:        builder.append(threadStoreInfo.getTitle());
/adapters\ThreadStoreAdapter.java:59:        textView.setText(builder);
/adapters\ThreadStoreAdapter.java:60:    }
/adapters\ThreadStoreAdapter.java:62:    @Override
/adapters\ThreadStoreAdapter.java:63:    protected int getItemLayoutId() {
/adapters\ThreadStoreAdapter.java:64:        return R.layout.item_collect_thread;
/adapters\ThreadStoreAdapter.java:65:    }
/adapters\ThreadStoreAdapter.java:66:}
/adapters\TopForumsAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\TopForumsAdapter.java:3:import android.content.Context;
/adapters\TopForumsAdapter.java:4:import android.view.LayoutInflater;
/adapters\TopForumsAdapter.java:5:import android.view.ViewGroup;
/adapters\TopForumsAdapter.java:7:import androidx.annotation.NonNull;
/adapters\TopForumsAdapter.java:8:import androidx.recyclerview.widget.RecyclerView;
/adapters\TopForumsAdapter.java:10:import com.huanchengfly.tieba.post.api.models.ForumRecommend;
/adapters\TopForumsAdapter.java:11:import com.huanchengfly.tieba.post.R;
/adapters\TopForumsAdapter.java:12:import com.huanchengfly.tieba.post.components.MyViewHolder;
/adapters\TopForumsAdapter.java:13:import com.huanchengfly.tieba.post.interfaces.OnItemClickListener;
/adapters\TopForumsAdapter.java:14:import com.huanchengfly.tieba.post.interfaces.OnItemLongClickListener;
/adapters\TopForumsAdapter.java:15:import com.huanchengfly.tieba.post.utils.ImageUtil;
/adapters\TopForumsAdapter.java:17:import java.util.ArrayList;
/adapters\TopForumsAdapter.java:18:import java.util.List;
/adapters\TopForumsAdapter.java:20:public class TopForumsAdapter extends RecyclerView.Adapter<MyViewHolder> {
/adapters\TopForumsAdapter.java:21:    private Context mContext;
/adapters\TopForumsAdapter.java:22:    private List<ForumRecommend.LikeForum> topForums;
/adapters\TopForumsAdapter.java:24:    private OnItemClickListener<ForumRecommend.LikeForum> onItemClickListener;
/adapters\TopForumsAdapter.java:25:    private OnItemLongClickListener<ForumRecommend.LikeForum> onItemLongClickListener;
/adapters\TopForumsAdapter.java:27:    public TopForumsAdapter(Context context) {
/adapters\TopForumsAdapter.java:28:        this.mContext = context;
/adapters\TopForumsAdapter.java:29:        topForums = new ArrayList<>();
/adapters\TopForumsAdapter.java:30:    }
/adapters\TopForumsAdapter.java:32:    public OnItemClickListener<ForumRecommend.LikeForum> getOnItemClickListener() {
/adapters\TopForumsAdapter.java:33:        return onItemClickListener;
/adapters\TopForumsAdapter.java:34:    }
/adapters\TopForumsAdapter.java:36:    public TopForumsAdapter setOnItemClickListener(OnItemClickListener<ForumRecommend.LikeForum> onItemClickListener) {
/adapters\TopForumsAdapter.java:37:        this.onItemClickListener = onItemClickListener;
/adapters\TopForumsAdapter.java:38:        return this;
/adapters\TopForumsAdapter.java:39:    }
/adapters\TopForumsAdapter.java:41:    public OnItemLongClickListener<ForumRecommend.LikeForum> getOnItemLongClickListener() {
/adapters\TopForumsAdapter.java:42:        return onItemLongClickListener;
/adapters\TopForumsAdapter.java:43:    }
/adapters\TopForumsAdapter.java:45:    public TopForumsAdapter setOnItemLongClickListener(OnItemLongClickListener<ForumRecommend.LikeForum> onItemLongClickListener) {
/adapters\TopForumsAdapter.java:46:        this.onItemLongClickListener = onItemLongClickListener;
/adapters\TopForumsAdapter.java:47:        return this;
/adapters\TopForumsAdapter.java:48:    }
/adapters\TopForumsAdapter.java:50:    public void setData(List<ForumRecommend.LikeForum> likeForums) {
/adapters\TopForumsAdapter.java:51:        this.topForums = likeForums;
/adapters\TopForumsAdapter.java:52:        notifyDataSetChanged();
/adapters\TopForumsAdapter.java:53:    }
/adapters\TopForumsAdapter.java:55:    @NonNull
/adapters\TopForumsAdapter.java:56:    @Override
/adapters\TopForumsAdapter.java:57:    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
/adapters\TopForumsAdapter.java:58:        return new MyViewHolder(LayoutInflater.from(mContext).inflate(R.layout.item_top_forum, parent, false));
/adapters\TopForumsAdapter.java:59:    }
/adapters\TopForumsAdapter.java:61:    @Override
/adapters\TopForumsAdapter.java:62:    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {
/adapters\TopForumsAdapter.java:63:        ForumRecommend.LikeForum likeForum = topForums.get(position);
/adapters\TopForumsAdapter.java:64:        holder.setText(R.id.forum_item_name, likeForum.getForumName());
/adapters\TopForumsAdapter.java:65:        holder.setItemOnClickListener(v -> {
/adapters\TopForumsAdapter.java:66:            if (getOnItemClickListener() != null) {
/adapters\TopForumsAdapter.java:67:                getOnItemClickListener().onClick(holder.itemView, likeForum, position, getItemViewType(position));
/adapters\TopForumsAdapter.java:68:            }
/adapters\TopForumsAdapter.java:69:        });
/adapters\TopForumsAdapter.java:70:        holder.setItemOnLongClickListener(v -> {
/adapters\TopForumsAdapter.java:71:            if (getOnItemLongClickListener() != null) {
/adapters\TopForumsAdapter.java:72:                return getOnItemLongClickListener().onLongClick(holder.itemView, likeForum, position, getItemViewType(position));
/adapters\TopForumsAdapter.java:73:            }
/adapters\TopForumsAdapter.java:74:            return false;
/adapters\TopForumsAdapter.java:75:        });
/adapters\TopForumsAdapter.java:76:        ImageUtil.load(holder.getView(R.id.forum_item_avatar), ImageUtil.LOAD_TYPE_AVATAR, likeForum.getAvatar());
/adapters\TopForumsAdapter.java:77:    }
/adapters\TopForumsAdapter.java:79:    @Override
/adapters\TopForumsAdapter.java:80:    public int getItemCount() {
/adapters\TopForumsAdapter.java:81:        return topForums.size();
/adapters\TopForumsAdapter.java:82:    }
/adapters\TopForumsAdapter.java:83:}
/adapters\UserLikeForumAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\UserLikeForumAdapter.java:3:import android.content.Context;
/adapters\UserLikeForumAdapter.java:4:import android.text.TextUtils;
/adapters\UserLikeForumAdapter.java:5:import android.view.View;
/adapters\UserLikeForumAdapter.java:7:import com.huanchengfly.tieba.post.api.models.UserLikeForumBean;
/adapters\UserLikeForumAdapter.java:8:import com.huanchengfly.tieba.post.R;
/adapters\UserLikeForumAdapter.java:9:import com.huanchengfly.tieba.post.utils.ImageUtil;
/adapters\UserLikeForumAdapter.java:10:import com.othershe.baseadapter.ViewHolder;
/adapters\UserLikeForumAdapter.java:11:import com.othershe.baseadapter.base.CommonBaseAdapter;
/adapters\UserLikeForumAdapter.java:13:public class UserLikeForumAdapter extends CommonBaseAdapter<UserLikeForumBean.ForumBean> {
/adapters\UserLikeForumAdapter.java:14:    public UserLikeForumAdapter(Context context) {
/adapters\UserLikeForumAdapter.java:15:        super(context, null, true);
/adapters\UserLikeForumAdapter.java:16:    }
/adapters\UserLikeForumAdapter.java:18:    @Override
/adapters\UserLikeForumAdapter.java:19:    protected void convert(ViewHolder viewHolder, UserLikeForumBean.ForumBean forumBean, int position) {
/adapters\UserLikeForumAdapter.java:20:        viewHolder.setText(R.id.forum_item_name, forumBean.getName());
/adapters\UserLikeForumAdapter.java:21:        ImageUtil.load(viewHolder.getView(R.id.forum_item_avatar), ImageUtil.LOAD_TYPE_AVATAR, forumBean.getAvatar());
/adapters\UserLikeForumAdapter.java:22:        viewHolder.setText(R.id.forum_item_slogan, forumBean.getSlogan());
/adapters\UserLikeForumAdapter.java:23:        viewHolder.setVisibility(R.id.forum_item_slogan, TextUtils.isEmpty(forumBean.getSlogan()) ? View.GONE : View.VISIBLE);
/adapters\UserLikeForumAdapter.java:24:    }
/adapters\UserLikeForumAdapter.java:26:    @Override
/adapters\UserLikeForumAdapter.java:27:    protected int getItemLayoutId() {
/adapters\UserLikeForumAdapter.java:28:        return R.layout.item_user_like_forum;
/adapters\UserLikeForumAdapter.java:29:    }
/adapters\UserLikeForumAdapter.java:30:}
/adapters\UserPostAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\UserPostAdapter.java:3:import android.content.Context;
/adapters\UserPostAdapter.java:4:import android.text.TextUtils;
/adapters\UserPostAdapter.java:5:import android.text.format.DateUtils;
/adapters\UserPostAdapter.java:6:import android.util.Log;
/adapters\UserPostAdapter.java:7:import android.view.View;
/adapters\UserPostAdapter.java:8:import android.widget.TextView;
/adapters\UserPostAdapter.java:10:import com.huanchengfly.tieba.post.ExtensionsKt;
/adapters\UserPostAdapter.java:11:import com.huanchengfly.tieba.post.api.models.UserPostBean;
/adapters\UserPostAdapter.java:12:import com.huanchengfly.tieba.post.R;
/adapters\UserPostAdapter.java:13:import com.huanchengfly.tieba.post.utils.ImageUtil;
/adapters\UserPostAdapter.java:14:import com.huanchengfly.tieba.post.utils.NavigationHelper;
/adapters\UserPostAdapter.java:15:import com.huanchengfly.tieba.post.utils.StringUtil;
/adapters\UserPostAdapter.java:16:import com.othershe.baseadapter.ViewHolder;
/adapters\UserPostAdapter.java:17:import com.othershe.baseadapter.base.MultiBaseAdapter;
/adapters\UserPostAdapter.java:19:import java.util.HashMap;
/adapters\UserPostAdapter.java:20:import java.util.Map;
/adapters\UserPostAdapter.java:22:public class UserPostAdapter extends MultiBaseAdapter<UserPostBean.PostBean> {
/adapters\UserPostAdapter.java:23:    public static final int TYPE_THREAD = 0;
/adapters\UserPostAdapter.java:24:    public static final int TYPE_REPLY = 1;
/adapters\UserPostAdapter.java:26:    private NavigationHelper navigationHelper;
/adapters\UserPostAdapter.java:28:    public UserPostAdapter(Context context) {
/adapters\UserPostAdapter.java:29:        super(context, null, true);
/adapters\UserPostAdapter.java:30:        navigationHelper = NavigationHelper.newInstance(mContext);
/adapters\UserPostAdapter.java:31:    }
/adapters\UserPostAdapter.java:33:    @Override
/adapters\UserPostAdapter.java:34:    protected void convert(ViewHolder viewHolder, UserPostBean.PostBean postBean, int position, int type) {
/adapters\UserPostAdapter.java:35:        if (type == TYPE_THREAD) {
/adapters\UserPostAdapter.java:36:            viewHolder.setText(R.id.forum_item_comment_count_text, postBean.getReplyNum());
/adapters\UserPostAdapter.java:37:            viewHolder.setVisibility(R.id.forum_item_good_tip, View.GONE);
/adapters\UserPostAdapter.java:38:            viewHolder.setOnClickListener(R.id.forum_item, view -> {
/adapters\UserPostAdapter.java:39:                Map<String, String> map = new HashMap<>();
/adapters\UserPostAdapter.java:40:                map.put("tid", postBean.getThreadId());
/adapters\UserPostAdapter.java:41:                navigationHelper.navigationByData(NavigationHelper.ACTION_THREAD, map);
/adapters\UserPostAdapter.java:42:            });
/adapters\UserPostAdapter.java:43:            if (!TextUtils.isEmpty(postBean.getForumName())) {
/adapters\UserPostAdapter.java:44:                viewHolder.setVisibility(R.id.forum_item_forum_name, View.VISIBLE);
/adapters\UserPostAdapter.java:45:                viewHolder.setText(R.id.forum_item_forum_name, mContext.getString(R.string.tip_from_forum, postBean.getForumName()));
/adapters\UserPostAdapter.java:46:            } else {
/adapters\UserPostAdapter.java:47:                viewHolder.setVisibility(R.id.forum_item_forum_name, View.GONE);
/adapters\UserPostAdapter.java:48:            }
/adapters\UserPostAdapter.java:49:            if ("1".equals(postBean.getIsNoTitle())) {
/adapters\UserPostAdapter.java:50:                viewHolder.setVisibility(R.id.forum_item_title_holder, View.GONE);
/adapters\UserPostAdapter.java:51:            } else {
/adapters\UserPostAdapter.java:52:                viewHolder.setVisibility(R.id.forum_item_title_holder, View.VISIBLE);
/adapters\UserPostAdapter.java:53:                viewHolder.setText(R.id.forum_item_title, postBean.getTitle());
/adapters\UserPostAdapter.java:54:            }
/adapters\UserPostAdapter.java:55:            TextView textView = viewHolder.getView(R.id.forum_item_content_text);
/adapters\UserPostAdapter.java:56:            StringBuilder stringBuilder = new StringBuilder();
/adapters\UserPostAdapter.java:57:            if (postBean.getAbstracts() != null) {
/adapters\UserPostAdapter.java:58:                for (UserPostBean.PostContentBean postContentBean : postBean.getAbstracts()) {
/adapters\UserPostAdapter.java:59:                    stringBuilder.append(postContentBean.getText());
/adapters\UserPostAdapter.java:60:                }
/adapters\UserPostAdapter.java:61:                if (stringBuilder.length() > 0) {
/adapters\UserPostAdapter.java:62:                    textView.setVisibility(View.VISIBLE);
/adapters\UserPostAdapter.java:63:                    textView.setText(stringBuilder);
/adapters\UserPostAdapter.java:64:                } else {
/adapters\UserPostAdapter.java:65:                    textView.setText("");
/adapters\UserPostAdapter.java:66:                    textView.setVisibility(View.GONE);
/adapters\UserPostAdapter.java:67:                }
/adapters\UserPostAdapter.java:68:            } else {
/adapters\UserPostAdapter.java:69:                textView.setText("");
/adapters\UserPostAdapter.java:70:                textView.setVisibility(View.GONE);
/adapters\UserPostAdapter.java:71:            }
/adapters\UserPostAdapter.java:72:            viewHolder.setText(R.id.forum_item_user_name, StringUtil.getUsernameString(mContext, postBean.getUserName(), postBean.getNameShow()));
/adapters\UserPostAdapter.java:73:            viewHolder.setText(R.id.forum_item_user_time, String.valueOf(DateUtils.getRelativeTimeSpanString(Long.valueOf(postBean.getCreateTime()) * 1000L)));
/adapters\UserPostAdapter.java:74:            ImageUtil.load(viewHolder.getView(R.id.forum_item_user_avatar), ImageUtil.LOAD_TYPE_AVATAR, postBean.getUserPortrait());
/adapters\UserPostAdapter.java:75:        } else if (type == TYPE_REPLY) {
/adapters\UserPostAdapter.java:76:            ImageUtil.load(viewHolder.getView(R.id.message_list_item_user_avatar), ImageUtil.LOAD_TYPE_AVATAR, postBean.getUserPortrait());
/adapters\UserPostAdapter.java:77:            viewHolder.setText(R.id.message_list_item_user_name, StringUtil.getUsernameString(mContext, postBean.getUserName(), postBean.getNameShow()));
/adapters\UserPostAdapter.java:78:            viewHolder.setText(R.id.message_list_item_user_time, String.valueOf(DateUtils.getRelativeTimeSpanString(Long.valueOf(postBean.getCreateTime()) * 1000L)));
/adapters\UserPostAdapter.java:79:            TextView contentTextView = viewHolder.getView(R.id.message_list_item_content);
/adapters\UserPostAdapter.java:80:            StringBuilder content = new StringBuilder();
/adapters\UserPostAdapter.java:81:            for (UserPostBean.PostContentBean postContentBean : postBean.getContent().get(0).getPostContent()) {
/adapters\UserPostAdapter.java:82:                Log.i("UserPostAdapter", "convert: " + ExtensionsKt.toJson(postContentBean));
/adapters\UserPostAdapter.java:83:                content.append(postContentBean.getText());
/adapters\UserPostAdapter.java:84:            }
/adapters\UserPostAdapter.java:85:            contentTextView.setText(content);
/adapters\UserPostAdapter.java:86:            viewHolder.setText(R.id.message_list_item_quote, postBean.getTitle().replace("回复：", "原贴："));
/adapters\UserPostAdapter.java:87:            viewHolder.setOnClickListener(R.id.message_list_item_quote_parent, v -> {
/adapters\UserPostAdapter.java:88:                HashMap<String, String> hashMap = new HashMap<>();
/adapters\UserPostAdapter.java:89:                hashMap.put("tid", postBean.getThreadId());
/adapters\UserPostAdapter.java:90:                navigationHelper.navigationByData(NavigationHelper.ACTION_THREAD, hashMap);
/adapters\UserPostAdapter.java:91:            });
/adapters\UserPostAdapter.java:92:            viewHolder.setText(R.id.message_list_item_source, mContext.getString(R.string.text_message_list_item_source, postBean.getForumName()));
/adapters\UserPostAdapter.java:93:        }
/adapters\UserPostAdapter.java:94:    }
/adapters\UserPostAdapter.java:96:    @Override
/adapters\UserPostAdapter.java:97:    protected int getItemLayoutId(int type) {
/adapters\UserPostAdapter.java:98:        return type == TYPE_THREAD ? R.layout.item_forum_thread_common : R.layout.item_message_list;
/adapters\UserPostAdapter.java:99:    }
/adapters\UserPostAdapter.java:101:    @Override
/adapters\UserPostAdapter.java:102:    protected int getViewType(int position, UserPostBean.PostBean postBean) {
/adapters\UserPostAdapter.java:103:        return "1".equals(postBean.getIsThread()) ? TYPE_THREAD : TYPE_REPLY;
/adapters\UserPostAdapter.java:104:    }
/adapters\UserPostAdapter.java:105:}
/adapters\ViewPagerAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\ViewPagerAdapter.java:3:import android.view.ViewGroup;
/adapters\ViewPagerAdapter.java:5:import androidx.annotation.NonNull;
/adapters\ViewPagerAdapter.java:6:import androidx.fragment.app.FragmentManager;
/adapters\ViewPagerAdapter.java:7:import androidx.fragment.app.FragmentPagerAdapter;
/adapters\ViewPagerAdapter.java:9:import com.huanchengfly.tieba.post.fragments.BaseFragment;
/adapters\ViewPagerAdapter.java:11:import java.util.ArrayList;
/adapters\ViewPagerAdapter.java:12:import java.util.List;
/adapters\ViewPagerAdapter.java:14:public class ViewPagerAdapter extends FragmentPagerAdapter {
/adapters\ViewPagerAdapter.java:15:    private BaseFragment currentFragment;
/adapters\ViewPagerAdapter.java:16:    private int currentFragmentPosition;
/adapters\ViewPagerAdapter.java:17:    private List<BaseFragment> fragments = new ArrayList<>();
/adapters\ViewPagerAdapter.java:19:    public ViewPagerAdapter(FragmentManager fm) {
/adapters\ViewPagerAdapter.java:20:        super(fm);
/adapters\ViewPagerAdapter.java:21:    }
/adapters\ViewPagerAdapter.java:23:    public List<BaseFragment> getFragments() {
/adapters\ViewPagerAdapter.java:24:        return fragments;
/adapters\ViewPagerAdapter.java:25:    }
/adapters\ViewPagerAdapter.java:27:    @NonNull
/adapters\ViewPagerAdapter.java:28:    @Override
/adapters\ViewPagerAdapter.java:29:    public BaseFragment getItem(int position) {
/adapters\ViewPagerAdapter.java:30:        return fragments.get(position);
/adapters\ViewPagerAdapter.java:31:    }
/adapters\ViewPagerAdapter.java:33:    @Override
/adapters\ViewPagerAdapter.java:34:    public int getCount() {
/adapters\ViewPagerAdapter.java:35:        return fragments.size();
/adapters\ViewPagerAdapter.java:36:    }
/adapters\ViewPagerAdapter.java:38:    public void addFragment(BaseFragment fragment) {
/adapters\ViewPagerAdapter.java:39:        fragments.add(fragment);
/adapters\ViewPagerAdapter.java:40:    }
/adapters\ViewPagerAdapter.java:42:    public void addFragment(BaseFragment fragment, int position) {
/adapters\ViewPagerAdapter.java:43:        fragments.add(position, fragment);
/adapters\ViewPagerAdapter.java:44:    }
/adapters\ViewPagerAdapter.java:46:    @Override
/adapters\ViewPagerAdapter.java:47:    public void setPrimaryItem(@NonNull ViewGroup container, int position, @NonNull Object object) {
/adapters\ViewPagerAdapter.java:48:        currentFragment = (BaseFragment) object;
/adapters\ViewPagerAdapter.java:49:        currentFragmentPosition = position;
/adapters\ViewPagerAdapter.java:50:        super.setPrimaryItem(container, position, object);
/adapters\ViewPagerAdapter.java:51:    }
/adapters\ViewPagerAdapter.java:53:    public BaseFragment getCurrentFragment() {
/adapters\ViewPagerAdapter.java:54:        return currentFragment;
/adapters\ViewPagerAdapter.java:55:    }
/adapters\ViewPagerAdapter.java:57:    public int getCurrentFragmentPosition() {
/adapters\ViewPagerAdapter.java:58:        return currentFragmentPosition;
/adapters\ViewPagerAdapter.java:59:    }
/adapters\ViewPagerAdapter.java:61:    public void clear() {
/adapters\ViewPagerAdapter.java:62:        fragments.clear();
/adapters\ViewPagerAdapter.java:63:        notifyDataSetChanged();
/adapters\ViewPagerAdapter.java:64:    }
/adapters\ViewPagerAdapter.java:65:}/adapters\ZyqFriendAdapter.java:1:package com.huanchengfly.tieba.post.adapters;
/adapters\ZyqFriendAdapter.java:3:import android.content.Context;
/adapters\ZyqFriendAdapter.java:4:import android.view.LayoutInflater;
/adapters\ZyqFriendAdapter.java:5:import android.view.ViewGroup;
/adapters\ZyqFriendAdapter.java:7:import androidx.annotation.NonNull;
/adapters\ZyqFriendAdapter.java:8:import androidx.recyclerview.widget.RecyclerView;
/adapters\ZyqFriendAdapter.java:10:import com.huanchengfly.tieba.post.R;
/adapters\ZyqFriendAdapter.java:11:import com.huanchengfly.tieba.post.components.MyViewHolder;
/adapters\ZyqFriendAdapter.java:12:import com.huanchengfly.tieba.post.utils.NavigationHelper;
/adapters\ZyqFriendAdapter.java:14:import java.lang.ref.WeakReference;
/adapters\ZyqFriendAdapter.java:15:import java.util.List;
/adapters\ZyqFriendAdapter.java:17:public class ZyqFriendAdapter extends RecyclerView.Adapter<MyViewHolder> {
/adapters\ZyqFriendAdapter.java:18:    private WeakReference<Context> mContextWeakReference;
/adapters\ZyqFriendAdapter.java:19:    private List<String> mList;
/adapters\ZyqFriendAdapter.java:20:    private NavigationHelper mHelper;
/adapters\ZyqFriendAdapter.java:22:    public ZyqFriendAdapter(Context context, List<String> list) {
/adapters\ZyqFriendAdapter.java:23:        mContextWeakReference = new WeakReference<>(context);
/adapters\ZyqFriendAdapter.java:24:        mList = list;
/adapters\ZyqFriendAdapter.java:25:        mHelper = NavigationHelper.newInstance(getContext());
/adapters\ZyqFriendAdapter.java:26:    }
/adapters\ZyqFriendAdapter.java:28:    public Context getContext() {
/adapters\ZyqFriendAdapter.java:29:        return mContextWeakReference.get();
/adapters\ZyqFriendAdapter.java:30:    }
/adapters\ZyqFriendAdapter.java:32:    @NonNull
/adapters\ZyqFriendAdapter.java:33:    @Override
/adapters\ZyqFriendAdapter.java:34:    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
/adapters\ZyqFriendAdapter.java:35:        return new MyViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.item_zyq_friend, parent, false));
/adapters\ZyqFriendAdapter.java:36:    }
/adapters\ZyqFriendAdapter.java:38:    @Override
/adapters\ZyqFriendAdapter.java:39:    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {
/adapters\ZyqFriendAdapter.java:40:        holder.setText(R.id.title, getContext().getString(R.string.title_forum, mList.get(position)));
/adapters\ZyqFriendAdapter.java:41:        holder.setItemOnClickListener(v -> mHelper.navigationByData(NavigationHelper.ACTION_FORUM, mList.get(position)));
/adapters\ZyqFriendAdapter.java:42:    }
/adapters\ZyqFriendAdapter.java:44:    @Override
/adapters\ZyqFriendAdapter.java:45:    public int getItemCount() {
/adapters\ZyqFriendAdapter.java:46:        return mList.size();
/adapters\ZyqFriendAdapter.java:47:    }
/adapters\ZyqFriendAdapter.java:48:}
/api\Enums.kt:1:package com.huanchengfly.tieba.post.api
/api\Enums.kt:3:enum class ForumSortType(val value: Int) {
/api\Enums.kt:4:    REPLY_TIME(0),
/api\Enums.kt:5:    SEND_TIME(1),
/api\Enums.kt:6:    ONLY_FOLLOWED(2);
/api\Enums.kt:8:    override fun toString(): String {
/api\Enums.kt:9:        return value.toString()
/api\Enums.kt:10:    }
/api\Enums.kt:12:    companion object {
/api\Enums.kt:13:        @JvmStatic
/api\Enums.kt:14:        fun valueOf(value: Int): ForumSortType {
/api\Enums.kt:15:            return when (value) {
/api\Enums.kt:16:                REPLY_TIME.value -> REPLY_TIME
/api\Enums.kt:17:                SEND_TIME.value -> SEND_TIME
/api\Enums.kt:18:                ONLY_FOLLOWED.value -> ONLY_FOLLOWED
/api\Enums.kt:19:                else -> throw IllegalArgumentException()
/api\Enums.kt:20:            }
/api\Enums.kt:21:        }
/api\Enums.kt:22:    }
/api\Enums.kt:23:}
/api\Enums.kt:25:enum class SearchThreadOrder(val value: Int) {
/api\Enums.kt:26:    NEW(1),
/api\Enums.kt:27:    OLD(0),
/api\Enums.kt:28:    RELEVANT(2);
/api\Enums.kt:30:    override fun toString(): String {
/api\Enums.kt:31:        return value.toString()
/api\Enums.kt:32:    }
/api\Enums.kt:34:    companion object {
/api\Enums.kt:35:        @JvmStatic
/api\Enums.kt:36:        fun valueOf(value: Int): SearchThreadOrder {
/api\Enums.kt:37:            return when (value) {
/api\Enums.kt:38:                NEW.value -> NEW
/api\Enums.kt:39:                OLD.value -> OLD
/api\Enums.kt:40:                RELEVANT.value -> RELEVANT
/api\Enums.kt:41:                else -> throw IllegalArgumentException()
/api\Enums.kt:42:            }
/api\Enums.kt:43:        }
/api\Enums.kt:44:    }
/api\Enums.kt:45:}
/api\Enums.kt:47:enum class SearchThreadFilter(val value: Int) {
/api\Enums.kt:48:    ONLY_THREAD(1),
/api\Enums.kt:49:    ALL(2);
/api\Enums.kt:51:    override fun toString(): String {
/api\Enums.kt:52:        return value.toString()
/api\Enums.kt:53:    }
/api\Enums.kt:55:    companion object {
/api\Enums.kt:56:        @JvmStatic
/api\Enums.kt:57:        fun valueOf(value: Int): SearchThreadFilter {
/api\Enums.kt:58:            return when (value) {
/api\Enums.kt:59:                ONLY_THREAD.value -> ONLY_THREAD
/api\Enums.kt:60:                ALL.value -> ALL
/api\Enums.kt:61:                else -> throw IllegalArgumentException()
/api\Enums.kt:62:            }
/api\Enums.kt:63:        }
/api\Enums.kt:64:    }
/api\Enums.kt:65:}/api\Extensions.kt:1:package com.huanchengfly.tieba.post.api
/api\Extensions.kt:3:import okhttp3.FormBody
/api\Extensions.kt:4:import java.io.UnsupportedEncodingException
/api\Extensions.kt:5:import java.net.URLDecoder
/api\Extensions.kt:6:import java.net.URLEncoder
/api\Extensions.kt:8:fun String.urlEncode() : String {
/api\Extensions.kt:9:    return try {
/api\Extensions.kt:10:        URLEncoder.encode(this, "UTF-8")
/api\Extensions.kt:11:    } catch (e: UnsupportedEncodingException) {
/api\Extensions.kt:12:        e.printStackTrace()
/api\Extensions.kt:13:        this
/api\Extensions.kt:14:    }
/api\Extensions.kt:15:}
/api\Extensions.kt:17:fun String.urlDecode() : String {
/api\Extensions.kt:18:    return try {
/api\Extensions.kt:19:        URLDecoder.decode(this, "UTF-8")
/api\Extensions.kt:20:    } catch (e: UnsupportedEncodingException) {
/api\Extensions.kt:21:        e.printStackTrace()
/api\Extensions.kt:22:        this
/api\Extensions.kt:23:    }
/api\Extensions.kt:24:}
/api\Extensions.kt:26:fun FormBody.containsEncodedName(name: String): Boolean {
/api\Extensions.kt:27:    repeat(size) {
/api\Extensions.kt:28:        if (encodedName(it) == name) return true
/api\Extensions.kt:29:    }
/api\Extensions.kt:30:    return false
/api\Extensions.kt:31:}
/api\Extensions.kt:33:inline fun FormBody.forEach(block: (String, String) -> Unit) {
/api\Extensions.kt:34:    repeat(size) {
/api\Extensions.kt:35:        block(encodedName(it), encodedValue(it))
/api\Extensions.kt:36:    }
/api\Extensions.kt:37:}
/api\Extensions.kt:39:fun FormBody.raw() =
/api\Extensions.kt:40:        StringBuilder().apply {
/api\Extensions.kt:41:            repeat(size) {
/api\Extensions.kt:42:                if (it != 0) append('&')
/api\Extensions.kt:43:                append(encodedName(it))
/api\Extensions.kt:44:                append('=')
/api\Extensions.kt:45:                append(encodedValue(it))
/api\Extensions.kt:46:            }
/api\Extensions.kt:47:        }.toString()
/api\Extensions.kt:49:fun FormBody.sortedEncodedRaw(separator: Boolean = true): String {
/api\Extensions.kt:50:    val nameAndValue = ArrayList<String>()
/api\Extensions.kt:51:    repeat(size) {
/api\Extensions.kt:52:        nameAndValue.add("${encodedName(it)}=${encodedValue(it)}")
/api\Extensions.kt:53:    }
/api\Extensions.kt:54:    if (separator) return nameAndValue.sorted().joinToString(separator = "&")
/api\Extensions.kt:55:    else return nameAndValue.sorted().joinToString(separator = "")
/api\Extensions.kt:56:}
/api\Extensions.kt:58:fun FormBody.sortedRaw(separator: Boolean = true): String {
/api\Extensions.kt:59:    val nameAndValue = ArrayList<String>()
/api\Extensions.kt:60:    repeat(size) {
/api\Extensions.kt:61:        nameAndValue.add("${name(it)}=${value(it)}")
/api\Extensions.kt:62:    }
/api\Extensions.kt:63:    if (separator) return nameAndValue.sorted().joinToString(separator = "&")
/api\Extensions.kt:64:    else return nameAndValue.sorted().joinToString(separator = "")
/api\Extensions.kt:65:}
/api\Extensions.kt:67:fun FormBody.Builder.addAllEncoded(formBody: FormBody): FormBody.Builder {
/api\Extensions.kt:68:    with(formBody) {
/api\Extensions.kt:69:        repeat(size) {
/api\Extensions.kt:70:            addEncoded(encodedName(it), encodedValue(it))
/api\Extensions.kt:71:        }
/api\Extensions.kt:72:    }
/api\Extensions.kt:73:    return this
/api\Extensions.kt:74:}
/api\Extensions.kt:76:internal typealias ParamExpression = Pair<String, () -> String?>
/api\Extensions.kt:78:internal inline fun Array<out ParamExpression>.forEachNonNull(action: (String, String) -> Unit) {
/api\Extensions.kt:79:    forEach { (name, valueExpression) ->
/api\Extensions.kt:80:        val value = valueExpression()
/api\Extensions.kt:81:        if (value != null) {
/api\Extensions.kt:82:            action(name, value)
/api\Extensions.kt:83:        }
/api\Extensions.kt:84:    }
/api\Extensions.kt:85:}/api\HttpConstant.kt:1:package com.huanchengfly.tieba.post.api
/api\HttpConstant.kt:3:import io.michaelrocks.paranoid.Obfuscate
/api\HttpConstant.kt:5:@Obfuscate
/api\HttpConstant.kt:6:object Method {
/api\HttpConstant.kt:7:    const val GET = "GET"
/api\HttpConstant.kt:8:    const val POST = "POST"
/api\HttpConstant.kt:9:    const val PATCH = "PATCH"
/api\HttpConstant.kt:10:    const val PUT = "PUT"
/api\HttpConstant.kt:11:    const val DELETE = "DELETE"
/api\HttpConstant.kt:12:    const val OPTION = "OPTION"
/api\HttpConstant.kt:13:}
/api\HttpConstant.kt:15:object Error {
/api\HttpConstant.kt:16:    const val ERROR_NET = 10
/api\HttpConstant.kt:17:    const val ERROR_UNKNOWN = -1
/api\HttpConstant.kt:18:    const val ERROR_PARSE = -2
/api\HttpConstant.kt:19:    const val ERROR_NOT_LOGGED_IN = 11
/api\HttpConstant.kt:20:    const val ERROR_LOGGED_IN_EXPIRED = 12
/api\HttpConstant.kt:21:    const val ERROR_UPDATE_NOT_ENABLE = 100
/api\HttpConstant.kt:22:}
/api\HttpConstant.kt:24:@Obfuscate
/api\HttpConstant.kt:25:object Url {
/api\HttpConstant.kt:26:    const val UPDATE_INFO = "https://huancheng65.github.io/TiebaLite/update_v2.json"
/api\HttpConstant.kt:27:    const val CHECK_UPDATE = "https://tblite.huanchengfly.tk/api/update"
/api\HttpConstant.kt:28:    const val CHANGELOG = "https://tblite.huanchengfly.tk/api/changelog/"
/api\HttpConstant.kt:29:}
/api\HttpConstant.kt:31:@Obfuscate
/api\HttpConstant.kt:32:object Header {
/api\HttpConstant.kt:33:    const val FORCE_PARAM = "force_param"
/api\HttpConstant.kt:34:    const val FORCE_PARAM_QUERY = "query"
/api\HttpConstant.kt:36:    const val FORCE_LOGIN = "force_login"
/api\HttpConstant.kt:37:    const val FORCE_LOGIN_TRUE = "true"
/api\HttpConstant.kt:39:    const val ADD_COOKIE = "add_cookie"
/api\HttpConstant.kt:40:    const val ADD_COOKIE_FALSE = "false"
/api\HttpConstant.kt:42:    const val COOKIE = "cookie"
/api\HttpConstant.kt:43:    const val HOST = "Host"
/api\HttpConstant.kt:44:    const val ORIGIN = "Origin"
/api\HttpConstant.kt:45:    const val REFERER = "Referer"
/api\HttpConstant.kt:46:    const val USER_AGENT = "User-Agent"
/api\HttpConstant.kt:47:    const val PRAGMA = "Pragma"
/api\HttpConstant.kt:48:    const val CUID = "cuid"
/api\HttpConstant.kt:49:    const val CUID_GALAXY2 = "cuid_galaxy2"
/api\HttpConstant.kt:50:    const val CUID_GID = "cuid_gid"
/api\HttpConstant.kt:51:}
/api\HttpConstant.kt:53:@Obfuscate
/api\HttpConstant.kt:54:object Param {
/api\HttpConstant.kt:55:    const val BDUSS = "BDUSS"
/api\HttpConstant.kt:56:    const val CLIENT_VERSION = "_client_version"
/api\HttpConstant.kt:57:    const val CLIENT_TYPE = "_client_type"
/api\HttpConstant.kt:58:    const val CLIENT_ID = "_client_id"
/api\HttpConstant.kt:59:    const val PHONE_IMEI = "_phone_imei"
/api\HttpConstant.kt:60:    const val CUID = "cuid"
/api\HttpConstant.kt:61:    const val CUID_GALAXY2 = "cuid_galaxy2"
/api\HttpConstant.kt:62:    const val CUID_GID = "cuid_gid"
/api\HttpConstant.kt:63:    const val FROM = "from"
/api\HttpConstant.kt:64:    const val NET_TYPE = "net_type"
/api\HttpConstant.kt:65:    const val MODEL = "model"
/api\HttpConstant.kt:66:    const val OS_VERSION = "_os_version"
/api\HttpConstant.kt:67:    const val TIMESTAMP = "timestamp"
/api\HttpConstant.kt:68:    const val SIGN = "sign"
/api\HttpConstant.kt:69:    const val SUBAPP_TYPE = "subapp_type"
/api\HttpConstant.kt:70:}/api\LiteApi.kt:1:package com.huanchengfly.tieba.post.api
/api\LiteApi.kt:3:import android.annotation.SuppressLint
/api\LiteApi.kt:4:import android.content.Context
/api\LiteApi.kt:5:import com.huanchengfly.tieba.post.BaseApplication
/api\LiteApi.kt:6:import com.huanchengfly.tieba.post.api.interfaces.CommonAPICallback
/api\LiteApi.kt:7:import com.huanchengfly.tieba.post.api.models.ChangelogBean
/api\LiteApi.kt:8:import com.huanchengfly.tieba.post.api.models.NewUpdateBean
/api\LiteApi.kt:9:import com.huanchengfly.tieba.post.api.models.UpdateInfoBean
/api\LiteApi.kt:10:import com.huanchengfly.tieba.post.utils.SharedPreferencesUtil
/api\LiteApi.kt:11:import com.huanchengfly.tieba.post.utils.VersionUtil
/api\LiteApi.kt:12:import com.huanchengfly.tieba.post.utils.appPreferences
/api\LiteApi.kt:13:import com.tsy.sdk.myokhttp.MyOkHttp
/api\LiteApi.kt:14:import com.tsy.sdk.myokhttp.response.GsonResponseHandler
/api\LiteApi.kt:15:import io.michaelrocks.paranoid.Obfuscate
/api\LiteApi.kt:16:import java.lang.ref.WeakReference
/api\LiteApi.kt:18:@Obfuscate
/api\LiteApi.kt:19:class LiteApi private constructor(context: Context) {
/api\LiteApi.kt:20:    private val myOkHttp: MyOkHttp = MyOkHttp()
/api\LiteApi.kt:21:    private val contextWeakReference: WeakReference<Context> = WeakReference(context)
/api\LiteApi.kt:22:    val context: Context
/api\LiteApi.kt:23:        get() = contextWeakReference.get()!!
/api\LiteApi.kt:25:    fun changelog(apiCallback: CommonAPICallback<ChangelogBean?>) {
/api\LiteApi.kt:26:        val builder = myOkHttp.get()
/api\LiteApi.kt:27:                .url(Url.CHANGELOG + VersionUtil.getVersionCode(context))
/api\LiteApi.kt:28:        val oldVersion = SharedPreferencesUtil.get(context, SharedPreferencesUtil.SP_APP_DATA).getInt("version", -1)
/api\LiteApi.kt:29:        if (oldVersion != -1) {
/api\LiteApi.kt:30:            builder.addParam("update_from", oldVersion.toString())
/api\LiteApi.kt:31:        }
/api\LiteApi.kt:32:        builder.enqueue(object : GsonResponseHandler<ChangelogBean>() {
/api\LiteApi.kt:33:            override fun onFailure(statusCode: Int, error_msg: String) {
/api\LiteApi.kt:34:                apiCallback.onFailure(statusCode, error_msg)
/api\LiteApi.kt:35:            }
/api\LiteApi.kt:37:            override fun onSuccess(statusCode: Int, response: ChangelogBean) {
/api\LiteApi.kt:38:                if (response.isSuccess) {
/api\LiteApi.kt:39:                    apiCallback.onSuccess(response)
/api\LiteApi.kt:40:                } else {
/api\LiteApi.kt:41:                    apiCallback.onFailure(response.errorCode, response.errorMsg)
/api\LiteApi.kt:42:                }
/api\LiteApi.kt:43:            }
/api\LiteApi.kt:44:        })
/api\LiteApi.kt:45:    }
/api\LiteApi.kt:47:    fun newCheckUpdate(apiCallback: CommonAPICallback<NewUpdateBean?>) {
/api\LiteApi.kt:48:        val beta = context.appPreferences.checkBetaUpdate
/api\LiteApi.kt:49:        myOkHttp.get()
/api\LiteApi.kt:50:                .url(Url.CHECK_UPDATE)
/api\LiteApi.kt:51:                .addParam("version_code", VersionUtil.getVersionCode(context).toString())
/api\LiteApi.kt:52:                .addParam("beta", beta.toString())
/api\LiteApi.kt:53:                .addParam("lang", getLanguage())
/api\LiteApi.kt:54:                .enqueue(object : GsonResponseHandler<NewUpdateBean>() {
/api\LiteApi.kt:55:                    override fun onFailure(statusCode: Int, error_msg: String) {
/api\LiteApi.kt:56:                        apiCallback.onFailure(statusCode, error_msg)
/api\LiteApi.kt:57:                    }
/api\LiteApi.kt:59:                    override fun onSuccess(statusCode: Int, response: NewUpdateBean) {
/api\LiteApi.kt:60:                        if (response.isSuccess == true) {
/api\LiteApi.kt:61:                            apiCallback.onSuccess(response)
/api\LiteApi.kt:62:                        } else {
/api\LiteApi.kt:63:                            response.errorCode?.let { apiCallback.onFailure(it, response.errorMsg) }
/api\LiteApi.kt:64:                        }
/api\LiteApi.kt:65:                    }
/api\LiteApi.kt:66:                })
/api\LiteApi.kt:67:    }
/api\LiteApi.kt:69:    fun updateInfo(apiCallback: CommonAPICallback<UpdateInfoBean?>) {
/api\LiteApi.kt:70:        myOkHttp.get()
/api\LiteApi.kt:71:                .url(Url.UPDATE_INFO)
/api\LiteApi.kt:72:                .enqueue(object : GsonResponseHandler<UpdateInfoBean?>() {
/api\LiteApi.kt:73:                    override fun onFailure(statusCode: Int, error_msg: String) {
/api\LiteApi.kt:74:                        apiCallback.onFailure(statusCode, error_msg)
/api\LiteApi.kt:75:                    }
/api\LiteApi.kt:77:                    override fun onSuccess(statusCode: Int, response: UpdateInfoBean?) {
/api\LiteApi.kt:78:                        apiCallback.onSuccess(response)
/api\LiteApi.kt:79:                    }
/api\LiteApi.kt:80:                })
/api\LiteApi.kt:81:    }
/api\LiteApi.kt:83:    companion object {
/api\LiteApi.kt:84:        const val TAG = "LiteApi"
/api\LiteApi.kt:85:        @JvmStatic
/api\LiteApi.kt:86:        @get:Synchronized
/api\LiteApi.kt:87:        @SuppressLint("StaticFieldLeak")
/api\LiteApi.kt:88:        var instance: LiteApi? = null
/api\LiteApi.kt:89:            get() {
/api\LiteApi.kt:90:                if (field == null) {
/api\LiteApi.kt:91:                    synchronized(LiteApi::class.java) {
/api\LiteApi.kt:92:                        if (field == null) {
/api\LiteApi.kt:93:                            field = LiteApi(BaseApplication.instance)
/api\LiteApi.kt:94:                        }
/api\LiteApi.kt:95:                    }
/api\LiteApi.kt:96:                }
/api\LiteApi.kt:97:                return field
/api\LiteApi.kt:98:            }
/api\LiteApi.kt:99:            private set
/api\LiteApi.kt:101:    }
/api\LiteApi.kt:103:}/api\TiebaApi.kt:1:package com.huanchengfly.tieba.post.api
/api\TiebaApi.kt:3:import com.huanchengfly.tieba.post.api.interfaces.ITiebaApi
/api\TiebaApi.kt:4:import com.huanchengfly.tieba.post.api.interfaces.impls.MixedTiebaApiImpl
/api\TiebaApi.kt:6:object TiebaApi {
/api\TiebaApi.kt:7:    @JvmStatic
/api\TiebaApi.kt:8:    fun getInstance(): ITiebaApi = MixedTiebaApiImpl
/api\TiebaApi.kt:9:}/api\Utils.kt:1:package com.huanchengfly.tieba.post.api
/api\Utils.kt:3:import com.huanchengfly.tieba.post.BaseApplication
/api\Utils.kt:4:import com.huanchengfly.tieba.post.BaseApplication.ScreenInfo
/api\Utils.kt:5:import com.huanchengfly.tieba.post.utils.StatusBarUtil
/api\Utils.kt:6:import java.util.*
/api\Utils.kt:8:fun getLanguage(): String {
/api\Utils.kt:9:    val locale = Locale.getDefault()
/api\Utils.kt:10:    return "${locale.language}-${locale.country}"
/api\Utils.kt:11:}
/api\Utils.kt:13:fun getScreenHeight(): Int = ScreenInfo.EXACT_SCREEN_HEIGHT - StatusBarUtil.getStatusBarHeight(BaseApplication.instance)
/api\Utils.kt:15:fun getScreenWidth(): Int = ScreenInfo.EXACT_SCREEN_WIDTH/api\adapters\ErrorMsgAdapter.java:1:package com.huanchengfly.tieba.post.api.adapters;
/api\adapters\ErrorMsgAdapter.java:3:import com.google.gson.JsonDeserializationContext;
/api\adapters\ErrorMsgAdapter.java:4:import com.google.gson.JsonDeserializer;
/api\adapters\ErrorMsgAdapter.java:5:import com.google.gson.JsonElement;
/api\adapters\ErrorMsgAdapter.java:6:import com.google.gson.JsonParseException;
/api\adapters\ErrorMsgAdapter.java:8:import java.lang.reflect.Type;
/api\adapters\ErrorMsgAdapter.java:10:public class ErrorMsgAdapter implements JsonDeserializer<String> {
/api\adapters\ErrorMsgAdapter.java:11:    @Override
/api\adapters\ErrorMsgAdapter.java:12:    public String deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
/api\adapters\ErrorMsgAdapter.java:13:        if (json.isJsonPrimitive()) {
/api\adapters\ErrorMsgAdapter.java:14:            return json.getAsString();
/api\adapters\ErrorMsgAdapter.java:15:        } else if (json.isJsonObject()) {
/api\adapters\ErrorMsgAdapter.java:16:            return json.getAsJsonObject().get("errmsg").getAsString();
/api\adapters\ErrorMsgAdapter.java:17:        }
/api\adapters\ErrorMsgAdapter.java:18:        return null;
/api\adapters\ErrorMsgAdapter.java:19:    }
/api\adapters\ErrorMsgAdapter.java:20:}
/api\adapters\ExactMatchAdapter.java:1:package com.huanchengfly.tieba.post.api.adapters;
/api\adapters\ExactMatchAdapter.java:3:import com.google.gson.JsonDeserializationContext;
/api\adapters\ExactMatchAdapter.java:4:import com.google.gson.JsonDeserializer;
/api\adapters\ExactMatchAdapter.java:5:import com.google.gson.JsonElement;
/api\adapters\ExactMatchAdapter.java:6:import com.google.gson.JsonParseException;
/api\adapters\ExactMatchAdapter.java:7:import com.huanchengfly.tieba.post.api.models.SearchForumBean;
/api\adapters\ExactMatchAdapter.java:9:import java.lang.reflect.Type;
/api\adapters\ExactMatchAdapter.java:11:public class ExactMatchAdapter implements JsonDeserializer<SearchForumBean.ExactForumInfoBean> {
/api\adapters\ExactMatchAdapter.java:12:    @Override
/api\adapters\ExactMatchAdapter.java:13:    public SearchForumBean.ExactForumInfoBean deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
/api\adapters\ExactMatchAdapter.java:14:        if (json.isJsonArray()) {
/api\adapters\ExactMatchAdapter.java:15:            return null;
/api\adapters\ExactMatchAdapter.java:16:        }
/api\adapters\ExactMatchAdapter.java:17:        return context.deserialize(json, typeOfT);
/api\adapters\ExactMatchAdapter.java:18:    }
/api\adapters\ExactMatchAdapter.java:19:}
/api\adapters\ForumFuzzyMatchAdapter.java:1:package com.huanchengfly.tieba.post.api.adapters;
/api\adapters\ForumFuzzyMatchAdapter.java:3:import androidx.annotation.Nullable;
/api\adapters\ForumFuzzyMatchAdapter.java:5:import com.google.gson.JsonArray;
/api\adapters\ForumFuzzyMatchAdapter.java:6:import com.google.gson.JsonDeserializationContext;
/api\adapters\ForumFuzzyMatchAdapter.java:7:import com.google.gson.JsonDeserializer;
/api\adapters\ForumFuzzyMatchAdapter.java:8:import com.google.gson.JsonElement;
/api\adapters\ForumFuzzyMatchAdapter.java:9:import com.google.gson.JsonObject;
/api\adapters\ForumFuzzyMatchAdapter.java:10:import com.google.gson.JsonParseException;
/api\adapters\ForumFuzzyMatchAdapter.java:11:import com.huanchengfly.tieba.post.api.models.SearchForumBean;
/api\adapters\ForumFuzzyMatchAdapter.java:13:import java.lang.reflect.Type;
/api\adapters\ForumFuzzyMatchAdapter.java:14:import java.util.ArrayList;
/api\adapters\ForumFuzzyMatchAdapter.java:15:import java.util.List;
/api\adapters\ForumFuzzyMatchAdapter.java:16:import java.util.Map;
/api\adapters\ForumFuzzyMatchAdapter.java:18:public class ForumFuzzyMatchAdapter implements JsonDeserializer<List<SearchForumBean.ForumInfoBean>> {
/api\adapters\ForumFuzzyMatchAdapter.java:19:    @Override
/api\adapters\ForumFuzzyMatchAdapter.java:20:    public List<SearchForumBean.ForumInfoBean> deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
/api\adapters\ForumFuzzyMatchAdapter.java:21:        List<SearchForumBean.ForumInfoBean> forumInfoBeans = new ArrayList<>();
/api\adapters\ForumFuzzyMatchAdapter.java:22:        if (json.isJsonArray()) {
/api\adapters\ForumFuzzyMatchAdapter.java:23:            JsonArray jsonArray = json.getAsJsonArray();
/api\adapters\ForumFuzzyMatchAdapter.java:24:            for (JsonElement element : jsonArray) {
/api\adapters\ForumFuzzyMatchAdapter.java:25:                if (element.isJsonObject()) {
/api\adapters\ForumFuzzyMatchAdapter.java:26:                    forumInfoBeans.add(getForumInfoBean(element.getAsJsonObject()));
/api\adapters\ForumFuzzyMatchAdapter.java:27:                }
/api\adapters\ForumFuzzyMatchAdapter.java:28:            }
/api\adapters\ForumFuzzyMatchAdapter.java:29:        } else if (json.isJsonObject()) {
/api\adapters\ForumFuzzyMatchAdapter.java:30:            JsonObject jsonObject = json.getAsJsonObject();
/api\adapters\ForumFuzzyMatchAdapter.java:31:            for (Map.Entry<String, JsonElement> elementEntry : jsonObject.entrySet()) {
/api\adapters\ForumFuzzyMatchAdapter.java:32:                JsonElement jsonElement = elementEntry.getValue();
/api\adapters\ForumFuzzyMatchAdapter.java:33:                if (jsonElement.isJsonObject()) {
/api\adapters\ForumFuzzyMatchAdapter.java:34:                    forumInfoBeans.add(getForumInfoBean(jsonElement.getAsJsonObject()));
/api\adapters\ForumFuzzyMatchAdapter.java:35:                }
/api\adapters\ForumFuzzyMatchAdapter.java:36:            }
/api\adapters\ForumFuzzyMatchAdapter.java:37:        }
/api\adapters\ForumFuzzyMatchAdapter.java:38:        return forumInfoBeans;
/api\adapters\ForumFuzzyMatchAdapter.java:39:    }
/api\adapters\ForumFuzzyMatchAdapter.java:41:    @Nullable
/api\adapters\ForumFuzzyMatchAdapter.java:42:    private String getNonNullString(JsonElement jsonElement) {
/api\adapters\ForumFuzzyMatchAdapter.java:43:        return jsonElement.isJsonNull() ? null : jsonElement.getAsString();
/api\adapters\ForumFuzzyMatchAdapter.java:44:    }
/api\adapters\ForumFuzzyMatchAdapter.java:46:    private SearchForumBean.ForumInfoBean getForumInfoBean(JsonObject jsonObject) {
/api\adapters\ForumFuzzyMatchAdapter.java:47:        return new SearchForumBean.ForumInfoBean()
/api\adapters\ForumFuzzyMatchAdapter.java:48:                .setForumId(jsonObject.get("forum_id").getAsInt())
/api\adapters\ForumFuzzyMatchAdapter.java:49:                .setForumName(getNonNullString(jsonObject.get("forum_name")))
/api\adapters\ForumFuzzyMatchAdapter.java:50:                .setForumNameShow(getNonNullString(jsonObject.get("forum_name_show")))
/api\adapters\ForumFuzzyMatchAdapter.java:51:                .setAvatar(getNonNullString(jsonObject.get("avatar")))
/api\adapters\ForumFuzzyMatchAdapter.java:52:                .setPostNum(getNonNullString(jsonObject.get("post_num")))
/api\adapters\ForumFuzzyMatchAdapter.java:53:                .setConcernNum(getNonNullString(jsonObject.get("concern_num")))
/api\adapters\ForumFuzzyMatchAdapter.java:54:                .setHasConcerned(jsonObject.get("has_concerned").getAsInt());
/api\adapters\ForumFuzzyMatchAdapter.java:55:    }
/api\adapters\ForumFuzzyMatchAdapter.java:56:}
/api\adapters\MediaAdapter.java:1:package com.huanchengfly.tieba.post.api.adapters;
/api\adapters\MediaAdapter.java:3:import android.text.TextUtils;
/api\adapters\MediaAdapter.java:5:import androidx.annotation.Nullable;
/api\adapters\MediaAdapter.java:7:import com.google.gson.JsonArray;
/api\adapters\MediaAdapter.java:8:import com.google.gson.JsonDeserializationContext;
/api\adapters\MediaAdapter.java:9:import com.google.gson.JsonDeserializer;
/api\adapters\MediaAdapter.java:10:import com.google.gson.JsonElement;
/api\adapters\MediaAdapter.java:11:import com.google.gson.JsonObject;
/api\adapters\MediaAdapter.java:12:import com.google.gson.JsonParseException;
/api\adapters\MediaAdapter.java:13:import com.huanchengfly.tieba.post.api.models.ForumPageBean;
/api\adapters\MediaAdapter.java:15:import java.lang.reflect.Type;
/api\adapters\MediaAdapter.java:16:import java.util.ArrayList;
/api\adapters\MediaAdapter.java:17:import java.util.List;
/api\adapters\MediaAdapter.java:19:public class MediaAdapter implements JsonDeserializer<List<ForumPageBean.MediaInfoBean>> {
/api\adapters\MediaAdapter.java:20:    @Override
/api\adapters\MediaAdapter.java:21:    public List<ForumPageBean.MediaInfoBean> deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
/api\adapters\MediaAdapter.java:22:        List<ForumPageBean.MediaInfoBean> mediaInfoBeans = new ArrayList<>();
/api\adapters\MediaAdapter.java:23:        if (json.isJsonArray()) {
/api\adapters\MediaAdapter.java:24:            JsonArray jsonArray = json.getAsJsonArray();
/api\adapters\MediaAdapter.java:25:            for (JsonElement element : jsonArray) {
/api\adapters\MediaAdapter.java:26:                if (element.isJsonObject()) {
/api\adapters\MediaAdapter.java:27:                    JsonObject jsonObject = element.getAsJsonObject();
/api\adapters\MediaAdapter.java:28:                    String type = getNonNullString(jsonObject.get("type"));
/api\adapters\MediaAdapter.java:29:                    if (TextUtils.equals(type, "3")) {
/api\adapters\MediaAdapter.java:30:                        mediaInfoBeans.add(new ForumPageBean.MediaInfoBean()
/api\adapters\MediaAdapter.java:31:                                .setType(type)
/api\adapters\MediaAdapter.java:32:                                .setBigPic(getNonNullString(jsonObject.get("big_pic")))
/api\adapters\MediaAdapter.java:33:                                .setOriginPic(getNonNullString(jsonObject.get("origin_pic")))
/api\adapters\MediaAdapter.java:34:                                .setSrcPic(getNonNullString(jsonObject.get("src_pic")))
/api\adapters\MediaAdapter.java:35:                                .setPostId(getNonNullString(jsonObject.get("post_id")))
/api\adapters\MediaAdapter.java:36:                                .setIsLongPic(getNonNullString(jsonObject.get("is_long_pic")))
/api\adapters\MediaAdapter.java:37:                                .setShowOriginalBtn(getNonNullString(jsonObject.get("show_original_btn"))));
/api\adapters\MediaAdapter.java:38:                    }
/api\adapters\MediaAdapter.java:39:                }
/api\adapters\MediaAdapter.java:40:            }
/api\adapters\MediaAdapter.java:41:        }
/api\adapters\MediaAdapter.java:42:        return mediaInfoBeans;
/api\adapters\MediaAdapter.java:43:    }
/api\adapters\MediaAdapter.java:45:    @Nullable
/api\adapters\MediaAdapter.java:46:    private String getNonNullString(JsonElement jsonElement) {
/api\adapters\MediaAdapter.java:47:        return jsonElement != null && !jsonElement.isJsonNull() ? jsonElement.getAsString() : null;
/api\adapters\MediaAdapter.java:48:    }
/api\adapters\MediaAdapter.java:49:}
/api\adapters\PortraitAdapter.java:1:package com.huanchengfly.tieba.post.api.adapters;
/api\adapters\PortraitAdapter.java:3:import androidx.annotation.NonNull;
/api\adapters\PortraitAdapter.java:5:import com.google.gson.JsonDeserializationContext;
/api\adapters\PortraitAdapter.java:6:import com.google.gson.JsonDeserializer;
/api\adapters\PortraitAdapter.java:7:import com.google.gson.JsonElement;
/api\adapters\PortraitAdapter.java:8:import com.google.gson.JsonParseException;
/api\adapters\PortraitAdapter.java:9:import com.huanchengfly.tieba.post.utils.StringUtil;
/api\adapters\PortraitAdapter.java:11:import java.lang.reflect.Type;
/api\adapters\PortraitAdapter.java:13:public class PortraitAdapter implements JsonDeserializer<String> {
/api\adapters\PortraitAdapter.java:14:    @Override
/api\adapters\PortraitAdapter.java:15:    public String deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
/api\adapters\PortraitAdapter.java:16:        return StringUtil.getAvatarUrl(getNonNullString(json));
/api\adapters\PortraitAdapter.java:17:    }
/api\adapters\PortraitAdapter.java:19:    @NonNull
/api\adapters\PortraitAdapter.java:20:    private String getNonNullString(JsonElement jsonElement) {
/api\adapters\PortraitAdapter.java:21:        return jsonElement != null && !jsonElement.isJsonNull() ? jsonElement.getAsString() : "";
/api\adapters\PortraitAdapter.java:22:    }
/api\adapters\PortraitAdapter.java:23:}
/api\adapters\SubPostListAdapter.java:1:package com.huanchengfly.tieba.post.api.adapters;
/api\adapters\SubPostListAdapter.java:3:import com.google.gson.JsonDeserializationContext;
/api\adapters\SubPostListAdapter.java:4:import com.google.gson.JsonDeserializer;
/api\adapters\SubPostListAdapter.java:5:import com.google.gson.JsonElement;
/api\adapters\SubPostListAdapter.java:6:import com.google.gson.JsonParseException;
/api\adapters\SubPostListAdapter.java:7:import com.huanchengfly.tieba.post.api.models.ThreadContentBean;
/api\adapters\SubPostListAdapter.java:9:import java.lang.reflect.Type;
/api\adapters\SubPostListAdapter.java:11:public class SubPostListAdapter implements JsonDeserializer<ThreadContentBean.SubPostListBean> {
/api\adapters\SubPostListAdapter.java:12:    @Override
/api\adapters\SubPostListAdapter.java:13:    public ThreadContentBean.SubPostListBean deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
/api\adapters\SubPostListAdapter.java:14:        if (json.isJsonArray()) {
/api\adapters\SubPostListAdapter.java:15:            return new ThreadContentBean.SubPostListBean();
/api\adapters\SubPostListAdapter.java:16:        }
/api\adapters\SubPostListAdapter.java:17:        return context.deserialize(json, typeOfT);
/api\adapters\SubPostListAdapter.java:18:    }
/api\adapters\SubPostListAdapter.java:19:}
/api\adapters\UserExactMatchAdapter.java:1:package com.huanchengfly.tieba.post.api.adapters;
/api\adapters\UserExactMatchAdapter.java:3:import com.google.gson.JsonDeserializationContext;
/api\adapters\UserExactMatchAdapter.java:4:import com.google.gson.JsonDeserializer;
/api\adapters\UserExactMatchAdapter.java:5:import com.google.gson.JsonElement;
/api\adapters\UserExactMatchAdapter.java:6:import com.google.gson.JsonParseException;
/api\adapters\UserExactMatchAdapter.java:7:import com.huanchengfly.tieba.post.api.models.SearchUserBean;
/api\adapters\UserExactMatchAdapter.java:9:import java.lang.reflect.Type;
/api\adapters\UserExactMatchAdapter.java:11:public class UserExactMatchAdapter implements JsonDeserializer<SearchUserBean.UserBean> {
/api\adapters\UserExactMatchAdapter.java:12:    @Override
/api\adapters\UserExactMatchAdapter.java:13:    public SearchUserBean.UserBean deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
/api\adapters\UserExactMatchAdapter.java:14:        if (json.isJsonArray()) {
/api\adapters\UserExactMatchAdapter.java:15:            return null;
/api\adapters\UserExactMatchAdapter.java:16:        }
/api\adapters\UserExactMatchAdapter.java:17:        return context.deserialize(json, typeOfT);
/api\adapters\UserExactMatchAdapter.java:18:    }
/api\adapters\UserExactMatchAdapter.java:19:}
/api\adapters\UserFuzzyMatchAdapter.java:1:package com.huanchengfly.tieba.post.api.adapters;
/api\adapters\UserFuzzyMatchAdapter.java:3:import androidx.annotation.Nullable;
/api\adapters\UserFuzzyMatchAdapter.java:5:import com.google.gson.JsonArray;
/api\adapters\UserFuzzyMatchAdapter.java:6:import com.google.gson.JsonDeserializationContext;
/api\adapters\UserFuzzyMatchAdapter.java:7:import com.google.gson.JsonDeserializer;
/api\adapters\UserFuzzyMatchAdapter.java:8:import com.google.gson.JsonElement;
/api\adapters\UserFuzzyMatchAdapter.java:9:import com.google.gson.JsonObject;
/api\adapters\UserFuzzyMatchAdapter.java:10:import com.google.gson.JsonParseException;
/api\adapters\UserFuzzyMatchAdapter.java:11:import com.huanchengfly.tieba.post.api.models.SearchUserBean;
/api\adapters\UserFuzzyMatchAdapter.java:13:import java.lang.reflect.Type;
/api\adapters\UserFuzzyMatchAdapter.java:14:import java.util.ArrayList;
/api\adapters\UserFuzzyMatchAdapter.java:15:import java.util.List;
/api\adapters\UserFuzzyMatchAdapter.java:16:import java.util.Map;
/api\adapters\UserFuzzyMatchAdapter.java:18:public class UserFuzzyMatchAdapter implements JsonDeserializer<List<SearchUserBean.UserBean>> {
/api\adapters\UserFuzzyMatchAdapter.java:19:    @Override
/api\adapters\UserFuzzyMatchAdapter.java:20:    public List<SearchUserBean.UserBean> deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
/api\adapters\UserFuzzyMatchAdapter.java:21:        List<SearchUserBean.UserBean> userBeans = new ArrayList<>();
/api\adapters\UserFuzzyMatchAdapter.java:22:        if (json.isJsonArray()) {
/api\adapters\UserFuzzyMatchAdapter.java:23:            JsonArray jsonArray = json.getAsJsonArray();
/api\adapters\UserFuzzyMatchAdapter.java:24:            for (JsonElement element : jsonArray) {
/api\adapters\UserFuzzyMatchAdapter.java:25:                if (element.isJsonObject()) {
/api\adapters\UserFuzzyMatchAdapter.java:26:                    userBeans.add(getUserBean(element.getAsJsonObject()));
/api\adapters\UserFuzzyMatchAdapter.java:27:                }
/api\adapters\UserFuzzyMatchAdapter.java:28:            }
/api\adapters\UserFuzzyMatchAdapter.java:29:        } else if (json.isJsonObject()) {
/api\adapters\UserFuzzyMatchAdapter.java:30:            JsonObject jsonObject = json.getAsJsonObject();
/api\adapters\UserFuzzyMatchAdapter.java:31:            for (Map.Entry<String, JsonElement> elementEntry : jsonObject.entrySet()) {
/api\adapters\UserFuzzyMatchAdapter.java:32:                JsonElement jsonElement = elementEntry.getValue();
/api\adapters\UserFuzzyMatchAdapter.java:33:                if (jsonElement.isJsonObject()) {
/api\adapters\UserFuzzyMatchAdapter.java:34:                    userBeans.add(getUserBean(jsonElement.getAsJsonObject()));
/api\adapters\UserFuzzyMatchAdapter.java:35:                }
/api\adapters\UserFuzzyMatchAdapter.java:36:            }
/api\adapters\UserFuzzyMatchAdapter.java:37:        }
/api\adapters\UserFuzzyMatchAdapter.java:38:        return userBeans;
/api\adapters\UserFuzzyMatchAdapter.java:39:    }
/api\adapters\UserFuzzyMatchAdapter.java:41:    @Nullable
/api\adapters\UserFuzzyMatchAdapter.java:42:    private String getNonNullString(JsonElement jsonElement) {
/api\adapters\UserFuzzyMatchAdapter.java:43:        return jsonElement.isJsonNull() ? null : jsonElement.getAsString();
/api\adapters\UserFuzzyMatchAdapter.java:44:    }
/api\adapters\UserFuzzyMatchAdapter.java:46:    private SearchUserBean.UserBean getUserBean(JsonObject jsonObject) {
/api\adapters\UserFuzzyMatchAdapter.java:47:        return new SearchUserBean.UserBean()
/api\adapters\UserFuzzyMatchAdapter.java:48:                .setId(getNonNullString(jsonObject.get("id")))
/api\adapters\UserFuzzyMatchAdapter.java:49:                .setIntro(getNonNullString(jsonObject.get("intro")))
/api\adapters\UserFuzzyMatchAdapter.java:50:                .setUserNickname(getNonNullString(jsonObject.get("user_nickname")))
/api\adapters\UserFuzzyMatchAdapter.java:51:                .setName(getNonNullString(jsonObject.get("name")))
/api\adapters\UserFuzzyMatchAdapter.java:52:                .setPortrait(getNonNullString(jsonObject.get("portrait")))
/api\adapters\UserFuzzyMatchAdapter.java:53:                .setFansNum(getNonNullString(jsonObject.get("fans_num")))
/api\adapters\UserFuzzyMatchAdapter.java:54:                .setHasConcerned(jsonObject.get("has_concerned").getAsInt());
/api\adapters\UserFuzzyMatchAdapter.java:55:    }
/api\adapters\UserFuzzyMatchAdapter.java:56:}
/api\adapters\UserPostContentAdapter.java:1:package com.huanchengfly.tieba.post.api.adapters;
/api\adapters\UserPostContentAdapter.java:3:import androidx.annotation.NonNull;
/api\adapters\UserPostContentAdapter.java:4:import androidx.annotation.Nullable;
/api\adapters\UserPostContentAdapter.java:6:import com.google.gson.JsonArray;
/api\adapters\UserPostContentAdapter.java:7:import com.google.gson.JsonDeserializationContext;
/api\adapters\UserPostContentAdapter.java:8:import com.google.gson.JsonDeserializer;
/api\adapters\UserPostContentAdapter.java:9:import com.google.gson.JsonElement;
/api\adapters\UserPostContentAdapter.java:10:import com.google.gson.JsonObject;
/api\adapters\UserPostContentAdapter.java:11:import com.google.gson.JsonParseException;
/api\adapters\UserPostContentAdapter.java:12:import com.huanchengfly.tieba.post.api.models.UserPostBean;
/api\adapters\UserPostContentAdapter.java:14:import java.lang.reflect.Type;
/api\adapters\UserPostContentAdapter.java:15:import java.util.ArrayList;
/api\adapters\UserPostContentAdapter.java:16:import java.util.List;
/api\adapters\UserPostContentAdapter.java:18:public class UserPostContentAdapter implements JsonDeserializer<List<UserPostBean.ContentBean>> {
/api\adapters\UserPostContentAdapter.java:19:    @Override
/api\adapters\UserPostContentAdapter.java:20:    public List<UserPostBean.ContentBean> deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
/api\adapters\UserPostContentAdapter.java:21:        List<UserPostBean.ContentBean> list = new ArrayList<>();
/api\adapters\UserPostContentAdapter.java:22:        if (json.isJsonArray()) {
/api\adapters\UserPostContentAdapter.java:23:            JsonArray jsonArray = json.getAsJsonArray();
/api\adapters\UserPostContentAdapter.java:24:            for (JsonElement jsonElement : jsonArray) {
/api\adapters\UserPostContentAdapter.java:25:                if (jsonElement.isJsonObject()) {
/api\adapters\UserPostContentAdapter.java:26:                    JsonObject jsonObject = jsonElement.getAsJsonObject();
/api\adapters\UserPostContentAdapter.java:27:                    UserPostBean.ContentBean contentBean = new UserPostBean.ContentBean()
/api\adapters\UserPostContentAdapter.java:28:                            .setCreateTime(getString(jsonObject.get("create_time")))
/api\adapters\UserPostContentAdapter.java:29:                            .setPostId(getString(jsonObject.get("post_id")));
/api\adapters\UserPostContentAdapter.java:30:                    List<UserPostBean.PostContentBean> postContentBeans = new ArrayList<>();
/api\adapters\UserPostContentAdapter.java:31:                    JsonElement contentElement = jsonObject.get("post_content");
/api\adapters\UserPostContentAdapter.java:32:                    if (contentElement.isJsonArray()) {
/api\adapters\UserPostContentAdapter.java:33:                        JsonArray contentArray = contentElement.getAsJsonArray();
/api\adapters\UserPostContentAdapter.java:34:                        for (JsonElement jsonElement1 : contentArray) {
/api\adapters\UserPostContentAdapter.java:35:                            if (jsonElement1.isJsonObject()) {
/api\adapters\UserPostContentAdapter.java:36:                                JsonObject postContentObject = jsonElement1.getAsJsonObject();
/api\adapters\UserPostContentAdapter.java:37:                                postContentBeans.add(new UserPostBean.PostContentBean()
/api\adapters\UserPostContentAdapter.java:38:                                        .setType(getNonNullString(postContentObject.get("type"), "0"))
/api\adapters\UserPostContentAdapter.java:39:                                        .setText(getNonNullString(postContentObject.get("text"), "")));
/api\adapters\UserPostContentAdapter.java:40:                            }
/api\adapters\UserPostContentAdapter.java:41:                        }
/api\adapters\UserPostContentAdapter.java:42:                    }
/api\adapters\UserPostContentAdapter.java:43:                    contentBean.setPostContent(postContentBeans);
/api\adapters\UserPostContentAdapter.java:44:                    list.add(contentBean);
/api\adapters\UserPostContentAdapter.java:45:                }
/api\adapters\UserPostContentAdapter.java:46:            }
/api\adapters\UserPostContentAdapter.java:47:        }
/api\adapters\UserPostContentAdapter.java:48:        return list;
/api\adapters\UserPostContentAdapter.java:49:    }
/api\adapters\UserPostContentAdapter.java:51:    @Nullable
/api\adapters\UserPostContentAdapter.java:52:    private String getString(JsonElement jsonElement) {
/api\adapters\UserPostContentAdapter.java:53:        return jsonElement != null && !jsonElement.isJsonNull() ? jsonElement.getAsString() : null;
/api\adapters\UserPostContentAdapter.java:54:    }
/api\adapters\UserPostContentAdapter.java:56:    @NonNull
/api\adapters\UserPostContentAdapter.java:57:    private String getNonNullString(JsonElement jsonElement, String defValue) {
/api\adapters\UserPostContentAdapter.java:58:        return jsonElement != null && !jsonElement.isJsonNull() ? jsonElement.getAsString() : defValue;
/api\adapters\UserPostContentAdapter.java:59:    }
/api\adapters\UserPostContentAdapter.java:60:}
/api\adapters\VideoInfoAdapter.java:1:package com.huanchengfly.tieba.post.api.adapters;
/api\adapters\VideoInfoAdapter.java:3:import com.google.gson.JsonDeserializationContext;
/api\adapters\VideoInfoAdapter.java:4:import com.google.gson.JsonDeserializer;
/api\adapters\VideoInfoAdapter.java:5:import com.google.gson.JsonElement;
/api\adapters\VideoInfoAdapter.java:6:import com.google.gson.JsonParseException;
/api\adapters\VideoInfoAdapter.java:7:import com.huanchengfly.tieba.post.api.models.ForumPageBean;
/api\adapters\VideoInfoAdapter.java:9:import java.lang.reflect.Type;
/api\adapters\VideoInfoAdapter.java:11:public class VideoInfoAdapter implements JsonDeserializer<ForumPageBean.VideoInfoBean> {
/api\adapters\VideoInfoAdapter.java:12:    @Override
/api\adapters\VideoInfoAdapter.java:13:    public ForumPageBean.VideoInfoBean deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
/api\adapters\VideoInfoAdapter.java:14:        if (json.isJsonArray()) {
/api\adapters\VideoInfoAdapter.java:15:            return null;
/api\adapters\VideoInfoAdapter.java:16:        }
/api\adapters\VideoInfoAdapter.java:17:        return context.deserialize(json, typeOfT);
/api\adapters\VideoInfoAdapter.java:18:    }
/api\adapters\VideoInfoAdapter.java:19:}
/api\adapters\ZyqDefineAdapter.java:1:package com.huanchengfly.tieba.post.api.adapters;
/api\adapters\ZyqDefineAdapter.java:3:import com.google.gson.JsonDeserializationContext;
/api\adapters\ZyqDefineAdapter.java:4:import com.google.gson.JsonDeserializer;
/api\adapters\ZyqDefineAdapter.java:5:import com.google.gson.JsonElement;
/api\adapters\ZyqDefineAdapter.java:6:import com.google.gson.JsonObject;
/api\adapters\ZyqDefineAdapter.java:7:import com.google.gson.JsonParseException;
/api\adapters\ZyqDefineAdapter.java:8:import com.huanchengfly.tieba.post.api.models.ForumPageBean;
/api\adapters\ZyqDefineAdapter.java:10:import java.lang.reflect.Type;
/api\adapters\ZyqDefineAdapter.java:11:import java.util.ArrayList;
/api\adapters\ZyqDefineAdapter.java:12:import java.util.List;
/api\adapters\ZyqDefineAdapter.java:13:import java.util.Map;
/api\adapters\ZyqDefineAdapter.java:15:public class ZyqDefineAdapter implements JsonDeserializer<List<ForumPageBean.ZyqDefineBean>> {
/api\adapters\ZyqDefineAdapter.java:16:    @Override
/api\adapters\ZyqDefineAdapter.java:17:    public List<ForumPageBean.ZyqDefineBean> deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
/api\adapters\ZyqDefineAdapter.java:18:        List<ForumPageBean.ZyqDefineBean> zyqDefineBeans = new ArrayList<>();
/api\adapters\ZyqDefineAdapter.java:19:        JsonObject jsonObject = json.getAsJsonObject();
/api\adapters\ZyqDefineAdapter.java:20:        for (Map.Entry<String, JsonElement> elementEntry : jsonObject.entrySet()) {
/api\adapters\ZyqDefineAdapter.java:21:            JsonElement jsonElement = elementEntry.getValue();
/api\adapters\ZyqDefineAdapter.java:22:            zyqDefineBeans.add(getZyqDefineBean(elementEntry.getKey(), jsonElement.getAsString()));
/api\adapters\ZyqDefineAdapter.java:23:        }
/api\adapters\ZyqDefineAdapter.java:24:        return zyqDefineBeans;
/api\adapters\ZyqDefineAdapter.java:25:    }
/api\adapters\ZyqDefineAdapter.java:27:    private ForumPageBean.ZyqDefineBean getZyqDefineBean(String name, String link) {
/api\adapters\ZyqDefineAdapter.java:28:        ForumPageBean.ZyqDefineBean zyqDefineBean = new ForumPageBean.ZyqDefineBean();
/api\adapters\ZyqDefineAdapter.java:29:        zyqDefineBean.setName(name);
/api\adapters\ZyqDefineAdapter.java:30:        zyqDefineBean.setLink(link);
/api\adapters\ZyqDefineAdapter.java:31:        return zyqDefineBean;
/api\adapters\ZyqDefineAdapter.java:32:    }
/api\adapters\ZyqDefineAdapter.java:33:}
/api\caster\ForumBeanCaster.java:1:package com.huanchengfly.tieba.post.api.caster;
/api\caster\ForumBeanCaster.java:3:import android.webkit.URLUtil;
/api\caster\ForumBeanCaster.java:5:import com.huanchengfly.tieba.post.api.models.ForumPageBean;
/api\caster\ForumBeanCaster.java:6:import com.huanchengfly.tieba.post.api.models.web.ForumBean;
/api\caster\ForumBeanCaster.java:7:import com.huanchengfly.tieba.post.BaseApplication;
/api\caster\ForumBeanCaster.java:9:import java.util.ArrayList;
/api\caster\ForumBeanCaster.java:10:import java.util.List;
/api\caster\ForumBeanCaster.java:12:public class ForumBeanCaster extends ICaster<ForumBean, ForumPageBean> {
/api\caster\ForumBeanCaster.java:13:    @Override
/api\caster\ForumBeanCaster.java:14:    public ForumPageBean cast(ForumBean forumBean) {
/api\caster\ForumBeanCaster.java:15:        ForumPageBean forumPageBean = new ForumPageBean();
/api\caster\ForumBeanCaster.java:16:        ForumBean.FrsDataBean frsDataBean = forumBean.getData().getFrsData();
/api\caster\ForumBeanCaster.java:17:        forumPageBean.setErrorCode(String.valueOf(forumBean.getErrorCode()));
/api\caster\ForumBeanCaster.java:18:        forumPageBean.setErrorMsg(forumBean.getErrorMsg());
/api\caster\ForumBeanCaster.java:19:        forumPageBean.setAnti(frsDataBean.getAnti());
/api\caster\ForumBeanCaster.java:20:        forumPageBean.setPage(new FrsPageBeanImpl().cast(frsDataBean.getPage()));
/api\caster\ForumBeanCaster.java:21:        forumPageBean.setForum(new FrsForumBeanImpl().cast(frsDataBean.getForum()));
/api\caster\ForumBeanCaster.java:22:        forumPageBean.setUser(new FrsUserBeanImpl().cast(frsDataBean.getUser()));
/api\caster\ForumBeanCaster.java:23:        List<ForumPageBean.ThreadBean> threadBeans = new ArrayList<>();
/api\caster\ForumBeanCaster.java:24:        List<ForumPageBean.UserBean> userBeans = new ArrayList<>();
/api\caster\ForumBeanCaster.java:25:        FrsThreadBeanImpl frsThreadBeanImpl = new FrsThreadBeanImpl();
/api\caster\ForumBeanCaster.java:26:        for (ForumBean.FrsThreadBean frsThreadBean : frsDataBean.getThreadList()) {
/api\caster\ForumBeanCaster.java:27:            if (frsThreadBean.getLastTimeInt() != null) {
/api\caster\ForumBeanCaster.java:28:                threadBeans.add(frsThreadBeanImpl.cast(frsThreadBean));
/api\caster\ForumBeanCaster.java:29:                userBeans.add(frsThreadBean.getAuthor());
/api\caster\ForumBeanCaster.java:30:            }
/api\caster\ForumBeanCaster.java:31:        }
/api\caster\ForumBeanCaster.java:32:        forumPageBean.setThreadList(threadBeans);
/api\caster\ForumBeanCaster.java:33:        forumPageBean.setUserList(userBeans);
/api\caster\ForumBeanCaster.java:34:        return forumPageBean;
/api\caster\ForumBeanCaster.java:35:    }
/api\caster\ForumBeanCaster.java:37:    private static class FrsThreadBeanImpl extends ICaster<ForumBean.FrsThreadBean, ForumPageBean.ThreadBean> {
/api\caster\ForumBeanCaster.java:38:        @Override
/api\caster\ForumBeanCaster.java:39:        public ForumPageBean.ThreadBean cast(ForumBean.FrsThreadBean frsThreadBean) {
/api\caster\ForumBeanCaster.java:40:            ForumPageBean.ThreadBean threadBean = new ForumPageBean.ThreadBean();
/api\caster\ForumBeanCaster.java:41:            List<ForumPageBean.AbstractBean> abstractBeans = new ArrayList<>();
/api\caster\ForumBeanCaster.java:42:            List<ForumPageBean.MediaInfoBean> mediaInfoBeans = new ArrayList<>();
/api\caster\ForumBeanCaster.java:43:            MediaBeanImpl mediaBeanImpl = new MediaBeanImpl();
/api\caster\ForumBeanCaster.java:44:            for (ForumBean.MediaBean mediaBean : frsThreadBean.getMedia()) {
/api\caster\ForumBeanCaster.java:45:                ForumPageBean.MediaInfoBean mediaInfoBean = mediaBeanImpl.cast(mediaBean);
/api\caster\ForumBeanCaster.java:46:                if (mediaInfoBean != null) mediaInfoBeans.add(mediaBeanImpl.cast(mediaBean));
/api\caster\ForumBeanCaster.java:47:            }
/api\caster\ForumBeanCaster.java:48:            abstractBeans.add(new ForumPageBean.AbstractBean("0", frsThreadBean.getAbstracts()));
/api\caster\ForumBeanCaster.java:49:            int agreeNum = 0;
/api\caster\ForumBeanCaster.java:50:            if (frsThreadBean.getAgree() != null) {
/api\caster\ForumBeanCaster.java:51:                agreeNum = frsThreadBean.getAgree().getAgreeNum();
/api\caster\ForumBeanCaster.java:52:            }
/api\caster\ForumBeanCaster.java:53:            threadBean.setAbstractString(frsThreadBean.getAbstracts())
/api\caster\ForumBeanCaster.java:54:                    .setAbstractBeans(abstractBeans)
/api\caster\ForumBeanCaster.java:55:                    .setAgreeNum(String.valueOf(agreeNum))
/api\caster\ForumBeanCaster.java:56:                    .setAuthorId(frsThreadBean.getAuthor().getId())
/api\caster\ForumBeanCaster.java:57:                    .setId(frsThreadBean.getId())
/api\caster\ForumBeanCaster.java:58:                    .setIsGood(frsThreadBean.getIsGood())
/api\caster\ForumBeanCaster.java:59:                    .setIsNoTitle(frsThreadBean.getIsNoTitle())
/api\caster\ForumBeanCaster.java:60:                    .setIsTop(frsThreadBean.getIsTop())
/api\caster\ForumBeanCaster.java:61:                    .setLastTime(frsThreadBean.getLastTime())
/api\caster\ForumBeanCaster.java:62:                    .setLastTimeInt(frsThreadBean.getLastTimeInt())
/api\caster\ForumBeanCaster.java:63:                    .setReplyNum(frsThreadBean.getReplyNum())
/api\caster\ForumBeanCaster.java:64:                    .setTid(frsThreadBean.getTid())
/api\caster\ForumBeanCaster.java:65:                    .setTitle(frsThreadBean.getTitle())
/api\caster\ForumBeanCaster.java:66:                    .setVideoInfo(frsThreadBean.getVideoInfo() != null ? frsThreadBean.getVideoInfo().setVideoUrl(frsThreadBean.getVideoInfo().getOriginVideoUrl()) : null)
/api\caster\ForumBeanCaster.java:67:                    .setMedia(mediaInfoBeans)
/api\caster\ForumBeanCaster.java:68:                    .setViewNum(frsThreadBean.getViewNum());
/api\caster\ForumBeanCaster.java:69:            return threadBean;
/api\caster\ForumBeanCaster.java:70:        }
/api\caster\ForumBeanCaster.java:71:    }
/api\caster\ForumBeanCaster.java:73:    private static class FrsPageBeanImpl extends ICaster<ForumBean.FrsPageBean, ForumPageBean.PageBean> {
/api\caster\ForumBeanCaster.java:74:        @Override
/api\caster\ForumBeanCaster.java:75:        public ForumPageBean.PageBean cast(ForumBean.FrsPageBean frsPageBean) {
/api\caster\ForumBeanCaster.java:76:            ForumPageBean.PageBean pageBean = new ForumPageBean.PageBean();
/api\caster\ForumBeanCaster.java:77:            pageBean.setCurGoodId(String.valueOf(frsPageBean.getCurGoodId()));
/api\caster\ForumBeanCaster.java:78:            pageBean.setCurrentPage(String.valueOf(frsPageBean.getCurrentPage()));
/api\caster\ForumBeanCaster.java:79:            pageBean.setHasMore(frsPageBean.getCurrentPage() < frsPageBean.getTotalPage() ? "1" : "0");
/api\caster\ForumBeanCaster.java:80:            pageBean.setHasPrev(frsPageBean.getCurrentPage() > 1 ? "1" : "0");
/api\caster\ForumBeanCaster.java:81:            pageBean.setOffset(String.valueOf(frsPageBean.getOffset()));
/api\caster\ForumBeanCaster.java:82:            pageBean.setPageSize(String.valueOf(frsPageBean.getPageSize()));
/api\caster\ForumBeanCaster.java:83:            pageBean.setTotalCount(String.valueOf(frsPageBean.getTotalCount()));
/api\caster\ForumBeanCaster.java:84:            pageBean.setTotalPage(String.valueOf(frsPageBean.getTotalPage()));
/api\caster\ForumBeanCaster.java:85:            return pageBean;
/api\caster\ForumBeanCaster.java:86:        }
/api\caster\ForumBeanCaster.java:87:    }
/api\caster\ForumBeanCaster.java:89:    private static class FrsForumBeanImpl extends ICaster<ForumBean.FrsForumBean, ForumPageBean.ForumBean> {
/api\caster\ForumBeanCaster.java:90:        @Override
/api\caster\ForumBeanCaster.java:91:        public ForumPageBean.ForumBean cast(ForumBean.FrsForumBean frsForumBean) {
/api\caster\ForumBeanCaster.java:92:            ForumPageBean.ForumBean forumBean = new ForumPageBean.ForumBean();
/api\caster\ForumBeanCaster.java:93:            forumBean.setAvatar(frsForumBean.getAvatar());
/api\caster\ForumBeanCaster.java:94:            forumBean.setCurScore(frsForumBean.getCurScore());
/api\caster\ForumBeanCaster.java:95:            forumBean.setGoodClassify(frsForumBean.getGoodClassify());
/api\caster\ForumBeanCaster.java:96:            forumBean.setId(frsForumBean.getId());
/api\caster\ForumBeanCaster.java:97:            forumBean.setIsExists(frsForumBean.isExists() ? "1" : "0");
/api\caster\ForumBeanCaster.java:98:            forumBean.setIsLike(frsForumBean.getIsLike());
/api\caster\ForumBeanCaster.java:99:            forumBean.setLevelId(frsForumBean.getLevelId());
/api\caster\ForumBeanCaster.java:100:            forumBean.setLevelName(frsForumBean.getLevelName());
/api\caster\ForumBeanCaster.java:101:            forumBean.setLevelUpScore(frsForumBean.getLevelUpScore());
/api\caster\ForumBeanCaster.java:102:            forumBean.setName(frsForumBean.getName());
/api\caster\ForumBeanCaster.java:103:            forumBean.setSignInInfo(frsForumBean.getSignInInfo());
/api\caster\ForumBeanCaster.java:104:            forumBean.setTids(frsForumBean.getTids());
/api\caster\ForumBeanCaster.java:105:            forumBean.setSlogan(frsForumBean.getSlogan());
/api\caster\ForumBeanCaster.java:106:            forumBean.setUserLevel(frsForumBean.getUserLevel());
/api\caster\ForumBeanCaster.java:107:            forumBean.setMemberNum(frsForumBean.getMemberNum());
/api\caster\ForumBeanCaster.java:108:            forumBean.setPostNum(frsForumBean.getPostNum());
/api\caster\ForumBeanCaster.java:109:            forumBean.setManagers(frsForumBean.getManagers());
/api\caster\ForumBeanCaster.java:110:            forumBean.setZyqTitle(frsForumBean.getAttrs().getZyqTitle());
/api\caster\ForumBeanCaster.java:111:            forumBean.setZyqDefine(frsForumBean.getAttrs().getZyqDefine());
/api\caster\ForumBeanCaster.java:112:            forumBean.setZyqFriend(frsForumBean.getAttrs().getZyqFriend());
/api\caster\ForumBeanCaster.java:113:            return forumBean;
/api\caster\ForumBeanCaster.java:114:        }
/api\caster\ForumBeanCaster.java:115:    }
/api\caster\ForumBeanCaster.java:117:    private static class FrsUserBeanImpl extends ICaster<ForumBean.FrsUserBean, ForumPageBean.UserBean> {
/api\caster\ForumBeanCaster.java:118:        @Override
/api\caster\ForumBeanCaster.java:119:        public ForumPageBean.UserBean cast(ForumBean.FrsUserBean frsUserBean) {
/api\caster\ForumBeanCaster.java:120:            ForumPageBean.UserBean userBean = new ForumPageBean.UserBean();
/api\caster\ForumBeanCaster.java:121:            userBean.setId(frsUserBean.getId());
/api\caster\ForumBeanCaster.java:122:            if (frsUserBean.getNewUserInfo() == null) {
/api\caster\ForumBeanCaster.java:123:                userBean.setName(frsUserBean.getName());
/api\caster\ForumBeanCaster.java:124:                userBean.setNameShow(frsUserBean.getNameShow());
/api\caster\ForumBeanCaster.java:125:            } else {
/api\caster\ForumBeanCaster.java:126:                userBean.setName(frsUserBean.getNewUserInfo().getUserName());
/api\caster\ForumBeanCaster.java:127:                userBean.setNameShow(frsUserBean.getNewUserInfo().getUserNickname());
/api\caster\ForumBeanCaster.java:128:            }
/api\caster\ForumBeanCaster.java:129:            userBean.setPortrait(frsUserBean.getPortrait());
/api\caster\ForumBeanCaster.java:130:            return userBean;
/api\caster\ForumBeanCaster.java:131:        }
/api\caster\ForumBeanCaster.java:132:    }
/api\caster\ForumBeanCaster.java:134:    private static class MediaBeanImpl extends ICaster<ForumBean.MediaBean, ForumPageBean.MediaInfoBean> {
/api\caster\ForumBeanCaster.java:135:        @Override
/api\caster\ForumBeanCaster.java:136:        public ForumPageBean.MediaInfoBean cast(ForumBean.MediaBean mediaBean) {
/api\caster\ForumBeanCaster.java:137:            if (!"pic".equals(mediaBean.getType())) {
/api\caster\ForumBeanCaster.java:138:                return null;
/api\caster\ForumBeanCaster.java:139:            }
/api\caster\ForumBeanCaster.java:140:            ForumPageBean.MediaInfoBean mediaInfoBean = new ForumPageBean.MediaInfoBean();
/api\caster\ForumBeanCaster.java:141:            String origin = mediaBean.getBigPic();
/api\caster\ForumBeanCaster.java:142:            String fileName = URLUtil.guessFileName(origin, null, "image/jpeg");
/api\caster\ForumBeanCaster.java:143:            if (mediaBean.getBigPic().contains(".hiphotos.baidu.com") || mediaBean.getBigPic().contains("imgsrc.baidu.com")) {
/api\caster\ForumBeanCaster.java:144:                origin = "http://imgsrc.baidu.com/forum/pic/item/" + fileName;
/api\caster\ForumBeanCaster.java:145:            } else {
/api\caster\ForumBeanCaster.java:146:                origin = "http://tiebapic.baidu.com/forum/pic/item/" + fileName;
/api\caster\ForumBeanCaster.java:147:            }
/api\caster\ForumBeanCaster.java:148:            mediaInfoBean.setBigPic(mediaBean.getBigPic())
/api\caster\ForumBeanCaster.java:149:                    .setShowOriginalBtn(mediaBean.isGif() ? "0" : "1")
/api\caster\ForumBeanCaster.java:150:                    .setType("3")
/api\caster\ForumBeanCaster.java:151:                    .setSrcPic(mediaBean.getStaticImg())
/api\caster\ForumBeanCaster.java:152:                    .setIsGif(mediaBean.isGif() ? "1" : "0")
/api\caster\ForumBeanCaster.java:153:                    .setIsLongPic(mediaBean.getHeight() > BaseApplication.ScreenInfo.EXACT_SCREEN_HEIGHT ? "1" : "0")
/api\caster\ForumBeanCaster.java:154:                    .setOriginPic(origin);
/api\caster\ForumBeanCaster.java:155:            return mediaInfoBean;
/api\caster\ForumBeanCaster.java:156:        }
/api\caster\ForumBeanCaster.java:157:    }
/api\caster\ForumBeanCaster.java:158:}/api\caster\ICaster.java:1:package com.huanchengfly.tieba.post.api.caster;
/api\caster\ICaster.java:3:public abstract class ICaster<A, B> {
/api\caster\ICaster.java:4:    public abstract B cast(A a);
/api\caster\ICaster.java:5:}/api\interceptors\SortAndSignInterceptor.kt:1:package com.huanchengfly.tieba.post.api.interceptors
/api\interceptors\SortAndSignInterceptor.kt:3:import android.util.Log
/api\interceptors\SortAndSignInterceptor.kt:4:import com.huanchengfly.tieba.post.api.Param
/api\interceptors\SortAndSignInterceptor.kt:5:import com.huanchengfly.tieba.post.api.containsEncodedName
/api\interceptors\SortAndSignInterceptor.kt:6:import com.huanchengfly.tieba.post.api.sortedEncodedRaw
/api\interceptors\SortAndSignInterceptor.kt:7:import com.huanchengfly.tieba.post.api.sortedRaw
/api\interceptors\SortAndSignInterceptor.kt:8:import com.huanchengfly.tieba.post.toMD5
/api\interceptors\SortAndSignInterceptor.kt:9:import okhttp3.FormBody
/api\interceptors\SortAndSignInterceptor.kt:10:import okhttp3.Interceptor
/api\interceptors\SortAndSignInterceptor.kt:11:import okhttp3.Response
/api\interceptors\SortAndSignInterceptor.kt:13:/**
/api\interceptors\SortAndSignInterceptor.kt:14: * 排序参数并添加签名
/api\interceptors\SortAndSignInterceptor.kt:15: * 必须保证在进入此拦截器前, 公共参数已被添加
/api\interceptors\SortAndSignInterceptor.kt:16: * 此拦截器将自动识别 appKey 在 Query 还是在 FormBody 并添加 sign 到相应位置
/api\interceptors\SortAndSignInterceptor.kt:17: *
/api\interceptors\SortAndSignInterceptor.kt:18: * @param appSecret 密钥
/api\interceptors\SortAndSignInterceptor.kt:19: */
/api\interceptors\SortAndSignInterceptor.kt:20:class SortAndSignInterceptor(private val appSecret: String) : Interceptor {
/api\interceptors\SortAndSignInterceptor.kt:21:    override fun intercept(chain: Interceptor.Chain): Response {
/api\interceptors\SortAndSignInterceptor.kt:22:        var request = chain.request()
/api\interceptors\SortAndSignInterceptor.kt:23:        val url = request.url
/api\interceptors\SortAndSignInterceptor.kt:24:        val body = request.body
/api\interceptors\SortAndSignInterceptor.kt:26:        request = when {
/api\interceptors\SortAndSignInterceptor.kt:27:            url.queryParameter("BDUSS") != null && url.queryParameter(Param.SIGN) == null -> {
/api\interceptors\SortAndSignInterceptor.kt:28:                Log.i("SortAndSign", "get")
/api\interceptors\SortAndSignInterceptor.kt:29:                val sortedQuery = url.query!!.split('&').sorted().joinToString(separator = "")
/api\interceptors\SortAndSignInterceptor.kt:30:                val sortedEncodedQuery = url.encodedQuery!!.split('&').sorted().joinToString(separator = "&")
/api\interceptors\SortAndSignInterceptor.kt:31:                request.newBuilder()
/api\interceptors\SortAndSignInterceptor.kt:32:                        .url(url.newBuilder()
/api\interceptors\SortAndSignInterceptor.kt:33:                                .encodedQuery("$sortedEncodedQuery&${Param.SIGN}=${calculateSign(sortedQuery, appSecret)}")
/api\interceptors\SortAndSignInterceptor.kt:34:                                .build()
/api\interceptors\SortAndSignInterceptor.kt:35:                        ).build()
/api\interceptors\SortAndSignInterceptor.kt:36:            }
/api\interceptors\SortAndSignInterceptor.kt:38:            //在 FormBody 里
/api\interceptors\SortAndSignInterceptor.kt:39:            body is FormBody && body.containsEncodedName("BDUSS") && !body.containsEncodedName(Param.SIGN) -> {
/api\interceptors\SortAndSignInterceptor.kt:40:                Log.i("SortAndSign", "post")
/api\interceptors\SortAndSignInterceptor.kt:41:                val sortedEncodedRaw = body.sortedEncodedRaw()
/api\interceptors\SortAndSignInterceptor.kt:42:                val formBody = FormBody.Builder().apply {
/api\interceptors\SortAndSignInterceptor.kt:43:                    sortedEncodedRaw.split('&').forEach {
/api\interceptors\SortAndSignInterceptor.kt:44:                        val (name, value) = it.split('=')
/api\interceptors\SortAndSignInterceptor.kt:45:                        addEncoded(name, value)
/api\interceptors\SortAndSignInterceptor.kt:46:                    }
/api\interceptors\SortAndSignInterceptor.kt:47:                    addEncoded(Param.SIGN, calculateSign(body.sortedRaw(false), appSecret))
/api\interceptors\SortAndSignInterceptor.kt:48:                }.build()
/api\interceptors\SortAndSignInterceptor.kt:49:                request.newBuilder()
/api\interceptors\SortAndSignInterceptor.kt:50:                        .method(request.method, formBody)
/api\interceptors\SortAndSignInterceptor.kt:51:                        .build()
/api\interceptors\SortAndSignInterceptor.kt:52:            }
/api\interceptors\SortAndSignInterceptor.kt:54:            //不存在 accessKey
/api\interceptors\SortAndSignInterceptor.kt:55:            else -> {
/api\interceptors\SortAndSignInterceptor.kt:56:                Log.i("SortAndSign", "none")
/api\interceptors\SortAndSignInterceptor.kt:57:                request
/api\interceptors\SortAndSignInterceptor.kt:58:            }
/api\interceptors\SortAndSignInterceptor.kt:59:        }
/api\interceptors\SortAndSignInterceptor.kt:61:        return chain.proceed(request)
/api\interceptors\SortAndSignInterceptor.kt:62:    }
/api\interceptors\SortAndSignInterceptor.kt:64:    internal fun calculateSign(sortedQuery: String, appSecret: String) = (sortedQuery + appSecret).toMD5()
/api\interceptors\SortAndSignInterceptor.kt:65:}/api\interfaces\CommonAPICallback.java:1:package com.huanchengfly.tieba.post.api.interfaces;
/api\interfaces\CommonAPICallback.java:3:public interface CommonAPICallback<T> {
/api\interfaces\CommonAPICallback.java:4:    void onSuccess(T data);
/api\interfaces\CommonAPICallback.java:6:    void onFailure(int code, String error);
/api\interfaces\CommonAPICallback.java:7:}/api\interfaces\CommonCallback.java:1:package com.huanchengfly.tieba.post.api.interfaces;
/api\interfaces\CommonCallback.java:3:public interface CommonCallback<T> {
/api\interfaces\CommonCallback.java:4:    void onSuccess(T data);
/api\interfaces\CommonCallback.java:6:    void onFailure(int code, String error);
/api\interfaces\CommonCallback.java:7:}/api\interfaces\ITiebaApi.kt:1:package com.huanchengfly.tieba.post.api.interfaces
/api\interfaces\ITiebaApi.kt:3:import com.huanchengfly.tieba.post.api.ForumSortType
/api\interfaces\ITiebaApi.kt:4:import com.huanchengfly.tieba.post.api.SearchThreadFilter
/api\interfaces\ITiebaApi.kt:5:import com.huanchengfly.tieba.post.api.SearchThreadOrder
/api\interfaces\ITiebaApi.kt:6:import com.huanchengfly.tieba.post.api.models.*
/api\interfaces\ITiebaApi.kt:7:import com.huanchengfly.tieba.post.api.models.web.ForumBean
/api\interfaces\ITiebaApi.kt:8:import com.huanchengfly.tieba.post.api.models.web.HotMessageListBean
/api\interfaces\ITiebaApi.kt:9:import com.huanchengfly.tieba.post.models.DislikeBean
/api\interfaces\ITiebaApi.kt:10:import com.huanchengfly.tieba.post.models.MyInfoBean
/api\interfaces\ITiebaApi.kt:11:import com.huanchengfly.tieba.post.models.PhotoInfoBean
/api\interfaces\ITiebaApi.kt:12:import retrofit2.Call
/api\interfaces\ITiebaApi.kt:14:interface ITiebaApi {
/api\interfaces\ITiebaApi.kt:15:    /**
/api\interfaces\ITiebaApi.kt:16:     * 个性推荐（每页 15 贴）
/api\interfaces\ITiebaApi.kt:17:     *
/api\interfaces\ITiebaApi.kt:18:     * @param loadType 加载类型（1 - 下拉刷新 2 - 加载更多）
/api\interfaces\ITiebaApi.kt:19:     * @param page 分页页码
/api\interfaces\ITiebaApi.kt:20:     */
/api\interfaces\ITiebaApi.kt:21:    fun personalized(
/api\interfaces\ITiebaApi.kt:22:            loadType: Int,
/api\interfaces\ITiebaApi.kt:23:            page: Int = 1
/api\interfaces\ITiebaApi.kt:24:    ): Call<PersonalizedBean>
/api\interfaces\ITiebaApi.kt:26:    /**
/api\interfaces\ITiebaApi.kt:27:     * 给贴子/回复点赞
/api\interfaces\ITiebaApi.kt:28:     *
/api\interfaces\ITiebaApi.kt:29:     * **需登录**
/api\interfaces\ITiebaApi.kt:30:     *
/api\interfaces\ITiebaApi.kt:31:     * @param threadId 贴子 ID
/api\interfaces\ITiebaApi.kt:32:     * @param postId 回复 ID
/api\interfaces\ITiebaApi.kt:33:     */
/api\interfaces\ITiebaApi.kt:34:    fun agree(
/api\interfaces\ITiebaApi.kt:35:            threadId: String,
/api\interfaces\ITiebaApi.kt:36:            postId: String
/api\interfaces\ITiebaApi.kt:37:    ): Call<AgreeBean>
/api\interfaces\ITiebaApi.kt:39:    /**
/api\interfaces\ITiebaApi.kt:40:     * 给贴子/回复点踩
/api\interfaces\ITiebaApi.kt:41:     *
/api\interfaces\ITiebaApi.kt:42:     * **需登录**
/api\interfaces\ITiebaApi.kt:43:     *
/api\interfaces\ITiebaApi.kt:44:     * @param threadId 贴子 ID
/api\interfaces\ITiebaApi.kt:45:     * @param postId 回复 ID
/api\interfaces\ITiebaApi.kt:46:     */
/api\interfaces\ITiebaApi.kt:47:    fun disagree(
/api\interfaces\ITiebaApi.kt:48:            threadId: String,
/api\interfaces\ITiebaApi.kt:49:            postId: String
/api\interfaces\ITiebaApi.kt:50:    ): Call<AgreeBean>
/api\interfaces\ITiebaApi.kt:52:    /**
/api\interfaces\ITiebaApi.kt:53:     * 关注吧列表
/api\interfaces\ITiebaApi.kt:54:     *
/api\interfaces\ITiebaApi.kt:55:     * **需登录**
/api\interfaces\ITiebaApi.kt:56:     */
/api\interfaces\ITiebaApi.kt:57:    fun forumRecommend(): Call<ForumRecommend>
/api\interfaces\ITiebaApi.kt:59:    /**
/api\interfaces\ITiebaApi.kt:60:     * 吧页面
/api\interfaces\ITiebaApi.kt:61:     *
/api\interfaces\ITiebaApi.kt:62:     * @param forumName 吧名
/api\interfaces\ITiebaApi.kt:63:     * @param page 分页页码（从 1 开始）
/api\interfaces\ITiebaApi.kt:64:     * @param sortType 排序类型 [com.huanchengfly.tieba.api.ForumSortType]
/api\interfaces\ITiebaApi.kt:65:     * @param goodClassifyId 精品贴分类 ID
/api\interfaces\ITiebaApi.kt:66:     */
/api\interfaces\ITiebaApi.kt:67:    fun forumPage(
/api\interfaces\ITiebaApi.kt:68:            forumName: String,
/api\interfaces\ITiebaApi.kt:69:            page: Int = 1,
/api\interfaces\ITiebaApi.kt:70:            sortType: ForumSortType = ForumSortType.REPLY_TIME,
/api\interfaces\ITiebaApi.kt:71:            goodClassifyId: String? = null
/api\interfaces\ITiebaApi.kt:72:    ): Call<ForumPageBean>
/api\interfaces\ITiebaApi.kt:74:    /**
/api\interfaces\ITiebaApi.kt:75:     * 楼中楼页面
/api\interfaces\ITiebaApi.kt:76:     *
/api\interfaces\ITiebaApi.kt:77:     * @param threadId 贴 ID
/api\interfaces\ITiebaApi.kt:78:     * @param page 分页页码
/api\interfaces\ITiebaApi.kt:79:     * @param postId 回复 ID
/api\interfaces\ITiebaApi.kt:80:     * @param subPostId 楼中楼回复 ID
/api\interfaces\ITiebaApi.kt:81:     */
/api\interfaces\ITiebaApi.kt:82:    fun floor(
/api\interfaces\ITiebaApi.kt:83:            threadId: String,
/api\interfaces\ITiebaApi.kt:84:            page: Int = 1,
/api\interfaces\ITiebaApi.kt:85:            postId: String?,
/api\interfaces\ITiebaApi.kt:86:            subPostId: String?
/api\interfaces\ITiebaApi.kt:87:    ): Call<SubFloorListBean>
/api\interfaces\ITiebaApi.kt:89:    /**
/api\interfaces\ITiebaApi.kt:90:     * 查看用户关注的吧列表
/api\interfaces\ITiebaApi.kt:91:     *
/api\interfaces\ITiebaApi.kt:92:     * @param uid 用户 ID
/api\interfaces\ITiebaApi.kt:93:     * @param page 分页页码（从 1 开始）
/api\interfaces\ITiebaApi.kt:94:     */
/api\interfaces\ITiebaApi.kt:95:    fun userLikeForum(
/api\interfaces\ITiebaApi.kt:96:            uid: String,
/api\interfaces\ITiebaApi.kt:97:            page: Int = 1
/api\interfaces\ITiebaApi.kt:98:    ): Call<UserLikeForumBean>
/api\interfaces\ITiebaApi.kt:100:    /**
/api\interfaces\ITiebaApi.kt:101:     * 查看用户的所有主题贴/回复
/api\interfaces\ITiebaApi.kt:102:     *
/api\interfaces\ITiebaApi.kt:103:     * @param uid 用户 ID
/api\interfaces\ITiebaApi.kt:104:     * @param page 分页页码（从 1 开始）
/api\interfaces\ITiebaApi.kt:105:     * @param isThread 是否查看主题贴
/api\interfaces\ITiebaApi.kt:106:     */
/api\interfaces\ITiebaApi.kt:107:    fun userPost(
/api\interfaces\ITiebaApi.kt:108:            uid: String,
/api\interfaces\ITiebaApi.kt:109:            page: Int = 1,
/api\interfaces\ITiebaApi.kt:110:            isThread: Boolean = true
/api\interfaces\ITiebaApi.kt:111:    ): Call<UserPostBean>
/api\interfaces\ITiebaApi.kt:113:    /**
/api\interfaces\ITiebaApi.kt:114:     * 查看图片
/api\interfaces\ITiebaApi.kt:115:     *
/api\interfaces\ITiebaApi.kt:116:     * @param forumId 吧 ID
/api\interfaces\ITiebaApi.kt:117:     * @param forumName 吧名
/api\interfaces\ITiebaApi.kt:118:     * @param threadId 贴 ID
/api\interfaces\ITiebaApi.kt:119:     * @param seeLz 是否只看楼主
/api\interfaces\ITiebaApi.kt:120:     * @param picId 图片 ID
/api\interfaces\ITiebaApi.kt:121:     * @param picIndex 图片索引
/api\interfaces\ITiebaApi.kt:122:     * @param objType 原页面类型（pb - 贴页面 frs - 吧页面）
/api\interfaces\ITiebaApi.kt:123:     * @param prev 不明，默认为 false
/api\interfaces\ITiebaApi.kt:124:     */
/api\interfaces\ITiebaApi.kt:125:    fun picPage(
/api\interfaces\ITiebaApi.kt:126:            forumId: String,
/api\interfaces\ITiebaApi.kt:127:            forumName: String,
/api\interfaces\ITiebaApi.kt:128:            threadId: String,
/api\interfaces\ITiebaApi.kt:129:            seeLz: Boolean,
/api\interfaces\ITiebaApi.kt:130:            picId: String,
/api\interfaces\ITiebaApi.kt:131:            picIndex: String,
/api\interfaces\ITiebaApi.kt:132:            objType: String,
/api\interfaces\ITiebaApi.kt:133:            prev: Boolean
/api\interfaces\ITiebaApi.kt:134:    ): Call<PicPageBean>
/api\interfaces\ITiebaApi.kt:136:    /**
/api\interfaces\ITiebaApi.kt:137:     * 用户信息
/api\interfaces\ITiebaApi.kt:138:     *
/api\interfaces\ITiebaApi.kt:139:     * @param uid 用户 ID
/api\interfaces\ITiebaApi.kt:140:     */
/api\interfaces\ITiebaApi.kt:141:    fun profile(
/api\interfaces\ITiebaApi.kt:142:            uid: String
/api\interfaces\ITiebaApi.kt:143:    ): Call<ProfileBean>
/api\interfaces\ITiebaApi.kt:145:    /**
/api\interfaces\ITiebaApi.kt:146:     * 取关一个吧
/api\interfaces\ITiebaApi.kt:147:     *
/api\interfaces\ITiebaApi.kt:148:     * **需登录**
/api\interfaces\ITiebaApi.kt:149:     *
/api\interfaces\ITiebaApi.kt:150:     * @param forumId 吧 ID
/api\interfaces\ITiebaApi.kt:151:     * @param forumName 吧名
/api\interfaces\ITiebaApi.kt:152:     * @param tbs tbs（长）
/api\interfaces\ITiebaApi.kt:153:     */
/api\interfaces\ITiebaApi.kt:154:    fun unlikeForum(
/api\interfaces\ITiebaApi.kt:155:            forumId: String,
/api\interfaces\ITiebaApi.kt:156:            forumName: String,
/api\interfaces\ITiebaApi.kt:157:            tbs: String
/api\interfaces\ITiebaApi.kt:158:    ): Call<CommonResponse>
/api\interfaces\ITiebaApi.kt:160:    /**
/api\interfaces\ITiebaApi.kt:161:     * 关注一个吧
/api\interfaces\ITiebaApi.kt:162:     *
/api\interfaces\ITiebaApi.kt:163:     * **需登录**
/api\interfaces\ITiebaApi.kt:164:     *
/api\interfaces\ITiebaApi.kt:165:     * @param forumId 吧 ID
/api\interfaces\ITiebaApi.kt:166:     * @param forumName 吧名
/api\interfaces\ITiebaApi.kt:167:     * @param tbs tbs（长）
/api\interfaces\ITiebaApi.kt:168:     */
/api\interfaces\ITiebaApi.kt:169:    fun likeForum(
/api\interfaces\ITiebaApi.kt:170:            forumId: String,
/api\interfaces\ITiebaApi.kt:171:            forumName: String,
/api\interfaces\ITiebaApi.kt:172:            tbs: String
/api\interfaces\ITiebaApi.kt:173:    ): Call<LikeForumResultBean>
/api\interfaces\ITiebaApi.kt:175:    /**
/api\interfaces\ITiebaApi.kt:176:     * 吧签到
/api\interfaces\ITiebaApi.kt:177:     *
/api\interfaces\ITiebaApi.kt:178:     * **需登录**
/api\interfaces\ITiebaApi.kt:179:     *
/api\interfaces\ITiebaApi.kt:180:     * @param forumName 吧名
/api\interfaces\ITiebaApi.kt:181:     * @param tbs tbs
/api\interfaces\ITiebaApi.kt:182:     */
/api\interfaces\ITiebaApi.kt:183:    fun sign(
/api\interfaces\ITiebaApi.kt:184:            forumName: String,
/api\interfaces\ITiebaApi.kt:185:            tbs: String
/api\interfaces\ITiebaApi.kt:186:    ): Call<SignResultBean>
/api\interfaces\ITiebaApi.kt:188:    /**
/api\interfaces\ITiebaApi.kt:189:     * 删除自己的贴子
/api\interfaces\ITiebaApi.kt:190:     *
/api\interfaces\ITiebaApi.kt:191:     * **需登录**
/api\interfaces\ITiebaApi.kt:192:     *
/api\interfaces\ITiebaApi.kt:193:     * @param forumId 吧 ID
/api\interfaces\ITiebaApi.kt:194:     * @param forumName 吧名
/api\interfaces\ITiebaApi.kt:195:     * @param threadId 贴子 ID
/api\interfaces\ITiebaApi.kt:196:     */
/api\interfaces\ITiebaApi.kt:197:    fun delThread(
/api\interfaces\ITiebaApi.kt:198:            forumId: String,
/api\interfaces\ITiebaApi.kt:199:            forumName: String,
/api\interfaces\ITiebaApi.kt:200:            threadId: String,
/api\interfaces\ITiebaApi.kt:201:            tbs: String
/api\interfaces\ITiebaApi.kt:202:    ): Call<CommonResponse>
/api\interfaces\ITiebaApi.kt:204:    /**
/api\interfaces\ITiebaApi.kt:205:     * 删除贴子中的回复
/api\interfaces\ITiebaApi.kt:206:     *
/api\interfaces\ITiebaApi.kt:207:     * **需登录**
/api\interfaces\ITiebaApi.kt:208:     *
/api\interfaces\ITiebaApi.kt:209:     * @param forumId 吧 ID
/api\interfaces\ITiebaApi.kt:210:     * @param forumName 吧名
/api\interfaces\ITiebaApi.kt:211:     * @param threadId 贴子 ID
/api\interfaces\ITiebaApi.kt:212:     * @param postId 回复 ID
/api\interfaces\ITiebaApi.kt:213:     * @param isFloor 是否为楼中楼回复
/api\interfaces\ITiebaApi.kt:214:     * @param delMyPost 是否为当前登录用户回复
/api\interfaces\ITiebaApi.kt:215:     */
/api\interfaces\ITiebaApi.kt:216:    fun delPost(
/api\interfaces\ITiebaApi.kt:217:            forumId: String,
/api\interfaces\ITiebaApi.kt:218:            forumName: String,
/api\interfaces\ITiebaApi.kt:219:            threadId: String,
/api\interfaces\ITiebaApi.kt:220:            postId: String,
/api\interfaces\ITiebaApi.kt:221:            tbs: String,
/api\interfaces\ITiebaApi.kt:222:            isFloor: Boolean,
/api\interfaces\ITiebaApi.kt:223:            delMyPost: Boolean
/api\interfaces\ITiebaApi.kt:224:    ): Call<CommonResponse>
/api\interfaces\ITiebaApi.kt:226:    /**
/api\interfaces\ITiebaApi.kt:227:     * 吧内搜索
/api\interfaces\ITiebaApi.kt:228:     *
/api\interfaces\ITiebaApi.kt:229:     * @param keyword 搜索关键词
/api\interfaces\ITiebaApi.kt:230:     * @param forumName 搜索吧名
/api\interfaces\ITiebaApi.kt:231:     * @param onlyThread 是否仅搜索主题贴
/api\interfaces\ITiebaApi.kt:232:     * @param page 分页页码（从 1 开始）
/api\interfaces\ITiebaApi.kt:233:     * @param pageSize 每页贴数（默认 30）
/api\interfaces\ITiebaApi.kt:234:     */
/api\interfaces\ITiebaApi.kt:235:    fun searchPost(
/api\interfaces\ITiebaApi.kt:236:            keyword: String,
/api\interfaces\ITiebaApi.kt:237:            forumName: String,
/api\interfaces\ITiebaApi.kt:238:            onlyThread: Boolean = false,
/api\interfaces\ITiebaApi.kt:239:            page: Int = 1,
/api\interfaces\ITiebaApi.kt:240:            pageSize: Int = 30
/api\interfaces\ITiebaApi.kt:241:    ): Call<SearchPostBean>
/api\interfaces\ITiebaApi.kt:243:    /**
/api\interfaces\ITiebaApi.kt:244:     * 搜索用户
/api\interfaces\ITiebaApi.kt:245:     *
/api\interfaces\ITiebaApi.kt:246:     * @param keyword 搜索关键词
/api\interfaces\ITiebaApi.kt:247:     */
/api\interfaces\ITiebaApi.kt:248:    fun searchUser(
/api\interfaces\ITiebaApi.kt:249:            keyword: String
/api\interfaces\ITiebaApi.kt:250:    ): Call<SearchUserBean>
/api\interfaces\ITiebaApi.kt:253:    /**
/api\interfaces\ITiebaApi.kt:254:     * 消息提醒数
/api\interfaces\ITiebaApi.kt:255:     *
/api\interfaces\ITiebaApi.kt:256:     * **需登录**
/api\interfaces\ITiebaApi.kt:257:     */
/api\interfaces\ITiebaApi.kt:258:    fun msg(): Call<MsgBean>
/api\interfaces\ITiebaApi.kt:260:    /**
/api\interfaces\ITiebaApi.kt:261:     * 查看收藏贴列表
/api\interfaces\ITiebaApi.kt:262:     *
/api\interfaces\ITiebaApi.kt:263:     * **需登录**
/api\interfaces\ITiebaApi.kt:264:     *
/api\interfaces\ITiebaApi.kt:265:     * @param page 分页页码（从 0 开始）
/api\interfaces\ITiebaApi.kt:266:     * @param pageSize 每页贴数（默认 20）
/api\interfaces\ITiebaApi.kt:267:     */
/api\interfaces\ITiebaApi.kt:268:    fun threadStore(
/api\interfaces\ITiebaApi.kt:269:            page: Int = 0,
/api\interfaces\ITiebaApi.kt:270:            pageSize: Int = 20
/api\interfaces\ITiebaApi.kt:271:    ): Call<ThreadStoreBean>
/api\interfaces\ITiebaApi.kt:273:    /**
/api\interfaces\ITiebaApi.kt:274:     * 移除收藏
/api\interfaces\ITiebaApi.kt:275:     *
/api\interfaces\ITiebaApi.kt:276:     * **需登录**
/api\interfaces\ITiebaApi.kt:277:     *
/api\interfaces\ITiebaApi.kt:278:     * @param threadId 贴子 ID
/api\interfaces\ITiebaApi.kt:279:     * @param tbs tbs
/api\interfaces\ITiebaApi.kt:280:     */
/api\interfaces\ITiebaApi.kt:281:    fun removeStore(
/api\interfaces\ITiebaApi.kt:282:            threadId: String,
/api\interfaces\ITiebaApi.kt:283:            tbs: String
/api\interfaces\ITiebaApi.kt:284:    ): Call<CommonResponse>
/api\interfaces\ITiebaApi.kt:286:    /**
/api\interfaces\ITiebaApi.kt:287:     * 添加/更新收藏
/api\interfaces\ITiebaApi.kt:288:     *
/api\interfaces\ITiebaApi.kt:289:     * **需登录**
/api\interfaces\ITiebaApi.kt:290:     *
/api\interfaces\ITiebaApi.kt:291:     * @param threadId 贴子 ID
/api\interfaces\ITiebaApi.kt:292:     * @param postId 收藏到的回复 ID
/api\interfaces\ITiebaApi.kt:293:     * @param tbs tbs
/api\interfaces\ITiebaApi.kt:294:     */
/api\interfaces\ITiebaApi.kt:295:    fun addStore(
/api\interfaces\ITiebaApi.kt:296:            threadId: String,
/api\interfaces\ITiebaApi.kt:297:            postId: String,
/api\interfaces\ITiebaApi.kt:298:            tbs: String
/api\interfaces\ITiebaApi.kt:299:    ): Call<CommonResponse>
/api\interfaces\ITiebaApi.kt:301:    /**
/api\interfaces\ITiebaApi.kt:302:     * 回复我的消息列表
/api\interfaces\ITiebaApi.kt:303:     *
/api\interfaces\ITiebaApi.kt:304:     * **需登录**
/api\interfaces\ITiebaApi.kt:305:     *
/api\interfaces\ITiebaApi.kt:306:     * @param page 分页页码（从 1 开始）
/api\interfaces\ITiebaApi.kt:307:     */
/api\interfaces\ITiebaApi.kt:308:    fun replyMe(
/api\interfaces\ITiebaApi.kt:309:            page: Int = 1
/api\interfaces\ITiebaApi.kt:310:    ): Call<MessageListBean>
/api\interfaces\ITiebaApi.kt:312:    /**
/api\interfaces\ITiebaApi.kt:313:     * 提到我的消息列表
/api\interfaces\ITiebaApi.kt:314:     *
/api\interfaces\ITiebaApi.kt:315:     * **需登录**
/api\interfaces\ITiebaApi.kt:316:     *
/api\interfaces\ITiebaApi.kt:317:     * @param page 分页页码（从 1 开始）
/api\interfaces\ITiebaApi.kt:318:     */
/api\interfaces\ITiebaApi.kt:319:    fun atMe(
/api\interfaces\ITiebaApi.kt:320:            page: Int = 1
/api\interfaces\ITiebaApi.kt:321:    ): Call<MessageListBean>
/api\interfaces\ITiebaApi.kt:323:    /**
/api\interfaces\ITiebaApi.kt:324:     * 贴页面
/api\interfaces\ITiebaApi.kt:325:     *
/api\interfaces\ITiebaApi.kt:326:     * @param threadId 贴 ID
/api\interfaces\ITiebaApi.kt:327:     * @param page 分页页码（从 1 开始）
/api\interfaces\ITiebaApi.kt:328:     * @param seeLz 是否只看楼主
/api\interfaces\ITiebaApi.kt:329:     * @param reverse 是否逆序
/api\interfaces\ITiebaApi.kt:330:     */
/api\interfaces\ITiebaApi.kt:331:    fun threadContent(
/api\interfaces\ITiebaApi.kt:332:            threadId: String,
/api\interfaces\ITiebaApi.kt:333:            page: Int = 1,
/api\interfaces\ITiebaApi.kt:334:            seeLz: Boolean = false,
/api\interfaces\ITiebaApi.kt:335:            reverse: Boolean = false
/api\interfaces\ITiebaApi.kt:336:    ): Call<ThreadContentBean>
/api\interfaces\ITiebaApi.kt:338:    /**
/api\interfaces\ITiebaApi.kt:339:     * 贴页面
/api\interfaces\ITiebaApi.kt:340:     *
/api\interfaces\ITiebaApi.kt:341:     * @param threadId 贴 ID
/api\interfaces\ITiebaApi.kt:342:     * @param postId 回复 ID
/api\interfaces\ITiebaApi.kt:343:     * @param seeLz 是否只看楼主
/api\interfaces\ITiebaApi.kt:344:     * @param reverse 是否逆序
/api\interfaces\ITiebaApi.kt:345:     */
/api\interfaces\ITiebaApi.kt:346:    fun threadContent(
/api\interfaces\ITiebaApi.kt:347:            threadId: String,
/api\interfaces\ITiebaApi.kt:348:            postId: String?,
/api\interfaces\ITiebaApi.kt:349:            seeLz: Boolean = false,
/api\interfaces\ITiebaApi.kt:350:            reverse: Boolean = false
/api\interfaces\ITiebaApi.kt:351:    ): Call<ThreadContentBean>
/api\interfaces\ITiebaApi.kt:353:    /**
/api\interfaces\ITiebaApi.kt:354:     * 推荐“不感兴趣”
/api\interfaces\ITiebaApi.kt:355:     *
/api\interfaces\ITiebaApi.kt:356:     * **需登录**
/api\interfaces\ITiebaApi.kt:357:     *
/api\interfaces\ITiebaApi.kt:358:     * @param dislikeBean “不感兴趣”信息 [com.huanchengfly.tieba.post.models.DislikeBean]
/api\interfaces\ITiebaApi.kt:359:     * @param stoken stoken
/api\interfaces\ITiebaApi.kt:360:     */
/api\interfaces\ITiebaApi.kt:361:    fun submitDislike(
/api\interfaces\ITiebaApi.kt:362:            dislikeBean: DislikeBean,
/api\interfaces\ITiebaApi.kt:363:            stoken: String
/api\interfaces\ITiebaApi.kt:364:    ): Call<CommonResponse>
/api\interfaces\ITiebaApi.kt:366:    /**
/api\interfaces\ITiebaApi.kt:367:     * 关注用户（web 接口）
/api\interfaces\ITiebaApi.kt:368:     *
/api\interfaces\ITiebaApi.kt:369:     * **需登录**
/api\interfaces\ITiebaApi.kt:370:     *
/api\interfaces\ITiebaApi.kt:371:     * @param portrait 头像
/api\interfaces\ITiebaApi.kt:372:     * @param tbs tbs
/api\interfaces\ITiebaApi.kt:373:     */
/api\interfaces\ITiebaApi.kt:374:    fun follow(
/api\interfaces\ITiebaApi.kt:375:            portrait: String,
/api\interfaces\ITiebaApi.kt:376:            tbs: String
/api\interfaces\ITiebaApi.kt:377:    ): Call<CommonResponse>
/api\interfaces\ITiebaApi.kt:379:    /**
/api\interfaces\ITiebaApi.kt:380:     * 取关用户（web 接口）
/api\interfaces\ITiebaApi.kt:381:     *
/api\interfaces\ITiebaApi.kt:382:     * **需登录**
/api\interfaces\ITiebaApi.kt:383:     *
/api\interfaces\ITiebaApi.kt:384:     * @param portrait 头像
/api\interfaces\ITiebaApi.kt:385:     * @param tbs tbs
/api\interfaces\ITiebaApi.kt:386:     */
/api\interfaces\ITiebaApi.kt:387:    fun unfollow(
/api\interfaces\ITiebaApi.kt:388:            portrait: String,
/api\interfaces\ITiebaApi.kt:389:            tbs: String
/api\interfaces\ITiebaApi.kt:390:    ): Call<CommonResponse>
/api\interfaces\ITiebaApi.kt:392:    fun hotMessageList(): Call<HotMessageListBean>
/api\interfaces\ITiebaApi.kt:394:    /**
/api\interfaces\ITiebaApi.kt:395:     * 登录用户信息
/api\interfaces\ITiebaApi.kt:396:     *
/api\interfaces\ITiebaApi.kt:397:     * @param cookie 登录 Cookie 信息
/api\interfaces\ITiebaApi.kt:398:     */
/api\interfaces\ITiebaApi.kt:399:    fun myInfo(
/api\interfaces\ITiebaApi.kt:400:            cookie: String
/api\interfaces\ITiebaApi.kt:401:    ): Call<MyInfoBean>
/api\interfaces\ITiebaApi.kt:403:    /**
/api\interfaces\ITiebaApi.kt:404:     * 搜索吧
/api\interfaces\ITiebaApi.kt:405:     *
/api\interfaces\ITiebaApi.kt:406:     * @param keyword 关键词
/api\interfaces\ITiebaApi.kt:407:     */
/api\interfaces\ITiebaApi.kt:408:    fun searchForum(
/api\interfaces\ITiebaApi.kt:409:            keyword: String
/api\interfaces\ITiebaApi.kt:410:    ): Call<SearchForumBean>
/api\interfaces\ITiebaApi.kt:412:    /**
/api\interfaces\ITiebaApi.kt:413:     * 搜索贴
/api\interfaces\ITiebaApi.kt:414:     *
/api\interfaces\ITiebaApi.kt:415:     * @param keyword 关键词
/api\interfaces\ITiebaApi.kt:416:     * @param page 分页页码
/api\interfaces\ITiebaApi.kt:417:     * @param order 排序设置 [com.huanchengfly.tieba.api.SearchThreadOrder]
/api\interfaces\ITiebaApi.kt:418:     * @param filter 过滤设置 [com.huanchengfly.tieba.api.SearchThreadFilter]
/api\interfaces\ITiebaApi.kt:419:     */
/api\interfaces\ITiebaApi.kt:420:    fun searchThread(
/api\interfaces\ITiebaApi.kt:421:            keyword: String,
/api\interfaces\ITiebaApi.kt:422:            page: Int,
/api\interfaces\ITiebaApi.kt:423:            order: SearchThreadOrder,
/api\interfaces\ITiebaApi.kt:424:            filter: SearchThreadFilter
/api\interfaces\ITiebaApi.kt:425:    ): Call<SearchThreadBean>
/api\interfaces\ITiebaApi.kt:427:    /**
/api\interfaces\ITiebaApi.kt:428:     * 上传图片（web 接口）
/api\interfaces\ITiebaApi.kt:429:     *
/api\interfaces\ITiebaApi.kt:430:     * **需登录**
/api\interfaces\ITiebaApi.kt:431:     */
/api\interfaces\ITiebaApi.kt:432:    fun webUploadPic(
/api\interfaces\ITiebaApi.kt:433:            photoInfoBean: PhotoInfoBean
/api\interfaces\ITiebaApi.kt:434:    ): Call<WebUploadPicBean>
/api\interfaces\ITiebaApi.kt:437:    /**
/api\interfaces\ITiebaApi.kt:438:     * 回贴 - 回复主题贴（web 接口）
/api\interfaces\ITiebaApi.kt:439:     *
/api\interfaces\ITiebaApi.kt:440:     * **需登录**
/api\interfaces\ITiebaApi.kt:441:     *
/api\interfaces\ITiebaApi.kt:442:     * @param forumId 吧 ID
/api\interfaces\ITiebaApi.kt:443:     * @param forumName 吧名
/api\interfaces\ITiebaApi.kt:444:     * @param threadId 贴子 ID
/api\interfaces\ITiebaApi.kt:445:     * @param tbs tbs
/api\interfaces\ITiebaApi.kt:446:     * @param content 回复内容
/api\interfaces\ITiebaApi.kt:447:     * @param imgInfo 图片
/api\interfaces\ITiebaApi.kt:448:     * @param nickName 昵称
/api\interfaces\ITiebaApi.kt:449:     * @param pn 页码
/api\interfaces\ITiebaApi.kt:450:     * @param bsk BSK
/api\interfaces\ITiebaApi.kt:451:     */
/api\interfaces\ITiebaApi.kt:452:    fun webReply(
/api\interfaces\ITiebaApi.kt:453:            forumId: String,
/api\interfaces\ITiebaApi.kt:454:            forumName: String,
/api\interfaces\ITiebaApi.kt:455:            threadId: String,
/api\interfaces\ITiebaApi.kt:456:            tbs: String,
/api\interfaces\ITiebaApi.kt:457:            content: String,
/api\interfaces\ITiebaApi.kt:458:            imgInfo: String?,
/api\interfaces\ITiebaApi.kt:459:            nickName: String,
/api\interfaces\ITiebaApi.kt:460:            pn: String,
/api\interfaces\ITiebaApi.kt:461:            bsk: String
/api\interfaces\ITiebaApi.kt:462:    ): Call<WebReplyResultBean>
/api\interfaces\ITiebaApi.kt:464:    /**
/api\interfaces\ITiebaApi.kt:465:     * 回贴 - 回复别人的回复（web 接口）
/api\interfaces\ITiebaApi.kt:466:     *
/api\interfaces\ITiebaApi.kt:467:     * **需登录**
/api\interfaces\ITiebaApi.kt:468:     *
/api\interfaces\ITiebaApi.kt:469:     * @param forumId 吧 ID
/api\interfaces\ITiebaApi.kt:470:     * @param forumName 吧名
/api\interfaces\ITiebaApi.kt:471:     * @param threadId 贴子 ID
/api\interfaces\ITiebaApi.kt:472:     * @param tbs tbs
/api\interfaces\ITiebaApi.kt:473:     * @param content 回复内容
/api\interfaces\ITiebaApi.kt:474:     * @param imgInfo 图片
/api\interfaces\ITiebaApi.kt:475:     * @param nickName 昵称
/api\interfaces\ITiebaApi.kt:476:     * @param postId 回复 ID
/api\interfaces\ITiebaApi.kt:477:     * @param floor 回复楼层
/api\interfaces\ITiebaApi.kt:478:     * @param pn 页码
/api\interfaces\ITiebaApi.kt:479:     * @param bsk BSK
/api\interfaces\ITiebaApi.kt:480:     */
/api\interfaces\ITiebaApi.kt:481:    fun webReply(
/api\interfaces\ITiebaApi.kt:482:            forumId: String,
/api\interfaces\ITiebaApi.kt:483:            forumName: String,
/api\interfaces\ITiebaApi.kt:484:            threadId: String,
/api\interfaces\ITiebaApi.kt:485:            tbs: String,
/api\interfaces\ITiebaApi.kt:486:            content: String,
/api\interfaces\ITiebaApi.kt:487:            imgInfo: String?,
/api\interfaces\ITiebaApi.kt:488:            nickName: String,
/api\interfaces\ITiebaApi.kt:489:            postId: String,
/api\interfaces\ITiebaApi.kt:490:            floor: String,
/api\interfaces\ITiebaApi.kt:491:            pn: String,
/api\interfaces\ITiebaApi.kt:492:            bsk: String
/api\interfaces\ITiebaApi.kt:493:    ): Call<WebReplyResultBean>
/api\interfaces\ITiebaApi.kt:495:    /**
/api\interfaces\ITiebaApi.kt:496:     * 回贴 - 回复楼中楼（web 接口）
/api\interfaces\ITiebaApi.kt:497:     *
/api\interfaces\ITiebaApi.kt:498:     * **需登录**
/api\interfaces\ITiebaApi.kt:499:     *
/api\interfaces\ITiebaApi.kt:500:     * @param forumId 吧 ID
/api\interfaces\ITiebaApi.kt:501:     * @param forumName 吧名
/api\interfaces\ITiebaApi.kt:502:     * @param threadId 贴子 ID
/api\interfaces\ITiebaApi.kt:503:     * @param tbs tbs
/api\interfaces\ITiebaApi.kt:504:     * @param content 回复内容
/api\interfaces\ITiebaApi.kt:505:     * @param imgInfo 图片
/api\interfaces\ITiebaApi.kt:506:     * @param nickName 昵称
/api\interfaces\ITiebaApi.kt:507:     * @param postId 回复 ID
/api\interfaces\ITiebaApi.kt:508:     * @param replyPostId 楼中楼 ID
/api\interfaces\ITiebaApi.kt:509:     * @param floor 回复楼层
/api\interfaces\ITiebaApi.kt:510:     * @param pn 页码
/api\interfaces\ITiebaApi.kt:511:     * @param bsk BSK
/api\interfaces\ITiebaApi.kt:512:     */
/api\interfaces\ITiebaApi.kt:513:    fun webReply(
/api\interfaces\ITiebaApi.kt:514:            forumId: String,
/api\interfaces\ITiebaApi.kt:515:            forumName: String,
/api\interfaces\ITiebaApi.kt:516:            threadId: String,
/api\interfaces\ITiebaApi.kt:517:            tbs: String,
/api\interfaces\ITiebaApi.kt:518:            content: String,
/api\interfaces\ITiebaApi.kt:519:            imgInfo: String?,
/api\interfaces\ITiebaApi.kt:520:            nickName: String,
/api\interfaces\ITiebaApi.kt:521:            postId: String,
/api\interfaces\ITiebaApi.kt:522:            replyPostId: String,
/api\interfaces\ITiebaApi.kt:523:            floor: String,
/api\interfaces\ITiebaApi.kt:524:            pn: String,
/api\interfaces\ITiebaApi.kt:525:            bsk: String
/api\interfaces\ITiebaApi.kt:526:    ): Call<WebReplyResultBean>
/api\interfaces\ITiebaApi.kt:528:    /**
/api\interfaces\ITiebaApi.kt:529:     * 吧页面（web 接口）
/api\interfaces\ITiebaApi.kt:530:     *
/api\interfaces\ITiebaApi.kt:531:     * @param forumName 吧名
/api\interfaces\ITiebaApi.kt:532:     * @param page 分页页码
/api\interfaces\ITiebaApi.kt:533:     * @param goodClassifyId 精品贴分类 ID
/api\interfaces\ITiebaApi.kt:534:     * @param sortType 贴排序类型
/api\interfaces\ITiebaApi.kt:535:     * @param pageSize 每页贴数（默认 30）
/api\interfaces\ITiebaApi.kt:536:     */
/api\interfaces\ITiebaApi.kt:537:    fun webForumPage(
/api\interfaces\ITiebaApi.kt:538:            forumName: String,
/api\interfaces\ITiebaApi.kt:539:            page: Int,
/api\interfaces\ITiebaApi.kt:540:            goodClassifyId: String? = null,
/api\interfaces\ITiebaApi.kt:541:            sortType: ForumSortType = ForumSortType.REPLY_TIME,
/api\interfaces\ITiebaApi.kt:542:            pageSize: Int = 30
/api\interfaces\ITiebaApi.kt:543:    ): Call<ForumBean>
/api\interfaces\ITiebaApi.kt:544:}/api\interfaces\impls\MixedTiebaApiImpl.kt:1:package com.huanchengfly.tieba.post.api.interfaces.impls
/api\interfaces\impls\MixedTiebaApiImpl.kt:3:import android.os.Build
/api\interfaces\impls\MixedTiebaApiImpl.kt:4:import android.text.TextUtils
/api\interfaces\impls\MixedTiebaApiImpl.kt:5:import com.huanchengfly.tieba.post.api.ForumSortType
/api\interfaces\impls\MixedTiebaApiImpl.kt:6:import com.huanchengfly.tieba.post.api.SearchThreadFilter
/api\interfaces\impls\MixedTiebaApiImpl.kt:7:import com.huanchengfly.tieba.post.api.SearchThreadOrder
/api\interfaces\impls\MixedTiebaApiImpl.kt:8:import com.huanchengfly.tieba.post.api.interfaces.ITiebaApi
/api\interfaces\impls\MixedTiebaApiImpl.kt:9:import com.huanchengfly.tieba.post.api.models.*
/api\interfaces\impls\MixedTiebaApiImpl.kt:10:import com.huanchengfly.tieba.post.api.models.web.ForumBean
/api\interfaces\impls\MixedTiebaApiImpl.kt:11:import com.huanchengfly.tieba.post.api.models.web.HotMessageListBean
/api\interfaces\impls\MixedTiebaApiImpl.kt:12:import com.huanchengfly.tieba.post.api.retrofit.RetrofitTiebaApi
/api\interfaces\impls\MixedTiebaApiImpl.kt:13:import com.huanchengfly.tieba.post.BaseApplication
/api\interfaces\impls\MixedTiebaApiImpl.kt:14:import com.huanchengfly.tieba.post.models.DislikeBean
/api\interfaces\impls\MixedTiebaApiImpl.kt:15:import com.huanchengfly.tieba.post.models.MyInfoBean
/api\interfaces\impls\MixedTiebaApiImpl.kt:16:import com.huanchengfly.tieba.post.models.PhotoInfoBean
/api\interfaces\impls\MixedTiebaApiImpl.kt:17:import com.huanchengfly.tieba.post.utils.AccountUtil
/api\interfaces\impls\MixedTiebaApiImpl.kt:18:import com.huanchengfly.tieba.post.utils.ImageUtil
/api\interfaces\impls\MixedTiebaApiImpl.kt:19:import retrofit2.Call
/api\interfaces\impls\MixedTiebaApiImpl.kt:20:import com.huanchengfly.tieba.post.toJson
/api\interfaces\impls\MixedTiebaApiImpl.kt:21:import java.io.FileInputStream
/api\interfaces\impls\MixedTiebaApiImpl.kt:22:import java.io.IOException
/api\interfaces\impls\MixedTiebaApiImpl.kt:23:import java.net.URLEncoder
/api\interfaces\impls\MixedTiebaApiImpl.kt:25:object MixedTiebaApiImpl : ITiebaApi {
/api\interfaces\impls\MixedTiebaApiImpl.kt:26:    override fun personalized(loadType: Int, page: Int): Call<PersonalizedBean> = RetrofitTiebaApi.MINI_TIEBA_API.personalized(loadType, page)
/api\interfaces\impls\MixedTiebaApiImpl.kt:28:    override fun agree(
/api\interfaces\impls\MixedTiebaApiImpl.kt:29:            threadId: String,
/api\interfaces\impls\MixedTiebaApiImpl.kt:30:            postId: String
/api\interfaces\impls\MixedTiebaApiImpl.kt:31:    ): Call<AgreeBean> =
/api\interfaces\impls\MixedTiebaApiImpl.kt:32:            RetrofitTiebaApi.MINI_TIEBA_API.agree(postId, threadId)
/api\interfaces\impls\MixedTiebaApiImpl.kt:34:    override fun disagree(threadId: String,
/api\interfaces\impls\MixedTiebaApiImpl.kt:35:                          postId: String): Call<AgreeBean> = RetrofitTiebaApi.MINI_TIEBA_API.disagree(postId, threadId)
/api\interfaces\impls\MixedTiebaApiImpl.kt:37:    override fun forumRecommend(): Call<ForumRecommend> = RetrofitTiebaApi.MINI_TIEBA_API.forumRecommend()
/api\interfaces\impls\MixedTiebaApiImpl.kt:39:    override fun forumPage(
/api\interfaces\impls\MixedTiebaApiImpl.kt:40:            forumName: String, page: Int, sortType: ForumSortType, goodClassifyId: String?
/api\interfaces\impls\MixedTiebaApiImpl.kt:41:    ): Call<ForumPageBean> = RetrofitTiebaApi.MINI_TIEBA_API.forumPage(forumName, page, sortType.value, goodClassifyId)
/api\interfaces\impls\MixedTiebaApiImpl.kt:43:    override fun floor(
/api\interfaces\impls\MixedTiebaApiImpl.kt:44:            threadId: String, page: Int, postId: String?, subPostId: String?
/api\interfaces\impls\MixedTiebaApiImpl.kt:45:    ): Call<SubFloorListBean> = RetrofitTiebaApi.MINI_TIEBA_API.floor(threadId, page, postId, subPostId)
/api\interfaces\impls\MixedTiebaApiImpl.kt:47:    override fun userLikeForum(
/api\interfaces\impls\MixedTiebaApiImpl.kt:48:            uid: String, page: Int
/api\interfaces\impls\MixedTiebaApiImpl.kt:49:    ): Call<UserLikeForumBean> {
/api\interfaces\impls\MixedTiebaApiImpl.kt:50:        val myUid = AccountUtil.getUid(BaseApplication.instance)
/api\interfaces\impls\MixedTiebaApiImpl.kt:51:        return RetrofitTiebaApi.MINI_TIEBA_API.userLikeForum(
/api\interfaces\impls\MixedTiebaApiImpl.kt:52:                page = page,
/api\interfaces\impls\MixedTiebaApiImpl.kt:53:                uid = myUid,
/api\interfaces\impls\MixedTiebaApiImpl.kt:54:                friendUid = if (!TextUtils.equals(uid, myUid)) uid else null,
/api\interfaces\impls\MixedTiebaApiImpl.kt:55:                is_guest = if (!TextUtils.equals(uid, myUid)) "1" else null
/api\interfaces\impls\MixedTiebaApiImpl.kt:57:        )
/api\interfaces\impls\MixedTiebaApiImpl.kt:58:    }
/api\interfaces\impls\MixedTiebaApiImpl.kt:60:    override fun userPost(
/api\interfaces\impls\MixedTiebaApiImpl.kt:61:            uid: String, page: Int, isThread: Boolean
/api\interfaces\impls\MixedTiebaApiImpl.kt:62:    ): Call<UserPostBean> = RetrofitTiebaApi.MINI_TIEBA_API.userPost(uid, page, if (isThread) 1 else 0)
/api\interfaces\impls\MixedTiebaApiImpl.kt:64:    override fun picPage(
/api\interfaces\impls\MixedTiebaApiImpl.kt:65:            forumId: String, forumName: String, threadId: String, seeLz: Boolean, picId: String, picIndex: String, objType: String, prev: Boolean
/api\interfaces\impls\MixedTiebaApiImpl.kt:66:    ): Call<PicPageBean> = RetrofitTiebaApi.MINI_TIEBA_API.picPage(forumId, forumName, threadId, picId, picIndex, objType, prev = if (prev) 1 else 0, not_see_lz = if (seeLz) 0 else 1)
/api\interfaces\impls\MixedTiebaApiImpl.kt:68:    override fun profile(uid: String): Call<ProfileBean> = RetrofitTiebaApi.MINI_TIEBA_API.profile(uid)
/api\interfaces\impls\MixedTiebaApiImpl.kt:70:    override fun unlikeForum(
/api\interfaces\impls\MixedTiebaApiImpl.kt:71:            forumId: String, forumName: String, tbs: String
/api\interfaces\impls\MixedTiebaApiImpl.kt:72:    ): Call<CommonResponse> = RetrofitTiebaApi.MINI_TIEBA_API.unlikeForum(forumId, forumName, tbs)
/api\interfaces\impls\MixedTiebaApiImpl.kt:74:    override fun likeForum(
/api\interfaces\impls\MixedTiebaApiImpl.kt:75:            forumId: String, forumName: String, tbs: String
/api\interfaces\impls\MixedTiebaApiImpl.kt:76:    ): Call<LikeForumResultBean> = RetrofitTiebaApi.MINI_TIEBA_API.likeForum(forumId, forumName, tbs)
/api\interfaces\impls\MixedTiebaApiImpl.kt:78:    override fun sign(forumName: String, tbs: String): Call<SignResultBean> = RetrofitTiebaApi.MINI_TIEBA_API.sign(forumName, tbs)
/api\interfaces\impls\MixedTiebaApiImpl.kt:80:    override fun delThread(
/api\interfaces\impls\MixedTiebaApiImpl.kt:81:            forumId: String,
/api\interfaces\impls\MixedTiebaApiImpl.kt:82:            forumName: String,
/api\interfaces\impls\MixedTiebaApiImpl.kt:83:            threadId: String,
/api\interfaces\impls\MixedTiebaApiImpl.kt:84:            tbs: String
/api\interfaces\impls\MixedTiebaApiImpl.kt:85:    ): Call<CommonResponse> =
/api\interfaces\impls\MixedTiebaApiImpl.kt:86:            RetrofitTiebaApi.MINI_TIEBA_API.delThread(forumId, forumName, threadId, tbs)
/api\interfaces\impls\MixedTiebaApiImpl.kt:88:    override fun delPost(
/api\interfaces\impls\MixedTiebaApiImpl.kt:89:            forumId: String,
/api\interfaces\impls\MixedTiebaApiImpl.kt:90:            forumName: String,
/api\interfaces\impls\MixedTiebaApiImpl.kt:91:            threadId: String,
/api\interfaces\impls\MixedTiebaApiImpl.kt:92:            postId: String,
/api\interfaces\impls\MixedTiebaApiImpl.kt:93:            tbs: String,
/api\interfaces\impls\MixedTiebaApiImpl.kt:94:            isFloor: Boolean,
/api\interfaces\impls\MixedTiebaApiImpl.kt:95:            delMyPost: Boolean
/api\interfaces\impls\MixedTiebaApiImpl.kt:96:    ): Call<CommonResponse> =
/api\interfaces\impls\MixedTiebaApiImpl.kt:97:            RetrofitTiebaApi.MINI_TIEBA_API.delPost(
/api\interfaces\impls\MixedTiebaApiImpl.kt:98:                    forumId,
/api\interfaces\impls\MixedTiebaApiImpl.kt:99:                    forumName,
/api\interfaces\impls\MixedTiebaApiImpl.kt:100:                    threadId,
/api\interfaces\impls\MixedTiebaApiImpl.kt:101:                    postId,
/api\interfaces\impls\MixedTiebaApiImpl.kt:102:                    tbs,
/api\interfaces\impls\MixedTiebaApiImpl.kt:103:                    is_floor = if (isFloor) 1 else 0,
/api\interfaces\impls\MixedTiebaApiImpl.kt:104:                    src = if (isFloor) 3 else 1,
/api\interfaces\impls\MixedTiebaApiImpl.kt:105:                    is_vip_del = if (delMyPost) 0 else 1,
/api\interfaces\impls\MixedTiebaApiImpl.kt:106:                    delete_my_post = if (delMyPost) 1 else 0
/api\interfaces\impls\MixedTiebaApiImpl.kt:107:            )
/api\interfaces\impls\MixedTiebaApiImpl.kt:109:    override fun searchPost(
/api\interfaces\impls\MixedTiebaApiImpl.kt:110:            keyword: String, forumName: String, onlyThread: Boolean, page: Int, pageSize: Int
/api\interfaces\impls\MixedTiebaApiImpl.kt:111:    ): Call<SearchPostBean> = RetrofitTiebaApi.MINI_TIEBA_API.searchPost(keyword, forumName, page, pageSize, only_thread = if (onlyThread) 1 else 0)
/api\interfaces\impls\MixedTiebaApiImpl.kt:113:    override fun searchUser(keyword: String): Call<SearchUserBean> = RetrofitTiebaApi.MINI_TIEBA_API.searchUser(keyword)
/api\interfaces\impls\MixedTiebaApiImpl.kt:115:    override fun msg(): Call<MsgBean> = RetrofitTiebaApi.NEW_TIEBA_API.msg()
/api\interfaces\impls\MixedTiebaApiImpl.kt:117:    override fun threadStore(page: Int, pageSize: Int): Call<ThreadStoreBean> =
/api\interfaces\impls\MixedTiebaApiImpl.kt:118:            RetrofitTiebaApi.NEW_TIEBA_API.threadStore(pageSize, pageSize * page, AccountUtil.getUid(BaseApplication.instance))
/api\interfaces\impls\MixedTiebaApiImpl.kt:120:    override fun removeStore(threadId: String, tbs: String): Call<CommonResponse> = RetrofitTiebaApi.NEW_TIEBA_API.removeStore(threadId, tbs)
/api\interfaces\impls\MixedTiebaApiImpl.kt:122:    override fun addStore(threadId: String, postId: String, tbs: String): Call<CommonResponse> =
/api\interfaces\impls\MixedTiebaApiImpl.kt:123:            RetrofitTiebaApi.NEW_TIEBA_API.addStore(listOf(CollectDataBean(postId, threadId, "0", "0")).toJson(), tbs)
/api\interfaces\impls\MixedTiebaApiImpl.kt:125:    override fun replyMe(page: Int): Call<MessageListBean> = RetrofitTiebaApi.NEW_TIEBA_API.replyMe(page)
/api\interfaces\impls\MixedTiebaApiImpl.kt:127:    override fun atMe(page: Int): Call<MessageListBean> = RetrofitTiebaApi.NEW_TIEBA_API.atMe(page)
/api\interfaces\impls\MixedTiebaApiImpl.kt:129:    override fun threadContent(
/api\interfaces\impls\MixedTiebaApiImpl.kt:130:            threadId: String, page: Int, seeLz: Boolean, reverse: Boolean
/api\interfaces\impls\MixedTiebaApiImpl.kt:131:    ): Call<ThreadContentBean> = RetrofitTiebaApi.OFFICIAL_TIEBA_API.threadContent(threadId, page, last = if (reverse) "1" else null, r = if (reverse) "1" else null, lz = if (seeLz) 1 else 0)
/api\interfaces\impls\MixedTiebaApiImpl.kt:133:    override fun threadContent(
/api\interfaces\impls\MixedTiebaApiImpl.kt:134:            threadId: String, postId: String?, seeLz: Boolean, reverse: Boolean
/api\interfaces\impls\MixedTiebaApiImpl.kt:135:    ): Call<ThreadContentBean> = RetrofitTiebaApi.OFFICIAL_TIEBA_API.threadContent(threadId, postId, last = if (reverse) "1" else null, r = if (reverse) "1" else null, lz = if (seeLz) 1 else 0)
/api\interfaces\impls\MixedTiebaApiImpl.kt:137:    override fun submitDislike(
/api\interfaces\impls\MixedTiebaApiImpl.kt:138:            dislikeBean: DislikeBean,
/api\interfaces\impls\MixedTiebaApiImpl.kt:139:            stoken: String
/api\interfaces\impls\MixedTiebaApiImpl.kt:140:    ): Call<CommonResponse> = RetrofitTiebaApi.OFFICIAL_TIEBA_API.submitDislike(listOf(dislikeBean).toJson(), stoken)
/api\interfaces\impls\MixedTiebaApiImpl.kt:142:    override fun follow(
/api\interfaces\impls\MixedTiebaApiImpl.kt:143:            portrait: String, tbs: String
/api\interfaces\impls\MixedTiebaApiImpl.kt:144:    ): Call<CommonResponse> = RetrofitTiebaApi.WEB_TIEBA_API.follow("https://tieba.baidu.com/i/?portrait=${URLEncoder.encode(portrait, "UTF-8")}&cuid=&auth=&uid=&ssid=&from=&uid=&pu=&bd_page_type=2&auth=&originid=&mo_device=1&tbs=${tbs}&action=follow&op=follow")
/api\interfaces\impls\MixedTiebaApiImpl.kt:146:    override fun unfollow(
/api\interfaces\impls\MixedTiebaApiImpl.kt:147:            portrait: String, tbs: String
/api\interfaces\impls\MixedTiebaApiImpl.kt:148:    ): Call<CommonResponse> = RetrofitTiebaApi.WEB_TIEBA_API.follow("https://tieba.baidu.com/i/?portrait=${URLEncoder.encode(portrait, "UTF-8")}&cuid=&auth=&uid=&ssid=&from=&uid=&pu=&bd_page_type=2&auth=&originid=&mo_device=1&tbs=${tbs}&action=follow&op=unfollow")
/api\interfaces\impls\MixedTiebaApiImpl.kt:150:    override fun hotMessageList(): Call<HotMessageListBean> = RetrofitTiebaApi.WEB_TIEBA_API.hotMessageList()
/api\interfaces\impls\MixedTiebaApiImpl.kt:152:    override fun myInfo(cookie: String): Call<MyInfoBean> = RetrofitTiebaApi.WEB_TIEBA_API.myInfo(cookie)
/api\interfaces\impls\MixedTiebaApiImpl.kt:154:    override fun searchForum(keyword: String): Call<SearchForumBean> = RetrofitTiebaApi.WEB_TIEBA_API.searchForum(keyword)
/api\interfaces\impls\MixedTiebaApiImpl.kt:156:    override fun searchThread(
/api\interfaces\impls\MixedTiebaApiImpl.kt:157:            keyword: String, page: Int, order: SearchThreadOrder, filter: SearchThreadFilter
/api\interfaces\impls\MixedTiebaApiImpl.kt:158:    ): Call<SearchThreadBean> =
/api\interfaces\impls\MixedTiebaApiImpl.kt:159:            RetrofitTiebaApi.WEB_TIEBA_API.searchThread(keyword, page, order.toString(), filter.toString())
/api\interfaces\impls\MixedTiebaApiImpl.kt:161:    override fun webUploadPic(photoInfoBean: PhotoInfoBean): Call<WebUploadPicBean> {
/api\interfaces\impls\MixedTiebaApiImpl.kt:162:        var base64: String? = null
/api\interfaces\impls\MixedTiebaApiImpl.kt:163:        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {
/api\interfaces\impls\MixedTiebaApiImpl.kt:164:            base64 = ImageUtil.imageToBase64(photoInfoBean.file)
/api\interfaces\impls\MixedTiebaApiImpl.kt:165:        } else {
/api\interfaces\impls\MixedTiebaApiImpl.kt:166:            try {
/api\interfaces\impls\MixedTiebaApiImpl.kt:167:                BaseApplication.instance.contentResolver.openAssetFileDescriptor(photoInfoBean.fileUri, "r")?.use { afd ->
/api\interfaces\impls\MixedTiebaApiImpl.kt:168:                    base64 = ImageUtil.imageToBase64(FileInputStream(afd.parcelFileDescriptor.fileDescriptor))
/api\interfaces\impls\MixedTiebaApiImpl.kt:169:                }
/api\interfaces\impls\MixedTiebaApiImpl.kt:170:            } catch (e: IOException) {
/api\interfaces\impls\MixedTiebaApiImpl.kt:171:                e.printStackTrace()
/api\interfaces\impls\MixedTiebaApiImpl.kt:172:                base64 = null
/api\interfaces\impls\MixedTiebaApiImpl.kt:173:            }
/api\interfaces\impls\MixedTiebaApiImpl.kt:174:        }
/api\interfaces\impls\MixedTiebaApiImpl.kt:175:        return RetrofitTiebaApi.WEB_TIEBA_API.webUploadPic(base64)
/api\interfaces\impls\MixedTiebaApiImpl.kt:176:    }
/api\interfaces\impls\MixedTiebaApiImpl.kt:178:    override fun webReply(
/api\interfaces\impls\MixedTiebaApiImpl.kt:179:            forumId: String, forumName: String, threadId: String, tbs: String, content: String, imgInfo: String?, nickName: String, pn: String, bsk: String
/api\interfaces\impls\MixedTiebaApiImpl.kt:180:    ): Call<WebReplyResultBean> =
/api\interfaces\impls\MixedTiebaApiImpl.kt:181:            RetrofitTiebaApi.WEB_TIEBA_API.webReply(
/api\interfaces\impls\MixedTiebaApiImpl.kt:182:                    content = content,
/api\interfaces\impls\MixedTiebaApiImpl.kt:183:                    imgInfo = imgInfo ?: "",
/api\interfaces\impls\MixedTiebaApiImpl.kt:184:                    forumId = forumId,
/api\interfaces\impls\MixedTiebaApiImpl.kt:185:                    forumName = forumName,
/api\interfaces\impls\MixedTiebaApiImpl.kt:186:                    tbs = tbs,
/api\interfaces\impls\MixedTiebaApiImpl.kt:187:                    threadId = threadId,
/api\interfaces\impls\MixedTiebaApiImpl.kt:188:                    nickName = nickName,
/api\interfaces\impls\MixedTiebaApiImpl.kt:189:                    bsk = bsk,
/api\interfaces\impls\MixedTiebaApiImpl.kt:190:                    referer = "https://tieba.baidu.com/p/$threadId?lp=5028&mo_device=1&is_jingpost=0&pn=$pn&"
/api\interfaces\impls\MixedTiebaApiImpl.kt:191:            )
/api\interfaces\impls\MixedTiebaApiImpl.kt:193:    override fun webReply(
/api\interfaces\impls\MixedTiebaApiImpl.kt:194:            forumId: String, forumName: String, threadId: String, tbs: String, content: String, imgInfo: String?, nickName: String, postId: String, floor: String, pn: String, bsk: String
/api\interfaces\impls\MixedTiebaApiImpl.kt:195:    ): Call<WebReplyResultBean> =
/api\interfaces\impls\MixedTiebaApiImpl.kt:196:            RetrofitTiebaApi.WEB_TIEBA_API.webReply(
/api\interfaces\impls\MixedTiebaApiImpl.kt:197:                    content = content,
/api\interfaces\impls\MixedTiebaApiImpl.kt:198:                    imgInfo = imgInfo ?: "",
/api\interfaces\impls\MixedTiebaApiImpl.kt:199:                    forumId = forumId,
/api\interfaces\impls\MixedTiebaApiImpl.kt:200:                    forumName = forumName,
/api\interfaces\impls\MixedTiebaApiImpl.kt:201:                    tbs = tbs,
/api\interfaces\impls\MixedTiebaApiImpl.kt:202:                    threadId = threadId,
/api\interfaces\impls\MixedTiebaApiImpl.kt:203:                    nickName = nickName,
/api\interfaces\impls\MixedTiebaApiImpl.kt:204:                    postId = postId,
/api\interfaces\impls\MixedTiebaApiImpl.kt:205:                    floor = floor,
/api\interfaces\impls\MixedTiebaApiImpl.kt:206:                    bsk = bsk,
/api\interfaces\impls\MixedTiebaApiImpl.kt:207:                    referer = "https://tieba.baidu.com/p/$threadId?lp=5028&mo_device=1&is_jingpost=0&pn=$pn&"
/api\interfaces\impls\MixedTiebaApiImpl.kt:208:            )
/api\interfaces\impls\MixedTiebaApiImpl.kt:210:    override fun webReply(
/api\interfaces\impls\MixedTiebaApiImpl.kt:211:            forumId: String, forumName: String, threadId: String, tbs: String, content: String, imgInfo: String?, nickName: String, postId: String, replyPostId: String, floor: String, pn: String, bsk: String
/api\interfaces\impls\MixedTiebaApiImpl.kt:212:    ): Call<WebReplyResultBean> =
/api\interfaces\impls\MixedTiebaApiImpl.kt:213:            RetrofitTiebaApi.WEB_TIEBA_API.webReply(
/api\interfaces\impls\MixedTiebaApiImpl.kt:214:                    content = content,
/api\interfaces\impls\MixedTiebaApiImpl.kt:215:                    imgInfo = imgInfo ?: "",
/api\interfaces\impls\MixedTiebaApiImpl.kt:216:                    forumId = forumId,
/api\interfaces\impls\MixedTiebaApiImpl.kt:217:                    forumName = forumName,
/api\interfaces\impls\MixedTiebaApiImpl.kt:218:                    tbs = tbs,
/api\interfaces\impls\MixedTiebaApiImpl.kt:219:                    threadId = threadId,
/api\interfaces\impls\MixedTiebaApiImpl.kt:220:                    nickName = nickName,
/api\interfaces\impls\MixedTiebaApiImpl.kt:221:                    postId = postId,
/api\interfaces\impls\MixedTiebaApiImpl.kt:222:                    replyPostId = replyPostId,
/api\interfaces\impls\MixedTiebaApiImpl.kt:223:                    floor = floor,
/api\interfaces\impls\MixedTiebaApiImpl.kt:224:                    bsk = bsk,
/api\interfaces\impls\MixedTiebaApiImpl.kt:225:                    referer = "https://tieba.baidu.com/p/$threadId?lp=5028&mo_device=1&is_jingpost=0&pn=$pn&"
/api\interfaces\impls\MixedTiebaApiImpl.kt:226:            )
/api\interfaces\impls\MixedTiebaApiImpl.kt:228:    override fun webForumPage(
/api\interfaces\impls\MixedTiebaApiImpl.kt:229:            forumName: String, page: Int, goodClassifyId: String?, sortType: ForumSortType, pageSize: Int
/api\interfaces\impls\MixedTiebaApiImpl.kt:230:    ): Call<ForumBean> =
/api\interfaces\impls\MixedTiebaApiImpl.kt:231:            RetrofitTiebaApi.WEB_TIEBA_API.frs(forumName, (page - 1) * pageSize, sortType.value, goodClassifyId)
/api\interfaces\impls\MixedTiebaApiImpl.kt:232:}/api\models\UploadResultBean.java:1:package com.huanchengfly.tieba.post.api.models;
/api\models\UploadResultBean.java:3:import com.google.gson.annotations.SerializedName;
/api\models\UploadResultBean.java:4:import com.huanchengfly.tieba.post.utils.GsonUtil;
/api\models\UploadResultBean.java:6:public class UploadResultBean {
/api\models\UploadResultBean.java:7:    @SerializedName("error_code")
/api\models\UploadResultBean.java:8:    private int errorCode;
/api\models\UploadResultBean.java:9:    @SerializedName("error_msg")
/api\models\UploadResultBean.java:10:    private String errorMsg;
/api\models\UploadResultBean.java:11:    private UploadInfo info;
/api\models\UploadResultBean.java:13:    public String getErrorMsg() {
/api\models\UploadResultBean.java:14:        return errorMsg;
/api\models\UploadResultBean.java:15:    }
/api\models\UploadResultBean.java:17:    public int getErrorCode() {
/api\models\UploadResultBean.java:18:        return errorCode;
/api\models\UploadResultBean.java:19:    }
/api\models\UploadResultBean.java:21:    public UploadInfo getInfo() {
/api\models\UploadResultBean.java:22:        return info;
/api\models\UploadResultBean.java:23:    }
/api\models\UploadResultBean.java:25:    @Override
/api\models\UploadResultBean.java:26:    public String toString() {
/api\models\UploadResultBean.java:27:        return GsonUtil.getGson().toJson(this);
/api\models\UploadResultBean.java:28:    }
/api\models\UploadResultBean.java:30:    public class UploadInfo {
/api\models\UploadResultBean.java:31:        @SerializedName("pic_id")
/api\models\UploadResultBean.java:32:        private String picId;
/api\models\UploadResultBean.java:33:        private String width;
/api\models\UploadResultBean.java:34:        private String height;
/api\models\UploadResultBean.java:35:        @SerializedName("pic_url")
/api\models\UploadResultBean.java:36:        private String picUrl;
/api\models\UploadResultBean.java:38:        public String getPicId() {
/api\models\UploadResultBean.java:39:            return picId;
/api\models\UploadResultBean.java:40:        }
/api\models\UploadResultBean.java:42:        public UploadInfo setPicId(String picId) {
/api\models\UploadResultBean.java:43:            this.picId = picId;
/api\models\UploadResultBean.java:44:            return this;
/api\models\UploadResultBean.java:45:        }
/api\models\UploadResultBean.java:47:        public String getWidth() {
/api\models\UploadResultBean.java:48:            return width;
/api\models\UploadResultBean.java:49:        }
/api\models\UploadResultBean.java:51:        public UploadInfo setWidth(String width) {
/api\models\UploadResultBean.java:52:            this.width = width;
/api\models\UploadResultBean.java:53:            return this;
/api\models\UploadResultBean.java:54:        }
/api\models\UploadResultBean.java:56:        public String getHeight() {
/api\models\UploadResultBean.java:57:            return height;
/api\models\UploadResultBean.java:58:        }
/api\models\UploadResultBean.java:60:        public UploadInfo setHeight(String height) {
/api\models\UploadResultBean.java:61:            this.height = height;
/api\models\UploadResultBean.java:62:            return this;
/api\models\UploadResultBean.java:63:        }
/api\models\UploadResultBean.java:65:        public String getPicUrl() {
/api\models\UploadResultBean.java:66:            return picUrl;
/api\models\UploadResultBean.java:67:        }
/api\models\UploadResultBean.java:69:        public String getPic() {
/api\models\UploadResultBean.java:70:            return "#(pic," + getPicId() +
/api\models\UploadResultBean.java:71:                    "," +
/api\models\UploadResultBean.java:72:                    getWidth() +
/api\models\UploadResultBean.java:73:                    "," +
/api\models\UploadResultBean.java:74:                    getHeight() +
/api\models\UploadResultBean.java:75:                    ")\n";
/api\models\UploadResultBean.java:76:        }
/api\models\UploadResultBean.java:77:    }
/api\models\UploadResultBean.java:78:}
/api\models\UserLikeForumBean.java:1:package com.huanchengfly.tieba.post.api.models;
/api\models\UserLikeForumBean.java:3:import com.google.gson.annotations.SerializedName;
/api\models\UserLikeForumBean.java:4:import com.huanchengfly.tieba.post.models.BaseBean;
/api\models\UserLikeForumBean.java:6:import java.util.List;
/api\models\UserLikeForumBean.java:8:public class UserLikeForumBean extends BaseBean {
/api\models\UserLikeForumBean.java:9:    @SerializedName("error_code")
/api\models\UserLikeForumBean.java:10:    private String errorCode;
/api\models\UserLikeForumBean.java:11:    @SerializedName("error_msg")
/api\models\UserLikeForumBean.java:12:    private String errorMsg;
/api\models\UserLikeForumBean.java:13:    @SerializedName("has_more")
/api\models\UserLikeForumBean.java:14:    private String hasMore;
/api\models\UserLikeForumBean.java:15:    @SerializedName("forum_list")
/api\models\UserLikeForumBean.java:16:    private ForumListBean forumList;
/api\models\UserLikeForumBean.java:17:    @SerializedName("common_forum_list")
/api\models\UserLikeForumBean.java:18:    private ForumListBean commonForumList;
/api\models\UserLikeForumBean.java:20:    public String getErrorCode() {
/api\models\UserLikeForumBean.java:21:        return errorCode;
/api\models\UserLikeForumBean.java:22:    }
/api\models\UserLikeForumBean.java:24:    public String getErrorMsg() {
/api\models\UserLikeForumBean.java:25:        return errorMsg;
/api\models\UserLikeForumBean.java:26:    }
/api\models\UserLikeForumBean.java:28:    public String getHasMore() {
/api\models\UserLikeForumBean.java:29:        return hasMore;
/api\models\UserLikeForumBean.java:30:    }
/api\models\UserLikeForumBean.java:32:    public ForumListBean getForumList() {
/api\models\UserLikeForumBean.java:33:        return forumList;
/api\models\UserLikeForumBean.java:34:    }
/api\models\UserLikeForumBean.java:36:    public ForumListBean getCommonForumList() {
/api\models\UserLikeForumBean.java:37:        return commonForumList;
/api\models\UserLikeForumBean.java:38:    }
/api\models\UserLikeForumBean.java:40:    public static class ForumListBean {
/api\models\UserLikeForumBean.java:41:        @SerializedName("non-gconforum")
/api\models\UserLikeForumBean.java:42:        private List<ForumBean> forumList;
/api\models\UserLikeForumBean.java:44:        public List<ForumBean> getForumList() {
/api\models\UserLikeForumBean.java:45:            return forumList;
/api\models\UserLikeForumBean.java:46:        }
/api\models\UserLikeForumBean.java:47:    }
/api\models\UserLikeForumBean.java:49:    public static class ForumBean {
/api\models\UserLikeForumBean.java:50:        private String id;
/api\models\UserLikeForumBean.java:51:        private String name;
/api\models\UserLikeForumBean.java:52:        @SerializedName("level_id")
/api\models\UserLikeForumBean.java:53:        private String levelId;
/api\models\UserLikeForumBean.java:54:        @SerializedName("favo_type")
/api\models\UserLikeForumBean.java:55:        private String favoType;
/api\models\UserLikeForumBean.java:56:        @SerializedName("level_name")
/api\models\UserLikeForumBean.java:57:        private String levelName;
/api\models\UserLikeForumBean.java:58:        @SerializedName("cur_score")
/api\models\UserLikeForumBean.java:59:        private String curScore;
/api\models\UserLikeForumBean.java:60:        @SerializedName("levelup_score")
/api\models\UserLikeForumBean.java:61:        private String levelUpScore;
/api\models\UserLikeForumBean.java:62:        private String avatar;
/api\models\UserLikeForumBean.java:63:        private String slogan;
/api\models\UserLikeForumBean.java:65:        public String getId() {
/api\models\UserLikeForumBean.java:66:            return id;
/api\models\UserLikeForumBean.java:67:        }
/api\models\UserLikeForumBean.java:69:        public String getName() {
/api\models\UserLikeForumBean.java:70:            return name;
/api\models\UserLikeForumBean.java:71:        }
/api\models\UserLikeForumBean.java:73:        public String getLevelId() {
/api\models\UserLikeForumBean.java:74:            return levelId;
/api\models\UserLikeForumBean.java:75:        }
/api\models\UserLikeForumBean.java:77:        public String getFavoType() {
/api\models\UserLikeForumBean.java:78:            return favoType;
/api\models\UserLikeForumBean.java:79:        }
/api\models\UserLikeForumBean.java:81:        public String getLevelName() {
/api\models\UserLikeForumBean.java:82:            return levelName;
/api\models\UserLikeForumBean.java:83:        }
/api\models\UserLikeForumBean.java:85:        public String getCurScore() {
/api\models\UserLikeForumBean.java:86:            return curScore;
/api\models\UserLikeForumBean.java:87:        }
/api\models\UserLikeForumBean.java:89:        public String getLevelUpScore() {
/api\models\UserLikeForumBean.java:90:            return levelUpScore;
/api\models\UserLikeForumBean.java:91:        }
/api\models\UserLikeForumBean.java:93:        public String getAvatar() {
/api\models\UserLikeForumBean.java:94:            return avatar;
/api\models\UserLikeForumBean.java:95:        }
/api\models\UserLikeForumBean.java:97:        public String getSlogan() {
/api\models\UserLikeForumBean.java:98:            return slogan;
/api\models\UserLikeForumBean.java:99:        }
/api\models\UserLikeForumBean.java:100:    }
/api\models\UserLikeForumBean.java:102:}
/api\models\UserPostBean.java:1:package com.huanchengfly.tieba.post.api.models;
/api\models\UserPostBean.java:3:import com.google.gson.annotations.JsonAdapter;
/api\models\UserPostBean.java:4:import com.google.gson.annotations.SerializedName;
/api\models\UserPostBean.java:5:import com.huanchengfly.tieba.post.api.adapters.PortraitAdapter;
/api\models\UserPostBean.java:6:import com.huanchengfly.tieba.post.api.adapters.UserPostContentAdapter;
/api\models\UserPostBean.java:7:import com.huanchengfly.tieba.post.models.BaseBean;
/api\models\UserPostBean.java:9:import java.util.ArrayList;
/api\models\UserPostBean.java:10:import java.util.List;
/api\models\UserPostBean.java:12:public class UserPostBean extends BaseBean {
/api\models\UserPostBean.java:13:    @SerializedName("error_code")
/api\models\UserPostBean.java:14:    private String errorCode;
/api\models\UserPostBean.java:15:    @SerializedName("error_msg")
/api\models\UserPostBean.java:16:    private String errorMsg;
/api\models\UserPostBean.java:17:    @SerializedName("hide_post")
/api\models\UserPostBean.java:18:    private String hidePost;
/api\models\UserPostBean.java:19:    @SerializedName("post_list")
/api\models\UserPostBean.java:20:    private List<PostBean> postList;
/api\models\UserPostBean.java:22:    public String getErrorCode() {
/api\models\UserPostBean.java:23:        return errorCode;
/api\models\UserPostBean.java:24:    }
/api\models\UserPostBean.java:26:    public String getErrorMsg() {
/api\models\UserPostBean.java:27:        return errorMsg;
/api\models\UserPostBean.java:28:    }
/api\models\UserPostBean.java:30:    public String getHidePost() {
/api\models\UserPostBean.java:31:        return hidePost;
/api\models\UserPostBean.java:32:    }
/api\models\UserPostBean.java:34:    public List<PostBean> getPostList() {
/api\models\UserPostBean.java:35:        return postList;
/api\models\UserPostBean.java:36:    }
/api\models\UserPostBean.java:38:    public static class PostBean {
/api\models\UserPostBean.java:39:        @SerializedName("forum_id")
/api\models\UserPostBean.java:40:        private String forumId;
/api\models\UserPostBean.java:41:        @SerializedName("thread_id")
/api\models\UserPostBean.java:42:        private String threadId;
/api\models\UserPostBean.java:43:        @SerializedName("post_id")
/api\models\UserPostBean.java:44:        private String postId;
/api\models\UserPostBean.java:45:        @SerializedName("is_thread")
/api\models\UserPostBean.java:46:        private String isThread;
/api\models\UserPostBean.java:47:        @SerializedName("create_time")
/api\models\UserPostBean.java:48:        private String createTime;
/api\models\UserPostBean.java:49:        @SerializedName("is_ntitle")
/api\models\UserPostBean.java:50:        private String isNoTitle;
/api\models\UserPostBean.java:51:        @SerializedName("forum_name")
/api\models\UserPostBean.java:52:        private String forumName;
/api\models\UserPostBean.java:53:        private String title;
/api\models\UserPostBean.java:54:        @SerializedName("user_name")
/api\models\UserPostBean.java:55:        private String userName;
/api\models\UserPostBean.java:56:        @SerializedName("is_post_deleted")
/api\models\UserPostBean.java:57:        private String isPostDeleted;
/api\models\UserPostBean.java:58:        @SerializedName("reply_num")
/api\models\UserPostBean.java:59:        private String replyNum;
/api\models\UserPostBean.java:60:        @SerializedName("freq_num")
/api\models\UserPostBean.java:61:        private String freqNum;
/api\models\UserPostBean.java:62:        @SerializedName("user_id")
/api\models\UserPostBean.java:63:        private String userId;
/api\models\UserPostBean.java:64:        @SerializedName("name_show")
/api\models\UserPostBean.java:65:        private String nameShow;
/api\models\UserPostBean.java:66:        @JsonAdapter(PortraitAdapter.class)
/api\models\UserPostBean.java:67:        @SerializedName("user_portrait")
/api\models\UserPostBean.java:68:        private String userPortrait;
/api\models\UserPostBean.java:69:        @SerializedName("post_type")
/api\models\UserPostBean.java:70:        private String postType;
/api\models\UserPostBean.java:71:        @JsonAdapter(UserPostContentAdapter.class)
/api\models\UserPostBean.java:72:        private List<ContentBean> content;
/api\models\UserPostBean.java:73:        @SerializedName("abstract")
/api\models\UserPostBean.java:74:        private List<PostContentBean> abstracts;
/api\models\UserPostBean.java:76:        public List<PostContentBean> getAbstracts() {
/api\models\UserPostBean.java:77:            return abstracts;
/api\models\UserPostBean.java:78:        }
/api\models\UserPostBean.java:80:        public String getPostType() {
/api\models\UserPostBean.java:81:            return postType;
/api\models\UserPostBean.java:82:        }
/api\models\UserPostBean.java:84:        public String getIsNoTitle() {
/api\models\UserPostBean.java:85:            return isNoTitle;
/api\models\UserPostBean.java:86:        }
/api\models\UserPostBean.java:88:        public List<ContentBean> getContent() {
/api\models\UserPostBean.java:89:            return content;
/api\models\UserPostBean.java:90:        }
/api\models\UserPostBean.java:92:        public String getForumId() {
/api\models\UserPostBean.java:93:            return forumId;
/api\models\UserPostBean.java:94:        }
/api\models\UserPostBean.java:96:        public String getThreadId() {
/api\models\UserPostBean.java:97:            return threadId;
/api\models\UserPostBean.java:98:        }
/api\models\UserPostBean.java:100:        public String getPostId() {
/api\models\UserPostBean.java:101:            return postId;
/api\models\UserPostBean.java:102:        }
/api\models\UserPostBean.java:104:        public String getIsThread() {
/api\models\UserPostBean.java:105:            return isThread;
/api\models\UserPostBean.java:106:        }
/api\models\UserPostBean.java:108:        public String getCreateTime() {
/api\models\UserPostBean.java:109:            return createTime;
/api\models\UserPostBean.java:110:        }
/api\models\UserPostBean.java:112:        public String getForumName() {
/api\models\UserPostBean.java:113:            return forumName;
/api\models\UserPostBean.java:114:        }
/api\models\UserPostBean.java:116:        public String getTitle() {
/api\models\UserPostBean.java:117:            return title;
/api\models\UserPostBean.java:118:        }
/api\models\UserPostBean.java:120:        public String getUserName() {
/api\models\UserPostBean.java:121:            return userName;
/api\models\UserPostBean.java:122:        }
/api\models\UserPostBean.java:124:        public String getIsPostDeleted() {
/api\models\UserPostBean.java:125:            return isPostDeleted;
/api\models\UserPostBean.java:126:        }
/api\models\UserPostBean.java:128:        public String getReplyNum() {
/api\models\UserPostBean.java:129:            return replyNum;
/api\models\UserPostBean.java:130:        }
/api\models\UserPostBean.java:132:        public String getFreqNum() {
/api\models\UserPostBean.java:133:            return freqNum;
/api\models\UserPostBean.java:134:        }
/api\models\UserPostBean.java:136:        public String getUserId() {
/api\models\UserPostBean.java:137:            return userId;
/api\models\UserPostBean.java:138:        }
/api\models\UserPostBean.java:140:        public String getNameShow() {
/api\models\UserPostBean.java:141:            return nameShow;
/api\models\UserPostBean.java:142:        }
/api\models\UserPostBean.java:144:        public String getUserPortrait() {
/api\models\UserPostBean.java:145:            return userPortrait;
/api\models\UserPostBean.java:146:        }
/api\models\UserPostBean.java:147:    }
/api\models\UserPostBean.java:149:    public static class ContentBean {
/api\models\UserPostBean.java:150:        @SerializedName("post_content")
/api\models\UserPostBean.java:151:        private List<PostContentBean> postContent;
/api\models\UserPostBean.java:152:        @SerializedName("create_time")
/api\models\UserPostBean.java:153:        private String createTime;
/api\models\UserPostBean.java:154:        @SerializedName("post_id")
/api\models\UserPostBean.java:155:        private String postId;
/api\models\UserPostBean.java:157:        public static ContentBean createContentBean(String content) {
/api\models\UserPostBean.java:158:            List<PostContentBean> list = new ArrayList<>();
/api\models\UserPostBean.java:159:            list.add(new PostContentBean()
/api\models\UserPostBean.java:160:                    .setType("0")
/api\models\UserPostBean.java:161:                    .setText(content));
/api\models\UserPostBean.java:162:            return new ContentBean()
/api\models\UserPostBean.java:163:                    .setPostContent(list)
/api\models\UserPostBean.java:164:                    .setCreateTime(null)
/api\models\UserPostBean.java:165:                    .setPostId(null);
/api\models\UserPostBean.java:166:        }
/api\models\UserPostBean.java:168:        public String getCreateTime() {
/api\models\UserPostBean.java:169:            return createTime;
/api\models\UserPostBean.java:170:        }
/api\models\UserPostBean.java:172:        public ContentBean setCreateTime(String createTime) {
/api\models\UserPostBean.java:173:            this.createTime = createTime;
/api\models\UserPostBean.java:174:            return this;
/api\models\UserPostBean.java:175:        }
/api\models\UserPostBean.java:177:        public String getPostId() {
/api\models\UserPostBean.java:178:            return postId;
/api\models\UserPostBean.java:179:        }
/api\models\UserPostBean.java:181:        public ContentBean setPostId(String postId) {
/api\models\UserPostBean.java:182:            this.postId = postId;
/api\models\UserPostBean.java:183:            return this;
/api\models\UserPostBean.java:184:        }
/api\models\UserPostBean.java:186:        public List<PostContentBean> getPostContent() {
/api\models\UserPostBean.java:187:            return postContent;
/api\models\UserPostBean.java:188:        }
/api\models\UserPostBean.java:190:        public ContentBean setPostContent(List<PostContentBean> postContent) {
/api\models\UserPostBean.java:191:            this.postContent = postContent;
/api\models\UserPostBean.java:192:            return this;
/api\models\UserPostBean.java:193:        }
/api\models\UserPostBean.java:194:    }
/api\models\UserPostBean.java:196:    public static class PostContentBean {
/api\models\UserPostBean.java:197:        private String type;
/api\models\UserPostBean.java:198:        private String text;
/api\models\UserPostBean.java:200:        public String getType() {
/api\models\UserPostBean.java:201:            return type;
/api\models\UserPostBean.java:202:        }
/api\models\UserPostBean.java:204:        public PostContentBean setType(String type) {
/api\models\UserPostBean.java:205:            this.type = type;
/api\models\UserPostBean.java:206:            return this;
/api\models\UserPostBean.java:207:        }
/api\models\UserPostBean.java:209:        public String getText() {
/api\models\UserPostBean.java:210:            return text;
/api\models\UserPostBean.java:211:        }
/api\models\UserPostBean.java:213:        public PostContentBean setText(String text) {
/api\models\UserPostBean.java:214:            this.text = text;
/api\models\UserPostBean.java:215:            return this;
/api\models\UserPostBean.java:216:        }
/api\models\UserPostBean.java:217:    }
/api\models\UserPostBean.java:218:}
/api\models\WebReplyResultBean.java:1:package com.huanchengfly.tieba.post.api.models;
/api\models\WebReplyResultBean.java:3:import com.google.gson.annotations.SerializedName;
/api\models\WebReplyResultBean.java:5:public class WebReplyResultBean {
/api\models\WebReplyResultBean.java:6:    @SerializedName("no")
/api\models\WebReplyResultBean.java:7:    private int errorCode;
/api\models\WebReplyResultBean.java:8:    @SerializedName("error")
/api\models\WebReplyResultBean.java:9:    private String errorMsg;
/api\models\WebReplyResultBean.java:10:    private WebReplyDataBean data;
/api\models\WebReplyResultBean.java:12:    public WebReplyDataBean getData() {
/api\models\WebReplyResultBean.java:13:        return data;
/api\models\WebReplyResultBean.java:14:    }
/api\models\WebReplyResultBean.java:16:    public int getErrorCode() {
/api\models\WebReplyResultBean.java:17:        return errorCode;
/api\models\WebReplyResultBean.java:18:    }
/api\models\WebReplyResultBean.java:20:    public String getErrorMsg() {
/api\models\WebReplyResultBean.java:21:        return errorMsg;
/api\models\WebReplyResultBean.java:22:    }
/api\models\WebReplyResultBean.java:24:    public static class WebReplyDataBean {
/api\models\WebReplyResultBean.java:25:        @SerializedName("is_not_top_stick")
/api\models\WebReplyResultBean.java:26:        private int isNotTopStick;
/api\models\WebReplyResultBean.java:27:        private long pid;
/api\models\WebReplyResultBean.java:28:        private long tid;
/api\models\WebReplyResultBean.java:30:        public int getIsNotTopStick() {
/api\models\WebReplyResultBean.java:31:            return isNotTopStick;
/api\models\WebReplyResultBean.java:32:        }
/api\models\WebReplyResultBean.java:34:        public long getPid() {
/api\models\WebReplyResultBean.java:35:            return pid;
/api\models\WebReplyResultBean.java:36:        }
/api\models\WebReplyResultBean.java:38:        public long getTid() {
/api\models\WebReplyResultBean.java:39:            return tid;
/api\models\WebReplyResultBean.java:40:        }
/api\models\WebReplyResultBean.java:41:    }
/api\models\WebReplyResultBean.java:42:}
/api\models\WebUploadPicBean.java:1:package com.huanchengfly.tieba.post.api.models;
/api\models\WebUploadPicBean.java:3:import com.huanchengfly.tieba.post.models.BaseBean;
/api\models\WebUploadPicBean.java:5:public class WebUploadPicBean extends BaseBean {
/api\models\WebUploadPicBean.java:6:    private String errorMsg;
/api\models\WebUploadPicBean.java:7:    private String imageBaseSrc;
/api\models\WebUploadPicBean.java:8:    private String imageInfo;
/api\models\WebUploadPicBean.java:9:    private String imageSrc;
/api\models\WebUploadPicBean.java:11:    public String getErrorMsg() {
/api\models\WebUploadPicBean.java:12:        return errorMsg;
/api\models\WebUploadPicBean.java:13:    }
/api\models\WebUploadPicBean.java:15:    public String getImageBaseSrc() {
/api\models\WebUploadPicBean.java:16:        return imageBaseSrc;
/api\models\WebUploadPicBean.java:17:    }
/api\models\WebUploadPicBean.java:19:    public String getImageInfo() {
/api\models\WebUploadPicBean.java:20:        return imageInfo;
/api\models\WebUploadPicBean.java:21:    }
/api\models\WebUploadPicBean.java:23:    public String getImageSrc() {
/api\models\WebUploadPicBean.java:24:        return imageSrc;
/api\models\WebUploadPicBean.java:25:    }
/api\models\WebUploadPicBean.java:26:}
/api\models\AgreeBean.kt:1:package com.huanchengfly.tieba.post.api.models
/api\models\AgreeBean.kt:3:import com.huanchengfly.tieba.post.models.BaseBean
/api\models\AgreeBean.kt:4:import com.google.gson.annotations.SerializedName
/api\models\AgreeBean.kt:6:class AgreeBean : BaseBean() {
/api\models\AgreeBean.kt:7:    @SerializedName("error_code")
/api\models\AgreeBean.kt:8:    val errorCode: String? = null
/api\models\AgreeBean.kt:10:    @SerializedName("error_msg")
/api\models\AgreeBean.kt:11:    val errorMsg: String? = null
/api\models\AgreeBean.kt:12:    val data: AgreeDataBean? = null
/api\models\AgreeBean.kt:14:    class AgreeDataBean {
/api\models\AgreeBean.kt:15:        val agree: AgreeInfoBean? = null
/api\models\AgreeBean.kt:16:    }
/api\models\AgreeBean.kt:18:    class AgreeInfoBean {
/api\models\AgreeBean.kt:19:        val score: String? = null
/api\models\AgreeBean.kt:20:    }
/api\models\AgreeBean.kt:21:}/api\models\ChangelogBean.kt:1:package com.huanchengfly.tieba.post.api.models
/api\models\ChangelogBean.kt:3:import com.google.gson.annotations.SerializedName
/api\models\ChangelogBean.kt:4:import com.huanchengfly.tieba.post.models.BaseBean
/api\models\ChangelogBean.kt:6:class ChangelogBean : BaseBean() {
/api\models\ChangelogBean.kt:7:    @SerializedName("error_code")
/api\models\ChangelogBean.kt:8:    val errorCode = 0
/api\models\ChangelogBean.kt:10:    @SerializedName("error_msg")
/api\models\ChangelogBean.kt:11:    val errorMsg: String? = null
/api\models\ChangelogBean.kt:13:    @SerializedName("success")
/api\models\ChangelogBean.kt:14:    val isSuccess = false
/api\models\ChangelogBean.kt:15:    val result: String? = null
/api\models\ChangelogBean.kt:17:}/api\models\CollectDataBean.kt:1:package com.huanchengfly.tieba.post.api.models
/api\models\CollectDataBean.kt:3:import com.huanchengfly.tieba.post.utils.GsonUtil
/api\models\CollectDataBean.kt:5:class CollectDataBean(var pid: String, var tid: String, var status: String, var type: String) {
/api\models\CollectDataBean.kt:6:    fun setPid(pid: String): CollectDataBean {
/api\models\CollectDataBean.kt:7:        this.pid = pid
/api\models\CollectDataBean.kt:8:        return this
/api\models\CollectDataBean.kt:9:    }
/api\models\CollectDataBean.kt:11:    fun setStatus(status: String): CollectDataBean {
/api\models\CollectDataBean.kt:12:        this.status = status
/api\models\CollectDataBean.kt:13:        return this
/api\models\CollectDataBean.kt:14:    }
/api\models\CollectDataBean.kt:16:    fun setTid(tid: String): CollectDataBean {
/api\models\CollectDataBean.kt:17:        this.tid = tid
/api\models\CollectDataBean.kt:18:        return this
/api\models\CollectDataBean.kt:19:    }
/api\models\CollectDataBean.kt:21:    fun setType(type: String): CollectDataBean {
/api\models\CollectDataBean.kt:22:        this.type = type
/api\models\CollectDataBean.kt:23:        return this
/api\models\CollectDataBean.kt:24:    }
/api\models\CollectDataBean.kt:26:    override fun toString(): String {
/api\models\CollectDataBean.kt:27:        return GsonUtil.getGson().toJson(this)
/api\models\CollectDataBean.kt:28:    }
/api\models\CollectDataBean.kt:30:}/api\models\CommonResponse.kt:1:package com.huanchengfly.tieba.post.api.models
/api\models\CommonResponse.kt:3:import com.google.gson.annotations.JsonAdapter
/api\models\CommonResponse.kt:4:import com.google.gson.annotations.SerializedName
/api\models\CommonResponse.kt:5:import com.huanchengfly.tieba.post.api.adapters.ErrorMsgAdapter
/api\models\CommonResponse.kt:6:import com.huanchengfly.tieba.post.models.BaseBean
/api\models\CommonResponse.kt:8:data class CommonResponse(
/api\models\CommonResponse.kt:9:        @SerializedName("error_code", alternate = ["errno", "no"])
/api\models\CommonResponse.kt:10:        var errorCode: Int?,
/api\models\CommonResponse.kt:11:        @JsonAdapter(ErrorMsgAdapter::class)
/api\models\CommonResponse.kt:12:        @SerializedName("error_msg", alternate = ["errmsg", "error"])
/api\models\CommonResponse.kt:13:        var errorMsg: String?
/api\models\CommonResponse.kt:14:) : BaseBean()/api\models\ForumPageBean.kt:1:package com.huanchengfly.tieba.post.api.models
/api\models\ForumPageBean.kt:3:import com.google.gson.annotations.JsonAdapter
/api\models\ForumPageBean.kt:4:import com.google.gson.annotations.SerializedName
/api\models\ForumPageBean.kt:5:import com.huanchengfly.tieba.post.api.adapters.MediaAdapter
/api\models\ForumPageBean.kt:6:import com.huanchengfly.tieba.post.api.adapters.PortraitAdapter
/api\models\ForumPageBean.kt:7:import com.huanchengfly.tieba.post.models.BaseBean
/api\models\ForumPageBean.kt:8:import com.huanchengfly.tieba.post.models.ErrorBean
/api\models\ForumPageBean.kt:10:class ForumPageBean : ErrorBean() {
/api\models\ForumPageBean.kt:11:    var forum: ForumBean? = null
/api\models\ForumPageBean.kt:12:        private set
/api\models\ForumPageBean.kt:13:    var anti: AntiBean? = null
/api\models\ForumPageBean.kt:14:        private set
/api\models\ForumPageBean.kt:15:    var user: UserBean? = null
/api\models\ForumPageBean.kt:16:    var page: PageBean? = null
/api\models\ForumPageBean.kt:18:    @SerializedName("thread_list")
/api\models\ForumPageBean.kt:19:    var threadList: List<ThreadBean>? = null
/api\models\ForumPageBean.kt:21:    @SerializedName("user_list")
/api\models\ForumPageBean.kt:22:    var userList: List<UserBean>? = null
/api\models\ForumPageBean.kt:24:    fun setForum(forum: ForumBean?): ForumPageBean {
/api\models\ForumPageBean.kt:25:        this.forum = forum
/api\models\ForumPageBean.kt:26:        return this
/api\models\ForumPageBean.kt:27:    }
/api\models\ForumPageBean.kt:29:    fun setAnti(anti: AntiBean?): ForumPageBean {
/api\models\ForumPageBean.kt:30:        this.anti = anti
/api\models\ForumPageBean.kt:31:        return this
/api\models\ForumPageBean.kt:32:    }
/api\models\ForumPageBean.kt:34:    class ZyqDefineBean : BaseBean() {
/api\models\ForumPageBean.kt:35:        var name: String? = null
/api\models\ForumPageBean.kt:36:        var link: String? = null
/api\models\ForumPageBean.kt:38:    }
/api\models\ForumPageBean.kt:40:    class ManagerBean : BaseBean() {
/api\models\ForumPageBean.kt:41:        val id: String? = null
/api\models\ForumPageBean.kt:42:        val name: String? = null
/api\models\ForumPageBean.kt:44:    }
/api\models\ForumPageBean.kt:46:    class ForumBean : BaseBean() {
/api\models\ForumPageBean.kt:47:        var id: String? = null
/api\models\ForumPageBean.kt:48:        var name: String? = null
/api\models\ForumPageBean.kt:50:        @SerializedName("is_like")
/api\models\ForumPageBean.kt:51:        var isLike: String? = null
/api\models\ForumPageBean.kt:53:        @SerializedName("user_level")
/api\models\ForumPageBean.kt:54:        var userLevel: String? = null
/api\models\ForumPageBean.kt:56:        @SerializedName("level_id")
/api\models\ForumPageBean.kt:57:        var levelId: String? = null
/api\models\ForumPageBean.kt:59:        @SerializedName("level_name")
/api\models\ForumPageBean.kt:60:        var levelName: String? = null
/api\models\ForumPageBean.kt:62:        @SerializedName("is_exists")
/api\models\ForumPageBean.kt:63:        var isExists: String? = null
/api\models\ForumPageBean.kt:65:        @SerializedName("cur_score")
/api\models\ForumPageBean.kt:66:        var curScore: String? = null
/api\models\ForumPageBean.kt:68:        @SerializedName("levelup_score")
/api\models\ForumPageBean.kt:69:        var levelUpScore: String? = null
/api\models\ForumPageBean.kt:71:        @SerializedName("member_num")
/api\models\ForumPageBean.kt:72:        var memberNum: String? = null
/api\models\ForumPageBean.kt:74:        @SerializedName("post_num")
/api\models\ForumPageBean.kt:75:        var postNum: String? = null
/api\models\ForumPageBean.kt:76:        var managers: List<ManagerBean>? = null
/api\models\ForumPageBean.kt:77:        var zyqTitle: String? = null
/api\models\ForumPageBean.kt:78:        var zyqDefine: List<ZyqDefineBean>? = null
/api\models\ForumPageBean.kt:79:        var zyqFriend: List<String>? = null
/api\models\ForumPageBean.kt:81:        @SerializedName("good_classify")
/api\models\ForumPageBean.kt:82:        var goodClassify: List<GoodClassifyBean>? = null
/api\models\ForumPageBean.kt:83:        var slogan: String? = null
/api\models\ForumPageBean.kt:84:        var avatar: String? = null
/api\models\ForumPageBean.kt:85:        var tids: String? = null
/api\models\ForumPageBean.kt:87:        @SerializedName("sign_in_info")
/api\models\ForumPageBean.kt:88:        var signInInfo: SignInInfo? = null
/api\models\ForumPageBean.kt:90:        fun setIsLike(isLike: String?): ForumBean {
/api\models\ForumPageBean.kt:91:            this.isLike = isLike
/api\models\ForumPageBean.kt:92:            return this
/api\models\ForumPageBean.kt:93:        }
/api\models\ForumPageBean.kt:95:        fun setIsExists(isExists: String?): ForumBean {
/api\models\ForumPageBean.kt:96:            this.isExists = isExists
/api\models\ForumPageBean.kt:97:            return this
/api\models\ForumPageBean.kt:98:        }
/api\models\ForumPageBean.kt:100:        class SignInInfo {
/api\models\ForumPageBean.kt:101:            @SerializedName("user_info")
/api\models\ForumPageBean.kt:102:            val userInfo: UserInfo? = null
/api\models\ForumPageBean.kt:104:            class UserInfo {
/api\models\ForumPageBean.kt:105:                @SerializedName("is_sign_in")
/api\models\ForumPageBean.kt:106:                var isSignIn: String? = null
/api\models\ForumPageBean.kt:108:                fun setIsSignIn(isSignIn: String?): UserInfo {
/api\models\ForumPageBean.kt:109:                    this.isSignIn = isSignIn
/api\models\ForumPageBean.kt:110:                    return this
/api\models\ForumPageBean.kt:111:                }
/api\models\ForumPageBean.kt:112:            }
/api\models\ForumPageBean.kt:113:        }
/api\models\ForumPageBean.kt:114:    }
/api\models\ForumPageBean.kt:116:    class GoodClassifyBean : BaseBean() {
/api\models\ForumPageBean.kt:117:        @SerializedName("class_id")
/api\models\ForumPageBean.kt:118:        val classId: String? = null
/api\models\ForumPageBean.kt:120:        @SerializedName("class_name")
/api\models\ForumPageBean.kt:121:        val className: String? = null
/api\models\ForumPageBean.kt:123:    }
/api\models\ForumPageBean.kt:125:    class AntiBean : BaseBean() {
/api\models\ForumPageBean.kt:126:        val tbs: String? = null
/api\models\ForumPageBean.kt:128:        @SerializedName("ifpost")
/api\models\ForumPageBean.kt:129:        val ifPost: String? = null
/api\models\ForumPageBean.kt:131:        @SerializedName("forbid_flag")
/api\models\ForumPageBean.kt:132:        val forbidFlag: String? = null
/api\models\ForumPageBean.kt:134:        @SerializedName("forbid_info")
/api\models\ForumPageBean.kt:135:        val forbidInfo: String? = null
/api\models\ForumPageBean.kt:137:    }
/api\models\ForumPageBean.kt:139:    class UserBean : BaseBean() {
/api\models\ForumPageBean.kt:140:        var id: String? = null
/api\models\ForumPageBean.kt:141:        var name: String? = null
/api\models\ForumPageBean.kt:143:        @SerializedName(value = "name_show", alternate = ["nick"])
/api\models\ForumPageBean.kt:144:        var nameShow: String? = null
/api\models\ForumPageBean.kt:146:        @JsonAdapter(PortraitAdapter::class)
/api\models\ForumPageBean.kt:147:        var portrait: String? = null
/api\models\ForumPageBean.kt:149:    }
/api\models\ForumPageBean.kt:151:    class PageBean : BaseBean() {
/api\models\ForumPageBean.kt:152:        @SerializedName("page_size")
/api\models\ForumPageBean.kt:153:        var pageSize: String? = null
/api\models\ForumPageBean.kt:154:        var offset: String? = null
/api\models\ForumPageBean.kt:156:        @SerializedName("current_page")
/api\models\ForumPageBean.kt:157:        var currentPage: String? = null
/api\models\ForumPageBean.kt:159:        @SerializedName("total_count")
/api\models\ForumPageBean.kt:160:        var totalCount: String? = null
/api\models\ForumPageBean.kt:162:        @SerializedName("total_page")
/api\models\ForumPageBean.kt:163:        var totalPage: String? = null
/api\models\ForumPageBean.kt:165:        @SerializedName("has_more")
/api\models\ForumPageBean.kt:166:        var hasMore: String? = null
/api\models\ForumPageBean.kt:168:        @SerializedName("has_prev")
/api\models\ForumPageBean.kt:169:        var hasPrev: String? = null
/api\models\ForumPageBean.kt:171:        @SerializedName("cur_good_id")
/api\models\ForumPageBean.kt:172:        var curGoodId: String? = null
/api\models\ForumPageBean.kt:174:    }
/api\models\ForumPageBean.kt:176:    class ThreadBean : BaseBean() {
/api\models\ForumPageBean.kt:177:        var id: String? = null
/api\models\ForumPageBean.kt:178:            private set
/api\models\ForumPageBean.kt:179:        var tid: String? = null
/api\models\ForumPageBean.kt:180:            private set
/api\models\ForumPageBean.kt:181:        var title: String? = null
/api\models\ForumPageBean.kt:182:            private set
/api\models\ForumPageBean.kt:184:        @SerializedName("reply_num")
/api\models\ForumPageBean.kt:185:        var replyNum: String? = null
/api\models\ForumPageBean.kt:186:            private set
/api\models\ForumPageBean.kt:188:        @SerializedName("view_num")
/api\models\ForumPageBean.kt:189:        var viewNum: String? = null
/api\models\ForumPageBean.kt:190:            private set
/api\models\ForumPageBean.kt:192:        @SerializedName("last_time")
/api\models\ForumPageBean.kt:193:        var lastTime: String? = null
/api\models\ForumPageBean.kt:194:            private set
/api\models\ForumPageBean.kt:196:        @SerializedName("last_time_int")
/api\models\ForumPageBean.kt:197:        var lastTimeInt: String? = null
/api\models\ForumPageBean.kt:198:            private set
/api\models\ForumPageBean.kt:200:        @SerializedName("create_time")
/api\models\ForumPageBean.kt:201:        var createTime: String? = null
/api\models\ForumPageBean.kt:202:            private set
/api\models\ForumPageBean.kt:204:        @SerializedName("agree_num")
/api\models\ForumPageBean.kt:205:        var agreeNum: String? = null
/api\models\ForumPageBean.kt:206:            private set
/api\models\ForumPageBean.kt:208:        @SerializedName("is_top")
/api\models\ForumPageBean.kt:209:        var isTop: String? = null
/api\models\ForumPageBean.kt:210:            private set
/api\models\ForumPageBean.kt:212:        @SerializedName("is_good")
/api\models\ForumPageBean.kt:213:        var isGood: String? = null
/api\models\ForumPageBean.kt:214:            private set
/api\models\ForumPageBean.kt:216:        @SerializedName("is_ntitle")
/api\models\ForumPageBean.kt:217:        var isNoTitle: String? = null
/api\models\ForumPageBean.kt:218:            private set
/api\models\ForumPageBean.kt:220:        @SerializedName("author_id")
/api\models\ForumPageBean.kt:221:        var authorId: String? = null
/api\models\ForumPageBean.kt:222:            private set
/api\models\ForumPageBean.kt:224:        @SerializedName("video_info")
/api\models\ForumPageBean.kt:225:        var videoInfo: VideoInfoBean? = null
/api\models\ForumPageBean.kt:226:            private set
/api\models\ForumPageBean.kt:228:        @JsonAdapter(MediaAdapter::class)
/api\models\ForumPageBean.kt:229:        var media: List<MediaInfoBean>? = null
/api\models\ForumPageBean.kt:230:            private set
/api\models\ForumPageBean.kt:232:        @SerializedName("abstract")
/api\models\ForumPageBean.kt:233:        var abstractBeans: List<AbstractBean>? = null
/api\models\ForumPageBean.kt:234:            private set
/api\models\ForumPageBean.kt:235:        private var abstractString: String? = null
/api\models\ForumPageBean.kt:237:        fun setCreateTime(createTime: String?): ThreadBean {
/api\models\ForumPageBean.kt:238:            this.createTime = createTime
/api\models\ForumPageBean.kt:239:            return this
/api\models\ForumPageBean.kt:240:        }
/api\models\ForumPageBean.kt:242:        fun setMedia(media: List<MediaInfoBean>?): ThreadBean {
/api\models\ForumPageBean.kt:243:            this.media = media
/api\models\ForumPageBean.kt:244:            return this
/api\models\ForumPageBean.kt:245:        }
/api\models\ForumPageBean.kt:247:        fun setVideoInfo(videoInfo: VideoInfoBean?): ThreadBean {
/api\models\ForumPageBean.kt:248:            this.videoInfo = videoInfo
/api\models\ForumPageBean.kt:249:            return this
/api\models\ForumPageBean.kt:250:        }
/api\models\ForumPageBean.kt:252:        fun setId(id: String?): ThreadBean {
/api\models\ForumPageBean.kt:253:            this.id = id
/api\models\ForumPageBean.kt:254:            return this
/api\models\ForumPageBean.kt:255:        }
/api\models\ForumPageBean.kt:257:        fun setTid(tid: String?): ThreadBean {
/api\models\ForumPageBean.kt:258:            this.tid = tid
/api\models\ForumPageBean.kt:259:            return this
/api\models\ForumPageBean.kt:260:        }
/api\models\ForumPageBean.kt:262:        fun setTitle(title: String?): ThreadBean {
/api\models\ForumPageBean.kt:263:            this.title = title
/api\models\ForumPageBean.kt:264:            return this
/api\models\ForumPageBean.kt:265:        }
/api\models\ForumPageBean.kt:267:        fun setReplyNum(replyNum: String?): ThreadBean {
/api\models\ForumPageBean.kt:268:            this.replyNum = replyNum
/api\models\ForumPageBean.kt:269:            return this
/api\models\ForumPageBean.kt:270:        }
/api\models\ForumPageBean.kt:272:        fun setViewNum(viewNum: String?): ThreadBean {
/api\models\ForumPageBean.kt:273:            this.viewNum = viewNum
/api\models\ForumPageBean.kt:274:            return this
/api\models\ForumPageBean.kt:275:        }
/api\models\ForumPageBean.kt:277:        fun setLastTime(lastTime: String?): ThreadBean {
/api\models\ForumPageBean.kt:278:            this.lastTime = lastTime
/api\models\ForumPageBean.kt:279:            return this
/api\models\ForumPageBean.kt:280:        }
/api\models\ForumPageBean.kt:282:        fun setLastTimeInt(lastTimeInt: String?): ThreadBean {
/api\models\ForumPageBean.kt:283:            this.lastTimeInt = lastTimeInt
/api\models\ForumPageBean.kt:284:            return this
/api\models\ForumPageBean.kt:285:        }
/api\models\ForumPageBean.kt:287:        fun setAgreeNum(agreeNum: String?): ThreadBean {
/api\models\ForumPageBean.kt:288:            this.agreeNum = agreeNum
/api\models\ForumPageBean.kt:289:            return this
/api\models\ForumPageBean.kt:290:        }
/api\models\ForumPageBean.kt:292:        fun setIsTop(isTop: String?): ThreadBean {
/api\models\ForumPageBean.kt:293:            this.isTop = isTop
/api\models\ForumPageBean.kt:294:            return this
/api\models\ForumPageBean.kt:295:        }
/api\models\ForumPageBean.kt:297:        fun setIsGood(isGood: String?): ThreadBean {
/api\models\ForumPageBean.kt:298:            this.isGood = isGood
/api\models\ForumPageBean.kt:299:            return this
/api\models\ForumPageBean.kt:300:        }
/api\models\ForumPageBean.kt:302:        fun setIsNoTitle(isNoTitle: String?): ThreadBean {
/api\models\ForumPageBean.kt:303:            this.isNoTitle = isNoTitle
/api\models\ForumPageBean.kt:304:            return this
/api\models\ForumPageBean.kt:305:        }
/api\models\ForumPageBean.kt:307:        fun setAuthorId(authorId: String?): ThreadBean {
/api\models\ForumPageBean.kt:308:            this.authorId = authorId
/api\models\ForumPageBean.kt:309:            return this
/api\models\ForumPageBean.kt:310:        }
/api\models\ForumPageBean.kt:312:        fun getAbstractString(): String? {
/api\models\ForumPageBean.kt:313:            if (abstractString != null) {
/api\models\ForumPageBean.kt:314:                return abstractString
/api\models\ForumPageBean.kt:315:            }
/api\models\ForumPageBean.kt:316:            if (abstractBeans != null) {
/api\models\ForumPageBean.kt:317:                val stringBuilder = StringBuilder()
/api\models\ForumPageBean.kt:318:                for (abstractBean in abstractBeans!!) {
/api\models\ForumPageBean.kt:319:                    stringBuilder.append(abstractBean.text)
/api\models\ForumPageBean.kt:320:                }
/api\models\ForumPageBean.kt:321:                return stringBuilder.toString()
/api\models\ForumPageBean.kt:322:            }
/api\models\ForumPageBean.kt:323:            return null
/api\models\ForumPageBean.kt:324:        }
/api\models\ForumPageBean.kt:326:        fun setAbstractString(abstractString: String?): ThreadBean {
/api\models\ForumPageBean.kt:327:            this.abstractString = abstractString
/api\models\ForumPageBean.kt:328:            return this
/api\models\ForumPageBean.kt:329:        }
/api\models\ForumPageBean.kt:331:        fun setAbstractBeans(abstractBeans: List<AbstractBean>?): ThreadBean {
/api\models\ForumPageBean.kt:332:            this.abstractBeans = abstractBeans
/api\models\ForumPageBean.kt:333:            return this
/api\models\ForumPageBean.kt:334:        }
/api\models\ForumPageBean.kt:335:    }
/api\models\ForumPageBean.kt:337:    class AbstractBean(val type: String, val text: String) : BaseBean()
/api\models\ForumPageBean.kt:339:    class MediaInfoBean : BaseBean() {
/api\models\ForumPageBean.kt:340:        var type: String? = null
/api\models\ForumPageBean.kt:341:            private set
/api\models\ForumPageBean.kt:343:        @SerializedName("show_original_btn")
/api\models\ForumPageBean.kt:344:        var showOriginalBtn: String? = null
/api\models\ForumPageBean.kt:345:            private set
/api\models\ForumPageBean.kt:347:        @SerializedName("is_long_pic")
/api\models\ForumPageBean.kt:348:        var isLongPic: String? = null
/api\models\ForumPageBean.kt:349:            private set
/api\models\ForumPageBean.kt:351:        @SerializedName("is_gif")
/api\models\ForumPageBean.kt:352:        var isGif: String? = null
/api\models\ForumPageBean.kt:353:            private set
/api\models\ForumPageBean.kt:355:        @SerializedName("big_pic")
/api\models\ForumPageBean.kt:356:        var bigPic: String? = null
/api\models\ForumPageBean.kt:357:            private set
/api\models\ForumPageBean.kt:359:        @SerializedName("src_pic")
/api\models\ForumPageBean.kt:360:        var srcPic: String? = null
/api\models\ForumPageBean.kt:361:            private set
/api\models\ForumPageBean.kt:363:        @SerializedName("post_id")
/api\models\ForumPageBean.kt:364:        var postId: String? = null
/api\models\ForumPageBean.kt:365:            private set
/api\models\ForumPageBean.kt:367:        @SerializedName("origin_pic")
/api\models\ForumPageBean.kt:368:        var originPic: String? = null
/api\models\ForumPageBean.kt:369:            private set
/api\models\ForumPageBean.kt:371:        fun setOriginPic(originPic: String?): MediaInfoBean {
/api\models\ForumPageBean.kt:372:            this.originPic = originPic
/api\models\ForumPageBean.kt:373:            return this
/api\models\ForumPageBean.kt:374:        }
/api\models\ForumPageBean.kt:376:        fun setType(type: String?): MediaInfoBean {
/api\models\ForumPageBean.kt:377:            this.type = type
/api\models\ForumPageBean.kt:378:            return this
/api\models\ForumPageBean.kt:379:        }
/api\models\ForumPageBean.kt:381:        fun setShowOriginalBtn(showOriginalBtn: String?): MediaInfoBean {
/api\models\ForumPageBean.kt:382:            this.showOriginalBtn = showOriginalBtn
/api\models\ForumPageBean.kt:383:            return this
/api\models\ForumPageBean.kt:384:        }
/api\models\ForumPageBean.kt:386:        fun setIsLongPic(isLongPic: String?): MediaInfoBean {
/api\models\ForumPageBean.kt:387:            this.isLongPic = isLongPic
/api\models\ForumPageBean.kt:388:            return this
/api\models\ForumPageBean.kt:389:        }
/api\models\ForumPageBean.kt:391:        fun setBigPic(bigPic: String?): MediaInfoBean {
/api\models\ForumPageBean.kt:392:            this.bigPic = bigPic
/api\models\ForumPageBean.kt:393:            return this
/api\models\ForumPageBean.kt:394:        }
/api\models\ForumPageBean.kt:396:        fun setSrcPic(srcPic: String?): MediaInfoBean {
/api\models\ForumPageBean.kt:397:            this.srcPic = srcPic
/api\models\ForumPageBean.kt:398:            return this
/api\models\ForumPageBean.kt:399:        }
/api\models\ForumPageBean.kt:401:        fun setIsGif(isGif: String?): MediaInfoBean {
/api\models\ForumPageBean.kt:402:            this.isGif = isGif
/api\models\ForumPageBean.kt:403:            return this
/api\models\ForumPageBean.kt:404:        }
/api\models\ForumPageBean.kt:406:        fun setPostId(postId: String?): MediaInfoBean {
/api\models\ForumPageBean.kt:407:            this.postId = postId
/api\models\ForumPageBean.kt:408:            return this
/api\models\ForumPageBean.kt:409:        }
/api\models\ForumPageBean.kt:410:    }
/api\models\ForumPageBean.kt:412:    class VideoInfoBean : BaseBean() {
/api\models\ForumPageBean.kt:413:        @SerializedName("video_url")
/api\models\ForumPageBean.kt:414:        var videoUrl: String? = null
/api\models\ForumPageBean.kt:415:            private set
/api\models\ForumPageBean.kt:417:        @SerializedName("thumbnail_url")
/api\models\ForumPageBean.kt:418:        val thumbnailUrl: String? = null
/api\models\ForumPageBean.kt:420:        @SerializedName("origin_video_url")
/api\models\ForumPageBean.kt:421:        val originVideoUrl: String? = null
/api\models\ForumPageBean.kt:423:        fun setVideoUrl(videoUrl: String?): VideoInfoBean {
/api\models\ForumPageBean.kt:424:            this.videoUrl = videoUrl
/api\models\ForumPageBean.kt:425:            return this
/api\models\ForumPageBean.kt:426:        }
/api\models\ForumPageBean.kt:428:    }
/api\models\ForumPageBean.kt:429:}/api\models\ForumRecommend.kt:1:package com.huanchengfly.tieba.post.api.models
/api\models\ForumRecommend.kt:3:import com.google.gson.annotations.SerializedName
/api\models\ForumRecommend.kt:4:import com.huanchengfly.tieba.post.models.BaseBean
/api\models\ForumRecommend.kt:6:data class ForumRecommend(
/api\models\ForumRecommend.kt:7:        @SerializedName("error_code")
/api\models\ForumRecommend.kt:8:        var errorCode: String,
/api\models\ForumRecommend.kt:9:        @SerializedName("error_msg")
/api\models\ForumRecommend.kt:10:        var errorMsg: String,
/api\models\ForumRecommend.kt:11:        @SerializedName("like_forum")
/api\models\ForumRecommend.kt:12:        var likeForum: List<LikeForum>
/api\models\ForumRecommend.kt:13:) : BaseBean() {
/api\models\ForumRecommend.kt:14:    data class LikeForum(
/api\models\ForumRecommend.kt:15:            @SerializedName("forum_id")
/api\models\ForumRecommend.kt:16:            var forumId: String,
/api\models\ForumRecommend.kt:17:            @SerializedName("forum_name")
/api\models\ForumRecommend.kt:18:            var forumName: String,
/api\models\ForumRecommend.kt:19:            @SerializedName("level_id")
/api\models\ForumRecommend.kt:20:            var levelId: String,
/api\models\ForumRecommend.kt:21:            @SerializedName("is_sign")
/api\models\ForumRecommend.kt:22:            var isSign: String,
/api\models\ForumRecommend.kt:23:            var avatar: String
/api\models\ForumRecommend.kt:24:    )
/api\models\ForumRecommend.kt:25:}/api\models\FuckBaiduAPIBean.kt:1:package com.huanchengfly.tieba.post.api.models
/api\models\FuckBaiduAPIBean.kt:3:class FuckBaiduAPIBean {
/api\models\FuckBaiduAPIBean.kt:4:    var status: Int? = null
/api\models\FuckBaiduAPIBean.kt:5:    var message: String? = null
/api\models\FuckBaiduAPIBean.kt:6:}/api\models\LikeForumResultBean.kt:1:package com.huanchengfly.tieba.post.api.models
/api\models\LikeForumResultBean.kt:3:import com.google.gson.annotations.SerializedName
/api\models\LikeForumResultBean.kt:4:import com.huanchengfly.tieba.post.models.BaseBean
/api\models\LikeForumResultBean.kt:6:data class LikeForumResultBean(
/api\models\LikeForumResultBean.kt:7:        @SerializedName("error_code")
/api\models\LikeForumResultBean.kt:8:        var errorCode: String,
/api\models\LikeForumResultBean.kt:9:        var error: ErrorInfo? = null,
/api\models\LikeForumResultBean.kt:10:        var info: Info? = null,
/api\models\LikeForumResultBean.kt:11:        var userPerm: UserPermInfo? = null
/api\models\LikeForumResultBean.kt:12:) : BaseBean() {
/api\models\LikeForumResultBean.kt:13:    data class UserPermInfo(
/api\models\LikeForumResultBean.kt:14:            @SerializedName("level_id")
/api\models\LikeForumResultBean.kt:15:            var levelId: String? = null,
/api\models\LikeForumResultBean.kt:16:            @SerializedName("level_name")
/api\models\LikeForumResultBean.kt:17:            var levelName: String? = null
/api\models\LikeForumResultBean.kt:18:    )
/api\models\LikeForumResultBean.kt:20:    data class Info(
/api\models\LikeForumResultBean.kt:21:            @SerializedName("cur_score")
/api\models\LikeForumResultBean.kt:22:            var curScore: String? = null,
/api\models\LikeForumResultBean.kt:23:            @SerializedName("levelup_score")
/api\models\LikeForumResultBean.kt:24:            var levelUpScore: String? = null,
/api\models\LikeForumResultBean.kt:25:            @SerializedName("level_id")
/api\models\LikeForumResultBean.kt:26:            var levelId: String? = null,
/api\models\LikeForumResultBean.kt:27:            @SerializedName("level_name")
/api\models\LikeForumResultBean.kt:28:            var levelName: String? = null,
/api\models\LikeForumResultBean.kt:29:            @SerializedName("member_sum")
/api\models\LikeForumResultBean.kt:30:            var memberSum: String? = null
/api\models\LikeForumResultBean.kt:31:    )
/api\models\LikeForumResultBean.kt:33:    data class ErrorInfo(
/api\models\LikeForumResultBean.kt:34:            var errno: String? = null,
/api\models\LikeForumResultBean.kt:35:            var errmsg: String? = null,
/api\models\LikeForumResultBean.kt:36:            var usermsg: String? = null
/api\models\LikeForumResultBean.kt:37:    )
/api\models\LikeForumResultBean.kt:38:}/api\models\MessageListBean.kt:1:package com.huanchengfly.tieba.post.api.models
/api\models\MessageListBean.kt:3:import com.google.gson.annotations.JsonAdapter
/api\models\MessageListBean.kt:4:import com.google.gson.annotations.SerializedName
/api\models\MessageListBean.kt:5:import com.huanchengfly.tieba.post.api.adapters.PortraitAdapter
/api\models\MessageListBean.kt:6:import com.huanchengfly.tieba.post.models.BaseBean
/api\models\MessageListBean.kt:8:class MessageListBean : BaseBean() {
/api\models\MessageListBean.kt:9:    @SerializedName("error_code")
/api\models\MessageListBean.kt:10:    val errorCode: String? = null
/api\models\MessageListBean.kt:11:    val time: Long = 0
/api\models\MessageListBean.kt:13:    @SerializedName("reply_list")
/api\models\MessageListBean.kt:14:    val replyList: List<MessageInfoBean>? = null
/api\models\MessageListBean.kt:16:    @SerializedName("at_list")
/api\models\MessageListBean.kt:17:    val atList: List<MessageInfoBean>? = null
/api\models\MessageListBean.kt:18:    val page: PageInfoBean? = null
/api\models\MessageListBean.kt:19:    val message: MessageBean? = null
/api\models\MessageListBean.kt:21:    fun getErrorCode() = Integer.valueOf(errorCode!!)
/api\models\MessageListBean.kt:23:    open inner class UserInfoBean {
/api\models\MessageListBean.kt:24:        val id: String? = null
/api\models\MessageListBean.kt:25:        val name: String? = null
/api\models\MessageListBean.kt:27:        @SerializedName("name_show")
/api\models\MessageListBean.kt:28:        val nameShow: String? = null
/api\models\MessageListBean.kt:30:        @JsonAdapter(PortraitAdapter::class)
/api\models\MessageListBean.kt:31:        val portrait: String? = null
/api\models\MessageListBean.kt:33:    }
/api\models\MessageListBean.kt:35:    inner class ReplyerInfoBean : UserInfoBean() {
/api\models\MessageListBean.kt:36:        @SerializedName("is_friend")
/api\models\MessageListBean.kt:37:        val isFriend: String? = null
/api\models\MessageListBean.kt:39:        @SerializedName("is_fans")
/api\models\MessageListBean.kt:40:        val isFans: String? = null
/api\models\MessageListBean.kt:42:    }
/api\models\MessageListBean.kt:44:    inner class MessageInfoBean {
/api\models\MessageListBean.kt:45:        @SerializedName("is_floor")
/api\models\MessageListBean.kt:46:        val isFloor: String? = null
/api\models\MessageListBean.kt:47:        val title: String? = null
/api\models\MessageListBean.kt:48:        val content: String? = null
/api\models\MessageListBean.kt:50:        @SerializedName("quote_content")
/api\models\MessageListBean.kt:51:        val quoteContent: String? = null
/api\models\MessageListBean.kt:52:        val replyer: ReplyerInfoBean? = null
/api\models\MessageListBean.kt:54:        @SerializedName("quote_user")
/api\models\MessageListBean.kt:55:        val quoteUser: UserInfoBean? = null
/api\models\MessageListBean.kt:57:        @SerializedName("thread_id")
/api\models\MessageListBean.kt:58:        val threadId: String? = null
/api\models\MessageListBean.kt:60:        @SerializedName("post_id")
/api\models\MessageListBean.kt:61:        val postId: String? = null
/api\models\MessageListBean.kt:62:        val time: String? = null
/api\models\MessageListBean.kt:64:        @SerializedName("fname")
/api\models\MessageListBean.kt:65:        val forumName: String? = null
/api\models\MessageListBean.kt:67:        @SerializedName("quote_pid")
/api\models\MessageListBean.kt:68:        val quotePid: String? = null
/api\models\MessageListBean.kt:70:        @SerializedName("thread_type")
/api\models\MessageListBean.kt:71:        val threadType: String? = null
/api\models\MessageListBean.kt:72:        val unread: String? = null
/api\models\MessageListBean.kt:74:    }
/api\models\MessageListBean.kt:76:    inner class MessageBean {
/api\models\MessageListBean.kt:77:        @SerializedName("replyme")
/api\models\MessageListBean.kt:78:        val replyMe: String? = null
/api\models\MessageListBean.kt:80:        @SerializedName("atme")
/api\models\MessageListBean.kt:81:        val atMe: String? = null
/api\models\MessageListBean.kt:82:        val fans: String? = null
/api\models\MessageListBean.kt:83:        val recycle: String? = null
/api\models\MessageListBean.kt:85:        @SerializedName("storethread")
/api\models\MessageListBean.kt:86:        val storeThread: String? = null
/api\models\MessageListBean.kt:88:    }
/api\models\MessageListBean.kt:90:    inner class PageInfoBean {
/api\models\MessageListBean.kt:91:        @SerializedName("current_page")
/api\models\MessageListBean.kt:92:        val currentPage: String? = null
/api\models\MessageListBean.kt:94:        @SerializedName("has_more")
/api\models\MessageListBean.kt:95:        val hasMore: String? = null
/api\models\MessageListBean.kt:97:        @SerializedName("has_prev")
/api\models\MessageListBean.kt:98:        val hasPrev: String? = null
/api\models\MessageListBean.kt:100:    }
/api\models\MessageListBean.kt:101:}/api\models\MsgBean.kt:1:package com.huanchengfly.tieba.post.api.models
/api\models\MsgBean.kt:3:import com.google.gson.annotations.SerializedName
/api\models\MsgBean.kt:4:import com.huanchengfly.tieba.post.models.BaseBean
/api\models\MsgBean.kt:5:import com.huanchengfly.tieba.post.models.ErrorBean
/api\models\MsgBean.kt:7:class MsgBean : ErrorBean() {
/api\models\MsgBean.kt:8:    val message: MessageBean? = null
/api\models\MsgBean.kt:10:    inner class MessageBean : BaseBean() {
/api\models\MsgBean.kt:11:        @SerializedName("replyme")
/api\models\MsgBean.kt:12:        val replyMe: String? = null
/api\models\MsgBean.kt:14:        @SerializedName("atme")
/api\models\MsgBean.kt:15:        val atMe: String? = null
/api\models\MsgBean.kt:16:        val fans: String? = null
/api\models\MsgBean.kt:18:    }
/api\models\MsgBean.kt:19:}/api\models\NewUpdateBean.kt:1:package com.huanchengfly.tieba.post.api.models
/api\models\NewUpdateBean.kt:3:import com.google.gson.annotations.SerializedName
/api\models\NewUpdateBean.kt:5:class NewUpdateBean {
/api\models\NewUpdateBean.kt:6:    @SerializedName("success")
/api\models\NewUpdateBean.kt:7:    val isSuccess: Boolean = false
/api\models\NewUpdateBean.kt:9:    @SerializedName("has_update")
/api\models\NewUpdateBean.kt:10:    val isHasUpdate: Boolean = false
/api\models\NewUpdateBean.kt:12:    @SerializedName("error_code")
/api\models\NewUpdateBean.kt:13:    val errorCode: Int? = null
/api\models\NewUpdateBean.kt:15:    @SerializedName("error_message")
/api\models\NewUpdateBean.kt:16:    val errorMsg: String? = null
/api\models\NewUpdateBean.kt:17:    val result: ResultBean? = null
/api\models\NewUpdateBean.kt:19:    class ResultBean {
/api\models\NewUpdateBean.kt:20:        val isCancelable: Boolean? = null
/api\models\NewUpdateBean.kt:22:        @SerializedName("update_content")
/api\models\NewUpdateBean.kt:23:        val updateContent: List<String>? = null
/api\models\NewUpdateBean.kt:25:        @SerializedName("version_code")
/api\models\NewUpdateBean.kt:26:        val versionCode: Int? = null
/api\models\NewUpdateBean.kt:28:        @SerializedName("version_name")
/api\models\NewUpdateBean.kt:29:        val versionName: String? = null
/api\models\NewUpdateBean.kt:31:        @SerializedName("version_type")
/api\models\NewUpdateBean.kt:32:        val versionType: Int? = null
/api\models\NewUpdateBean.kt:33:        val downloads: List<DownloadBean>? = null
/api\models\NewUpdateBean.kt:34:    }
/api\models\NewUpdateBean.kt:36:    class DownloadBean {
/api\models\NewUpdateBean.kt:37:        val name: String? = null
/api\models\NewUpdateBean.kt:38:        val url: String? = null
/api\models\NewUpdateBean.kt:39:    }
/api\models\NewUpdateBean.kt:40:}
/api\models\ParamBean.kt:1:package com.huanchengfly.tieba.post.api.models
/api\models\ParamBean.kt:3:import java.util.*
/api\models\ParamBean.kt:5:class ParamBean(var name: String, var value: String) {
/api\models\ParamBean.kt:7:    fun setName(name: String): ParamBean {
/api\models\ParamBean.kt:8:        this.name = name
/api\models\ParamBean.kt:9:        return this
/api\models\ParamBean.kt:10:    }
/api\models\ParamBean.kt:12:    fun setValue(value: String): ParamBean {
/api\models\ParamBean.kt:13:        this.value = value
/api\models\ParamBean.kt:14:        return this
/api\models\ParamBean.kt:15:    }
/api\models\ParamBean.kt:17:    override fun equals(other: Any?): Boolean {
/api\models\ParamBean.kt:18:        if (this === other) return true
/api\models\ParamBean.kt:19:        if (other !is ParamBean) return false
/api\models\ParamBean.kt:20:        val paramBean = other
/api\models\ParamBean.kt:21:        return name == paramBean.name &&
/api\models\ParamBean.kt:22:                value == paramBean.value
/api\models\ParamBean.kt:23:    }
/api\models\ParamBean.kt:25:    override fun hashCode(): Int {
/api\models\ParamBean.kt:26:        return Objects.hash(name, value)
/api\models\ParamBean.kt:27:    }
/api\models\ParamBean.kt:29:}/api\models\PersonalizedBean.kt:1:package com.huanchengfly.tieba.post.api.models
/api\models\PersonalizedBean.kt:3:import com.google.gson.annotations.JsonAdapter
/api\models\PersonalizedBean.kt:4:import com.google.gson.annotations.SerializedName
/api\models\PersonalizedBean.kt:5:import com.huanchengfly.tieba.post.api.adapters.MediaAdapter
/api\models\PersonalizedBean.kt:6:import com.huanchengfly.tieba.post.api.adapters.PortraitAdapter
/api\models\PersonalizedBean.kt:7:import com.huanchengfly.tieba.post.api.models.ForumPageBean.*
/api\models\PersonalizedBean.kt:9:class PersonalizedBean {
/api\models\PersonalizedBean.kt:10:    @SerializedName("error_code")
/api\models\PersonalizedBean.kt:11:    val errorCode: String? = null
/api\models\PersonalizedBean.kt:13:    @SerializedName("error_msg")
/api\models\PersonalizedBean.kt:14:    val errorMsg: String? = null
/api\models\PersonalizedBean.kt:16:    @SerializedName("thread_list")
/api\models\PersonalizedBean.kt:17:    val threadList: List<ThreadBean>? = null
/api\models\PersonalizedBean.kt:19:    @SerializedName("thread_personalized")
/api\models\PersonalizedBean.kt:20:    val threadPersonalized: List<ThreadPersonalizedBean>? = null
/api\models\PersonalizedBean.kt:22:    class ThreadPersonalizedBean {
/api\models\PersonalizedBean.kt:23:        val tid: String? = null
/api\models\PersonalizedBean.kt:25:        @SerializedName("dislike_resource")
/api\models\PersonalizedBean.kt:26:        val dislikeResource: List<DislikeResourceBean>? = null
/api\models\PersonalizedBean.kt:28:    }
/api\models\PersonalizedBean.kt:30:    class DislikeResourceBean {
/api\models\PersonalizedBean.kt:31:        val extra: String? = null
/api\models\PersonalizedBean.kt:33:        @SerializedName("dislike_id")
/api\models\PersonalizedBean.kt:34:        val dislikeId: String? = null
/api\models\PersonalizedBean.kt:36:        @SerializedName("dislike_reason")
/api\models\PersonalizedBean.kt:37:        val dislikeReason: String? = null
/api\models\PersonalizedBean.kt:39:    }
/api\models\PersonalizedBean.kt:41:    class ThreadBean {
/api\models\PersonalizedBean.kt:42:        val id: String? = null
/api\models\PersonalizedBean.kt:43:        val tid: String? = null
/api\models\PersonalizedBean.kt:44:        val title: String? = null
/api\models\PersonalizedBean.kt:45:        val author: AuthorBean? = null
/api\models\PersonalizedBean.kt:47:        @SerializedName("reply_num")
/api\models\PersonalizedBean.kt:48:        val replyNum: String? = null
/api\models\PersonalizedBean.kt:50:        @SerializedName("view_num")
/api\models\PersonalizedBean.kt:51:        val viewNum: String? = null
/api\models\PersonalizedBean.kt:53:        @SerializedName("last_time")
/api\models\PersonalizedBean.kt:54:        val lastTime: String? = null
/api\models\PersonalizedBean.kt:56:        @SerializedName("last_time_int")
/api\models\PersonalizedBean.kt:57:        val lastTimeInt: String? = null
/api\models\PersonalizedBean.kt:59:        @SerializedName("agree_num")
/api\models\PersonalizedBean.kt:60:        val agreeNum: String? = null
/api\models\PersonalizedBean.kt:62:        @SerializedName("is_top")
/api\models\PersonalizedBean.kt:63:        val isTop: String? = null
/api\models\PersonalizedBean.kt:65:        @SerializedName("is_good")
/api\models\PersonalizedBean.kt:66:        val isGood: String? = null
/api\models\PersonalizedBean.kt:68:        @SerializedName("is_ntitle")
/api\models\PersonalizedBean.kt:69:        val isNoTitle: String? = null
/api\models\PersonalizedBean.kt:71:        @SerializedName("fid")
/api\models\PersonalizedBean.kt:72:        val forumId: String? = null
/api\models\PersonalizedBean.kt:74:        @SerializedName("fname")
/api\models\PersonalizedBean.kt:75:        val forumName: String? = null
/api\models\PersonalizedBean.kt:77:        @SerializedName("video_info")
/api\models\PersonalizedBean.kt:78:        val videoInfo: VideoInfoBean? = null
/api\models\PersonalizedBean.kt:80:        @JsonAdapter(MediaAdapter::class)
/api\models\PersonalizedBean.kt:81:        val media: List<MediaInfoBean>? = null
/api\models\PersonalizedBean.kt:83:        @SerializedName("abstract")
/api\models\PersonalizedBean.kt:84:        val abstractBeans: List<AbstractBean>? = null
/api\models\PersonalizedBean.kt:85:        var threadPersonalizedBean: ThreadPersonalizedBean? = null
/api\models\PersonalizedBean.kt:87:    }
/api\models\PersonalizedBean.kt:89:    class AuthorBean {
/api\models\PersonalizedBean.kt:90:        val id: String? = null
/api\models\PersonalizedBean.kt:91:        val name: String? = null
/api\models\PersonalizedBean.kt:93:        @SerializedName("name_show")
/api\models\PersonalizedBean.kt:94:        val nameShow: String? = null
/api\models\PersonalizedBean.kt:96:        @JsonAdapter(PortraitAdapter::class)
/api\models\PersonalizedBean.kt:97:        val portrait: String? = null
/api\models\PersonalizedBean.kt:99:        @SerializedName("has_concerned")
/api\models\PersonalizedBean.kt:100:        val hasConcerned: String? = null
/api\models\PersonalizedBean.kt:102:    }
/api\models\PersonalizedBean.kt:104:    class MediaNumBean {
/api\models\PersonalizedBean.kt:105:        val pic: String? = null
/api\models\PersonalizedBean.kt:106:    }
/api\models\PersonalizedBean.kt:107:}/api\models\PicPageBean.kt:1:package com.huanchengfly.tieba.post.api.models
/api\models\PicPageBean.kt:3:import com.google.gson.annotations.SerializedName
/api\models\PicPageBean.kt:4:import com.huanchengfly.tieba.post.models.BaseBean
/api\models\PicPageBean.kt:6:class PicPageBean : BaseBean() {
/api\models\PicPageBean.kt:7:    @SerializedName("error_code")
/api\models\PicPageBean.kt:8:    val errorCode: String? = null
/api\models\PicPageBean.kt:9:    val forum: ForumBean? = null
/api\models\PicPageBean.kt:11:    @SerializedName("pic_amount")
/api\models\PicPageBean.kt:12:    val picAmount: String? = null
/api\models\PicPageBean.kt:14:    @SerializedName("pic_list")
/api\models\PicPageBean.kt:15:    val picList: List<PicBean>? = null
/api\models\PicPageBean.kt:17:    class ForumBean {
/api\models\PicPageBean.kt:18:        val name: String? = null
/api\models\PicPageBean.kt:19:        val id: String? = null
/api\models\PicPageBean.kt:21:    }
/api\models\PicPageBean.kt:23:    class PicBean {
/api\models\PicPageBean.kt:24:        @SerializedName("overall_index")
/api\models\PicPageBean.kt:25:        val overAllIndex: String? = null
/api\models\PicPageBean.kt:26:        val img: ImgBean? = null
/api\models\PicPageBean.kt:28:        @SerializedName("post_id")
/api\models\PicPageBean.kt:29:        val postId: String? = null
/api\models\PicPageBean.kt:31:        @SerializedName("user_id")
/api\models\PicPageBean.kt:32:        val userId: String? = null
/api\models\PicPageBean.kt:34:        @SerializedName("user_name")
/api\models\PicPageBean.kt:35:        val userName: String? = null
/api\models\PicPageBean.kt:37:    }
/api\models\PicPageBean.kt:39:    class ImgBean {
/api\models\PicPageBean.kt:40:        val original: ImgInfoBean? = null
/api\models\PicPageBean.kt:41:        val medium: ImgInfoBean? = null
/api\models\PicPageBean.kt:42:        val screen: ImgInfoBean? = null
/api\models\PicPageBean.kt:44:    }
/api\models\PicPageBean.kt:46:    class ImgInfoBean {
/api\models\PicPageBean.kt:47:        val id: String? = null
/api\models\PicPageBean.kt:48:        val width: String? = null
/api\models\PicPageBean.kt:49:        val height: String? = null
/api\models\PicPageBean.kt:50:        val size: String? = null
/api\models\PicPageBean.kt:51:        val format: String? = null
/api\models\PicPageBean.kt:53:        @SerializedName("waterurl")
/api\models\PicPageBean.kt:54:        val waterUrl: String? = null
/api\models\PicPageBean.kt:56:        @SerializedName("big_cdn_src")
/api\models\PicPageBean.kt:57:        val bigCdnSrc: String? = null
/api\models\PicPageBean.kt:58:        val url: String? = null
/api\models\PicPageBean.kt:60:        @SerializedName("original_src")
/api\models\PicPageBean.kt:61:        val originalSrc: String? = null
/api\models\PicPageBean.kt:63:    }
/api\models\PicPageBean.kt:64:}/api\models\PicToIdJsonBean.kt:1:package com.huanchengfly.tieba.post.api.models
/api\models\PicToIdJsonBean.kt:3:import com.google.gson.annotations.SerializedName
/api\models\PicToIdJsonBean.kt:4:import com.huanchengfly.tieba.post.models.ErrorBean
/api\models\PicToIdJsonBean.kt:6:class PicToIdJsonBean : ErrorBean() {
/api\models\PicToIdJsonBean.kt:7:    val pics: List<PicBean>? = null
/api\models\PicToIdJsonBean.kt:9:    class PicBean {
/api\models\PicToIdJsonBean.kt:10:        @SerializedName("pic_id")
/api\models\PicToIdJsonBean.kt:11:        val picId: String? = null
/api\models\PicToIdJsonBean.kt:12:        val width: String? = null
/api\models\PicToIdJsonBean.kt:13:        val height: String? = null
/api\models\PicToIdJsonBean.kt:15:    }
/api\models\PicToIdJsonBean.kt:16:}/api\models\ProfileBean.kt:1:package com.huanchengfly.tieba.post.api.models
/api\models\ProfileBean.kt:3:import com.google.gson.annotations.SerializedName
/api\models\ProfileBean.kt:4:import com.huanchengfly.tieba.post.models.BaseBean
/api\models\ProfileBean.kt:6:class ProfileBean : BaseBean() {
/api\models\ProfileBean.kt:7:    @SerializedName("error_code")
/api\models\ProfileBean.kt:8:    val errorCode: String? = null
/api\models\ProfileBean.kt:10:    @SerializedName("error_msg")
/api\models\ProfileBean.kt:11:    val errorMsg: String? = null
/api\models\ProfileBean.kt:12:    val anti: AntiBean? = null
/api\models\ProfileBean.kt:13:    val user: UserBean? = null
/api\models\ProfileBean.kt:15:    class AntiBean {
/api\models\ProfileBean.kt:16:        val tbs: String? = null
/api\models\ProfileBean.kt:17:    }
/api\models\ProfileBean.kt:19:    class UserBean {
/api\models\ProfileBean.kt:20:        val id: String? = null
/api\models\ProfileBean.kt:21:        val name: String? = null
/api\models\ProfileBean.kt:23:        @SerializedName("name_show")
/api\models\ProfileBean.kt:24:        val nameShow: String? = null
/api\models\ProfileBean.kt:25:        val portrait: String? = null
/api\models\ProfileBean.kt:26:        val intro: String? = null
/api\models\ProfileBean.kt:27:        val sex: String? = null
/api\models\ProfileBean.kt:29:        @SerializedName("post_num")
/api\models\ProfileBean.kt:30:        val postNum: String? = null
/api\models\ProfileBean.kt:32:        @SerializedName("repost_num")
/api\models\ProfileBean.kt:33:        val repostNum: String? = null
/api\models\ProfileBean.kt:35:        @SerializedName("thread_num")
/api\models\ProfileBean.kt:36:        val threadNum: String? = null
/api\models\ProfileBean.kt:38:        @SerializedName("tb_age")
/api\models\ProfileBean.kt:39:        val tbAge: String? = null
/api\models\ProfileBean.kt:41:        @SerializedName("my_like_num")
/api\models\ProfileBean.kt:42:        val myLikeNum: String? = null
/api\models\ProfileBean.kt:44:        @SerializedName("like_forum_num")
/api\models\ProfileBean.kt:45:        val likeForumNum: String? = null
/api\models\ProfileBean.kt:47:        @SerializedName("concern_num")
/api\models\ProfileBean.kt:48:        val concernNum: String? = null
/api\models\ProfileBean.kt:50:        @SerializedName("fans_num")
/api\models\ProfileBean.kt:51:        val fansNum: String? = null
/api\models\ProfileBean.kt:53:        @SerializedName("has_concerned")
/api\models\ProfileBean.kt:54:        var hasConcerned: String? = null
/api\models\ProfileBean.kt:55:            private set
/api\models\ProfileBean.kt:57:        @SerializedName("is_fans")
/api\models\ProfileBean.kt:58:        val isFans: String? = null
/api\models\ProfileBean.kt:60:        fun setHasConcerned(hasConcerned: String?): UserBean {
/api\models\ProfileBean.kt:61:            this.hasConcerned = hasConcerned
/api\models\ProfileBean.kt:62:            return this
/api\models\ProfileBean.kt:63:        }
/api\models\ProfileBean.kt:65:    }
/api\models\ProfileBean.kt:66:}/api\models\ReplyResultBean.kt:1:package com.huanchengfly.tieba.post.api.models
/api\models\ReplyResultBean.kt:3:import com.google.gson.annotations.SerializedName
/api\models\ReplyResultBean.kt:5:class ReplyResultBean {
/api\models\ReplyResultBean.kt:6:    @SerializedName("error_code")
/api\models\ReplyResultBean.kt:7:    var errorCode: String? = null
/api\models\ReplyResultBean.kt:9:    @SerializedName("error_msg")
/api\models\ReplyResultBean.kt:10:    var errorMsg: String? = null
/api\models\ReplyResultBean.kt:11:    var info: InfoBean? = null
/api\models\ReplyResultBean.kt:12:    val pid: String? = null
/api\models\ReplyResultBean.kt:14:    inner class InfoBean {
/api\models\ReplyResultBean.kt:15:        @SerializedName("need_vcode")
/api\models\ReplyResultBean.kt:16:        val needVcode: String? = null
/api\models\ReplyResultBean.kt:18:        @SerializedName("vcode_md5")
/api\models\ReplyResultBean.kt:19:        val vcodeMD5: String? = null
/api\models\ReplyResultBean.kt:21:        @SerializedName("vcode_pic_url")
/api\models\ReplyResultBean.kt:22:        val vcodePicUrl: String? = null
/api\models\ReplyResultBean.kt:24:        @SerializedName("pass_token")
/api\models\ReplyResultBean.kt:25:        val passToken: String? = null
/api\models\ReplyResultBean.kt:27:    }
/api\models\ReplyResultBean.kt:28:}/api\models\SearchForumBean.kt:1:package com.huanchengfly.tieba.post.api.models
/api\models\SearchForumBean.kt:3:import com.google.gson.annotations.JsonAdapter
/api\models\SearchForumBean.kt:4:import com.google.gson.annotations.SerializedName
/api\models\SearchForumBean.kt:5:import com.huanchengfly.tieba.post.api.adapters.ExactMatchAdapter
/api\models\SearchForumBean.kt:6:import com.huanchengfly.tieba.post.api.adapters.ForumFuzzyMatchAdapter
/api\models\SearchForumBean.kt:7:import com.huanchengfly.tieba.post.models.BaseBean
/api\models\SearchForumBean.kt:9:class SearchForumBean : BaseBean() {
/api\models\SearchForumBean.kt:10:    @SerializedName("no")
/api\models\SearchForumBean.kt:11:    val errorCode: Int? = null
/api\models\SearchForumBean.kt:13:    @SerializedName("error")
/api\models\SearchForumBean.kt:14:    val errorMsg: String? = null
/api\models\SearchForumBean.kt:15:    val data: DataBean? = null
/api\models\SearchForumBean.kt:17:    class ExactForumInfoBean : ForumInfoBean() {
/api\models\SearchForumBean.kt:18:        val intro: String? = null
/api\models\SearchForumBean.kt:19:        val slogan: String? = null
/api\models\SearchForumBean.kt:21:        @SerializedName("is_jiucuo")
/api\models\SearchForumBean.kt:22:        val isJiucuo: Int? = null
/api\models\SearchForumBean.kt:24:    }
/api\models\SearchForumBean.kt:26:    open class ForumInfoBean {
/api\models\SearchForumBean.kt:27:        @SerializedName("forum_id")
/api\models\SearchForumBean.kt:28:        var forumId: Int? = null
/api\models\SearchForumBean.kt:29:            private set
/api\models\SearchForumBean.kt:31:        @SerializedName("forum_name")
/api\models\SearchForumBean.kt:32:        var forumName: String? = null
/api\models\SearchForumBean.kt:33:            private set
/api\models\SearchForumBean.kt:35:        @SerializedName("forum_name_show")
/api\models\SearchForumBean.kt:36:        var forumNameShow: String? = null
/api\models\SearchForumBean.kt:37:            private set
/api\models\SearchForumBean.kt:38:        var avatar: String? = null
/api\models\SearchForumBean.kt:39:            private set
/api\models\SearchForumBean.kt:41:        @SerializedName("post_num")
/api\models\SearchForumBean.kt:42:        var postNum: String? = null
/api\models\SearchForumBean.kt:43:            private set
/api\models\SearchForumBean.kt:45:        @SerializedName("concern_num")
/api\models\SearchForumBean.kt:46:        var concernNum: String? = null
/api\models\SearchForumBean.kt:47:            private set
/api\models\SearchForumBean.kt:49:        @SerializedName("has_concerned")
/api\models\SearchForumBean.kt:50:        var hasConcerned: Int? = null
/api\models\SearchForumBean.kt:51:            private set
/api\models\SearchForumBean.kt:53:        fun setForumId(forumId: Int): ForumInfoBean {
/api\models\SearchForumBean.kt:54:            this.forumId = forumId
/api\models\SearchForumBean.kt:55:            return this
/api\models\SearchForumBean.kt:56:        }
/api\models\SearchForumBean.kt:58:        fun setForumName(forumName: String?): ForumInfoBean {
/api\models\SearchForumBean.kt:59:            this.forumName = forumName
/api\models\SearchForumBean.kt:60:            return this
/api\models\SearchForumBean.kt:61:        }
/api\models\SearchForumBean.kt:63:        fun setForumNameShow(forumNameShow: String?): ForumInfoBean {
/api\models\SearchForumBean.kt:64:            this.forumNameShow = forumNameShow
/api\models\SearchForumBean.kt:65:            return this
/api\models\SearchForumBean.kt:66:        }
/api\models\SearchForumBean.kt:68:        fun setAvatar(avatar: String?): ForumInfoBean {
/api\models\SearchForumBean.kt:69:            this.avatar = avatar
/api\models\SearchForumBean.kt:70:            return this
/api\models\SearchForumBean.kt:71:        }
/api\models\SearchForumBean.kt:73:        fun setPostNum(postNum: String?): ForumInfoBean {
/api\models\SearchForumBean.kt:74:            this.postNum = postNum
/api\models\SearchForumBean.kt:75:            return this
/api\models\SearchForumBean.kt:76:        }
/api\models\SearchForumBean.kt:78:        fun setConcernNum(concernNum: String?): ForumInfoBean {
/api\models\SearchForumBean.kt:79:            this.concernNum = concernNum
/api\models\SearchForumBean.kt:80:            return this
/api\models\SearchForumBean.kt:81:        }
/api\models\SearchForumBean.kt:83:        fun setHasConcerned(hasConcerned: Int): ForumInfoBean {
/api\models\SearchForumBean.kt:84:            this.hasConcerned = hasConcerned
/api\models\SearchForumBean.kt:85:            return this
/api\models\SearchForumBean.kt:86:        }
/api\models\SearchForumBean.kt:87:    }
/api\models\SearchForumBean.kt:89:    inner class DataBean {
/api\models\SearchForumBean.kt:90:        @SerializedName("has_more")
/api\models\SearchForumBean.kt:91:        val hasMore = 0
/api\models\SearchForumBean.kt:93:        @SerializedName("pn")
/api\models\SearchForumBean.kt:94:        val page = 0
/api\models\SearchForumBean.kt:96:        @JsonAdapter(ForumFuzzyMatchAdapter::class)
/api\models\SearchForumBean.kt:97:        val fuzzyMatch: List<ForumInfoBean>? = null
/api\models\SearchForumBean.kt:99:        @JsonAdapter(ExactMatchAdapter::class)
/api\models\SearchForumBean.kt:100:        val exactMatch: ExactForumInfoBean? = null
/api\models\SearchForumBean.kt:102:    }
/api\models\SearchForumBean.kt:103:}/api\models\SearchPostBean.kt:1:package com.huanchengfly.tieba.post.api.models
/api\models\SearchPostBean.kt:3:import com.google.gson.annotations.SerializedName
/api\models\SearchPostBean.kt:5:class SearchPostBean {
/api\models\SearchPostBean.kt:6:    @SerializedName("error_code")
/api\models\SearchPostBean.kt:7:    val errorCode: String? = null
/api\models\SearchPostBean.kt:9:    @SerializedName("error_msg")
/api\models\SearchPostBean.kt:10:    val errorMsg: String? = null
/api\models\SearchPostBean.kt:11:    val page: PageBean? = null
/api\models\SearchPostBean.kt:13:    @SerializedName("post_list")
/api\models\SearchPostBean.kt:14:    val postList: List<ThreadInfoBean>? = null
/api\models\SearchPostBean.kt:16:    class PageBean {
/api\models\SearchPostBean.kt:17:        @SerializedName("page_size")
/api\models\SearchPostBean.kt:18:        val pageSize: String? = null
/api\models\SearchPostBean.kt:19:        val offset: String? = null
/api\models\SearchPostBean.kt:21:        @SerializedName("current_page")
/api\models\SearchPostBean.kt:22:        val currentPage: String? = null
/api\models\SearchPostBean.kt:24:        @SerializedName("total_count")
/api\models\SearchPostBean.kt:25:        val totalCount: String? = null
/api\models\SearchPostBean.kt:27:        @SerializedName("total_page")
/api\models\SearchPostBean.kt:28:        val totalPage: String? = null
/api\models\SearchPostBean.kt:30:        @SerializedName("has_more")
/api\models\SearchPostBean.kt:31:        val hasMore: String? = null
/api\models\SearchPostBean.kt:33:        @SerializedName("has_prev")
/api\models\SearchPostBean.kt:34:        val hasPrev: String? = null
/api\models\SearchPostBean.kt:36:    }
/api\models\SearchPostBean.kt:38:    class ThreadInfoBean {
/api\models\SearchPostBean.kt:39:        val tid: String? = null
/api\models\SearchPostBean.kt:40:        val pid: String? = null
/api\models\SearchPostBean.kt:41:        val title: String? = null
/api\models\SearchPostBean.kt:42:        val content: String? = null
/api\models\SearchPostBean.kt:43:        val time: String? = null
/api\models\SearchPostBean.kt:45:        @SerializedName("fname")
/api\models\SearchPostBean.kt:46:        val forumName: String? = null
/api\models\SearchPostBean.kt:47:        val author: AuthorBean? = null
/api\models\SearchPostBean.kt:49:    }
/api\models\SearchPostBean.kt:51:    class AuthorBean {
/api\models\SearchPostBean.kt:52:        val name: String? = null
/api\models\SearchPostBean.kt:54:        @SerializedName("name_show")
/api\models\SearchPostBean.kt:55:        val nameShow: String? = null
/api\models\SearchPostBean.kt:57:    }
/api\models\SearchPostBean.kt:58:}/api\models\SearchThreadBean.kt:1:package com.huanchengfly.tieba.post.api.models
/api\models\SearchThreadBean.kt:3:import com.google.gson.annotations.SerializedName
/api\models\SearchThreadBean.kt:5:class SearchThreadBean {
/api\models\SearchThreadBean.kt:6:    @SerializedName("no")
/api\models\SearchThreadBean.kt:7:    val errorCode: Int? = null
/api\models\SearchThreadBean.kt:9:    @SerializedName("error")
/api\models\SearchThreadBean.kt:10:    val errorMsg: String? = null
/api\models\SearchThreadBean.kt:11:    val data: DataBean? = null
/api\models\SearchThreadBean.kt:13:    inner class DataBean {
/api\models\SearchThreadBean.kt:14:        @SerializedName("has_more")
/api\models\SearchThreadBean.kt:15:        val hasMore: Int? = null
/api\models\SearchThreadBean.kt:17:        @SerializedName("current_page")
/api\models\SearchThreadBean.kt:18:        val currentPage: Int? = null
/api\models\SearchThreadBean.kt:20:        @SerializedName("post_list")
/api\models\SearchThreadBean.kt:21:        val postList: List<ThreadInfoBean>? = null
/api\models\SearchThreadBean.kt:23:    }
/api\models\SearchThreadBean.kt:25:    inner class ThreadInfoBean {
/api\models\SearchThreadBean.kt:26:        val tid: String? = null
/api\models\SearchThreadBean.kt:27:        val pid: String? = null
/api\models\SearchThreadBean.kt:28:        val title: String? = null
/api\models\SearchThreadBean.kt:29:        val content: String? = null
/api\models\SearchThreadBean.kt:30:        val time: String? = null
/api\models\SearchThreadBean.kt:32:        @SerializedName("post_num")
/api\models\SearchThreadBean.kt:33:        val postNum: String? = null
/api\models\SearchThreadBean.kt:35:        @SerializedName("forum_name")
/api\models\SearchThreadBean.kt:36:        val forumName: String? = null
/api\models\SearchThreadBean.kt:37:        val user: UserInfoBean? = null
/api\models\SearchThreadBean.kt:38:        val type: Int? = null
/api\models\SearchThreadBean.kt:40:    }
/api\models\SearchThreadBean.kt:42:    inner class UserInfoBean {
/api\models\SearchThreadBean.kt:43:        @SerializedName("user_name")
/api\models\SearchThreadBean.kt:44:        val userName: String? = null
/api\models\SearchThreadBean.kt:46:        @SerializedName("user_id")
/api\models\SearchThreadBean.kt:47:        val userId: String? = null
/api\models\SearchThreadBean.kt:48:        val portrait: String? = null
/api\models\SearchThreadBean.kt:50:    }
/api\models\SearchThreadBean.kt:51:}/api\models\SearchUserBean.kt:1:package com.huanchengfly.tieba.post.api.models
/api\models\SearchUserBean.kt:3:import com.google.gson.annotations.JsonAdapter
/api\models\SearchUserBean.kt:4:import com.google.gson.annotations.SerializedName
/api\models\SearchUserBean.kt:5:import com.huanchengfly.tieba.post.api.adapters.UserExactMatchAdapter
/api\models\SearchUserBean.kt:6:import com.huanchengfly.tieba.post.api.adapters.UserFuzzyMatchAdapter
/api\models\SearchUserBean.kt:7:import com.huanchengfly.tieba.post.models.BaseBean
/api\models\SearchUserBean.kt:9:class SearchUserBean : BaseBean() {
/api\models\SearchUserBean.kt:10:    @SerializedName("no")
/api\models\SearchUserBean.kt:11:    val errorCode: Int? = null
/api\models\SearchUserBean.kt:13:    @SerializedName("error")
/api\models\SearchUserBean.kt:14:    val errorMsg: String? = null
/api\models\SearchUserBean.kt:15:    val data: SearchUserDataBean? = null
/api\models\SearchUserBean.kt:17:    class SearchUserDataBean {
/api\models\SearchUserBean.kt:18:        @SerializedName("pn")
/api\models\SearchUserBean.kt:19:        val pageNum: Int? = null
/api\models\SearchUserBean.kt:21:        @SerializedName("has_more")
/api\models\SearchUserBean.kt:22:        val hasMore: Int? = null
/api\models\SearchUserBean.kt:24:        @JsonAdapter(UserExactMatchAdapter::class)
/api\models\SearchUserBean.kt:25:        val exactMatch: UserBean? = null
/api\models\SearchUserBean.kt:27:        @JsonAdapter(UserFuzzyMatchAdapter::class)
/api\models\SearchUserBean.kt:28:        val fuzzyMatch: List<UserBean>? = null
/api\models\SearchUserBean.kt:30:    }
/api\models\SearchUserBean.kt:32:    class UserBean {
/api\models\SearchUserBean.kt:33:        var id: String? = null
/api\models\SearchUserBean.kt:34:            private set
/api\models\SearchUserBean.kt:35:        var intro: String? = null
/api\models\SearchUserBean.kt:36:            private set
/api\models\SearchUserBean.kt:38:        @SerializedName("user_nickname")
/api\models\SearchUserBean.kt:39:        var userNickname: String? = null
/api\models\SearchUserBean.kt:40:            private set
/api\models\SearchUserBean.kt:41:        var name: String? = null
/api\models\SearchUserBean.kt:42:            private set
/api\models\SearchUserBean.kt:43:        var portrait: String? = null
/api\models\SearchUserBean.kt:44:            private set
/api\models\SearchUserBean.kt:46:        @SerializedName("fans_num")
/api\models\SearchUserBean.kt:47:        var fansNum: String? = null
/api\models\SearchUserBean.kt:48:            private set
/api\models\SearchUserBean.kt:50:        @SerializedName("has_concerned")
/api\models\SearchUserBean.kt:51:        var hasConcerned = 0
/api\models\SearchUserBean.kt:52:            private set
/api\models\SearchUserBean.kt:54:        fun setId(id: String?): UserBean {
/api\models\SearchUserBean.kt:55:            this.id = id
/api\models\SearchUserBean.kt:56:            return this
/api\models\SearchUserBean.kt:57:        }
/api\models\SearchUserBean.kt:59:        fun setIntro(intro: String?): UserBean {
/api\models\SearchUserBean.kt:60:            this.intro = intro
/api\models\SearchUserBean.kt:61:            return this
/api\models\SearchUserBean.kt:62:        }
/api\models\SearchUserBean.kt:64:        fun setUserNickname(userNickname: String?): UserBean {
/api\models\SearchUserBean.kt:65:            this.userNickname = userNickname
/api\models\SearchUserBean.kt:66:            return this
/api\models\SearchUserBean.kt:67:        }
/api\models\SearchUserBean.kt:69:        fun setName(name: String?): UserBean {
/api\models\SearchUserBean.kt:70:            this.name = name
/api\models\SearchUserBean.kt:71:            return this
/api\models\SearchUserBean.kt:72:        }
/api\models\SearchUserBean.kt:74:        fun setPortrait(portrait: String?): UserBean {
/api\models\SearchUserBean.kt:75:            this.portrait = portrait
/api\models\SearchUserBean.kt:76:            return this
/api\models\SearchUserBean.kt:77:        }
/api\models\SearchUserBean.kt:79:        fun setFansNum(fansNum: String?): UserBean {
/api\models\SearchUserBean.kt:80:            this.fansNum = fansNum
/api\models\SearchUserBean.kt:81:            return this
/api\models\SearchUserBean.kt:82:        }
/api\models\SearchUserBean.kt:84:        fun setHasConcerned(hasConcerned: Int): UserBean {
/api\models\SearchUserBean.kt:85:            this.hasConcerned = hasConcerned
/api\models\SearchUserBean.kt:86:            return this
/api\models\SearchUserBean.kt:87:        }
/api\models\SearchUserBean.kt:88:    }
/api\models\SearchUserBean.kt:89:}/api\models\SignResultBean.kt:1:package com.huanchengfly.tieba.post.api.models
/api\models\SignResultBean.kt:3:import com.google.gson.annotations.SerializedName
/api\models\SignResultBean.kt:4:import com.huanchengfly.tieba.post.models.BaseBean
/api\models\SignResultBean.kt:5:import com.huanchengfly.tieba.post.utils.GsonUtil
/api\models\SignResultBean.kt:7:class SignResultBean : BaseBean() {
/api\models\SignResultBean.kt:8:    @SerializedName("user_info")
/api\models\SignResultBean.kt:9:    val userInfo: UserInfo? = null
/api\models\SignResultBean.kt:11:    @SerializedName("error_code")
/api\models\SignResultBean.kt:12:    val errorCode: String? = null
/api\models\SignResultBean.kt:14:    fun getErrorCode() = Integer.valueOf(errorCode!!)
/api\models\SignResultBean.kt:16:    @SerializedName("error_msg")
/api\models\SignResultBean.kt:17:    val errorMsg: String? = null
/api\models\SignResultBean.kt:18:    val time: Long? = null
/api\models\SignResultBean.kt:20:    override fun toString(): String {
/api\models\SignResultBean.kt:21:        return GsonUtil.getGson().toJson(this)
/api\models\SignResultBean.kt:22:    }
/api\models\SignResultBean.kt:24:    inner class UserInfo : BaseBean() {
/api\models\SignResultBean.kt:25:        @SerializedName("user_id")
/api\models\SignResultBean.kt:26:        val userId: String? = null
/api\models\SignResultBean.kt:28:        @SerializedName("is_sign_in")
/api\models\SignResultBean.kt:29:        val isSignIn: String? = null
/api\models\SignResultBean.kt:31:        @SerializedName("user_sign_rank")
/api\models\SignResultBean.kt:32:        val userSignRank: String? = null
/api\models\SignResultBean.kt:34:        @SerializedName("sign_time")
/api\models\SignResultBean.kt:35:        val signTime: String? = null
/api\models\SignResultBean.kt:37:        @SerializedName("sign_bonus_point")
/api\models\SignResultBean.kt:38:        val signBonusPoint: String? = null
/api\models\SignResultBean.kt:40:        @SerializedName("level_name")
/api\models\SignResultBean.kt:41:        val levelName: String? = null
/api\models\SignResultBean.kt:43:        @SerializedName("levelup_score")
/api\models\SignResultBean.kt:44:        val levelUpScore: String? = null
/api\models\SignResultBean.kt:46:    }
/api\models\SignResultBean.kt:47:}/api\models\SubFloorListBean.kt:1:package com.huanchengfly.tieba.post.api.models
/api\models\SubFloorListBean.kt:3:import com.google.gson.annotations.SerializedName
/api\models\SubFloorListBean.kt:5:data class SubFloorListBean(
/api\models\SubFloorListBean.kt:6:        @SerializedName("error_code")
/api\models\SubFloorListBean.kt:7:        val errorCode: String,
/api\models\SubFloorListBean.kt:8:        @SerializedName("error_msg")
/api\models\SubFloorListBean.kt:9:        val errorMsg: String,
/api\models\SubFloorListBean.kt:10:        @SerializedName("subpost_list")
/api\models\SubFloorListBean.kt:11:        val subPostList: List<PostInfo>?,
/api\models\SubFloorListBean.kt:12:        val post: PostInfo?,
/api\models\SubFloorListBean.kt:13:        val page: PageInfo?,
/api\models\SubFloorListBean.kt:14:        val forum: ForumInfo?,
/api\models\SubFloorListBean.kt:15:        val anti: AntiInfo?,
/api\models\SubFloorListBean.kt:16:        val thread: ThreadInfo?
/api\models\SubFloorListBean.kt:17:) {
/api\models\SubFloorListBean.kt:19:    data class PostInfo(
/api\models\SubFloorListBean.kt:20:            val id: String,
/api\models\SubFloorListBean.kt:21:            val title: String,
/api\models\SubFloorListBean.kt:22:            val floor: String,
/api\models\SubFloorListBean.kt:23:            val time: String,
/api\models\SubFloorListBean.kt:24:            val content: List<ThreadContentBean.ContentBean>,
/api\models\SubFloorListBean.kt:25:            val author: ThreadContentBean.UserInfoBean
/api\models\SubFloorListBean.kt:26:    )
/api\models\SubFloorListBean.kt:28:    data class ThreadInfo(
/api\models\SubFloorListBean.kt:29:            val id: String,
/api\models\SubFloorListBean.kt:30:            val title: String,
/api\models\SubFloorListBean.kt:31:            val author: ThreadContentBean.UserInfoBean,
/api\models\SubFloorListBean.kt:32:            @SerializedName("reply_num")
/api\models\SubFloorListBean.kt:33:            val replyNum: String,
/api\models\SubFloorListBean.kt:34:            @SerializedName("collect_status")
/api\models\SubFloorListBean.kt:35:            val collectStatus: String
/api\models\SubFloorListBean.kt:36:    )
/api\models\SubFloorListBean.kt:38:    data class AntiInfo(
/api\models\SubFloorListBean.kt:39:            val tbs: String
/api\models\SubFloorListBean.kt:40:    )
/api\models\SubFloorListBean.kt:42:    data class PageInfo(
/api\models\SubFloorListBean.kt:43:            @SerializedName("current_page")
/api\models\SubFloorListBean.kt:44:            val currentPage: String,
/api\models\SubFloorListBean.kt:45:            @SerializedName("total_page")
/api\models\SubFloorListBean.kt:46:            val totalPage: String,
/api\models\SubFloorListBean.kt:47:            @SerializedName("total_count")
/api\models\SubFloorListBean.kt:48:            val totalCount: String,
/api\models\SubFloorListBean.kt:49:            @SerializedName("page_size")
/api\models\SubFloorListBean.kt:50:            val pageSize: String
/api\models\SubFloorListBean.kt:51:    )
/api\models\SubFloorListBean.kt:53:    data class ForumInfo(
/api\models\SubFloorListBean.kt:54:            val id: String,
/api\models\SubFloorListBean.kt:55:            val name: String,
/api\models\SubFloorListBean.kt:56:            @SerializedName("is_exists")
/api\models\SubFloorListBean.kt:57:            val isExists: String,
/api\models\SubFloorListBean.kt:58:            @SerializedName("first_class")
/api\models\SubFloorListBean.kt:59:            val firstClass: String,
/api\models\SubFloorListBean.kt:60:            @SerializedName("second_class")
/api\models\SubFloorListBean.kt:61:            val secondClass: String,
/api\models\SubFloorListBean.kt:62:            @SerializedName("is_liked")
/api\models\SubFloorListBean.kt:63:            val isLiked: String
/api\models\SubFloorListBean.kt:64:    )
/api\models\SubFloorListBean.kt:65:}/api\models\ThreadContentBean.kt:1:package com.huanchengfly.tieba.post.api.models
/api\models\ThreadContentBean.kt:3:import com.google.gson.annotations.JsonAdapter
/api\models\ThreadContentBean.kt:4:import com.google.gson.annotations.SerializedName
/api\models\ThreadContentBean.kt:5:import com.huanchengfly.tieba.post.api.adapters.PortraitAdapter
/api\models\ThreadContentBean.kt:6:import com.huanchengfly.tieba.post.api.adapters.SubPostListAdapter
/api\models\ThreadContentBean.kt:7:import com.huanchengfly.tieba.post.models.BaseBean
/api\models\ThreadContentBean.kt:9:class ThreadContentBean : BaseBean() {
/api\models\ThreadContentBean.kt:10:    @SerializedName("error_code")
/api\models\ThreadContentBean.kt:11:    val errorCode: String? = null
/api\models\ThreadContentBean.kt:13:    @SerializedName("error_msg")
/api\models\ThreadContentBean.kt:14:    val errorMsg: String? = null
/api\models\ThreadContentBean.kt:16:    @SerializedName("post_list")
/api\models\ThreadContentBean.kt:17:    val postList: List<PostListItemBean>? = null
/api\models\ThreadContentBean.kt:18:    val page: PageInfoBean? = null
/api\models\ThreadContentBean.kt:19:    val user: UserInfoBean? = null
/api\models\ThreadContentBean.kt:20:    val forum: ForumInfoBean? = null
/api\models\ThreadContentBean.kt:22:    @SerializedName("display_forum")
/api\models\ThreadContentBean.kt:23:    val displayForum: ForumInfoBean? = null
/api\models\ThreadContentBean.kt:25:    @SerializedName("has_floor")
/api\models\ThreadContentBean.kt:26:    val hasFloor: String? = null
/api\models\ThreadContentBean.kt:28:    @SerializedName("is_new_url")
/api\models\ThreadContentBean.kt:29:    val isNewUrl: String? = null
/api\models\ThreadContentBean.kt:31:    @SerializedName("user_list")
/api\models\ThreadContentBean.kt:32:    val userList: List<UserInfoBean>? = null
/api\models\ThreadContentBean.kt:33:    val thread: ThreadBean? = null
/api\models\ThreadContentBean.kt:34:    val anti: AntiInfoBean? = null
/api\models\ThreadContentBean.kt:36:    class AntiInfoBean {
/api\models\ThreadContentBean.kt:37:        val tbs: String? = null
/api\models\ThreadContentBean.kt:38:    }
/api\models\ThreadContentBean.kt:40:    class ThreadInfoBean {
/api\models\ThreadContentBean.kt:41:        @SerializedName("thread_id")
/api\models\ThreadContentBean.kt:42:        val threadId: String? = null
/api\models\ThreadContentBean.kt:44:        @SerializedName("first_post_id")
/api\models\ThreadContentBean.kt:45:        val firstPostId: String? = null
/api\models\ThreadContentBean.kt:47:    }
/api\models\ThreadContentBean.kt:49:    class AgreeBean {
/api\models\ThreadContentBean.kt:50:        @SerializedName("agree_num")
/api\models\ThreadContentBean.kt:51:        val agreeNum: String? = null
/api\models\ThreadContentBean.kt:53:        @SerializedName("disagree_num")
/api\models\ThreadContentBean.kt:54:        val disagreeNum: String? = null
/api\models\ThreadContentBean.kt:56:        @SerializedName("diff_agree_num")
/api\models\ThreadContentBean.kt:57:        val diffAgreeNum: String? = null
/api\models\ThreadContentBean.kt:59:        @SerializedName("has_agree")
/api\models\ThreadContentBean.kt:60:        val hasAgree: String? = null
/api\models\ThreadContentBean.kt:62:    }
/api\models\ThreadContentBean.kt:64:    class ThreadBean {
/api\models\ThreadContentBean.kt:65:        val id: String? = null
/api\models\ThreadContentBean.kt:66:        val title: String? = null
/api\models\ThreadContentBean.kt:68:        @SerializedName("thread_info")
/api\models\ThreadContentBean.kt:69:        val threadInfo: ThreadInfoBean? = null
/api\models\ThreadContentBean.kt:70:        val author: UserInfoBean? = null
/api\models\ThreadContentBean.kt:72:        @SerializedName("reply_num")
/api\models\ThreadContentBean.kt:73:        val replyNum: String? = null
/api\models\ThreadContentBean.kt:75:        @SerializedName("collect_status")
/api\models\ThreadContentBean.kt:76:        val collectStatus: String? = null
/api\models\ThreadContentBean.kt:78:        @SerializedName("agree_num")
/api\models\ThreadContentBean.kt:79:        val agreeNum: String? = null
/api\models\ThreadContentBean.kt:81:        @SerializedName("post_id")
/api\models\ThreadContentBean.kt:82:        val postId: String? = null
/api\models\ThreadContentBean.kt:84:        @SerializedName("thread_id")
/api\models\ThreadContentBean.kt:85:        val threadId: String? = null
/api\models\ThreadContentBean.kt:86:        val agree: AgreeBean? = null
/api\models\ThreadContentBean.kt:88:    }
/api\models\ThreadContentBean.kt:90:    class UserInfoBean {
/api\models\ThreadContentBean.kt:91:        @SerializedName("is_login")
/api\models\ThreadContentBean.kt:92:        val isLogin: String? = null
/api\models\ThreadContentBean.kt:93:        val id: String? = null
/api\models\ThreadContentBean.kt:94:        val name: String? = null
/api\models\ThreadContentBean.kt:96:        @SerializedName("name_show")
/api\models\ThreadContentBean.kt:97:        val nameShow: String? = null
/api\models\ThreadContentBean.kt:99:        @JsonAdapter(PortraitAdapter::class)
/api\models\ThreadContentBean.kt:100:        val portrait: String? = null
/api\models\ThreadContentBean.kt:101:        val type: String? = null
/api\models\ThreadContentBean.kt:103:        @SerializedName("level_id")
/api\models\ThreadContentBean.kt:104:        val levelId: String? = null
/api\models\ThreadContentBean.kt:106:        @SerializedName("is_like")
/api\models\ThreadContentBean.kt:107:        val isLike: String? = null
/api\models\ThreadContentBean.kt:109:        @SerializedName("is_manager")
/api\models\ThreadContentBean.kt:110:        val isManager: String? = null
/api\models\ThreadContentBean.kt:112:    }
/api\models\ThreadContentBean.kt:114:    class ForumInfoBean : BaseBean() {
/api\models\ThreadContentBean.kt:115:        val id: String? = null
/api\models\ThreadContentBean.kt:116:        val name: String? = null
/api\models\ThreadContentBean.kt:118:        @SerializedName("is_exists")
/api\models\ThreadContentBean.kt:119:        val isExists: String? = null
/api\models\ThreadContentBean.kt:120:        val avatar: String? = null
/api\models\ThreadContentBean.kt:122:        @SerializedName("first_class")
/api\models\ThreadContentBean.kt:123:        val firstClass: String? = null
/api\models\ThreadContentBean.kt:125:        @SerializedName("second_class")
/api\models\ThreadContentBean.kt:126:        val secondClass: String? = null
/api\models\ThreadContentBean.kt:128:        @SerializedName("is_liked")
/api\models\ThreadContentBean.kt:129:        val isLiked: String? = null
/api\models\ThreadContentBean.kt:131:        @SerializedName("is_brand_forum")
/api\models\ThreadContentBean.kt:132:        val isBrandForum: String? = null
/api\models\ThreadContentBean.kt:134:    }
/api\models\ThreadContentBean.kt:136:    class PageInfoBean {
/api\models\ThreadContentBean.kt:137:        val offset: String? = null
/api\models\ThreadContentBean.kt:139:        @SerializedName("current_page")
/api\models\ThreadContentBean.kt:140:        val currentPage: String? = null
/api\models\ThreadContentBean.kt:142:        @SerializedName("total_page")
/api\models\ThreadContentBean.kt:143:        val totalPage: String? = null
/api\models\ThreadContentBean.kt:145:        @SerializedName("has_more")
/api\models\ThreadContentBean.kt:146:        val hasMore: String? = null
/api\models\ThreadContentBean.kt:148:        @SerializedName("has_prev")
/api\models\ThreadContentBean.kt:149:        val hasPrev: String? = null
/api\models\ThreadContentBean.kt:151:    }
/api\models\ThreadContentBean.kt:153:    class PostListItemBean {
/api\models\ThreadContentBean.kt:154:        val id: String? = null
/api\models\ThreadContentBean.kt:155:        val title: String? = null
/api\models\ThreadContentBean.kt:156:        val floor: String? = null
/api\models\ThreadContentBean.kt:157:        val time: String? = null
/api\models\ThreadContentBean.kt:158:        val content: List<ContentBean>? = null
/api\models\ThreadContentBean.kt:160:        @SerializedName("author_id")
/api\models\ThreadContentBean.kt:161:        val authorId: String? = null
/api\models\ThreadContentBean.kt:162:        val author: UserInfoBean? = null
/api\models\ThreadContentBean.kt:164:        @SerializedName("sub_post_number")
/api\models\ThreadContentBean.kt:165:        val subPostNumber: String? = null
/api\models\ThreadContentBean.kt:167:        @SerializedName("sub_post_list")
/api\models\ThreadContentBean.kt:168:        @JsonAdapter(SubPostListAdapter::class)
/api\models\ThreadContentBean.kt:169:        val subPostList: SubPostListBean? = null
/api\models\ThreadContentBean.kt:171:    }
/api\models\ThreadContentBean.kt:173:    class SubPostListBean {
/api\models\ThreadContentBean.kt:174:        val pid: String? = null
/api\models\ThreadContentBean.kt:176:        @SerializedName("sub_post_list")
/api\models\ThreadContentBean.kt:177:        val subPostList: List<PostListItemBean>? = null
/api\models\ThreadContentBean.kt:179:    }
/api\models\ThreadContentBean.kt:181:    class ContentBean {
/api\models\ThreadContentBean.kt:182:        val type: String? = null
/api\models\ThreadContentBean.kt:183:        var text: String? = null
/api\models\ThreadContentBean.kt:184:            private set
/api\models\ThreadContentBean.kt:185:        val link: String? = null
/api\models\ThreadContentBean.kt:186:        val src: String? = null
/api\models\ThreadContentBean.kt:187:        val uid: String? = null
/api\models\ThreadContentBean.kt:189:        @SerializedName("origin_src")
/api\models\ThreadContentBean.kt:190:        val originSrc: String? = null
/api\models\ThreadContentBean.kt:192:        @SerializedName("cdn_src")
/api\models\ThreadContentBean.kt:193:        val cdnSrc: String? = null
/api\models\ThreadContentBean.kt:195:        @SerializedName("cdn_src_active")
/api\models\ThreadContentBean.kt:196:        val cdnSrcActive: String? = null
/api\models\ThreadContentBean.kt:198:        @SerializedName("big_cdn_src")
/api\models\ThreadContentBean.kt:199:        val bigCdnSrc: String? = null
/api\models\ThreadContentBean.kt:201:        @SerializedName("during_time")
/api\models\ThreadContentBean.kt:202:        val duringTime: String? = null
/api\models\ThreadContentBean.kt:203:        val bsize: String? = null
/api\models\ThreadContentBean.kt:204:        val c: String? = null
/api\models\ThreadContentBean.kt:205:        val width: String? = null
/api\models\ThreadContentBean.kt:206:        val height: String? = null
/api\models\ThreadContentBean.kt:208:        @SerializedName("is_long_pic")
/api\models\ThreadContentBean.kt:209:        val isLongPic: String? = null
/api\models\ThreadContentBean.kt:211:        @SerializedName("voice_md5")
/api\models\ThreadContentBean.kt:212:        val voiceMD5: String? = null
/api\models\ThreadContentBean.kt:214:        fun setText(text: String?): ContentBean {
/api\models\ThreadContentBean.kt:215:            this.text = text
/api\models\ThreadContentBean.kt:216:            return this
/api\models\ThreadContentBean.kt:217:        }
/api\models\ThreadContentBean.kt:219:    }
/api\models\ThreadContentBean.kt:220:}/api\models\ThreadStoreBean.kt:1:package com.huanchengfly.tieba.post.api.models
/api\models\ThreadStoreBean.kt:3:import com.google.gson.annotations.SerializedName
/api\models\ThreadStoreBean.kt:4:import com.huanchengfly.tieba.post.models.BaseBean
/api\models\ThreadStoreBean.kt:6:data class ThreadStoreBean(
/api\models\ThreadStoreBean.kt:7:        @SerializedName("error_code")
/api\models\ThreadStoreBean.kt:8:        val errorCode: String? = null,
/api\models\ThreadStoreBean.kt:9:        val error: ErrorInfo? = null,
/api\models\ThreadStoreBean.kt:10:        @SerializedName("store_thread")
/api\models\ThreadStoreBean.kt:11:        val storeThread: List<ThreadStoreInfo>? = null
/api\models\ThreadStoreBean.kt:12:) : BaseBean() {
/api\models\ThreadStoreBean.kt:13:    data class ThreadStoreInfo(
/api\models\ThreadStoreBean.kt:14:            @SerializedName("thread_id")
/api\models\ThreadStoreBean.kt:15:            val threadId: String,
/api\models\ThreadStoreBean.kt:16:            val title: String,
/api\models\ThreadStoreBean.kt:17:            @SerializedName("forum_name")
/api\models\ThreadStoreBean.kt:18:            val forumName: String,
/api\models\ThreadStoreBean.kt:19:            val author: AuthorInfo,
/api\models\ThreadStoreBean.kt:20:            val media: List<MediaInfo>,
/api\models\ThreadStoreBean.kt:21:            @SerializedName("is_deleted")
/api\models\ThreadStoreBean.kt:22:            val isDeleted: String,
/api\models\ThreadStoreBean.kt:23:            @SerializedName("last_time")
/api\models\ThreadStoreBean.kt:24:            val lastTime: String,
/api\models\ThreadStoreBean.kt:25:            val type: String,
/api\models\ThreadStoreBean.kt:26:            val status: String,
/api\models\ThreadStoreBean.kt:27:            @SerializedName("max_pid")
/api\models\ThreadStoreBean.kt:28:            val maxPid: String,
/api\models\ThreadStoreBean.kt:29:            @SerializedName("min_pid")
/api\models\ThreadStoreBean.kt:30:            val minPid: String,
/api\models\ThreadStoreBean.kt:31:            @SerializedName("mark_pid")
/api\models\ThreadStoreBean.kt:32:            val markPid: String,
/api\models\ThreadStoreBean.kt:33:            @SerializedName("mark_status")
/api\models\ThreadStoreBean.kt:34:            val markStatus: String,
/api\models\ThreadStoreBean.kt:35:            @SerializedName("post_no")
/api\models\ThreadStoreBean.kt:36:            val postNo: String,
/api\models\ThreadStoreBean.kt:37:            @SerializedName("post_no_msg")
/api\models\ThreadStoreBean.kt:38:            val postNoMsg: String,
/api\models\ThreadStoreBean.kt:39:            val count: String
/api\models\ThreadStoreBean.kt:40:    ) : BaseBean()
/api\models\ThreadStoreBean.kt:42:    data class MediaInfo(
/api\models\ThreadStoreBean.kt:43:            val type: String? = null,
/api\models\ThreadStoreBean.kt:44:            @SerializedName("small_Pic")
/api\models\ThreadStoreBean.kt:45:            val smallPic: String? = null,
/api\models\ThreadStoreBean.kt:46:            @SerializedName("big_pic")
/api\models\ThreadStoreBean.kt:47:            val bigPic: String? = null,
/api\models\ThreadStoreBean.kt:48:            val width: String? = null,
/api\models\ThreadStoreBean.kt:49:            val height: String? = null
/api\models\ThreadStoreBean.kt:50:    ) : BaseBean()
/api\models\ThreadStoreBean.kt:52:    data class AuthorInfo(
/api\models\ThreadStoreBean.kt:53:            @SerializedName("lz_uid")
/api\models\ThreadStoreBean.kt:54:            val lzUid: String? = null,
/api\models\ThreadStoreBean.kt:55:            val name: String? = null,
/api\models\ThreadStoreBean.kt:56:            @SerializedName("name_show")
/api\models\ThreadStoreBean.kt:57:            val nameShow: String? = null,
/api\models\ThreadStoreBean.kt:58:            @SerializedName("user_portrait")
/api\models\ThreadStoreBean.kt:59:            val userPortrait: String? = null
/api\models\ThreadStoreBean.kt:61:    ) : BaseBean()
/api\models\ThreadStoreBean.kt:63:    data class ErrorInfo(
/api\models\ThreadStoreBean.kt:64:            @SerializedName("errno")
/api\models\ThreadStoreBean.kt:65:            val errorCode: String? = null,
/api\models\ThreadStoreBean.kt:66:            @SerializedName("errmsg")
/api\models\ThreadStoreBean.kt:67:            val errorMsg: String? = null
/api\models\ThreadStoreBean.kt:68:    ) : BaseBean()
/api\models\ThreadStoreBean.kt:69:}
/api\models\UpdateInfoBean.kt:1:package com.huanchengfly.tieba.post.api.models
/api\models\UpdateInfoBean.kt:3:import com.google.gson.annotations.SerializedName
/api\models\UpdateInfoBean.kt:4:import com.huanchengfly.tieba.post.models.BaseBean
/api\models\UpdateInfoBean.kt:6:class UpdateInfoBean : BaseBean() {
/api\models\UpdateInfoBean.kt:7:    @SerializedName("gruops")
/api\models\UpdateInfoBean.kt:8:    val groups: List<GroupInfo>? = null
/api\models\UpdateInfoBean.kt:9:    val supportment: List<SupportmentBean>? = null
/api\models\UpdateInfoBean.kt:11:    class SupportmentBean {
/api\models\UpdateInfoBean.kt:12:        val id: String? = null
/api\models\UpdateInfoBean.kt:13:        val title: String? = null
/api\models\UpdateInfoBean.kt:14:        val subtitle: String? = null
/api\models\UpdateInfoBean.kt:16:        @SerializedName("expire_time")
/api\models\UpdateInfoBean.kt:17:        val expireTime: Long = 0
/api\models\UpdateInfoBean.kt:18:        val icon: IconBean? = null
/api\models\UpdateInfoBean.kt:19:        val action: ActionBean? = null
/api\models\UpdateInfoBean.kt:21:        class IconBean {
/api\models\UpdateInfoBean.kt:22:            val type = 0
/api\models\UpdateInfoBean.kt:23:            val id: String? = null
/api\models\UpdateInfoBean.kt:24:            val url: String? = null
/api\models\UpdateInfoBean.kt:26:            companion object {
/api\models\UpdateInfoBean.kt:27:                const val TYPE_RESOURCE = 0
/api\models\UpdateInfoBean.kt:28:                const val TYPE_IMAGE = 1
/api\models\UpdateInfoBean.kt:29:            }
/api\models\UpdateInfoBean.kt:30:        }
/api\models\UpdateInfoBean.kt:32:        class ActionBean {
/api\models\UpdateInfoBean.kt:33:            val type = 0
/api\models\UpdateInfoBean.kt:34:            val url: String? = null
/api\models\UpdateInfoBean.kt:36:            companion object {
/api\models\UpdateInfoBean.kt:37:                const val TYPE_LINK = 0
/api\models\UpdateInfoBean.kt:38:                const val TYPE_IMAGE = 1
/api\models\UpdateInfoBean.kt:39:            }
/api\models\UpdateInfoBean.kt:40:        }
/api\models\UpdateInfoBean.kt:41:    }
/api\models\UpdateInfoBean.kt:43:    class WebDiskBean {
/api\models\UpdateInfoBean.kt:44:        val link: String? = null
/api\models\UpdateInfoBean.kt:45:        val name: String? = null
/api\models\UpdateInfoBean.kt:46:        val password: String? = null
/api\models\UpdateInfoBean.kt:48:    }
/api\models\UpdateInfoBean.kt:50:    inner class GroupInfo {
/api\models\UpdateInfoBean.kt:51:        val type: String? = null
/api\models\UpdateInfoBean.kt:52:        val name: String? = null
/api\models\UpdateInfoBean.kt:54:        @SerializedName("qq_group_key")
/api\models\UpdateInfoBean.kt:55:        val qGroupKey: String? = null
/api\models\UpdateInfoBean.kt:57:        @SerializedName("qq_group_number")
/api\models\UpdateInfoBean.kt:58:        val qGroupNumber: String? = null
/api\models\UpdateInfoBean.kt:59:        val link: String? = null
/api\models\UpdateInfoBean.kt:60:        val isEnabled = false
/api\models\UpdateInfoBean.kt:62:    }
/api\models\UpdateInfoBean.kt:63:}/api\models\web\ForumBean.java:1:package com.huanchengfly.tieba.post.api.models.web;
/api\models\web\ForumBean.java:3:import com.google.gson.annotations.JsonAdapter;
/api\models\web\ForumBean.java:4:import com.google.gson.annotations.SerializedName;
/api\models\web\ForumBean.java:5:import com.huanchengfly.tieba.post.api.adapters.PortraitAdapter;
/api\models\web\ForumBean.java:6:import com.huanchengfly.tieba.post.api.adapters.VideoInfoAdapter;
/api\models\web\ForumBean.java:7:import com.huanchengfly.tieba.post.api.adapters.ZyqDefineAdapter;
/api\models\web\ForumBean.java:8:import com.huanchengfly.tieba.post.api.models.ForumPageBean;
/api\models\web\ForumBean.java:9:import com.huanchengfly.tieba.post.models.BaseBean;
/api\models\web\ForumBean.java:11:import java.util.List;
/api\models\web\ForumBean.java:13:public class ForumBean extends WebBaseBean<ForumBean.ForumDataBean> {
/api\models\web\ForumBean.java:14:    public static class ForumDataBean {
/api\models\web\ForumBean.java:15:        @SerializedName("frs_data")
/api\models\web\ForumBean.java:16:        private FrsDataBean frsData;
/api\models\web\ForumBean.java:18:        public FrsDataBean getFrsData() {
/api\models\web\ForumBean.java:19:            return frsData;
/api\models\web\ForumBean.java:20:        }
/api\models\web\ForumBean.java:21:    }
/api\models\web\ForumBean.java:23:    public static class TaskInfoBean {
/api\models\web\ForumBean.java:24:    }
/api\models\web\ForumBean.java:26:    public static class FrsThreadBean extends BaseBean {
/api\models\web\ForumBean.java:27:        private String id;
/api\models\web\ForumBean.java:28:        private String tid;
/api\models\web\ForumBean.java:29:        private String title;
/api\models\web\ForumBean.java:30:        @SerializedName("reply_num")
/api\models\web\ForumBean.java:31:        private String replyNum;
/api\models\web\ForumBean.java:32:        @SerializedName("task_info")
/api\models\web\ForumBean.java:33:        private TaskInfoBean taskInfo;
/api\models\web\ForumBean.java:34:        @SerializedName("view_num")
/api\models\web\ForumBean.java:35:        private String viewNum;
/api\models\web\ForumBean.java:36:        @SerializedName("last_time")
/api\models\web\ForumBean.java:37:        private String lastTime;
/api\models\web\ForumBean.java:38:        @SerializedName("last_time_int")
/api\models\web\ForumBean.java:39:        private String lastTimeInt;
/api\models\web\ForumBean.java:40:        @SerializedName("create_time")
/api\models\web\ForumBean.java:41:        private String createTime;
/api\models\web\ForumBean.java:42:        @SerializedName("is_top")
/api\models\web\ForumBean.java:43:        private String isTop;
/api\models\web\ForumBean.java:44:        @SerializedName("is_good")
/api\models\web\ForumBean.java:45:        private String isGood;
/api\models\web\ForumBean.java:46:        @SerializedName("is_livepost")
/api\models\web\ForumBean.java:47:        private String isLivePost;
/api\models\web\ForumBean.java:48:        @SerializedName("is_ntitle")
/api\models\web\ForumBean.java:49:        private String isNoTitle;
/api\models\web\ForumBean.java:50:        @SerializedName(value = "author", alternate = {"user"})
/api\models\web\ForumBean.java:51:        private ForumPageBean.UserBean author;
/api\models\web\ForumBean.java:52:        @JsonAdapter(VideoInfoAdapter.class)
/api\models\web\ForumBean.java:53:        @SerializedName("video_info")
/api\models\web\ForumBean.java:54:        private ForumPageBean.VideoInfoBean videoInfo;
/api\models\web\ForumBean.java:55:        private List<MediaBean> media;
/api\models\web\ForumBean.java:56:        @SerializedName("abstract")
/api\models\web\ForumBean.java:57:        private String abstracts;
/api\models\web\ForumBean.java:58:        private AgreeBean agree;
/api\models\web\ForumBean.java:60:        public AgreeBean getAgree() {
/api\models\web\ForumBean.java:61:            return agree;
/api\models\web\ForumBean.java:62:        }
/api\models\web\ForumBean.java:64:        public String getCreateTime() {
/api\models\web\ForumBean.java:65:            return createTime;
/api\models\web\ForumBean.java:66:        }
/api\models\web\ForumBean.java:68:        public String getAbstracts() {
/api\models\web\ForumBean.java:69:            return abstracts;
/api\models\web\ForumBean.java:70:        }
/api\models\web\ForumBean.java:72:        public List<MediaBean> getMedia() {
/api\models\web\ForumBean.java:73:            return media;
/api\models\web\ForumBean.java:74:        }
/api\models\web\ForumBean.java:76:        public ForumPageBean.VideoInfoBean getVideoInfo() {
/api\models\web\ForumBean.java:77:            return videoInfo;
/api\models\web\ForumBean.java:78:        }
/api\models\web\ForumBean.java:80:        public String getId() {
/api\models\web\ForumBean.java:81:            return id;
/api\models\web\ForumBean.java:82:        }
/api\models\web\ForumBean.java:84:        public String getTid() {
/api\models\web\ForumBean.java:85:            return tid;
/api\models\web\ForumBean.java:86:        }
/api\models\web\ForumBean.java:88:        public String getTitle() {
/api\models\web\ForumBean.java:89:            return title;
/api\models\web\ForumBean.java:90:        }
/api\models\web\ForumBean.java:92:        public String getReplyNum() {
/api\models\web\ForumBean.java:93:            return replyNum;
/api\models\web\ForumBean.java:94:        }
/api\models\web\ForumBean.java:96:        public String getViewNum() {
/api\models\web\ForumBean.java:97:            return viewNum;
/api\models\web\ForumBean.java:98:        }
/api\models\web\ForumBean.java:100:        public String getLastTime() {
/api\models\web\ForumBean.java:101:            return lastTime;
/api\models\web\ForumBean.java:102:        }
/api\models\web\ForumBean.java:104:        public String getLastTimeInt() {
/api\models\web\ForumBean.java:105:            return lastTimeInt;
/api\models\web\ForumBean.java:106:        }
/api\models\web\ForumBean.java:108:        public String getIsTop() {
/api\models\web\ForumBean.java:109:            return isTop;
/api\models\web\ForumBean.java:110:        }
/api\models\web\ForumBean.java:112:        public String getIsGood() {
/api\models\web\ForumBean.java:113:            return isGood;
/api\models\web\ForumBean.java:114:        }
/api\models\web\ForumBean.java:116:        public String getIsNoTitle() {
/api\models\web\ForumBean.java:117:            return isNoTitle;
/api\models\web\ForumBean.java:118:        }
/api\models\web\ForumBean.java:120:        public ForumPageBean.UserBean getAuthor() {
/api\models\web\ForumBean.java:121:            return author;
/api\models\web\ForumBean.java:122:        }
/api\models\web\ForumBean.java:124:        public static class AgreeBean {
/api\models\web\ForumBean.java:125:            @SerializedName("agree_num")
/api\models\web\ForumBean.java:126:            private int agreeNum;
/api\models\web\ForumBean.java:128:            public int getAgreeNum() {
/api\models\web\ForumBean.java:129:                return agreeNum;
/api\models\web\ForumBean.java:130:            }
/api\models\web\ForumBean.java:131:        }
/api\models\web\ForumBean.java:132:    }
/api\models\web\ForumBean.java:134:    public static class MediaBean {
/api\models\web\ForumBean.java:135:        @SerializedName("big_pic")
/api\models\web\ForumBean.java:136:        private String bigPic;
/api\models\web\ForumBean.java:137:        @SerializedName("is_gif")
/api\models\web\ForumBean.java:138:        private boolean isGif;
/api\models\web\ForumBean.java:139:        private int height;
/api\models\web\ForumBean.java:140:        private int width;
/api\models\web\ForumBean.java:141:        @SerializedName("small_pic")
/api\models\web\ForumBean.java:142:        private String smallPic;
/api\models\web\ForumBean.java:143:        @SerializedName("static_img")
/api\models\web\ForumBean.java:144:        private String staticImg;
/api\models\web\ForumBean.java:145:        private String type;
/api\models\web\ForumBean.java:146:        @SerializedName("water_pic")
/api\models\web\ForumBean.java:147:        private String waterPic;
/api\models\web\ForumBean.java:149:        public String getBigPic() {
/api\models\web\ForumBean.java:150:            return bigPic;
/api\models\web\ForumBean.java:151:        }
/api\models\web\ForumBean.java:153:        public boolean isGif() {
/api\models\web\ForumBean.java:154:            return isGif;
/api\models\web\ForumBean.java:155:        }
/api\models\web\ForumBean.java:157:        public int getHeight() {
/api\models\web\ForumBean.java:158:            return height;
/api\models\web\ForumBean.java:159:        }
/api\models\web\ForumBean.java:161:        public int getWidth() {
/api\models\web\ForumBean.java:162:            return width;
/api\models\web\ForumBean.java:163:        }
/api\models\web\ForumBean.java:165:        public String getSmallPic() {
/api\models\web\ForumBean.java:166:            return smallPic;
/api\models\web\ForumBean.java:167:        }
/api\models\web\ForumBean.java:169:        public String getStaticImg() {
/api\models\web\ForumBean.java:170:            return staticImg;
/api\models\web\ForumBean.java:171:        }
/api\models\web\ForumBean.java:173:        public String getType() {
/api\models\web\ForumBean.java:174:            return type;
/api\models\web\ForumBean.java:175:        }
/api\models\web\ForumBean.java:177:        public String getWaterPic() {
/api\models\web\ForumBean.java:178:            return waterPic;
/api\models\web\ForumBean.java:179:        }
/api\models\web\ForumBean.java:180:    }
/api\models\web\ForumBean.java:182:    public static class FrsDataBean {
/api\models\web\ForumBean.java:183:        private ForumPageBean.AntiBean anti;
/api\models\web\ForumBean.java:184:        private FrsForumBean forum;
/api\models\web\ForumBean.java:185:        private FrsUserBean user;
/api\models\web\ForumBean.java:186:        private FrsPageBean page;
/api\models\web\ForumBean.java:187:        @SerializedName("thread_list")
/api\models\web\ForumBean.java:188:        private List<FrsThreadBean> threadList;
/api\models\web\ForumBean.java:190:        public List<FrsThreadBean> getThreadList() {
/api\models\web\ForumBean.java:191:            return threadList;
/api\models\web\ForumBean.java:192:        }
/api\models\web\ForumBean.java:194:        public FrsPageBean getPage() {
/api\models\web\ForumBean.java:195:            return page;
/api\models\web\ForumBean.java:196:        }
/api\models\web\ForumBean.java:198:        public ForumPageBean.AntiBean getAnti() {
/api\models\web\ForumBean.java:199:            return anti;
/api\models\web\ForumBean.java:200:        }
/api\models\web\ForumBean.java:202:        public FrsForumBean getForum() {
/api\models\web\ForumBean.java:203:            return forum;
/api\models\web\ForumBean.java:204:        }
/api\models\web\ForumBean.java:206:        public FrsUserBean getUser() {
/api\models\web\ForumBean.java:207:            return user;
/api\models\web\ForumBean.java:208:        }
/api\models\web\ForumBean.java:209:    }
/api\models\web\ForumBean.java:211:    public static class ForumAttrBean {
/api\models\web\ForumBean.java:212:        @SerializedName("zyqtitle")
/api\models\web\ForumBean.java:213:        private String zyqTitle;
/api\models\web\ForumBean.java:214:        @JsonAdapter(ZyqDefineAdapter.class)
/api\models\web\ForumBean.java:215:        @SerializedName("zyqdefine")
/api\models\web\ForumBean.java:216:        private List<ForumPageBean.ZyqDefineBean> zyqDefine;
/api\models\web\ForumBean.java:217:        @SerializedName("zyqfriend")
/api\models\web\ForumBean.java:218:        private List<String> zyqFriend;
/api\models\web\ForumBean.java:220:        public String getZyqTitle() {
/api\models\web\ForumBean.java:221:            return zyqTitle;
/api\models\web\ForumBean.java:222:        }
/api\models\web\ForumBean.java:224:        public List<ForumPageBean.ZyqDefineBean> getZyqDefine() {
/api\models\web\ForumBean.java:225:            return zyqDefine;
/api\models\web\ForumBean.java:226:        }
/api\models\web\ForumBean.java:228:        public List<String> getZyqFriend() {
/api\models\web\ForumBean.java:229:            return zyqFriend;
/api\models\web\ForumBean.java:230:        }
/api\models\web\ForumBean.java:231:    }
/api\models\web\ForumBean.java:233:    public static class FrsForumBean {
/api\models\web\ForumBean.java:234:        private String id;
/api\models\web\ForumBean.java:235:        private ForumAttrBean attrs;
/api\models\web\ForumBean.java:236:        private String name;
/api\models\web\ForumBean.java:237:        @SerializedName("is_like")
/api\models\web\ForumBean.java:238:        private String isLike;
/api\models\web\ForumBean.java:239:        @SerializedName("user_level")
/api\models\web\ForumBean.java:240:        private String userLevel;
/api\models\web\ForumBean.java:241:        @SerializedName("level_id")
/api\models\web\ForumBean.java:242:        private String levelId;
/api\models\web\ForumBean.java:243:        @SerializedName("level_name")
/api\models\web\ForumBean.java:244:        private String levelName;
/api\models\web\ForumBean.java:245:        @SerializedName("is_exists")
/api\models\web\ForumBean.java:246:        private boolean isExists;
/api\models\web\ForumBean.java:247:        @SerializedName("cur_score")
/api\models\web\ForumBean.java:248:        private String curScore;
/api\models\web\ForumBean.java:249:        @SerializedName("levelup_score")
/api\models\web\ForumBean.java:250:        private String levelUpScore;
/api\models\web\ForumBean.java:251:        @SerializedName("member_num")
/api\models\web\ForumBean.java:252:        private String memberNum;
/api\models\web\ForumBean.java:253:        @SerializedName("post_num")
/api\models\web\ForumBean.java:254:        private String postNum;
/api\models\web\ForumBean.java:255:        private List<ForumPageBean.ManagerBean> managers;
/api\models\web\ForumBean.java:256:        @SerializedName("good_classify")
/api\models\web\ForumBean.java:257:        private List<ForumPageBean.GoodClassifyBean> goodClassify;
/api\models\web\ForumBean.java:258:        private String slogan;
/api\models\web\ForumBean.java:259:        private String avatar;
/api\models\web\ForumBean.java:260:        private String tids;
/api\models\web\ForumBean.java:261:        @SerializedName("sign_in_info")
/api\models\web\ForumBean.java:262:        private ForumPageBean.ForumBean.SignInInfo signInInfo;
/api\models\web\ForumBean.java:264:        public List<ForumPageBean.ManagerBean> getManagers() {
/api\models\web\ForumBean.java:265:            return managers;
/api\models\web\ForumBean.java:266:        }
/api\models\web\ForumBean.java:268:        public ForumAttrBean getAttrs() {
/api\models\web\ForumBean.java:269:            return attrs;
/api\models\web\ForumBean.java:270:        }
/api\models\web\ForumBean.java:272:        public String getMemberNum() {
/api\models\web\ForumBean.java:273:            return memberNum;
/api\models\web\ForumBean.java:274:        }
/api\models\web\ForumBean.java:276:        public String getPostNum() {
/api\models\web\ForumBean.java:277:            return postNum;
/api\models\web\ForumBean.java:278:        }
/api\models\web\ForumBean.java:280:        public String getId() {
/api\models\web\ForumBean.java:281:            return id;
/api\models\web\ForumBean.java:282:        }
/api\models\web\ForumBean.java:284:        public String getName() {
/api\models\web\ForumBean.java:285:            return name;
/api\models\web\ForumBean.java:286:        }
/api\models\web\ForumBean.java:288:        public String getIsLike() {
/api\models\web\ForumBean.java:289:            return isLike;
/api\models\web\ForumBean.java:290:        }
/api\models\web\ForumBean.java:292:        public String getUserLevel() {
/api\models\web\ForumBean.java:293:            return userLevel;
/api\models\web\ForumBean.java:294:        }
/api\models\web\ForumBean.java:296:        public String getLevelId() {
/api\models\web\ForumBean.java:297:            return levelId;
/api\models\web\ForumBean.java:298:        }
/api\models\web\ForumBean.java:300:        public String getLevelName() {
/api\models\web\ForumBean.java:301:            return levelName;
/api\models\web\ForumBean.java:302:        }
/api\models\web\ForumBean.java:304:        public boolean isExists() {
/api\models\web\ForumBean.java:305:            return isExists;
/api\models\web\ForumBean.java:306:        }
/api\models\web\ForumBean.java:308:        public String getCurScore() {
/api\models\web\ForumBean.java:309:            return curScore;
/api\models\web\ForumBean.java:310:        }
/api\models\web\ForumBean.java:312:        public String getLevelUpScore() {
/api\models\web\ForumBean.java:313:            return levelUpScore;
/api\models\web\ForumBean.java:314:        }
/api\models\web\ForumBean.java:316:        public List<ForumPageBean.GoodClassifyBean> getGoodClassify() {
/api\models\web\ForumBean.java:317:            return goodClassify;
/api\models\web\ForumBean.java:318:        }
/api\models\web\ForumBean.java:320:        public String getSlogan() {
/api\models\web\ForumBean.java:321:            return slogan;
/api\models\web\ForumBean.java:322:        }
/api\models\web\ForumBean.java:324:        public String getAvatar() {
/api\models\web\ForumBean.java:325:            return avatar;
/api\models\web\ForumBean.java:326:        }
/api\models\web\ForumBean.java:328:        public String getTids() {
/api\models\web\ForumBean.java:329:            return tids;
/api\models\web\ForumBean.java:330:        }
/api\models\web\ForumBean.java:332:        public ForumPageBean.ForumBean.SignInInfo getSignInInfo() {
/api\models\web\ForumBean.java:333:            return signInInfo;
/api\models\web\ForumBean.java:334:        }
/api\models\web\ForumBean.java:337:    }
/api\models\web\ForumBean.java:339:    public static class FrsUserBean {
/api\models\web\ForumBean.java:340:        private String id;
/api\models\web\ForumBean.java:341:        private String name;
/api\models\web\ForumBean.java:342:        @SerializedName(value = "name_show", alternate = {"nick"})
/api\models\web\ForumBean.java:343:        private String nameShow;
/api\models\web\ForumBean.java:344:        @JsonAdapter(PortraitAdapter.class)
/api\models\web\ForumBean.java:345:        private String portrait;
/api\models\web\ForumBean.java:346:        @SerializedName("new_user_info")
/api\models\web\ForumBean.java:347:        private NewUserInfoBean newUserInfo;
/api\models\web\ForumBean.java:349:        public String getId() {
/api\models\web\ForumBean.java:350:            return id;
/api\models\web\ForumBean.java:351:        }
/api\models\web\ForumBean.java:353:        public void setId(String id) {
/api\models\web\ForumBean.java:354:            this.id = id;
/api\models\web\ForumBean.java:355:        }
/api\models\web\ForumBean.java:357:        public String getName() {
/api\models\web\ForumBean.java:358:            return name;
/api\models\web\ForumBean.java:359:        }
/api\models\web\ForumBean.java:361:        public void setName(String name) {
/api\models\web\ForumBean.java:362:            this.name = name;
/api\models\web\ForumBean.java:363:        }
/api\models\web\ForumBean.java:365:        public String getNameShow() {
/api\models\web\ForumBean.java:366:            return nameShow;
/api\models\web\ForumBean.java:367:        }
/api\models\web\ForumBean.java:369:        public void setNameShow(String nameShow) {
/api\models\web\ForumBean.java:370:            this.nameShow = nameShow;
/api\models\web\ForumBean.java:371:        }
/api\models\web\ForumBean.java:373:        public String getPortrait() {
/api\models\web\ForumBean.java:374:            return portrait;
/api\models\web\ForumBean.java:375:        }
/api\models\web\ForumBean.java:377:        public NewUserInfoBean getNewUserInfo() {
/api\models\web\ForumBean.java:378:            return newUserInfo;
/api\models\web\ForumBean.java:379:        }
/api\models\web\ForumBean.java:380:    }
/api\models\web\ForumBean.java:382:    public static class NewUserInfoBean {
/api\models\web\ForumBean.java:383:        @SerializedName("user_id")
/api\models\web\ForumBean.java:384:        private String userId;
/api\models\web\ForumBean.java:385:        @SerializedName("user_name")
/api\models\web\ForumBean.java:386:        private String userName;
/api\models\web\ForumBean.java:387:        @SerializedName("user_nickname")
/api\models\web\ForumBean.java:388:        private String userNickname;
/api\models\web\ForumBean.java:389:        @SerializedName("user_sex")
/api\models\web\ForumBean.java:390:        private int userSex;
/api\models\web\ForumBean.java:392:        public String getUserId() {
/api\models\web\ForumBean.java:393:            return userId;
/api\models\web\ForumBean.java:394:        }
/api\models\web\ForumBean.java:396:        public String getUserName() {
/api\models\web\ForumBean.java:397:            return userName;
/api\models\web\ForumBean.java:398:        }
/api\models\web\ForumBean.java:400:        public String getUserNickname() {
/api\models\web\ForumBean.java:401:            return userNickname;
/api\models\web\ForumBean.java:402:        }
/api\models\web\ForumBean.java:404:        public int getUserSex() {
/api\models\web\ForumBean.java:405:            return userSex;
/api\models\web\ForumBean.java:406:        }
/api\models\web\ForumBean.java:407:    }
/api\models\web\ForumBean.java:409:    public static class FrsPageBean {
/api\models\web\ForumBean.java:410:        @SerializedName("page_size")
/api\models\web\ForumBean.java:411:        private int pageSize;
/api\models\web\ForumBean.java:412:        private int offset;
/api\models\web\ForumBean.java:413:        @SerializedName("current_page")
/api\models\web\ForumBean.java:414:        private int currentPage;
/api\models\web\ForumBean.java:415:        @SerializedName("total_count")
/api\models\web\ForumBean.java:416:        private int totalCount;
/api\models\web\ForumBean.java:417:        @SerializedName("total_page")
/api\models\web\ForumBean.java:418:        private int totalPage;
/api\models\web\ForumBean.java:419:        @SerializedName("cur_good_id")
/api\models\web\ForumBean.java:420:        private int curGoodId;
/api\models\web\ForumBean.java:422:        public int getPageSize() {
/api\models\web\ForumBean.java:423:            return pageSize;
/api\models\web\ForumBean.java:424:        }
/api\models\web\ForumBean.java:426:        public int getOffset() {
/api\models\web\ForumBean.java:427:            return offset;
/api\models\web\ForumBean.java:428:        }
/api\models\web\ForumBean.java:430:        public int getCurrentPage() {
/api\models\web\ForumBean.java:431:            return currentPage;
/api\models\web\ForumBean.java:432:        }
/api\models\web\ForumBean.java:434:        public int getTotalCount() {
/api\models\web\ForumBean.java:435:            return totalCount;
/api\models\web\ForumBean.java:436:        }
/api\models\web\ForumBean.java:438:        public int getTotalPage() {
/api\models\web\ForumBean.java:439:            return totalPage;
/api\models\web\ForumBean.java:440:        }
/api\models\web\ForumBean.java:442:        public int getCurGoodId() {
/api\models\web\ForumBean.java:443:            return curGoodId;
/api\models\web\ForumBean.java:444:        }
/api\models\web\ForumBean.java:445:    }
/api\models\web\ForumBean.java:446:}
/api\models\web\HotMessageListBean.java:1:package com.huanchengfly.tieba.post.api.models.web;
/api\models\web\HotMessageListBean.java:3:import com.google.gson.annotations.SerializedName;
/api\models\web\HotMessageListBean.java:4:import com.huanchengfly.tieba.post.models.BaseBean;
/api\models\web\HotMessageListBean.java:6:import java.util.List;
/api\models\web\HotMessageListBean.java:8:public class HotMessageListBean extends BaseBean {
/api\models\web\HotMessageListBean.java:9:    @SerializedName("no")
/api\models\web\HotMessageListBean.java:10:    private int errorCode;
/api\models\web\HotMessageListBean.java:11:    @SerializedName("error")
/api\models\web\HotMessageListBean.java:12:    private String errorMsg;
/api\models\web\HotMessageListBean.java:13:    private HotMessageListDataBean data;
/api\models\web\HotMessageListBean.java:15:    public int getErrorCode() {
/api\models\web\HotMessageListBean.java:16:        return errorCode;
/api\models\web\HotMessageListBean.java:17:    }
/api\models\web\HotMessageListBean.java:19:    public String getErrorMsg() {
/api\models\web\HotMessageListBean.java:20:        return errorMsg;
/api\models\web\HotMessageListBean.java:21:    }
/api\models\web\HotMessageListBean.java:23:    public HotMessageListDataBean getData() {
/api\models\web\HotMessageListBean.java:24:        return data;
/api\models\web\HotMessageListBean.java:25:    }
/api\models\web\HotMessageListBean.java:27:    public static class HotMessageListDataBean {
/api\models\web\HotMessageListBean.java:28:        private DataListBean list;
/api\models\web\HotMessageListBean.java:30:        public DataListBean getList() {
/api\models\web\HotMessageListBean.java:31:            return list;
/api\models\web\HotMessageListBean.java:32:        }
/api\models\web\HotMessageListBean.java:33:    }
/api\models\web\HotMessageListBean.java:35:    public static class DataListBean {
/api\models\web\HotMessageListBean.java:36:        private List<HotMessageRetBean> ret;
/api\models\web\HotMessageListBean.java:38:        public List<HotMessageRetBean> getRet() {
/api\models\web\HotMessageListBean.java:39:            return ret;
/api\models\web\HotMessageListBean.java:40:        }
/api\models\web\HotMessageListBean.java:41:    }
/api\models\web\HotMessageListBean.java:43:    public static class HotMessageRetBean {
/api\models\web\HotMessageListBean.java:44:        @SerializedName("mul_id")
/api\models\web\HotMessageListBean.java:45:        private String mulId;
/api\models\web\HotMessageListBean.java:46:        @SerializedName("mul_name")
/api\models\web\HotMessageListBean.java:47:        private String mulName;
/api\models\web\HotMessageListBean.java:48:        @SerializedName("topic_info")
/api\models\web\HotMessageListBean.java:49:        private TopicInfoBean topicInfo;
/api\models\web\HotMessageListBean.java:51:        public TopicInfoBean getTopicInfo() {
/api\models\web\HotMessageListBean.java:52:            return topicInfo;
/api\models\web\HotMessageListBean.java:53:        }
/api\models\web\HotMessageListBean.java:55:        public String getMulId() {
/api\models\web\HotMessageListBean.java:56:            return mulId;
/api\models\web\HotMessageListBean.java:57:        }
/api\models\web\HotMessageListBean.java:59:        public String getMulName() {
/api\models\web\HotMessageListBean.java:60:            return mulName;
/api\models\web\HotMessageListBean.java:61:        }
/api\models\web\HotMessageListBean.java:62:    }
/api\models\web\HotMessageListBean.java:64:    public static class TopicInfoBean {
/api\models\web\HotMessageListBean.java:65:        @SerializedName("topic_desc")
/api\models\web\HotMessageListBean.java:66:        private String topicDesc;
/api\models\web\HotMessageListBean.java:68:        public String getTopicDesc() {
/api\models\web\HotMessageListBean.java:69:            return topicDesc;
/api\models\web\HotMessageListBean.java:70:        }
/api\models\web\HotMessageListBean.java:71:    }
/api\models\web\HotMessageListBean.java:72:}
/api\models\web\HotTopicBean.java:1:package com.huanchengfly.tieba.post.api.models.web;
/api\models\web\HotTopicBean.java:3:import com.google.gson.annotations.SerializedName;
/api\models\web\HotTopicBean.java:5:import java.util.List;
/api\models\web\HotTopicBean.java:7:public class HotTopicBean extends WebBaseBean<HotTopicBean.HotTopicDataBean> {
/api\models\web\HotTopicBean.java:8:    public static class HotTopicDataBean {
/api\models\web\HotTopicBean.java:9:        @SerializedName("pmy_topic_ext")
/api\models\web\HotTopicBean.java:10:        private String pmyTopicExt;
/api\models\web\HotTopicBean.java:11:        @SerializedName("yuren_rand")
/api\models\web\HotTopicBean.java:12:        private int yurenRand;
/api\models\web\HotTopicBean.java:13:        @SerializedName("topic_info")
/api\models\web\HotTopicBean.java:14:        private TopicInfoBean topicInfo;
/api\models\web\HotTopicBean.java:16:        public TopicInfoBean getTopicInfo() {
/api\models\web\HotTopicBean.java:17:            return topicInfo;
/api\models\web\HotTopicBean.java:18:        }
/api\models\web\HotTopicBean.java:20:        public String getPmyTopicExt() {
/api\models\web\HotTopicBean.java:21:            return pmyTopicExt;
/api\models\web\HotTopicBean.java:22:        }
/api\models\web\HotTopicBean.java:24:        public int getYurenRand() {
/api\models\web\HotTopicBean.java:25:            return yurenRand;
/api\models\web\HotTopicBean.java:26:        }
/api\models\web\HotTopicBean.java:27:    }
/api\models\web\HotTopicBean.java:29:    public static class TopicInfoBean {
/api\models\web\HotTopicBean.java:30:        private List<TopicInfoRetBean> ret;
/api\models\web\HotTopicBean.java:32:        public List<TopicInfoRetBean> getRet() {
/api\models\web\HotTopicBean.java:33:            return ret;
/api\models\web\HotTopicBean.java:34:        }
/api\models\web\HotTopicBean.java:35:    }
/api\models\web\HotTopicBean.java:37:    public static class TopicInfoRetBean {
/api\models\web\HotTopicBean.java:38:        @SerializedName("create_time")
/api\models\web\HotTopicBean.java:39:        private String createTime;
/api\models\web\HotTopicBean.java:40:        @SerializedName("discuss_num")
/api\models\web\HotTopicBean.java:41:        private String discussNum;
/api\models\web\HotTopicBean.java:42:        @SerializedName("hot_value")
/api\models\web\HotTopicBean.java:43:        private String hotValue;
/api\models\web\HotTopicBean.java:44:        @SerializedName("topic_id")
/api\models\web\HotTopicBean.java:45:        private String topicId;
/api\models\web\HotTopicBean.java:46:        @SerializedName("topic_name")
/api\models\web\HotTopicBean.java:47:        private String topicName;
/api\models\web\HotTopicBean.java:48:        @SerializedName("topic_desc")
/api\models\web\HotTopicBean.java:49:        private String topicDesc;
/api\models\web\HotTopicBean.java:50:        private String tids;
/api\models\web\HotTopicBean.java:51:        @SerializedName("real_discuss_num")
/api\models\web\HotTopicBean.java:52:        private String realDiscussNum;
/api\models\web\HotTopicBean.java:53:        private TopicInfoRetExtraBean extra;
/api\models\web\HotTopicBean.java:54:    }
/api\models\web\HotTopicBean.java:56:    public static class TopicInfoRetExtraBean {
/api\models\web\HotTopicBean.java:57:        @SerializedName("head_pic")
/api\models\web\HotTopicBean.java:58:        private String headPic;
/api\models\web\HotTopicBean.java:59:        @SerializedName("share_title")
/api\models\web\HotTopicBean.java:60:        private String shareTitle;
/api\models\web\HotTopicBean.java:61:        @SerializedName("share_pic")
/api\models\web\HotTopicBean.java:62:        private String sharePic;
/api\models\web\HotTopicBean.java:63:        @SerializedName("topic_tid")
/api\models\web\HotTopicBean.java:64:        private String topicTid;
/api\models\web\HotTopicBean.java:65:    }
/api\models\web\HotTopicBean.java:66:}
/api\models\web\HotTopicForumBean.java:1:package com.huanchengfly.tieba.post.api.models.web;
/api\models\web\HotTopicForumBean.java:3:import com.google.gson.annotations.SerializedName;
/api\models\web\HotTopicForumBean.java:5:import java.util.List;
/api\models\web\HotTopicForumBean.java:7:public class HotTopicForumBean extends WebBaseBean<HotTopicForumBean.HotTopicForumDataBean> {
/api\models\web\HotTopicForumBean.java:8:    public static class HotTopicForumDataBean {
/api\models\web\HotTopicForumBean.java:9:        @SerializedName("forum_list")
/api\models\web\HotTopicForumBean.java:10:        private ForumListBean forumList;
/api\models\web\HotTopicForumBean.java:11:        @SerializedName("pk_info")
/api\models\web\HotTopicForumBean.java:12:        private PkInfoBean pkInfo;
/api\models\web\HotTopicForumBean.java:14:        public ForumListBean getForumList() {
/api\models\web\HotTopicForumBean.java:15:            return forumList;
/api\models\web\HotTopicForumBean.java:16:        }
/api\models\web\HotTopicForumBean.java:18:        public PkInfoBean getPkInfo() {
/api\models\web\HotTopicForumBean.java:19:            return pkInfo;
/api\models\web\HotTopicForumBean.java:20:        }
/api\models\web\HotTopicForumBean.java:21:    }
/api\models\web\HotTopicForumBean.java:23:    public static class ForumListBean {
/api\models\web\HotTopicForumBean.java:24:        private List<ForumBean> output;
/api\models\web\HotTopicForumBean.java:26:        public List<ForumBean> getOutput() {
/api\models\web\HotTopicForumBean.java:27:            return output;
/api\models\web\HotTopicForumBean.java:28:        }
/api\models\web\HotTopicForumBean.java:29:    }
/api\models\web\HotTopicForumBean.java:31:    public static class PkInfoBean {
/api\models\web\HotTopicForumBean.java:32:        private List<PkInfoRetBean> ret;
/api\models\web\HotTopicForumBean.java:34:        public List<PkInfoRetBean> getRet() {
/api\models\web\HotTopicForumBean.java:35:            return ret;
/api\models\web\HotTopicForumBean.java:36:        }
/api\models\web\HotTopicForumBean.java:37:    }
/api\models\web\HotTopicForumBean.java:39:    public static class PkInfoRetBean {
/api\models\web\HotTopicForumBean.java:40:        @SerializedName("create_time")
/api\models\web\HotTopicForumBean.java:41:        private String createTime;
/api\models\web\HotTopicForumBean.java:42:        @SerializedName("module_name")
/api\models\web\HotTopicForumBean.java:43:        private String moduleName;
/api\models\web\HotTopicForumBean.java:44:        @SerializedName("module_type")
/api\models\web\HotTopicForumBean.java:45:        private String moduleType;
/api\models\web\HotTopicForumBean.java:46:        private PkPicBean pics;
/api\models\web\HotTopicForumBean.java:47:        @SerializedName("module_type")
/api\models\web\HotTopicForumBean.java:48:        private PkPicBean picUrls;
/api\models\web\HotTopicForumBean.java:49:        @SerializedName("has_selected")
/api\models\web\HotTopicForumBean.java:50:        private boolean hasSelected;
/api\models\web\HotTopicForumBean.java:51:        @SerializedName("num_coefficient")
/api\models\web\HotTopicForumBean.java:52:        private String numCoefficient;
/api\models\web\HotTopicForumBean.java:53:        @SerializedName("pk_desc_1")
/api\models\web\HotTopicForumBean.java:54:        private String pkDesc1;
/api\models\web\HotTopicForumBean.java:55:        @SerializedName("pk_desc_2")
/api\models\web\HotTopicForumBean.java:56:        private String pkDesc2;
/api\models\web\HotTopicForumBean.java:57:        @SerializedName("pk_desc_3")
/api\models\web\HotTopicForumBean.java:58:        private String pkDesc3;
/api\models\web\HotTopicForumBean.java:59:        @SerializedName("pk_desc_4")
/api\models\web\HotTopicForumBean.java:60:        private String pkDesc4;
/api\models\web\HotTopicForumBean.java:61:        @SerializedName("pk_id")
/api\models\web\HotTopicForumBean.java:62:        private String pkId;
/api\models\web\HotTopicForumBean.java:63:        @SerializedName("pk_num_1")
/api\models\web\HotTopicForumBean.java:64:        private String pkNum1;
/api\models\web\HotTopicForumBean.java:65:        @SerializedName("pk_num_2")
/api\models\web\HotTopicForumBean.java:66:        private String pkNum2;
/api\models\web\HotTopicForumBean.java:67:        @SerializedName("pk_num_3")
/api\models\web\HotTopicForumBean.java:68:        private String pkNum3;
/api\models\web\HotTopicForumBean.java:69:        @SerializedName("pk_num_4")
/api\models\web\HotTopicForumBean.java:70:        private String pkNum4;
/api\models\web\HotTopicForumBean.java:71:        @SerializedName("selected_index")
/api\models\web\HotTopicForumBean.java:72:        private String selectedIndex;
/api\models\web\HotTopicForumBean.java:73:        private String title;
/api\models\web\HotTopicForumBean.java:74:        @SerializedName("topic_id")
/api\models\web\HotTopicForumBean.java:75:        private String topicId;
/api\models\web\HotTopicForumBean.java:77:        public String getCreateTime() {
/api\models\web\HotTopicForumBean.java:78:            return createTime;
/api\models\web\HotTopicForumBean.java:79:        }
/api\models\web\HotTopicForumBean.java:81:        public String getModuleName() {
/api\models\web\HotTopicForumBean.java:82:            return moduleName;
/api\models\web\HotTopicForumBean.java:83:        }
/api\models\web\HotTopicForumBean.java:85:        public String getModuleType() {
/api\models\web\HotTopicForumBean.java:86:            return moduleType;
/api\models\web\HotTopicForumBean.java:87:        }
/api\models\web\HotTopicForumBean.java:89:        public PkPicBean getPics() {
/api\models\web\HotTopicForumBean.java:90:            return pics;
/api\models\web\HotTopicForumBean.java:91:        }
/api\models\web\HotTopicForumBean.java:93:        public PkPicBean getPicUrls() {
/api\models\web\HotTopicForumBean.java:94:            return picUrls;
/api\models\web\HotTopicForumBean.java:95:        }
/api\models\web\HotTopicForumBean.java:97:        public boolean isHasSelected() {
/api\models\web\HotTopicForumBean.java:98:            return hasSelected;
/api\models\web\HotTopicForumBean.java:99:        }
/api\models\web\HotTopicForumBean.java:101:        public String getNumCoefficient() {
/api\models\web\HotTopicForumBean.java:102:            return numCoefficient;
/api\models\web\HotTopicForumBean.java:103:        }
/api\models\web\HotTopicForumBean.java:105:        public String getPkDesc1() {
/api\models\web\HotTopicForumBean.java:106:            return pkDesc1;
/api\models\web\HotTopicForumBean.java:107:        }
/api\models\web\HotTopicForumBean.java:109:        public String getPkDesc2() {
/api\models\web\HotTopicForumBean.java:110:            return pkDesc2;
/api\models\web\HotTopicForumBean.java:111:        }
/api\models\web\HotTopicForumBean.java:113:        public String getPkDesc3() {
/api\models\web\HotTopicForumBean.java:114:            return pkDesc3;
/api\models\web\HotTopicForumBean.java:115:        }
/api\models\web\HotTopicForumBean.java:117:        public String getPkDesc4() {
/api\models\web\HotTopicForumBean.java:118:            return pkDesc4;
/api\models\web\HotTopicForumBean.java:119:        }
/api\models\web\HotTopicForumBean.java:121:        public String getPkId() {
/api\models\web\HotTopicForumBean.java:122:            return pkId;
/api\models\web\HotTopicForumBean.java:123:        }
/api\models\web\HotTopicForumBean.java:125:        public String getPkNum1() {
/api\models\web\HotTopicForumBean.java:126:            return pkNum1;
/api\models\web\HotTopicForumBean.java:127:        }
/api\models\web\HotTopicForumBean.java:129:        public String getPkNum2() {
/api\models\web\HotTopicForumBean.java:130:            return pkNum2;
/api\models\web\HotTopicForumBean.java:131:        }
/api\models\web\HotTopicForumBean.java:133:        public String getPkNum3() {
/api\models\web\HotTopicForumBean.java:134:            return pkNum3;
/api\models\web\HotTopicForumBean.java:135:        }
/api\models\web\HotTopicForumBean.java:137:        public String getPkNum4() {
/api\models\web\HotTopicForumBean.java:138:            return pkNum4;
/api\models\web\HotTopicForumBean.java:139:        }
/api\models\web\HotTopicForumBean.java:141:        public String getSelectedIndex() {
/api\models\web\HotTopicForumBean.java:142:            return selectedIndex;
/api\models\web\HotTopicForumBean.java:143:        }
/api\models\web\HotTopicForumBean.java:145:        public String getTitle() {
/api\models\web\HotTopicForumBean.java:146:            return title;
/api\models\web\HotTopicForumBean.java:147:        }
/api\models\web\HotTopicForumBean.java:149:        public String getTopicId() {
/api\models\web\HotTopicForumBean.java:150:            return topicId;
/api\models\web\HotTopicForumBean.java:151:        }
/api\models\web\HotTopicForumBean.java:152:    }
/api\models\web\HotTopicForumBean.java:154:    public static class ForumBean {
/api\models\web\HotTopicForumBean.java:156:    }
/api\models\web\HotTopicForumBean.java:158:    public static class PkPicBean {
/api\models\web\HotTopicForumBean.java:159:        @SerializedName("pk_icon_1")
/api\models\web\HotTopicForumBean.java:160:        private String pkIcon1;
/api\models\web\HotTopicForumBean.java:161:        @SerializedName("pk_icon_2")
/api\models\web\HotTopicForumBean.java:162:        private String pkIcon2;
/api\models\web\HotTopicForumBean.java:163:        @SerializedName("pk_icon_after_1")
/api\models\web\HotTopicForumBean.java:164:        private String pkIconAfter1;
/api\models\web\HotTopicForumBean.java:165:        @SerializedName("pk_icon_after_2")
/api\models\web\HotTopicForumBean.java:166:        private String pkIconAfter2;
/api\models\web\HotTopicForumBean.java:168:        public String getPkIcon1() {
/api\models\web\HotTopicForumBean.java:169:            return pkIcon1;
/api\models\web\HotTopicForumBean.java:170:        }
/api\models\web\HotTopicForumBean.java:172:        public String getPkIcon2() {
/api\models\web\HotTopicForumBean.java:173:            return pkIcon2;
/api\models\web\HotTopicForumBean.java:174:        }
/api\models\web\HotTopicForumBean.java:176:        public String getPkIconAfter1() {
/api\models\web\HotTopicForumBean.java:177:            return pkIconAfter1;
/api\models\web\HotTopicForumBean.java:178:        }
/api\models\web\HotTopicForumBean.java:180:        public String getPkIconAfter2() {
/api\models\web\HotTopicForumBean.java:181:            return pkIconAfter2;
/api\models\web\HotTopicForumBean.java:182:        }
/api\models\web\HotTopicForumBean.java:183:    }
/api\models\web\HotTopicForumBean.java:184:}
/api\models\web\HotTopicMainBean.java:1:package com.huanchengfly.tieba.post.api.models.web;
/api\models\web\HotTopicMainBean.java:3:import com.google.gson.annotations.SerializedName;
/api\models\web\HotTopicMainBean.java:5:import java.util.List;
/api\models\web\HotTopicMainBean.java:6:import java.util.Map;
/api\models\web\HotTopicMainBean.java:8:public class HotTopicMainBean extends WebBaseBean<HotTopicMainBean.HotTopicMainDataBean> {
/api\models\web\HotTopicMainBean.java:9:    public static class HotTopicMainDataBean {
/api\models\web\HotTopicMainBean.java:10:        @SerializedName("best_info")
/api\models\web\HotTopicMainBean.java:11:        private BestInfoBean bestInfo;
/api\models\web\HotTopicMainBean.java:13:        public BestInfoBean getBestInfo() {
/api\models\web\HotTopicMainBean.java:14:            return bestInfo;
/api\models\web\HotTopicMainBean.java:15:        }
/api\models\web\HotTopicMainBean.java:16:    }
/api\models\web\HotTopicMainBean.java:18:    public static class BestInfoBean {
/api\models\web\HotTopicMainBean.java:19:        private List<BestInfoRetBean> ret;
/api\models\web\HotTopicMainBean.java:21:        public List<BestInfoRetBean> getRet() {
/api\models\web\HotTopicMainBean.java:22:            return ret;
/api\models\web\HotTopicMainBean.java:23:        }
/api\models\web\HotTopicMainBean.java:24:    }
/api\models\web\HotTopicMainBean.java:26:    public static class BestInfoRetBean {
/api\models\web\HotTopicMainBean.java:27:        @SerializedName("common_type")
/api\models\web\HotTopicMainBean.java:28:        private String commonType;
/api\models\web\HotTopicMainBean.java:29:        @SerializedName("module_name")
/api\models\web\HotTopicMainBean.java:30:        private String moduleName;
/api\models\web\HotTopicMainBean.java:31:        @SerializedName("module_recoms")
/api\models\web\HotTopicMainBean.java:32:        private List<String> moduleRecoms;
/api\models\web\HotTopicMainBean.java:33:        @SerializedName("thread_list")
/api\models\web\HotTopicMainBean.java:34:        private Map<String, ThreadBean> threadList;
/api\models\web\HotTopicMainBean.java:35:        @SerializedName("recom_type")
/api\models\web\HotTopicMainBean.java:36:        private String recomType;
/api\models\web\HotTopicMainBean.java:37:        @SerializedName("topic_id")
/api\models\web\HotTopicMainBean.java:38:        private String topicId;
/api\models\web\HotTopicMainBean.java:40:        public String getCommonType() {
/api\models\web\HotTopicMainBean.java:41:            return commonType;
/api\models\web\HotTopicMainBean.java:42:        }
/api\models\web\HotTopicMainBean.java:44:        public String getModuleName() {
/api\models\web\HotTopicMainBean.java:45:            return moduleName;
/api\models\web\HotTopicMainBean.java:46:        }
/api\models\web\HotTopicMainBean.java:48:        public Map<String, ThreadBean> getThreadList() {
/api\models\web\HotTopicMainBean.java:49:            return threadList;
/api\models\web\HotTopicMainBean.java:50:        }
/api\models\web\HotTopicMainBean.java:52:        public List<String> getModuleRecoms() {
/api\models\web\HotTopicMainBean.java:53:            return moduleRecoms;
/api\models\web\HotTopicMainBean.java:54:        }
/api\models\web\HotTopicMainBean.java:56:        public String getRecomType() {
/api\models\web\HotTopicMainBean.java:57:            return recomType;
/api\models\web\HotTopicMainBean.java:58:        }
/api\models\web\HotTopicMainBean.java:60:        public String getTopicId() {
/api\models\web\HotTopicMainBean.java:61:            return topicId;
/api\models\web\HotTopicMainBean.java:62:        }
/api\models\web\HotTopicMainBean.java:63:    }
/api\models\web\HotTopicMainBean.java:65:    public static class ThreadBean {
/api\models\web\HotTopicMainBean.java:66:        @SerializedName("abstract")
/api\models\web\HotTopicMainBean.java:67:        private String abstracts;
/api\models\web\HotTopicMainBean.java:68:        @SerializedName("agree_num")
/api\models\web\HotTopicMainBean.java:69:        private String agreeNum;
/api\models\web\HotTopicMainBean.java:70:        private String avatar;
/api\models\web\HotTopicMainBean.java:71:        @SerializedName("create_time")
/api\models\web\HotTopicMainBean.java:72:        private String createTime;
/api\models\web\HotTopicMainBean.java:73:        @SerializedName("forum_id")
/api\models\web\HotTopicMainBean.java:74:        private String forumId;
/api\models\web\HotTopicMainBean.java:75:        @SerializedName("forum_name")
/api\models\web\HotTopicMainBean.java:76:        private String forumName;
/api\models\web\HotTopicMainBean.java:77:        private List<MediaBean> media;
/api\models\web\HotTopicMainBean.java:78:        @SerializedName("name_show")
/api\models\web\HotTopicMainBean.java:79:        private String nameShow;
/api\models\web\HotTopicMainBean.java:80:        @SerializedName("post_num")
/api\models\web\HotTopicMainBean.java:81:        private String postNum;
/api\models\web\HotTopicMainBean.java:82:        @SerializedName("thread_id")
/api\models\web\HotTopicMainBean.java:83:        private String threadId;
/api\models\web\HotTopicMainBean.java:84:        @SerializedName("user_id")
/api\models\web\HotTopicMainBean.java:85:        private String userId;
/api\models\web\HotTopicMainBean.java:86:        private String title;
/api\models\web\HotTopicMainBean.java:88:        public String getAbstracts() {
/api\models\web\HotTopicMainBean.java:89:            return abstracts;
/api\models\web\HotTopicMainBean.java:90:        }
/api\models\web\HotTopicMainBean.java:92:        public String getAgreeNum() {
/api\models\web\HotTopicMainBean.java:93:            return agreeNum;
/api\models\web\HotTopicMainBean.java:94:        }
/api\models\web\HotTopicMainBean.java:96:        public String getAvatar() {
/api\models\web\HotTopicMainBean.java:97:            return avatar;
/api\models\web\HotTopicMainBean.java:98:        }
/api\models\web\HotTopicMainBean.java:100:        public String getCreateTime() {
/api\models\web\HotTopicMainBean.java:101:            return createTime;
/api\models\web\HotTopicMainBean.java:102:        }
/api\models\web\HotTopicMainBean.java:104:        public String getForumId() {
/api\models\web\HotTopicMainBean.java:105:            return forumId;
/api\models\web\HotTopicMainBean.java:106:        }
/api\models\web\HotTopicMainBean.java:108:        public String getForumName() {
/api\models\web\HotTopicMainBean.java:109:            return forumName;
/api\models\web\HotTopicMainBean.java:110:        }
/api\models\web\HotTopicMainBean.java:112:        public List<MediaBean> getMedia() {
/api\models\web\HotTopicMainBean.java:113:            return media;
/api\models\web\HotTopicMainBean.java:114:        }
/api\models\web\HotTopicMainBean.java:116:        public String getNameShow() {
/api\models\web\HotTopicMainBean.java:117:            return nameShow;
/api\models\web\HotTopicMainBean.java:118:        }
/api\models\web\HotTopicMainBean.java:120:        public String getPostNum() {
/api\models\web\HotTopicMainBean.java:121:            return postNum;
/api\models\web\HotTopicMainBean.java:122:        }
/api\models\web\HotTopicMainBean.java:124:        public String getThreadId() {
/api\models\web\HotTopicMainBean.java:125:            return threadId;
/api\models\web\HotTopicMainBean.java:126:        }
/api\models\web\HotTopicMainBean.java:128:        public String getUserId() {
/api\models\web\HotTopicMainBean.java:129:            return userId;
/api\models\web\HotTopicMainBean.java:130:        }
/api\models\web\HotTopicMainBean.java:132:        public String getTitle() {
/api\models\web\HotTopicMainBean.java:133:            return title;
/api\models\web\HotTopicMainBean.java:134:        }
/api\models\web\HotTopicMainBean.java:135:    }
/api\models\web\HotTopicMainBean.java:137:    public static class MediaBean {
/api\models\web\HotTopicMainBean.java:138:        @SerializedName("big_pic")
/api\models\web\HotTopicMainBean.java:139:        private String bigPic;
/api\models\web\HotTopicMainBean.java:140:        private int height;
/api\models\web\HotTopicMainBean.java:141:        private int width;
/api\models\web\HotTopicMainBean.java:142:        @SerializedName("small_pic")
/api\models\web\HotTopicMainBean.java:143:        private String smallPic;
/api\models\web\HotTopicMainBean.java:144:        private String type;
/api\models\web\HotTopicMainBean.java:145:        @SerializedName("water_pic")
/api\models\web\HotTopicMainBean.java:146:        private String waterPic;
/api\models\web\HotTopicMainBean.java:148:        public String getBigPic() {
/api\models\web\HotTopicMainBean.java:149:            return bigPic;
/api\models\web\HotTopicMainBean.java:150:        }
/api\models\web\HotTopicMainBean.java:152:        public int getHeight() {
/api\models\web\HotTopicMainBean.java:153:            return height;
/api\models\web\HotTopicMainBean.java:154:        }
/api\models\web\HotTopicMainBean.java:156:        public int getWidth() {
/api\models\web\HotTopicMainBean.java:157:            return width;
/api\models\web\HotTopicMainBean.java:158:        }
/api\models\web\HotTopicMainBean.java:160:        public String getSmallPic() {
/api\models\web\HotTopicMainBean.java:161:            return smallPic;
/api\models\web\HotTopicMainBean.java:162:        }
/api\models\web\HotTopicMainBean.java:164:        public String getType() {
/api\models\web\HotTopicMainBean.java:165:            return type;
/api\models\web\HotTopicMainBean.java:166:        }
/api\models\web\HotTopicMainBean.java:168:        public String getWaterPic() {
/api\models\web\HotTopicMainBean.java:169:            return waterPic;
/api\models\web\HotTopicMainBean.java:170:        }
/api\models\web\HotTopicMainBean.java:171:    }
/api\models\web\HotTopicMainBean.java:173:}
/api\models\web\HotTopicThreadBean.java:1:package com.huanchengfly.tieba.post.api.models.web;
/api\models\web\HotTopicThreadBean.java:3:import com.google.gson.annotations.SerializedName;
/api\models\web\HotTopicThreadBean.java:5:import java.util.List;
/api\models\web\HotTopicThreadBean.java:7:public class HotTopicThreadBean extends WebBaseBean<HotTopicThreadBean.HotTopicThreadDataBean> {
/api\models\web\HotTopicThreadBean.java:8:    public static class HotTopicThreadDataBean {
/api\models\web\HotTopicThreadBean.java:9:        @SerializedName("thread_list")
/api\models\web\HotTopicThreadBean.java:10:        private List<HotTopicMainBean.ThreadBean> threadList;
/api\models\web\HotTopicThreadBean.java:12:        public List<HotTopicMainBean.ThreadBean> getThreadList() {
/api\models\web\HotTopicThreadBean.java:13:            return threadList;
/api\models\web\HotTopicThreadBean.java:14:        }
/api\models\web\HotTopicThreadBean.java:15:    }
/api\models\web\HotTopicThreadBean.java:16:}
/api\models\web\WebBaseBean.java:1:package com.huanchengfly.tieba.post.api.models.web;
/api\models\web\WebBaseBean.java:3:import com.google.gson.annotations.SerializedName;
/api\models\web\WebBaseBean.java:4:import com.huanchengfly.tieba.post.models.BaseBean;
/api\models\web\WebBaseBean.java:6:public class WebBaseBean<Data> extends BaseBean {
/api\models\web\WebBaseBean.java:7:    @SerializedName("no")
/api\models\web\WebBaseBean.java:8:    private int errorCode;
/api\models\web\WebBaseBean.java:9:    @SerializedName("error")
/api\models\web\WebBaseBean.java:10:    private String errorMsg;
/api\models\web\WebBaseBean.java:11:    private Data data;
/api\models\web\WebBaseBean.java:13:    public int getErrorCode() {
/api\models\web\WebBaseBean.java:14:        return errorCode;
/api\models\web\WebBaseBean.java:15:    }
/api\models\web\WebBaseBean.java:17:    public WebBaseBean<Data> setErrorCode(int errorCode) {
/api\models\web\WebBaseBean.java:18:        this.errorCode = errorCode;
/api\models\web\WebBaseBean.java:19:        return this;
/api\models\web\WebBaseBean.java:20:    }
/api\models\web\WebBaseBean.java:22:    public String getErrorMsg() {
/api\models\web\WebBaseBean.java:23:        return errorMsg;
/api\models\web\WebBaseBean.java:24:    }
/api\models\web\WebBaseBean.java:26:    public WebBaseBean<Data> setErrorMsg(String errorMsg) {
/api\models\web\WebBaseBean.java:27:        this.errorMsg = errorMsg;
/api\models\web\WebBaseBean.java:28:        return this;
/api\models\web\WebBaseBean.java:29:    }
/api\models\web\WebBaseBean.java:31:    public Data getData() {
/api\models\web\WebBaseBean.java:32:        return data;
/api\models\web\WebBaseBean.java:33:    }
/api\models\web\WebBaseBean.java:35:    public WebBaseBean<Data> setData(Data data) {
/api\models\web\WebBaseBean.java:36:        this.data = data;
/api\models\web\WebBaseBean.java:37:        return this;
/api\models\web\WebBaseBean.java:38:    }
/api\models\web\WebBaseBean.java:39:}
/api\retrofit\NullOnEmptyConverterFactory.kt:1:package com.huanchengfly.tieba.post.api.retrofit
/api\retrofit\NullOnEmptyConverterFactory.kt:3:import okhttp3.ResponseBody
/api\retrofit\NullOnEmptyConverterFactory.kt:4:import retrofit2.Converter
/api\retrofit\NullOnEmptyConverterFactory.kt:5:import retrofit2.Retrofit
/api\retrofit\NullOnEmptyConverterFactory.kt:6:import java.lang.reflect.Type
/api\retrofit\NullOnEmptyConverterFactory.kt:8:class NullOnEmptyConverterFactory : Converter.Factory() {
/api\retrofit\NullOnEmptyConverterFactory.kt:9:    override fun responseBodyConverter(type: Type, annotations: Array<Annotation>, retrofit: Retrofit): Converter<ResponseBody, *>? {
/api\retrofit\NullOnEmptyConverterFactory.kt:10:        val delegate: Converter<ResponseBody, *> = retrofit.nextResponseBodyConverter<Any>(this, type, annotations)
/api\retrofit\NullOnEmptyConverterFactory.kt:11:        return (Converter<ResponseBody, Any?> { body: ResponseBody ->
/api\retrofit\NullOnEmptyConverterFactory.kt:12:            if (body.contentLength() == 0L) return@Converter null
/api\retrofit\NullOnEmptyConverterFactory.kt:13:            delegate.convert(body)
/api\retrofit\NullOnEmptyConverterFactory.kt:14:        })
/api\retrofit\NullOnEmptyConverterFactory.kt:15:    }
/api\retrofit\NullOnEmptyConverterFactory.kt:16:}/api\retrofit\RetrofitTiebaApi.kt:1:package com.huanchengfly.tieba.post.api.retrofit
/api\retrofit\RetrofitTiebaApi.kt:3:import android.os.Build
/api\retrofit\RetrofitTiebaApi.kt:4:import android.webkit.WebSettings
/api\retrofit\RetrofitTiebaApi.kt:5:import com.huanchengfly.tieba.post.api.Header
/api\retrofit\RetrofitTiebaApi.kt:6:import com.huanchengfly.tieba.post.api.Param
/api\retrofit\RetrofitTiebaApi.kt:7:import com.huanchengfly.tieba.post.api.interceptors.SortAndSignInterceptor
/api\retrofit\RetrofitTiebaApi.kt:8:import com.huanchengfly.tieba.post.api.retrofit.converter.gson.GsonConverterFactory
/api\retrofit\RetrofitTiebaApi.kt:9:import com.huanchengfly.tieba.post.api.retrofit.interceptors.*
/api\retrofit\RetrofitTiebaApi.kt:10:import com.huanchengfly.tieba.post.api.retrofit.interfaces.MiniTiebaApi
/api\retrofit\RetrofitTiebaApi.kt:11:import com.huanchengfly.tieba.post.api.retrofit.interfaces.NewTiebaApi
/api\retrofit\RetrofitTiebaApi.kt:12:import com.huanchengfly.tieba.post.api.retrofit.interfaces.OfficialTiebaApi
/api\retrofit\RetrofitTiebaApi.kt:13:import com.huanchengfly.tieba.post.api.retrofit.interfaces.WebTiebaApi
/api\retrofit\RetrofitTiebaApi.kt:14:import com.huanchengfly.tieba.post.BaseApplication
/api\retrofit\RetrofitTiebaApi.kt:15:import com.huanchengfly.tieba.post.utils.AccountUtil
/api\retrofit\RetrofitTiebaApi.kt:16:import com.huanchengfly.tieba.post.utils.MobileInfoUtil
/api\retrofit\RetrofitTiebaApi.kt:17:import com.huanchengfly.tieba.post.utils.UIDUtil
/api\retrofit\RetrofitTiebaApi.kt:18:import io.michaelrocks.paranoid.Obfuscate
/api\retrofit\RetrofitTiebaApi.kt:19:import okhttp3.ConnectionPool
/api\retrofit\RetrofitTiebaApi.kt:20:import okhttp3.Interceptor
/api\retrofit\RetrofitTiebaApi.kt:21:import okhttp3.OkHttpClient
/api\retrofit\RetrofitTiebaApi.kt:22:import retrofit2.Retrofit
/api\retrofit\RetrofitTiebaApi.kt:24:@Obfuscate
/api\retrofit\RetrofitTiebaApi.kt:25:object RetrofitTiebaApi {
/api\retrofit\RetrofitTiebaApi.kt:26:    private val initTime = System.currentTimeMillis()
/api\retrofit\RetrofitTiebaApi.kt:27:    private val clientId = "wappc_${initTime}_${Math.round(Math.random() * 1000).toInt()}"
/api\retrofit\RetrofitTiebaApi.kt:28:    private val stParamInterceptor = StParamInterceptor()
/api\retrofit\RetrofitTiebaApi.kt:29:    private val connectionPool = ConnectionPool()
/api\retrofit\RetrofitTiebaApi.kt:31:    private val defaultCommonParamInterceptor = CommonParamInterceptor(
/api\retrofit\RetrofitTiebaApi.kt:32:            Param.BDUSS to { AccountUtil.getBduss(BaseApplication.instance) },
/api\retrofit\RetrofitTiebaApi.kt:33:            Param.CLIENT_ID to { clientId },
/api\retrofit\RetrofitTiebaApi.kt:34:            Param.CLIENT_TYPE to { "2" },
/api\retrofit\RetrofitTiebaApi.kt:35:            Param.OS_VERSION to { Build.VERSION.SDK_INT.toString() },
/api\retrofit\RetrofitTiebaApi.kt:36:            Param.MODEL to { Build.MODEL },
/api\retrofit\RetrofitTiebaApi.kt:37:            Param.NET_TYPE to { "1" },
/api\retrofit\RetrofitTiebaApi.kt:38:            Param.PHONE_IMEI to { MobileInfoUtil.getIMEI(BaseApplication.instance) },
/api\retrofit\RetrofitTiebaApi.kt:39:            Param.TIMESTAMP to { System.currentTimeMillis().toString() }
/api\retrofit\RetrofitTiebaApi.kt:40:    )
/api\retrofit\RetrofitTiebaApi.kt:42:    private val defaultCommonHeaderInterceptor =
/api\retrofit\RetrofitTiebaApi.kt:43:            CommonHeaderInterceptor(
/api\retrofit\RetrofitTiebaApi.kt:44:                    Header.COOKIE to { "ka=open" },
/api\retrofit\RetrofitTiebaApi.kt:45:                    Header.PRAGMA to { "no-cache" }
/api\retrofit\RetrofitTiebaApi.kt:46:            )
/api\retrofit\RetrofitTiebaApi.kt:47:    private val gsonConverterFactory = GsonConverterFactory.create()
/api\retrofit\RetrofitTiebaApi.kt:48:    private val sortAndSignInterceptor = SortAndSignInterceptor("tiebaclient!!!")
/api\retrofit\RetrofitTiebaApi.kt:50:    val NEW_TIEBA_API: NewTiebaApi by lazy {
/api\retrofit\RetrofitTiebaApi.kt:51:        createAPI<NewTiebaApi>("http://c.tieba.baidu.com/",
/api\retrofit\RetrofitTiebaApi.kt:52:                defaultCommonHeaderInterceptor,
/api\retrofit\RetrofitTiebaApi.kt:53:                CommonHeaderInterceptor(
/api\retrofit\RetrofitTiebaApi.kt:54:                        Header.USER_AGENT to { "bdtb for Android 8.2.2" },
/api\retrofit\RetrofitTiebaApi.kt:55:                        Header.CUID to { UIDUtil.getFinalCUID() }
/api\retrofit\RetrofitTiebaApi.kt:56:                ),
/api\retrofit\RetrofitTiebaApi.kt:57:                defaultCommonParamInterceptor,
/api\retrofit\RetrofitTiebaApi.kt:58:                stParamInterceptor,
/api\retrofit\RetrofitTiebaApi.kt:59:                CommonParamInterceptor(
/api\retrofit\RetrofitTiebaApi.kt:60:                        Param.CUID to { UIDUtil.getFinalCUID() },
/api\retrofit\RetrofitTiebaApi.kt:61:                        Param.FROM to { "baidu_appstore" },
/api\retrofit\RetrofitTiebaApi.kt:62:                        Param.CLIENT_VERSION to { "8.2.2" }
/api\retrofit\RetrofitTiebaApi.kt:63:                ))
/api\retrofit\RetrofitTiebaApi.kt:64:    }
/api\retrofit\RetrofitTiebaApi.kt:66:    val WEB_TIEBA_API: WebTiebaApi by lazy {
/api\retrofit\RetrofitTiebaApi.kt:67:        createAPI<WebTiebaApi>("https://tieba.baidu.com/",
/api\retrofit\RetrofitTiebaApi.kt:68:                CommonHeaderInterceptor(
/api\retrofit\RetrofitTiebaApi.kt:69:                        Header.HOST to { "tieba.baidu.com" },
/api\retrofit\RetrofitTiebaApi.kt:70:                        Header.USER_AGENT to { WebSettings.getDefaultUserAgent(BaseApplication.instance) }
/api\retrofit\RetrofitTiebaApi.kt:71:                ),
/api\retrofit\RetrofitTiebaApi.kt:72:                AddCookieInterceptor)
/api\retrofit\RetrofitTiebaApi.kt:73:    }
/api\retrofit\RetrofitTiebaApi.kt:75:    val MINI_TIEBA_API: MiniTiebaApi by lazy {
/api\retrofit\RetrofitTiebaApi.kt:76:        createAPI<MiniTiebaApi>("http://c.tieba.baidu.com/",
/api\retrofit\RetrofitTiebaApi.kt:77:                defaultCommonHeaderInterceptor,
/api\retrofit\RetrofitTiebaApi.kt:78:                CommonHeaderInterceptor(
/api\retrofit\RetrofitTiebaApi.kt:79:                        Header.USER_AGENT to { "bdtb for Android 7.2.0.0" },
/api\retrofit\RetrofitTiebaApi.kt:80:                        Header.CUID to { UIDUtil.getFinalCUID() },
/api\retrofit\RetrofitTiebaApi.kt:81:                        Header.CUID_GALAXY2 to { UIDUtil.getFinalCUID() }
/api\retrofit\RetrofitTiebaApi.kt:82:                ),
/api\retrofit\RetrofitTiebaApi.kt:83:                defaultCommonParamInterceptor,
/api\retrofit\RetrofitTiebaApi.kt:84:                stParamInterceptor,
/api\retrofit\RetrofitTiebaApi.kt:85:                CommonParamInterceptor(
/api\retrofit\RetrofitTiebaApi.kt:86:                        Param.CUID to { UIDUtil.getFinalCUID() },
/api\retrofit\RetrofitTiebaApi.kt:87:                        Param.CUID_GALAXY2 to { UIDUtil.getFinalCUID() },
/api\retrofit\RetrofitTiebaApi.kt:88:                        Param.FROM to { "1021636m" },
/api\retrofit\RetrofitTiebaApi.kt:89:                        Param.CLIENT_VERSION to { "7.2.0.0" },
/api\retrofit\RetrofitTiebaApi.kt:90:                        Param.SUBAPP_TYPE to { "mini" }
/api\retrofit\RetrofitTiebaApi.kt:91:                ))
/api\retrofit\RetrofitTiebaApi.kt:92:    }
/api\retrofit\RetrofitTiebaApi.kt:94:    val OFFICIAL_TIEBA_API: OfficialTiebaApi by lazy {
/api\retrofit\RetrofitTiebaApi.kt:95:        createAPI<OfficialTiebaApi>("http://c.tieba.baidu.com/",
/api\retrofit\RetrofitTiebaApi.kt:96:                defaultCommonHeaderInterceptor,
/api\retrofit\RetrofitTiebaApi.kt:97:                CommonHeaderInterceptor(
/api\retrofit\RetrofitTiebaApi.kt:98:                        Header.USER_AGENT to { "bdtb for Android 9.9.8.32" },
/api\retrofit\RetrofitTiebaApi.kt:99:                        Header.CUID to { UIDUtil.getNewCUID() },
/api\retrofit\RetrofitTiebaApi.kt:100:                        Header.CUID_GALAXY2 to { UIDUtil.getFinalCUID() },
/api\retrofit\RetrofitTiebaApi.kt:101:                        Header.CUID_GID to { "" }
/api\retrofit\RetrofitTiebaApi.kt:102:                ),
/api\retrofit\RetrofitTiebaApi.kt:103:                defaultCommonParamInterceptor,
/api\retrofit\RetrofitTiebaApi.kt:104:                stParamInterceptor,
/api\retrofit\RetrofitTiebaApi.kt:105:                CommonParamInterceptor(
/api\retrofit\RetrofitTiebaApi.kt:106:                        Param.CUID to { UIDUtil.getNewCUID() },
/api\retrofit\RetrofitTiebaApi.kt:107:                        Param.CUID_GALAXY2 to { UIDUtil.getFinalCUID() },
/api\retrofit\RetrofitTiebaApi.kt:108:                        Param.CUID_GID to { "" },
/api\retrofit\RetrofitTiebaApi.kt:109:                        Param.FROM to { "tieba" },
/api\retrofit\RetrofitTiebaApi.kt:110:                        Param.CLIENT_VERSION to { "9.9.8.32" }
/api\retrofit\RetrofitTiebaApi.kt:111:                ))
/api\retrofit\RetrofitTiebaApi.kt:112:    }
/api\retrofit\RetrofitTiebaApi.kt:114:    private inline fun <reified T : Any> createAPI(
/api\retrofit\RetrofitTiebaApi.kt:115:            baseUrl: String,
/api\retrofit\RetrofitTiebaApi.kt:116:            vararg interceptors: Interceptor
/api\retrofit\RetrofitTiebaApi.kt:117:    ) = Retrofit.Builder()
/api\retrofit\RetrofitTiebaApi.kt:118:            .baseUrl(baseUrl)
/api\retrofit\RetrofitTiebaApi.kt:119:            .addConverterFactory(NullOnEmptyConverterFactory())
/api\retrofit\RetrofitTiebaApi.kt:120:            .addConverterFactory(gsonConverterFactory)
/api\retrofit\RetrofitTiebaApi.kt:121:            .client(OkHttpClient.Builder().apply {
/api\retrofit\RetrofitTiebaApi.kt:122:                interceptors.forEach {
/api\retrofit\RetrofitTiebaApi.kt:123:                    addInterceptor(it)
/api\retrofit\RetrofitTiebaApi.kt:124:                }
/api\retrofit\RetrofitTiebaApi.kt:125:                addInterceptor(sortAndSignInterceptor)
/api\retrofit\RetrofitTiebaApi.kt:126:                addInterceptor(FailureResponseInterceptor)
/api\retrofit\RetrofitTiebaApi.kt:127:                addInterceptor(ForceLoginInterceptor)
/api\retrofit\RetrofitTiebaApi.kt:128:                connectionPool(connectionPool)
/api\retrofit\RetrofitTiebaApi.kt:129:            }.build())
/api\retrofit\RetrofitTiebaApi.kt:130:            .build()
/api\retrofit\RetrofitTiebaApi.kt:131:            .create(T::class.java)
/api\retrofit\RetrofitTiebaApi.kt:132:}/api\retrofit\converter\gson\GsonConverterFactory.java:1:package com.huanchengfly.tieba.post.api.retrofit.converter.gson;
/api\retrofit\converter\gson\GsonConverterFactory.java:4:import com.google.gson.Gson;
/api\retrofit\converter\gson\GsonConverterFactory.java:5:import com.google.gson.TypeAdapter;
/api\retrofit\converter\gson\GsonConverterFactory.java:6:import com.google.gson.reflect.TypeToken;
/api\retrofit\converter\gson\GsonConverterFactory.java:8:import java.lang.annotation.Annotation;
/api\retrofit\converter\gson\GsonConverterFactory.java:9:import java.lang.reflect.Type;
/api\retrofit\converter\gson\GsonConverterFactory.java:11:import okhttp3.RequestBody;
/api\retrofit\converter\gson\GsonConverterFactory.java:12:import okhttp3.ResponseBody;
/api\retrofit\converter\gson\GsonConverterFactory.java:13:import retrofit2.Converter;
/api\retrofit\converter\gson\GsonConverterFactory.java:14:import retrofit2.Retrofit;
/api\retrofit\converter\gson\GsonConverterFactory.java:16:/**
/api\retrofit\converter\gson\GsonConverterFactory.java:17: * A {@linkplain Converter.Factory converter} which uses Gson for JSON.
/api\retrofit\converter\gson\GsonConverterFactory.java:18: * <p>
/api\retrofit\converter\gson\GsonConverterFactory.java:19: * Because Gson is so flexible in the types it supports, this converter assumes that it can handle
/api\retrofit\converter\gson\GsonConverterFactory.java:20: * all types. If you are mixing JSON serialization with something else (such as protocol buffers),
/api\retrofit\converter\gson\GsonConverterFactory.java:21: * you must {@linkplain Retrofit.Builder#addConverterFactory(Converter.Factory) add this instance}
/api\retrofit\converter\gson\GsonConverterFactory.java:22: * last to allow the other converters a chance to see their types.
/api\retrofit\converter\gson\GsonConverterFactory.java:23: */
/api\retrofit\converter\gson\GsonConverterFactory.java:24:public final class GsonConverterFactory extends Converter.Factory {
/api\retrofit\converter\gson\GsonConverterFactory.java:25:    private final Gson gson;
/api\retrofit\converter\gson\GsonConverterFactory.java:27:    private GsonConverterFactory(Gson gson) {
/api\retrofit\converter\gson\GsonConverterFactory.java:28:        this.gson = gson;
/api\retrofit\converter\gson\GsonConverterFactory.java:29:    }
/api\retrofit\converter\gson\GsonConverterFactory.java:31:    /**
/api\retrofit\converter\gson\GsonConverterFactory.java:32:     * Create an instance using a default {@link Gson} instance for conversion. Encoding to JSON and
/api\retrofit\converter\gson\GsonConverterFactory.java:33:     * decoding from JSON (when no charset is specified by a header) will use UTF-8.
/api\retrofit\converter\gson\GsonConverterFactory.java:34:     */
/api\retrofit\converter\gson\GsonConverterFactory.java:35:    public static GsonConverterFactory create() {
/api\retrofit\converter\gson\GsonConverterFactory.java:36:        return create(new Gson());
/api\retrofit\converter\gson\GsonConverterFactory.java:37:    }
/api\retrofit\converter\gson\GsonConverterFactory.java:39:    /**
/api\retrofit\converter\gson\GsonConverterFactory.java:40:     * Create an instance using {@code gson} for conversion. Encoding to JSON and
/api\retrofit\converter\gson\GsonConverterFactory.java:41:     * decoding from JSON (when no charset is specified by a header) will use UTF-8.
/api\retrofit\converter\gson\GsonConverterFactory.java:42:     */
/api\retrofit\converter\gson\GsonConverterFactory.java:43:    @SuppressWarnings("ConstantConditions") // Guarding public API nullability.
/api\retrofit\converter\gson\GsonConverterFactory.java:44:    public static GsonConverterFactory create(Gson gson) {
/api\retrofit\converter\gson\GsonConverterFactory.java:45:        if (gson == null) throw new NullPointerException("gson == null");
/api\retrofit\converter\gson\GsonConverterFactory.java:46:        return new GsonConverterFactory(gson);
/api\retrofit\converter\gson\GsonConverterFactory.java:47:    }
/api\retrofit\converter\gson\GsonConverterFactory.java:49:    @Override
/api\retrofit\converter\gson\GsonConverterFactory.java:50:    public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations,
/api\retrofit\converter\gson\GsonConverterFactory.java:51:                                                            Retrofit retrofit) {
/api\retrofit\converter\gson\GsonConverterFactory.java:52:        TypeAdapter<?> adapter = gson.getAdapter(TypeToken.get(type));
/api\retrofit\converter\gson\GsonConverterFactory.java:53:        return new GsonResponseBodyConverter<>(gson, adapter);
/api\retrofit\converter\gson\GsonConverterFactory.java:54:    }
/api\retrofit\converter\gson\GsonConverterFactory.java:56:    @Override
/api\retrofit\converter\gson\GsonConverterFactory.java:57:    public Converter<?, RequestBody> requestBodyConverter(Type type,
/api\retrofit\converter\gson\GsonConverterFactory.java:58:                                                          Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {
/api\retrofit\converter\gson\GsonConverterFactory.java:59:        TypeAdapter<?> adapter = gson.getAdapter(TypeToken.get(type));
/api\retrofit\converter\gson\GsonConverterFactory.java:60:        return new GsonRequestBodyConverter<>(gson, adapter);
/api\retrofit\converter\gson\GsonConverterFactory.java:61:    }
/api\retrofit\converter\gson\GsonConverterFactory.java:62:}
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:1:package com.huanchengfly.tieba.post.api.retrofit.converter.gson;
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:3:import com.google.gson.Gson;
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:4:import com.google.gson.TypeAdapter;
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:5:import com.google.gson.stream.JsonWriter;
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:7:import java.io.IOException;
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:8:import java.io.OutputStreamWriter;
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:9:import java.io.Writer;
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:10:import java.nio.charset.Charset;
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:12:import okhttp3.MediaType;
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:13:import okhttp3.RequestBody;
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:14:import okio.Buffer;
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:15:import retrofit2.Converter;
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:17:final class GsonRequestBodyConverter<T> implements Converter<T, RequestBody> {
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:18:    private static final MediaType MEDIA_TYPE = MediaType.get("application/json; charset=UTF-8");
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:19:    private static final Charset UTF_8 = Charset.forName("UTF-8");
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:21:    private final Gson gson;
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:22:    private final TypeAdapter<T> adapter;
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:24:    GsonRequestBodyConverter(Gson gson, TypeAdapter<T> adapter) {
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:25:        this.gson = gson;
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:26:        this.adapter = adapter;
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:27:    }
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:29:    @Override
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:30:    public RequestBody convert(T value) throws IOException {
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:31:        Buffer buffer = new Buffer();
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:32:        Writer writer = new OutputStreamWriter(buffer.outputStream(), UTF_8);
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:33:        JsonWriter jsonWriter = gson.newJsonWriter(writer);
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:34:        adapter.write(jsonWriter, value);
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:35:        jsonWriter.close();
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:36:        return RequestBody.create(MEDIA_TYPE, buffer.readByteString());
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:37:    }
/api\retrofit\converter\gson\GsonRequestBodyConverter.java:38:}
/api\retrofit\converter\gson\GsonResponseBodyConverter.java:1:package com.huanchengfly.tieba.post.api.retrofit.converter.gson;
/api\retrofit\converter\gson\GsonResponseBodyConverter.java:3:import com.google.gson.Gson;
/api\retrofit\converter\gson\GsonResponseBodyConverter.java:4:import com.google.gson.JsonIOException;
/api\retrofit\converter\gson\GsonResponseBodyConverter.java:5:import com.google.gson.TypeAdapter;
/api\retrofit\converter\gson\GsonResponseBodyConverter.java:6:import com.google.gson.stream.JsonReader;
/api\retrofit\converter\gson\GsonResponseBodyConverter.java:7:import com.google.gson.stream.JsonToken;
/api\retrofit\converter\gson\GsonResponseBodyConverter.java:9:import java.io.IOException;
/api\retrofit\converter\gson\GsonResponseBodyConverter.java:11:import okhttp3.ResponseBody;
/api\retrofit\converter\gson\GsonResponseBodyConverter.java:12:import retrofit2.Converter;
/api\retrofit\converter\gson\GsonResponseBodyConverter.java:14:final class GsonResponseBodyConverter<T> implements Converter<ResponseBody, T> {
/api\retrofit\converter\gson\GsonResponseBodyConverter.java:15:    private final Gson gson;
/api\retrofit\converter\gson\GsonResponseBodyConverter.java:16:    private final TypeAdapter<T> adapter;
/api\retrofit\converter\gson\GsonResponseBodyConverter.java:18:    GsonResponseBodyConverter(Gson gson, TypeAdapter<T> adapter) {
/api\retrofit\converter\gson\GsonResponseBodyConverter.java:19:        this.gson = gson;
/api\retrofit\converter\gson\GsonResponseBodyConverter.java:20:        this.adapter = adapter;
/api\retrofit\converter\gson\GsonResponseBodyConverter.java:21:    }
/api\retrofit\converter\gson\GsonResponseBodyConverter.java:23:    @Override
/api\retrofit\converter\gson\GsonResponseBodyConverter.java:24:    public T convert(ResponseBody value) throws IOException {
/api\retrofit\converter\gson\GsonResponseBodyConverter.java:25:        JsonReader jsonReader = gson.newJsonReader(value.charStream());
/api\retrofit\converter\gson\GsonResponseBodyConverter.java:26:        try {
/api\retrofit\converter\gson\GsonResponseBodyConverter.java:27:            T result = adapter.read(jsonReader);
/api\retrofit\converter\gson\GsonResponseBodyConverter.java:28:            if (jsonReader.peek() != JsonToken.END_DOCUMENT) {
/api\retrofit\converter\gson\GsonResponseBodyConverter.java:29:                throw new JsonIOException("JSON document was not fully consumed.");
/api\retrofit\converter\gson\GsonResponseBodyConverter.java:30:            }
/api\retrofit\converter\gson\GsonResponseBodyConverter.java:31:            return result;
/api\retrofit\converter\gson\GsonResponseBodyConverter.java:32:        } finally {
/api\retrofit\converter\gson\GsonResponseBodyConverter.java:33:            value.close();
/api\retrofit\converter\gson\GsonResponseBodyConverter.java:34:        }
/api\retrofit\converter\gson\GsonResponseBodyConverter.java:35:    }
/api\retrofit\converter\gson\GsonResponseBodyConverter.java:36:}
/api\retrofit\exception\TiebaApiException.kt:1:package com.huanchengfly.tieba.post.api.retrofit.exception
/api\retrofit\exception\TiebaApiException.kt:3:import com.huanchengfly.tieba.post.api.models.CommonResponse
/api\retrofit\exception\TiebaApiException.kt:5:class TiebaApiException(
/api\retrofit\exception\TiebaApiException.kt:6:        private val commonResponse: CommonResponse
/api\retrofit\exception\TiebaApiException.kt:7:) : TiebaException(commonResponse.errorMsg?.takeIf { it.isNotEmpty() } ?: "未知错误") {
/api\retrofit\exception\TiebaApiException.kt:8:    override val code: Int
/api\retrofit\exception\TiebaApiException.kt:9:        get() = commonResponse.errorCode ?: -1
/api\retrofit\exception\TiebaApiException.kt:10:}/api\retrofit\exception\TiebaException.kt:1:package com.huanchengfly.tieba.post.api.retrofit.exception
/api\retrofit\exception\TiebaException.kt:3:import java.io.IOException
/api\retrofit\exception\TiebaException.kt:5:abstract class TiebaException(message: String) : IOException(message) {
/api\retrofit\exception\TiebaException.kt:6:    abstract val code: Int
/api\retrofit\exception\TiebaException.kt:7:}/api\retrofit\exception\TiebaLocalException.kt:1:package com.huanchengfly.tieba.post.api.retrofit.exception
/api\retrofit\exception\TiebaLocalException.kt:3:class TiebaLocalException(
/api\retrofit\exception\TiebaLocalException.kt:4:        override val code: Int,
/api\retrofit\exception\TiebaLocalException.kt:5:        msg: String
/api\retrofit\exception\TiebaLocalException.kt:6:) : TiebaException(msg)/api\retrofit\interceptors\AddCookieInterceptor.kt:1:package com.huanchengfly.tieba.post.api.retrofit.interceptors
/api\retrofit\interceptors\AddCookieInterceptor.kt:3:import com.huanchengfly.tieba.post.api.Header
/api\retrofit\interceptors\AddCookieInterceptor.kt:4:import com.huanchengfly.tieba.post.BaseApplication
/api\retrofit\interceptors\AddCookieInterceptor.kt:5:import com.huanchengfly.tieba.post.utils.AccountUtil
/api\retrofit\interceptors\AddCookieInterceptor.kt:6:import okhttp3.Interceptor
/api\retrofit\interceptors\AddCookieInterceptor.kt:7:import okhttp3.Response
/api\retrofit\interceptors\AddCookieInterceptor.kt:9:object AddCookieInterceptor : Interceptor {
/api\retrofit\interceptors\AddCookieInterceptor.kt:10:    override fun intercept(chain: Interceptor.Chain): Response {
/api\retrofit\interceptors\AddCookieInterceptor.kt:11:        val request = chain.request()
/api\retrofit\interceptors\AddCookieInterceptor.kt:12:        var headers = request.headers
/api\retrofit\interceptors\AddCookieInterceptor.kt:13:        val httpUrl = request.url
/api\retrofit\interceptors\AddCookieInterceptor.kt:14:        val body = request.body
/api\retrofit\interceptors\AddCookieInterceptor.kt:16:        var addCookie = true
/api\retrofit\interceptors\AddCookieInterceptor.kt:17:        val addCookieHeader = headers[Header.ADD_COOKIE]
/api\retrofit\interceptors\AddCookieInterceptor.kt:18:        if (addCookieHeader != null) {
/api\retrofit\interceptors\AddCookieInterceptor.kt:19:            if (addCookieHeader == Header.ADD_COOKIE_FALSE) addCookie = false
/api\retrofit\interceptors\AddCookieInterceptor.kt:20:            headers = headers.newBuilder()
/api\retrofit\interceptors\AddCookieInterceptor.kt:21:                    .removeAll(Header.ADD_COOKIE)
/api\retrofit\interceptors\AddCookieInterceptor.kt:22:                    .build()
/api\retrofit\interceptors\AddCookieInterceptor.kt:23:        }
/api\retrofit\interceptors\AddCookieInterceptor.kt:25:        if (addCookie) {
/api\retrofit\interceptors\AddCookieInterceptor.kt:26:            headers = headers.newBuilder()
/api\retrofit\interceptors\AddCookieInterceptor.kt:27:                    .removeAll(Header.COOKIE)
/api\retrofit\interceptors\AddCookieInterceptor.kt:28:                    .add(Header.COOKIE, AccountUtil.getCookie(BaseApplication.instance) ?: "")
/api\retrofit\interceptors\AddCookieInterceptor.kt:29:                    .build()
/api\retrofit\interceptors\AddCookieInterceptor.kt:30:        }
/api\retrofit\interceptors\AddCookieInterceptor.kt:32:        return chain.proceed(
/api\retrofit\interceptors\AddCookieInterceptor.kt:33:                request.newBuilder()
/api\retrofit\interceptors\AddCookieInterceptor.kt:34:                        .headers(headers)
/api\retrofit\interceptors\AddCookieInterceptor.kt:35:                        .url(httpUrl)
/api\retrofit\interceptors\AddCookieInterceptor.kt:36:                        .method(request.method, body)
/api\retrofit\interceptors\AddCookieInterceptor.kt:37:                        .build()
/api\retrofit\interceptors\AddCookieInterceptor.kt:38:        )
/api\retrofit\interceptors\AddCookieInterceptor.kt:39:    }
/api\retrofit\interceptors\AddCookieInterceptor.kt:41:}/api\retrofit\interceptors\CommonHeaderInterceptor.kt:1:package com.huanchengfly.tieba.post.api.retrofit.interceptors
/api\retrofit\interceptors\CommonHeaderInterceptor.kt:3:import com.huanchengfly.tieba.post.api.ParamExpression
/api\retrofit\interceptors\CommonHeaderInterceptor.kt:4:import com.huanchengfly.tieba.post.api.forEachNonNull
/api\retrofit\interceptors\CommonHeaderInterceptor.kt:5:import okhttp3.Interceptor
/api\retrofit\interceptors\CommonHeaderInterceptor.kt:6:import okhttp3.Response
/api\retrofit\interceptors\CommonHeaderInterceptor.kt:8:class CommonHeaderInterceptor(private vararg val additionHeaders: ParamExpression) : Interceptor {
/api\retrofit\interceptors\CommonHeaderInterceptor.kt:9:    override fun intercept(chain: Interceptor.Chain): Response {
/api\retrofit\interceptors\CommonHeaderInterceptor.kt:10:        val request = chain.request()
/api\retrofit\interceptors\CommonHeaderInterceptor.kt:11:        val headers = request.headers
/api\retrofit\interceptors\CommonHeaderInterceptor.kt:13:        return chain.proceed(request.newBuilder().apply {
/api\retrofit\interceptors\CommonHeaderInterceptor.kt:14:            additionHeaders.forEachNonNull { name, value ->
/api\retrofit\interceptors\CommonHeaderInterceptor.kt:15:                if (headers[name] == null) addHeader(name, value)
/api\retrofit\interceptors\CommonHeaderInterceptor.kt:16:            }
/api\retrofit\interceptors\CommonHeaderInterceptor.kt:17:        }.build())
/api\retrofit\interceptors\CommonHeaderInterceptor.kt:18:    }
/api\retrofit\interceptors\CommonHeaderInterceptor.kt:19:}/api\retrofit\interceptors\CommonParamInterceptor.kt:1:package com.huanchengfly.tieba.post.api.retrofit.interceptors
/api\retrofit\interceptors\CommonParamInterceptor.kt:3:import com.huanchengfly.tieba.post.api.*
/api\retrofit\interceptors\CommonParamInterceptor.kt:4:import okhttp3.FormBody
/api\retrofit\interceptors\CommonParamInterceptor.kt:5:import okhttp3.Interceptor
/api\retrofit\interceptors\CommonParamInterceptor.kt:6:import okhttp3.Response
/api\retrofit\interceptors\CommonParamInterceptor.kt:8:class CommonParamInterceptor(private vararg val additionParams: ParamExpression) : Interceptor {
/api\retrofit\interceptors\CommonParamInterceptor.kt:9:    override fun intercept(chain: Interceptor.Chain): Response {
/api\retrofit\interceptors\CommonParamInterceptor.kt:10:        val request = chain.request()
/api\retrofit\interceptors\CommonParamInterceptor.kt:11:        var headers = request.headers
/api\retrofit\interceptors\CommonParamInterceptor.kt:12:        var httpUrl = request.url
/api\retrofit\interceptors\CommonParamInterceptor.kt:13:        var body = request.body
/api\retrofit\interceptors\CommonParamInterceptor.kt:15:        //是否强制加到 Query(暂不存在强制加到 FormBody 的情况)
/api\retrofit\interceptors\CommonParamInterceptor.kt:16:        var forceQuery = false
/api\retrofit\interceptors\CommonParamInterceptor.kt:17:        val forceParam = headers[Header.FORCE_PARAM]
/api\retrofit\interceptors\CommonParamInterceptor.kt:18:        if (forceParam != null) {
/api\retrofit\interceptors\CommonParamInterceptor.kt:19:            if (forceParam == Header.FORCE_PARAM_QUERY) forceQuery = true
/api\retrofit\interceptors\CommonParamInterceptor.kt:20:            headers = headers.newBuilder().removeAll(Header.FORCE_PARAM).build()
/api\retrofit\interceptors\CommonParamInterceptor.kt:21:        }
/api\retrofit\interceptors\CommonParamInterceptor.kt:23:        when {
/api\retrofit\interceptors\CommonParamInterceptor.kt:24:            //如果是 GET 则添加到 Query
/api\retrofit\interceptors\CommonParamInterceptor.kt:25:            request.method == Method.GET || forceQuery -> {
/api\retrofit\interceptors\CommonParamInterceptor.kt:26:                httpUrl = request.url.newBuilder().apply {
/api\retrofit\interceptors\CommonParamInterceptor.kt:27:                    additionParams.forEachNonNull { name, value ->
/api\retrofit\interceptors\CommonParamInterceptor.kt:28:                        if (request.url.queryParameter(name) == null) addQueryParameter(name, value)
/api\retrofit\interceptors\CommonParamInterceptor.kt:29:                    }
/api\retrofit\interceptors\CommonParamInterceptor.kt:30:                }.build()
/api\retrofit\interceptors\CommonParamInterceptor.kt:31:            }
/api\retrofit\interceptors\CommonParamInterceptor.kt:33:            //如果 Body 不存在或者为空则创建一个 FormBody
/api\retrofit\interceptors\CommonParamInterceptor.kt:34:            body == null || body.contentLength() == 0L -> {
/api\retrofit\interceptors\CommonParamInterceptor.kt:35:                body = FormBody.Builder().apply {
/api\retrofit\interceptors\CommonParamInterceptor.kt:36:                    additionParams.forEachNonNull { name, value ->
/api\retrofit\interceptors\CommonParamInterceptor.kt:37:                        add(name, value)
/api\retrofit\interceptors\CommonParamInterceptor.kt:38:                    }
/api\retrofit\interceptors\CommonParamInterceptor.kt:39:                }.build()
/api\retrofit\interceptors\CommonParamInterceptor.kt:40:            }
/api\retrofit\interceptors\CommonParamInterceptor.kt:42:            //如果 Body 为 FormBody 则里面可能已经存在内容
/api\retrofit\interceptors\CommonParamInterceptor.kt:43:            body is FormBody -> {
/api\retrofit\interceptors\CommonParamInterceptor.kt:44:                body = FormBody.Builder().addAllEncoded(body).apply {
/api\retrofit\interceptors\CommonParamInterceptor.kt:45:                    additionParams.forEachNonNull { name, value ->
/api\retrofit\interceptors\CommonParamInterceptor.kt:46:                        if (!(request.body as FormBody).containsEncodedName(name)) add(name, value)
/api\retrofit\interceptors\CommonParamInterceptor.kt:47:                    }
/api\retrofit\interceptors\CommonParamInterceptor.kt:48:                }.build()
/api\retrofit\interceptors\CommonParamInterceptor.kt:49:            }
/api\retrofit\interceptors\CommonParamInterceptor.kt:51:            //如果方式不为 GET 且 Body 不为空或者为 FormBody 则无法添加公共参数
/api\retrofit\interceptors\CommonParamInterceptor.kt:52:            else -> {
/api\retrofit\interceptors\CommonParamInterceptor.kt:53:            }
/api\retrofit\interceptors\CommonParamInterceptor.kt:54:        }
/api\retrofit\interceptors\CommonParamInterceptor.kt:56:        return chain.proceed(
/api\retrofit\interceptors\CommonParamInterceptor.kt:57:                request.newBuilder()
/api\retrofit\interceptors\CommonParamInterceptor.kt:58:                        .headers(headers)
/api\retrofit\interceptors\CommonParamInterceptor.kt:59:                        .url(httpUrl)
/api\retrofit\interceptors\CommonParamInterceptor.kt:60:                        .method(request.method, body)
/api\retrofit\interceptors\CommonParamInterceptor.kt:61:                        .build()
/api\retrofit\interceptors\CommonParamInterceptor.kt:62:        )
/api\retrofit\interceptors\CommonParamInterceptor.kt:63:    }
/api\retrofit\interceptors\CommonParamInterceptor.kt:64:}
/api\retrofit\interceptors\FailureResponseInterceptor.kt:1:package com.huanchengfly.tieba.post.api.retrofit.interceptors
/api\retrofit\interceptors\FailureResponseInterceptor.kt:3:import com.google.gson.Gson
/api\retrofit\interceptors\FailureResponseInterceptor.kt:4:import com.huanchengfly.tieba.post.api.models.CommonResponse
/api\retrofit\interceptors\FailureResponseInterceptor.kt:5:import com.huanchengfly.tieba.post.api.retrofit.exception.TiebaApiException
/api\retrofit\interceptors\FailureResponseInterceptor.kt:6:import okhttp3.Interceptor
/api\retrofit\interceptors\FailureResponseInterceptor.kt:7:import okhttp3.Response
/api\retrofit\interceptors\FailureResponseInterceptor.kt:9:object FailureResponseInterceptor : Interceptor {
/api\retrofit\interceptors\FailureResponseInterceptor.kt:10:    private val gson = Gson()
/api\retrofit\interceptors\FailureResponseInterceptor.kt:12:    override fun intercept(chain: Interceptor.Chain): Response {
/api\retrofit\interceptors\FailureResponseInterceptor.kt:13:        val response = chain.proceed(chain.request())
/api\retrofit\interceptors\FailureResponseInterceptor.kt:14:        val body = response.body
/api\retrofit\interceptors\FailureResponseInterceptor.kt:15:        if (!response.isSuccessful || body == null || body.contentLength() == 0L) return response
/api\retrofit\interceptors\FailureResponseInterceptor.kt:17:        //获取字符集
/api\retrofit\interceptors\FailureResponseInterceptor.kt:18:        val contentType = body.contentType()
/api\retrofit\interceptors\FailureResponseInterceptor.kt:19:        val charset = if (contentType == null) {
/api\retrofit\interceptors\FailureResponseInterceptor.kt:20:            Charsets.UTF_8
/api\retrofit\interceptors\FailureResponseInterceptor.kt:21:        } else {
/api\retrofit\interceptors\FailureResponseInterceptor.kt:22:            contentType.charset(Charsets.UTF_8)!!
/api\retrofit\interceptors\FailureResponseInterceptor.kt:23:        }
/api\retrofit\interceptors\FailureResponseInterceptor.kt:25:        val inputStreamReader = body.source().also {
/api\retrofit\interceptors\FailureResponseInterceptor.kt:26:            it.request(Long.MAX_VALUE)
/api\retrofit\interceptors\FailureResponseInterceptor.kt:27:        }.buffer.clone().inputStream().reader(charset)
/api\retrofit\interceptors\FailureResponseInterceptor.kt:29:        val jsonObject = try {
/api\retrofit\interceptors\FailureResponseInterceptor.kt:30:            gson.fromJson<CommonResponse>(gson.newJsonReader(inputStreamReader), CommonResponse::class.java)
/api\retrofit\interceptors\FailureResponseInterceptor.kt:31:        } catch (exception: Exception) {
/api\retrofit\interceptors\FailureResponseInterceptor.kt:32:            //如果返回内容解析失败, 说明它不是一个合法的 json
/api\retrofit\interceptors\FailureResponseInterceptor.kt:33:            //如果在拦截器抛出 MalformedJsonException 会导致 Retrofit 的异步请求一直卡着直到超时
/api\retrofit\interceptors\FailureResponseInterceptor.kt:34:            return response
/api\retrofit\interceptors\FailureResponseInterceptor.kt:35:        } finally {
/api\retrofit\interceptors\FailureResponseInterceptor.kt:36:            inputStreamReader.close()
/api\retrofit\interceptors\FailureResponseInterceptor.kt:37:        }
/api\retrofit\interceptors\FailureResponseInterceptor.kt:39:        if (jsonObject.errorCode != null && jsonObject.errorCode != 0) {
/api\retrofit\interceptors\FailureResponseInterceptor.kt:40:            throw TiebaApiException(jsonObject)
/api\retrofit\interceptors\FailureResponseInterceptor.kt:41:        }
/api\retrofit\interceptors\FailureResponseInterceptor.kt:42:        return response
/api\retrofit\interceptors\FailureResponseInterceptor.kt:43:    }
/api\retrofit\interceptors\FailureResponseInterceptor.kt:44:}/api\retrofit\interceptors\ForceLoginInterceptor.kt:1:package com.huanchengfly.tieba.post.api.retrofit.interceptors
/api\retrofit\interceptors\ForceLoginInterceptor.kt:3:import com.huanchengfly.tieba.post.api.Error.ERROR_NOT_LOGGED_IN
/api\retrofit\interceptors\ForceLoginInterceptor.kt:4:import com.huanchengfly.tieba.post.api.Header
/api\retrofit\interceptors\ForceLoginInterceptor.kt:5:import com.huanchengfly.tieba.post.api.retrofit.exception.TiebaLocalException
/api\retrofit\interceptors\ForceLoginInterceptor.kt:6:import com.huanchengfly.tieba.post.BaseApplication
/api\retrofit\interceptors\ForceLoginInterceptor.kt:7:import com.huanchengfly.tieba.post.utils.AccountUtil
/api\retrofit\interceptors\ForceLoginInterceptor.kt:8:import okhttp3.Interceptor
/api\retrofit\interceptors\ForceLoginInterceptor.kt:9:import okhttp3.Response
/api\retrofit\interceptors\ForceLoginInterceptor.kt:11:object ForceLoginInterceptor : Interceptor {
/api\retrofit\interceptors\ForceLoginInterceptor.kt:12:    override fun intercept(chain: Interceptor.Chain): Response {
/api\retrofit\interceptors\ForceLoginInterceptor.kt:13:        val request = chain.request()
/api\retrofit\interceptors\ForceLoginInterceptor.kt:14:        var headers = request.headers
/api\retrofit\interceptors\ForceLoginInterceptor.kt:15:        var httpUrl = request.url
/api\retrofit\interceptors\ForceLoginInterceptor.kt:16:        var body = request.body
/api\retrofit\interceptors\ForceLoginInterceptor.kt:18:        //是否强制登录
/api\retrofit\interceptors\ForceLoginInterceptor.kt:19:        var forceLogin = false
/api\retrofit\interceptors\ForceLoginInterceptor.kt:20:        val forceLoginHeader = headers[Header.FORCE_LOGIN]
/api\retrofit\interceptors\ForceLoginInterceptor.kt:21:        if (forceLoginHeader != null) {
/api\retrofit\interceptors\ForceLoginInterceptor.kt:22:            if (forceLoginHeader == Header.FORCE_LOGIN_TRUE) forceLogin = true
/api\retrofit\interceptors\ForceLoginInterceptor.kt:23:            headers = headers.newBuilder().removeAll(Header.FORCE_LOGIN).build()
/api\retrofit\interceptors\ForceLoginInterceptor.kt:24:        }
/api\retrofit\interceptors\ForceLoginInterceptor.kt:26:        if (forceLogin && !AccountUtil.isLoggedIn(BaseApplication.instance)) {
/api\retrofit\interceptors\ForceLoginInterceptor.kt:27:            throw TiebaLocalException(ERROR_NOT_LOGGED_IN, "Not logged in.")
/api\retrofit\interceptors\ForceLoginInterceptor.kt:28:        }
/api\retrofit\interceptors\ForceLoginInterceptor.kt:30:        return chain.proceed(
/api\retrofit\interceptors\ForceLoginInterceptor.kt:31:                request.newBuilder()
/api\retrofit\interceptors\ForceLoginInterceptor.kt:32:                        .headers(headers)
/api\retrofit\interceptors\ForceLoginInterceptor.kt:33:                        .url(httpUrl)
/api\retrofit\interceptors\ForceLoginInterceptor.kt:34:                        .method(request.method, body)
/api\retrofit\interceptors\ForceLoginInterceptor.kt:35:                        .build()
/api\retrofit\interceptors\ForceLoginInterceptor.kt:36:        )
/api\retrofit\interceptors\ForceLoginInterceptor.kt:37:    }
/api\retrofit\interceptors\ForceLoginInterceptor.kt:39:}/api\retrofit\interceptors\StParamInterceptor.kt:1:package com.huanchengfly.tieba.post.api.retrofit.interceptors
/api\retrofit\interceptors\StParamInterceptor.kt:3:import com.huanchengfly.tieba.post.api.Header
/api\retrofit\interceptors\StParamInterceptor.kt:4:import com.huanchengfly.tieba.post.api.Method
/api\retrofit\interceptors\StParamInterceptor.kt:5:import com.huanchengfly.tieba.post.api.addAllEncoded
/api\retrofit\interceptors\StParamInterceptor.kt:6:import com.huanchengfly.tieba.post.api.forEachNonNull
/api\retrofit\interceptors\StParamInterceptor.kt:7:import okhttp3.FormBody
/api\retrofit\interceptors\StParamInterceptor.kt:8:import okhttp3.Interceptor
/api\retrofit\interceptors\StParamInterceptor.kt:9:import okhttp3.Response
/api\retrofit\interceptors\StParamInterceptor.kt:10:import java.util.concurrent.ThreadLocalRandom
/api\retrofit\interceptors\StParamInterceptor.kt:11:import kotlin.math.roundToInt
/api\retrofit\interceptors\StParamInterceptor.kt:13:class StParamInterceptor(private val method: Boolean = false) : Interceptor {
/api\retrofit\interceptors\StParamInterceptor.kt:14:    override fun intercept(chain: Interceptor.Chain): Response {
/api\retrofit\interceptors\StParamInterceptor.kt:15:        val request = chain.request()
/api\retrofit\interceptors\StParamInterceptor.kt:16:        var headers = request.headers
/api\retrofit\interceptors\StParamInterceptor.kt:17:        var httpUrl = request.url
/api\retrofit\interceptors\StParamInterceptor.kt:18:        var body = request.body
/api\retrofit\interceptors\StParamInterceptor.kt:20:        //是否强制加到 Query(暂不存在强制加到 FormBody 的情况)
/api\retrofit\interceptors\StParamInterceptor.kt:21:        var forceQuery = false
/api\retrofit\interceptors\StParamInterceptor.kt:22:        val forceParam = headers[Header.FORCE_PARAM]
/api\retrofit\interceptors\StParamInterceptor.kt:23:        if (forceParam != null) {
/api\retrofit\interceptors\StParamInterceptor.kt:24:            if (forceParam == Header.FORCE_PARAM_QUERY) forceQuery = true
/api\retrofit\interceptors\StParamInterceptor.kt:25:            headers = headers.newBuilder().removeAll(Header.FORCE_PARAM).build()
/api\retrofit\interceptors\StParamInterceptor.kt:26:        }
/api\retrofit\interceptors\StParamInterceptor.kt:28:        val num = ThreadLocalRandom.current().nextInt(100, 850)
/api\retrofit\interceptors\StParamInterceptor.kt:29:        var stErrorNums = "0"
/api\retrofit\interceptors\StParamInterceptor.kt:30:        var stMethod: String? = null
/api\retrofit\interceptors\StParamInterceptor.kt:31:        var stMode: String? = null
/api\retrofit\interceptors\StParamInterceptor.kt:32:        var stTimesNum: String? = null
/api\retrofit\interceptors\StParamInterceptor.kt:33:        var stTime: String? = null
/api\retrofit\interceptors\StParamInterceptor.kt:34:        var stSize: String? = null
/api\retrofit\interceptors\StParamInterceptor.kt:35:        if (num !in 100..120) {
/api\retrofit\interceptors\StParamInterceptor.kt:36:            stErrorNums = "1"
/api\retrofit\interceptors\StParamInterceptor.kt:37:            stMethod = if (method) "2" else "1"
/api\retrofit\interceptors\StParamInterceptor.kt:38:            stMode = "1"
/api\retrofit\interceptors\StParamInterceptor.kt:39:            stTimesNum = "1"
/api\retrofit\interceptors\StParamInterceptor.kt:40:            stTime = num.toString()
/api\retrofit\interceptors\StParamInterceptor.kt:41:            stSize = ((Math.random() * 8 + 0.4) * num).roundToInt().toString()
/api\retrofit\interceptors\StParamInterceptor.kt:42:        }
/api\retrofit\interceptors\StParamInterceptor.kt:44:        val additionParams = arrayOf(
/api\retrofit\interceptors\StParamInterceptor.kt:45:                "stErrorNums" to { stErrorNums },
/api\retrofit\interceptors\StParamInterceptor.kt:46:                "stMethod" to { stMethod },
/api\retrofit\interceptors\StParamInterceptor.kt:47:                "stMode" to { stMode },
/api\retrofit\interceptors\StParamInterceptor.kt:48:                "stTimesNum" to { stTimesNum },
/api\retrofit\interceptors\StParamInterceptor.kt:49:                "stTime" to { stTime },
/api\retrofit\interceptors\StParamInterceptor.kt:50:                "stSize" to { stSize }
/api\retrofit\interceptors\StParamInterceptor.kt:51:        )
/api\retrofit\interceptors\StParamInterceptor.kt:53:        when {
/api\retrofit\interceptors\StParamInterceptor.kt:54:            //如果是 GET 则添加到 Query
/api\retrofit\interceptors\StParamInterceptor.kt:55:            request.method == Method.GET || forceQuery -> {
/api\retrofit\interceptors\StParamInterceptor.kt:56:                httpUrl = request.url.newBuilder().apply {
/api\retrofit\interceptors\StParamInterceptor.kt:57:                    additionParams.forEachNonNull { name, value ->
/api\retrofit\interceptors\StParamInterceptor.kt:58:                        addQueryParameter(name, value)
/api\retrofit\interceptors\StParamInterceptor.kt:59:                    }
/api\retrofit\interceptors\StParamInterceptor.kt:60:                }.build()
/api\retrofit\interceptors\StParamInterceptor.kt:61:            }
/api\retrofit\interceptors\StParamInterceptor.kt:63:            //如果 Body 不存在或者为空则创建一个 FormBody
/api\retrofit\interceptors\StParamInterceptor.kt:64:            body == null || body.contentLength() == 0L -> {
/api\retrofit\interceptors\StParamInterceptor.kt:65:                body = FormBody.Builder().apply {
/api\retrofit\interceptors\StParamInterceptor.kt:66:                    additionParams.forEachNonNull { name, value ->
/api\retrofit\interceptors\StParamInterceptor.kt:67:                        add(name, value)
/api\retrofit\interceptors\StParamInterceptor.kt:68:                    }
/api\retrofit\interceptors\StParamInterceptor.kt:69:                }.build()
/api\retrofit\interceptors\StParamInterceptor.kt:70:            }
/api\retrofit\interceptors\StParamInterceptor.kt:72:            //如果 Body 为 FormBody 则里面可能已经存在内容
/api\retrofit\interceptors\StParamInterceptor.kt:73:            body is FormBody -> {
/api\retrofit\interceptors\StParamInterceptor.kt:74:                body = FormBody.Builder().addAllEncoded(body).apply {
/api\retrofit\interceptors\StParamInterceptor.kt:75:                    additionParams.forEachNonNull { name, value ->
/api\retrofit\interceptors\StParamInterceptor.kt:76:                        add(name, value)
/api\retrofit\interceptors\StParamInterceptor.kt:77:                    }
/api\retrofit\interceptors\StParamInterceptor.kt:78:                }.build()
/api\retrofit\interceptors\StParamInterceptor.kt:79:            }
/api\retrofit\interceptors\StParamInterceptor.kt:81:            //如果方式不为 GET 且 Body 不为空或者为 FormBody 则无法添加公共参数
/api\retrofit\interceptors\StParamInterceptor.kt:82:            else -> {
/api\retrofit\interceptors\StParamInterceptor.kt:83:            }
/api\retrofit\interceptors\StParamInterceptor.kt:84:        }
/api\retrofit\interceptors\StParamInterceptor.kt:86:        return chain.proceed(
/api\retrofit\interceptors\StParamInterceptor.kt:87:                request.newBuilder()
/api\retrofit\interceptors\StParamInterceptor.kt:88:                        .headers(headers)
/api\retrofit\interceptors\StParamInterceptor.kt:89:                        .url(httpUrl)
/api\retrofit\interceptors\StParamInterceptor.kt:90:                        .method(request.method, body)
/api\retrofit\interceptors\StParamInterceptor.kt:91:                        .build()
/api\retrofit\interceptors\StParamInterceptor.kt:92:        )
/api\retrofit\interceptors\StParamInterceptor.kt:93:    }
/api\retrofit\interceptors\StParamInterceptor.kt:94:}
/api\retrofit\interfaces\MiniTiebaApi.kt:1:package com.huanchengfly.tieba.post.api.retrofit.interfaces
/api\retrofit\interfaces\MiniTiebaApi.kt:3:import android.text.TextUtils
/api\retrofit\interfaces\MiniTiebaApi.kt:4:import com.huanchengfly.tieba.post.api.models.*
/api\retrofit\interfaces\MiniTiebaApi.kt:5:import com.huanchengfly.tieba.post.api.Header
/api\retrofit\interfaces\MiniTiebaApi.kt:6:import com.huanchengfly.tieba.post.api.getScreenHeight
/api\retrofit\interfaces\MiniTiebaApi.kt:7:import com.huanchengfly.tieba.post.api.getScreenWidth
/api\retrofit\interfaces\MiniTiebaApi.kt:8:import com.huanchengfly.tieba.post.BaseApplication
/api\retrofit\interfaces\MiniTiebaApi.kt:9:import com.huanchengfly.tieba.post.BaseApplication.ScreenInfo
/api\retrofit\interfaces\MiniTiebaApi.kt:10:import com.huanchengfly.tieba.post.utils.AccountUtil
/api\retrofit\interfaces\MiniTiebaApi.kt:11:import io.michaelrocks.paranoid.Obfuscate
/api\retrofit\interfaces\MiniTiebaApi.kt:12:import retrofit2.Call
/api\retrofit\interfaces\MiniTiebaApi.kt:13:import retrofit2.http.*
/api\retrofit\interfaces\MiniTiebaApi.kt:15:@Obfuscate
/api\retrofit\interfaces\MiniTiebaApi.kt:16:interface MiniTiebaApi {
/api\retrofit\interfaces\MiniTiebaApi.kt:17:    @POST("/c/f/excellent/personalized")
/api\retrofit\interfaces\MiniTiebaApi.kt:18:    @FormUrlEncoded
/api\retrofit\interfaces\MiniTiebaApi.kt:19:    fun personalized(
/api\retrofit\interfaces\MiniTiebaApi.kt:20:            @Field("load_type") load_type: Int,
/api\retrofit\interfaces\MiniTiebaApi.kt:21:            @Field("pn") page: Int = 1,
/api\retrofit\interfaces\MiniTiebaApi.kt:22:            @retrofit2.http.Header("client_user_token") client_user_token: String? = AccountUtil.getUid(BaseApplication.instance),
/api\retrofit\interfaces\MiniTiebaApi.kt:23:            @Field("_client_version") client_version: String = "8.0.8.0",
/api\retrofit\interfaces\MiniTiebaApi.kt:24:            @retrofit2.http.Header(Header.USER_AGENT) user_agent: String = "bdtb for Android $client_version",
/api\retrofit\interfaces\MiniTiebaApi.kt:25:            @Field("cuid_gid") cuid_gid: String = "",
/api\retrofit\interfaces\MiniTiebaApi.kt:26:            @Field("need_tags") need_tags: Int = 0,
/api\retrofit\interfaces\MiniTiebaApi.kt:27:            @Field("page_thread_count") page_thread_count: Int = 15,
/api\retrofit\interfaces\MiniTiebaApi.kt:28:            @Field("pre_ad_thread_count") pre_ad_thread_count: Int = 0,
/api\retrofit\interfaces\MiniTiebaApi.kt:29:            @Field("sug_count") sug_count: Int = 0,
/api\retrofit\interfaces\MiniTiebaApi.kt:30:            @Field("tag_code") tag_code: Int = 0,
/api\retrofit\interfaces\MiniTiebaApi.kt:31:            @Field("q_type") q_type: Int = 1,
/api\retrofit\interfaces\MiniTiebaApi.kt:32:            @Field("need_forumlist") need_forumlist: Int = 0,
/api\retrofit\interfaces\MiniTiebaApi.kt:33:            @Field("new_net_type") new_net_type: Int = 1,
/api\retrofit\interfaces\MiniTiebaApi.kt:34:            @Field("new_install") new_install: Int = 0,
/api\retrofit\interfaces\MiniTiebaApi.kt:35:            @Field("request_time") request_time: Long = System.currentTimeMillis(),
/api\retrofit\interfaces\MiniTiebaApi.kt:36:            @Field("invoke_source") invoke_source: String = "",
/api\retrofit\interfaces\MiniTiebaApi.kt:37:            @Field("scr_dip") scr_dip: String = ScreenInfo.DENSITY.toString(),
/api\retrofit\interfaces\MiniTiebaApi.kt:38:            @Field("scr_h") scr_h: String = getScreenHeight().toString(),
/api\retrofit\interfaces\MiniTiebaApi.kt:39:            @Field("scr_w") scr_w: String = getScreenWidth().toString()
/api\retrofit\interfaces\MiniTiebaApi.kt:40:    ): Call<PersonalizedBean>
/api\retrofit\interfaces\MiniTiebaApi.kt:42:    @Headers("${Header.FORCE_LOGIN}: ${Header.FORCE_LOGIN_TRUE}")
/api\retrofit\interfaces\MiniTiebaApi.kt:43:    @POST("/c/c/agree/opAgree")
/api\retrofit\interfaces\MiniTiebaApi.kt:44:    @FormUrlEncoded
/api\retrofit\interfaces\MiniTiebaApi.kt:45:    fun agree(
/api\retrofit\interfaces\MiniTiebaApi.kt:46:            @Field("post_id") postId: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:47:            @Field("thread_id") threadId: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:48:            @retrofit2.http.Header("client_user_token") client_user_token: String? = AccountUtil.getUid(BaseApplication.instance),
/api\retrofit\interfaces\MiniTiebaApi.kt:49:            @Field("_client_version") client_version: String = "8.0.8.0",
/api\retrofit\interfaces\MiniTiebaApi.kt:50:            @retrofit2.http.Header(Header.USER_AGENT) user_agent: String = "bdtb for Android $client_version",
/api\retrofit\interfaces\MiniTiebaApi.kt:51:            @Field("cuid_gid") cuid_gid: String = "",
/api\retrofit\interfaces\MiniTiebaApi.kt:52:            @Field("agree_type") agree_type: Int = 2,
/api\retrofit\interfaces\MiniTiebaApi.kt:53:            @Field("obj_type") obj_type: Int = 3,
/api\retrofit\interfaces\MiniTiebaApi.kt:54:            @Field("op_type") op_type: Int = 0,
/api\retrofit\interfaces\MiniTiebaApi.kt:55:            @Field("tbs") tbs: String = AccountUtil.getLoginInfo(BaseApplication.instance)!!.itbTbs,
/api\retrofit\interfaces\MiniTiebaApi.kt:56:            @Field("stoken") stoken: String = AccountUtil.getSToken(BaseApplication.instance)!!
/api\retrofit\interfaces\MiniTiebaApi.kt:57:    ): Call<AgreeBean>
/api\retrofit\interfaces\MiniTiebaApi.kt:59:    @Headers("${Header.FORCE_LOGIN}: ${Header.FORCE_LOGIN_TRUE}")
/api\retrofit\interfaces\MiniTiebaApi.kt:60:    @POST("/c/c/agree/opAgree")
/api\retrofit\interfaces\MiniTiebaApi.kt:61:    @FormUrlEncoded
/api\retrofit\interfaces\MiniTiebaApi.kt:62:    fun disagree(
/api\retrofit\interfaces\MiniTiebaApi.kt:63:            @Field("post_id") postId: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:64:            @Field("thread_id") threadId: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:65:            @retrofit2.http.Header("client_user_token") client_user_token: String? = AccountUtil.getUid(BaseApplication.instance),
/api\retrofit\interfaces\MiniTiebaApi.kt:66:            @Field("_client_version") client_version: String = "8.0.8.0",
/api\retrofit\interfaces\MiniTiebaApi.kt:67:            @retrofit2.http.Header(Header.USER_AGENT) user_agent: String = "bdtb for Android $client_version",
/api\retrofit\interfaces\MiniTiebaApi.kt:68:            @Field("cuid_gid") cuid_gid: String = "",
/api\retrofit\interfaces\MiniTiebaApi.kt:69:            @Field("agree_type") agree_type: Int = 2,
/api\retrofit\interfaces\MiniTiebaApi.kt:70:            @Field("obj_type") obj_type: Int = 3,
/api\retrofit\interfaces\MiniTiebaApi.kt:71:            @Field("op_type") op_type: Int = 1,
/api\retrofit\interfaces\MiniTiebaApi.kt:72:            @Field("tbs") tbs: String = AccountUtil.getLoginInfo(BaseApplication.instance)!!.itbTbs,
/api\retrofit\interfaces\MiniTiebaApi.kt:73:            @Field("stoken") stoken: String = AccountUtil.getSToken(BaseApplication.instance)!!
/api\retrofit\interfaces\MiniTiebaApi.kt:74:    ): Call<AgreeBean>
/api\retrofit\interfaces\MiniTiebaApi.kt:76:    @Headers("${Header.FORCE_LOGIN}: ${Header.FORCE_LOGIN_TRUE}")
/api\retrofit\interfaces\MiniTiebaApi.kt:77:    @POST("/c/f/forum/forumrecommend")
/api\retrofit\interfaces\MiniTiebaApi.kt:78:    @FormUrlEncoded
/api\retrofit\interfaces\MiniTiebaApi.kt:79:    fun forumRecommend(
/api\retrofit\interfaces\MiniTiebaApi.kt:80:            @Field("like_forum") like_forum: String = "1",
/api\retrofit\interfaces\MiniTiebaApi.kt:81:            @Field("recommend") recommend: String = "0",
/api\retrofit\interfaces\MiniTiebaApi.kt:82:            @Field("topic") topic: String = "0"
/api\retrofit\interfaces\MiniTiebaApi.kt:83:    ): Call<ForumRecommend>
/api\retrofit\interfaces\MiniTiebaApi.kt:85:    @POST("/c/f/frs/page")
/api\retrofit\interfaces\MiniTiebaApi.kt:86:    @FormUrlEncoded
/api\retrofit\interfaces\MiniTiebaApi.kt:87:    fun forumPage(
/api\retrofit\interfaces\MiniTiebaApi.kt:88:            @Field("kw") forumName: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:89:            @Field("pn") page: Int = 1,
/api\retrofit\interfaces\MiniTiebaApi.kt:90:            @Field("sort_type") sort_type: Int,
/api\retrofit\interfaces\MiniTiebaApi.kt:91:            @Field("cid") goodClassifyId: String? = null,
/api\retrofit\interfaces\MiniTiebaApi.kt:92:            @Field("is_good") is_good: String? = if (TextUtils.isEmpty(goodClassifyId)) null else "1",
/api\retrofit\interfaces\MiniTiebaApi.kt:93:            @Field("q_type") q_type: String = "2",
/api\retrofit\interfaces\MiniTiebaApi.kt:94:            @Field("st_type") st_type: String = "tb_forumlist",
/api\retrofit\interfaces\MiniTiebaApi.kt:95:            @Field("with_group") with_group: String = "0",
/api\retrofit\interfaces\MiniTiebaApi.kt:96:            @Field("rn") rn: String = "20",
/api\retrofit\interfaces\MiniTiebaApi.kt:97:            @Field("scr_dip") scr_dip: String = ScreenInfo.DENSITY.toString(),
/api\retrofit\interfaces\MiniTiebaApi.kt:98:            @Field("scr_h") scr_h: String = getScreenHeight().toString(),
/api\retrofit\interfaces\MiniTiebaApi.kt:99:            @Field("scr_w") scr_w: String = getScreenWidth().toString()
/api\retrofit\interfaces\MiniTiebaApi.kt:100:    ): Call<ForumPageBean>
/api\retrofit\interfaces\MiniTiebaApi.kt:102:    @POST("/c/f/pb/floor")
/api\retrofit\interfaces\MiniTiebaApi.kt:103:    @FormUrlEncoded
/api\retrofit\interfaces\MiniTiebaApi.kt:104:    fun floor(
/api\retrofit\interfaces\MiniTiebaApi.kt:105:            @Field("kz") threadId: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:106:            @Field("pn") page: Int = 1,
/api\retrofit\interfaces\MiniTiebaApi.kt:107:            @Field("pid") postId: String?,
/api\retrofit\interfaces\MiniTiebaApi.kt:108:            @Field("spid") subPostId: String?,
/api\retrofit\interfaces\MiniTiebaApi.kt:109:            @Field("rn") rn: Int = 20
/api\retrofit\interfaces\MiniTiebaApi.kt:110:    ): Call<SubFloorListBean>
/api\retrofit\interfaces\MiniTiebaApi.kt:112:    @Headers("${Header.FORCE_LOGIN}: ${Header.FORCE_LOGIN_TRUE}")
/api\retrofit\interfaces\MiniTiebaApi.kt:113:    @POST("/c/f/forum/like")
/api\retrofit\interfaces\MiniTiebaApi.kt:114:    @FormUrlEncoded
/api\retrofit\interfaces\MiniTiebaApi.kt:115:    fun userLikeForum(
/api\retrofit\interfaces\MiniTiebaApi.kt:116:            @Field("page_no") page: Int = 1,
/api\retrofit\interfaces\MiniTiebaApi.kt:117:            @Field("page_size") pageSize: Int = 50,
/api\retrofit\interfaces\MiniTiebaApi.kt:118:            @Field("uid") uid: String?,
/api\retrofit\interfaces\MiniTiebaApi.kt:119:            @Field("friend_uid") friendUid: String?,
/api\retrofit\interfaces\MiniTiebaApi.kt:120:            @Field("is_guest") is_guest: String?
/api\retrofit\interfaces\MiniTiebaApi.kt:121:    ): Call<UserLikeForumBean>
/api\retrofit\interfaces\MiniTiebaApi.kt:123:    @POST("/c/u/feed/userpost")
/api\retrofit\interfaces\MiniTiebaApi.kt:124:    @FormUrlEncoded
/api\retrofit\interfaces\MiniTiebaApi.kt:125:    fun userPost(
/api\retrofit\interfaces\MiniTiebaApi.kt:126:            @Field("uid") uid: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:127:            @Field("pn") page: Int = 1,
/api\retrofit\interfaces\MiniTiebaApi.kt:128:            @Field("is_thread") is_thread: Int,
/api\retrofit\interfaces\MiniTiebaApi.kt:129:            @Field("rn") pageSize: Int = 20,
/api\retrofit\interfaces\MiniTiebaApi.kt:130:            @Field("need_content") need_content: Int = 1
/api\retrofit\interfaces\MiniTiebaApi.kt:131:    ): Call<UserPostBean>
/api\retrofit\interfaces\MiniTiebaApi.kt:133:    @POST("/c/f/pb/picpage")
/api\retrofit\interfaces\MiniTiebaApi.kt:134:    @FormUrlEncoded
/api\retrofit\interfaces\MiniTiebaApi.kt:135:    fun picPage(
/api\retrofit\interfaces\MiniTiebaApi.kt:136:            @Field("forum_id") forumId: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:137:            @Field("kw") forumName: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:138:            @Field("tid") threadId: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:139:            @Field("pic_id") picId: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:140:            @Field("pic_index") picIndex: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:141:            @Field("obj_type") objType: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:142:            @Field("page_name") page_name: String = "PB",
/api\retrofit\interfaces\MiniTiebaApi.kt:143:            @Field("next") next: Int = 10,
/api\retrofit\interfaces\MiniTiebaApi.kt:144:            @Field("user_id") myUid: String? = AccountUtil.getUid(BaseApplication.instance),
/api\retrofit\interfaces\MiniTiebaApi.kt:145:            @Field("scr_h") scr_h: String = getScreenHeight().toString(),
/api\retrofit\interfaces\MiniTiebaApi.kt:146:            @Field("scr_w") scr_w: String = getScreenWidth().toString(),
/api\retrofit\interfaces\MiniTiebaApi.kt:147:            @Field("q_type") q_type: Int = 2,
/api\retrofit\interfaces\MiniTiebaApi.kt:148:            @Field("prev") prev: Int,
/api\retrofit\interfaces\MiniTiebaApi.kt:149:            @Field("not_see_lz") not_see_lz: Int
/api\retrofit\interfaces\MiniTiebaApi.kt:150:    ): Call<PicPageBean>
/api\retrofit\interfaces\MiniTiebaApi.kt:152:    @POST("/c/u/user/profile")
/api\retrofit\interfaces\MiniTiebaApi.kt:153:    @FormUrlEncoded
/api\retrofit\interfaces\MiniTiebaApi.kt:154:    fun profile(
/api\retrofit\interfaces\MiniTiebaApi.kt:155:            @Field("uid") uid: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:156:            @Field("need_post_count") need_post_count: Int = 1
/api\retrofit\interfaces\MiniTiebaApi.kt:157:    ): Call<ProfileBean>
/api\retrofit\interfaces\MiniTiebaApi.kt:159:    @Headers("${Header.FORCE_LOGIN}: ${Header.FORCE_LOGIN_TRUE}")
/api\retrofit\interfaces\MiniTiebaApi.kt:160:    @POST("/c/c/forum/unlike")
/api\retrofit\interfaces\MiniTiebaApi.kt:161:    @FormUrlEncoded
/api\retrofit\interfaces\MiniTiebaApi.kt:162:    fun unlikeForum(
/api\retrofit\interfaces\MiniTiebaApi.kt:163:            @Field("fid") forumId: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:164:            @Field("kw") forumName: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:165:            @Field("tbs") tbs: String? = AccountUtil.getLoginInfo(BaseApplication.instance)?.itbTbs
/api\retrofit\interfaces\MiniTiebaApi.kt:166:    ): Call<CommonResponse>
/api\retrofit\interfaces\MiniTiebaApi.kt:168:    @Headers("${Header.FORCE_LOGIN}: ${Header.FORCE_LOGIN_TRUE}")
/api\retrofit\interfaces\MiniTiebaApi.kt:169:    @POST("/c/c/forum/like")
/api\retrofit\interfaces\MiniTiebaApi.kt:170:    @FormUrlEncoded
/api\retrofit\interfaces\MiniTiebaApi.kt:171:    fun likeForum(
/api\retrofit\interfaces\MiniTiebaApi.kt:172:            @Field("fid") forumId: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:173:            @Field("kw") forumName: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:174:            @Field("tbs") tbs: String? = AccountUtil.getLoginInfo(BaseApplication.instance)?.itbTbs
/api\retrofit\interfaces\MiniTiebaApi.kt:175:    ): Call<LikeForumResultBean>
/api\retrofit\interfaces\MiniTiebaApi.kt:177:    @Headers("${Header.FORCE_LOGIN}: ${Header.FORCE_LOGIN_TRUE}")
/api\retrofit\interfaces\MiniTiebaApi.kt:178:    @POST("/c/c/forum/sign")
/api\retrofit\interfaces\MiniTiebaApi.kt:179:    @FormUrlEncoded
/api\retrofit\interfaces\MiniTiebaApi.kt:180:    fun sign(
/api\retrofit\interfaces\MiniTiebaApi.kt:181:            @Field("kw") forumName: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:182:            @Field("tbs") tbs: String
/api\retrofit\interfaces\MiniTiebaApi.kt:183:    ): Call<SignResultBean>
/api\retrofit\interfaces\MiniTiebaApi.kt:185:    @Headers("${Header.FORCE_LOGIN}: ${Header.FORCE_LOGIN_TRUE}")
/api\retrofit\interfaces\MiniTiebaApi.kt:186:    @POST("/c/c/bawu/delthread")
/api\retrofit\interfaces\MiniTiebaApi.kt:187:    @FormUrlEncoded
/api\retrofit\interfaces\MiniTiebaApi.kt:188:    fun delThread(
/api\retrofit\interfaces\MiniTiebaApi.kt:189:            @Field("fid") forumId: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:190:            @Field("word") forumName: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:191:            @Field("z") threadId: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:192:            @Field("tbs") tbs: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:193:            @Field("src") src: Int = 1,
/api\retrofit\interfaces\MiniTiebaApi.kt:194:            @Field("is_vipdel") is_vip_del: Int = 0,
/api\retrofit\interfaces\MiniTiebaApi.kt:195:            @Field("delete_my_post") delete_my_post: Int = 1
/api\retrofit\interfaces\MiniTiebaApi.kt:196:    ): Call<CommonResponse>
/api\retrofit\interfaces\MiniTiebaApi.kt:198:    @Headers("${Header.FORCE_LOGIN}: ${Header.FORCE_LOGIN_TRUE}")
/api\retrofit\interfaces\MiniTiebaApi.kt:199:    @POST("/c/c/bawu/delpost")
/api\retrofit\interfaces\MiniTiebaApi.kt:200:    @FormUrlEncoded
/api\retrofit\interfaces\MiniTiebaApi.kt:201:    fun delPost(
/api\retrofit\interfaces\MiniTiebaApi.kt:202:            @Field("fid") forumId: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:203:            @Field("word") forumName: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:204:            @Field("z") threadId: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:205:            @Field("pid") postId: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:206:            @Field("tbs") tbs: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:207:            @Field("isfloor") is_floor: Int,
/api\retrofit\interfaces\MiniTiebaApi.kt:208:            @Field("src") src: Int,
/api\retrofit\interfaces\MiniTiebaApi.kt:209:            @Field("is_vipdel") is_vip_del: Int,
/api\retrofit\interfaces\MiniTiebaApi.kt:210:            @Field("delete_my_post") delete_my_post: Int
/api\retrofit\interfaces\MiniTiebaApi.kt:211:    ): Call<CommonResponse>
/api\retrofit\interfaces\MiniTiebaApi.kt:213:    @POST("/c/s/searchpost")
/api\retrofit\interfaces\MiniTiebaApi.kt:214:    @FormUrlEncoded
/api\retrofit\interfaces\MiniTiebaApi.kt:215:    fun searchPost(
/api\retrofit\interfaces\MiniTiebaApi.kt:216:            @Field("word") keyword: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:217:            @Field("kw") forumName: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:218:            @Field("pn") page: Int = 1,
/api\retrofit\interfaces\MiniTiebaApi.kt:219:            @Field("rn") pageSize: Int = 30,
/api\retrofit\interfaces\MiniTiebaApi.kt:220:            @Field("only_thread") only_thread: Int = 0
/api\retrofit\interfaces\MiniTiebaApi.kt:221:    ): Call<SearchPostBean>
/api\retrofit\interfaces\MiniTiebaApi.kt:223:    @GET("/mo/q/search/user")
/api\retrofit\interfaces\MiniTiebaApi.kt:224:    fun searchUser(
/api\retrofit\interfaces\MiniTiebaApi.kt:225:            @Query("word") keyword: String,
/api\retrofit\interfaces\MiniTiebaApi.kt:226:            @retrofit2.http.Header("client_user_token") client_user_token: String? = AccountUtil.getUid(BaseApplication.instance),
/api\retrofit\interfaces\MiniTiebaApi.kt:227:            @Query("_client_version") client_version: String = "8.0.8.0",
/api\retrofit\interfaces\MiniTiebaApi.kt:228:            @retrofit2.http.Header(Header.USER_AGENT) user_agent: String = "bdtb for Android $client_version",
/api\retrofit\interfaces\MiniTiebaApi.kt:229:            @Query("cuid_gid") cuid_gid: String = ""
/api\retrofit\interfaces\MiniTiebaApi.kt:230:    ): Call<SearchUserBean>
/api\retrofit\interfaces\MiniTiebaApi.kt:231:}/api\retrofit\interfaces\NewTiebaApi.kt:1:package com.huanchengfly.tieba.post.api.retrofit.interfaces
/api\retrofit\interfaces\NewTiebaApi.kt:3:import com.huanchengfly.tieba.post.api.models.CommonResponse
/api\retrofit\interfaces\NewTiebaApi.kt:4:import com.huanchengfly.tieba.post.api.models.MessageListBean
/api\retrofit\interfaces\NewTiebaApi.kt:5:import com.huanchengfly.tieba.post.api.models.MsgBean
/api\retrofit\interfaces\NewTiebaApi.kt:6:import com.huanchengfly.tieba.post.api.models.ThreadStoreBean
/api\retrofit\interfaces\NewTiebaApi.kt:7:import com.huanchengfly.tieba.post.api.Header
/api\retrofit\interfaces\NewTiebaApi.kt:8:import io.michaelrocks.paranoid.Obfuscate
/api\retrofit\interfaces\NewTiebaApi.kt:9:import retrofit2.Call
/api\retrofit\interfaces\NewTiebaApi.kt:10:import retrofit2.http.Field
/api\retrofit\interfaces\NewTiebaApi.kt:11:import retrofit2.http.FormUrlEncoded
/api\retrofit\interfaces\NewTiebaApi.kt:12:import retrofit2.http.Headers
/api\retrofit\interfaces\NewTiebaApi.kt:13:import retrofit2.http.POST
/api\retrofit\interfaces\NewTiebaApi.kt:15:@Obfuscate
/api\retrofit\interfaces\NewTiebaApi.kt:16:interface NewTiebaApi {
/api\retrofit\interfaces\NewTiebaApi.kt:17:    @Headers("${Header.FORCE_LOGIN}: ${Header.FORCE_LOGIN_TRUE}")
/api\retrofit\interfaces\NewTiebaApi.kt:18:    @POST("/c/s/msg")
/api\retrofit\interfaces\NewTiebaApi.kt:19:    @FormUrlEncoded
/api\retrofit\interfaces\NewTiebaApi.kt:20:    fun msg(
/api\retrofit\interfaces\NewTiebaApi.kt:21:            @Field("bookmark") bookmark: Int = 1
/api\retrofit\interfaces\NewTiebaApi.kt:22:    ): Call<MsgBean>
/api\retrofit\interfaces\NewTiebaApi.kt:24:    @Headers("${Header.FORCE_LOGIN}: ${Header.FORCE_LOGIN_TRUE}")
/api\retrofit\interfaces\NewTiebaApi.kt:25:    @POST("/c/f/post/threadstore")
/api\retrofit\interfaces\NewTiebaApi.kt:26:    @FormUrlEncoded
/api\retrofit\interfaces\NewTiebaApi.kt:27:    fun threadStore(
/api\retrofit\interfaces\NewTiebaApi.kt:28:            @Field("rn") pageSize: Int,
/api\retrofit\interfaces\NewTiebaApi.kt:29:            @Field("offset") offset: Int,
/api\retrofit\interfaces\NewTiebaApi.kt:30:            @Field("user_id") user_id: String?
/api\retrofit\interfaces\NewTiebaApi.kt:31:    ): Call<ThreadStoreBean>
/api\retrofit\interfaces\NewTiebaApi.kt:33:    @Headers("${Header.FORCE_LOGIN}: ${Header.FORCE_LOGIN_TRUE}")
/api\retrofit\interfaces\NewTiebaApi.kt:34:    @POST("/c/c/post/rmstore")
/api\retrofit\interfaces\NewTiebaApi.kt:35:    @FormUrlEncoded
/api\retrofit\interfaces\NewTiebaApi.kt:36:    fun removeStore(
/api\retrofit\interfaces\NewTiebaApi.kt:37:            @Field("tid") threadId: String,
/api\retrofit\interfaces\NewTiebaApi.kt:38:            @Field("tbs") tbs: String
/api\retrofit\interfaces\NewTiebaApi.kt:39:    ): Call<CommonResponse>
/api\retrofit\interfaces\NewTiebaApi.kt:41:    @Headers("${Header.FORCE_LOGIN}: ${Header.FORCE_LOGIN_TRUE}")
/api\retrofit\interfaces\NewTiebaApi.kt:42:    @POST("/c/c/post/addstore")
/api\retrofit\interfaces\NewTiebaApi.kt:43:    @FormUrlEncoded
/api\retrofit\interfaces\NewTiebaApi.kt:44:    fun addStore(
/api\retrofit\interfaces\NewTiebaApi.kt:45:            @Field("data") data: String,
/api\retrofit\interfaces\NewTiebaApi.kt:46:            @Field("tbs") tbs: String
/api\retrofit\interfaces\NewTiebaApi.kt:47:    ): Call<CommonResponse>
/api\retrofit\interfaces\NewTiebaApi.kt:49:    @Headers("${Header.FORCE_LOGIN}: ${Header.FORCE_LOGIN_TRUE}")
/api\retrofit\interfaces\NewTiebaApi.kt:50:    @POST("/c/u/feed/replyme")
/api\retrofit\interfaces\NewTiebaApi.kt:51:    @FormUrlEncoded
/api\retrofit\interfaces\NewTiebaApi.kt:52:    fun replyMe(
/api\retrofit\interfaces\NewTiebaApi.kt:53:            @Field("pn") page: Int = 0
/api\retrofit\interfaces\NewTiebaApi.kt:54:    ): Call<MessageListBean>
/api\retrofit\interfaces\NewTiebaApi.kt:56:    @Headers("${Header.FORCE_LOGIN}: ${Header.FORCE_LOGIN_TRUE}")
/api\retrofit\interfaces\NewTiebaApi.kt:57:    @POST("/c/u/feed/atme")
/api\retrofit\interfaces\NewTiebaApi.kt:58:    @FormUrlEncoded
/api\retrofit\interfaces\NewTiebaApi.kt:59:    fun atMe(
/api\retrofit\interfaces\NewTiebaApi.kt:60:            @Field("pn") page: Int = 0
/api\retrofit\interfaces\NewTiebaApi.kt:61:    ): Call<MessageListBean>
/api\retrofit\interfaces\NewTiebaApi.kt:62:}/api\retrofit\interfaces\OfficialTiebaApi.kt:1:package com.huanchengfly.tieba.post.api.retrofit.interfaces
/api\retrofit\interfaces\OfficialTiebaApi.kt:3:import com.huanchengfly.tieba.post.api.getScreenHeight
/api\retrofit\interfaces\OfficialTiebaApi.kt:4:import com.huanchengfly.tieba.post.api.getScreenWidth
/api\retrofit\interfaces\OfficialTiebaApi.kt:5:import com.huanchengfly.tieba.post.api.models.CommonResponse
/api\retrofit\interfaces\OfficialTiebaApi.kt:6:import com.huanchengfly.tieba.post.api.models.ThreadContentBean
/api\retrofit\interfaces\OfficialTiebaApi.kt:7:import com.huanchengfly.tieba.post.api.Header
/api\retrofit\interfaces\OfficialTiebaApi.kt:8:import com.huanchengfly.tieba.post.BaseApplication
/api\retrofit\interfaces\OfficialTiebaApi.kt:9:import com.huanchengfly.tieba.post.BaseApplication.ScreenInfo
/api\retrofit\interfaces\OfficialTiebaApi.kt:10:import com.huanchengfly.tieba.post.utils.AccountUtil
/api\retrofit\interfaces\OfficialTiebaApi.kt:11:import io.michaelrocks.paranoid.Obfuscate
/api\retrofit\interfaces\OfficialTiebaApi.kt:12:import retrofit2.Call
/api\retrofit\interfaces\OfficialTiebaApi.kt:13:import retrofit2.http.Field
/api\retrofit\interfaces\OfficialTiebaApi.kt:14:import retrofit2.http.FormUrlEncoded
/api\retrofit\interfaces\OfficialTiebaApi.kt:15:import retrofit2.http.Headers
/api\retrofit\interfaces\OfficialTiebaApi.kt:16:import retrofit2.http.POST
/api\retrofit\interfaces\OfficialTiebaApi.kt:18:@Obfuscate
/api\retrofit\interfaces\OfficialTiebaApi.kt:19:interface OfficialTiebaApi {
/api\retrofit\interfaces\OfficialTiebaApi.kt:20:    @POST("/c/f/pb/page")
/api\retrofit\interfaces\OfficialTiebaApi.kt:21:    @FormUrlEncoded
/api\retrofit\interfaces\OfficialTiebaApi.kt:22:    fun threadContent(
/api\retrofit\interfaces\OfficialTiebaApi.kt:23:            @Field("kz") threadId: String,
/api\retrofit\interfaces\OfficialTiebaApi.kt:24:            @Field("pn") page: Int,
/api\retrofit\interfaces\OfficialTiebaApi.kt:25:            @Field("last") last: String?,
/api\retrofit\interfaces\OfficialTiebaApi.kt:26:            @Field("r") r: String?,
/api\retrofit\interfaces\OfficialTiebaApi.kt:27:            @Field("lz") lz: Int,
/api\retrofit\interfaces\OfficialTiebaApi.kt:28:            @Field("st_type") st_type: String = "tb_frslist",
/api\retrofit\interfaces\OfficialTiebaApi.kt:29:            @Field("back") back: String = "0",
/api\retrofit\interfaces\OfficialTiebaApi.kt:30:            @Field("floor_rn") floor_rn: String = "3",
/api\retrofit\interfaces\OfficialTiebaApi.kt:31:            @Field("mark") mark: String = "0",
/api\retrofit\interfaces\OfficialTiebaApi.kt:32:            @Field("rn") rn: String = "30",
/api\retrofit\interfaces\OfficialTiebaApi.kt:33:            @Field("with_floor") with_floor: String = "1",
/api\retrofit\interfaces\OfficialTiebaApi.kt:34:            @Field("scr_dip") scr_dip: String = ScreenInfo.DENSITY.toString(),
/api\retrofit\interfaces\OfficialTiebaApi.kt:35:            @Field("scr_h") scr_h: String = getScreenHeight().toString(),
/api\retrofit\interfaces\OfficialTiebaApi.kt:36:            @Field("scr_w") scr_w: String = getScreenWidth().toString()
/api\retrofit\interfaces\OfficialTiebaApi.kt:37:    ): Call<ThreadContentBean>
/api\retrofit\interfaces\OfficialTiebaApi.kt:39:    @POST("/c/f/pb/page")
/api\retrofit\interfaces\OfficialTiebaApi.kt:40:    @FormUrlEncoded
/api\retrofit\interfaces\OfficialTiebaApi.kt:41:    fun threadContent(
/api\retrofit\interfaces\OfficialTiebaApi.kt:42:            @Field("kz") threadId: String,
/api\retrofit\interfaces\OfficialTiebaApi.kt:43:            @Field("pid") postId: String?,
/api\retrofit\interfaces\OfficialTiebaApi.kt:44:            @Field("last") last: String?,
/api\retrofit\interfaces\OfficialTiebaApi.kt:45:            @Field("r") r: String?,
/api\retrofit\interfaces\OfficialTiebaApi.kt:46:            @Field("lz") lz: Int,
/api\retrofit\interfaces\OfficialTiebaApi.kt:47:            @Field("st_type") st_type: String = "tb_frslist",
/api\retrofit\interfaces\OfficialTiebaApi.kt:48:            @Field("back") back: String = "0",
/api\retrofit\interfaces\OfficialTiebaApi.kt:49:            @Field("floor_rn") floor_rn: String = "3",
/api\retrofit\interfaces\OfficialTiebaApi.kt:50:            @Field("mark") mark: String = "0",
/api\retrofit\interfaces\OfficialTiebaApi.kt:51:            @Field("rn") rn: String = "30",
/api\retrofit\interfaces\OfficialTiebaApi.kt:52:            @Field("with_floor") with_floor: String = "1",
/api\retrofit\interfaces\OfficialTiebaApi.kt:53:            @Field("scr_dip") scr_dip: String = ScreenInfo.DENSITY.toString(),
/api\retrofit\interfaces\OfficialTiebaApi.kt:54:            @Field("scr_h") scr_h: String = getScreenHeight().toString(),
/api\retrofit\interfaces\OfficialTiebaApi.kt:55:            @Field("scr_w") scr_w: String = getScreenWidth().toString()
/api\retrofit\interfaces\OfficialTiebaApi.kt:56:    ): Call<ThreadContentBean>
/api\retrofit\interfaces\OfficialTiebaApi.kt:58:    @Headers("${Header.FORCE_LOGIN}: ${Header.FORCE_LOGIN_TRUE}")
/api\retrofit\interfaces\OfficialTiebaApi.kt:59:    @POST("/c/c/excellent/submitDislike")
/api\retrofit\interfaces\OfficialTiebaApi.kt:60:    @FormUrlEncoded
/api\retrofit\interfaces\OfficialTiebaApi.kt:61:    fun submitDislike(
/api\retrofit\interfaces\OfficialTiebaApi.kt:62:            @Field("dislike") dislike: String,
/api\retrofit\interfaces\OfficialTiebaApi.kt:63:            @Field("dislike_from") dislike_from: String = "homepage",
/api\retrofit\interfaces\OfficialTiebaApi.kt:64:            @Field("stoken") stoken: String = AccountUtil.getSToken(BaseApplication.instance)!!
/api\retrofit\interfaces\OfficialTiebaApi.kt:65:    ): Call<CommonResponse>
/api\retrofit\interfaces\OfficialTiebaApi.kt:66:}/api\retrofit\interfaces\WebTiebaApi.kt:1:package com.huanchengfly.tieba.post.api.retrofit.interfaces
/api\retrofit\interfaces\WebTiebaApi.kt:3:import android.text.TextUtils
/api\retrofit\interfaces\WebTiebaApi.kt:4:import com.huanchengfly.tieba.post.api.models.*
/api\retrofit\interfaces\WebTiebaApi.kt:5:import com.huanchengfly.tieba.post.api.models.web.*
/api\retrofit\interfaces\WebTiebaApi.kt:6:import com.huanchengfly.tieba.post.api.Header
/api\retrofit\interfaces\WebTiebaApi.kt:7:import com.huanchengfly.tieba.post.models.MyInfoBean
/api\retrofit\interfaces\WebTiebaApi.kt:8:import io.michaelrocks.paranoid.Obfuscate
/api\retrofit\interfaces\WebTiebaApi.kt:9:import retrofit2.Call
/api\retrofit\interfaces\WebTiebaApi.kt:10:import retrofit2.http.*
/api\retrofit\interfaces\WebTiebaApi.kt:12:@Obfuscate
/api\retrofit\interfaces\WebTiebaApi.kt:13:interface WebTiebaApi {
/api\retrofit\interfaces\WebTiebaApi.kt:14:    @Headers(
/api\retrofit\interfaces\WebTiebaApi.kt:15:            "${Header.FORCE_LOGIN}: ${Header.FORCE_LOGIN_TRUE}"
/api\retrofit\interfaces\WebTiebaApi.kt:16:    )
/api\retrofit\interfaces\WebTiebaApi.kt:17:    @GET
/api\retrofit\interfaces\WebTiebaApi.kt:18:    fun follow(
/api\retrofit\interfaces\WebTiebaApi.kt:19:            @Url url: String
/api\retrofit\interfaces\WebTiebaApi.kt:20:    ): Call<CommonResponse>
/api\retrofit\interfaces\WebTiebaApi.kt:22:    @Headers(
/api\retrofit\interfaces\WebTiebaApi.kt:23:            "${Header.FORCE_LOGIN}: ${Header.FORCE_LOGIN_TRUE}"
/api\retrofit\interfaces\WebTiebaApi.kt:24:    )
/api\retrofit\interfaces\WebTiebaApi.kt:25:    @GET
/api\retrofit\interfaces\WebTiebaApi.kt:26:    fun unfollow(
/api\retrofit\interfaces\WebTiebaApi.kt:27:            @Url url: String
/api\retrofit\interfaces\WebTiebaApi.kt:28:    ): Call<CommonResponse>
/api\retrofit\interfaces\WebTiebaApi.kt:30:    @GET("/mo/q/hotMessage/main")
/api\retrofit\interfaces\WebTiebaApi.kt:31:    fun hotTopicMain(
/api\retrofit\interfaces\WebTiebaApi.kt:32:            @Query("topic_id") topicId: String,
/api\retrofit\interfaces\WebTiebaApi.kt:33:            @Query("yuren_rand") yurenRand: String,
/api\retrofit\interfaces\WebTiebaApi.kt:34:            @Query("topic_name") topicName: String,
/api\retrofit\interfaces\WebTiebaApi.kt:35:            @Query("pmy_topic_ext") pmyTopicExt: String
/api\retrofit\interfaces\WebTiebaApi.kt:36:    ): Call<HotTopicMainBean>
/api\retrofit\interfaces\WebTiebaApi.kt:38:    @GET("/mo/q/hotMessage/forum")
/api\retrofit\interfaces\WebTiebaApi.kt:39:    fun hotTopicForum(
/api\retrofit\interfaces\WebTiebaApi.kt:40:            @Query("topic_id") topicId: String,
/api\retrofit\interfaces\WebTiebaApi.kt:41:            @Query("yuren_rand") yurenRand: String,
/api\retrofit\interfaces\WebTiebaApi.kt:42:            @Query("topic_name") topicName: String,
/api\retrofit\interfaces\WebTiebaApi.kt:43:            @Query("pmy_topic_ext") pmyTopicExt: String
/api\retrofit\interfaces\WebTiebaApi.kt:44:    ): Call<HotTopicForumBean>
/api\retrofit\interfaces\WebTiebaApi.kt:46:    @GET("/mo/q/hotMessage/thread")
/api\retrofit\interfaces\WebTiebaApi.kt:47:    fun hotTopicThread(
/api\retrofit\interfaces\WebTiebaApi.kt:48:            @Query("topic_id") topicId: String,
/api\retrofit\interfaces\WebTiebaApi.kt:49:            @Query("yuren_rand") yurenRand: String,
/api\retrofit\interfaces\WebTiebaApi.kt:50:            @Query("topic_name") topicName: String,
/api\retrofit\interfaces\WebTiebaApi.kt:51:            @Query("pmy_topic_ext") pmyTopicExt: String,
/api\retrofit\interfaces\WebTiebaApi.kt:52:            @Query("page") page: Int,
/api\retrofit\interfaces\WebTiebaApi.kt:53:            @Query("num") num: Int = 30,
/api\retrofit\interfaces\WebTiebaApi.kt:54:            @Query("forum_id") forum_id: String = ""
/api\retrofit\interfaces\WebTiebaApi.kt:55:    ): Call<HotTopicThreadBean>
/api\retrofit\interfaces\WebTiebaApi.kt:57:    @GET("/mo/q/hotMessage")
/api\retrofit\interfaces\WebTiebaApi.kt:58:    fun hotTopic(
/api\retrofit\interfaces\WebTiebaApi.kt:59:            @Query("topic_id") topicId: String,
/api\retrofit\interfaces\WebTiebaApi.kt:60:            @Query("topic_name") topicName: String,
/api\retrofit\interfaces\WebTiebaApi.kt:61:            @Query("fr") fr: String = "newwise"
/api\retrofit\interfaces\WebTiebaApi.kt:62:    ): Call<HotTopicBean>
/api\retrofit\interfaces\WebTiebaApi.kt:64:    @GET("/mo/q/hotMessage/list?fr=newwise")
/api\retrofit\interfaces\WebTiebaApi.kt:65:    fun hotMessageList(): Call<HotMessageListBean>
/api\retrofit\interfaces\WebTiebaApi.kt:67:    @GET("/f")
/api\retrofit\interfaces\WebTiebaApi.kt:68:    fun frs(
/api\retrofit\interfaces\WebTiebaApi.kt:69:            @Query("kw") forumName: String,
/api\retrofit\interfaces\WebTiebaApi.kt:70:            @Query("pn") pn: Int,
/api\retrofit\interfaces\WebTiebaApi.kt:71:            @Query("sort_type") sort_type: Int,
/api\retrofit\interfaces\WebTiebaApi.kt:72:            @Query("cid") cid: String?,
/api\retrofit\interfaces\WebTiebaApi.kt:73:            @Query("lm") lm: String? = if (!TextUtils.isEmpty(cid)) "4" else null,
/api\retrofit\interfaces\WebTiebaApi.kt:74:            @Query("fr") fr: String = "newwise"
/api\retrofit\interfaces\WebTiebaApi.kt:75:    ): Call<ForumBean>
/api\retrofit\interfaces\WebTiebaApi.kt:77:    @Headers(
/api\retrofit\interfaces\WebTiebaApi.kt:78:            "${Header.ADD_COOKIE}: ${Header.ADD_COOKIE_FALSE}"
/api\retrofit\interfaces\WebTiebaApi.kt:79:    )
/api\retrofit\interfaces\WebTiebaApi.kt:80:    @GET("/mo/q/newmoindex?need_user=1")
/api\retrofit\interfaces\WebTiebaApi.kt:81:    fun myInfo(
/api\retrofit\interfaces\WebTiebaApi.kt:82:            @retrofit2.http.Header("cookie") cookie: String
/api\retrofit\interfaces\WebTiebaApi.kt:83:    ): Call<MyInfoBean>
/api\retrofit\interfaces\WebTiebaApi.kt:85:    @GET("/mo/q/search/forum")
/api\retrofit\interfaces\WebTiebaApi.kt:86:    fun searchForum(
/api\retrofit\interfaces\WebTiebaApi.kt:87:            @Query("word") keyword: String
/api\retrofit\interfaces\WebTiebaApi.kt:88:    ): Call<SearchForumBean>
/api\retrofit\interfaces\WebTiebaApi.kt:90:    @GET("/mo/q/search/thread")
/api\retrofit\interfaces\WebTiebaApi.kt:91:    fun searchThread(
/api\retrofit\interfaces\WebTiebaApi.kt:92:            @Query("word") keyword: String,
/api\retrofit\interfaces\WebTiebaApi.kt:93:            @Query("pn") page: Int,
/api\retrofit\interfaces\WebTiebaApi.kt:94:            @Query("st") order: String,
/api\retrofit\interfaces\WebTiebaApi.kt:95:            @Query("tt") filter: String,
/api\retrofit\interfaces\WebTiebaApi.kt:96:            @Query("ct") ct: String = "2"
/api\retrofit\interfaces\WebTiebaApi.kt:97:    ): Call<SearchThreadBean>
/api\retrofit\interfaces\WebTiebaApi.kt:99:    @Headers(
/api\retrofit\interfaces\WebTiebaApi.kt:100:            "${Header.FORCE_LOGIN}: ${Header.FORCE_LOGIN_TRUE}"
/api\retrofit\interfaces\WebTiebaApi.kt:101:    )
/api\retrofit\interfaces\WebTiebaApi.kt:102:    @POST("/mo/q/cooluploadpic")
/api\retrofit\interfaces\WebTiebaApi.kt:103:    @FormUrlEncoded
/api\retrofit\interfaces\WebTiebaApi.kt:104:    fun webUploadPic(
/api\retrofit\interfaces\WebTiebaApi.kt:105:            @Field("pic") base64: String?,
/api\retrofit\interfaces\WebTiebaApi.kt:106:            @Query("type") type: String = "ajax",
/api\retrofit\interfaces\WebTiebaApi.kt:107:            @Query("r") r: String = Math.random().toString()
/api\retrofit\interfaces\WebTiebaApi.kt:108:    ): Call<WebUploadPicBean>
/api\retrofit\interfaces\WebTiebaApi.kt:110:    @Headers(
/api\retrofit\interfaces\WebTiebaApi.kt:111:            "${Header.HOST}: tieba.baidu.com",
/api\retrofit\interfaces\WebTiebaApi.kt:112:            "${Header.ORIGIN}: https://tieba.baidu.com",
/api\retrofit\interfaces\WebTiebaApi.kt:113:            "X-Requested-With: XMLHttpRequest"
/api\retrofit\interfaces\WebTiebaApi.kt:114:    )
/api\retrofit\interfaces\WebTiebaApi.kt:115:    @POST("/mo/q/apubpost")
/api\retrofit\interfaces\WebTiebaApi.kt:116:    @FormUrlEncoded
/api\retrofit\interfaces\WebTiebaApi.kt:117:    fun webReply(
/api\retrofit\interfaces\WebTiebaApi.kt:118:            @Query("_t") _t_url: Long = System.currentTimeMillis(),
/api\retrofit\interfaces\WebTiebaApi.kt:119:            @Field("co") content: String,
/api\retrofit\interfaces\WebTiebaApi.kt:120:            @Field("_t") _t_form: Long = System.currentTimeMillis(),
/api\retrofit\interfaces\WebTiebaApi.kt:121:            @Field("tag") tag: String = "11",
/api\retrofit\interfaces\WebTiebaApi.kt:122:            @Field("upload_img_info") imgInfo: String,
/api\retrofit\interfaces\WebTiebaApi.kt:123:            @Field("fid") forumId: String,
/api\retrofit\interfaces\WebTiebaApi.kt:124:            @Field("src") src: String = "1",
/api\retrofit\interfaces\WebTiebaApi.kt:125:            @Field("word") forumName: String,
/api\retrofit\interfaces\WebTiebaApi.kt:126:            @Field("tbs") tbs: String,
/api\retrofit\interfaces\WebTiebaApi.kt:127:            @Field("z") threadId: String,
/api\retrofit\interfaces\WebTiebaApi.kt:128:            @Field("lp") lp: String = "6026",
/api\retrofit\interfaces\WebTiebaApi.kt:129:            @Field("nick_name") nickName: String,
/api\retrofit\interfaces\WebTiebaApi.kt:130:            @Field("pid") postId: String? = null,
/api\retrofit\interfaces\WebTiebaApi.kt:131:            @Field("lzl_id") replyPostId: String? = null,
/api\retrofit\interfaces\WebTiebaApi.kt:132:            @Field("floor") floor: String? = null,
/api\retrofit\interfaces\WebTiebaApi.kt:133:            @Field("_BSK") bsk: String,
/api\retrofit\interfaces\WebTiebaApi.kt:134:            @retrofit2.http.Header(Header.REFERER) referer: String
/api\retrofit\interfaces\WebTiebaApi.kt:135:    ): Call<WebReplyResultBean>
/api\retrofit\interfaces\WebTiebaApi.kt:136:}/components\EmotionViewFactory.java:1:package com.huanchengfly.tieba.post.components;
/components\EmotionViewFactory.java:3:import android.app.Activity;
/components\EmotionViewFactory.java:4:import android.widget.GridView;
/components\EmotionViewFactory.java:6:import com.huanchengfly.tieba.post.adapters.EmotionGridViewAdapter;
/components\EmotionViewFactory.java:7:import com.huanchengfly.tieba.post.utils.DisplayUtil;
/components\EmotionViewFactory.java:8:import com.huanchengfly.tieba.post.utils.EmotionUtil;
/components\EmotionViewFactory.java:10:public class EmotionViewFactory {
/components\EmotionViewFactory.java:11:    public static final int DEFAULT_COLUMNS_NUM = 7;
/components\EmotionViewFactory.java:13:    public static void initGridView(Activity context, int type, GridView gridView) {
/components\EmotionViewFactory.java:14:        gridView.setNumColumns(DEFAULT_COLUMNS_NUM);
/components\EmotionViewFactory.java:15:        int screenWidth = DisplayUtil.getScreenWidthPixels(context);
/components\EmotionViewFactory.java:16:        int spacing = DisplayUtil.dp2px(context, 12);
/components\EmotionViewFactory.java:17:        int itemWidth = (screenWidth - spacing * 8) / DEFAULT_COLUMNS_NUM;
/components\EmotionViewFactory.java:18:        gridView.setAdapter(new EmotionGridViewAdapter(context, type, itemWidth));
/components\EmotionViewFactory.java:19:        gridView.setOnItemClickListener(EmotionUtil.GlobalOnItemClickManagerUtil.getInstance(context).getOnItemClickListener(EmotionUtil.EMOTION_ALL_WEB_TYPE));
/components\EmotionViewFactory.java:20:    }
/components\EmotionViewFactory.java:21:}/components\LinkTouchMovementMethod.java:1:package com.huanchengfly.tieba.post.components;
/components\LinkTouchMovementMethod.java:3:import android.text.Layout;
/components\LinkTouchMovementMethod.java:4:import android.text.Selection;
/components\LinkTouchMovementMethod.java:5:import android.text.Spannable;
/components\LinkTouchMovementMethod.java:6:import android.text.method.LinkMovementMethod;
/components\LinkTouchMovementMethod.java:7:import android.text.style.ClickableSpan;
/components\LinkTouchMovementMethod.java:8:import android.view.MotionEvent;
/components\LinkTouchMovementMethod.java:9:import android.widget.TextView;
/components\LinkTouchMovementMethod.java:11:public class LinkTouchMovementMethod extends LinkMovementMethod {
/components\LinkTouchMovementMethod.java:13:    private static LinkTouchMovementMethod sInstance;
/components\LinkTouchMovementMethod.java:15:    private ClickableSpan mPressedSpan;
/components\LinkTouchMovementMethod.java:17:    @Override
/components\LinkTouchMovementMethod.java:18:    public boolean onTouchEvent(TextView textView, Spannable spannable, MotionEvent event) {
/components\LinkTouchMovementMethod.java:20:        if (event.getAction() == MotionEvent.ACTION_DOWN) {
/components\LinkTouchMovementMethod.java:21:            mPressedSpan = getPressedSpan(textView, spannable, event);
/components\LinkTouchMovementMethod.java:22:            if (mPressedSpan != null) {
/components\LinkTouchMovementMethod.java:23:                Selection.setSelection(spannable, spannable.getSpanStart(mPressedSpan),
/components\LinkTouchMovementMethod.java:24:                        spannable.getSpanEnd(mPressedSpan));
/components\LinkTouchMovementMethod.java:25:            }
/components\LinkTouchMovementMethod.java:26:        } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
/components\LinkTouchMovementMethod.java:27:            ClickableSpan touchedSpan = getPressedSpan(textView, spannable, event);
/components\LinkTouchMovementMethod.java:28:            if (mPressedSpan != null && touchedSpan != mPressedSpan) {
/components\LinkTouchMovementMethod.java:29:                mPressedSpan = null;
/components\LinkTouchMovementMethod.java:30:                Selection.removeSelection(spannable);
/components\LinkTouchMovementMethod.java:31:            }
/components\LinkTouchMovementMethod.java:32:        } else {
/components\LinkTouchMovementMethod.java:33:            if (mPressedSpan != null) {
/components\LinkTouchMovementMethod.java:34:                super.onTouchEvent(textView, spannable, event);
/components\LinkTouchMovementMethod.java:35:            }
/components\LinkTouchMovementMethod.java:36:            mPressedSpan = null;
/components\LinkTouchMovementMethod.java:37:            Selection.removeSelection(spannable);
/components\LinkTouchMovementMethod.java:38:        }
/components\LinkTouchMovementMethod.java:39:        return mPressedSpan != null;
/components\LinkTouchMovementMethod.java:40:    }
/components\LinkTouchMovementMethod.java:42:    /**
/components\LinkTouchMovementMethod.java:43:     * Copy from:
/components\LinkTouchMovementMethod.java:44:     * http://stackoverflow.com/questions/20856105/change-the-text-color-of-a-single-clickablespan-when-pressed-without-affecting-o
/components\LinkTouchMovementMethod.java:45:     * By:
/components\LinkTouchMovementMethod.java:46:     * Steven Meliopoulos
/components\LinkTouchMovementMethod.java:47:     */
/components\LinkTouchMovementMethod.java:48:    private ClickableSpan getPressedSpan(TextView textView, Spannable spannable, MotionEvent event) {
/components\LinkTouchMovementMethod.java:50:        int x = (int) event.getX();
/components\LinkTouchMovementMethod.java:51:        int y = (int) event.getY();
/components\LinkTouchMovementMethod.java:53:        x -= textView.getTotalPaddingLeft();
/components\LinkTouchMovementMethod.java:54:        y -= textView.getTotalPaddingTop();
/components\LinkTouchMovementMethod.java:56:        x += textView.getScrollX();
/components\LinkTouchMovementMethod.java:57:        y += textView.getScrollY();
/components\LinkTouchMovementMethod.java:59:        Layout layout = textView.getLayout();
/components\LinkTouchMovementMethod.java:60:        int line = layout.getLineForVertical(y);
/components\LinkTouchMovementMethod.java:61:        int off = layout.getOffsetForHorizontal(line, x);
/components\LinkTouchMovementMethod.java:63:        ClickableSpan[] link = spannable.getSpans(off, off, ClickableSpan.class);
/components\LinkTouchMovementMethod.java:64:        ClickableSpan touchedSpan = null;
/components\LinkTouchMovementMethod.java:65:        if (link.length > 0) {
/components\LinkTouchMovementMethod.java:66:            touchedSpan = link[0];
/components\LinkTouchMovementMethod.java:67:        }
/components\LinkTouchMovementMethod.java:68:        return touchedSpan;
/components\LinkTouchMovementMethod.java:69:    }
/components\LinkTouchMovementMethod.java:71:    public boolean isPressedSpan() {
/components\LinkTouchMovementMethod.java:72:        return mPressedSpan != null;
/components\LinkTouchMovementMethod.java:73:    }
/components\LinkTouchMovementMethod.java:75:    public static LinkTouchMovementMethod getInstance() {
/components\LinkTouchMovementMethod.java:76:        if (sInstance == null) {
/components\LinkTouchMovementMethod.java:77:            sInstance = new LinkTouchMovementMethod();
/components\LinkTouchMovementMethod.java:78:        }
/components\LinkTouchMovementMethod.java:79:        return sInstance;
/components\LinkTouchMovementMethod.java:80:    }
/components\LinkTouchMovementMethod.java:81:}
/components\MyImageEngine.java:1:package com.huanchengfly.tieba.post.components;
/components\MyImageEngine.java:3:import android.content.Context;
/components\MyImageEngine.java:4:import android.graphics.drawable.Drawable;
/components\MyImageEngine.java:5:import android.net.Uri;
/components\MyImageEngine.java:6:import android.widget.ImageView;
/components\MyImageEngine.java:8:import com.bumptech.glide.Glide;
/components\MyImageEngine.java:9:import com.bumptech.glide.Priority;
/components\MyImageEngine.java:10:import com.bumptech.glide.request.RequestOptions;
/components\MyImageEngine.java:11:import com.zhihu.matisse.engine.ImageEngine;
/components\MyImageEngine.java:13:public class MyImageEngine implements ImageEngine {
/components\MyImageEngine.java:15:    @Override
/components\MyImageEngine.java:16:    public void loadThumbnail(Context context, int resize, Drawable placeholder, ImageView imageView, Uri uri) {
/components\MyImageEngine.java:17:        Glide.with(context)
/components\MyImageEngine.java:18:                .asBitmap()
/components\MyImageEngine.java:19:                .load(uri)
/components\MyImageEngine.java:20:                .apply(new RequestOptions()
/components\MyImageEngine.java:21:                        .centerCrop()
/components\MyImageEngine.java:22:                        .placeholder(placeholder)
/components\MyImageEngine.java:23:                        .override(resize, resize))
/components\MyImageEngine.java:24:                .into(imageView);
/components\MyImageEngine.java:25:    }
/components\MyImageEngine.java:27:    @Override
/components\MyImageEngine.java:28:    public void loadGifThumbnail(Context context, int resize, Drawable placeholder, ImageView imageView,
/components\MyImageEngine.java:29:                                 Uri uri) {
/components\MyImageEngine.java:30:        Glide.with(context)
/components\MyImageEngine.java:31:                .asBitmap()
/components\MyImageEngine.java:32:                .load(uri)
/components\MyImageEngine.java:33:                .apply(new RequestOptions()
/components\MyImageEngine.java:34:                        .placeholder(placeholder)
/components\MyImageEngine.java:35:                        .override(resize, resize)
/components\MyImageEngine.java:36:                        .centerCrop())
/components\MyImageEngine.java:37:                .into(imageView);
/components\MyImageEngine.java:38:    }
/components\MyImageEngine.java:40:    @Override
/components\MyImageEngine.java:41:    public void loadImage(Context context, int resizeX, int resizeY, ImageView imageView, Uri uri) {
/components\MyImageEngine.java:42:        Glide.with(context)
/components\MyImageEngine.java:43:                .load(uri)
/components\MyImageEngine.java:44:                .apply(new RequestOptions()
/components\MyImageEngine.java:45:                        .override(resizeX, resizeY)
/components\MyImageEngine.java:46:                        .priority(Priority.HIGH)
/components\MyImageEngine.java:47:                        .fitCenter())
/components\MyImageEngine.java:48:                .into(imageView);
/components\MyImageEngine.java:49:    }
/components\MyImageEngine.java:51:    @Override
/components\MyImageEngine.java:52:    public void loadGifImage(Context context, int resizeX, int resizeY, ImageView imageView, Uri uri) {
/components\MyImageEngine.java:53:        Glide.with(context)
/components\MyImageEngine.java:54:                .asGif()
/components\MyImageEngine.java:55:                .load(uri)
/components\MyImageEngine.java:56:                .apply(new RequestOptions()
/components\MyImageEngine.java:57:                        .override(resizeX, resizeY)
/components\MyImageEngine.java:58:                        .priority(Priority.HIGH))
/components\MyImageEngine.java:59:                .into(imageView);
/components\MyImageEngine.java:60:    }
/components\MyImageEngine.java:62:    @Override
/components\MyImageEngine.java:63:    public boolean supportAnimatedGif() {
/components\MyImageEngine.java:64:        return true;
/components\MyImageEngine.java:65:    }
/components\MyImageEngine.java:66:}
/components\MyLinearLayoutManager.java:1:package com.huanchengfly.tieba.post.components;
/components\MyLinearLayoutManager.java:3:import android.content.Context;
/components\MyLinearLayoutManager.java:4:import android.util.AttributeSet;
/components\MyLinearLayoutManager.java:6:import androidx.recyclerview.widget.LinearLayoutManager;
/components\MyLinearLayoutManager.java:7:import androidx.recyclerview.widget.RecyclerView;
/components\MyLinearLayoutManager.java:9:public class MyLinearLayoutManager extends LinearLayoutManager {
/components\MyLinearLayoutManager.java:10:    public MyLinearLayoutManager(Context context) {
/components\MyLinearLayoutManager.java:11:        super(context);
/components\MyLinearLayoutManager.java:12:    }
/components\MyLinearLayoutManager.java:14:    public MyLinearLayoutManager(Context context, int orientation, boolean reverseLayout) {
/components\MyLinearLayoutManager.java:15:        super(context, orientation, reverseLayout);
/components\MyLinearLayoutManager.java:16:    }
/components\MyLinearLayoutManager.java:18:    public MyLinearLayoutManager(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
/components\MyLinearLayoutManager.java:19:        super(context, attrs, defStyleAttr, defStyleRes);
/components\MyLinearLayoutManager.java:20:    }
/components\MyLinearLayoutManager.java:22:    @Override
/components\MyLinearLayoutManager.java:23:    public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state) {
/components\MyLinearLayoutManager.java:24:        try {
/components\MyLinearLayoutManager.java:25:            super.onLayoutChildren(recycler, state);
/components\MyLinearLayoutManager.java:26:        } catch (IndexOutOfBoundsException e) {
/components\MyLinearLayoutManager.java:27:            e.printStackTrace();
/components\MyLinearLayoutManager.java:28:        }
/components\MyLinearLayoutManager.java:29:    }
/components\MyLinearLayoutManager.java:30:}/components\MyViewHolder.java:1:package com.huanchengfly.tieba.post.components;
/components\MyViewHolder.java:3:import android.content.Context;
/components\MyViewHolder.java:4:import android.view.View;
/components\MyViewHolder.java:5:import android.widget.TextView;
/components\MyViewHolder.java:7:import androidx.annotation.IdRes;
/components\MyViewHolder.java:8:import androidx.annotation.LayoutRes;
/components\MyViewHolder.java:9:import androidx.annotation.StringRes;
/components\MyViewHolder.java:10:import androidx.recyclerview.widget.RecyclerView;
/components\MyViewHolder.java:12:public class MyViewHolder extends RecyclerView.ViewHolder {
/components\MyViewHolder.java:13:    private Context mContext;
/components\MyViewHolder.java:15:    public MyViewHolder(View itemView) {
/components\MyViewHolder.java:16:        super(itemView);
/components\MyViewHolder.java:17:        this.mContext = itemView.getContext();
/components\MyViewHolder.java:18:    }
/components\MyViewHolder.java:20:    public MyViewHolder(Context context, @LayoutRes int layoutId) {
/components\MyViewHolder.java:21:        super(View.inflate(context, layoutId, null));
/components\MyViewHolder.java:22:        this.mContext = context;
/components\MyViewHolder.java:23:    }
/components\MyViewHolder.java:25:    public <T extends View> T getView(@IdRes int id) {
/components\MyViewHolder.java:26:        return itemView.findViewById(id);
/components\MyViewHolder.java:27:    }
/components\MyViewHolder.java:29:    public void setItemOnClickListener(View.OnClickListener listener) {
/components\MyViewHolder.java:30:        itemView.setOnClickListener(listener);
/components\MyViewHolder.java:31:    }
/components\MyViewHolder.java:33:    public void setItemOnLongClickListener(View.OnLongClickListener listener) {
/components\MyViewHolder.java:34:        itemView.setOnLongClickListener(listener);
/components\MyViewHolder.java:35:    }
/components\MyViewHolder.java:37:    public void setOnClickListener(int id, View.OnClickListener onClickListener) {
/components\MyViewHolder.java:38:        View view = getView(id);
/components\MyViewHolder.java:39:        if (view != null) {
/components\MyViewHolder.java:40:            view.setOnClickListener(onClickListener);
/components\MyViewHolder.java:41:        }
/components\MyViewHolder.java:42:    }
/components\MyViewHolder.java:44:    public void setText(@IdRes int id, CharSequence text) {
/components\MyViewHolder.java:45:        View view = getView(id);
/components\MyViewHolder.java:46:        if (view instanceof TextView) {
/components\MyViewHolder.java:47:            ((TextView) view).setText(text);
/components\MyViewHolder.java:48:        }
/components\MyViewHolder.java:49:    }
/components\MyViewHolder.java:51:    public void setVisibility(int id, int visibility) {
/components\MyViewHolder.java:52:        View view = getView(id);
/components\MyViewHolder.java:53:        if (view != null) {
/components\MyViewHolder.java:54:            view.setVisibility(visibility);
/components\MyViewHolder.java:55:        }
/components\MyViewHolder.java:56:    }
/components\MyViewHolder.java:58:    public void setText(@IdRes int id, @StringRes int string) {
/components\MyViewHolder.java:59:        setText(id, this.mContext.getString(string));
/components\MyViewHolder.java:60:    }
/components\MyViewHolder.java:61:}
/components\LinkMovementClickMethod.kt:1:package com.huanchengfly.tieba.post.components
/components\LinkMovementClickMethod.kt:3:import android.text.Selection
/components\LinkMovementClickMethod.kt:4:import android.text.Spannable
/components\LinkMovementClickMethod.kt:5:import android.text.method.LinkMovementMethod
/components\LinkMovementClickMethod.kt:6:import android.text.style.ClickableSpan
/components\LinkMovementClickMethod.kt:7:import android.view.MotionEvent
/components\LinkMovementClickMethod.kt:8:import android.widget.TextView
/components\LinkMovementClickMethod.kt:11:object LinkMovementClickMethod : LinkMovementMethod() {
/components\LinkMovementClickMethod.kt:12:    private const val CLICK_DELAY = 500L
/components\LinkMovementClickMethod.kt:14:    private var lastClickTime: Long = 0
/components\LinkMovementClickMethod.kt:16:    override fun canSelectArbitrarily(): Boolean {
/components\LinkMovementClickMethod.kt:17:        return false
/components\LinkMovementClickMethod.kt:18:    }
/components\LinkMovementClickMethod.kt:20:    override fun onTouchEvent(widget: TextView, buffer: Spannable, event: MotionEvent): Boolean {
/components\LinkMovementClickMethod.kt:21:        val action = event.actionMasked
/components\LinkMovementClickMethod.kt:22:        if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_DOWN) {
/components\LinkMovementClickMethod.kt:23:            var x = event.x.toInt()
/components\LinkMovementClickMethod.kt:24:            var y = event.y.toInt()
/components\LinkMovementClickMethod.kt:25:            x -= widget.totalPaddingLeft
/components\LinkMovementClickMethod.kt:26:            y -= widget.totalPaddingTop
/components\LinkMovementClickMethod.kt:27:            x += widget.scrollX
/components\LinkMovementClickMethod.kt:28:            y += widget.scrollY
/components\LinkMovementClickMethod.kt:29:            val layout = widget.layout
/components\LinkMovementClickMethod.kt:30:            val line = layout.getLineForVertical(y)
/components\LinkMovementClickMethod.kt:31:            val off = layout.getOffsetForHorizontal(line, x.toFloat())
/components\LinkMovementClickMethod.kt:32:            val link = buffer.getSpans(off, off, ClickableSpan::class.java)
/components\LinkMovementClickMethod.kt:33:            if (link.isNotEmpty()) {
/components\LinkMovementClickMethod.kt:34:                if (action == MotionEvent.ACTION_UP) {
/components\LinkMovementClickMethod.kt:35:                    link[0].onClick(widget)
/components\LinkMovementClickMethod.kt:36:                } else {
/components\LinkMovementClickMethod.kt:37:                    Selection.setSelection(buffer, buffer.getSpanStart(link[0]),
/components\LinkMovementClickMethod.kt:38:                            buffer.getSpanEnd(link[0]))
/components\LinkMovementClickMethod.kt:39:                }
/components\LinkMovementClickMethod.kt:40:                return true
/components\LinkMovementClickMethod.kt:41:            } else {
/components\LinkMovementClickMethod.kt:42:                Selection.removeSelection(buffer)
/components\LinkMovementClickMethod.kt:43:            }
/components\LinkMovementClickMethod.kt:44:        }
/components\LinkMovementClickMethod.kt:46:        return false
/components\LinkMovementClickMethod.kt:47:    }
/components\LinkMovementClickMethod.kt:49:    override fun initialize(widget: TextView?, text: Spannable?) {
/components\LinkMovementClickMethod.kt:50:        Selection.removeSelection(text)
/components\LinkMovementClickMethod.kt:51:    }
/components\LinkMovementClickMethod.kt:52:}/components\behaviors\BottomBarBehavior.java:1:package com.huanchengfly.tieba.post.components.behaviors;
/components\behaviors\BottomBarBehavior.java:3:import android.content.Context;
/components\behaviors\BottomBarBehavior.java:4:import android.util.AttributeSet;
/components\behaviors\BottomBarBehavior.java:5:import android.view.View;
/components\behaviors\BottomBarBehavior.java:6:import android.view.ViewGroup;
/components\behaviors\BottomBarBehavior.java:7:import android.view.animation.Interpolator;
/components\behaviors\BottomBarBehavior.java:9:import androidx.annotation.NonNull;
/components\behaviors\BottomBarBehavior.java:10:import androidx.coordinatorlayout.widget.CoordinatorLayout;
/components\behaviors\BottomBarBehavior.java:11:import androidx.core.view.ViewCompat;
/components\behaviors\BottomBarBehavior.java:12:import androidx.core.view.ViewPropertyAnimatorListener;
/components\behaviors\BottomBarBehavior.java:13:import androidx.interpolator.view.animation.FastOutSlowInInterpolator;
/components\behaviors\BottomBarBehavior.java:15:public class BottomBarBehavior extends CoordinatorLayout.Behavior<View> {
/components\behaviors\BottomBarBehavior.java:16:    private static final Interpolator INTERPOLATOR = new FastOutSlowInInterpolator();
/components\behaviors\BottomBarBehavior.java:17:    private boolean mIsAnimatingOut = false;
/components\behaviors\BottomBarBehavior.java:19:    public BottomBarBehavior(Context context, AttributeSet attrs) {
/components\behaviors\BottomBarBehavior.java:20:        super();
/components\behaviors\BottomBarBehavior.java:21:    }
/components\behaviors\BottomBarBehavior.java:23:    @Override
/components\behaviors\BottomBarBehavior.java:24:    public boolean onStartNestedScroll(@NonNull final CoordinatorLayout coordinatorLayout, @NonNull final View child,
/components\behaviors\BottomBarBehavior.java:25:                                       @NonNull final View directTargetChild, @NonNull final View target, final int nestedScrollAxes) {
/components\behaviors\BottomBarBehavior.java:26:        // Ensure we react to vertical scrolling
/components\behaviors\BottomBarBehavior.java:27:        return nestedScrollAxes == ViewCompat.SCROLL_AXIS_VERTICAL
/components\behaviors\BottomBarBehavior.java:28:                || super.onStartNestedScroll(coordinatorLayout, child, directTargetChild, target, nestedScrollAxes);
/components\behaviors\BottomBarBehavior.java:29:    }
/components\behaviors\BottomBarBehavior.java:31:    @Override
/components\behaviors\BottomBarBehavior.java:32:    public void onNestedScroll(@NonNull final CoordinatorLayout coordinatorLayout, @NonNull final View child,
/components\behaviors\BottomBarBehavior.java:33:                               @NonNull final View target, final int dxConsumed, final int dyConsumed,
/components\behaviors\BottomBarBehavior.java:34:                               final int dxUnconsumed, final int dyUnconsumed) {
/components\behaviors\BottomBarBehavior.java:35:        super.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);
/components\behaviors\BottomBarBehavior.java:36:        if (dyConsumed > 0 && !this.mIsAnimatingOut && child.getVisibility() == View.VISIBLE) {
/components\behaviors\BottomBarBehavior.java:37:            // User scrolled down and the FAB is currently visible -> hide the FAB
/components\behaviors\BottomBarBehavior.java:38:            animateOut(child);
/components\behaviors\BottomBarBehavior.java:39:        } else if (dyConsumed < 0 && child.getVisibility() != View.VISIBLE) {
/components\behaviors\BottomBarBehavior.java:40:            // User scrolled up and the FAB is currently not visible -> show the FAB
/components\behaviors\BottomBarBehavior.java:41:            animateIn(child);
/components\behaviors\BottomBarBehavior.java:42:        }
/components\behaviors\BottomBarBehavior.java:43:    }
/components\behaviors\BottomBarBehavior.java:45:    // Same animation that FloatingActionButton.Behavior uses to hide the FAB when the AppBarLayout exits
/components\behaviors\BottomBarBehavior.java:46:    private void animateOut(final View button) {
/components\behaviors\BottomBarBehavior.java:47:        ViewCompat.animate(button).translationY(button.getHeight() + getMarginBottom(button)).setInterpolator(INTERPOLATOR).withLayer()
/components\behaviors\BottomBarBehavior.java:48:                .setListener(new ViewPropertyAnimatorListener() {
/components\behaviors\BottomBarBehavior.java:49:                    public void onAnimationStart(View view) {
/components\behaviors\BottomBarBehavior.java:50:                        BottomBarBehavior.this.mIsAnimatingOut = true;
/components\behaviors\BottomBarBehavior.java:51:                    }
/components\behaviors\BottomBarBehavior.java:53:                    public void onAnimationCancel(View view) {
/components\behaviors\BottomBarBehavior.java:54:                        BottomBarBehavior.this.mIsAnimatingOut = false;
/components\behaviors\BottomBarBehavior.java:55:                    }
/components\behaviors\BottomBarBehavior.java:57:                    public void onAnimationEnd(View view) {
/components\behaviors\BottomBarBehavior.java:58:                        BottomBarBehavior.this.mIsAnimatingOut = false;
/components\behaviors\BottomBarBehavior.java:59:                        view.setVisibility(View.INVISIBLE);
/components\behaviors\BottomBarBehavior.java:60:                    }
/components\behaviors\BottomBarBehavior.java:61:                }).start();
/components\behaviors\BottomBarBehavior.java:62:    }
/components\behaviors\BottomBarBehavior.java:64:    // Same animation that FloatingActionButton.Behavior uses to show the FAB when the AppBarLayout enters
/components\behaviors\BottomBarBehavior.java:65:    private void animateIn(View button) {
/components\behaviors\BottomBarBehavior.java:66:        button.setVisibility(View.VISIBLE);
/components\behaviors\BottomBarBehavior.java:67:        ViewCompat.animate(button).translationY(0)
/components\behaviors\BottomBarBehavior.java:68:                .setInterpolator(INTERPOLATOR).withLayer().setListener(null)
/components\behaviors\BottomBarBehavior.java:69:                .start();
/components\behaviors\BottomBarBehavior.java:70:    }
/components\behaviors\BottomBarBehavior.java:72:    private int getMarginBottom(View v) {
/components\behaviors\BottomBarBehavior.java:73:        int marginBottom = 0;
/components\behaviors\BottomBarBehavior.java:74:        final ViewGroup.LayoutParams layoutParams = v.getLayoutParams();
/components\behaviors\BottomBarBehavior.java:75:        if (layoutParams instanceof ViewGroup.MarginLayoutParams) {
/components\behaviors\BottomBarBehavior.java:76:            marginBottom = ((ViewGroup.MarginLayoutParams) layoutParams).bottomMargin;
/components\behaviors\BottomBarBehavior.java:77:        }
/components\behaviors\BottomBarBehavior.java:78:        return marginBottom;
/components\behaviors\BottomBarBehavior.java:79:    }
/components\behaviors\BottomBarBehavior.java:80:}
/components\behaviors\FabBehavior.java:1:package com.huanchengfly.tieba.post.components.behaviors;
/components\behaviors\FabBehavior.java:3:import android.content.Context;
/components\behaviors\FabBehavior.java:4:import android.util.AttributeSet;
/components\behaviors\FabBehavior.java:5:import android.view.View;
/components\behaviors\FabBehavior.java:6:import android.view.ViewGroup;
/components\behaviors\FabBehavior.java:7:import android.view.animation.Interpolator;
/components\behaviors\FabBehavior.java:9:import androidx.annotation.NonNull;
/components\behaviors\FabBehavior.java:10:import androidx.coordinatorlayout.widget.CoordinatorLayout;
/components\behaviors\FabBehavior.java:11:import androidx.core.view.ViewCompat;
/components\behaviors\FabBehavior.java:12:import androidx.core.view.ViewPropertyAnimatorListener;
/components\behaviors\FabBehavior.java:13:import androidx.interpolator.view.animation.FastOutSlowInInterpolator;
/components\behaviors\FabBehavior.java:15:import com.google.android.material.floatingactionbutton.FloatingActionButton;
/components\behaviors\FabBehavior.java:17:public class FabBehavior extends FloatingActionButton.Behavior {
/components\behaviors\FabBehavior.java:18:    private static final Interpolator INTERPOLATOR = new FastOutSlowInInterpolator();
/components\behaviors\FabBehavior.java:19:    private boolean mIsAnimatingOut = false;
/components\behaviors\FabBehavior.java:21:    public FabBehavior(Context context, AttributeSet attrs) {
/components\behaviors\FabBehavior.java:22:        super();
/components\behaviors\FabBehavior.java:23:    }
/components\behaviors\FabBehavior.java:25:    @Override
/components\behaviors\FabBehavior.java:26:    public boolean onStartNestedScroll(@NonNull final CoordinatorLayout coordinatorLayout, @NonNull final FloatingActionButton child,
/components\behaviors\FabBehavior.java:27:                                       @NonNull final View directTargetChild, @NonNull final View target, final int nestedScrollAxes) {
/components\behaviors\FabBehavior.java:28:        // Ensure we react to vertical scrolling
/components\behaviors\FabBehavior.java:29:        return nestedScrollAxes == ViewCompat.SCROLL_AXIS_VERTICAL
/components\behaviors\FabBehavior.java:30:                || super.onStartNestedScroll(coordinatorLayout, child, directTargetChild, target, nestedScrollAxes);
/components\behaviors\FabBehavior.java:31:    }
/components\behaviors\FabBehavior.java:33:    @Override
/components\behaviors\FabBehavior.java:34:    public void onNestedScroll(@NonNull final CoordinatorLayout coordinatorLayout, @NonNull final FloatingActionButton child,
/components\behaviors\FabBehavior.java:35:                               @NonNull final View target, final int dxConsumed, final int dyConsumed,
/components\behaviors\FabBehavior.java:36:                               final int dxUnconsumed, final int dyUnconsumed) {
/components\behaviors\FabBehavior.java:37:        super.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);
/components\behaviors\FabBehavior.java:38:        if (dyConsumed > 0 && !this.mIsAnimatingOut && child.getVisibility() == View.VISIBLE) {
/components\behaviors\FabBehavior.java:39:            // User scrolled down and the FAB is currently visible -> hide the FAB
/components\behaviors\FabBehavior.java:40:            animateOut(child);
/components\behaviors\FabBehavior.java:41:        } else if (dyConsumed < 0 && child.getVisibility() != View.VISIBLE) {
/components\behaviors\FabBehavior.java:42:            // User scrolled up and the FAB is currently not visible -> show the FAB
/components\behaviors\FabBehavior.java:43:            animateIn(child);
/components\behaviors\FabBehavior.java:44:        }
/components\behaviors\FabBehavior.java:45:    }
/components\behaviors\FabBehavior.java:47:    // Same animation that FloatingActionButton.Behavior uses to hide the FAB when the AppBarLayout exits
/components\behaviors\FabBehavior.java:48:    private void animateOut(final FloatingActionButton button) {
/components\behaviors\FabBehavior.java:49:        ViewCompat.animate(button).translationY(button.getHeight() + getMarginBottom(button)).setInterpolator(INTERPOLATOR).withLayer()
/components\behaviors\FabBehavior.java:50:                .setListener(new ViewPropertyAnimatorListener() {
/components\behaviors\FabBehavior.java:51:                    public void onAnimationStart(View view) {
/components\behaviors\FabBehavior.java:52:                        FabBehavior.this.mIsAnimatingOut = true;
/components\behaviors\FabBehavior.java:53:                    }
/components\behaviors\FabBehavior.java:55:                    public void onAnimationCancel(View view) {
/components\behaviors\FabBehavior.java:56:                        FabBehavior.this.mIsAnimatingOut = false;
/components\behaviors\FabBehavior.java:57:                    }
/components\behaviors\FabBehavior.java:59:                    public void onAnimationEnd(View view) {
/components\behaviors\FabBehavior.java:60:                        FabBehavior.this.mIsAnimatingOut = false;
/components\behaviors\FabBehavior.java:61:                        view.setVisibility(View.INVISIBLE);
/components\behaviors\FabBehavior.java:62:                    }
/components\behaviors\FabBehavior.java:63:                }).start();
/components\behaviors\FabBehavior.java:64:    }
/components\behaviors\FabBehavior.java:66:    // Same animation that FloatingActionButton.Behavior uses to show the FAB when the AppBarLayout enters
/components\behaviors\FabBehavior.java:67:    private void animateIn(FloatingActionButton button) {
/components\behaviors\FabBehavior.java:68:        button.setVisibility(View.VISIBLE);
/components\behaviors\FabBehavior.java:69:        ViewCompat.animate(button).translationY(0)
/components\behaviors\FabBehavior.java:70:                .setInterpolator(INTERPOLATOR).withLayer().setListener(null)
/components\behaviors\FabBehavior.java:71:                .start();
/components\behaviors\FabBehavior.java:72:    }
/components\behaviors\FabBehavior.java:74:    private int getMarginBottom(View v) {
/components\behaviors\FabBehavior.java:75:        int marginBottom = 0;
/components\behaviors\FabBehavior.java:76:        final ViewGroup.LayoutParams layoutParams = v.getLayoutParams();
/components\behaviors\FabBehavior.java:77:        if (layoutParams instanceof ViewGroup.MarginLayoutParams) {
/components\behaviors\FabBehavior.java:78:            marginBottom = ((ViewGroup.MarginLayoutParams) layoutParams).bottomMargin;
/components\behaviors\FabBehavior.java:79:        }
/components\behaviors\FabBehavior.java:80:        return marginBottom;
/components\behaviors\FabBehavior.java:81:    }
/components\behaviors\FabBehavior.java:82:}
/components\dialogs\BaseBottomSheetDialog.java:1:package com.huanchengfly.tieba.post.components.dialogs;
/components\dialogs\BaseBottomSheetDialog.java:3:import android.content.Context;
/components\dialogs\BaseBottomSheetDialog.java:4:import android.view.View;
/components\dialogs\BaseBottomSheetDialog.java:6:import androidx.annotation.NonNull;
/components\dialogs\BaseBottomSheetDialog.java:8:import com.google.android.material.bottomsheet.BottomSheetDialog;
/components\dialogs\BaseBottomSheetDialog.java:9:import com.huanchengfly.tieba.post.R;
/components\dialogs\BaseBottomSheetDialog.java:11:public abstract class BaseBottomSheetDialog extends BottomSheetDialog {
/components\dialogs\BaseBottomSheetDialog.java:12:    public BaseBottomSheetDialog(@NonNull Context context) {
/components\dialogs\BaseBottomSheetDialog.java:13:        this(context, R.style.BottomSheetDialogStyle);
/components\dialogs\BaseBottomSheetDialog.java:14:    }
/components\dialogs\BaseBottomSheetDialog.java:16:    public BaseBottomSheetDialog(@NonNull Context context, int theme) {
/components\dialogs\BaseBottomSheetDialog.java:17:        super(context, theme);
/components\dialogs\BaseBottomSheetDialog.java:18:        initView();
/components\dialogs\BaseBottomSheetDialog.java:19:    }
/components\dialogs\BaseBottomSheetDialog.java:21:    protected BaseBottomSheetDialog(@NonNull Context context, boolean cancelable, OnCancelListener cancelListener) {
/components\dialogs\BaseBottomSheetDialog.java:22:        super(context, cancelable, cancelListener);
/components\dialogs\BaseBottomSheetDialog.java:23:        initView();
/components\dialogs\BaseBottomSheetDialog.java:24:    }
/components\dialogs\BaseBottomSheetDialog.java:26:    private void initView() {
/components\dialogs\BaseBottomSheetDialog.java:27:        View view = getLayoutInflater().inflate(getLayoutId(), null);
/components\dialogs\BaseBottomSheetDialog.java:28:        setContentView(view);
/components\dialogs\BaseBottomSheetDialog.java:29:        initView(view);
/components\dialogs\BaseBottomSheetDialog.java:30:    }
/components\dialogs\BaseBottomSheetDialog.java:32:    protected abstract void initView(View contentView);
/components\dialogs\BaseBottomSheetDialog.java:34:    abstract int getLayoutId();
/components\dialogs\BaseBottomSheetDialog.java:35:}
/components\dialogs\BaseFullScreenDialog.java:1:package com.huanchengfly.tieba.post.components.dialogs;
/components\dialogs\BaseFullScreenDialog.java:3:import android.app.Dialog;
/components\dialogs\BaseFullScreenDialog.java:4:import android.content.Context;
/components\dialogs\BaseFullScreenDialog.java:5:import android.os.Bundle;
/components\dialogs\BaseFullScreenDialog.java:6:import android.view.Gravity;
/components\dialogs\BaseFullScreenDialog.java:7:import android.view.View;
/components\dialogs\BaseFullScreenDialog.java:8:import android.view.Window;
/components\dialogs\BaseFullScreenDialog.java:9:import android.view.WindowManager;
/components\dialogs\BaseFullScreenDialog.java:11:import androidx.annotation.NonNull;
/components\dialogs\BaseFullScreenDialog.java:13:import com.huanchengfly.tieba.post.R;
/components\dialogs\BaseFullScreenDialog.java:15:import java.util.Objects;
/components\dialogs\BaseFullScreenDialog.java:17:public abstract class BaseFullScreenDialog extends Dialog {
/components\dialogs\BaseFullScreenDialog.java:18:    private View mContentView;
/components\dialogs\BaseFullScreenDialog.java:20:    BaseFullScreenDialog(@NonNull Context context) {
/components\dialogs\BaseFullScreenDialog.java:21:        super(context, R.style.Dialog_FullScreen);
/components\dialogs\BaseFullScreenDialog.java:22:        mContentView = View.inflate(getContext(), getLayoutId(), null);
/components\dialogs\BaseFullScreenDialog.java:23:    }
/components\dialogs\BaseFullScreenDialog.java:25:    public View getContentView() {
/components\dialogs\BaseFullScreenDialog.java:26:        return mContentView;
/components\dialogs\BaseFullScreenDialog.java:27:    }
/components\dialogs\BaseFullScreenDialog.java:29:    protected abstract int getLayoutId();
/components\dialogs\BaseFullScreenDialog.java:31:    protected abstract void initView(View contentView);
/components\dialogs\BaseFullScreenDialog.java:33:    @Override
/components\dialogs\BaseFullScreenDialog.java:34:    public void show() {
/components\dialogs\BaseFullScreenDialog.java:35:        super.show();
/components\dialogs\BaseFullScreenDialog.java:36:        WindowManager.LayoutParams layoutParams = Objects.requireNonNull(getWindow()).getAttributes();
/components\dialogs\BaseFullScreenDialog.java:37:        layoutParams.gravity = Gravity.BOTTOM;
/components\dialogs\BaseFullScreenDialog.java:38:        layoutParams.width = WindowManager.LayoutParams.MATCH_PARENT;
/components\dialogs\BaseFullScreenDialog.java:39:        layoutParams.height = WindowManager.LayoutParams.MATCH_PARENT;
/components\dialogs\BaseFullScreenDialog.java:40:        getWindow().getDecorView().setPadding(0, 0, 0, 0);
/components\dialogs\BaseFullScreenDialog.java:41:        getWindow().setAttributes(layoutParams);
/components\dialogs\BaseFullScreenDialog.java:42:    }
/components\dialogs\BaseFullScreenDialog.java:44:    @Override
/components\dialogs\BaseFullScreenDialog.java:45:    protected void onCreate(Bundle savedInstanceState) {
/components\dialogs\BaseFullScreenDialog.java:46:        super.onCreate(savedInstanceState);
/components\dialogs\BaseFullScreenDialog.java:47:        Objects.requireNonNull(getWindow()).setFlags(
/components\dialogs\BaseFullScreenDialog.java:48:                WindowManager.LayoutParams.FLAG_FULLSCREEN,
/components\dialogs\BaseFullScreenDialog.java:49:                WindowManager.LayoutParams.FLAG_FULLSCREEN);
/components\dialogs\BaseFullScreenDialog.java:50:        requestWindowFeature(Window.FEATURE_NO_TITLE);
/components\dialogs\BaseFullScreenDialog.java:51:        setContentView(mContentView);
/components\dialogs\BaseFullScreenDialog.java:52:        initView(mContentView);
/components\dialogs\BaseFullScreenDialog.java:53:    }
/components\dialogs\BaseFullScreenDialog.java:54:}
/components\dialogs\CopyTextDialog.java:1:package com.huanchengfly.tieba.post.components.dialogs;
/components\dialogs\CopyTextDialog.java:3:import android.content.Context;
/components\dialogs\CopyTextDialog.java:4:import android.view.View;
/components\dialogs\CopyTextDialog.java:5:import android.widget.TextView;
/components\dialogs\CopyTextDialog.java:7:import androidx.annotation.NonNull;
/components\dialogs\CopyTextDialog.java:9:import com.huanchengfly.tieba.post.R;
/components\dialogs\CopyTextDialog.java:11:public class CopyTextDialog extends BaseFullScreenDialog {
/components\dialogs\CopyTextDialog.java:12:    public static final String TAG = CopyTextDialog.class.getSimpleName();
/components\dialogs\CopyTextDialog.java:14:    private String mText;
/components\dialogs\CopyTextDialog.java:16:    public CopyTextDialog(@NonNull Context context, @NonNull String text) {
/components\dialogs\CopyTextDialog.java:17:        super(context);
/components\dialogs\CopyTextDialog.java:18:        this.mText = text;
/components\dialogs\CopyTextDialog.java:19:    }
/components\dialogs\CopyTextDialog.java:21:    @Override
/components\dialogs\CopyTextDialog.java:22:    protected int getLayoutId() {
/components\dialogs\CopyTextDialog.java:23:        return R.layout.dialog_copy_text;
/components\dialogs\CopyTextDialog.java:24:    }
/components\dialogs\CopyTextDialog.java:26:    @Override
/components\dialogs\CopyTextDialog.java:27:    protected void initView(View contentView) {
/components\dialogs\CopyTextDialog.java:28:        TextView textView = contentView.findViewById(R.id.dialog_copy_text);
/components\dialogs\CopyTextDialog.java:29:        textView.setText(mText);
/components\dialogs\CopyTextDialog.java:30:        textView.setTextIsSelectable(true);
/components\dialogs\CopyTextDialog.java:31:    }
/components\dialogs\CopyTextDialog.java:32:}/components\dialogs\EditTextDialog.java:1:package com.huanchengfly.tieba.post.components.dialogs;
/components\dialogs\EditTextDialog.java:3:import android.content.Context;
/components\dialogs\EditTextDialog.java:4:import android.text.Editable;
/components\dialogs\EditTextDialog.java:5:import android.view.View;
/components\dialogs\EditTextDialog.java:6:import android.widget.Button;
/components\dialogs\EditTextDialog.java:7:import android.widget.EditText;
/components\dialogs\EditTextDialog.java:8:import android.widget.ImageView;
/components\dialogs\EditTextDialog.java:10:import androidx.annotation.StringRes;
/components\dialogs\EditTextDialog.java:11:import androidx.appcompat.app.AlertDialog;
/components\dialogs\EditTextDialog.java:13:import com.google.android.material.textfield.TextInputLayout;
/components\dialogs\EditTextDialog.java:14:import com.huanchengfly.tieba.post.R;
/components\dialogs\EditTextDialog.java:15:import com.huanchengfly.tieba.post.adapters.TextWatcherAdapter;
/components\dialogs\EditTextDialog.java:16:import com.huanchengfly.tieba.post.interfaces.OnSubmitListener;
/components\dialogs\EditTextDialog.java:18:public class EditTextDialog extends AlertDialog {
/components\dialogs\EditTextDialog.java:19:    private Context mContext;
/components\dialogs\EditTextDialog.java:20:    private View contentView;
/components\dialogs\EditTextDialog.java:21:    private ImageView codeImageView;
/components\dialogs\EditTextDialog.java:22:    private Button submitBtn;
/components\dialogs\EditTextDialog.java:23:    private TextInputLayout textInputLayout;
/components\dialogs\EditTextDialog.java:24:    private EditText editText;
/components\dialogs\EditTextDialog.java:25:    private OnSubmitListener onSubmitListener;
/components\dialogs\EditTextDialog.java:27:    public EditTextDialog(Context context) {
/components\dialogs\EditTextDialog.java:28:        super(context);
/components\dialogs\EditTextDialog.java:29:        this.mContext = context;
/components\dialogs\EditTextDialog.java:30:        setTitle(R.string.title_input);
/components\dialogs\EditTextDialog.java:31:        initView();
/components\dialogs\EditTextDialog.java:32:    }
/components\dialogs\EditTextDialog.java:34:    public EditTextDialog setOnSubmitListener(OnSubmitListener listener) {
/components\dialogs\EditTextDialog.java:35:        this.onSubmitListener = listener;
/components\dialogs\EditTextDialog.java:36:        return this;
/components\dialogs\EditTextDialog.java:37:    }
/components\dialogs\EditTextDialog.java:39:    public EditTextDialog setInputType(int inputType) {
/components\dialogs\EditTextDialog.java:40:        editText.setInputType(inputType);
/components\dialogs\EditTextDialog.java:41:        return this;
/components\dialogs\EditTextDialog.java:42:    }
/components\dialogs\EditTextDialog.java:44:    public EditTextDialog setTipText(@StringRes int res) {
/components\dialogs\EditTextDialog.java:45:        return setTipText(mContext.getString(res));
/components\dialogs\EditTextDialog.java:46:    }
/components\dialogs\EditTextDialog.java:48:    public EditTextDialog setTipText(CharSequence charSequence) {
/components\dialogs\EditTextDialog.java:49:        textInputLayout.setHint(charSequence);
/components\dialogs\EditTextDialog.java:50:        return this;
/components\dialogs\EditTextDialog.java:51:    }
/components\dialogs\EditTextDialog.java:53:    public EditTextDialog setHelperText(@StringRes int res) {
/components\dialogs\EditTextDialog.java:54:        return setHelperText(mContext.getString(res));
/components\dialogs\EditTextDialog.java:55:    }
/components\dialogs\EditTextDialog.java:57:    public EditTextDialog setHelperText(CharSequence charSequence) {
/components\dialogs\EditTextDialog.java:58:        textInputLayout.setHelperText(charSequence);
/components\dialogs\EditTextDialog.java:59:        return this;
/components\dialogs\EditTextDialog.java:60:    }
/components\dialogs\EditTextDialog.java:62:    private void initView() {
/components\dialogs\EditTextDialog.java:63:        contentView = View.inflate(mContext, R.layout.dialog_edit_text, null);
/components\dialogs\EditTextDialog.java:64:        textInputLayout = contentView.findViewById(R.id.dialog_edit_text_layout);
/components\dialogs\EditTextDialog.java:65:        editText = textInputLayout.getEditText();
/components\dialogs\EditTextDialog.java:66:        submitBtn = contentView.findViewById(R.id.dialog_edit_text_submit);
/components\dialogs\EditTextDialog.java:67:        Button cancelBtn = contentView.findViewById(R.id.dialog_edit_text_cancel);
/components\dialogs\EditTextDialog.java:68:        cancelBtn.setOnClickListener(v -> {
/components\dialogs\EditTextDialog.java:69:            cancel();
/components\dialogs\EditTextDialog.java:70:        });
/components\dialogs\EditTextDialog.java:71:        submitBtn.setOnClickListener(view -> {
/components\dialogs\EditTextDialog.java:72:            if (editText.getText() != null) {
/components\dialogs\EditTextDialog.java:73:                if (!editText.getText().toString().isEmpty()) {
/components\dialogs\EditTextDialog.java:74:                    if (onSubmitListener != null) {
/components\dialogs\EditTextDialog.java:75:                        onSubmitListener.onSubmit(editText.getText().toString());
/components\dialogs\EditTextDialog.java:76:                    }
/components\dialogs\EditTextDialog.java:77:                    cancel();
/components\dialogs\EditTextDialog.java:78:                    return;
/components\dialogs\EditTextDialog.java:79:                }
/components\dialogs\EditTextDialog.java:80:            }
/components\dialogs\EditTextDialog.java:81:            textInputLayout.setError(getContext().getText(R.string.toast_verify_code_empty));
/components\dialogs\EditTextDialog.java:82:        });
/components\dialogs\EditTextDialog.java:83:        editText.addTextChangedListener(new TextWatcherAdapter() {
/components\dialogs\EditTextDialog.java:84:            @Override
/components\dialogs\EditTextDialog.java:85:            public void afterTextChanged(Editable editable) {
/components\dialogs\EditTextDialog.java:86:                if (editable != null) {
/components\dialogs\EditTextDialog.java:87:                    if (!editable.toString().isEmpty()) {
/components\dialogs\EditTextDialog.java:88:                        textInputLayout.setErrorEnabled(false);
/components\dialogs\EditTextDialog.java:89:                        textInputLayout.setError(null);
/components\dialogs\EditTextDialog.java:90:                        return;
/components\dialogs\EditTextDialog.java:91:                    }
/components\dialogs\EditTextDialog.java:92:                }
/components\dialogs\EditTextDialog.java:93:                textInputLayout.setError(getContext().getText(R.string.toast_verify_code_empty));
/components\dialogs\EditTextDialog.java:94:            }
/components\dialogs\EditTextDialog.java:95:        });
/components\dialogs\EditTextDialog.java:96:        setView(contentView);
/components\dialogs\EditTextDialog.java:97:    }
/components\dialogs\EditTextDialog.java:98:}/components\dialogs\LoadingDialog.java:1:package com.huanchengfly.tieba.post.components.dialogs;
/components\dialogs\LoadingDialog.java:3:import android.content.Context;
/components\dialogs\LoadingDialog.java:4:import android.view.View;
/components\dialogs\LoadingDialog.java:5:import android.widget.TextView;
/components\dialogs\LoadingDialog.java:7:import androidx.annotation.StringRes;
/components\dialogs\LoadingDialog.java:8:import androidx.appcompat.app.AlertDialog;
/components\dialogs\LoadingDialog.java:10:import com.huanchengfly.tieba.post.R;
/components\dialogs\LoadingDialog.java:12:public class LoadingDialog extends AlertDialog {
/components\dialogs\LoadingDialog.java:13:    private Context mContext;
/components\dialogs\LoadingDialog.java:14:    private TextView loadingTipView;
/components\dialogs\LoadingDialog.java:16:    public LoadingDialog(Context context) {
/components\dialogs\LoadingDialog.java:17:        super(context);
/components\dialogs\LoadingDialog.java:18:        this.mContext = context;
/components\dialogs\LoadingDialog.java:19:        initView();
/components\dialogs\LoadingDialog.java:20:    }
/components\dialogs\LoadingDialog.java:22:    private void initView() {
/components\dialogs\LoadingDialog.java:23:        View contentView = View.inflate(mContext, R.layout.dialog_loading, null);
/components\dialogs\LoadingDialog.java:24:        loadingTipView = contentView.findViewById(R.id.dialog_loading_tip);
/components\dialogs\LoadingDialog.java:25:        setCancelable(false);
/components\dialogs\LoadingDialog.java:26:        setView(contentView);
/components\dialogs\LoadingDialog.java:27:        setTipText(R.string.tip_loading);
/components\dialogs\LoadingDialog.java:28:    }
/components\dialogs\LoadingDialog.java:30:    public void setTipText(@StringRes int resId) {
/components\dialogs\LoadingDialog.java:31:        loadingTipView.setText(resId);
/components\dialogs\LoadingDialog.java:32:    }
/components\dialogs\LoadingDialog.java:34:    public void setTipText(String text) {
/components\dialogs\LoadingDialog.java:35:        loadingTipView.setText(text);
/components\dialogs\LoadingDialog.java:36:    }
/components\dialogs\LoadingDialog.java:37:}
/components\dialogs\PermissionDialog.java:1:package com.huanchengfly.tieba.post.components.dialogs;
/components\dialogs\PermissionDialog.java:3:import android.annotation.SuppressLint;
/components\dialogs\PermissionDialog.java:4:import android.content.Context;
/components\dialogs\PermissionDialog.java:5:import android.view.View;
/components\dialogs\PermissionDialog.java:6:import android.widget.Button;
/components\dialogs\PermissionDialog.java:7:import android.widget.CheckBox;
/components\dialogs\PermissionDialog.java:8:import android.widget.ImageView;
/components\dialogs\PermissionDialog.java:9:import android.widget.TextView;
/components\dialogs\PermissionDialog.java:11:import androidx.annotation.NonNull;
/components\dialogs\PermissionDialog.java:12:import androidx.appcompat.app.AlertDialog;
/components\dialogs\PermissionDialog.java:14:import com.huanchengfly.tieba.post.R;
/components\dialogs\PermissionDialog.java:15:import com.huanchengfly.tieba.post.interfaces.OnDeniedCallback;
/components\dialogs\PermissionDialog.java:16:import com.huanchengfly.tieba.post.interfaces.OnGrantedCallback;
/components\dialogs\PermissionDialog.java:17:import com.huanchengfly.tieba.post.models.PermissionBean;
/components\dialogs\PermissionDialog.java:18:import com.huanchengfly.tieba.post.utils.SharedPreferencesUtil;
/components\dialogs\PermissionDialog.java:20:public class PermissionDialog extends AlertDialog implements View.OnClickListener {
/components\dialogs\PermissionDialog.java:21:    public static final int STATE_DENIED = 2;
/components\dialogs\PermissionDialog.java:22:    public static final int STATE_ALLOW = 1;
/components\dialogs\PermissionDialog.java:23:    public static final int STATE_UNSET = 0;
/components\dialogs\PermissionDialog.java:24:    private TextView titleView;
/components\dialogs\PermissionDialog.java:25:    private ImageView iconView;
/components\dialogs\PermissionDialog.java:26:    private Button allowBtn;
/components\dialogs\PermissionDialog.java:27:    private Button deniedBtn;
/components\dialogs\PermissionDialog.java:28:    private CheckBox checkBox;
/components\dialogs\PermissionDialog.java:29:    private PermissionBean permissionBean;
/components\dialogs\PermissionDialog.java:30:    private OnGrantedCallback onGrantedCallback;
/components\dialogs\PermissionDialog.java:31:    private OnDeniedCallback onDeniedCallback;
/components\dialogs\PermissionDialog.java:33:    public PermissionDialog(@NonNull Context context, @NonNull PermissionBean permissionBean) {
/components\dialogs\PermissionDialog.java:34:        super(context, false, null);
/components\dialogs\PermissionDialog.java:35:        View contentView = View.inflate(context, R.layout.dialog_permission, null);
/components\dialogs\PermissionDialog.java:36:        setPermissionBean(permissionBean);
/components\dialogs\PermissionDialog.java:37:        titleView = contentView.findViewById(R.id.permission_title);
/components\dialogs\PermissionDialog.java:38:        iconView = contentView.findViewById(R.id.permission_icon);
/components\dialogs\PermissionDialog.java:39:        allowBtn = contentView.findViewById(R.id.permission_actions_allow);
/components\dialogs\PermissionDialog.java:40:        deniedBtn = contentView.findViewById(R.id.permission_actions_denied);
/components\dialogs\PermissionDialog.java:41:        checkBox = contentView.findViewById(R.id.permission_actions_checkbox);
/components\dialogs\PermissionDialog.java:42:        setView(contentView);
/components\dialogs\PermissionDialog.java:43:        initView();
/components\dialogs\PermissionDialog.java:44:    }
/components\dialogs\PermissionDialog.java:46:    public PermissionBean getPermissionBean() {
/components\dialogs\PermissionDialog.java:47:        return permissionBean;
/components\dialogs\PermissionDialog.java:48:    }
/components\dialogs\PermissionDialog.java:50:    public PermissionDialog setPermissionBean(PermissionBean permissionBean) {
/components\dialogs\PermissionDialog.java:51:        this.permissionBean = permissionBean;
/components\dialogs\PermissionDialog.java:52:        return this;
/components\dialogs\PermissionDialog.java:53:    }
/components\dialogs\PermissionDialog.java:55:    public OnGrantedCallback getOnGrantedCallback() {
/components\dialogs\PermissionDialog.java:56:        return onGrantedCallback;
/components\dialogs\PermissionDialog.java:57:    }
/components\dialogs\PermissionDialog.java:59:    public PermissionDialog setOnGrantedCallback(OnGrantedCallback onGrantedCallback) {
/components\dialogs\PermissionDialog.java:60:        this.onGrantedCallback = onGrantedCallback;
/components\dialogs\PermissionDialog.java:61:        return this;
/components\dialogs\PermissionDialog.java:62:    }
/components\dialogs\PermissionDialog.java:64:    public OnDeniedCallback getOnDeniedCallback() {
/components\dialogs\PermissionDialog.java:65:        return onDeniedCallback;
/components\dialogs\PermissionDialog.java:66:    }
/components\dialogs\PermissionDialog.java:68:    public PermissionDialog setOnDeniedCallback(OnDeniedCallback onDeniedCallback) {
/components\dialogs\PermissionDialog.java:69:        this.onDeniedCallback = onDeniedCallback;
/components\dialogs\PermissionDialog.java:70:        return this;
/components\dialogs\PermissionDialog.java:71:    }
/components\dialogs\PermissionDialog.java:73:    private void initView() {
/components\dialogs\PermissionDialog.java:74:        if (permissionBean == null) {
/components\dialogs\PermissionDialog.java:75:            throw new IllegalArgumentException();
/components\dialogs\PermissionDialog.java:76:        }
/components\dialogs\PermissionDialog.java:77:        titleView.setText(permissionBean.getTitle());
/components\dialogs\PermissionDialog.java:78:        iconView.setImageResource(permissionBean.getIcon());
/components\dialogs\PermissionDialog.java:79:        allowBtn.setOnClickListener(this);
/components\dialogs\PermissionDialog.java:80:        deniedBtn.setOnClickListener(this);
/components\dialogs\PermissionDialog.java:81:    }
/components\dialogs\PermissionDialog.java:83:    @SuppressLint("ApplySharedPref")
/components\dialogs\PermissionDialog.java:84:    @Override
/components\dialogs\PermissionDialog.java:85:    public void onClick(View v) {
/components\dialogs\PermissionDialog.java:86:        switch (v.getId()) {
/components\dialogs\PermissionDialog.java:87:            case R.id.permission_actions_allow:
/components\dialogs\PermissionDialog.java:88:                if (getOnGrantedCallback() != null) {
/components\dialogs\PermissionDialog.java:89:                    getOnGrantedCallback().onGranted(checkBox.isChecked());
/components\dialogs\PermissionDialog.java:90:                }
/components\dialogs\PermissionDialog.java:91:                if (checkBox.isChecked()) {
/components\dialogs\PermissionDialog.java:92:                    SharedPreferencesUtil.get(v.getContext(), SharedPreferencesUtil.SP_PERMISSION)
/components\dialogs\PermissionDialog.java:93:                            .edit()
/components\dialogs\PermissionDialog.java:94:                            .putInt(permissionBean.getData() + "_" + permissionBean.getId(), STATE_ALLOW)
/components\dialogs\PermissionDialog.java:95:                            .commit();
/components\dialogs\PermissionDialog.java:96:                }
/components\dialogs\PermissionDialog.java:97:                dismiss();
/components\dialogs\PermissionDialog.java:98:                break;
/components\dialogs\PermissionDialog.java:99:            case R.id.permission_actions_denied:
/components\dialogs\PermissionDialog.java:100:                if (getOnDeniedCallback() != null) {
/components\dialogs\PermissionDialog.java:101:                    getOnDeniedCallback().onDenied(checkBox.isChecked());
/components\dialogs\PermissionDialog.java:102:                }
/components\dialogs\PermissionDialog.java:103:                if (checkBox.isChecked()) {
/components\dialogs\PermissionDialog.java:104:                    SharedPreferencesUtil.get(v.getContext(), SharedPreferencesUtil.SP_PERMISSION)
/components\dialogs\PermissionDialog.java:105:                            .edit()
/components\dialogs\PermissionDialog.java:106:                            .putInt(permissionBean.getData() + "_" + permissionBean.getId(), STATE_DENIED)
/components\dialogs\PermissionDialog.java:107:                            .commit();
/components\dialogs\PermissionDialog.java:108:                }
/components\dialogs\PermissionDialog.java:109:                dismiss();
/components\dialogs\PermissionDialog.java:110:                break;
/components\dialogs\PermissionDialog.java:111:        }
/components\dialogs\PermissionDialog.java:112:    }
/components\dialogs\PermissionDialog.java:114:    @Override
/components\dialogs\PermissionDialog.java:115:    public void show() {
/components\dialogs\PermissionDialog.java:116:        int state = SharedPreferencesUtil.get(getContext(), SharedPreferencesUtil.SP_PERMISSION).getInt(permissionBean.getData() + "_" + permissionBean.getId(), STATE_UNSET);
/components\dialogs\PermissionDialog.java:117:        if (state != STATE_UNSET) {
/components\dialogs\PermissionDialog.java:118:            if (state == STATE_ALLOW) {
/components\dialogs\PermissionDialog.java:119:                if (getOnGrantedCallback() != null) {
/components\dialogs\PermissionDialog.java:120:                    getOnGrantedCallback().onGranted(true);
/components\dialogs\PermissionDialog.java:121:                }
/components\dialogs\PermissionDialog.java:122:            } else if (state == STATE_DENIED) {
/components\dialogs\PermissionDialog.java:123:                if (getOnDeniedCallback() != null) {
/components\dialogs\PermissionDialog.java:124:                    getOnDeniedCallback().onDenied(true);
/components\dialogs\PermissionDialog.java:125:                }
/components\dialogs\PermissionDialog.java:126:            }
/components\dialogs\PermissionDialog.java:127:        } else {
/components\dialogs\PermissionDialog.java:128:            super.show();
/components\dialogs\PermissionDialog.java:129:        }
/components\dialogs\PermissionDialog.java:130:    }
/components\dialogs\PermissionDialog.java:132:    public static class CustomPermission {
/components\dialogs\PermissionDialog.java:133:        public static final int PERMISSION_LOCATION = 0;
/components\dialogs\PermissionDialog.java:134:        public static final int PERMISSION_START_APP = 1;
/components\dialogs\PermissionDialog.java:135:    }
/components\dialogs\PermissionDialog.java:136:}/components\dialogs\SingleChooseDialog.java:1:package com.huanchengfly.tieba.post.components.dialogs;
/components\dialogs\SingleChooseDialog.java:3:import android.content.Context;
/components\dialogs\SingleChooseDialog.java:4:import android.view.View;
/components\dialogs\SingleChooseDialog.java:5:import android.widget.ListView;
/components\dialogs\SingleChooseDialog.java:7:import androidx.appcompat.app.AlertDialog;
/components\dialogs\SingleChooseDialog.java:9:import com.huanchengfly.tieba.post.R;
/components\dialogs\SingleChooseDialog.java:10:import com.huanchengfly.tieba.post.adapters.SingleChooseAdapter;
/components\dialogs\SingleChooseDialog.java:11:import com.huanchengfly.tieba.post.interfaces.OnChooseListener;
/components\dialogs\SingleChooseDialog.java:13:import java.util.Arrays;
/components\dialogs\SingleChooseDialog.java:14:import java.util.List;
/components\dialogs\SingleChooseDialog.java:16:public class SingleChooseDialog extends AlertDialog {
/components\dialogs\SingleChooseDialog.java:17:    private Context mContext;
/components\dialogs\SingleChooseDialog.java:18:    private ListView listView;
/components\dialogs\SingleChooseDialog.java:19:    private List<String> strings;
/components\dialogs\SingleChooseDialog.java:20:    private OnChooseListener onChooseListener;
/components\dialogs\SingleChooseDialog.java:21:    private SingleChooseAdapter adapter;
/components\dialogs\SingleChooseDialog.java:23:    public SingleChooseDialog(Context context, String[] strings) {
/components\dialogs\SingleChooseDialog.java:24:        super(context);
/components\dialogs\SingleChooseDialog.java:25:        this.mContext = context;
/components\dialogs\SingleChooseDialog.java:26:        this.strings = Arrays.asList(strings);
/components\dialogs\SingleChooseDialog.java:27:        initView();
/components\dialogs\SingleChooseDialog.java:28:    }
/components\dialogs\SingleChooseDialog.java:30:    public SingleChooseDialog setOnChooseListener(OnChooseListener onChooseListener) {
/components\dialogs\SingleChooseDialog.java:31:        this.onChooseListener = onChooseListener;
/components\dialogs\SingleChooseDialog.java:32:        return this;
/components\dialogs\SingleChooseDialog.java:33:    }
/components\dialogs\SingleChooseDialog.java:35:    public SingleChooseDialog setChoosePosition(int choosePosition) {
/components\dialogs\SingleChooseDialog.java:36:        adapter.setChoosePosition(choosePosition);
/components\dialogs\SingleChooseDialog.java:37:        return this;
/components\dialogs\SingleChooseDialog.java:38:    }
/components\dialogs\SingleChooseDialog.java:40:    private void initView() {
/components\dialogs\SingleChooseDialog.java:41:        View contentView = View.inflate(mContext, R.layout.dialog_choose, null);
/components\dialogs\SingleChooseDialog.java:42:        listView = contentView.findViewById(R.id.dialog_choose_list_view);
/components\dialogs\SingleChooseDialog.java:43:        adapter = new SingleChooseAdapter(mContext, strings);
/components\dialogs\SingleChooseDialog.java:44:        listView.setAdapter(adapter);
/components\dialogs\SingleChooseDialog.java:45:        listView.setOnItemClickListener((parent, view, position, id) -> adapter.setChoosePosition(position));
/components\dialogs\SingleChooseDialog.java:46:        setButton(BUTTON_POSITIVE, mContext.getString(R.string.button_sure_default), (dialog, which) -> {
/components\dialogs\SingleChooseDialog.java:47:            if (onChooseListener != null) {
/components\dialogs\SingleChooseDialog.java:48:                int position = adapter.getChoosePosition();
/components\dialogs\SingleChooseDialog.java:49:                if (position != -1) {
/components\dialogs\SingleChooseDialog.java:50:                    onChooseListener.onChoose(position, strings.get(position));
/components\dialogs\SingleChooseDialog.java:51:                }
/components\dialogs\SingleChooseDialog.java:52:            }
/components\dialogs\SingleChooseDialog.java:53:        });
/components\dialogs\SingleChooseDialog.java:54:        setButton(BUTTON_NEGATIVE, mContext.getString(R.string.button_cancel), (dialog, which) -> {
/components\dialogs\SingleChooseDialog.java:55:            cancel();
/components\dialogs\SingleChooseDialog.java:56:        });
/components\dialogs\SingleChooseDialog.java:57:        setView(contentView);
/components\dialogs\SingleChooseDialog.java:58:    }
/components\dialogs\SingleChooseDialog.java:59:}
/components\dialogs\VerifyCodeDialog.java:1:package com.huanchengfly.tieba.post.components.dialogs;
/components\dialogs\VerifyCodeDialog.java:3:import android.content.Context;
/components\dialogs\VerifyCodeDialog.java:4:import android.text.Editable;
/components\dialogs\VerifyCodeDialog.java:5:import android.view.View;
/components\dialogs\VerifyCodeDialog.java:6:import android.widget.Button;
/components\dialogs\VerifyCodeDialog.java:7:import android.widget.EditText;
/components\dialogs\VerifyCodeDialog.java:8:import android.widget.ImageView;
/components\dialogs\VerifyCodeDialog.java:10:import androidx.appcompat.app.AlertDialog;
/components\dialogs\VerifyCodeDialog.java:12:import com.bumptech.glide.request.RequestOptions;
/components\dialogs\VerifyCodeDialog.java:13:import com.google.android.material.textfield.TextInputLayout;
/components\dialogs\VerifyCodeDialog.java:14:import com.huanchengfly.tieba.post.R;
/components\dialogs\VerifyCodeDialog.java:15:import com.huanchengfly.tieba.post.adapters.TextWatcherAdapter;
/components\dialogs\VerifyCodeDialog.java:16:import com.huanchengfly.tieba.post.interfaces.OnSubmitListener;
/components\dialogs\VerifyCodeDialog.java:17:import com.huanchengfly.tieba.post.utils.ImageUtil;
/components\dialogs\VerifyCodeDialog.java:19:public class VerifyCodeDialog extends AlertDialog {
/components\dialogs\VerifyCodeDialog.java:20:    private Context mContext;
/components\dialogs\VerifyCodeDialog.java:21:    private View contentView;
/components\dialogs\VerifyCodeDialog.java:22:    private ImageView codeImageView;
/components\dialogs\VerifyCodeDialog.java:23:    private Button submitBtn;
/components\dialogs\VerifyCodeDialog.java:24:    private TextInputLayout codeInputLayout;
/components\dialogs\VerifyCodeDialog.java:25:    private EditText codeInputEditText;
/components\dialogs\VerifyCodeDialog.java:26:    private String picUrl;
/components\dialogs\VerifyCodeDialog.java:27:    private OnSubmitListener onSubmitListener;
/components\dialogs\VerifyCodeDialog.java:29:    public VerifyCodeDialog(Context context, String picUrl) {
/components\dialogs\VerifyCodeDialog.java:30:        super(context);
/components\dialogs\VerifyCodeDialog.java:31:        this.mContext = context;
/components\dialogs\VerifyCodeDialog.java:32:        this.picUrl = picUrl;
/components\dialogs\VerifyCodeDialog.java:33:        setTitle(R.string.title_verify_code);
/components\dialogs\VerifyCodeDialog.java:34:        initView();
/components\dialogs\VerifyCodeDialog.java:35:    }
/components\dialogs\VerifyCodeDialog.java:37:    public VerifyCodeDialog setOnSubmitListener(OnSubmitListener listener) {
/components\dialogs\VerifyCodeDialog.java:38:        this.onSubmitListener = listener;
/components\dialogs\VerifyCodeDialog.java:39:        return this;
/components\dialogs\VerifyCodeDialog.java:40:    }
/components\dialogs\VerifyCodeDialog.java:42:    private void initView() {
/components\dialogs\VerifyCodeDialog.java:43:        contentView = View.inflate(mContext, R.layout.dialog_verify_code, null);
/components\dialogs\VerifyCodeDialog.java:44:        codeImageView = contentView.findViewById(R.id.dialog_verify_code_pic);
/components\dialogs\VerifyCodeDialog.java:45:        codeInputLayout = contentView.findViewById(R.id.dialog_verify_code_input_layout);
/components\dialogs\VerifyCodeDialog.java:46:        codeInputEditText = codeInputLayout.getEditText();
/components\dialogs\VerifyCodeDialog.java:47:        submitBtn = contentView.findViewById(R.id.dialog_vertify_code_submit);
/components\dialogs\VerifyCodeDialog.java:48:        submitBtn.setOnClickListener((View view) -> {
/components\dialogs\VerifyCodeDialog.java:49:            if (codeInputEditText.getText() != null) {
/components\dialogs\VerifyCodeDialog.java:50:                if (!codeInputEditText.getText().toString().isEmpty()) {
/components\dialogs\VerifyCodeDialog.java:51:                    if (onSubmitListener != null) {
/components\dialogs\VerifyCodeDialog.java:52:                        onSubmitListener.onSubmit(codeInputEditText.getText().toString());
/components\dialogs\VerifyCodeDialog.java:53:                    }
/components\dialogs\VerifyCodeDialog.java:54:                    cancel();
/components\dialogs\VerifyCodeDialog.java:55:                    return;
/components\dialogs\VerifyCodeDialog.java:56:                }
/components\dialogs\VerifyCodeDialog.java:57:            }
/components\dialogs\VerifyCodeDialog.java:58:            codeInputLayout.setError(getContext().getText(R.string.toast_verify_code_empty));
/components\dialogs\VerifyCodeDialog.java:59:        });
/components\dialogs\VerifyCodeDialog.java:60:        codeInputEditText.addTextChangedListener(new TextWatcherAdapter() {
/components\dialogs\VerifyCodeDialog.java:61:            @Override
/components\dialogs\VerifyCodeDialog.java:62:            public void afterTextChanged(Editable editable) {
/components\dialogs\VerifyCodeDialog.java:63:                if (editable != null) {
/components\dialogs\VerifyCodeDialog.java:64:                    if (!editable.toString().isEmpty()) {
/components\dialogs\VerifyCodeDialog.java:65:                        codeInputLayout.setErrorEnabled(false);
/components\dialogs\VerifyCodeDialog.java:66:                        codeInputLayout.setError(null);
/components\dialogs\VerifyCodeDialog.java:67:                        return;
/components\dialogs\VerifyCodeDialog.java:68:                    }
/components\dialogs\VerifyCodeDialog.java:69:                }
/components\dialogs\VerifyCodeDialog.java:70:                codeInputLayout.setError(getContext().getText(R.string.toast_verify_code_empty));
/components\dialogs\VerifyCodeDialog.java:71:            }
/components\dialogs\VerifyCodeDialog.java:72:        });
/components\dialogs\VerifyCodeDialog.java:73:        setView(contentView);
/components\dialogs\VerifyCodeDialog.java:74:        RequestOptions requestOptions = new RequestOptions()
/components\dialogs\VerifyCodeDialog.java:75:                .placeholder(R.drawable.bg_placeholder)
/components\dialogs\VerifyCodeDialog.java:76:                .skipMemoryCache(true);
/components\dialogs\VerifyCodeDialog.java:77:        ImageUtil.load(codeImageView, ImageUtil.LOAD_TYPE_SMALL_PIC, picUrl, true);
/components\dialogs\VerifyCodeDialog.java:78:    }
/components\dialogs\VerifyCodeDialog.java:79:}/components\dialogs\CustomThemeDialog.kt:1:package com.huanchengfly.tieba.post.components.dialogs
/components\dialogs\CustomThemeDialog.kt:3:import android.annotation.SuppressLint
/components\dialogs\CustomThemeDialog.kt:4:import android.content.Context
/components\dialogs\CustomThemeDialog.kt:5:import android.content.DialogInterface
/components\dialogs\CustomThemeDialog.kt:6:import android.content.res.ColorStateList
/components\dialogs\CustomThemeDialog.kt:7:import android.graphics.Color
/components\dialogs\CustomThemeDialog.kt:8:import android.view.View
/components\dialogs\CustomThemeDialog.kt:9:import android.widget.CheckBox
/components\dialogs\CustomThemeDialog.kt:10:import android.widget.CompoundButton
/components\dialogs\CustomThemeDialog.kt:11:import android.widget.LinearLayout
/components\dialogs\CustomThemeDialog.kt:12:import androidx.annotation.ColorInt
/components\dialogs\CustomThemeDialog.kt:13:import androidx.appcompat.app.AlertDialog
/components\dialogs\CustomThemeDialog.kt:14:import com.huanchengfly.tieba.post.BaseApplication.ThemeDelegate.getColorByAttr
/components\dialogs\CustomThemeDialog.kt:15:import com.huanchengfly.tieba.post.R
/components\dialogs\CustomThemeDialog.kt:16:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils
/components\dialogs\CustomThemeDialog.kt:17:import com.huanchengfly.tieba.post.utils.ThemeUtil
/components\dialogs\CustomThemeDialog.kt:18:import com.huanchengfly.tieba.post.utils.appPreferences
/components\dialogs\CustomThemeDialog.kt:19:import com.jrummyapps.android.colorpicker.ColorPickerDialog
/components\dialogs\CustomThemeDialog.kt:20:import com.jrummyapps.android.colorpicker.ColorPickerDialogListener
/components\dialogs\CustomThemeDialog.kt:21:import java.util.*
/components\dialogs\CustomThemeDialog.kt:23:class CustomThemeDialog(context: Context) : AlertDialog(context),
/components\dialogs\CustomThemeDialog.kt:24:        View.OnClickListener, DialogInterface.OnClickListener, CompoundButton.OnCheckedChangeListener, ColorPickerDialogListener {
/components\dialogs\CustomThemeDialog.kt:25:    private var primaryColorLayout: LinearLayout? = null
/components\dialogs\CustomThemeDialog.kt:26:    private var primaryColorView: View? = null
/components\dialogs\CustomThemeDialog.kt:27:    private var statusBarFont: CheckBox? = null
/components\dialogs\CustomThemeDialog.kt:28:    private var toolbarPrimaryColor: CheckBox? = null
/components\dialogs\CustomThemeDialog.kt:29:    private var primaryColor = 0
/components\dialogs\CustomThemeDialog.kt:30:    private var statusBarFontDark = false
/components\dialogs\CustomThemeDialog.kt:31:    private var toolbarPrimary = false
/components\dialogs\CustomThemeDialog.kt:32:    private fun initListener() {
/components\dialogs\CustomThemeDialog.kt:33:        primaryColorLayout!!.setOnClickListener(this)
/components\dialogs\CustomThemeDialog.kt:34:        statusBarFont!!.setOnCheckedChangeListener(this)
/components\dialogs\CustomThemeDialog.kt:35:        toolbarPrimaryColor!!.setOnCheckedChangeListener(this)
/components\dialogs\CustomThemeDialog.kt:36:    }
/components\dialogs\CustomThemeDialog.kt:38:    private fun initView() {
/components\dialogs\CustomThemeDialog.kt:39:        val contentView = View.inflate(context, R.layout.dialog_custom_theme, null)
/components\dialogs\CustomThemeDialog.kt:40:        primaryColorLayout = contentView.findViewById(R.id.custom_theme_primary_holder)
/components\dialogs\CustomThemeDialog.kt:41:        primaryColorView = contentView.findViewById(R.id.custom_theme_primary)
/components\dialogs\CustomThemeDialog.kt:42:        statusBarFont = contentView.findViewById(R.id.custom_theme_status_bar_font)
/components\dialogs\CustomThemeDialog.kt:43:        toolbarPrimaryColor = contentView.findViewById(R.id.custom_theme_toolbar_primary_color)
/components\dialogs\CustomThemeDialog.kt:44:        setView(contentView)
/components\dialogs\CustomThemeDialog.kt:45:        primaryColor = getColorByAttr(context, R.attr.colorPrimary, ThemeUtil.THEME_CUSTOM)
/components\dialogs\CustomThemeDialog.kt:46:        statusBarFontDark = context.appPreferences.customStatusBarFontDark
/components\dialogs\CustomThemeDialog.kt:47:        toolbarPrimary = context.appPreferences.customToolbarPrimaryColor
/components\dialogs\CustomThemeDialog.kt:48:        refreshView()
/components\dialogs\CustomThemeDialog.kt:49:    }
/components\dialogs\CustomThemeDialog.kt:51:    private fun refreshView() {
/components\dialogs\CustomThemeDialog.kt:52:        primaryColorView!!.backgroundTintList = ColorStateList.valueOf(primaryColor)
/components\dialogs\CustomThemeDialog.kt:53:        statusBarFont!!.isChecked = statusBarFontDark
/components\dialogs\CustomThemeDialog.kt:54:        toolbarPrimaryColor!!.isChecked = toolbarPrimary
/components\dialogs\CustomThemeDialog.kt:55:        statusBarFont!!.visibility = if (toolbarPrimary) View.VISIBLE else View.GONE
/components\dialogs\CustomThemeDialog.kt:56:        ThemeUtils.refreshUI(context)
/components\dialogs\CustomThemeDialog.kt:57:    }
/components\dialogs\CustomThemeDialog.kt:59:    override fun onClick(v: View) {
/components\dialogs\CustomThemeDialog.kt:60:        if (v.id == R.id.custom_theme_primary_holder) {
/components\dialogs\CustomThemeDialog.kt:61:            val primaryColorPicker = ColorPickerDialog.newBuilder()
/components\dialogs\CustomThemeDialog.kt:62:                    .setDialogTitle(R.string.title_color_picker_primary)
/components\dialogs\CustomThemeDialog.kt:63:                    .setDialogType(ColorPickerDialog.TYPE_PRESETS)
/components\dialogs\CustomThemeDialog.kt:64:                    .setShowAlphaSlider(false)
/components\dialogs\CustomThemeDialog.kt:65:                    .setDialogId(0)
/components\dialogs\CustomThemeDialog.kt:66:                    .setAllowPresets(true)
/components\dialogs\CustomThemeDialog.kt:67:                    .setColor(primaryColor)
/components\dialogs\CustomThemeDialog.kt:68:                    .create()
/components\dialogs\CustomThemeDialog.kt:69:            primaryColorPicker.setColorPickerDialogListener(this)
/components\dialogs\CustomThemeDialog.kt:70:            primaryColorPicker.show(Objects.requireNonNull(ThemeUtils.getWrapperActivity(context)).fragmentManager, "ColorPicker_PrimaryColor")
/components\dialogs\CustomThemeDialog.kt:71:        }
/components\dialogs\CustomThemeDialog.kt:72:        refreshView()
/components\dialogs\CustomThemeDialog.kt:73:    }
/components\dialogs\CustomThemeDialog.kt:75:    @SuppressLint("ApplySharedPref")
/components\dialogs\CustomThemeDialog.kt:76:    override fun onClick(dialog: DialogInterface, which: Int) {
/components\dialogs\CustomThemeDialog.kt:77:        context.appPreferences.apply {
/components\dialogs\CustomThemeDialog.kt:78:            customPrimaryColor = toString(primaryColor)
/components\dialogs\CustomThemeDialog.kt:79:            customStatusBarFontDark = (statusBarFontDark || !toolbarPrimary)
/components\dialogs\CustomThemeDialog.kt:80:            customToolbarPrimaryColor = toolbarPrimary
/components\dialogs\CustomThemeDialog.kt:81:        }
/components\dialogs\CustomThemeDialog.kt:82:        dialog.dismiss()
/components\dialogs\CustomThemeDialog.kt:83:    }
/components\dialogs\CustomThemeDialog.kt:85:    override fun onCheckedChanged(buttonView: CompoundButton, isChecked: Boolean) {
/components\dialogs\CustomThemeDialog.kt:86:        if (buttonView.id == R.id.custom_theme_status_bar_font) {
/components\dialogs\CustomThemeDialog.kt:87:            statusBarFontDark = isChecked
/components\dialogs\CustomThemeDialog.kt:88:        } else if (buttonView.id == R.id.custom_theme_toolbar_primary_color) {
/components\dialogs\CustomThemeDialog.kt:89:            toolbarPrimary = isChecked
/components\dialogs\CustomThemeDialog.kt:90:            statusBarFontDark = !isChecked
/components\dialogs\CustomThemeDialog.kt:91:        }
/components\dialogs\CustomThemeDialog.kt:92:        refreshView()
/components\dialogs\CustomThemeDialog.kt:93:    }
/components\dialogs\CustomThemeDialog.kt:95:    override fun onColorSelected(dialogId: Int, color: Int) {
/components\dialogs\CustomThemeDialog.kt:96:        if (dialogId == 0) {
/components\dialogs\CustomThemeDialog.kt:97:            primaryColor = color
/components\dialogs\CustomThemeDialog.kt:98:            refreshView()
/components\dialogs\CustomThemeDialog.kt:99:        }
/components\dialogs\CustomThemeDialog.kt:100:    }
/components\dialogs\CustomThemeDialog.kt:102:    override fun onDialogDismissed(dialogId: Int) {}
/components\dialogs\CustomThemeDialog.kt:104:    companion object {
/components\dialogs\CustomThemeDialog.kt:105:        fun toString(alpha: Int, red: Int, green: Int, blue: Int): String {
/components\dialogs\CustomThemeDialog.kt:106:            val hr = Integer.toHexString(red)
/components\dialogs\CustomThemeDialog.kt:107:            val hg = Integer.toHexString(green)
/components\dialogs\CustomThemeDialog.kt:108:            val hb = Integer.toHexString(blue)
/components\dialogs\CustomThemeDialog.kt:109:            val ha = Integer.toHexString(alpha)
/components\dialogs\CustomThemeDialog.kt:110:            return "#" + fixHexString(ha) + fixHexString(hr) + fixHexString(hg) + fixHexString(hb)
/components\dialogs\CustomThemeDialog.kt:111:        }
/components\dialogs\CustomThemeDialog.kt:113:        private fun fixHexString(hex: String): String {
/components\dialogs\CustomThemeDialog.kt:114:            var hexString = hex
/components\dialogs\CustomThemeDialog.kt:115:            if (hexString.isEmpty()) {
/components\dialogs\CustomThemeDialog.kt:116:                hexString = "00"
/components\dialogs\CustomThemeDialog.kt:117:            }
/components\dialogs\CustomThemeDialog.kt:118:            if (hexString.length == 1) {
/components\dialogs\CustomThemeDialog.kt:119:                hexString = "0$hexString"
/components\dialogs\CustomThemeDialog.kt:120:            }
/components\dialogs\CustomThemeDialog.kt:121:            if (hexString.length > 2) {
/components\dialogs\CustomThemeDialog.kt:122:                hexString = hexString.substring(0, 2)
/components\dialogs\CustomThemeDialog.kt:123:            }
/components\dialogs\CustomThemeDialog.kt:124:            return hexString
/components\dialogs\CustomThemeDialog.kt:125:        }
/components\dialogs\CustomThemeDialog.kt:127:        fun toString(@ColorInt color: Int): String {
/components\dialogs\CustomThemeDialog.kt:128:            return toString(Color.alpha(color), Color.red(color), Color.green(color), Color.blue(color))
/components\dialogs\CustomThemeDialog.kt:129:        }
/components\dialogs\CustomThemeDialog.kt:130:    }
/components\dialogs\CustomThemeDialog.kt:132:    init {
/components\dialogs\CustomThemeDialog.kt:133:        setButton(DialogInterface.BUTTON_POSITIVE, context.getString(R.string.button_finish), this)
/components\dialogs\CustomThemeDialog.kt:134:        setCancelable(false)
/components\dialogs\CustomThemeDialog.kt:135:        setTitle(R.string.title_custom_theme)
/components\dialogs\CustomThemeDialog.kt:136:        initView()
/components\dialogs\CustomThemeDialog.kt:137:        initListener()
/components\dialogs\CustomThemeDialog.kt:138:    }
/components\dialogs\CustomThemeDialog.kt:139:}/components\dialogs\DislikeDialog.kt:1:package com.huanchengfly.tieba.post.components.dialogs
/components\dialogs\DislikeDialog.kt:3:import android.content.Context
/components\dialogs\DislikeDialog.kt:4:import android.view.View
/components\dialogs\DislikeDialog.kt:5:import android.widget.Button
/components\dialogs\DislikeDialog.kt:6:import androidx.appcompat.app.AlertDialog
/components\dialogs\DislikeDialog.kt:7:import androidx.recyclerview.widget.GridLayoutManager
/components\dialogs\DislikeDialog.kt:8:import androidx.recyclerview.widget.GridLayoutManager.SpanSizeLookup
/components\dialogs\DislikeDialog.kt:9:import androidx.recyclerview.widget.RecyclerView
/components\dialogs\DislikeDialog.kt:10:import com.huanchengfly.tieba.post.api.TiebaApi
/components\dialogs\DislikeDialog.kt:11:import com.huanchengfly.tieba.post.api.models.CommonResponse
/components\dialogs\DislikeDialog.kt:12:import com.huanchengfly.tieba.post.api.models.PersonalizedBean.ThreadPersonalizedBean
/components\dialogs\DislikeDialog.kt:13:import com.huanchengfly.tieba.post.R
/components\dialogs\DislikeDialog.kt:14:import com.huanchengfly.tieba.post.adapters.DislikeAdapter
/components\dialogs\DislikeDialog.kt:15:import com.huanchengfly.tieba.post.components.dividers.SpacesItemDecoration
/components\dialogs\DislikeDialog.kt:16:import com.huanchengfly.tieba.post.models.DislikeBean
/components\dialogs\DislikeDialog.kt:17:import com.huanchengfly.tieba.post.utils.AccountUtil
/components\dialogs\DislikeDialog.kt:18:import com.huanchengfly.tieba.post.toDp
/components\dialogs\DislikeDialog.kt:19:import retrofit2.Call
/components\dialogs\DislikeDialog.kt:20:import retrofit2.Callback
/components\dialogs\DislikeDialog.kt:21:import retrofit2.Response
/components\dialogs\DislikeDialog.kt:22:import java.util.*
/components\dialogs\DislikeDialog.kt:24:class DislikeDialog(
/components\dialogs\DislikeDialog.kt:25:        context: Context,
/components\dialogs\DislikeDialog.kt:26:        private val threadPersonalizedBean: ThreadPersonalizedBean,
/components\dialogs\DislikeDialog.kt:27:        private val fid: String
/components\dialogs\DislikeDialog.kt:28:) : AlertDialog(context), View.OnClickListener {
/components\dialogs\DislikeDialog.kt:29:    private var dislikeAdapter: DislikeAdapter? = null
/components\dialogs\DislikeDialog.kt:30:    var onSubmitListener: OnSubmitListener? = null
/components\dialogs\DislikeDialog.kt:31:    private val clickTime: Long = System.currentTimeMillis()
/components\dialogs\DislikeDialog.kt:33:    private fun initView() {
/components\dialogs\DislikeDialog.kt:34:        val contentView = View.inflate(context, R.layout.dialog_dislike, null)
/components\dialogs\DislikeDialog.kt:35:        val submitBtn = contentView.findViewById<Button>(R.id.submit_btn)
/components\dialogs\DislikeDialog.kt:36:        dislikeAdapter = DislikeAdapter(context, threadPersonalizedBean.dislikeResource)
/components\dialogs\DislikeDialog.kt:37:        contentView.findViewById<RecyclerView>(R.id.recycler_view).apply {
/components\dialogs\DislikeDialog.kt:38:            layoutManager = GridLayoutManager(context, 2, RecyclerView.VERTICAL, false).apply {
/components\dialogs\DislikeDialog.kt:39:                spanSizeLookup = object : SpanSizeLookup() {
/components\dialogs\DislikeDialog.kt:40:                    override fun getSpanSize(position: Int): Int {
/components\dialogs\DislikeDialog.kt:41:                        return if ("7" == dislikeAdapter!!.getItem(position).dislikeId) 2 else 1
/components\dialogs\DislikeDialog.kt:42:                    }
/components\dialogs\DislikeDialog.kt:43:                }
/components\dialogs\DislikeDialog.kt:44:            }
/components\dialogs\DislikeDialog.kt:45:            addItemDecoration(SpacesItemDecoration(4.toDp()))
/components\dialogs\DislikeDialog.kt:46:            adapter = dislikeAdapter
/components\dialogs\DislikeDialog.kt:47:        }
/components\dialogs\DislikeDialog.kt:48:        submitBtn.setOnClickListener(this)
/components\dialogs\DislikeDialog.kt:49:        setView(contentView)
/components\dialogs\DislikeDialog.kt:50:    }
/components\dialogs\DislikeDialog.kt:52:    override fun onClick(v: View) {
/components\dialogs\DislikeDialog.kt:53:        if (v.id == R.id.submit_btn) {
/components\dialogs\DislikeDialog.kt:54:            val selectIds: MutableList<String> = ArrayList()
/components\dialogs\DislikeDialog.kt:55:            val extras: MutableList<String> = ArrayList()
/components\dialogs\DislikeDialog.kt:56:            threadPersonalizedBean.dislikeResource?.filter {
/components\dialogs\DislikeDialog.kt:57:                dislikeAdapter!!.selectedIds.contains(it.dislikeId)
/components\dialogs\DislikeDialog.kt:58:            }?.forEach {
/components\dialogs\DislikeDialog.kt:59:                it.dislikeId?.let { it1 -> selectIds.add(it1) }
/components\dialogs\DislikeDialog.kt:60:                it.extra?.let { it1 -> extras.add(it1) }
/components\dialogs\DislikeDialog.kt:61:            }
/components\dialogs\DislikeDialog.kt:62:            TiebaApi.getInstance().submitDislike(
/components\dialogs\DislikeDialog.kt:63:                    DislikeBean(
/components\dialogs\DislikeDialog.kt:64:                            threadPersonalizedBean.tid,
/components\dialogs\DislikeDialog.kt:65:                            selectIds.joinToString(","),
/components\dialogs\DislikeDialog.kt:66:                            fid,
/components\dialogs\DislikeDialog.kt:67:                            clickTime,
/components\dialogs\DislikeDialog.kt:68:                            extras.joinToString(",")
/components\dialogs\DislikeDialog.kt:69:                    ),
/components\dialogs\DislikeDialog.kt:70:                    AccountUtil.getSToken(context)!!
/components\dialogs\DislikeDialog.kt:71:            ).enqueue(object : Callback<CommonResponse> {
/components\dialogs\DislikeDialog.kt:72:                override fun onFailure(call: Call<CommonResponse>, t: Throwable) {}
/components\dialogs\DislikeDialog.kt:73:                override fun onResponse(call: Call<CommonResponse>, response: Response<CommonResponse>) {}
/components\dialogs\DislikeDialog.kt:74:            })
/components\dialogs\DislikeDialog.kt:75:            if (onSubmitListener != null) {
/components\dialogs\DislikeDialog.kt:76:                onSubmitListener!!.onSubmit()
/components\dialogs\DislikeDialog.kt:77:            }
/components\dialogs\DislikeDialog.kt:78:            dismiss()
/components\dialogs\DislikeDialog.kt:79:        }
/components\dialogs\DislikeDialog.kt:80:    }
/components\dialogs\DislikeDialog.kt:82:    interface OnSubmitListener {
/components\dialogs\DislikeDialog.kt:83:        fun onSubmit()
/components\dialogs\DislikeDialog.kt:84:    }
/components\dialogs\DislikeDialog.kt:86:    init {
/components\dialogs\DislikeDialog.kt:87:        initView()
/components\dialogs\DislikeDialog.kt:88:    }
/components\dialogs\DislikeDialog.kt:89:}/components\dividers\CommonDivider.java:1:package com.huanchengfly.tieba.post.components.dividers;
/components\dividers\CommonDivider.java:3:import android.content.Context;
/components\dividers\CommonDivider.java:4:import android.view.View;
/components\dividers\CommonDivider.java:6:import androidx.recyclerview.widget.RecyclerView;
/components\dividers\CommonDivider.java:8:import com.othershe.baseadapter.base.BaseAdapter;
/components\dividers\CommonDivider.java:10:public class CommonDivider extends RecycleViewDivider {
/components\dividers\CommonDivider.java:11:    public CommonDivider(Context context, int orientation) {
/components\dividers\CommonDivider.java:12:        super(context, orientation);
/components\dividers\CommonDivider.java:13:    }
/components\dividers\CommonDivider.java:15:    public CommonDivider(Context context, int orientation, int drawableId) {
/components\dividers\CommonDivider.java:16:        super(context, orientation, drawableId);
/components\dividers\CommonDivider.java:17:    }
/components\dividers\CommonDivider.java:19:    public CommonDivider(Context context, int orientation, int drawableId, int leftInner) {
/components\dividers\CommonDivider.java:20:        super(context, orientation, drawableId, leftInner);
/components\dividers\CommonDivider.java:21:    }
/components\dividers\CommonDivider.java:23:    public CommonDivider(Context context, int orientation, int drawableId, int leftInner, int rightInner) {
/components\dividers\CommonDivider.java:24:        super(context, orientation, drawableId, leftInner, rightInner);
/components\dividers\CommonDivider.java:25:    }
/components\dividers\CommonDivider.java:27:    @Override
/components\dividers\CommonDivider.java:28:    protected boolean needInner(View child, RecyclerView parent) {
/components\dividers\CommonDivider.java:29:        RecyclerView.Adapter adapter = parent.getAdapter();
/components\dividers\CommonDivider.java:30:        if (adapter instanceof BaseAdapter) {
/components\dividers\CommonDivider.java:31:            int adapterPosition = parent.getChildAdapterPosition(child);
/components\dividers\CommonDivider.java:32:            int type = parent.getChildViewHolder(child).getItemViewType();
/components\dividers\CommonDivider.java:33:            return (adapterPosition + 1 < ((BaseAdapter) adapter).getDataCount() && adapter.getItemViewType(adapterPosition + 1) != 100002) || type < 200000;
/components\dividers\CommonDivider.java:34:        }
/components\dividers\CommonDivider.java:35:        return true;
/components\dividers\CommonDivider.java:36:    }
/components\dividers\CommonDivider.java:37:}
/components\dividers\FeedDivider.java:1:package com.huanchengfly.tieba.post.components.dividers;
/components\dividers\FeedDivider.java:3:import android.content.Context;
/components\dividers\FeedDivider.java:4:import android.graphics.Canvas;
/components\dividers\FeedDivider.java:5:import android.graphics.Rect;
/components\dividers\FeedDivider.java:6:import android.graphics.drawable.Drawable;
/components\dividers\FeedDivider.java:7:import android.view.View;
/components\dividers\FeedDivider.java:9:import androidx.annotation.NonNull;
/components\dividers\FeedDivider.java:10:import androidx.recyclerview.widget.LinearLayoutManager;
/components\dividers\FeedDivider.java:11:import androidx.recyclerview.widget.RecyclerView;
/components\dividers\FeedDivider.java:13:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/components\dividers\FeedDivider.java:14:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/components\dividers\FeedDivider.java:15:import com.huanchengfly.tieba.post.R;
/components\dividers\FeedDivider.java:16:import com.huanchengfly.tieba.post.adapters.PersonalizedFeedAdapter;
/components\dividers\FeedDivider.java:17:import com.huanchengfly.tieba.post.utils.DisplayUtil;
/components\dividers\FeedDivider.java:19:public class FeedDivider extends RecyclerView.ItemDecoration implements Tintable {
/components\dividers\FeedDivider.java:20:    public static final String TAG = "ThreadDivider";
/components\dividers\FeedDivider.java:22:    private Context mContext;
/components\dividers\FeedDivider.java:23:    private Drawable mDivider;
/components\dividers\FeedDivider.java:24:    private int mOrientation;
/components\dividers\FeedDivider.java:25:    private int mCommonDividerHeight;
/components\dividers\FeedDivider.java:27:    public FeedDivider(Context context) {
/components\dividers\FeedDivider.java:28:        mContext = context;
/components\dividers\FeedDivider.java:29:        mOrientation = LinearLayoutManager.VERTICAL;
/components\dividers\FeedDivider.java:30:        mDivider = context.getDrawable(R.drawable.drawable_divider);
/components\dividers\FeedDivider.java:31:        mCommonDividerHeight = DisplayUtil.dp2px(context, 8);
/components\dividers\FeedDivider.java:32:        tint();
/components\dividers\FeedDivider.java:33:    }
/components\dividers\FeedDivider.java:35:    @Override
/components\dividers\FeedDivider.java:36:    public void getItemOffsets(@NonNull Rect outRect, @NonNull View view, @NonNull RecyclerView parent, @NonNull RecyclerView.State state) {
/components\dividers\FeedDivider.java:37:        super.getItemOffsets(outRect, view, parent, state);
/components\dividers\FeedDivider.java:38:        if (parent.getAdapter() != null && parent.getChildLayoutPosition(view) + 1 == parent.getAdapter().getItemCount()) {
/components\dividers\FeedDivider.java:39:            outRect.set(0, 0, 0, 0);
/components\dividers\FeedDivider.java:40:        } else if (mOrientation == LinearLayoutManager.VERTICAL) {
/components\dividers\FeedDivider.java:41:            int adapterPosition = parent.getChildAdapterPosition(view);
/components\dividers\FeedDivider.java:42:            PersonalizedFeedAdapter adapter = (PersonalizedFeedAdapter) parent.getAdapter();
/components\dividers\FeedDivider.java:43:            if (adapter == null) {
/components\dividers\FeedDivider.java:44:                return;
/components\dividers\FeedDivider.java:45:            }
/components\dividers\FeedDivider.java:46:            outRect.set(0, 0, 0, adapter.getRefreshPosition() == -1 || (adapter.getRefreshPosition() + 1) != adapterPosition ? mCommonDividerHeight : 0);
/components\dividers\FeedDivider.java:47:        }
/components\dividers\FeedDivider.java:48:    }
/components\dividers\FeedDivider.java:50:    @Override
/components\dividers\FeedDivider.java:51:    public void onDraw(@NonNull Canvas c, @NonNull RecyclerView parent, @NonNull RecyclerView.State state) {
/components\dividers\FeedDivider.java:52:        super.onDraw(c, parent, state);
/components\dividers\FeedDivider.java:53:        if (mOrientation == LinearLayoutManager.VERTICAL) {
/components\dividers\FeedDivider.java:54:            drawVertical(c, parent);
/components\dividers\FeedDivider.java:55:        }
/components\dividers\FeedDivider.java:56:    }
/components\dividers\FeedDivider.java:58:    private void drawVertical(Canvas canvas, RecyclerView parent) {
/components\dividers\FeedDivider.java:59:        int left = parent.getPaddingLeft();
/components\dividers\FeedDivider.java:60:        final int right = parent.getMeasuredWidth() - parent.getPaddingRight();
/components\dividers\FeedDivider.java:61:        final int childSize = parent.getChildCount();
/components\dividers\FeedDivider.java:62:        for (int i = 0; i < childSize; i++) {
/components\dividers\FeedDivider.java:63:            final View child = parent.getChildAt(i);
/components\dividers\FeedDivider.java:64:            int adapterPosition = parent.getChildAdapterPosition(child);
/components\dividers\FeedDivider.java:65:            PersonalizedFeedAdapter adapter = (PersonalizedFeedAdapter) parent.getAdapter();
/components\dividers\FeedDivider.java:66:            if (adapter != null && adapterPosition > -1) {
/components\dividers\FeedDivider.java:67:                RecyclerView.LayoutParams layoutParams = (RecyclerView.LayoutParams) child.getLayoutParams();
/components\dividers\FeedDivider.java:68:                final int top = child.getBottom() + layoutParams.bottomMargin;
/components\dividers\FeedDivider.java:69:                if (mDivider != null) {
/components\dividers\FeedDivider.java:70:                    if (adapter.getRefreshPosition() == -1 || (adapter.getRefreshPosition() + 1) != adapterPosition) {
/components\dividers\FeedDivider.java:71:                        final int bottom = top + mCommonDividerHeight;
/components\dividers\FeedDivider.java:72:                        mDivider.setBounds(left, top, right, bottom);
/components\dividers\FeedDivider.java:73:                        mDivider.draw(canvas);
/components\dividers\FeedDivider.java:74:                    }
/components\dividers\FeedDivider.java:75:                }
/components\dividers\FeedDivider.java:76:            }
/components\dividers\FeedDivider.java:77:        }
/components\dividers\FeedDivider.java:78:    }
/components\dividers\FeedDivider.java:80:    @Override
/components\dividers\FeedDivider.java:81:    public void tint() {
/components\dividers\FeedDivider.java:82:        mDivider = ThemeUtils.tintDrawable(mDivider, ThemeUtils.getColorByAttr(mContext, R.attr.colorDivider));
/components\dividers\FeedDivider.java:83:    }
/components\dividers\FeedDivider.java:84:}/components\dividers\ForumDivider.java:1:package com.huanchengfly.tieba.post.components.dividers;
/components\dividers\ForumDivider.java:3:import android.content.Context;
/components\dividers\ForumDivider.java:4:import android.graphics.Canvas;
/components\dividers\ForumDivider.java:5:import android.graphics.Rect;
/components\dividers\ForumDivider.java:6:import android.graphics.drawable.Drawable;
/components\dividers\ForumDivider.java:7:import android.view.View;
/components\dividers\ForumDivider.java:9:import androidx.annotation.NonNull;
/components\dividers\ForumDivider.java:10:import androidx.core.content.ContextCompat;
/components\dividers\ForumDivider.java:11:import androidx.recyclerview.widget.LinearLayoutManager;
/components\dividers\ForumDivider.java:12:import androidx.recyclerview.widget.RecyclerView;
/components\dividers\ForumDivider.java:14:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/components\dividers\ForumDivider.java:15:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/components\dividers\ForumDivider.java:16:import com.huanchengfly.tieba.post.R;
/components\dividers\ForumDivider.java:17:import com.huanchengfly.tieba.post.adapters.ForumAdapter;
/components\dividers\ForumDivider.java:18:import com.huanchengfly.tieba.post.utils.DisplayUtil;
/components\dividers\ForumDivider.java:20:public class ForumDivider extends RecyclerView.ItemDecoration implements Tintable {
/components\dividers\ForumDivider.java:21:    public static final String TAG = "ForumDivider";
/components\dividers\ForumDivider.java:23:    private Drawable mDivider;
/components\dividers\ForumDivider.java:24:    private int mOrientation;
/components\dividers\ForumDivider.java:25:    private int mDividerHeight;
/components\dividers\ForumDivider.java:26:    private Context mContext;
/components\dividers\ForumDivider.java:28:    public ForumDivider(Context context, int orientation) {
/components\dividers\ForumDivider.java:29:        if (orientation != LinearLayoutManager.VERTICAL && orientation != LinearLayoutManager.HORIZONTAL) {
/components\dividers\ForumDivider.java:30:            throw new IllegalArgumentException("请输入正确的参数！");
/components\dividers\ForumDivider.java:31:        }
/components\dividers\ForumDivider.java:32:        mContext = context;
/components\dividers\ForumDivider.java:33:        mOrientation = orientation;
/components\dividers\ForumDivider.java:34:        mDivider = ContextCompat.getDrawable(context, R.drawable.drawable_divider);
/components\dividers\ForumDivider.java:35:        mDividerHeight = DisplayUtil.dp2px(context, 8);
/components\dividers\ForumDivider.java:36:        tint();
/components\dividers\ForumDivider.java:37:    }
/components\dividers\ForumDivider.java:39:    private boolean isHeader(int type) {
/components\dividers\ForumDivider.java:40:        return (type == ForumAdapter.TYPE_THREAD_COMMON || type == ForumAdapter.TYPE_THREAD_MULTI_PIC || type == ForumAdapter.TYPE_THREAD_SINGLE_PIC || type == ForumAdapter.TYPE_THREAD_VIDEO);
/components\dividers\ForumDivider.java:41:    }
/components\dividers\ForumDivider.java:43:    private boolean needDivider(RecyclerView parent, View view) {
/components\dividers\ForumDivider.java:44:        try {
/components\dividers\ForumDivider.java:45:            ForumAdapter forumAdapter = (ForumAdapter) parent.getAdapter();
/components\dividers\ForumDivider.java:46:            int position = parent.getChildViewHolder(view).getAdapterPosition();
/components\dividers\ForumDivider.java:47:            if (position >= 0) {
/components\dividers\ForumDivider.java:48:                if (parent.getChildViewHolder(view).getItemViewType() == ForumAdapter.TYPE_THREAD_TOP && forumAdapter.getItemViewType(position + 1) != ForumAdapter.TYPE_THREAD_TOP) {
/components\dividers\ForumDivider.java:49:                    return true;
/components\dividers\ForumDivider.java:50:                }
/components\dividers\ForumDivider.java:51:            }
/components\dividers\ForumDivider.java:52:        } catch (Exception ignored) {
/components\dividers\ForumDivider.java:53:        }
/components\dividers\ForumDivider.java:54:        return isHeader(parent.getChildViewHolder(view).getItemViewType());
/components\dividers\ForumDivider.java:55:    }
/components\dividers\ForumDivider.java:57:    @Override
/components\dividers\ForumDivider.java:58:    public void getItemOffsets(@NonNull Rect outRect, @NonNull View view, @NonNull RecyclerView parent, @NonNull RecyclerView.State state) {
/components\dividers\ForumDivider.java:59:        super.getItemOffsets(outRect, view, parent, state);
/components\dividers\ForumDivider.java:60:        if (mOrientation == LinearLayoutManager.VERTICAL) {
/components\dividers\ForumDivider.java:61:            outRect.set(0, 0, 0, needDivider(parent, view) ? mDividerHeight : 0);
/components\dividers\ForumDivider.java:62:        } else {
/components\dividers\ForumDivider.java:63:            outRect.set(0, 0, needDivider(parent, view) ? mDividerHeight : 0, 0);
/components\dividers\ForumDivider.java:64:        }
/components\dividers\ForumDivider.java:65:    }
/components\dividers\ForumDivider.java:67:    @Override
/components\dividers\ForumDivider.java:68:    public void onDraw(@NonNull Canvas c, @NonNull RecyclerView parent, @NonNull RecyclerView.State state) {
/components\dividers\ForumDivider.java:69:        super.onDraw(c, parent, state);
/components\dividers\ForumDivider.java:70:        if (mOrientation == LinearLayoutManager.VERTICAL) {
/components\dividers\ForumDivider.java:71:            drawVertical(c, parent, state);
/components\dividers\ForumDivider.java:72:        } else {
/components\dividers\ForumDivider.java:73:            drawHorizontal(c, parent, state);
/components\dividers\ForumDivider.java:74:        }
/components\dividers\ForumDivider.java:75:    }
/components\dividers\ForumDivider.java:77:    private void drawVertical(Canvas canvas, RecyclerView parent, RecyclerView.State state) {
/components\dividers\ForumDivider.java:78:        final int left = parent.getPaddingLeft();
/components\dividers\ForumDivider.java:79:        final int right = parent.getMeasuredWidth() - parent.getPaddingRight();
/components\dividers\ForumDivider.java:80:        final int childSize = parent.getChildCount();
/components\dividers\ForumDivider.java:81:        for (int i = 0; i < childSize; i++) {
/components\dividers\ForumDivider.java:82:            final View child = parent.getChildAt(i);
/components\dividers\ForumDivider.java:83:            RecyclerView.LayoutParams layoutParams = (RecyclerView.LayoutParams) child.getLayoutParams();
/components\dividers\ForumDivider.java:84:            final int top = child.getBottom() + layoutParams.bottomMargin;
/components\dividers\ForumDivider.java:85:            if (mDivider != null) {
/components\dividers\ForumDivider.java:86:                if (needDivider(parent, child)) {
/components\dividers\ForumDivider.java:87:                    final int bottom = top + mDividerHeight;
/components\dividers\ForumDivider.java:88:                    mDivider.setBounds(left, top, right, bottom);
/components\dividers\ForumDivider.java:89:                    mDivider.draw(canvas);
/components\dividers\ForumDivider.java:90:                }
/components\dividers\ForumDivider.java:91:            }
/components\dividers\ForumDivider.java:92:        }
/components\dividers\ForumDivider.java:93:    }
/components\dividers\ForumDivider.java:95:    private void drawHorizontal(Canvas canvas, RecyclerView parent, RecyclerView.State state) {
/components\dividers\ForumDivider.java:96:        final int top = parent.getPaddingTop();
/components\dividers\ForumDivider.java:97:        final int bottom = parent.getMeasuredHeight() - parent.getPaddingBottom();
/components\dividers\ForumDivider.java:98:        final int childSize = parent.getChildCount();
/components\dividers\ForumDivider.java:99:        for (int i = 0; i < childSize; i++) {
/components\dividers\ForumDivider.java:100:            final View child = parent.getChildAt(i);
/components\dividers\ForumDivider.java:101:            RecyclerView.LayoutParams layoutParams = (RecyclerView.LayoutParams) child.getLayoutParams();
/components\dividers\ForumDivider.java:102:            final int left = child.getRight() + layoutParams.rightMargin;
/components\dividers\ForumDivider.java:103:            if (mDivider != null) {
/components\dividers\ForumDivider.java:104:                if (needDivider(parent, child)) {
/components\dividers\ForumDivider.java:105:                    final int right = left + mDividerHeight;
/components\dividers\ForumDivider.java:106:                    mDivider.setBounds(left, top, right, bottom);
/components\dividers\ForumDivider.java:107:                    mDivider.draw(canvas);
/components\dividers\ForumDivider.java:108:                }
/components\dividers\ForumDivider.java:109:            }
/components\dividers\ForumDivider.java:110:        }
/components\dividers\ForumDivider.java:111:    }
/components\dividers\ForumDivider.java:113:    @Override
/components\dividers\ForumDivider.java:114:    public void tint() {
/components\dividers\ForumDivider.java:115:        mDivider = ThemeUtils.tintDrawable(mDivider, ThemeUtils.getColorByAttr(mContext, R.attr.colorDivider));
/components\dividers\ForumDivider.java:116:    }
/components\dividers\ForumDivider.java:117:}
/components\dividers\HorizontalSpacesDecoration.java:1:package com.huanchengfly.tieba.post.components.dividers;
/components\dividers\HorizontalSpacesDecoration.java:3:import android.graphics.Rect;
/components\dividers\HorizontalSpacesDecoration.java:4:import android.view.View;
/components\dividers\HorizontalSpacesDecoration.java:6:import androidx.annotation.NonNull;
/components\dividers\HorizontalSpacesDecoration.java:7:import androidx.recyclerview.widget.RecyclerView;
/components\dividers\HorizontalSpacesDecoration.java:9:public class HorizontalSpacesDecoration extends RecyclerView.ItemDecoration {
/components\dividers\HorizontalSpacesDecoration.java:10:    private int top;
/components\dividers\HorizontalSpacesDecoration.java:11:    private int bottom;
/components\dividers\HorizontalSpacesDecoration.java:12:    private int left;
/components\dividers\HorizontalSpacesDecoration.java:13:    private int right;
/components\dividers\HorizontalSpacesDecoration.java:15:    public HorizontalSpacesDecoration(int space) {
/components\dividers\HorizontalSpacesDecoration.java:16:        this(space, space, space, space);
/components\dividers\HorizontalSpacesDecoration.java:17:    }
/components\dividers\HorizontalSpacesDecoration.java:19:    public HorizontalSpacesDecoration(int top, int bottom, int left, int right) {
/components\dividers\HorizontalSpacesDecoration.java:20:        this.top = top;
/components\dividers\HorizontalSpacesDecoration.java:21:        this.bottom = bottom;
/components\dividers\HorizontalSpacesDecoration.java:22:        this.left = left;
/components\dividers\HorizontalSpacesDecoration.java:23:        this.right = right;
/components\dividers\HorizontalSpacesDecoration.java:24:    }
/components\dividers\HorizontalSpacesDecoration.java:26:    @Override
/components\dividers\HorizontalSpacesDecoration.java:27:    public void getItemOffsets(@NonNull Rect outRect, @NonNull View view,
/components\dividers\HorizontalSpacesDecoration.java:28:                               @NonNull RecyclerView parent, @NonNull RecyclerView.State state) {
/components\dividers\HorizontalSpacesDecoration.java:29:        int position = parent.getChildAdapterPosition(view);
/components\dividers\HorizontalSpacesDecoration.java:30:        RecyclerView.Adapter adapter = parent.getAdapter();
/components\dividers\HorizontalSpacesDecoration.java:31:        if (adapter == null) {
/components\dividers\HorizontalSpacesDecoration.java:32:            return;
/components\dividers\HorizontalSpacesDecoration.java:33:        }
/components\dividers\HorizontalSpacesDecoration.java:34:        if (position == 0) {
/components\dividers\HorizontalSpacesDecoration.java:35:            outRect.left = left;
/components\dividers\HorizontalSpacesDecoration.java:36:            outRect.right = right / 2;
/components\dividers\HorizontalSpacesDecoration.java:37:        } else if (position == adapter.getItemCount() - 1) {
/components\dividers\HorizontalSpacesDecoration.java:38:            outRect.left = left / 2;
/components\dividers\HorizontalSpacesDecoration.java:39:            outRect.right = right;
/components\dividers\HorizontalSpacesDecoration.java:40:        } else {
/components\dividers\HorizontalSpacesDecoration.java:41:            outRect.left = left / 2;
/components\dividers\HorizontalSpacesDecoration.java:42:            outRect.right = right / 2;
/components\dividers\HorizontalSpacesDecoration.java:43:        }
/components\dividers\HorizontalSpacesDecoration.java:44:        outRect.bottom = bottom;
/components\dividers\HorizontalSpacesDecoration.java:45:        outRect.top = top;
/components\dividers\HorizontalSpacesDecoration.java:46:    }
/components\dividers\HorizontalSpacesDecoration.java:47:}
/components\dividers\RecycleViewDivider.java:1:package com.huanchengfly.tieba.post.components.dividers;
/components\dividers\RecycleViewDivider.java:3:import android.content.Context;
/components\dividers\RecycleViewDivider.java:4:import android.content.res.TypedArray;
/components\dividers\RecycleViewDivider.java:5:import android.graphics.Canvas;
/components\dividers\RecycleViewDivider.java:6:import android.graphics.Rect;
/components\dividers\RecycleViewDivider.java:7:import android.graphics.drawable.Drawable;
/components\dividers\RecycleViewDivider.java:8:import android.view.View;
/components\dividers\RecycleViewDivider.java:10:import androidx.annotation.DrawableRes;
/components\dividers\RecycleViewDivider.java:11:import androidx.annotation.NonNull;
/components\dividers\RecycleViewDivider.java:12:import androidx.annotation.Px;
/components\dividers\RecycleViewDivider.java:13:import androidx.core.content.ContextCompat;
/components\dividers\RecycleViewDivider.java:14:import androidx.recyclerview.widget.LinearLayoutManager;
/components\dividers\RecycleViewDivider.java:15:import androidx.recyclerview.widget.RecyclerView;
/components\dividers\RecycleViewDivider.java:17:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/components\dividers\RecycleViewDivider.java:18:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/components\dividers\RecycleViewDivider.java:19:import com.huanchengfly.tieba.post.R;
/components\dividers\RecycleViewDivider.java:21:public class RecycleViewDivider extends RecyclerView.ItemDecoration implements Tintable {
/components\dividers\RecycleViewDivider.java:23:    public static final String TAG = "RecycleViewDivider";
/components\dividers\RecycleViewDivider.java:24:    private static final int[] ATTRS = new int[]{android.R.attr.listDivider};
/components\dividers\RecycleViewDivider.java:25:    private Context mContext;
/components\dividers\RecycleViewDivider.java:26:    private Drawable mDivider;
/components\dividers\RecycleViewDivider.java:27:    private int mDividerHeight = 2;//分割线高度，默认为1px
/components\dividers\RecycleViewDivider.java:28:    private int mOrientation;//列表的方向：LinearLayoutManager.VERTICAL或LinearLayoutManager.HORIZONTAL
/components\dividers\RecycleViewDivider.java:29:    private int leftInner = 0;
/components\dividers\RecycleViewDivider.java:30:    private int rightInner = 0;
/components\dividers\RecycleViewDivider.java:32:    /**
/components\dividers\RecycleViewDivider.java:33:     * 默认分割线：高度为2px，颜色为灰色
/components\dividers\RecycleViewDivider.java:34:     *
/components\dividers\RecycleViewDivider.java:35:     * @param context
/components\dividers\RecycleViewDivider.java:36:     * @param orientation 列表方向
/components\dividers\RecycleViewDivider.java:37:     */
/components\dividers\RecycleViewDivider.java:38:    public RecycleViewDivider(Context context, int orientation) {
/components\dividers\RecycleViewDivider.java:39:        if (orientation != LinearLayoutManager.VERTICAL && orientation != LinearLayoutManager.HORIZONTAL) {
/components\dividers\RecycleViewDivider.java:40:            throw new IllegalArgumentException("请输入正确的参数！");
/components\dividers\RecycleViewDivider.java:41:        }
/components\dividers\RecycleViewDivider.java:42:        mContext = context;
/components\dividers\RecycleViewDivider.java:43:        mOrientation = orientation;
/components\dividers\RecycleViewDivider.java:44:        final TypedArray a = context.obtainStyledAttributes(ATTRS);
/components\dividers\RecycleViewDivider.java:45:        mDivider = a.getDrawable(0);
/components\dividers\RecycleViewDivider.java:46:        a.recycle();
/components\dividers\RecycleViewDivider.java:47:        tint();
/components\dividers\RecycleViewDivider.java:48:    }
/components\dividers\RecycleViewDivider.java:50:    /**
/components\dividers\RecycleViewDivider.java:51:     * 自定义分割线
/components\dividers\RecycleViewDivider.java:52:     *
/components\dividers\RecycleViewDivider.java:53:     * @param context
/components\dividers\RecycleViewDivider.java:54:     * @param orientation 列表方向
/components\dividers\RecycleViewDivider.java:55:     * @param drawableId  分割线图片
/components\dividers\RecycleViewDivider.java:56:     */
/components\dividers\RecycleViewDivider.java:57:    public RecycleViewDivider(Context context, int orientation, int drawableId) {
/components\dividers\RecycleViewDivider.java:58:        this(context, orientation, drawableId, 0);
/components\dividers\RecycleViewDivider.java:59:    }
/components\dividers\RecycleViewDivider.java:61:    public RecycleViewDivider(Context context, int orientation, @DrawableRes int drawableId, @Px int leftInner) {
/components\dividers\RecycleViewDivider.java:62:        this(context, orientation, drawableId, leftInner, 0);
/components\dividers\RecycleViewDivider.java:63:    }
/components\dividers\RecycleViewDivider.java:65:    public RecycleViewDivider(Context context, int orientation, @DrawableRes int drawableId, @Px int leftInner, @Px int rightInner) {
/components\dividers\RecycleViewDivider.java:66:        this(context, orientation);
/components\dividers\RecycleViewDivider.java:67:        mContext = context;
/components\dividers\RecycleViewDivider.java:68:        mDivider = ContextCompat.getDrawable(context, drawableId);
/components\dividers\RecycleViewDivider.java:69:        mDividerHeight = mDivider.getIntrinsicHeight();
/components\dividers\RecycleViewDivider.java:70:        this.leftInner = leftInner;
/components\dividers\RecycleViewDivider.java:71:        this.rightInner = rightInner;
/components\dividers\RecycleViewDivider.java:72:        tint();
/components\dividers\RecycleViewDivider.java:73:    }
/components\dividers\RecycleViewDivider.java:75:    //获取分割线尺寸
/components\dividers\RecycleViewDivider.java:76:    @Override
/components\dividers\RecycleViewDivider.java:77:    public void getItemOffsets(@NonNull Rect outRect, @NonNull View view, @NonNull RecyclerView parent, @NonNull RecyclerView.State state) {
/components\dividers\RecycleViewDivider.java:78:        super.getItemOffsets(outRect, view, parent, state);
/components\dividers\RecycleViewDivider.java:79:        if (parent.getAdapter() != null && parent.getChildLayoutPosition(view) + 1 == parent.getAdapter().getItemCount()) {
/components\dividers\RecycleViewDivider.java:80:            outRect.set(0, 0, 0, 0);
/components\dividers\RecycleViewDivider.java:81:        } else if (mOrientation == LinearLayoutManager.VERTICAL) {
/components\dividers\RecycleViewDivider.java:82:            outRect.set(0, 0, 0, mDividerHeight);
/components\dividers\RecycleViewDivider.java:83:        } else {
/components\dividers\RecycleViewDivider.java:84:            outRect.set(0, 0, mDividerHeight, 0);
/components\dividers\RecycleViewDivider.java:85:        }
/components\dividers\RecycleViewDivider.java:86:    }
/components\dividers\RecycleViewDivider.java:88:    //绘制分割线
/components\dividers\RecycleViewDivider.java:89:    @Override
/components\dividers\RecycleViewDivider.java:90:    public void onDraw(@NonNull Canvas c, @NonNull RecyclerView parent, @NonNull RecyclerView.State state) {
/components\dividers\RecycleViewDivider.java:91:        super.onDraw(c, parent, state);
/components\dividers\RecycleViewDivider.java:92:        if (mOrientation == LinearLayoutManager.VERTICAL) {
/components\dividers\RecycleViewDivider.java:93:            drawVertical(c, parent);
/components\dividers\RecycleViewDivider.java:94:        } else {
/components\dividers\RecycleViewDivider.java:95:            drawHorizontal(c, parent);
/components\dividers\RecycleViewDivider.java:96:        }
/components\dividers\RecycleViewDivider.java:97:    }
/components\dividers\RecycleViewDivider.java:99:    /**
/components\dividers\RecycleViewDivider.java:100:     * 绘制纵向列表时的分隔线  这时分隔线是横着的
/components\dividers\RecycleViewDivider.java:101:     * 每次 left 相同，top 根据 child 变化，right 相同，bottom 也变化
/components\dividers\RecycleViewDivider.java:102:     *
/components\dividers\RecycleViewDivider.java:103:     * @param canvas Canvas
/components\dividers\RecycleViewDivider.java:104:     * @param parent Parent
/components\dividers\RecycleViewDivider.java:105:     */
/components\dividers\RecycleViewDivider.java:106:    private void drawVertical(Canvas canvas, RecyclerView parent) {
/components\dividers\RecycleViewDivider.java:107:        final int childSize = parent.getChildCount();
/components\dividers\RecycleViewDivider.java:108:        for (int i = 0; i < childSize; i++) {
/components\dividers\RecycleViewDivider.java:109:            final View child = parent.getChildAt(i);
/components\dividers\RecycleViewDivider.java:110:            RecyclerView.LayoutParams layoutParams = (RecyclerView.LayoutParams) child.getLayoutParams();
/components\dividers\RecycleViewDivider.java:111:            final int top = child.getBottom() + layoutParams.bottomMargin;
/components\dividers\RecycleViewDivider.java:112:            final int bottom = top + mDividerHeight;
/components\dividers\RecycleViewDivider.java:113:            int left = parent.getPaddingLeft();
/components\dividers\RecycleViewDivider.java:114:            int right = parent.getMeasuredWidth() - parent.getPaddingRight();
/components\dividers\RecycleViewDivider.java:115:            if (mDivider != null) {
/components\dividers\RecycleViewDivider.java:116:                if (needInner(child, parent)) {
/components\dividers\RecycleViewDivider.java:117:                    left += leftInner;
/components\dividers\RecycleViewDivider.java:118:                    right -= rightInner;
/components\dividers\RecycleViewDivider.java:119:                }
/components\dividers\RecycleViewDivider.java:120:                mDivider.setBounds(left, top, right, bottom);
/components\dividers\RecycleViewDivider.java:121:                mDivider.draw(canvas);
/components\dividers\RecycleViewDivider.java:122:            }
/components\dividers\RecycleViewDivider.java:123:        }
/components\dividers\RecycleViewDivider.java:124:    }
/components\dividers\RecycleViewDivider.java:126:    /**
/components\dividers\RecycleViewDivider.java:127:     * 绘制横向列表时的分隔线  这时分隔线是竖着的
/components\dividers\RecycleViewDivider.java:128:     * l、r 变化； t、b 不变
/components\dividers\RecycleViewDivider.java:129:     *
/components\dividers\RecycleViewDivider.java:130:     * @param canvas
/components\dividers\RecycleViewDivider.java:131:     * @param parent
/components\dividers\RecycleViewDivider.java:132:     */
/components\dividers\RecycleViewDivider.java:133:    private void drawHorizontal(Canvas canvas, RecyclerView parent) {
/components\dividers\RecycleViewDivider.java:134:        final int childSize = parent.getChildCount();
/components\dividers\RecycleViewDivider.java:135:        for (int i = 0; i < childSize; i++) {
/components\dividers\RecycleViewDivider.java:136:            final View child = parent.getChildAt(i);
/components\dividers\RecycleViewDivider.java:137:            RecyclerView.LayoutParams layoutParams = (RecyclerView.LayoutParams) child.getLayoutParams();
/components\dividers\RecycleViewDivider.java:138:            final int left = child.getRight() + layoutParams.rightMargin;
/components\dividers\RecycleViewDivider.java:139:            final int right = left + mDividerHeight;
/components\dividers\RecycleViewDivider.java:140:            int top = parent.getPaddingTop();
/components\dividers\RecycleViewDivider.java:141:            int bottom = parent.getMeasuredHeight() - parent.getPaddingBottom();
/components\dividers\RecycleViewDivider.java:142:            if (mDivider != null) {
/components\dividers\RecycleViewDivider.java:143:                if (needInner(child, parent)) {
/components\dividers\RecycleViewDivider.java:144:                    top += leftInner;
/components\dividers\RecycleViewDivider.java:145:                    bottom -= rightInner;
/components\dividers\RecycleViewDivider.java:146:                }
/components\dividers\RecycleViewDivider.java:147:                mDivider.setBounds(left, top, right, bottom);
/components\dividers\RecycleViewDivider.java:148:                mDivider.draw(canvas);
/components\dividers\RecycleViewDivider.java:149:            }
/components\dividers\RecycleViewDivider.java:150:        }
/components\dividers\RecycleViewDivider.java:151:    }
/components\dividers\RecycleViewDivider.java:153:    protected boolean needInner(View child, RecyclerView parent) {
/components\dividers\RecycleViewDivider.java:154:        return true;
/components\dividers\RecycleViewDivider.java:155:    }
/components\dividers\RecycleViewDivider.java:157:    @Override
/components\dividers\RecycleViewDivider.java:158:    public void tint() {
/components\dividers\RecycleViewDivider.java:159:        mDivider = ThemeUtils.tintDrawable(mDivider, ThemeUtils.getColorByAttr(mContext, R.attr.colorDivider));
/components\dividers\RecycleViewDivider.java:160:    }
/components\dividers\RecycleViewDivider.java:161:}/components\dividers\SearchDivider.java:1:package com.huanchengfly.tieba.post.components.dividers;
/components\dividers\SearchDivider.java:3:import android.content.Context;
/components\dividers\SearchDivider.java:4:import android.graphics.Canvas;
/components\dividers\SearchDivider.java:5:import android.graphics.Rect;
/components\dividers\SearchDivider.java:6:import android.graphics.drawable.Drawable;
/components\dividers\SearchDivider.java:7:import android.view.View;
/components\dividers\SearchDivider.java:9:import androidx.annotation.NonNull;
/components\dividers\SearchDivider.java:10:import androidx.core.content.ContextCompat;
/components\dividers\SearchDivider.java:11:import androidx.recyclerview.widget.LinearLayoutManager;
/components\dividers\SearchDivider.java:12:import androidx.recyclerview.widget.RecyclerView;
/components\dividers\SearchDivider.java:14:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/components\dividers\SearchDivider.java:15:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/components\dividers\SearchDivider.java:16:import com.huanchengfly.tieba.post.R;
/components\dividers\SearchDivider.java:17:import com.huanchengfly.tieba.post.adapters.SearchForumAdapter;
/components\dividers\SearchDivider.java:18:import com.huanchengfly.tieba.post.utils.DisplayUtil;
/components\dividers\SearchDivider.java:20:public class SearchDivider extends RecyclerView.ItemDecoration implements Tintable {
/components\dividers\SearchDivider.java:21:    public static final String TAG = SearchDivider.class.getSimpleName();
/components\dividers\SearchDivider.java:23:    private Drawable mDivider;
/components\dividers\SearchDivider.java:24:    private int mOrientation;
/components\dividers\SearchDivider.java:25:    private int mDividerHeight;
/components\dividers\SearchDivider.java:26:    private int mCommonDividerHeight;
/components\dividers\SearchDivider.java:27:    private Context mContext;
/components\dividers\SearchDivider.java:29:    public SearchDivider(Context context) {
/components\dividers\SearchDivider.java:30:        mContext = context;
/components\dividers\SearchDivider.java:31:        mOrientation = LinearLayoutManager.VERTICAL;
/components\dividers\SearchDivider.java:32:        mDivider = ContextCompat.getDrawable(context, R.drawable.drawable_divider);
/components\dividers\SearchDivider.java:33:        mDividerHeight = DisplayUtil.dp2px(context, 8);
/components\dividers\SearchDivider.java:34:        mCommonDividerHeight = DisplayUtil.dp2px(context, 1);
/components\dividers\SearchDivider.java:35:        tint();
/components\dividers\SearchDivider.java:36:    }
/components\dividers\SearchDivider.java:38:    private boolean isHeader(RecyclerView parent, View view) {
/components\dividers\SearchDivider.java:39:        return parent.getChildViewHolder(view).getItemViewType() == SearchForumAdapter.TYPE_EXACT;
/components\dividers\SearchDivider.java:40:    }
/components\dividers\SearchDivider.java:42:    @Override
/components\dividers\SearchDivider.java:43:    public void getItemOffsets(@NonNull Rect outRect, @NonNull View view, @NonNull RecyclerView parent, @NonNull RecyclerView.State state) {
/components\dividers\SearchDivider.java:44:        super.getItemOffsets(outRect, view, parent, state);
/components\dividers\SearchDivider.java:45:        if (parent.getAdapter() != null && parent.getChildLayoutPosition(view) + 1 == parent.getAdapter().getItemCount()) {
/components\dividers\SearchDivider.java:46:            outRect.set(0, 0, 0, 0);
/components\dividers\SearchDivider.java:47:        } else if (mOrientation == LinearLayoutManager.VERTICAL) {
/components\dividers\SearchDivider.java:48:            outRect.set(0, 0, 0, isHeader(parent, view) ? mDividerHeight : mCommonDividerHeight);
/components\dividers\SearchDivider.java:49:        } else {
/components\dividers\SearchDivider.java:50:            outRect.set(0, 0, isHeader(parent, view) ? mDividerHeight : mCommonDividerHeight, 0);
/components\dividers\SearchDivider.java:51:        }
/components\dividers\SearchDivider.java:52:    }
/components\dividers\SearchDivider.java:54:    @Override
/components\dividers\SearchDivider.java:55:    public void onDraw(@NonNull Canvas c, @NonNull RecyclerView parent, @NonNull RecyclerView.State state) {
/components\dividers\SearchDivider.java:56:        super.onDraw(c, parent, state);
/components\dividers\SearchDivider.java:57:        if (mOrientation == LinearLayoutManager.VERTICAL) {
/components\dividers\SearchDivider.java:58:            drawVertical(c, parent, state);
/components\dividers\SearchDivider.java:59:        } else {
/components\dividers\SearchDivider.java:60:            drawHorizontal(c, parent, state);
/components\dividers\SearchDivider.java:61:        }
/components\dividers\SearchDivider.java:62:    }
/components\dividers\SearchDivider.java:64:    private void drawVertical(Canvas canvas, RecyclerView parent, RecyclerView.State state) {
/components\dividers\SearchDivider.java:65:        final int left = parent.getPaddingLeft();
/components\dividers\SearchDivider.java:66:        final int right = parent.getMeasuredWidth() - parent.getPaddingRight();
/components\dividers\SearchDivider.java:67:        final int childSize = parent.getChildCount();
/components\dividers\SearchDivider.java:68:        for (int i = 0; i < childSize; i++) {
/components\dividers\SearchDivider.java:69:            final View child = parent.getChildAt(i);
/components\dividers\SearchDivider.java:70:            RecyclerView.LayoutParams layoutParams = (RecyclerView.LayoutParams) child.getLayoutParams();
/components\dividers\SearchDivider.java:71:            final int top = child.getBottom() + layoutParams.bottomMargin;
/components\dividers\SearchDivider.java:72:            if (mDivider != null) {
/components\dividers\SearchDivider.java:73:                final int bottom = top + (isHeader(parent, child) ? mDividerHeight : mCommonDividerHeight);
/components\dividers\SearchDivider.java:74:                mDivider.setBounds(left, top, right, bottom);
/components\dividers\SearchDivider.java:75:                mDivider.draw(canvas);
/components\dividers\SearchDivider.java:76:            }
/components\dividers\SearchDivider.java:77:        }
/components\dividers\SearchDivider.java:78:    }
/components\dividers\SearchDivider.java:80:    private void drawHorizontal(Canvas canvas, RecyclerView parent, RecyclerView.State state) {
/components\dividers\SearchDivider.java:81:        final int top = parent.getPaddingTop();
/components\dividers\SearchDivider.java:82:        final int bottom = parent.getMeasuredHeight() - parent.getPaddingBottom();
/components\dividers\SearchDivider.java:83:        final int childSize = parent.getChildCount();
/components\dividers\SearchDivider.java:84:        for (int i = 0; i < childSize; i++) {
/components\dividers\SearchDivider.java:85:            final View child = parent.getChildAt(i);
/components\dividers\SearchDivider.java:86:            RecyclerView.LayoutParams layoutParams = (RecyclerView.LayoutParams) child.getLayoutParams();
/components\dividers\SearchDivider.java:87:            final int left = child.getRight() + layoutParams.rightMargin;
/components\dividers\SearchDivider.java:88:            if (mDivider != null) {
/components\dividers\SearchDivider.java:89:                final int right = left + (isHeader(parent, child) ? mDividerHeight : mCommonDividerHeight);
/components\dividers\SearchDivider.java:90:                mDivider.setBounds(left, top, right, bottom);
/components\dividers\SearchDivider.java:91:                mDivider.draw(canvas);
/components\dividers\SearchDivider.java:92:            }
/components\dividers\SearchDivider.java:93:        }
/components\dividers\SearchDivider.java:94:    }
/components\dividers\SearchDivider.java:96:    @Override
/components\dividers\SearchDivider.java:97:    public void tint() {
/components\dividers\SearchDivider.java:98:        mDivider = ThemeUtils.tintDrawable(mDivider, ThemeUtils.getColorByAttr(mContext, R.attr.colorDivider));
/components\dividers\SearchDivider.java:99:    }
/components\dividers\SearchDivider.java:100:}
/components\dividers\SpacesItemDecoration.java:1:package com.huanchengfly.tieba.post.components.dividers;
/components\dividers\SpacesItemDecoration.java:3:import android.graphics.Rect;
/components\dividers\SpacesItemDecoration.java:4:import android.view.View;
/components\dividers\SpacesItemDecoration.java:6:import androidx.annotation.NonNull;
/components\dividers\SpacesItemDecoration.java:7:import androidx.recyclerview.widget.RecyclerView;
/components\dividers\SpacesItemDecoration.java:9:public class SpacesItemDecoration extends RecyclerView.ItemDecoration {
/components\dividers\SpacesItemDecoration.java:10:    private int space;
/components\dividers\SpacesItemDecoration.java:12:    public SpacesItemDecoration(int space) {
/components\dividers\SpacesItemDecoration.java:13:        this.space = space;
/components\dividers\SpacesItemDecoration.java:14:    }
/components\dividers\SpacesItemDecoration.java:16:    @Override
/components\dividers\SpacesItemDecoration.java:17:    public void getItemOffsets(@NonNull Rect outRect, @NonNull View view,
/components\dividers\SpacesItemDecoration.java:18:                               @NonNull RecyclerView parent, @NonNull RecyclerView.State state) {
/components\dividers\SpacesItemDecoration.java:19:        outRect.left = space;
/components\dividers\SpacesItemDecoration.java:20:        outRect.right = space;
/components\dividers\SpacesItemDecoration.java:21:        outRect.bottom = space;
/components\dividers\SpacesItemDecoration.java:22:        outRect.top = space;
/components\dividers\SpacesItemDecoration.java:23:    }
/components\dividers\SpacesItemDecoration.java:24:}
/components\dividers\StaggeredDividerItemDecoration.java:1:package com.huanchengfly.tieba.post.components.dividers;
/components\dividers\StaggeredDividerItemDecoration.java:3:import android.content.Context;
/components\dividers\StaggeredDividerItemDecoration.java:4:import android.graphics.Rect;
/components\dividers\StaggeredDividerItemDecoration.java:5:import android.view.View;
/components\dividers\StaggeredDividerItemDecoration.java:7:import androidx.annotation.NonNull;
/components\dividers\StaggeredDividerItemDecoration.java:8:import androidx.recyclerview.widget.RecyclerView;
/components\dividers\StaggeredDividerItemDecoration.java:9:import androidx.recyclerview.widget.StaggeredGridLayoutManager;
/components\dividers\StaggeredDividerItemDecoration.java:11:import com.huanchengfly.tieba.post.utils.DisplayUtil;
/components\dividers\StaggeredDividerItemDecoration.java:13:public class StaggeredDividerItemDecoration extends RecyclerView.ItemDecoration {
/components\dividers\StaggeredDividerItemDecoration.java:14:    private Context context;
/components\dividers\StaggeredDividerItemDecoration.java:15:    private int interval;
/components\dividers\StaggeredDividerItemDecoration.java:17:    public StaggeredDividerItemDecoration(Context context, int interval) {
/components\dividers\StaggeredDividerItemDecoration.java:18:        this.context = context;
/components\dividers\StaggeredDividerItemDecoration.java:19:        this.interval = interval;
/components\dividers\StaggeredDividerItemDecoration.java:20:    }
/components\dividers\StaggeredDividerItemDecoration.java:22:    @Override
/components\dividers\StaggeredDividerItemDecoration.java:23:    public void getItemOffsets(@NonNull Rect outRect, @NonNull View view, @NonNull RecyclerView parent, @NonNull RecyclerView.State state) {
/components\dividers\StaggeredDividerItemDecoration.java:24:        int position = parent.getChildAdapterPosition(view);
/components\dividers\StaggeredDividerItemDecoration.java:25:        int interval = DisplayUtil.dp2px(context, this.interval);
/components\dividers\StaggeredDividerItemDecoration.java:26:        StaggeredGridLayoutManager.LayoutParams params =
/components\dividers\StaggeredDividerItemDecoration.java:27:                (StaggeredGridLayoutManager.LayoutParams) view.getLayoutParams();
/components\dividers\StaggeredDividerItemDecoration.java:28:        /*
/components\dividers\StaggeredDividerItemDecoration.java:29:            第一行设置上边距
/components\dividers\StaggeredDividerItemDecoration.java:30:         */
/components\dividers\StaggeredDividerItemDecoration.java:31:        if (position <= 1) {
/components\dividers\StaggeredDividerItemDecoration.java:32:            outRect.top = interval;
/components\dividers\StaggeredDividerItemDecoration.java:33:        } else {
/components\dividers\StaggeredDividerItemDecoration.java:34:            outRect.top = 0;
/components\dividers\StaggeredDividerItemDecoration.java:35:        }
/components\dividers\StaggeredDividerItemDecoration.java:36:        /*
/components\dividers\StaggeredDividerItemDecoration.java:37:          根据params.getSpanIndex()来判断左右边确定分割线
/components\dividers\StaggeredDividerItemDecoration.java:38:          第一列设置左边距为interval，右边距为interval/2  （第二列反之）
/components\dividers\StaggeredDividerItemDecoration.java:39:         */
/components\dividers\StaggeredDividerItemDecoration.java:40:        if (params.getSpanIndex() % 2 == 0) {
/components\dividers\StaggeredDividerItemDecoration.java:41:            outRect.left = interval;
/components\dividers\StaggeredDividerItemDecoration.java:42:            outRect.right = interval / 2;
/components\dividers\StaggeredDividerItemDecoration.java:43:        } else {
/components\dividers\StaggeredDividerItemDecoration.java:44:            outRect.left = interval / 2;
/components\dividers\StaggeredDividerItemDecoration.java:45:            outRect.right = interval;
/components\dividers\StaggeredDividerItemDecoration.java:46:        }
/components\dividers\StaggeredDividerItemDecoration.java:47:        outRect.bottom = interval;
/components\dividers\StaggeredDividerItemDecoration.java:48:    }
/components\dividers\StaggeredDividerItemDecoration.java:49:}/components\dividers\ThreadDivider.java:1:package com.huanchengfly.tieba.post.components.dividers;
/components\dividers\ThreadDivider.java:3:import android.content.Context;
/components\dividers\ThreadDivider.java:4:import android.graphics.Canvas;
/components\dividers\ThreadDivider.java:5:import android.graphics.Rect;
/components\dividers\ThreadDivider.java:6:import android.graphics.drawable.Drawable;
/components\dividers\ThreadDivider.java:7:import android.view.View;
/components\dividers\ThreadDivider.java:9:import androidx.annotation.NonNull;
/components\dividers\ThreadDivider.java:10:import androidx.recyclerview.widget.LinearLayoutManager;
/components\dividers\ThreadDivider.java:11:import androidx.recyclerview.widget.RecyclerView;
/components\dividers\ThreadDivider.java:13:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/components\dividers\ThreadDivider.java:14:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/components\dividers\ThreadDivider.java:15:import com.huanchengfly.tieba.post.R;
/components\dividers\ThreadDivider.java:16:import com.huanchengfly.tieba.post.adapters.RecyclerFloorAdapter;
/components\dividers\ThreadDivider.java:17:import com.huanchengfly.tieba.post.adapters.RecyclerThreadAdapter;
/components\dividers\ThreadDivider.java:18:import com.huanchengfly.tieba.post.utils.DisplayUtil;
/components\dividers\ThreadDivider.java:20:public class ThreadDivider extends RecyclerView.ItemDecoration implements Tintable {
/components\dividers\ThreadDivider.java:21:    public static final String TAG = "ThreadDivider";
/components\dividers\ThreadDivider.java:23:    private Context mContext;
/components\dividers\ThreadDivider.java:25:    private Drawable mDivider;
/components\dividers\ThreadDivider.java:26:    private int mOrientation;
/components\dividers\ThreadDivider.java:27:    private int mHeaderDividerHeight;
/components\dividers\ThreadDivider.java:28:    private int mCommonDividerHeight;
/components\dividers\ThreadDivider.java:30:    public ThreadDivider(Context context) {
/components\dividers\ThreadDivider.java:31:        mContext = context;
/components\dividers\ThreadDivider.java:32:        mOrientation = LinearLayoutManager.VERTICAL;
/components\dividers\ThreadDivider.java:33:        mDivider = context.getDrawable(R.drawable.drawable_divider);
/components\dividers\ThreadDivider.java:34:        mHeaderDividerHeight = DisplayUtil.dp2px(context, 8);
/components\dividers\ThreadDivider.java:35:        mCommonDividerHeight = DisplayUtil.dp2px(context, 1);
/components\dividers\ThreadDivider.java:36:        tint();
/components\dividers\ThreadDivider.java:37:    }
/components\dividers\ThreadDivider.java:39:    private boolean isHeader(RecyclerView.Adapter adapter, int position, int type) {
/components\dividers\ThreadDivider.java:40:        if (adapter instanceof RecyclerFloorAdapter) {
/components\dividers\ThreadDivider.java:41:            return position == 0;
/components\dividers\ThreadDivider.java:42:        }
/components\dividers\ThreadDivider.java:43:        return (type == 200000 || type == RecyclerThreadAdapter.TYPE_THREAD);
/components\dividers\ThreadDivider.java:44:    }
/components\dividers\ThreadDivider.java:46:    @Override
/components\dividers\ThreadDivider.java:47:    public void getItemOffsets(@NonNull Rect outRect, @NonNull View view, @NonNull RecyclerView parent, @NonNull RecyclerView.State state) {
/components\dividers\ThreadDivider.java:48:        super.getItemOffsets(outRect, view, parent, state);
/components\dividers\ThreadDivider.java:49:        if (parent.getAdapter() != null && parent.getChildLayoutPosition(view) + 1 == parent.getAdapter().getItemCount()) {
/components\dividers\ThreadDivider.java:50:            outRect.set(0, 0, 0, 0);
/components\dividers\ThreadDivider.java:51:        } else if (mOrientation == LinearLayoutManager.VERTICAL) {
/components\dividers\ThreadDivider.java:52:            int adapterPosition = parent.getChildAdapterPosition(view);
/components\dividers\ThreadDivider.java:53:            outRect.set(0, 0, 0, isHeader(parent.getAdapter(), adapterPosition, parent.getChildViewHolder(view).getItemViewType()) ? mHeaderDividerHeight : mCommonDividerHeight);
/components\dividers\ThreadDivider.java:54:        }
/components\dividers\ThreadDivider.java:55:    }
/components\dividers\ThreadDivider.java:57:    @Override
/components\dividers\ThreadDivider.java:58:    public void onDraw(@NonNull Canvas c, @NonNull RecyclerView parent, @NonNull RecyclerView.State state) {
/components\dividers\ThreadDivider.java:59:        super.onDraw(c, parent, state);
/components\dividers\ThreadDivider.java:60:        if (mOrientation == LinearLayoutManager.VERTICAL) {
/components\dividers\ThreadDivider.java:61:            drawVertical(c, parent);
/components\dividers\ThreadDivider.java:62:        }
/components\dividers\ThreadDivider.java:63:    }
/components\dividers\ThreadDivider.java:65:    private void drawVertical(Canvas canvas, RecyclerView parent) {
/components\dividers\ThreadDivider.java:66:        int left = parent.getPaddingLeft();
/components\dividers\ThreadDivider.java:67:        final int right = parent.getMeasuredWidth() - parent.getPaddingRight();
/components\dividers\ThreadDivider.java:68:        final int childSize = parent.getChildCount();
/components\dividers\ThreadDivider.java:69:        for (int i = 0; i < childSize; i++) {
/components\dividers\ThreadDivider.java:70:            final View child = parent.getChildAt(i);
/components\dividers\ThreadDivider.java:71:            int adapterPosition = parent.getChildAdapterPosition(child);
/components\dividers\ThreadDivider.java:72:            RecyclerView.Adapter adapter = parent.getAdapter();
/components\dividers\ThreadDivider.java:73:            if (adapter != null && adapterPosition > -1) {
/components\dividers\ThreadDivider.java:74:                int type = adapter.getItemViewType(adapterPosition);
/components\dividers\ThreadDivider.java:75:                RecyclerView.LayoutParams layoutParams = (RecyclerView.LayoutParams) child.getLayoutParams();
/components\dividers\ThreadDivider.java:76:                final int top = child.getBottom() + layoutParams.bottomMargin;
/components\dividers\ThreadDivider.java:77:                if (mDivider != null) {
/components\dividers\ThreadDivider.java:78:                    if (isHeader(adapter, adapterPosition, type)) {
/components\dividers\ThreadDivider.java:79:                        final int bottom = top + mHeaderDividerHeight;
/components\dividers\ThreadDivider.java:80:                        mDivider.setBounds(left, top, right, bottom);
/components\dividers\ThreadDivider.java:81:                        mDivider.draw(canvas);
/components\dividers\ThreadDivider.java:82:                    } else {
/components\dividers\ThreadDivider.java:83:                        int leftInner;
/components\dividers\ThreadDivider.java:84:                        int nextType = adapter.getItemViewType(adapterPosition + 1);
/components\dividers\ThreadDivider.java:85:                        if (adapter instanceof RecyclerThreadAdapter) {
/components\dividers\ThreadDivider.java:86:                            if (nextType == 100002) {
/components\dividers\ThreadDivider.java:87:                                leftInner = 0;
/components\dividers\ThreadDivider.java:88:                            } else {
/components\dividers\ThreadDivider.java:89:                                leftInner = DisplayUtil.dp2px(mContext, ((RecyclerThreadAdapter) adapter).isImmersive() ? 16 : 50);
/components\dividers\ThreadDivider.java:90:                            }
/components\dividers\ThreadDivider.java:91:                        } else {
/components\dividers\ThreadDivider.java:92:                            if (nextType == 100002) {
/components\dividers\ThreadDivider.java:93:                                leftInner = 0;
/components\dividers\ThreadDivider.java:94:                            } else {
/components\dividers\ThreadDivider.java:95:                                leftInner = DisplayUtil.dp2px(mContext, 50);
/components\dividers\ThreadDivider.java:96:                            }
/components\dividers\ThreadDivider.java:97:                        }
/components\dividers\ThreadDivider.java:98:                        final int bottom = top + mCommonDividerHeight;
/components\dividers\ThreadDivider.java:99:                        mDivider.setBounds(left + leftInner, top, right, bottom);
/components\dividers\ThreadDivider.java:100:                        mDivider.draw(canvas);
/components\dividers\ThreadDivider.java:101:                    }
/components\dividers\ThreadDivider.java:102:                }
/components\dividers\ThreadDivider.java:103:            }
/components\dividers\ThreadDivider.java:104:        }
/components\dividers\ThreadDivider.java:105:    }
/components\dividers\ThreadDivider.java:107:    @Override
/components\dividers\ThreadDivider.java:108:    public void tint() {
/components\dividers\ThreadDivider.java:109:        mDivider = ThemeUtils.tintDrawable(mDivider, ThemeUtils.getColorByAttr(mContext, R.attr.colorDivider));
/components\dividers\ThreadDivider.java:110:    }
/components\dividers\ThreadDivider.java:111:}/components\glide\OkHttpLibraryGlideModule.java:1:package com.huanchengfly.tieba.post.components.glide;
/components\glide\OkHttpLibraryGlideModule.java:3:import android.content.Context;
/components\glide\OkHttpLibraryGlideModule.java:5:import androidx.annotation.NonNull;
/components\glide\OkHttpLibraryGlideModule.java:7:import com.bumptech.glide.Glide;
/components\glide\OkHttpLibraryGlideModule.java:8:import com.bumptech.glide.Registry;
/components\glide\OkHttpLibraryGlideModule.java:9:import com.bumptech.glide.annotation.GlideModule;
/components\glide\OkHttpLibraryGlideModule.java:10:import com.bumptech.glide.integration.okhttp3.OkHttpUrlLoader;
/components\glide\OkHttpLibraryGlideModule.java:11:import com.bumptech.glide.load.model.GlideUrl;
/components\glide\OkHttpLibraryGlideModule.java:12:import com.bumptech.glide.module.AppGlideModule;
/components\glide\OkHttpLibraryGlideModule.java:14:import java.io.InputStream;
/components\glide\OkHttpLibraryGlideModule.java:16:import okhttp3.OkHttpClient;
/components\glide\OkHttpLibraryGlideModule.java:18:@GlideModule
/components\glide\OkHttpLibraryGlideModule.java:19:public class OkHttpLibraryGlideModule extends AppGlideModule {
/components\glide\OkHttpLibraryGlideModule.java:20:    @Override
/components\glide\OkHttpLibraryGlideModule.java:21:    public void registerComponents(@NonNull Context context, @NonNull Glide glide, @NonNull Registry registry) {
/components\glide\OkHttpLibraryGlideModule.java:22:        //添加拦截器到Glide
/components\glide\OkHttpLibraryGlideModule.java:23:        OkHttpClient.Builder builder = new OkHttpClient.Builder();
/components\glide\OkHttpLibraryGlideModule.java:24:        builder.addInterceptor(new ProgressInterceptor());
/components\glide\OkHttpLibraryGlideModule.java:25:        OkHttpClient okHttpClient = builder.build();
/components\glide\OkHttpLibraryGlideModule.java:27:        //原来的是  new OkHttpUrlLoader.Factory()；
/components\glide\OkHttpLibraryGlideModule.java:28:        registry.replace(GlideUrl.class, InputStream.class, new OkHttpUrlLoader.Factory(okHttpClient));
/components\glide\OkHttpLibraryGlideModule.java:29:    }
/components\glide\OkHttpLibraryGlideModule.java:31:    //完全禁用清单解析
/components\glide\OkHttpLibraryGlideModule.java:32:    @Override
/components\glide\OkHttpLibraryGlideModule.java:33:    public boolean isManifestParsingEnabled() {
/components\glide\OkHttpLibraryGlideModule.java:34:        return false;
/components\glide\OkHttpLibraryGlideModule.java:35:    }
/components\glide\OkHttpLibraryGlideModule.java:36:}
/components\glide\ProgressInterceptor.java:1:package com.huanchengfly.tieba.post.components.glide;
/components\glide\ProgressInterceptor.java:3:import androidx.annotation.NonNull;
/components\glide\ProgressInterceptor.java:5:import java.io.IOException;
/components\glide\ProgressInterceptor.java:6:import java.util.HashMap;
/components\glide\ProgressInterceptor.java:7:import java.util.Map;
/components\glide\ProgressInterceptor.java:9:import okhttp3.Interceptor;
/components\glide\ProgressInterceptor.java:10:import okhttp3.Request;
/components\glide\ProgressInterceptor.java:11:import okhttp3.Response;
/components\glide\ProgressInterceptor.java:12:import okhttp3.ResponseBody;
/components\glide\ProgressInterceptor.java:14:/**
/components\glide\ProgressInterceptor.java:15: * 描述:
/components\glide\ProgressInterceptor.java:16: * <p>
/components\glide\ProgressInterceptor.java:17: * 拦截器
/components\glide\ProgressInterceptor.java:18: * Created by allens on 2018/1/8.
/components\glide\ProgressInterceptor.java:19: */
/components\glide\ProgressInterceptor.java:21:public class ProgressInterceptor implements Interceptor {
/components\glide\ProgressInterceptor.java:23:    public static final Map<String, ProgressListener> LISTENER_MAP = new HashMap<>();
/components\glide\ProgressInterceptor.java:25:    //入注册下载监听
/components\glide\ProgressInterceptor.java:26:    public static void addListener(String url, ProgressListener listener) {
/components\glide\ProgressInterceptor.java:27:        LISTENER_MAP.put(url, listener);
/components\glide\ProgressInterceptor.java:28:    }
/components\glide\ProgressInterceptor.java:30:    //取消注册下载监听
/components\glide\ProgressInterceptor.java:31:    public static void removeListener(String url) {
/components\glide\ProgressInterceptor.java:32:        LISTENER_MAP.remove(url);
/components\glide\ProgressInterceptor.java:33:    }
/components\glide\ProgressInterceptor.java:36:    @Override
/components\glide\ProgressInterceptor.java:37:    public Response intercept(@NonNull Interceptor.Chain chain) throws IOException {
/components\glide\ProgressInterceptor.java:38:        Request request = chain.request();
/components\glide\ProgressInterceptor.java:39:        Response response = chain.proceed(request);
/components\glide\ProgressInterceptor.java:40:        String url = request.url().toString();
/components\glide\ProgressInterceptor.java:41:        ResponseBody body = response.body();
/components\glide\ProgressInterceptor.java:42:        Response newResponse = response.newBuilder().body(new ProgressResponseBody(url, body)).build();
/components\glide\ProgressInterceptor.java:43:        return newResponse;
/components\glide\ProgressInterceptor.java:44:    }
/components\glide\ProgressInterceptor.java:45:}/components\glide\ProgressListener.java:1:package com.huanchengfly.tieba.post.components.glide;
/components\glide\ProgressListener.java:3:public interface ProgressListener {
/components\glide\ProgressListener.java:4:    void onProgress(int progress);
/components\glide\ProgressListener.java:5:}/components\glide\ProgressResponseBody.java:1:package com.huanchengfly.tieba.post.components.glide;
/components\glide\ProgressResponseBody.java:3:import android.util.Log;
/components\glide\ProgressResponseBody.java:5:import androidx.annotation.NonNull;
/components\glide\ProgressResponseBody.java:6:import androidx.annotation.Nullable;
/components\glide\ProgressResponseBody.java:8:import java.io.IOException;
/components\glide\ProgressResponseBody.java:10:import okhttp3.MediaType;
/components\glide\ProgressResponseBody.java:11:import okhttp3.ResponseBody;
/components\glide\ProgressResponseBody.java:12:import okio.Buffer;
/components\glide\ProgressResponseBody.java:13:import okio.BufferedSource;
/components\glide\ProgressResponseBody.java:14:import okio.ForwardingSource;
/components\glide\ProgressResponseBody.java:15:import okio.Okio;
/components\glide\ProgressResponseBody.java:16:import okio.Source;
/components\glide\ProgressResponseBody.java:18:/**
/components\glide\ProgressResponseBody.java:19: * 描述:
/components\glide\ProgressResponseBody.java:20: * <p>
/components\glide\ProgressResponseBody.java:21: * Created by allens on 2018/1/8.
/components\glide\ProgressResponseBody.java:22: */
/components\glide\ProgressResponseBody.java:24:public class ProgressResponseBody extends ResponseBody {
/components\glide\ProgressResponseBody.java:25:    private static final String TAG = "XGlide";
/components\glide\ProgressResponseBody.java:27:    private BufferedSource bufferedSource;
/components\glide\ProgressResponseBody.java:29:    private ResponseBody responseBody;
/components\glide\ProgressResponseBody.java:31:    private ProgressListener listener;
/components\glide\ProgressResponseBody.java:33:    public ProgressResponseBody(String url, ResponseBody responseBody) {
/components\glide\ProgressResponseBody.java:34:        this.responseBody = responseBody;
/components\glide\ProgressResponseBody.java:35:        listener = ProgressInterceptor.LISTENER_MAP.get(url);
/components\glide\ProgressResponseBody.java:36:    }
/components\glide\ProgressResponseBody.java:38:    @Nullable
/components\glide\ProgressResponseBody.java:39:    @Override
/components\glide\ProgressResponseBody.java:40:    public MediaType contentType() {
/components\glide\ProgressResponseBody.java:41:        return responseBody.contentType();
/components\glide\ProgressResponseBody.java:42:    }
/components\glide\ProgressResponseBody.java:44:    @Override
/components\glide\ProgressResponseBody.java:45:    public long contentLength() {
/components\glide\ProgressResponseBody.java:46:        return responseBody.contentLength();
/components\glide\ProgressResponseBody.java:47:    }
/components\glide\ProgressResponseBody.java:49:    @Override
/components\glide\ProgressResponseBody.java:50:    public BufferedSource source() {
/components\glide\ProgressResponseBody.java:51:        if (bufferedSource == null) {
/components\glide\ProgressResponseBody.java:52:            bufferedSource = Okio.buffer(new ProgressSource(responseBody.source()));
/components\glide\ProgressResponseBody.java:53:        }
/components\glide\ProgressResponseBody.java:54:        return bufferedSource;
/components\glide\ProgressResponseBody.java:55:    }
/components\glide\ProgressResponseBody.java:57:    private class ProgressSource extends ForwardingSource {
/components\glide\ProgressResponseBody.java:58:        long totalBytesRead = 0;
/components\glide\ProgressResponseBody.java:60:        int currentProgress;
/components\glide\ProgressResponseBody.java:62:        ProgressSource(Source source) {
/components\glide\ProgressResponseBody.java:63:            super(source);
/components\glide\ProgressResponseBody.java:64:        }
/components\glide\ProgressResponseBody.java:66:        @Override
/components\glide\ProgressResponseBody.java:67:        public long read(@NonNull Buffer sink, long byteCount) throws IOException {
/components\glide\ProgressResponseBody.java:68:            long bytesRead = super.read(sink, byteCount);
/components\glide\ProgressResponseBody.java:69:            long fullLength = responseBody.contentLength();
/components\glide\ProgressResponseBody.java:70:            if (bytesRead == -1) {
/components\glide\ProgressResponseBody.java:71:                totalBytesRead = fullLength;
/components\glide\ProgressResponseBody.java:72:            } else {
/components\glide\ProgressResponseBody.java:73:                totalBytesRead += bytesRead;
/components\glide\ProgressResponseBody.java:74:            }
/components\glide\ProgressResponseBody.java:75:            int progress = (int) (100f * totalBytesRead / fullLength);
/components\glide\ProgressResponseBody.java:76:            Log.d(TAG, "download progress is " + progress);
/components\glide\ProgressResponseBody.java:77:            if (listener != null && progress != currentProgress) {
/components\glide\ProgressResponseBody.java:78:                listener.onProgress(progress);
/components\glide\ProgressResponseBody.java:79:            }
/components\glide\ProgressResponseBody.java:80:            if (listener != null && totalBytesRead == fullLength) {
/components\glide\ProgressResponseBody.java:81:                listener = null;
/components\glide\ProgressResponseBody.java:82:            }
/components\glide\ProgressResponseBody.java:84:            currentProgress = progress;
/components\glide\ProgressResponseBody.java:85:            return bytesRead;
/components\glide\ProgressResponseBody.java:86:        }
/components\glide\ProgressResponseBody.java:87:    }
/components\glide\ProgressResponseBody.java:88:}/components\prefs\TimePickerPreference.java:1:package com.huanchengfly.tieba.post.components.prefs;
/components\prefs\TimePickerPreference.java:3:import android.content.Context;
/components\prefs\TimePickerPreference.java:4:import android.content.res.TypedArray;
/components\prefs\TimePickerPreference.java:5:import android.util.AttributeSet;
/components\prefs\TimePickerPreference.java:7:import androidx.preference.DialogPreference;
/components\prefs\TimePickerPreference.java:9:public class TimePickerPreference extends DialogPreference {
/components\prefs\TimePickerPreference.java:10:    public int hour = 0;
/components\prefs\TimePickerPreference.java:11:    public int minute = 0;
/components\prefs\TimePickerPreference.java:13:    public TimePickerPreference(Context context, AttributeSet attrs) {
/components\prefs\TimePickerPreference.java:14:        super(context, attrs);
/components\prefs\TimePickerPreference.java:15:    }
/components\prefs\TimePickerPreference.java:17:    public static int parseHour(String value) {
/components\prefs\TimePickerPreference.java:18:        try {
/components\prefs\TimePickerPreference.java:19:            String[] time = value.split(":");
/components\prefs\TimePickerPreference.java:20:            return (Integer.parseInt(time[0]));
/components\prefs\TimePickerPreference.java:21:        } catch (Exception e) {
/components\prefs\TimePickerPreference.java:22:            return 0;
/components\prefs\TimePickerPreference.java:23:        }
/components\prefs\TimePickerPreference.java:24:    }
/components\prefs\TimePickerPreference.java:26:    public static int parseMinute(String value) {
/components\prefs\TimePickerPreference.java:27:        try {
/components\prefs\TimePickerPreference.java:28:            String[] time = value.split(":");
/components\prefs\TimePickerPreference.java:29:            return (Integer.parseInt(time[1]));
/components\prefs\TimePickerPreference.java:30:        } catch (Exception e) {
/components\prefs\TimePickerPreference.java:31:            return 0;
/components\prefs\TimePickerPreference.java:32:        }
/components\prefs\TimePickerPreference.java:33:    }
/components\prefs\TimePickerPreference.java:35:    public static String timeToString(int h, int m) {
/components\prefs\TimePickerPreference.java:36:        return String.format("%02d", h) + ":" + String.format("%02d", m);
/components\prefs\TimePickerPreference.java:37:    }
/components\prefs\TimePickerPreference.java:39:    @Override
/components\prefs\TimePickerPreference.java:40:    protected Object onGetDefaultValue(TypedArray a, int index) {
/components\prefs\TimePickerPreference.java:41:        return a.getString(index);
/components\prefs\TimePickerPreference.java:42:    }
/components\prefs\TimePickerPreference.java:44:    @Override
/components\prefs\TimePickerPreference.java:45:    protected void onSetInitialValue(boolean restoreValue, Object defaultValue) {
/components\prefs\TimePickerPreference.java:46:        String value;
/components\prefs\TimePickerPreference.java:47:        if (restoreValue) {
/components\prefs\TimePickerPreference.java:48:            if (defaultValue == null) value = getPersistedString("00:00");
/components\prefs\TimePickerPreference.java:49:            else value = getPersistedString(defaultValue.toString());
/components\prefs\TimePickerPreference.java:50:        } else {
/components\prefs\TimePickerPreference.java:51:            value = defaultValue.toString();
/components\prefs\TimePickerPreference.java:52:        }
/components\prefs\TimePickerPreference.java:54:        hour = parseHour(value);
/components\prefs\TimePickerPreference.java:55:        minute = parseMinute(value);
/components\prefs\TimePickerPreference.java:56:    }
/components\prefs\TimePickerPreference.java:58:    public void persistStringValue(String value) {
/components\prefs\TimePickerPreference.java:59:        persistString(value);
/components\prefs\TimePickerPreference.java:60:    }
/components\prefs\TimePickerPreference.java:61:}/components\spans\CustomTextSpan.java:1:package com.huanchengfly.tieba.post.components.spans;
/components\spans\CustomTextSpan.java:3:import android.graphics.Canvas;
/components\spans\CustomTextSpan.java:4:import android.graphics.Paint;
/components\spans\CustomTextSpan.java:5:import android.text.style.ReplacementSpan;
/components\spans\CustomTextSpan.java:6:import android.util.Log;
/components\spans\CustomTextSpan.java:8:import androidx.annotation.ColorInt;
/components\spans\CustomTextSpan.java:9:import androidx.annotation.NonNull;
/components\spans\CustomTextSpan.java:10:import androidx.annotation.Nullable;
/components\spans\CustomTextSpan.java:12:public class CustomTextSpan extends ReplacementSpan {
/components\spans\CustomTextSpan.java:13:    public static final String TAG = CustomTextSpan.class.getSimpleName();
/components\spans\CustomTextSpan.java:15:    private String text;
/components\spans\CustomTextSpan.java:16:    private int color;
/components\spans\CustomTextSpan.java:18:    public CustomTextSpan(String text, @ColorInt int color) {
/components\spans\CustomTextSpan.java:19:        this.text = text;
/components\spans\CustomTextSpan.java:20:        this.color = color;
/components\spans\CustomTextSpan.java:21:    }
/components\spans\CustomTextSpan.java:23:    @Override
/components\spans\CustomTextSpan.java:24:    public int getSize(@NonNull Paint paint, CharSequence text, int start, int end, @Nullable Paint.FontMetricsInt fm) {
/components\spans\CustomTextSpan.java:25:        return (int) paint.measureText(this.text);
/components\spans\CustomTextSpan.java:26:    }
/components\spans\CustomTextSpan.java:28:    @Override
/components\spans\CustomTextSpan.java:29:    public void draw(@NonNull Canvas canvas, CharSequence text, int start, int end, float x, int top, int y, int bottom, @NonNull Paint paint) {
/components\spans\CustomTextSpan.java:30:        Paint.FontMetricsInt fm = paint.getFontMetricsInt();
/components\spans\CustomTextSpan.java:31:        paint.setColor(color);
/components\spans\CustomTextSpan.java:32:        paint.setUnderlineText(false);
/components\spans\CustomTextSpan.java:33:        // 此处重新计算y坐标，使字体居中
/components\spans\CustomTextSpan.java:34:        int realY = y - ((y + fm.descent + y + fm.ascent) / 2 - (bottom + top) / 2);
/components\spans\CustomTextSpan.java:35:        Log.i(TAG, "draw: " + x + " " + realY);
/components\spans\CustomTextSpan.java:36:        canvas.drawText(this.text, x, realY, paint);
/components\spans\CustomTextSpan.java:37:    }
/components\spans\CustomTextSpan.java:38:}/components\spans\EmotionSpan.java:1:package com.huanchengfly.tieba.post.components.spans;
/components\spans\EmotionSpan.java:3:import android.content.Context;
/components\spans\EmotionSpan.java:4:import android.graphics.Canvas;
/components\spans\EmotionSpan.java:5:import android.graphics.Paint;
/components\spans\EmotionSpan.java:6:import android.graphics.drawable.Drawable;
/components\spans\EmotionSpan.java:7:import android.text.style.ImageSpan;
/components\spans\EmotionSpan.java:9:import androidx.annotation.DrawableRes;
/components\spans\EmotionSpan.java:10:import androidx.annotation.NonNull;
/components\spans\EmotionSpan.java:12:public class EmotionSpan extends ImageSpan {
/components\spans\EmotionSpan.java:13:    public static final String TAG = EmotionSpan.class.getSimpleName();
/components\spans\EmotionSpan.java:14:    private int size;
/components\spans\EmotionSpan.java:16:    public EmotionSpan(Context context, @DrawableRes int resId, int size) {
/components\spans\EmotionSpan.java:17:        super(context, resId, ALIGN_BASELINE);
/components\spans\EmotionSpan.java:18:        this.size = size;
/components\spans\EmotionSpan.java:19:    }
/components\spans\EmotionSpan.java:21:    @Override
/components\spans\EmotionSpan.java:22:    public Drawable getDrawable() {
/components\spans\EmotionSpan.java:23:        Drawable drawable = super.getDrawable();
/components\spans\EmotionSpan.java:24:        drawable.setBounds(0, 0, size, size);
/components\spans\EmotionSpan.java:25:        return drawable;
/components\spans\EmotionSpan.java:26:    }
/components\spans\EmotionSpan.java:28:    @Override
/components\spans\EmotionSpan.java:29:    public void draw(@NonNull Canvas canvas, CharSequence text, int start, int end,
/components\spans\EmotionSpan.java:30:                     float x, int top, int y, int bottom, @NonNull Paint paint) {
/components\spans\EmotionSpan.java:31:        Paint.FontMetricsInt fm = paint.getFontMetricsInt();
/components\spans\EmotionSpan.java:32:        Drawable drawable = getDrawable();
/components\spans\EmotionSpan.java:33:        int transY = (y + fm.descent + y + fm.ascent) / 2
/components\spans\EmotionSpan.java:34:                - drawable.getBounds().bottom / 2;
/components\spans\EmotionSpan.java:35:        canvas.save();
/components\spans\EmotionSpan.java:36:        canvas.translate(x, transY);
/components\spans\EmotionSpan.java:37:        drawable.draw(canvas);
/components\spans\EmotionSpan.java:38:        canvas.restore();
/components\spans\EmotionSpan.java:39:    }
/components\spans\EmotionSpan.java:40:}/components\spans\IconTextSpan.java:1:package com.huanchengfly.tieba.post.components.spans;
/components\spans\IconTextSpan.java:3:import android.content.Context;
/components\spans\IconTextSpan.java:4:import android.graphics.Bitmap;
/components\spans\IconTextSpan.java:5:import android.graphics.Canvas;
/components\spans\IconTextSpan.java:6:import android.graphics.Paint;
/components\spans\IconTextSpan.java:7:import android.graphics.drawable.Drawable;
/components\spans\IconTextSpan.java:8:import android.util.Log;
/components\spans\IconTextSpan.java:10:import androidx.annotation.ColorInt;
/components\spans\IconTextSpan.java:11:import androidx.annotation.NonNull;
/components\spans\IconTextSpan.java:12:import androidx.annotation.Nullable;
/components\spans\IconTextSpan.java:14:public class IconTextSpan extends MyImageSpan {
/components\spans\IconTextSpan.java:15:    public static final String TAG = IconTextSpan.class.getSimpleName();
/components\spans\IconTextSpan.java:17:    private String text;
/components\spans\IconTextSpan.java:18:    private int color;
/components\spans\IconTextSpan.java:19:    private Bitmap bitmap;
/components\spans\IconTextSpan.java:20:    private boolean textBold;
/components\spans\IconTextSpan.java:22:    public IconTextSpan(Context context, Bitmap bitmap, String text, @ColorInt int color) {
/components\spans\IconTextSpan.java:23:        this(context, bitmap, text, color, false);
/components\spans\IconTextSpan.java:24:    }
/components\spans\IconTextSpan.java:26:    public IconTextSpan(Context context, Bitmap bitmap, String text, @ColorInt int color, boolean textBold) {
/components\spans\IconTextSpan.java:27:        super(context, bitmap);
/components\spans\IconTextSpan.java:28:        this.bitmap = bitmap;
/components\spans\IconTextSpan.java:29:        this.text = text;
/components\spans\IconTextSpan.java:30:        this.color = color;
/components\spans\IconTextSpan.java:31:        this.textBold = textBold;
/components\spans\IconTextSpan.java:32:    }
/components\spans\IconTextSpan.java:34:    @Override
/components\spans\IconTextSpan.java:35:    public int getSize(@NonNull Paint paint, CharSequence text, int start, int end, @Nullable Paint.FontMetricsInt fm) {
/components\spans\IconTextSpan.java:36:        return super.getSize(paint, text, start, end, fm) + (int) paint.measureText(this.text);
/components\spans\IconTextSpan.java:37:    }
/components\spans\IconTextSpan.java:39:    @Override
/components\spans\IconTextSpan.java:40:    public void draw(@NonNull Canvas canvas, CharSequence text, int start, int end, float x, int top, int y, int bottom, @NonNull Paint paint) {
/components\spans\IconTextSpan.java:41:        Paint.FontMetricsInt fm = paint.getFontMetricsInt();
/components\spans\IconTextSpan.java:42:        Drawable drawable = getDrawable();
/components\spans\IconTextSpan.java:43:        int transY = (y + fm.descent + y + fm.ascent) / 2
/components\spans\IconTextSpan.java:44:                - drawable.getBounds().bottom / 2;
/components\spans\IconTextSpan.java:45:        Log.i(TAG, "draw: 1 " + x + " " + transY);
/components\spans\IconTextSpan.java:46:        canvas.save();
/components\spans\IconTextSpan.java:47:        canvas.translate(x, transY);
/components\spans\IconTextSpan.java:48:        drawable.draw(canvas);
/components\spans\IconTextSpan.java:49:        canvas.restore();
/components\spans\IconTextSpan.java:50:        paint.setColor(color);
/components\spans\IconTextSpan.java:51:        paint.setFakeBoldText(textBold);
/components\spans\IconTextSpan.java:52:        paint.setUnderlineText(false);
/components\spans\IconTextSpan.java:53:        // 此处重新计算y坐标，使字体居中
/components\spans\IconTextSpan.java:54:        int realY = y - ((y + fm.descent + y + fm.ascent) / 2 - (bottom + top) / 2) + 5;
/components\spans\IconTextSpan.java:55:        Log.i(TAG, "draw: 2 " + x + " " + realY);
/components\spans\IconTextSpan.java:56:        canvas.drawText(this.text, drawable.getIntrinsicWidth() + x, realY, paint);
/components\spans\IconTextSpan.java:57:    }
/components\spans\IconTextSpan.java:58:}
/components\spans\MyImageSpan.java:1:package com.huanchengfly.tieba.post.components.spans;
/components\spans\MyImageSpan.java:3:import android.content.Context;
/components\spans\MyImageSpan.java:4:import android.graphics.Bitmap;
/components\spans\MyImageSpan.java:5:import android.graphics.Canvas;
/components\spans\MyImageSpan.java:6:import android.graphics.Paint;
/components\spans\MyImageSpan.java:7:import android.graphics.drawable.Drawable;
/components\spans\MyImageSpan.java:8:import android.text.style.ImageSpan;
/components\spans\MyImageSpan.java:10:import androidx.annotation.NonNull;
/components\spans\MyImageSpan.java:12:public class MyImageSpan extends ImageSpan {
/components\spans\MyImageSpan.java:13:    public static final String TAG = MyImageSpan.class.getSimpleName();
/components\spans\MyImageSpan.java:15:    public MyImageSpan(Context context, Bitmap bitmap) {
/components\spans\MyImageSpan.java:16:        super(context, bitmap);
/components\spans\MyImageSpan.java:17:    }
/components\spans\MyImageSpan.java:19:    @Override
/components\spans\MyImageSpan.java:20:    public void draw(@NonNull Canvas canvas, CharSequence text, int start, int end,
/components\spans\MyImageSpan.java:21:                     float x, int top, int y, int bottom, @NonNull Paint paint) {
/components\spans\MyImageSpan.java:22:        Paint.FontMetricsInt fm = paint.getFontMetricsInt();
/components\spans\MyImageSpan.java:23:        Drawable drawable = getDrawable();
/components\spans\MyImageSpan.java:24:        int transY = (y + fm.descent + y + fm.ascent) / 2
/components\spans\MyImageSpan.java:25:                - drawable.getBounds().bottom / 2;
/components\spans\MyImageSpan.java:26:        canvas.save();
/components\spans\MyImageSpan.java:27:        canvas.translate(x, transY);
/components\spans\MyImageSpan.java:28:        drawable.draw(canvas);
/components\spans\MyImageSpan.java:29:        canvas.restore();
/components\spans\MyImageSpan.java:30:    }
/components\spans\MyImageSpan.java:31:}/components\spans\MyURLSpan.java:1:package com.huanchengfly.tieba.post.components.spans;
/components\spans\MyURLSpan.java:3:import android.content.Context;
/components\spans\MyURLSpan.java:4:import android.text.TextPaint;
/components\spans\MyURLSpan.java:5:import android.text.style.ClickableSpan;
/components\spans\MyURLSpan.java:6:import android.util.Log;
/components\spans\MyURLSpan.java:7:import android.view.View;
/components\spans\MyURLSpan.java:9:import androidx.annotation.NonNull;
/components\spans\MyURLSpan.java:11:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/components\spans\MyURLSpan.java:12:import com.huanchengfly.tieba.post.R;
/components\spans\MyURLSpan.java:13:import com.huanchengfly.tieba.post.utils.NavigationHelper;
/components\spans\MyURLSpan.java:15:public class MyURLSpan extends ClickableSpan {
/components\spans\MyURLSpan.java:16:    public String url;
/components\spans\MyURLSpan.java:17:    private Context context;
/components\spans\MyURLSpan.java:18:    private NavigationHelper navigationHelper;
/components\spans\MyURLSpan.java:20:    public MyURLSpan(Context context, String url) {
/components\spans\MyURLSpan.java:21:        super();
/components\spans\MyURLSpan.java:22:        Log.i("MyURLSpan", "MyURLSpan: " + url);
/components\spans\MyURLSpan.java:23:        this.url = url;
/components\spans\MyURLSpan.java:24:        this.context = context;
/components\spans\MyURLSpan.java:25:        this.navigationHelper = NavigationHelper.newInstance(context);
/components\spans\MyURLSpan.java:26:    }
/components\spans\MyURLSpan.java:28:    @Override
/components\spans\MyURLSpan.java:29:    public void updateDrawState(@NonNull TextPaint ds) {
/components\spans\MyURLSpan.java:30:        super.updateDrawState(ds);
/components\spans\MyURLSpan.java:31:        ds.setColor(ThemeUtils.getColorByAttr(this.context, R.attr.colorAccent));
/components\spans\MyURLSpan.java:32:        ds.setUnderlineText(false);
/components\spans\MyURLSpan.java:33:    }
/components\spans\MyURLSpan.java:35:    @Override
/components\spans\MyURLSpan.java:36:    public void onClick(@NonNull View view) {
/components\spans\MyURLSpan.java:37:        navigationHelper.navigationByData(NavigationHelper.ACTION_URL, this.url);
/components\spans\MyURLSpan.java:38:    }
/components\spans\MyURLSpan.java:39:}
/components\spans\MyUserSpan.java:1:package com.huanchengfly.tieba.post.components.spans;
/components\spans\MyUserSpan.java:3:import android.content.Context;
/components\spans\MyUserSpan.java:4:import android.text.TextPaint;
/components\spans\MyUserSpan.java:5:import android.text.style.ClickableSpan;
/components\spans\MyUserSpan.java:6:import android.view.View;
/components\spans\MyUserSpan.java:8:import androidx.annotation.NonNull;
/components\spans\MyUserSpan.java:10:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/components\spans\MyUserSpan.java:11:import com.huanchengfly.tieba.post.R;
/components\spans\MyUserSpan.java:12:import com.huanchengfly.tieba.post.utils.NavigationHelper;
/components\spans\MyUserSpan.java:14:public class MyUserSpan extends ClickableSpan {
/components\spans\MyUserSpan.java:15:    public String uid;
/components\spans\MyUserSpan.java:16:    private Context context;
/components\spans\MyUserSpan.java:17:    private NavigationHelper navigationHelper;
/components\spans\MyUserSpan.java:19:    public MyUserSpan(Context context, String uid) {
/components\spans\MyUserSpan.java:20:        super();
/components\spans\MyUserSpan.java:21:        this.uid = uid;
/components\spans\MyUserSpan.java:22:        this.context = context;
/components\spans\MyUserSpan.java:23:        this.navigationHelper = NavigationHelper.newInstance(context);
/components\spans\MyUserSpan.java:24:    }
/components\spans\MyUserSpan.java:26:    @Override
/components\spans\MyUserSpan.java:27:    public void updateDrawState(@NonNull TextPaint ds) {
/components\spans\MyUserSpan.java:28:        super.updateDrawState(ds);
/components\spans\MyUserSpan.java:29:        ds.setColor(ThemeUtils.getColorByAttr(this.context, R.attr.colorAccent));
/components\spans\MyUserSpan.java:30:        ds.setUnderlineText(false);
/components\spans\MyUserSpan.java:31:    }
/components\spans\MyUserSpan.java:33:    @Override
/components\spans\MyUserSpan.java:34:    public void onClick(@NonNull View view) {
/components\spans\MyUserSpan.java:35:        navigationHelper.navigationByData(NavigationHelper.ACTION_USER_BY_UID, uid);
/components\spans\MyUserSpan.java:36:    }
/components\spans\MyUserSpan.java:37:}
/components\spans\RoundBackgroundColorSpan.java:1:package com.huanchengfly.tieba.post.components.spans;
/components\spans\RoundBackgroundColorSpan.java:3:import android.content.Context;
/components\spans\RoundBackgroundColorSpan.java:4:import android.graphics.Canvas;
/components\spans\RoundBackgroundColorSpan.java:5:import android.graphics.Paint;
/components\spans\RoundBackgroundColorSpan.java:6:import android.graphics.RectF;
/components\spans\RoundBackgroundColorSpan.java:7:import android.text.TextPaint;
/components\spans\RoundBackgroundColorSpan.java:8:import android.text.style.ReplacementSpan;
/components\spans\RoundBackgroundColorSpan.java:10:import com.huanchengfly.tieba.post.utils.DisplayUtil;
/components\spans\RoundBackgroundColorSpan.java:12:public class RoundBackgroundColorSpan extends ReplacementSpan {
/components\spans\RoundBackgroundColorSpan.java:13:    private Context context;
/components\spans\RoundBackgroundColorSpan.java:15:    private float fontSizePx;    //px
/components\spans\RoundBackgroundColorSpan.java:16:    private int bgColor;
/components\spans\RoundBackgroundColorSpan.java:17:    private int textColor;
/components\spans\RoundBackgroundColorSpan.java:19:    public RoundBackgroundColorSpan(Context context, int bgColor, int textColor, float fontSizePx) {
/components\spans\RoundBackgroundColorSpan.java:20:        super();
/components\spans\RoundBackgroundColorSpan.java:21:        this.context = context;
/components\spans\RoundBackgroundColorSpan.java:22:        this.bgColor = bgColor;
/components\spans\RoundBackgroundColorSpan.java:23:        this.textColor = textColor;
/components\spans\RoundBackgroundColorSpan.java:24:        this.fontSizePx = fontSizePx;
/components\spans\RoundBackgroundColorSpan.java:25:    }
/components\spans\RoundBackgroundColorSpan.java:27:    @Override
/components\spans\RoundBackgroundColorSpan.java:28:    public int getSize(Paint paint, CharSequence text, int start, int end, Paint.FontMetricsInt fm) {
/components\spans\RoundBackgroundColorSpan.java:29:        return ((int) getCustomTextPaint(paint).measureText(text, start, end) + DisplayUtil.dp2px(context, 12));
/components\spans\RoundBackgroundColorSpan.java:30:    }
/components\spans\RoundBackgroundColorSpan.java:32:    @Override
/components\spans\RoundBackgroundColorSpan.java:33:    public void draw(Canvas canvas, CharSequence text, int start, int end, float x, int top, int y, int bottom, Paint paint) {
/components\spans\RoundBackgroundColorSpan.java:34:        int color1 = paint.getColor();
/components\spans\RoundBackgroundColorSpan.java:35:        Paint textPaint = getCustomTextPaint(paint);
/components\spans\RoundBackgroundColorSpan.java:36:        paint.setColor(this.bgColor);
/components\spans\RoundBackgroundColorSpan.java:37:        paint.setStyle(Paint.Style.FILL);
/components\spans\RoundBackgroundColorSpan.java:38:        paint.setAntiAlias(true);
/components\spans\RoundBackgroundColorSpan.java:39:        int padding = DisplayUtil.dp2px(context, 1);
/components\spans\RoundBackgroundColorSpan.java:40:        canvas.drawRoundRect(new RectF(x, top + padding, x + ((int) textPaint.measureText(text, start, end) + DisplayUtil.dp2px(context, 10)), bottom - padding),
/components\spans\RoundBackgroundColorSpan.java:41:                DisplayUtil.dp2px(context, 50),
/components\spans\RoundBackgroundColorSpan.java:42:                DisplayUtil.dp2px(context, 50),
/components\spans\RoundBackgroundColorSpan.java:43:                paint);
/components\spans\RoundBackgroundColorSpan.java:44:        paint.setColor(this.textColor);
/components\spans\RoundBackgroundColorSpan.java:45:        paint.setStyle(Paint.Style.FILL);
/components\spans\RoundBackgroundColorSpan.java:46:        paint.setAntiAlias(false);
/components\spans\RoundBackgroundColorSpan.java:47:        Paint.FontMetricsInt fm = textPaint.getFontMetricsInt();
/components\spans\RoundBackgroundColorSpan.java:48:        canvas.drawText(text, start, end, x + DisplayUtil.dp2px(context, 5), y - ((y + fm.descent + y + fm.ascent) / 2 - (bottom + top) / 2), textPaint);
/components\spans\RoundBackgroundColorSpan.java:49:        paint.setColor(color1);
/components\spans\RoundBackgroundColorSpan.java:50:    }
/components\spans\RoundBackgroundColorSpan.java:52:    private TextPaint getCustomTextPaint(Paint srcPaint) {
/components\spans\RoundBackgroundColorSpan.java:53:        TextPaint paint = new TextPaint(srcPaint);
/components\spans\RoundBackgroundColorSpan.java:54:        paint.setColor(this.textColor);
/components\spans\RoundBackgroundColorSpan.java:55:        paint.setTextSize(fontSizePx);
/components\spans\RoundBackgroundColorSpan.java:56:        return paint;
/components\spans\RoundBackgroundColorSpan.java:57:    }
/components\spans\RoundBackgroundColorSpan.java:58:}/components\spans\VerticalCenterSpan.java:1:package com.huanchengfly.tieba.post.components.spans;
/components\spans\VerticalCenterSpan.java:3:import android.graphics.Canvas;
/components\spans\VerticalCenterSpan.java:4:import android.graphics.Paint;
/components\spans\VerticalCenterSpan.java:5:import android.text.TextPaint;
/components\spans\VerticalCenterSpan.java:6:import android.text.style.ReplacementSpan;
/components\spans\VerticalCenterSpan.java:8:/**
/components\spans\VerticalCenterSpan.java:9: * 使TextView中不同大小字体垂直居中
/components\spans\VerticalCenterSpan.java:10: */
/components\spans\VerticalCenterSpan.java:11:public class VerticalCenterSpan extends ReplacementSpan {
/components\spans\VerticalCenterSpan.java:12:    private float fontSizePx;    //px
/components\spans\VerticalCenterSpan.java:14:    public VerticalCenterSpan(float fontSizePx) {
/components\spans\VerticalCenterSpan.java:15:        this.fontSizePx = fontSizePx;
/components\spans\VerticalCenterSpan.java:16:    }
/components\spans\VerticalCenterSpan.java:18:    @Override
/components\spans\VerticalCenterSpan.java:19:    public int getSize(Paint paint, CharSequence text, int start, int end, Paint.FontMetricsInt fm) {
/components\spans\VerticalCenterSpan.java:20:        text = text.subSequence(start, end);
/components\spans\VerticalCenterSpan.java:21:        Paint p = getCustomTextPaint(paint);
/components\spans\VerticalCenterSpan.java:22:        return (int) p.measureText(text.toString());
/components\spans\VerticalCenterSpan.java:23:    }
/components\spans\VerticalCenterSpan.java:25:    @Override
/components\spans\VerticalCenterSpan.java:26:    public void draw(Canvas canvas, CharSequence text, int start, int end, float x, int top, int y, int bottom, Paint paint) {
/components\spans\VerticalCenterSpan.java:27:        text = text.subSequence(start, end);
/components\spans\VerticalCenterSpan.java:28:        Paint p = getCustomTextPaint(paint);
/components\spans\VerticalCenterSpan.java:29:        Paint.FontMetricsInt fm = p.getFontMetricsInt();
/components\spans\VerticalCenterSpan.java:30:        // 此处重新计算y坐标，使字体居中
/components\spans\VerticalCenterSpan.java:31:        canvas.drawText(text.toString(), x, y - ((y + fm.descent + y + fm.ascent) / 2 - (bottom + top) / 2), p);
/components\spans\VerticalCenterSpan.java:32:    }
/components\spans\VerticalCenterSpan.java:34:    private TextPaint getCustomTextPaint(Paint srcPaint) {
/components\spans\VerticalCenterSpan.java:35:        TextPaint paint = new TextPaint(srcPaint);
/components\spans\VerticalCenterSpan.java:36:        paint.setTextSize(fontSizePx);   //设定字体大小, sp转换为px
/components\spans\VerticalCenterSpan.java:37:        return paint;
/components\spans\VerticalCenterSpan.java:38:    }
/components\spans\VerticalCenterSpan.java:39:}/components\transformations\BitmapTransformation.java:1:package com.huanchengfly.tieba.post.components.transformations;
/components\transformations\BitmapTransformation.java:3:/**
/components\transformations\BitmapTransformation.java:4: * Copyright (C) 2019 Wasabeef
/components\transformations\BitmapTransformation.java:5: * Copyright 2014 Google, Inc. All rights reserved.
/components\transformations\BitmapTransformation.java:6: * <p>
/components\transformations\BitmapTransformation.java:7: * Licensed under the Apache License, Version 2.0 (the "License");
/components\transformations\BitmapTransformation.java:8: * you may not use this file except in compliance with the License.
/components\transformations\BitmapTransformation.java:9: * You may obtain a copy of the License at
/components\transformations\BitmapTransformation.java:10: * <p>
/components\transformations\BitmapTransformation.java:11: * http://www.apache.org/licenses/LICENSE-2.0
/components\transformations\BitmapTransformation.java:12: * <p>
/components\transformations\BitmapTransformation.java:13: * Unless required by applicable law or agreed to in writing, software
/components\transformations\BitmapTransformation.java:14: * distributed under the License is distributed on an "AS IS" BASIS,
/components\transformations\BitmapTransformation.java:15: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/components\transformations\BitmapTransformation.java:16: * See the License for the specific language governing permissions and
/components\transformations\BitmapTransformation.java:17: * limitations under the License.
/components\transformations\BitmapTransformation.java:18: */
/components\transformations\BitmapTransformation.java:20:import android.content.Context;
/components\transformations\BitmapTransformation.java:21:import android.graphics.Bitmap;
/components\transformations\BitmapTransformation.java:23:import androidx.annotation.NonNull;
/components\transformations\BitmapTransformation.java:25:import com.bumptech.glide.Glide;
/components\transformations\BitmapTransformation.java:26:import com.bumptech.glide.load.Transformation;
/components\transformations\BitmapTransformation.java:27:import com.bumptech.glide.load.engine.Resource;
/components\transformations\BitmapTransformation.java:28:import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
/components\transformations\BitmapTransformation.java:29:import com.bumptech.glide.load.resource.bitmap.BitmapResource;
/components\transformations\BitmapTransformation.java:30:import com.bumptech.glide.request.target.Target;
/components\transformations\BitmapTransformation.java:31:import com.bumptech.glide.util.Util;
/components\transformations\BitmapTransformation.java:33:import java.security.MessageDigest;
/components\transformations\BitmapTransformation.java:35:public abstract class BitmapTransformation implements Transformation<Bitmap> {
/components\transformations\BitmapTransformation.java:37:    @NonNull
/components\transformations\BitmapTransformation.java:38:    @Override
/components\transformations\BitmapTransformation.java:39:    public final Resource<Bitmap> transform(@NonNull Context context, @NonNull Resource<Bitmap> resource,
/components\transformations\BitmapTransformation.java:40:                                            int outWidth, int outHeight) {
/components\transformations\BitmapTransformation.java:41:        if (!Util.isValidDimensions(outWidth, outHeight)) {
/components\transformations\BitmapTransformation.java:42:            throw new IllegalArgumentException(
/components\transformations\BitmapTransformation.java:43:                    "Cannot apply transformation on width: " + outWidth + " or height: " + outHeight
/components\transformations\BitmapTransformation.java:44:                            + " less than or equal to zero and not Target.SIZE_ORIGINAL");
/components\transformations\BitmapTransformation.java:45:        }
/components\transformations\BitmapTransformation.java:46:        BitmapPool bitmapPool = Glide.get(context).getBitmapPool();
/components\transformations\BitmapTransformation.java:47:        Bitmap toTransform = resource.get();
/components\transformations\BitmapTransformation.java:48:        int targetWidth = outWidth == Target.SIZE_ORIGINAL ? toTransform.getWidth() : outWidth;
/components\transformations\BitmapTransformation.java:49:        int targetHeight = outHeight == Target.SIZE_ORIGINAL ? toTransform.getHeight() : outHeight;
/components\transformations\BitmapTransformation.java:50:        Bitmap transformed = transform(context.getApplicationContext(), bitmapPool, toTransform, targetWidth, targetHeight);
/components\transformations\BitmapTransformation.java:52:        final Resource<Bitmap> result;
/components\transformations\BitmapTransformation.java:53:        if (toTransform.equals(transformed)) {
/components\transformations\BitmapTransformation.java:54:            result = resource;
/components\transformations\BitmapTransformation.java:55:        } else {
/components\transformations\BitmapTransformation.java:56:            result = BitmapResource.obtain(transformed, bitmapPool);
/components\transformations\BitmapTransformation.java:57:        }
/components\transformations\BitmapTransformation.java:58:        return result;
/components\transformations\BitmapTransformation.java:59:    }
/components\transformations\BitmapTransformation.java:61:    void setCanvasBitmapDensity(@NonNull Bitmap toTransform, @NonNull Bitmap canvasBitmap) {
/components\transformations\BitmapTransformation.java:62:        canvasBitmap.setDensity(toTransform.getDensity());
/components\transformations\BitmapTransformation.java:63:    }
/components\transformations\BitmapTransformation.java:65:    protected abstract Bitmap transform(@NonNull Context context, @NonNull BitmapPool pool,
/components\transformations\BitmapTransformation.java:66:                                        @NonNull Bitmap toTransform, int outWidth, int outHeight);
/components\transformations\BitmapTransformation.java:68:    @Override
/components\transformations\BitmapTransformation.java:69:    public abstract void updateDiskCacheKey(@NonNull MessageDigest messageDigest);
/components\transformations\BitmapTransformation.java:71:    @Override
/components\transformations\BitmapTransformation.java:72:    public abstract boolean equals(Object o);
/components\transformations\BitmapTransformation.java:74:    @Override
/components\transformations\BitmapTransformation.java:75:    public abstract int hashCode();
/components\transformations\BitmapTransformation.java:76:}
/components\transformations\BlurTransformation.java:1:package com.huanchengfly.tieba.post.components.transformations;
/components\transformations\BlurTransformation.java:3:import android.graphics.Bitmap;
/components\transformations\BlurTransformation.java:4:import android.graphics.Canvas;
/components\transformations\BlurTransformation.java:5:import android.graphics.Paint;
/components\transformations\BlurTransformation.java:7:import androidx.annotation.NonNull;
/components\transformations\BlurTransformation.java:9:import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
/components\transformations\BlurTransformation.java:10:import com.bumptech.glide.load.resource.bitmap.BitmapTransformation;
/components\transformations\BlurTransformation.java:11:import com.huanchengfly.tieba.post.utils.FastBlur;
/components\transformations\BlurTransformation.java:13:import java.security.MessageDigest;
/components\transformations\BlurTransformation.java:15:public class BlurTransformation extends BitmapTransformation {
/components\transformations\BlurTransformation.java:16:    private static final int VERSION = 1;
/components\transformations\BlurTransformation.java:17:    private static final String ID =
/components\transformations\BlurTransformation.java:18:            "jp.wasabeef.glide.transformations.BlurTransformation." + VERSION;
/components\transformations\BlurTransformation.java:20:    private static int MAX_RADIUS = 25;
/components\transformations\BlurTransformation.java:21:    private static int DEFAULT_DOWN_SAMPLING = 1;
/components\transformations\BlurTransformation.java:23:    private int radius;
/components\transformations\BlurTransformation.java:24:    private int sampling;
/components\transformations\BlurTransformation.java:26:    public BlurTransformation() {
/components\transformations\BlurTransformation.java:27:        this(MAX_RADIUS, DEFAULT_DOWN_SAMPLING);
/components\transformations\BlurTransformation.java:28:    }
/components\transformations\BlurTransformation.java:30:    public BlurTransformation(int radius) {
/components\transformations\BlurTransformation.java:31:        this(radius, DEFAULT_DOWN_SAMPLING);
/components\transformations\BlurTransformation.java:32:    }
/components\transformations\BlurTransformation.java:34:    public BlurTransformation(int radius, int sampling) {
/components\transformations\BlurTransformation.java:35:        this.radius = radius;
/components\transformations\BlurTransformation.java:36:        this.sampling = sampling;
/components\transformations\BlurTransformation.java:37:    }
/components\transformations\BlurTransformation.java:39:    private void setCanvasBitmapDensity(@NonNull Bitmap toTransform, @NonNull Bitmap canvasBitmap) {
/components\transformations\BlurTransformation.java:40:        canvasBitmap.setDensity(toTransform.getDensity());
/components\transformations\BlurTransformation.java:41:    }
/components\transformations\BlurTransformation.java:43:    @Override
/components\transformations\BlurTransformation.java:44:    protected Bitmap transform(@NonNull BitmapPool pool,
/components\transformations\BlurTransformation.java:45:                               @NonNull Bitmap toTransform, int outWidth, int outHeight) {
/components\transformations\BlurTransformation.java:47:        int width = toTransform.getWidth();
/components\transformations\BlurTransformation.java:48:        int height = toTransform.getHeight();
/components\transformations\BlurTransformation.java:49:        int scaledWidth = width / sampling;
/components\transformations\BlurTransformation.java:50:        int scaledHeight = height / sampling;
/components\transformations\BlurTransformation.java:52:        Bitmap bitmap = pool.get(scaledWidth, scaledHeight, Bitmap.Config.ARGB_8888);
/components\transformations\BlurTransformation.java:54:        setCanvasBitmapDensity(toTransform, bitmap);
/components\transformations\BlurTransformation.java:56:        Canvas canvas = new Canvas(bitmap);
/components\transformations\BlurTransformation.java:57:        canvas.scale(1 / (float) sampling, 1 / (float) sampling);
/components\transformations\BlurTransformation.java:58:        Paint paint = new Paint();
/components\transformations\BlurTransformation.java:59:        paint.setFlags(Paint.FILTER_BITMAP_FLAG);
/components\transformations\BlurTransformation.java:60:        canvas.drawBitmap(toTransform, 0, 0, paint);
/components\transformations\BlurTransformation.java:62:        bitmap = FastBlur.blur(bitmap, radius, true);
/components\transformations\BlurTransformation.java:64:        return bitmap;
/components\transformations\BlurTransformation.java:65:    }
/components\transformations\BlurTransformation.java:67:    @Override
/components\transformations\BlurTransformation.java:68:    public String toString() {
/components\transformations\BlurTransformation.java:69:        return "BlurTransformation(radius=" + radius + ", sampling=" + sampling + ")";
/components\transformations\BlurTransformation.java:70:    }
/components\transformations\BlurTransformation.java:72:    @Override
/components\transformations\BlurTransformation.java:73:    public boolean equals(Object o) {
/components\transformations\BlurTransformation.java:74:        return o instanceof BlurTransformation &&
/components\transformations\BlurTransformation.java:75:                ((BlurTransformation) o).radius == radius &&
/components\transformations\BlurTransformation.java:76:                ((BlurTransformation) o).sampling == sampling;
/components\transformations\BlurTransformation.java:77:    }
/components\transformations\BlurTransformation.java:79:    @Override
/components\transformations\BlurTransformation.java:80:    public int hashCode() {
/components\transformations\BlurTransformation.java:81:        return ID.hashCode() + radius * 1000 + sampling * 10;
/components\transformations\BlurTransformation.java:82:    }
/components\transformations\BlurTransformation.java:84:    @Override
/components\transformations\BlurTransformation.java:85:    public void updateDiskCacheKey(@NonNull MessageDigest messageDigest) {
/components\transformations\BlurTransformation.java:86:        messageDigest.update((ID + radius + sampling).getBytes(CHARSET));
/components\transformations\BlurTransformation.java:87:    }
/components\transformations\BlurTransformation.java:88:}
/components\transformations\RadiusTransformation.java:1:package com.huanchengfly.tieba.post.components.transformations;
/components\transformations\RadiusTransformation.java:3:import android.content.Context;
/components\transformations\RadiusTransformation.java:4:import android.graphics.Bitmap;
/components\transformations\RadiusTransformation.java:5:import android.graphics.BitmapShader;
/components\transformations\RadiusTransformation.java:6:import android.graphics.Canvas;
/components\transformations\RadiusTransformation.java:7:import android.graphics.Paint;
/components\transformations\RadiusTransformation.java:8:import android.graphics.RectF;
/components\transformations\RadiusTransformation.java:10:import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
/components\transformations\RadiusTransformation.java:11:import com.bumptech.glide.load.resource.bitmap.BitmapTransformation;
/components\transformations\RadiusTransformation.java:12:import com.bumptech.glide.load.resource.bitmap.TransformationUtils;
/components\transformations\RadiusTransformation.java:13:import com.huanchengfly.tieba.post.utils.DisplayUtil;
/components\transformations\RadiusTransformation.java:15:import org.jetbrains.annotations.NotNull;
/components\transformations\RadiusTransformation.java:17:import java.security.MessageDigest;
/components\transformations\RadiusTransformation.java:19:public class RadiusTransformation extends BitmapTransformation {
/components\transformations\RadiusTransformation.java:20:    public static final int CORNER_TOP_LEFT = 1;
/components\transformations\RadiusTransformation.java:21:    public static final int CORNER_TOP_RIGHT = 1 << 1;
/components\transformations\RadiusTransformation.java:22:    public static final int CORNER_BOTTOM_LEFT = 1 << 2;
/components\transformations\RadiusTransformation.java:23:    public static final int CORNER_BOTTOM_RIGHT = 1 << 3;
/components\transformations\RadiusTransformation.java:24:    public static final int CORNER_ALL = CORNER_TOP_LEFT | CORNER_TOP_RIGHT | CORNER_BOTTOM_LEFT | CORNER_BOTTOM_RIGHT;
/components\transformations\RadiusTransformation.java:25:    private static final String ID =
/components\transformations\RadiusTransformation.java:26:            "com.huanchengfly.tieba.post.components.transformations.RadiusTransformation";
/components\transformations\RadiusTransformation.java:27:    private float radius = 0f;
/components\transformations\RadiusTransformation.java:28:    private int corners;
/components\transformations\RadiusTransformation.java:31:    public RadiusTransformation(Context context) {
/components\transformations\RadiusTransformation.java:32:        this(context, 8);
/components\transformations\RadiusTransformation.java:33:    }
/components\transformations\RadiusTransformation.java:35:    public RadiusTransformation(Context context, int dp) {
/components\transformations\RadiusTransformation.java:36:        this(context, dp, CORNER_ALL);
/components\transformations\RadiusTransformation.java:37:    }
/components\transformations\RadiusTransformation.java:39:    public RadiusTransformation(Context context, int dp, int corners) {
/components\transformations\RadiusTransformation.java:40:        super();
/components\transformations\RadiusTransformation.java:41:        this.radius = DisplayUtil.dp2px(context, dp);
/components\transformations\RadiusTransformation.java:42:        this.corners = corners;
/components\transformations\RadiusTransformation.java:43:    }
/components\transformations\RadiusTransformation.java:45:    private Bitmap roundCrop(BitmapPool pool, Bitmap source) {
/components\transformations\RadiusTransformation.java:46:        if (source == null) return null;
/components\transformations\RadiusTransformation.java:47:        Bitmap result = pool.get(source.getWidth(), source.getHeight(), Bitmap.Config.ARGB_8888);
/components\transformations\RadiusTransformation.java:48:        Canvas canvas = new Canvas(result);
/components\transformations\RadiusTransformation.java:49:        Paint paint = new Paint();
/components\transformations\RadiusTransformation.java:50:        paint.setShader(new BitmapShader(source, BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP));
/components\transformations\RadiusTransformation.java:51:        paint.setAntiAlias(true);
/components\transformations\RadiusTransformation.java:52:        RectF rectF = new RectF(0f, 0f, source.getWidth(), source.getHeight());
/components\transformations\RadiusTransformation.java:53:        canvas.drawRoundRect(rectF, radius, radius, paint);
/components\transformations\RadiusTransformation.java:54:        int notRoundedCorners = corners ^ CORNER_ALL;
/components\transformations\RadiusTransformation.java:55:        //哪个角不是圆角我再把你用矩形画出来
/components\transformations\RadiusTransformation.java:56:        if ((notRoundedCorners & CORNER_TOP_LEFT) != 0) {
/components\transformations\RadiusTransformation.java:57:            canvas.drawRect(0, 0, radius, radius, paint);
/components\transformations\RadiusTransformation.java:58:        }
/components\transformations\RadiusTransformation.java:59:        if ((notRoundedCorners & CORNER_TOP_RIGHT) != 0) {
/components\transformations\RadiusTransformation.java:60:            canvas.drawRect(rectF.right - radius, 0, rectF.right, radius, paint);
/components\transformations\RadiusTransformation.java:61:        }
/components\transformations\RadiusTransformation.java:62:        if ((notRoundedCorners & CORNER_BOTTOM_LEFT) != 0) {
/components\transformations\RadiusTransformation.java:63:            canvas.drawRect(0, rectF.bottom - radius, radius, rectF.bottom, paint);
/components\transformations\RadiusTransformation.java:64:        }
/components\transformations\RadiusTransformation.java:65:        if ((notRoundedCorners & CORNER_BOTTOM_RIGHT) != 0) {
/components\transformations\RadiusTransformation.java:66:            canvas.drawRect(rectF.right - radius, rectF.bottom - radius, rectF.right, rectF.bottom, paint);
/components\transformations\RadiusTransformation.java:67:        }
/components\transformations\RadiusTransformation.java:68:        return result;
/components\transformations\RadiusTransformation.java:69:    }
/components\transformations\RadiusTransformation.java:71:    @Override
/components\transformations\RadiusTransformation.java:72:    protected Bitmap transform(@NotNull BitmapPool pool, @NotNull Bitmap toTransform, int outWidth, int outHeight) {
/components\transformations\RadiusTransformation.java:73:        Bitmap bitmap = TransformationUtils.centerCrop(pool, toTransform, outWidth, outHeight);
/components\transformations\RadiusTransformation.java:74:        return roundCrop(pool, bitmap);
/components\transformations\RadiusTransformation.java:75:    }
/components\transformations\RadiusTransformation.java:77:    public String getId() {
/components\transformations\RadiusTransformation.java:78:        return getClass().getName() + Math.round(radius);
/components\transformations\RadiusTransformation.java:79:    }
/components\transformations\RadiusTransformation.java:81:    @Override
/components\transformations\RadiusTransformation.java:82:    public void updateDiskCacheKey(@NotNull MessageDigest messageDigest) {
/components\transformations\RadiusTransformation.java:83:        messageDigest.update((ID + radius).getBytes(CHARSET));
/components\transformations\RadiusTransformation.java:84:    }
/components\transformations\RadiusTransformation.java:85:}/components\transformations\SupportRSBlurTransformation.java:1:package com.huanchengfly.tieba.post.components.transformations;
/components\transformations\SupportRSBlurTransformation.java:3:/**
/components\transformations\SupportRSBlurTransformation.java:4: * Copyright (C) 2019 Wasabeef
/components\transformations\SupportRSBlurTransformation.java:5: * <p>
/components\transformations\SupportRSBlurTransformation.java:6: * Licensed under the Apache License, Version 2.0 (the "License");
/components\transformations\SupportRSBlurTransformation.java:7: * you may not use this file except in compliance with the License.
/components\transformations\SupportRSBlurTransformation.java:8: * You may obtain a copy of the License at
/components\transformations\SupportRSBlurTransformation.java:9: * <p>
/components\transformations\SupportRSBlurTransformation.java:10: * http://www.apache.org/licenses/LICENSE-2.0
/components\transformations\SupportRSBlurTransformation.java:11: * <p>
/components\transformations\SupportRSBlurTransformation.java:12: * Unless required by applicable law or agreed to in writing, software
/components\transformations\SupportRSBlurTransformation.java:13: * distributed under the License is distributed on an "AS IS" BASIS,
/components\transformations\SupportRSBlurTransformation.java:14: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/components\transformations\SupportRSBlurTransformation.java:15: * See the License for the specific language governing permissions and
/components\transformations\SupportRSBlurTransformation.java:16: * limitations under the License.
/components\transformations\SupportRSBlurTransformation.java:17: */
/components\transformations\SupportRSBlurTransformation.java:19:import android.content.Context;
/components\transformations\SupportRSBlurTransformation.java:20:import android.graphics.Bitmap;
/components\transformations\SupportRSBlurTransformation.java:21:import android.graphics.Canvas;
/components\transformations\SupportRSBlurTransformation.java:22:import android.graphics.Paint;
/components\transformations\SupportRSBlurTransformation.java:24:import androidx.annotation.NonNull;
/components\transformations\SupportRSBlurTransformation.java:26:import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
/components\transformations\SupportRSBlurTransformation.java:27:import com.huanchengfly.tieba.post.components.transformations.internal.FastBlur;
/components\transformations\SupportRSBlurTransformation.java:28:import com.huanchengfly.tieba.post.components.transformations.internal.RSBlur;
/components\transformations\SupportRSBlurTransformation.java:29:import com.huanchengfly.tieba.post.components.transformations.internal.SupportRSBlur;
/components\transformations\SupportRSBlurTransformation.java:31:import java.security.MessageDigest;
/components\transformations\SupportRSBlurTransformation.java:33:public class SupportRSBlurTransformation extends BitmapTransformation {
/components\transformations\SupportRSBlurTransformation.java:35:    private static final int VERSION = 1;
/components\transformations\SupportRSBlurTransformation.java:36:    private static final String ID =
/components\transformations\SupportRSBlurTransformation.java:37:            "jp.wasabeef.glide.transformations.SupportRSBlurTransformation." + VERSION;
/components\transformations\SupportRSBlurTransformation.java:39:    private static int MAX_RADIUS = 25;
/components\transformations\SupportRSBlurTransformation.java:40:    private static int DEFAULT_DOWN_SAMPLING = 1;
/components\transformations\SupportRSBlurTransformation.java:42:    private int radius;
/components\transformations\SupportRSBlurTransformation.java:43:    private int sampling;
/components\transformations\SupportRSBlurTransformation.java:45:    public SupportRSBlurTransformation() {
/components\transformations\SupportRSBlurTransformation.java:46:        this(MAX_RADIUS, DEFAULT_DOWN_SAMPLING);
/components\transformations\SupportRSBlurTransformation.java:47:    }
/components\transformations\SupportRSBlurTransformation.java:49:    public SupportRSBlurTransformation(int radius) {
/components\transformations\SupportRSBlurTransformation.java:50:        this(radius, DEFAULT_DOWN_SAMPLING);
/components\transformations\SupportRSBlurTransformation.java:51:    }
/components\transformations\SupportRSBlurTransformation.java:53:    public SupportRSBlurTransformation(int radius, int sampling) {
/components\transformations\SupportRSBlurTransformation.java:54:        this.radius = radius;
/components\transformations\SupportRSBlurTransformation.java:55:        this.sampling = sampling;
/components\transformations\SupportRSBlurTransformation.java:56:    }
/components\transformations\SupportRSBlurTransformation.java:58:    @Override
/components\transformations\SupportRSBlurTransformation.java:59:    protected Bitmap transform(@NonNull Context context, @NonNull BitmapPool pool,
/components\transformations\SupportRSBlurTransformation.java:60:                               @NonNull Bitmap toTransform, int outWidth, int outHeight) {
/components\transformations\SupportRSBlurTransformation.java:62:        int width = toTransform.getWidth();
/components\transformations\SupportRSBlurTransformation.java:63:        int height = toTransform.getHeight();
/components\transformations\SupportRSBlurTransformation.java:64:        int scaledWidth = width / sampling;
/components\transformations\SupportRSBlurTransformation.java:65:        int scaledHeight = height / sampling;
/components\transformations\SupportRSBlurTransformation.java:67:        Bitmap bitmap = pool.get(scaledWidth, scaledHeight, Bitmap.Config.ARGB_8888);
/components\transformations\SupportRSBlurTransformation.java:69:        setCanvasBitmapDensity(toTransform, bitmap);
/components\transformations\SupportRSBlurTransformation.java:71:        Canvas canvas = new Canvas(bitmap);
/components\transformations\SupportRSBlurTransformation.java:72:        canvas.scale(1 / (float) sampling, 1 / (float) sampling);
/components\transformations\SupportRSBlurTransformation.java:73:        Paint paint = new Paint();
/components\transformations\SupportRSBlurTransformation.java:74:        paint.setFlags(Paint.FILTER_BITMAP_FLAG);
/components\transformations\SupportRSBlurTransformation.java:75:        canvas.drawBitmap(toTransform, 0, 0, paint);
/components\transformations\SupportRSBlurTransformation.java:77:        try {
/components\transformations\SupportRSBlurTransformation.java:78:            bitmap = SupportRSBlur.blur(context, bitmap, radius);
/components\transformations\SupportRSBlurTransformation.java:79:        } catch (NoClassDefFoundError e) {
/components\transformations\SupportRSBlurTransformation.java:80:            bitmap = RSBlur.blur(context, bitmap, radius);
/components\transformations\SupportRSBlurTransformation.java:81:        } catch (RuntimeException e) {
/components\transformations\SupportRSBlurTransformation.java:82:            bitmap = FastBlur.blur(bitmap, radius, true);
/components\transformations\SupportRSBlurTransformation.java:83:        }
/components\transformations\SupportRSBlurTransformation.java:85:        return bitmap;
/components\transformations\SupportRSBlurTransformation.java:86:    }
/components\transformations\SupportRSBlurTransformation.java:88:    @Override
/components\transformations\SupportRSBlurTransformation.java:89:    public String toString() {
/components\transformations\SupportRSBlurTransformation.java:90:        return "SupportRSBlurTransformation(radius=" + radius + ", sampling=" + sampling + ")";
/components\transformations\SupportRSBlurTransformation.java:91:    }
/components\transformations\SupportRSBlurTransformation.java:93:    @Override
/components\transformations\SupportRSBlurTransformation.java:94:    public boolean equals(Object o) {
/components\transformations\SupportRSBlurTransformation.java:95:        return o instanceof SupportRSBlurTransformation &&
/components\transformations\SupportRSBlurTransformation.java:96:                ((SupportRSBlurTransformation) o).radius == radius &&
/components\transformations\SupportRSBlurTransformation.java:97:                ((SupportRSBlurTransformation) o).sampling == sampling;
/components\transformations\SupportRSBlurTransformation.java:98:    }
/components\transformations\SupportRSBlurTransformation.java:100:    @Override
/components\transformations\SupportRSBlurTransformation.java:101:    public int hashCode() {
/components\transformations\SupportRSBlurTransformation.java:102:        return ID.hashCode() + radius * 1000 + sampling * 10;
/components\transformations\SupportRSBlurTransformation.java:103:    }
/components\transformations\SupportRSBlurTransformation.java:105:    @Override
/components\transformations\SupportRSBlurTransformation.java:106:    public void updateDiskCacheKey(@NonNull MessageDigest messageDigest) {
/components\transformations\SupportRSBlurTransformation.java:107:        messageDigest.update((ID + radius + sampling).getBytes(CHARSET));
/components\transformations\SupportRSBlurTransformation.java:108:    }
/components\transformations\SupportRSBlurTransformation.java:109:}
/components\transformations\internal\FastBlur.java:1:package com.huanchengfly.tieba.post.components.transformations.internal;
/components\transformations\internal\FastBlur.java:3:import android.graphics.Bitmap;
/components\transformations\internal\FastBlur.java:5:/**
/components\transformations\internal\FastBlur.java:6: * Copyright (C) 2019 Wasabeef
/components\transformations\internal\FastBlur.java:7: * <p>
/components\transformations\internal\FastBlur.java:8: * Licensed under the Apache License, Version 2.0 (the "License");
/components\transformations\internal\FastBlur.java:9: * you may not use this file except in compliance with the License.
/components\transformations\internal\FastBlur.java:10: * You may obtain a copy of the License at
/components\transformations\internal\FastBlur.java:11: * <p>
/components\transformations\internal\FastBlur.java:12: * http://www.apache.org/licenses/LICENSE-2.0
/components\transformations\internal\FastBlur.java:13: * <p>
/components\transformations\internal\FastBlur.java:14: * Unless required by applicable law or agreed to in writing, software
/components\transformations\internal\FastBlur.java:15: * distributed under the License is distributed on an "AS IS" BASIS,
/components\transformations\internal\FastBlur.java:16: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/components\transformations\internal\FastBlur.java:17: * See the License for the specific language governing permissions and
/components\transformations\internal\FastBlur.java:18: * limitations under the License.
/components\transformations\internal\FastBlur.java:19: */
/components\transformations\internal\FastBlur.java:21:public class FastBlur {
/components\transformations\internal\FastBlur.java:23:    public static Bitmap blur(Bitmap sentBitmap, int radius, boolean canReuseInBitmap) {
/components\transformations\internal\FastBlur.java:25:        // Stack Blur v1.0 from
/components\transformations\internal\FastBlur.java:26:        // http://www.quasimondo.com/StackBlurForCanvas/StackBlurDemo.html
/components\transformations\internal\FastBlur.java:27:        //
/components\transformations\internal\FastBlur.java:28:        // Java Author: Mario Klingemann <mario at quasimondo.com>
/components\transformations\internal\FastBlur.java:29:        // http://incubator.quasimondo.com
/components\transformations\internal\FastBlur.java:30:        // created Feburary 29, 2004
/components\transformations\internal\FastBlur.java:31:        // Android port : Yahel Bouaziz <yahel at kayenko.com>
/components\transformations\internal\FastBlur.java:32:        // http://www.kayenko.com
/components\transformations\internal\FastBlur.java:33:        // ported april 5th, 2012
/components\transformations\internal\FastBlur.java:35:        // This is a compromise between Gaussian Blur and Box blur
/components\transformations\internal\FastBlur.java:36:        // It creates much better looking blurs than Box Blur, but is
/components\transformations\internal\FastBlur.java:37:        // 7x faster than my Gaussian Blur implementation.
/components\transformations\internal\FastBlur.java:38:        //
/components\transformations\internal\FastBlur.java:39:        // I called it Stack Blur because this describes best how this
/components\transformations\internal\FastBlur.java:40:        // filter works internally: it creates a kind of moving stack
/components\transformations\internal\FastBlur.java:41:        // of colors whilst scanning through the image. Thereby it
/components\transformations\internal\FastBlur.java:42:        // just has to add one new block of color to the right side
/components\transformations\internal\FastBlur.java:43:        // of the stack and remove the leftmost color. The remaining
/components\transformations\internal\FastBlur.java:44:        // colors on the topmost layer of the stack are either added on
/components\transformations\internal\FastBlur.java:45:        // or reduced by one, depending on if they are on the right or
/components\transformations\internal\FastBlur.java:46:        // on the left side of the stack.
/components\transformations\internal\FastBlur.java:47:        //
/components\transformations\internal\FastBlur.java:48:        // If you are using this algorithm in your code please add
/components\transformations\internal\FastBlur.java:49:        // the following line:
/components\transformations\internal\FastBlur.java:50:        //
/components\transformations\internal\FastBlur.java:51:        // Stack Blur Algorithm by Mario Klingemann <mario@quasimondo.com>
/components\transformations\internal\FastBlur.java:53:        Bitmap bitmap;
/components\transformations\internal\FastBlur.java:54:        if (canReuseInBitmap) {
/components\transformations\internal\FastBlur.java:55:            bitmap = sentBitmap;
/components\transformations\internal\FastBlur.java:56:        } else {
/components\transformations\internal\FastBlur.java:57:            bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);
/components\transformations\internal\FastBlur.java:58:        }
/components\transformations\internal\FastBlur.java:60:        if (radius < 1) {
/components\transformations\internal\FastBlur.java:61:            return (null);
/components\transformations\internal\FastBlur.java:62:        }
/components\transformations\internal\FastBlur.java:64:        int w = bitmap.getWidth();
/components\transformations\internal\FastBlur.java:65:        int h = bitmap.getHeight();
/components\transformations\internal\FastBlur.java:67:        int[] pix = new int[w * h];
/components\transformations\internal\FastBlur.java:68:        bitmap.getPixels(pix, 0, w, 0, 0, w, h);
/components\transformations\internal\FastBlur.java:70:        int wm = w - 1;
/components\transformations\internal\FastBlur.java:71:        int hm = h - 1;
/components\transformations\internal\FastBlur.java:72:        int wh = w * h;
/components\transformations\internal\FastBlur.java:73:        int div = radius + radius + 1;
/components\transformations\internal\FastBlur.java:75:        int[] r = new int[wh];
/components\transformations\internal\FastBlur.java:76:        int[] g = new int[wh];
/components\transformations\internal\FastBlur.java:77:        int[] b = new int[wh];
/components\transformations\internal\FastBlur.java:78:        int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;
/components\transformations\internal\FastBlur.java:79:        int[] vmin = new int[Math.max(w, h)];
/components\transformations\internal\FastBlur.java:81:        int divsum = (div + 1) >> 1;
/components\transformations\internal\FastBlur.java:82:        divsum *= divsum;
/components\transformations\internal\FastBlur.java:83:        int[] dv = new int[256 * divsum];
/components\transformations\internal\FastBlur.java:84:        for (i = 0; i < 256 * divsum; i++) {
/components\transformations\internal\FastBlur.java:85:            dv[i] = (i / divsum);
/components\transformations\internal\FastBlur.java:86:        }
/components\transformations\internal\FastBlur.java:88:        yw = yi = 0;
/components\transformations\internal\FastBlur.java:90:        int[][] stack = new int[div][3];
/components\transformations\internal\FastBlur.java:91:        int stackpointer;
/components\transformations\internal\FastBlur.java:92:        int stackstart;
/components\transformations\internal\FastBlur.java:93:        int[] sir;
/components\transformations\internal\FastBlur.java:94:        int rbs;
/components\transformations\internal\FastBlur.java:95:        int r1 = radius + 1;
/components\transformations\internal\FastBlur.java:96:        int routsum, goutsum, boutsum;
/components\transformations\internal\FastBlur.java:97:        int rinsum, ginsum, binsum;
/components\transformations\internal\FastBlur.java:99:        for (y = 0; y < h; y++) {
/components\transformations\internal\FastBlur.java:100:            rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;
/components\transformations\internal\FastBlur.java:101:            for (i = -radius; i <= radius; i++) {
/components\transformations\internal\FastBlur.java:102:                p = pix[yi + Math.min(wm, Math.max(i, 0))];
/components\transformations\internal\FastBlur.java:103:                sir = stack[i + radius];
/components\transformations\internal\FastBlur.java:104:                sir[0] = (p & 0xff0000) >> 16;
/components\transformations\internal\FastBlur.java:105:                sir[1] = (p & 0x00ff00) >> 8;
/components\transformations\internal\FastBlur.java:106:                sir[2] = (p & 0x0000ff);
/components\transformations\internal\FastBlur.java:107:                rbs = r1 - Math.abs(i);
/components\transformations\internal\FastBlur.java:108:                rsum += sir[0] * rbs;
/components\transformations\internal\FastBlur.java:109:                gsum += sir[1] * rbs;
/components\transformations\internal\FastBlur.java:110:                bsum += sir[2] * rbs;
/components\transformations\internal\FastBlur.java:111:                if (i > 0) {
/components\transformations\internal\FastBlur.java:112:                    rinsum += sir[0];
/components\transformations\internal\FastBlur.java:113:                    ginsum += sir[1];
/components\transformations\internal\FastBlur.java:114:                    binsum += sir[2];
/components\transformations\internal\FastBlur.java:115:                } else {
/components\transformations\internal\FastBlur.java:116:                    routsum += sir[0];
/components\transformations\internal\FastBlur.java:117:                    goutsum += sir[1];
/components\transformations\internal\FastBlur.java:118:                    boutsum += sir[2];
/components\transformations\internal\FastBlur.java:119:                }
/components\transformations\internal\FastBlur.java:120:            }
/components\transformations\internal\FastBlur.java:121:            stackpointer = radius;
/components\transformations\internal\FastBlur.java:123:            for (x = 0; x < w; x++) {
/components\transformations\internal\FastBlur.java:125:                r[yi] = dv[rsum];
/components\transformations\internal\FastBlur.java:126:                g[yi] = dv[gsum];
/components\transformations\internal\FastBlur.java:127:                b[yi] = dv[bsum];
/components\transformations\internal\FastBlur.java:129:                rsum -= routsum;
/components\transformations\internal\FastBlur.java:130:                gsum -= goutsum;
/components\transformations\internal\FastBlur.java:131:                bsum -= boutsum;
/components\transformations\internal\FastBlur.java:133:                stackstart = stackpointer - radius + div;
/components\transformations\internal\FastBlur.java:134:                sir = stack[stackstart % div];
/components\transformations\internal\FastBlur.java:136:                routsum -= sir[0];
/components\transformations\internal\FastBlur.java:137:                goutsum -= sir[1];
/components\transformations\internal\FastBlur.java:138:                boutsum -= sir[2];
/components\transformations\internal\FastBlur.java:140:                if (y == 0) {
/components\transformations\internal\FastBlur.java:141:                    vmin[x] = Math.min(x + radius + 1, wm);
/components\transformations\internal\FastBlur.java:142:                }
/components\transformations\internal\FastBlur.java:143:                p = pix[yw + vmin[x]];
/components\transformations\internal\FastBlur.java:145:                sir[0] = (p & 0xff0000) >> 16;
/components\transformations\internal\FastBlur.java:146:                sir[1] = (p & 0x00ff00) >> 8;
/components\transformations\internal\FastBlur.java:147:                sir[2] = (p & 0x0000ff);
/components\transformations\internal\FastBlur.java:149:                rinsum += sir[0];
/components\transformations\internal\FastBlur.java:150:                ginsum += sir[1];
/components\transformations\internal\FastBlur.java:151:                binsum += sir[2];
/components\transformations\internal\FastBlur.java:153:                rsum += rinsum;
/components\transformations\internal\FastBlur.java:154:                gsum += ginsum;
/components\transformations\internal\FastBlur.java:155:                bsum += binsum;
/components\transformations\internal\FastBlur.java:157:                stackpointer = (stackpointer + 1) % div;
/components\transformations\internal\FastBlur.java:158:                sir = stack[(stackpointer) % div];
/components\transformations\internal\FastBlur.java:160:                routsum += sir[0];
/components\transformations\internal\FastBlur.java:161:                goutsum += sir[1];
/components\transformations\internal\FastBlur.java:162:                boutsum += sir[2];
/components\transformations\internal\FastBlur.java:164:                rinsum -= sir[0];
/components\transformations\internal\FastBlur.java:165:                ginsum -= sir[1];
/components\transformations\internal\FastBlur.java:166:                binsum -= sir[2];
/components\transformations\internal\FastBlur.java:168:                yi++;
/components\transformations\internal\FastBlur.java:169:            }
/components\transformations\internal\FastBlur.java:170:            yw += w;
/components\transformations\internal\FastBlur.java:171:        }
/components\transformations\internal\FastBlur.java:172:        for (x = 0; x < w; x++) {
/components\transformations\internal\FastBlur.java:173:            rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;
/components\transformations\internal\FastBlur.java:174:            yp = -radius * w;
/components\transformations\internal\FastBlur.java:175:            for (i = -radius; i <= radius; i++) {
/components\transformations\internal\FastBlur.java:176:                yi = Math.max(0, yp) + x;
/components\transformations\internal\FastBlur.java:178:                sir = stack[i + radius];
/components\transformations\internal\FastBlur.java:180:                sir[0] = r[yi];
/components\transformations\internal\FastBlur.java:181:                sir[1] = g[yi];
/components\transformations\internal\FastBlur.java:182:                sir[2] = b[yi];
/components\transformations\internal\FastBlur.java:184:                rbs = r1 - Math.abs(i);
/components\transformations\internal\FastBlur.java:186:                rsum += r[yi] * rbs;
/components\transformations\internal\FastBlur.java:187:                gsum += g[yi] * rbs;
/components\transformations\internal\FastBlur.java:188:                bsum += b[yi] * rbs;
/components\transformations\internal\FastBlur.java:190:                if (i > 0) {
/components\transformations\internal\FastBlur.java:191:                    rinsum += sir[0];
/components\transformations\internal\FastBlur.java:192:                    ginsum += sir[1];
/components\transformations\internal\FastBlur.java:193:                    binsum += sir[2];
/components\transformations\internal\FastBlur.java:194:                } else {
/components\transformations\internal\FastBlur.java:195:                    routsum += sir[0];
/components\transformations\internal\FastBlur.java:196:                    goutsum += sir[1];
/components\transformations\internal\FastBlur.java:197:                    boutsum += sir[2];
/components\transformations\internal\FastBlur.java:198:                }
/components\transformations\internal\FastBlur.java:200:                if (i < hm) {
/components\transformations\internal\FastBlur.java:201:                    yp += w;
/components\transformations\internal\FastBlur.java:202:                }
/components\transformations\internal\FastBlur.java:203:            }
/components\transformations\internal\FastBlur.java:204:            yi = x;
/components\transformations\internal\FastBlur.java:205:            stackpointer = radius;
/components\transformations\internal\FastBlur.java:206:            for (y = 0; y < h; y++) {
/components\transformations\internal\FastBlur.java:207:                // Preserve alpha channel: ( 0xff000000 & pix[yi] )
/components\transformations\internal\FastBlur.java:208:                pix[yi] = (0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8) | dv[bsum];
/components\transformations\internal\FastBlur.java:210:                rsum -= routsum;
/components\transformations\internal\FastBlur.java:211:                gsum -= goutsum;
/components\transformations\internal\FastBlur.java:212:                bsum -= boutsum;
/components\transformations\internal\FastBlur.java:214:                stackstart = stackpointer - radius + div;
/components\transformations\internal\FastBlur.java:215:                sir = stack[stackstart % div];
/components\transformations\internal\FastBlur.java:217:                routsum -= sir[0];
/components\transformations\internal\FastBlur.java:218:                goutsum -= sir[1];
/components\transformations\internal\FastBlur.java:219:                boutsum -= sir[2];
/components\transformations\internal\FastBlur.java:221:                if (x == 0) {
/components\transformations\internal\FastBlur.java:222:                    vmin[y] = Math.min(y + r1, hm) * w;
/components\transformations\internal\FastBlur.java:223:                }
/components\transformations\internal\FastBlur.java:224:                p = x + vmin[y];
/components\transformations\internal\FastBlur.java:226:                sir[0] = r[p];
/components\transformations\internal\FastBlur.java:227:                sir[1] = g[p];
/components\transformations\internal\FastBlur.java:228:                sir[2] = b[p];
/components\transformations\internal\FastBlur.java:230:                rinsum += sir[0];
/components\transformations\internal\FastBlur.java:231:                ginsum += sir[1];
/components\transformations\internal\FastBlur.java:232:                binsum += sir[2];
/components\transformations\internal\FastBlur.java:234:                rsum += rinsum;
/components\transformations\internal\FastBlur.java:235:                gsum += ginsum;
/components\transformations\internal\FastBlur.java:236:                bsum += binsum;
/components\transformations\internal\FastBlur.java:238:                stackpointer = (stackpointer + 1) % div;
/components\transformations\internal\FastBlur.java:239:                sir = stack[stackpointer];
/components\transformations\internal\FastBlur.java:241:                routsum += sir[0];
/components\transformations\internal\FastBlur.java:242:                goutsum += sir[1];
/components\transformations\internal\FastBlur.java:243:                boutsum += sir[2];
/components\transformations\internal\FastBlur.java:245:                rinsum -= sir[0];
/components\transformations\internal\FastBlur.java:246:                ginsum -= sir[1];
/components\transformations\internal\FastBlur.java:247:                binsum -= sir[2];
/components\transformations\internal\FastBlur.java:249:                yi += w;
/components\transformations\internal\FastBlur.java:250:            }
/components\transformations\internal\FastBlur.java:251:        }
/components\transformations\internal\FastBlur.java:253:        bitmap.setPixels(pix, 0, w, 0, 0, w, h);
/components\transformations\internal\FastBlur.java:255:        return (bitmap);
/components\transformations\internal\FastBlur.java:256:    }
/components\transformations\internal\FastBlur.java:257:}/components\transformations\internal\RSBlur.java:1:package com.huanchengfly.tieba.post.components.transformations.internal;
/components\transformations\internal\RSBlur.java:3:import android.annotation.TargetApi;
/components\transformations\internal\RSBlur.java:4:import android.content.Context;
/components\transformations\internal\RSBlur.java:5:import android.graphics.Bitmap;
/components\transformations\internal\RSBlur.java:6:import android.os.Build;
/components\transformations\internal\RSBlur.java:7:import android.renderscript.Allocation;
/components\transformations\internal\RSBlur.java:8:import android.renderscript.Element;
/components\transformations\internal\RSBlur.java:9:import android.renderscript.RSRuntimeException;
/components\transformations\internal\RSBlur.java:10:import android.renderscript.RenderScript;
/components\transformations\internal\RSBlur.java:11:import android.renderscript.ScriptIntrinsicBlur;
/components\transformations\internal\RSBlur.java:13:/**
/components\transformations\internal\RSBlur.java:14: * Copyright (C) 2019 Wasabeef
/components\transformations\internal\RSBlur.java:15: * <p>
/components\transformations\internal\RSBlur.java:16: * Licensed under the Apache License, Version 2.0 (the "License");
/components\transformations\internal\RSBlur.java:17: * you may not use this file except in compliance with the License.
/components\transformations\internal\RSBlur.java:18: * You may obtain a copy of the License at
/components\transformations\internal\RSBlur.java:19: * <p>
/components\transformations\internal\RSBlur.java:20: * http://www.apache.org/licenses/LICENSE-2.0
/components\transformations\internal\RSBlur.java:21: * <p>
/components\transformations\internal\RSBlur.java:22: * Unless required by applicable law or agreed to in writing, software
/components\transformations\internal\RSBlur.java:23: * distributed under the License is distributed on an "AS IS" BASIS,
/components\transformations\internal\RSBlur.java:24: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/components\transformations\internal\RSBlur.java:25: * See the License for the specific language governing permissions and
/components\transformations\internal\RSBlur.java:26: * limitations under the License.
/components\transformations\internal\RSBlur.java:27: */
/components\transformations\internal\RSBlur.java:29:public class RSBlur {
/components\transformations\internal\RSBlur.java:31:    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2)
/components\transformations\internal\RSBlur.java:32:    public static Bitmap blur(Context context, Bitmap bitmap, int radius) throws RSRuntimeException {
/components\transformations\internal\RSBlur.java:33:        RenderScript rs = null;
/components\transformations\internal\RSBlur.java:34:        Allocation input = null;
/components\transformations\internal\RSBlur.java:35:        Allocation output = null;
/components\transformations\internal\RSBlur.java:36:        ScriptIntrinsicBlur blur = null;
/components\transformations\internal\RSBlur.java:37:        try {
/components\transformations\internal\RSBlur.java:38:            rs = RenderScript.create(context);
/components\transformations\internal\RSBlur.java:39:            rs.setMessageHandler(new RenderScript.RSMessageHandler());
/components\transformations\internal\RSBlur.java:40:            input = Allocation.createFromBitmap(rs, bitmap, Allocation.MipmapControl.MIPMAP_NONE,
/components\transformations\internal\RSBlur.java:41:                    Allocation.USAGE_SCRIPT);
/components\transformations\internal\RSBlur.java:42:            output = Allocation.createTyped(rs, input.getType());
/components\transformations\internal\RSBlur.java:43:            blur = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));
/components\transformations\internal\RSBlur.java:45:            blur.setInput(input);
/components\transformations\internal\RSBlur.java:46:            blur.setRadius(radius);
/components\transformations\internal\RSBlur.java:47:            blur.forEach(output);
/components\transformations\internal\RSBlur.java:48:            output.copyTo(bitmap);
/components\transformations\internal\RSBlur.java:49:        } finally {
/components\transformations\internal\RSBlur.java:50:            if (rs != null) {
/components\transformations\internal\RSBlur.java:51:                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
/components\transformations\internal\RSBlur.java:52:                    RenderScript.releaseAllContexts();
/components\transformations\internal\RSBlur.java:53:                } else {
/components\transformations\internal\RSBlur.java:54:                    rs.destroy();
/components\transformations\internal\RSBlur.java:55:                }
/components\transformations\internal\RSBlur.java:56:            }
/components\transformations\internal\RSBlur.java:57:            if (input != null) {
/components\transformations\internal\RSBlur.java:58:                input.destroy();
/components\transformations\internal\RSBlur.java:59:            }
/components\transformations\internal\RSBlur.java:60:            if (output != null) {
/components\transformations\internal\RSBlur.java:61:                output.destroy();
/components\transformations\internal\RSBlur.java:62:            }
/components\transformations\internal\RSBlur.java:63:            if (blur != null) {
/components\transformations\internal\RSBlur.java:64:                blur.destroy();
/components\transformations\internal\RSBlur.java:65:            }
/components\transformations\internal\RSBlur.java:66:        }
/components\transformations\internal\RSBlur.java:68:        return bitmap;
/components\transformations\internal\RSBlur.java:69:    }
/components\transformations\internal\RSBlur.java:70:}
/components\transformations\internal\SupportRSBlur.java:1:package com.huanchengfly.tieba.post.components.transformations.internal;
/components\transformations\internal\SupportRSBlur.java:3:import android.annotation.TargetApi;
/components\transformations\internal\SupportRSBlur.java:4:import android.content.Context;
/components\transformations\internal\SupportRSBlur.java:5:import android.graphics.Bitmap;
/components\transformations\internal\SupportRSBlur.java:6:import android.os.Build;
/components\transformations\internal\SupportRSBlur.java:7:import android.renderscript.Allocation;
/components\transformations\internal\SupportRSBlur.java:8:import android.renderscript.Element;
/components\transformations\internal\SupportRSBlur.java:9:import android.renderscript.RSRuntimeException;
/components\transformations\internal\SupportRSBlur.java:10:import android.renderscript.RenderScript;
/components\transformations\internal\SupportRSBlur.java:11:import android.renderscript.ScriptIntrinsicBlur;
/components\transformations\internal\SupportRSBlur.java:13:/**
/components\transformations\internal\SupportRSBlur.java:14: * Copyright (C) 2019 Wasabeef
/components\transformations\internal\SupportRSBlur.java:15: * <p>
/components\transformations\internal\SupportRSBlur.java:16: * Licensed under the Apache License, Version 2.0 (the "License");
/components\transformations\internal\SupportRSBlur.java:17: * you may not use this file except in compliance with the License.
/components\transformations\internal\SupportRSBlur.java:18: * You may obtain a copy of the License at
/components\transformations\internal\SupportRSBlur.java:19: * <p>
/components\transformations\internal\SupportRSBlur.java:20: * http://www.apache.org/licenses/LICENSE-2.0
/components\transformations\internal\SupportRSBlur.java:21: * <p>
/components\transformations\internal\SupportRSBlur.java:22: * Unless required by applicable law or agreed to in writing, software
/components\transformations\internal\SupportRSBlur.java:23: * distributed under the License is distributed on an "AS IS" BASIS,
/components\transformations\internal\SupportRSBlur.java:24: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/components\transformations\internal\SupportRSBlur.java:25: * See the License for the specific language governing permissions and
/components\transformations\internal\SupportRSBlur.java:26: * limitations under the License.
/components\transformations\internal\SupportRSBlur.java:27: */
/components\transformations\internal\SupportRSBlur.java:29:public class SupportRSBlur {
/components\transformations\internal\SupportRSBlur.java:31:    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2)
/components\transformations\internal\SupportRSBlur.java:32:    public static Bitmap blur(Context context, Bitmap bitmap, int radius) throws RSRuntimeException {
/components\transformations\internal\SupportRSBlur.java:33:        RenderScript rs = null;
/components\transformations\internal\SupportRSBlur.java:34:        Allocation input = null;
/components\transformations\internal\SupportRSBlur.java:35:        Allocation output = null;
/components\transformations\internal\SupportRSBlur.java:36:        ScriptIntrinsicBlur blur = null;
/components\transformations\internal\SupportRSBlur.java:37:        try {
/components\transformations\internal\SupportRSBlur.java:38:            rs = RenderScript.create(context);
/components\transformations\internal\SupportRSBlur.java:39:            rs.setMessageHandler(new RenderScript.RSMessageHandler());
/components\transformations\internal\SupportRSBlur.java:40:            input = Allocation.createFromBitmap(rs, bitmap, Allocation.MipmapControl.MIPMAP_NONE,
/components\transformations\internal\SupportRSBlur.java:41:                    Allocation.USAGE_SCRIPT);
/components\transformations\internal\SupportRSBlur.java:42:            output = Allocation.createTyped(rs, input.getType());
/components\transformations\internal\SupportRSBlur.java:43:            blur = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));
/components\transformations\internal\SupportRSBlur.java:45:            blur.setInput(input);
/components\transformations\internal\SupportRSBlur.java:46:            blur.setRadius(radius);
/components\transformations\internal\SupportRSBlur.java:47:            blur.forEach(output);
/components\transformations\internal\SupportRSBlur.java:48:            output.copyTo(bitmap);
/components\transformations\internal\SupportRSBlur.java:49:        } finally {
/components\transformations\internal\SupportRSBlur.java:50:            if (rs != null) {
/components\transformations\internal\SupportRSBlur.java:51:                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
/components\transformations\internal\SupportRSBlur.java:52:                    RenderScript.releaseAllContexts();
/components\transformations\internal\SupportRSBlur.java:53:                } else {
/components\transformations\internal\SupportRSBlur.java:54:                    rs.destroy();
/components\transformations\internal\SupportRSBlur.java:55:                }
/components\transformations\internal\SupportRSBlur.java:56:            }
/components\transformations\internal\SupportRSBlur.java:57:            if (input != null) {
/components\transformations\internal\SupportRSBlur.java:58:                input.destroy();
/components\transformations\internal\SupportRSBlur.java:59:            }
/components\transformations\internal\SupportRSBlur.java:60:            if (output != null) {
/components\transformations\internal\SupportRSBlur.java:61:                output.destroy();
/components\transformations\internal\SupportRSBlur.java:62:            }
/components\transformations\internal\SupportRSBlur.java:63:            if (blur != null) {
/components\transformations\internal\SupportRSBlur.java:64:                blur.destroy();
/components\transformations\internal\SupportRSBlur.java:65:            }
/components\transformations\internal\SupportRSBlur.java:66:        }
/components\transformations\internal\SupportRSBlur.java:68:        return bitmap;
/components\transformations\internal\SupportRSBlur.java:69:    }
/components\transformations\internal\SupportRSBlur.java:70:}
/components\transformations\internal\Utils.java:1:package com.huanchengfly.tieba.post.components.transformations.internal;
/components\transformations\internal\Utils.java:3:import android.content.Context;
/components\transformations\internal\Utils.java:4:import android.content.res.Resources;
/components\transformations\internal\Utils.java:5:import android.graphics.drawable.Drawable;
/components\transformations\internal\Utils.java:6:import android.os.Build;
/components\transformations\internal\Utils.java:8:/**
/components\transformations\internal\Utils.java:9: * Copyright (C) 2019 Wasabeef
/components\transformations\internal\Utils.java:10: * <p>
/components\transformations\internal\Utils.java:11: * Licensed under the Apache License, Version 2.0 (the "License");
/components\transformations\internal\Utils.java:12: * you may not use this file except in compliance with the License.
/components\transformations\internal\Utils.java:13: * You may obtain a copy of the License at
/components\transformations\internal\Utils.java:14: * <p>
/components\transformations\internal\Utils.java:15: * http://www.apache.org/licenses/LICENSE-2.0
/components\transformations\internal\Utils.java:16: * <p>
/components\transformations\internal\Utils.java:17: * Unless required by applicable law or agreed to in writing, software
/components\transformations\internal\Utils.java:18: * distributed under the License is distributed on an "AS IS" BASIS,
/components\transformations\internal\Utils.java:19: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/components\transformations\internal\Utils.java:20: * See the License for the specific language governing permissions and
/components\transformations\internal\Utils.java:21: * limitations under the License.
/components\transformations\internal\Utils.java:22: */
/components\transformations\internal\Utils.java:24:public final class Utils {
/components\transformations\internal\Utils.java:26:    private Utils() {
/components\transformations\internal\Utils.java:27:        // Utility class.
/components\transformations\internal\Utils.java:28:    }
/components\transformations\internal\Utils.java:30:    public static Drawable getMaskDrawable(Context context, int maskId) {
/components\transformations\internal\Utils.java:31:        Drawable drawable;
/components\transformations\internal\Utils.java:32:        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
/components\transformations\internal\Utils.java:33:            drawable = context.getDrawable(maskId);
/components\transformations\internal\Utils.java:34:        } else {
/components\transformations\internal\Utils.java:35:            drawable = context.getResources().getDrawable(maskId);
/components\transformations\internal\Utils.java:36:        }
/components\transformations\internal\Utils.java:38:        if (drawable == null) {
/components\transformations\internal\Utils.java:39:            throw new IllegalArgumentException("maskId is invalid");
/components\transformations\internal\Utils.java:40:        }
/components\transformations\internal\Utils.java:42:        return drawable;
/components\transformations\internal\Utils.java:43:    }
/components\transformations\internal\Utils.java:45:    public static int toDp(int px) {
/components\transformations\internal\Utils.java:46:        return px * (int) Resources.getSystem().getDisplayMetrics().density;
/components\transformations\internal\Utils.java:47:    }
/components\transformations\internal\Utils.java:48:}
/fragments\BaseBottomSheetDialogFragment.java:1:package com.huanchengfly.tieba.post.fragments;
/fragments\BaseBottomSheetDialogFragment.java:3:import android.annotation.TargetApi;
/fragments\BaseBottomSheetDialogFragment.java:4:import android.app.Activity;
/fragments\BaseBottomSheetDialogFragment.java:5:import android.app.Dialog;
/fragments\BaseBottomSheetDialogFragment.java:6:import android.content.Context;
/fragments\BaseBottomSheetDialogFragment.java:7:import android.content.res.Resources;
/fragments\BaseBottomSheetDialogFragment.java:8:import android.graphics.Color;
/fragments\BaseBottomSheetDialogFragment.java:9:import android.os.Build;
/fragments\BaseBottomSheetDialogFragment.java:10:import android.os.Bundle;
/fragments\BaseBottomSheetDialogFragment.java:11:import android.view.View;
/fragments\BaseBottomSheetDialogFragment.java:12:import android.view.ViewGroup;
/fragments\BaseBottomSheetDialogFragment.java:13:import android.view.WindowManager;
/fragments\BaseBottomSheetDialogFragment.java:15:import androidx.annotation.CallSuper;
/fragments\BaseBottomSheetDialogFragment.java:16:import androidx.annotation.NonNull;
/fragments\BaseBottomSheetDialogFragment.java:17:import androidx.coordinatorlayout.widget.CoordinatorLayout;
/fragments\BaseBottomSheetDialogFragment.java:19:import com.google.android.material.bottomsheet.BottomSheetBehavior;
/fragments\BaseBottomSheetDialogFragment.java:20:import com.google.android.material.bottomsheet.BottomSheetDialog;
/fragments\BaseBottomSheetDialogFragment.java:21:import com.google.android.material.bottomsheet.BottomSheetDialogFragment;
/fragments\BaseBottomSheetDialogFragment.java:22:import com.huanchengfly.tieba.post.R;
/fragments\BaseBottomSheetDialogFragment.java:23:import com.huanchengfly.tieba.post.utils.Util;
/fragments\BaseBottomSheetDialogFragment.java:25:import butterknife.ButterKnife;
/fragments\BaseBottomSheetDialogFragment.java:26:import butterknife.Unbinder;
/fragments\BaseBottomSheetDialogFragment.java:28:public abstract class BaseBottomSheetDialogFragment extends BottomSheetDialogFragment {
/fragments\BaseBottomSheetDialogFragment.java:29:    public static final String TAG = "BaseBottomSheetDialog";
/fragments\BaseBottomSheetDialogFragment.java:30:    protected BottomSheetDialog dialog;
/fragments\BaseBottomSheetDialogFragment.java:31:    Unbinder mUnbinder;
/fragments\BaseBottomSheetDialogFragment.java:32:    View rootView;
/fragments\BaseBottomSheetDialogFragment.java:33:    BottomSheetBehavior mBehavior;
/fragments\BaseBottomSheetDialogFragment.java:34:    private Context attachContext;
/fragments\BaseBottomSheetDialogFragment.java:36:    public BaseBottomSheetDialogFragment() {
/fragments\BaseBottomSheetDialogFragment.java:37:    }
/fragments\BaseBottomSheetDialogFragment.java:39:    @TargetApi(23)
/fragments\BaseBottomSheetDialogFragment.java:40:    @Override
/fragments\BaseBottomSheetDialogFragment.java:41:    public void onAttach(Context context) {
/fragments\BaseBottomSheetDialogFragment.java:42:        super.onAttach(context);
/fragments\BaseBottomSheetDialogFragment.java:43:        onAttachToContext(context);
/fragments\BaseBottomSheetDialogFragment.java:44:    }
/fragments\BaseBottomSheetDialogFragment.java:46:    @SuppressWarnings("deprecation")
/fragments\BaseBottomSheetDialogFragment.java:47:    @Override
/fragments\BaseBottomSheetDialogFragment.java:48:    public void onAttach(Activity activity) {
/fragments\BaseBottomSheetDialogFragment.java:49:        super.onAttach(activity);
/fragments\BaseBottomSheetDialogFragment.java:50:        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
/fragments\BaseBottomSheetDialogFragment.java:51:            onAttachToContext(activity);
/fragments\BaseBottomSheetDialogFragment.java:52:        }
/fragments\BaseBottomSheetDialogFragment.java:53:    }
/fragments\BaseBottomSheetDialogFragment.java:55:    @CallSuper
/fragments\BaseBottomSheetDialogFragment.java:56:    private void onAttachToContext(Context context) {
/fragments\BaseBottomSheetDialogFragment.java:57:        attachContext = context;
/fragments\BaseBottomSheetDialogFragment.java:58:    }
/fragments\BaseBottomSheetDialogFragment.java:60:    @NonNull
/fragments\BaseBottomSheetDialogFragment.java:61:    protected Context getAttachContext() {
/fragments\BaseBottomSheetDialogFragment.java:62:        return attachContext;
/fragments\BaseBottomSheetDialogFragment.java:63:    }
/fragments\BaseBottomSheetDialogFragment.java:65:    protected int getScreenHeight() {
/fragments\BaseBottomSheetDialogFragment.java:66:        return getAttachContext().getResources().getDisplayMetrics().heightPixels;
/fragments\BaseBottomSheetDialogFragment.java:67:    }
/fragments\BaseBottomSheetDialogFragment.java:69:    protected int getStatusBarHeight() {
/fragments\BaseBottomSheetDialogFragment.java:70:        int statusBarHeight = 0;
/fragments\BaseBottomSheetDialogFragment.java:71:        Resources resources = getAttachContext().getResources();
/fragments\BaseBottomSheetDialogFragment.java:72:        int resourceId = resources.getIdentifier("status_bar_height", "dimen", "android");
/fragments\BaseBottomSheetDialogFragment.java:73:        if (resourceId > 0)
/fragments\BaseBottomSheetDialogFragment.java:74:            statusBarHeight = resources.getDimensionPixelSize(resourceId);
/fragments\BaseBottomSheetDialogFragment.java:75:        return statusBarHeight;
/fragments\BaseBottomSheetDialogFragment.java:76:    }
/fragments\BaseBottomSheetDialogFragment.java:78:    @Override
/fragments\BaseBottomSheetDialogFragment.java:79:    public void onStart() {
/fragments\BaseBottomSheetDialogFragment.java:80:        super.onStart();
/fragments\BaseBottomSheetDialogFragment.java:81:        Dialog dialog = getDialog();
/fragments\BaseBottomSheetDialogFragment.java:82:        if (dialog != null) {
/fragments\BaseBottomSheetDialogFragment.java:83:            View bottomSheet = dialog.findViewById(R.id.design_bottom_sheet);
/fragments\BaseBottomSheetDialogFragment.java:84:            bottomSheet.getLayoutParams().height = ViewGroup.LayoutParams.MATCH_PARENT;
/fragments\BaseBottomSheetDialogFragment.java:85:        }
/fragments\BaseBottomSheetDialogFragment.java:86:        final View view = getView();
/fragments\BaseBottomSheetDialogFragment.java:87:        if (view != null) {
/fragments\BaseBottomSheetDialogFragment.java:88:            view.post(() -> {
/fragments\BaseBottomSheetDialogFragment.java:89:                View parent = (View) view.getParent();
/fragments\BaseBottomSheetDialogFragment.java:90:                CoordinatorLayout.LayoutParams params = (CoordinatorLayout.LayoutParams) parent.getLayoutParams();
/fragments\BaseBottomSheetDialogFragment.java:91:                CoordinatorLayout.Behavior behavior = params.getBehavior();
/fragments\BaseBottomSheetDialogFragment.java:92:                BottomSheetBehavior bottomSheetBehavior = (BottomSheetBehavior) behavior;
/fragments\BaseBottomSheetDialogFragment.java:93:                if (bottomSheetBehavior != null)
/fragments\BaseBottomSheetDialogFragment.java:94:                    bottomSheetBehavior.setPeekHeight(view.getMeasuredHeight());
/fragments\BaseBottomSheetDialogFragment.java:95:            });
/fragments\BaseBottomSheetDialogFragment.java:96:        }
/fragments\BaseBottomSheetDialogFragment.java:97:    }
/fragments\BaseBottomSheetDialogFragment.java:99:    protected abstract void initView();
/fragments\BaseBottomSheetDialogFragment.java:101:    public void resetView() {
/fragments\BaseBottomSheetDialogFragment.java:102:    }
/fragments\BaseBottomSheetDialogFragment.java:104:    public boolean isShowing() {
/fragments\BaseBottomSheetDialogFragment.java:105:        return dialog != null && dialog.isShowing();
/fragments\BaseBottomSheetDialogFragment.java:106:    }
/fragments\BaseBottomSheetDialogFragment.java:108:    /**
/fragments\BaseBottomSheetDialogFragment.java:109:     * 使用关闭弹框 是否使用动画可选
/fragments\BaseBottomSheetDialogFragment.java:110:     * 使用动画 同时切换界面Aty会卡顿 建议直接关闭
/fragments\BaseBottomSheetDialogFragment.java:111:     */
/fragments\BaseBottomSheetDialogFragment.java:112:    public void close() {
/fragments\BaseBottomSheetDialogFragment.java:113:        dismiss();
/fragments\BaseBottomSheetDialogFragment.java:114:    }
/fragments\BaseBottomSheetDialogFragment.java:116:    void onCreatedBehavior(BottomSheetBehavior behavior) {
/fragments\BaseBottomSheetDialogFragment.java:117:    }
/fragments\BaseBottomSheetDialogFragment.java:119:    @NonNull
/fragments\BaseBottomSheetDialogFragment.java:120:    @Override
/fragments\BaseBottomSheetDialogFragment.java:121:    public Dialog onCreateDialog(Bundle savedInstanceState) {
/fragments\BaseBottomSheetDialogFragment.java:122:        dialog = new BottomSheetDialog(getAttachContext(), R.style.BottomSheetDialogStyle);
/fragments\BaseBottomSheetDialogFragment.java:123:        if (rootView == null) {
/fragments\BaseBottomSheetDialogFragment.java:124:            rootView = Util.inflate(getAttachContext(), getLayoutId());
/fragments\BaseBottomSheetDialogFragment.java:125:            assert rootView != null;
/fragments\BaseBottomSheetDialogFragment.java:126:            mUnbinder = ButterKnife.bind(this, rootView);
/fragments\BaseBottomSheetDialogFragment.java:127:        }
/fragments\BaseBottomSheetDialogFragment.java:128:        resetView();
/fragments\BaseBottomSheetDialogFragment.java:129:        dialog.setContentView(rootView);
/fragments\BaseBottomSheetDialogFragment.java:130:        mBehavior = dialog.getBehavior();
/fragments\BaseBottomSheetDialogFragment.java:131:        mBehavior.setHideable(true);
/fragments\BaseBottomSheetDialogFragment.java:132:        onCreatedBehavior(mBehavior);
/fragments\BaseBottomSheetDialogFragment.java:133:        if (dialog.getWindow() != null) {
/fragments\BaseBottomSheetDialogFragment.java:134:            if (needFixHeight())
/fragments\BaseBottomSheetDialogFragment.java:135:                dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, getHeight());
/fragments\BaseBottomSheetDialogFragment.java:136:            dialog.getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
/fragments\BaseBottomSheetDialogFragment.java:137:            ((View) rootView.getParent()).setBackgroundColor(Color.TRANSPARENT);
/fragments\BaseBottomSheetDialogFragment.java:138:            dialog.getWindow().findViewById(R.id.design_bottom_sheet).setBackgroundColor(Color.TRANSPARENT);
/fragments\BaseBottomSheetDialogFragment.java:139:        }
/fragments\BaseBottomSheetDialogFragment.java:140:        initView();
/fragments\BaseBottomSheetDialogFragment.java:141:        return dialog;
/fragments\BaseBottomSheetDialogFragment.java:142:    }
/fragments\BaseBottomSheetDialogFragment.java:144:    protected int getHeight() {
/fragments\BaseBottomSheetDialogFragment.java:145:        int screenHeight = getScreenHeight();
/fragments\BaseBottomSheetDialogFragment.java:146:        int statusBarHeight = getStatusBarHeight();
/fragments\BaseBottomSheetDialogFragment.java:147:        int dialogHeight = screenHeight - statusBarHeight;
/fragments\BaseBottomSheetDialogFragment.java:148:        return dialogHeight == 0 ? ViewGroup.LayoutParams.MATCH_PARENT : dialogHeight;
/fragments\BaseBottomSheetDialogFragment.java:149:    }
/fragments\BaseBottomSheetDialogFragment.java:151:    protected abstract int getLayoutId();
/fragments\BaseBottomSheetDialogFragment.java:153:    protected boolean needFixHeight() {
/fragments\BaseBottomSheetDialogFragment.java:154:        return true;
/fragments\BaseBottomSheetDialogFragment.java:155:    }
/fragments\BaseBottomSheetDialogFragment.java:156:}
/fragments\BaseFragment.java:1:package com.huanchengfly.tieba.post.fragments;
/fragments\BaseFragment.java:4:import android.annotation.TargetApi;
/fragments\BaseFragment.java:5:import android.app.Activity;
/fragments\BaseFragment.java:6:import android.content.Context;
/fragments\BaseFragment.java:7:import android.os.Build;
/fragments\BaseFragment.java:8:import android.os.Bundle;
/fragments\BaseFragment.java:9:import android.view.LayoutInflater;
/fragments\BaseFragment.java:10:import android.view.View;
/fragments\BaseFragment.java:11:import android.view.ViewGroup;
/fragments\BaseFragment.java:13:import androidx.annotation.CallSuper;
/fragments\BaseFragment.java:14:import androidx.annotation.NonNull;
/fragments\BaseFragment.java:15:import androidx.annotation.Nullable;
/fragments\BaseFragment.java:16:import androidx.fragment.app.Fragment;
/fragments\BaseFragment.java:18:import com.huanchengfly.tieba.post.interfaces.BackHandledInterface;
/fragments\BaseFragment.java:19:import com.huanchengfly.tieba.post.interfaces.Refreshable;
/fragments\BaseFragment.java:20:import com.huanchengfly.tieba.post.utils.AppPreferencesUtils;
/fragments\BaseFragment.java:21:import com.huanchengfly.tieba.post.utils.HandleBackUtil;
/fragments\BaseFragment.java:23:import org.jetbrains.annotations.NotNull;
/fragments\BaseFragment.java:25:import butterknife.ButterKnife;
/fragments\BaseFragment.java:26:import butterknife.Unbinder;
/fragments\BaseFragment.java:28:/**
/fragments\BaseFragment.java:29: * <p>
/fragments\BaseFragment.java:30: * Fragment基类，封装了懒加载的实现
/fragments\BaseFragment.java:31: * <p>
/fragments\BaseFragment.java:32: * ViewPager + Fragment 情况下，Fragment 的生命周期因 ViewPager 的缓存机制而失去了具体意义
/fragments\BaseFragment.java:33: * 该抽象类自定义新的回调方法，当 Fragment 可见状态改变时会触发的回调方法，和 Fragment 第一次可见时会回调的方法
/fragments\BaseFragment.java:34: *
/fragments\BaseFragment.java:35: * @see #onFragmentVisibleChange(boolean)
/fragments\BaseFragment.java:36: * @see #onFragmentFirstVisible()
/fragments\BaseFragment.java:37: */
/fragments\BaseFragment.java:38:public abstract class BaseFragment extends Fragment implements BackHandledInterface {
/fragments\BaseFragment.java:40:    private static final String TAG = BaseFragment.class.getSimpleName();
/fragments\BaseFragment.java:41:    Unbinder unbinder;
/fragments\BaseFragment.java:42:    private boolean isFragmentVisible;
/fragments\BaseFragment.java:43:    private boolean isReuseView;
/fragments\BaseFragment.java:44:    private boolean isFirstVisible;
/fragments\BaseFragment.java:45:    private View rootView;
/fragments\BaseFragment.java:46:    private Context attachContext;
/fragments\BaseFragment.java:48:    public boolean isFirstVisible() {
/fragments\BaseFragment.java:49:        return isFirstVisible;
/fragments\BaseFragment.java:50:    }
/fragments\BaseFragment.java:52:    protected AppPreferencesUtils getAppPreferences() {
/fragments\BaseFragment.java:53:        return new AppPreferencesUtils(attachContext);
/fragments\BaseFragment.java:54:    }
/fragments\BaseFragment.java:56:    @TargetApi(23)
/fragments\BaseFragment.java:57:    @Override
/fragments\BaseFragment.java:58:    public void onAttach(Context context) {
/fragments\BaseFragment.java:59:        super.onAttach(context);
/fragments\BaseFragment.java:60:        onAttachToContext(context);
/fragments\BaseFragment.java:61:    }
/fragments\BaseFragment.java:63:    @SuppressWarnings("deprecation")
/fragments\BaseFragment.java:64:    @Override
/fragments\BaseFragment.java:65:    public void onAttach(Activity activity) {
/fragments\BaseFragment.java:66:        super.onAttach(activity);
/fragments\BaseFragment.java:67:        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
/fragments\BaseFragment.java:68:            onAttachToContext(activity);
/fragments\BaseFragment.java:69:        }
/fragments\BaseFragment.java:70:    }
/fragments\BaseFragment.java:72:    @CallSuper
/fragments\BaseFragment.java:73:    private void onAttachToContext(Context context) {
/fragments\BaseFragment.java:74:        attachContext = context;
/fragments\BaseFragment.java:75:    }
/fragments\BaseFragment.java:77:    @NonNull
/fragments\BaseFragment.java:78:    public Context getAttachContext() {
/fragments\BaseFragment.java:79:        return attachContext;
/fragments\BaseFragment.java:80:    }
/fragments\BaseFragment.java:82:    @Override
/fragments\BaseFragment.java:83:    public boolean onBackPressed() {
/fragments\BaseFragment.java:84:        return HandleBackUtil.handleBackPress(this);
/fragments\BaseFragment.java:85:    }
/fragments\BaseFragment.java:87:    //setUserVisibleHint()在Fragment创建时会先被调用一次，传入isVisibleToUser = false
/fragments\BaseFragment.java:88:    //如果当前Fragment可见，那么setUserVisibleHint()会再次被调用一次，传入isVisibleToUser = true
/fragments\BaseFragment.java:89:    //如果Fragment从可见->不可见，那么setUserVisibleHint()也会被调用，传入isVisibleToUser = false
/fragments\BaseFragment.java:90:    //总结：setUserVisibleHint()除了Fragment的可见状态发生变化时会被回调外，在new时也会被回调
/fragments\BaseFragment.java:91:    //如果我们需要在Fragment可见与不可见时干点事，用这个的话就会有多余的回调了，那么就需要重新封装一个
/fragments\BaseFragment.java:92:    @Override
/fragments\BaseFragment.java:93:    public void setUserVisibleHint(boolean isVisibleToUser) {
/fragments\BaseFragment.java:94:        super.setUserVisibleHint(isVisibleToUser);
/fragments\BaseFragment.java:95:        //setUserVisibleHint()有可能在fragment的生命周期外被调用
/fragments\BaseFragment.java:96:        if (rootView == null) {
/fragments\BaseFragment.java:97:            return;
/fragments\BaseFragment.java:98:        }
/fragments\BaseFragment.java:99:        if (isFirstVisible && isVisibleToUser) {
/fragments\BaseFragment.java:100:            onFragmentFirstVisible();
/fragments\BaseFragment.java:101:            isFirstVisible = false;
/fragments\BaseFragment.java:102:            isFragmentVisible = true;
/fragments\BaseFragment.java:103:            return;
/fragments\BaseFragment.java:104:        }
/fragments\BaseFragment.java:105:        if (isVisibleToUser) {
/fragments\BaseFragment.java:106:            onFragmentVisibleChange(true);
/fragments\BaseFragment.java:107:            isFragmentVisible = true;
/fragments\BaseFragment.java:108:            return;
/fragments\BaseFragment.java:109:        }
/fragments\BaseFragment.java:110:        if (isFragmentVisible) {
/fragments\BaseFragment.java:111:            isFragmentVisible = false;
/fragments\BaseFragment.java:112:            onFragmentVisibleChange(false);
/fragments\BaseFragment.java:113:        }
/fragments\BaseFragment.java:114:    }
/fragments\BaseFragment.java:116:    @Override
/fragments\BaseFragment.java:117:    public void onCreate(@Nullable Bundle savedInstanceState) {
/fragments\BaseFragment.java:118:        super.onCreate(savedInstanceState);
/fragments\BaseFragment.java:119:        initVariable();
/fragments\BaseFragment.java:120:    }
/fragments\BaseFragment.java:122:    @Override
/fragments\BaseFragment.java:123:    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
/fragments\BaseFragment.java:124:        //如果setUserVisibleHint()在rootView创建前调用时，那么
/fragments\BaseFragment.java:125:        //就等到rootView创建完后才回调onFragmentVisibleChange(true)
/fragments\BaseFragment.java:126:        //保证onFragmentVisibleChange()的回调发生在rootView创建完成之后，以便支持ui操作
/fragments\BaseFragment.java:127:        if (rootView == null) {
/fragments\BaseFragment.java:128:            rootView = view;
/fragments\BaseFragment.java:129:            if (getUserVisibleHint()) {
/fragments\BaseFragment.java:130:                if (isFirstVisible) {
/fragments\BaseFragment.java:131:                    onFragmentFirstVisible();
/fragments\BaseFragment.java:132:                    isFirstVisible = false;
/fragments\BaseFragment.java:133:                    isFragmentVisible = true;
/fragments\BaseFragment.java:134:                    return;
/fragments\BaseFragment.java:135:                }
/fragments\BaseFragment.java:136:                onFragmentVisibleChange(true);
/fragments\BaseFragment.java:137:                isFragmentVisible = true;
/fragments\BaseFragment.java:138:            }
/fragments\BaseFragment.java:139:        }
/fragments\BaseFragment.java:140:        super.onViewCreated(isReuseView ? rootView : view, savedInstanceState);
/fragments\BaseFragment.java:141:    }
/fragments\BaseFragment.java:143:    @Override
/fragments\BaseFragment.java:144:    public void onDestroyView() {
/fragments\BaseFragment.java:145:        super.onDestroyView();
/fragments\BaseFragment.java:146:    }
/fragments\BaseFragment.java:148:    @Override
/fragments\BaseFragment.java:149:    public void onDestroy() {
/fragments\BaseFragment.java:150:        super.onDestroy();
/fragments\BaseFragment.java:151:        initVariable();
/fragments\BaseFragment.java:152:    }
/fragments\BaseFragment.java:154:    private void initVariable() {
/fragments\BaseFragment.java:155:        isFirstVisible = true;
/fragments\BaseFragment.java:156:        isFragmentVisible = false;
/fragments\BaseFragment.java:157:        rootView = null;
/fragments\BaseFragment.java:158:        isReuseView = true;
/fragments\BaseFragment.java:159:    }
/fragments\BaseFragment.java:161:    @NotNull
/fragments\BaseFragment.java:162:    @Override
/fragments\BaseFragment.java:163:    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
/fragments\BaseFragment.java:164:        View inflate = inflater.inflate(getLayoutId(), container, false);
/fragments\BaseFragment.java:165:        unbinder = ButterKnife.bind(this, inflate);
/fragments\BaseFragment.java:166:        return inflate;
/fragments\BaseFragment.java:167:    }
/fragments\BaseFragment.java:169:    abstract int getLayoutId();
/fragments\BaseFragment.java:171:    /**
/fragments\BaseFragment.java:172:     * 设置是否使用 view 的复用，默认开启
/fragments\BaseFragment.java:173:     * view 的复用是指，ViewPager 在销毁和重建 Fragment 时会不断调用 onCreateView() -> onDestroyView()
/fragments\BaseFragment.java:174:     * 之间的生命函数，这样可能会出现重复创建 view 的情况，导致界面上显示多个相同的 Fragment
/fragments\BaseFragment.java:175:     * view 的复用其实就是指保存第一次创建的 view，后面再 onCreateView() 时直接返回第一次创建的 view
/fragments\BaseFragment.java:176:     *
/fragments\BaseFragment.java:177:     * @param isReuse 是否使用 view 的复用
/fragments\BaseFragment.java:178:     */
/fragments\BaseFragment.java:179:    protected void reuseView(boolean isReuse) {
/fragments\BaseFragment.java:180:        isReuseView = isReuse;
/fragments\BaseFragment.java:181:    }
/fragments\BaseFragment.java:183:    /**
/fragments\BaseFragment.java:184:     * 去除 setUserVisibleHint() 多余的回调场景，保证只有当 Fragment 可见状态发生变化时才回调
/fragments\BaseFragment.java:185:     * 回调时机在view创建完后，所以支持ui操作，解决在setUserVisibleHint()里进行ui操作有可能报null异常的问题
/fragments\BaseFragment.java:186:     * <p>
/fragments\BaseFragment.java:187:     * 可在该回调方法里进行一些ui显示与隐藏，比如加载框的显示和隐藏
/fragments\BaseFragment.java:188:     *
/fragments\BaseFragment.java:189:     * @param isVisible true  不可见 -> 可见
/fragments\BaseFragment.java:190:     *                  false 可见  -> 不可见
/fragments\BaseFragment.java:191:     */
/fragments\BaseFragment.java:192:    protected void onFragmentVisibleChange(boolean isVisible) {
/fragments\BaseFragment.java:193:    }
/fragments\BaseFragment.java:195:    /**
/fragments\BaseFragment.java:196:     * 在 Fragment 首次可见时回调，可在这里进行加载数据，保证只在第一次打开 Fragment 时才会加载数据，
/fragments\BaseFragment.java:197:     * 这样就可以防止每次进入都重复加载数据
/fragments\BaseFragment.java:198:     * 该方法会在 onFragmentVisibleChange() 之前调用，所以第一次打开时，可以用一个全局变量表示数据下载状态，
/fragments\BaseFragment.java:199:     * 然后在该方法内将状态设置为下载状态，接着去执行下载的任务
/fragments\BaseFragment.java:200:     * 最后在 onFragmentVisibleChange() 里根据数据下载状态来控制下载进度ui控件的显示与隐藏
/fragments\BaseFragment.java:201:     */
/fragments\BaseFragment.java:202:    protected void onFragmentFirstVisible() {
/fragments\BaseFragment.java:203:    }
/fragments\BaseFragment.java:205:    protected boolean isFragmentVisible() {
/fragments\BaseFragment.java:206:        return isFragmentVisible;
/fragments\BaseFragment.java:207:    }
/fragments\BaseFragment.java:209:    public void onAccountSwitch() {
/fragments\BaseFragment.java:210:        if (this instanceof Refreshable) {
/fragments\BaseFragment.java:211:            ((Refreshable) this).onRefresh();
/fragments\BaseFragment.java:212:        }
/fragments\BaseFragment.java:213:    }
/fragments\BaseFragment.java:215:    public boolean hasOwnAppbar() {
/fragments\BaseFragment.java:216:        return false;
/fragments\BaseFragment.java:217:    }
/fragments\BaseFragment.java:218:}
/fragments\ConfirmDialogFragment.java:1:package com.huanchengfly.tieba.post.fragments;
/fragments\ConfirmDialogFragment.java:3:import android.os.Bundle;
/fragments\ConfirmDialogFragment.java:5:import androidx.annotation.Nullable;
/fragments\ConfirmDialogFragment.java:7:import com.huanchengfly.tieba.post.R;
/fragments\ConfirmDialogFragment.java:9:public class ConfirmDialogFragment extends MenuDialogFragment {
/fragments\ConfirmDialogFragment.java:10:    private OnConfirmListener onConfirmListener;
/fragments\ConfirmDialogFragment.java:11:    private OnCancelListener onCancelListener;
/fragments\ConfirmDialogFragment.java:13:    public static ConfirmDialogFragment newInstance(String title) {
/fragments\ConfirmDialogFragment.java:14:        ConfirmDialogFragment fragment = new ConfirmDialogFragment();
/fragments\ConfirmDialogFragment.java:15:        Bundle bundle = new Bundle();
/fragments\ConfirmDialogFragment.java:16:        bundle.putInt("menuRes", R.menu.menu_confirm_dialog);
/fragments\ConfirmDialogFragment.java:17:        bundle.putString("title", title);
/fragments\ConfirmDialogFragment.java:18:        fragment.setArguments(bundle);
/fragments\ConfirmDialogFragment.java:19:        return fragment;
/fragments\ConfirmDialogFragment.java:20:    }
/fragments\ConfirmDialogFragment.java:22:    public OnConfirmListener getOnConfirmListener() {
/fragments\ConfirmDialogFragment.java:23:        return onConfirmListener;
/fragments\ConfirmDialogFragment.java:24:    }
/fragments\ConfirmDialogFragment.java:26:    public ConfirmDialogFragment setOnConfirmListener(OnConfirmListener onConfirmListener) {
/fragments\ConfirmDialogFragment.java:27:        this.onConfirmListener = onConfirmListener;
/fragments\ConfirmDialogFragment.java:28:        return this;
/fragments\ConfirmDialogFragment.java:29:    }
/fragments\ConfirmDialogFragment.java:31:    public OnCancelListener getOnCancelListener() {
/fragments\ConfirmDialogFragment.java:32:        return onCancelListener;
/fragments\ConfirmDialogFragment.java:33:    }
/fragments\ConfirmDialogFragment.java:35:    public ConfirmDialogFragment setOnCancelListener(OnCancelListener onCancelListener) {
/fragments\ConfirmDialogFragment.java:36:        this.onCancelListener = onCancelListener;
/fragments\ConfirmDialogFragment.java:37:        return this;
/fragments\ConfirmDialogFragment.java:38:    }
/fragments\ConfirmDialogFragment.java:40:    @Override
/fragments\ConfirmDialogFragment.java:41:    public void onCreate(@Nullable Bundle savedInstanceState) {
/fragments\ConfirmDialogFragment.java:42:        super.onCreate(savedInstanceState);
/fragments\ConfirmDialogFragment.java:43:        setOnNavigationItemSelectedListener(item -> {
/fragments\ConfirmDialogFragment.java:44:            switch (item.getItemId()) {
/fragments\ConfirmDialogFragment.java:45:                case R.id.yes:
/fragments\ConfirmDialogFragment.java:46:                    if (getOnConfirmListener() != null) {
/fragments\ConfirmDialogFragment.java:47:                        getOnConfirmListener().onConfirm();
/fragments\ConfirmDialogFragment.java:48:                    }
/fragments\ConfirmDialogFragment.java:49:                    return true;
/fragments\ConfirmDialogFragment.java:50:                case R.id.no:
/fragments\ConfirmDialogFragment.java:51:                    if (getOnCancelListener() != null) {
/fragments\ConfirmDialogFragment.java:52:                        getOnCancelListener().onCancel();
/fragments\ConfirmDialogFragment.java:53:                    }
/fragments\ConfirmDialogFragment.java:54:                    return true;
/fragments\ConfirmDialogFragment.java:55:            }
/fragments\ConfirmDialogFragment.java:56:            return false;
/fragments\ConfirmDialogFragment.java:57:        });
/fragments\ConfirmDialogFragment.java:58:    }
/fragments\ConfirmDialogFragment.java:60:    public interface OnConfirmListener {
/fragments\ConfirmDialogFragment.java:61:        void onConfirm();
/fragments\ConfirmDialogFragment.java:62:    }
/fragments\ConfirmDialogFragment.java:64:    public interface OnCancelListener {
/fragments\ConfirmDialogFragment.java:65:        void onCancel();
/fragments\ConfirmDialogFragment.java:66:    }
/fragments\ConfirmDialogFragment.java:67:}
/fragments\ForumInfoFragment.java:1:package com.huanchengfly.tieba.post.fragments;
/fragments\ForumInfoFragment.java:3:import android.graphics.Bitmap;
/fragments\ForumInfoFragment.java:4:import android.os.Bundle;
/fragments\ForumInfoFragment.java:5:import android.text.SpannableStringBuilder;
/fragments\ForumInfoFragment.java:6:import android.text.Spanned;
/fragments\ForumInfoFragment.java:7:import android.text.method.LinkMovementMethod;
/fragments\ForumInfoFragment.java:8:import android.view.View;
/fragments\ForumInfoFragment.java:9:import android.widget.TextView;
/fragments\ForumInfoFragment.java:10:import android.widget.Toast;
/fragments\ForumInfoFragment.java:12:import androidx.annotation.NonNull;
/fragments\ForumInfoFragment.java:13:import androidx.annotation.Nullable;
/fragments\ForumInfoFragment.java:14:import androidx.core.widget.NestedScrollView;
/fragments\ForumInfoFragment.java:15:import androidx.recyclerview.widget.LinearLayoutManager;
/fragments\ForumInfoFragment.java:16:import androidx.recyclerview.widget.RecyclerView;
/fragments\ForumInfoFragment.java:17:import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
/fragments\ForumInfoFragment.java:19:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/fragments\ForumInfoFragment.java:20:import com.huanchengfly.tieba.post.api.ForumSortType;
/fragments\ForumInfoFragment.java:21:import com.huanchengfly.tieba.post.api.TiebaApi;
/fragments\ForumInfoFragment.java:22:import com.huanchengfly.tieba.post.api.caster.ForumBeanCaster;
/fragments\ForumInfoFragment.java:23:import com.huanchengfly.tieba.post.api.models.ForumPageBean;
/fragments\ForumInfoFragment.java:24:import com.huanchengfly.tieba.post.api.models.web.ForumBean;
/fragments\ForumInfoFragment.java:25:import com.huanchengfly.tieba.post.api.retrofit.exception.TiebaException;
/fragments\ForumInfoFragment.java:26:import com.huanchengfly.tieba.post.R;
/fragments\ForumInfoFragment.java:27:import com.huanchengfly.tieba.post.adapters.ZyqFriendAdapter;
/fragments\ForumInfoFragment.java:28:import com.huanchengfly.tieba.post.components.spans.MyImageSpan;
/fragments\ForumInfoFragment.java:29:import com.huanchengfly.tieba.post.components.spans.MyURLSpan;
/fragments\ForumInfoFragment.java:30:import com.huanchengfly.tieba.post.components.spans.MyUserSpan;
/fragments\ForumInfoFragment.java:31:import com.huanchengfly.tieba.post.interfaces.Refreshable;
/fragments\ForumInfoFragment.java:32:import com.huanchengfly.tieba.post.interfaces.ScrollTopable;
/fragments\ForumInfoFragment.java:33:import com.huanchengfly.tieba.post.utils.AnimUtil;
/fragments\ForumInfoFragment.java:34:import com.huanchengfly.tieba.post.utils.DisplayUtil;
/fragments\ForumInfoFragment.java:35:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/fragments\ForumInfoFragment.java:36:import com.huanchengfly.tieba.post.utils.Util;
/fragments\ForumInfoFragment.java:38:import org.jetbrains.annotations.NotNull;
/fragments\ForumInfoFragment.java:40:import butterknife.BindView;
/fragments\ForumInfoFragment.java:41:import retrofit2.Call;
/fragments\ForumInfoFragment.java:42:import retrofit2.Callback;
/fragments\ForumInfoFragment.java:43:import retrofit2.Response;
/fragments\ForumInfoFragment.java:45:import static com.huanchengfly.tieba.post.fragments.ForumFragment.PARAM_FORUM_NAME;
/fragments\ForumInfoFragment.java:47:public class ForumInfoFragment extends BaseFragment implements Refreshable, ScrollTopable {
/fragments\ForumInfoFragment.java:48:    @BindView(R.id.title)
/fragments\ForumInfoFragment.java:49:    TextView title;
/fragments\ForumInfoFragment.java:50:    @BindView(R.id.slogan)
/fragments\ForumInfoFragment.java:51:    TextView slogan;
/fragments\ForumInfoFragment.java:52:    @BindView(R.id.hot)
/fragments\ForumInfoFragment.java:53:    TextView hot;
/fragments\ForumInfoFragment.java:54:    @BindView(R.id.managers)
/fragments\ForumInfoFragment.java:55:    TextView managers;
/fragments\ForumInfoFragment.java:56:    @BindView(R.id.zyqtitle)
/fragments\ForumInfoFragment.java:57:    TextView zyqTitle;
/fragments\ForumInfoFragment.java:58:    @BindView(R.id.zyqdefine)
/fragments\ForumInfoFragment.java:59:    TextView zyqDefine;
/fragments\ForumInfoFragment.java:60:    @BindView(R.id.scroll_view)
/fragments\ForumInfoFragment.java:61:    NestedScrollView mScrollView;
/fragments\ForumInfoFragment.java:62:    @BindView(R.id.friend_links)
/fragments\ForumInfoFragment.java:63:    View mFriendLinksView;
/fragments\ForumInfoFragment.java:64:    @BindView(R.id.friend_forums)
/fragments\ForumInfoFragment.java:65:    View mFriendForumsView;
/fragments\ForumInfoFragment.java:66:    @BindView(R.id.managers_view)
/fragments\ForumInfoFragment.java:67:    View mManagersView;
/fragments\ForumInfoFragment.java:68:    @BindView(R.id.friend_forums_view)
/fragments\ForumInfoFragment.java:69:    RecyclerView friendForumsRecyclerView;
/fragments\ForumInfoFragment.java:70:    private String forumName;
/fragments\ForumInfoFragment.java:71:    private ForumPageBean mDataBean;
/fragments\ForumInfoFragment.java:72:    private View content;
/fragments\ForumInfoFragment.java:73:    private SwipeRefreshLayout mRefreshLayout;
/fragments\ForumInfoFragment.java:75:    public ForumInfoFragment() {
/fragments\ForumInfoFragment.java:76:    }
/fragments\ForumInfoFragment.java:78:    public static ForumInfoFragment newInstance(String forumName) {
/fragments\ForumInfoFragment.java:79:        Bundle args = new Bundle();
/fragments\ForumInfoFragment.java:80:        args.putString(PARAM_FORUM_NAME, forumName);
/fragments\ForumInfoFragment.java:81:        ForumInfoFragment fragment = new ForumInfoFragment();
/fragments\ForumInfoFragment.java:82:        fragment.setArguments(args);
/fragments\ForumInfoFragment.java:83:        return fragment;
/fragments\ForumInfoFragment.java:84:    }
/fragments\ForumInfoFragment.java:86:    @Override
/fragments\ForumInfoFragment.java:87:    public void onCreate(@Nullable Bundle savedInstanceState) {
/fragments\ForumInfoFragment.java:88:        super.onCreate(savedInstanceState);
/fragments\ForumInfoFragment.java:89:        Bundle bundle = getArguments();
/fragments\ForumInfoFragment.java:90:        if (savedInstanceState == null && bundle != null) {
/fragments\ForumInfoFragment.java:91:            forumName = bundle.getString(PARAM_FORUM_NAME);
/fragments\ForumInfoFragment.java:92:        }
/fragments\ForumInfoFragment.java:93:    }
/fragments\ForumInfoFragment.java:95:    @Override
/fragments\ForumInfoFragment.java:96:    public void onSaveInstanceState(@NonNull Bundle outState) {
/fragments\ForumInfoFragment.java:97:        outState.putString(PARAM_FORUM_NAME, forumName);
/fragments\ForumInfoFragment.java:98:        super.onSaveInstanceState(outState);
/fragments\ForumInfoFragment.java:99:    }
/fragments\ForumInfoFragment.java:101:    @Override
/fragments\ForumInfoFragment.java:102:    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
/fragments\ForumInfoFragment.java:103:        if (savedInstanceState != null) {
/fragments\ForumInfoFragment.java:104:            forumName = savedInstanceState.getString(PARAM_FORUM_NAME);
/fragments\ForumInfoFragment.java:105:        }
/fragments\ForumInfoFragment.java:106:        super.onActivityCreated(savedInstanceState);
/fragments\ForumInfoFragment.java:107:    }
/fragments\ForumInfoFragment.java:109:    @Override
/fragments\ForumInfoFragment.java:110:    int getLayoutId() {
/fragments\ForumInfoFragment.java:111:        return R.layout.fragment_forum_info;
/fragments\ForumInfoFragment.java:112:    }
/fragments\ForumInfoFragment.java:114:    @Override
/fragments\ForumInfoFragment.java:115:    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
/fragments\ForumInfoFragment.java:116:        super.onViewCreated(view, savedInstanceState);
/fragments\ForumInfoFragment.java:117:        mRefreshLayout = (SwipeRefreshLayout) view;
/fragments\ForumInfoFragment.java:118:        ThemeUtil.setThemeForSwipeRefreshLayout(mRefreshLayout);
/fragments\ForumInfoFragment.java:119:        mRefreshLayout.setOnRefreshListener(this::refresh);
/fragments\ForumInfoFragment.java:120:        content = view.findViewById(R.id.content);
/fragments\ForumInfoFragment.java:121:        content.setVisibility(View.GONE);
/fragments\ForumInfoFragment.java:122:        managers.setMovementMethod(LinkMovementMethod.getInstance());
/fragments\ForumInfoFragment.java:123:        friendForumsRecyclerView.setLayoutManager(new LinearLayoutManager(getAttachContext()));
/fragments\ForumInfoFragment.java:124:        zyqDefine.setMovementMethod(LinkMovementMethod.getInstance());
/fragments\ForumInfoFragment.java:125:    }
/fragments\ForumInfoFragment.java:127:    @Override
/fragments\ForumInfoFragment.java:128:    protected void onFragmentFirstVisible() {
/fragments\ForumInfoFragment.java:129:        if (mDataBean == null) {
/fragments\ForumInfoFragment.java:130:            refresh();
/fragments\ForumInfoFragment.java:131:        }
/fragments\ForumInfoFragment.java:132:    }
/fragments\ForumInfoFragment.java:134:    @Override
/fragments\ForumInfoFragment.java:135:    protected void onFragmentVisibleChange(boolean isVisible) {
/fragments\ForumInfoFragment.java:136:        if (isVisible && mDataBean == null) {
/fragments\ForumInfoFragment.java:137:            refresh();
/fragments\ForumInfoFragment.java:138:        }
/fragments\ForumInfoFragment.java:139:    }
/fragments\ForumInfoFragment.java:141:    private CharSequence getLinkContent(CharSequence name, String link) {
/fragments\ForumInfoFragment.java:142:        String linkIconText = "[链接]";
/fragments\ForumInfoFragment.java:143:        String s = " ";
/fragments\ForumInfoFragment.java:144:        int start = 0;
/fragments\ForumInfoFragment.java:145:        int end = start + s.length() + linkIconText.length() + name.length();
/fragments\ForumInfoFragment.java:146:        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder();
/fragments\ForumInfoFragment.java:147:        Bitmap bitmap = Util.getBitmapFromVectorDrawable(getAttachContext(), R.drawable.ic_link);
/fragments\ForumInfoFragment.java:148:        int size = DisplayUtil.sp2px(getAttachContext(), 14);
/fragments\ForumInfoFragment.java:149:        int color = ThemeUtils.getColorByAttr(getAttachContext(), R.attr.colorAccent);
/fragments\ForumInfoFragment.java:150:        bitmap = Bitmap.createScaledBitmap(bitmap, size, size, true);
/fragments\ForumInfoFragment.java:151:        bitmap = Util.tintBitmap(bitmap, color);
/fragments\ForumInfoFragment.java:152:        spannableStringBuilder.append(linkIconText, new MyImageSpan(getAttachContext(), bitmap), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
/fragments\ForumInfoFragment.java:153:        spannableStringBuilder.append(s);
/fragments\ForumInfoFragment.java:154:        spannableStringBuilder.append(name);
/fragments\ForumInfoFragment.java:155:        spannableStringBuilder.setSpan(new MyURLSpan(getAttachContext(), link), start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
/fragments\ForumInfoFragment.java:156:        return spannableStringBuilder;
/fragments\ForumInfoFragment.java:157:    }
/fragments\ForumInfoFragment.java:159:    private CharSequence getUserContent(CharSequence username, String uid) {
/fragments\ForumInfoFragment.java:160:        String linkIconText = "[用户]";
/fragments\ForumInfoFragment.java:161:        String s = " ";
/fragments\ForumInfoFragment.java:162:        int start = 0;
/fragments\ForumInfoFragment.java:163:        int end = start + s.length() + linkIconText.length() + username.length();
/fragments\ForumInfoFragment.java:164:        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder();
/fragments\ForumInfoFragment.java:165:        Bitmap bitmap = Util.getBitmapFromVectorDrawable(getAttachContext(), R.drawable.ic_round_account_circle);
/fragments\ForumInfoFragment.java:166:        int size = DisplayUtil.sp2px(getAttachContext(), 14);
/fragments\ForumInfoFragment.java:167:        int color = ThemeUtils.getColorByAttr(getAttachContext(), R.attr.colorAccent);
/fragments\ForumInfoFragment.java:168:        bitmap = Bitmap.createScaledBitmap(bitmap, size, size, true);
/fragments\ForumInfoFragment.java:169:        bitmap = Util.tintBitmap(bitmap, color);
/fragments\ForumInfoFragment.java:170:        spannableStringBuilder.append(linkIconText, new MyImageSpan(getAttachContext(), bitmap), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
/fragments\ForumInfoFragment.java:171:        spannableStringBuilder.append(s);
/fragments\ForumInfoFragment.java:172:        spannableStringBuilder.append(username);
/fragments\ForumInfoFragment.java:173:        spannableStringBuilder.setSpan(new MyUserSpan(getAttachContext(), uid), start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
/fragments\ForumInfoFragment.java:174:        return spannableStringBuilder;
/fragments\ForumInfoFragment.java:175:    }
/fragments\ForumInfoFragment.java:177:    private void refresh() {
/fragments\ForumInfoFragment.java:178:        mRefreshLayout.setRefreshing(true);
/fragments\ForumInfoFragment.java:179:        TiebaApi.getInstance()
/fragments\ForumInfoFragment.java:180:                .webForumPage(forumName, 1, null, ForumSortType.REPLY_TIME, 30)
/fragments\ForumInfoFragment.java:181:                .enqueue(new Callback<ForumBean>() {
/fragments\ForumInfoFragment.java:182:                    @Override
/fragments\ForumInfoFragment.java:183:                    public void onResponse(Call<ForumBean> call, Response<ForumBean> response) {
/fragments\ForumInfoFragment.java:184:                        ForumPageBean data = new ForumBeanCaster().cast(response.body());
/fragments\ForumInfoFragment.java:185:                        if (getAttachContext() instanceof ForumFragment.OnRefreshedListener) {
/fragments\ForumInfoFragment.java:186:                            ((ForumFragment.OnRefreshedListener) getAttachContext()).onSuccess(data);
/fragments\ForumInfoFragment.java:187:                        }
/fragments\ForumInfoFragment.java:188:                        mRefreshLayout.setRefreshing(false);
/fragments\ForumInfoFragment.java:189:                        AnimUtil.alphaIn(content).start();
/fragments\ForumInfoFragment.java:190:                        mDataBean = data;
/fragments\ForumInfoFragment.java:191:                        title.setText(getAttachContext().getString(R.string.title_forum, data.getForum().getName()));
/fragments\ForumInfoFragment.java:192:                        slogan.setText(data.getForum().getSlogan());
/fragments\ForumInfoFragment.java:193:                        hot.setText(getAttachContext().getString(R.string.forum_hot, data.getForum().getMemberNum(), data.getForum().getPostNum()));
/fragments\ForumInfoFragment.java:194:                        if (data.getForum().getZyqDefine() != null && data.getForum().getZyqDefine().size() > 0) {
/fragments\ForumInfoFragment.java:195:                            mFriendLinksView.setVisibility(View.VISIBLE);
/fragments\ForumInfoFragment.java:196:                            zyqTitle.setText(data.getForum().getZyqTitle());
/fragments\ForumInfoFragment.java:197:                            SpannableStringBuilder friendLinkBuilder = new SpannableStringBuilder();
/fragments\ForumInfoFragment.java:198:                            for (ForumPageBean.ZyqDefineBean zyqDefineBean : data.getForum().getZyqDefine()) {
/fragments\ForumInfoFragment.java:199:                                friendLinkBuilder.append(getLinkContent(zyqDefineBean.getName(), zyqDefineBean.getLink()));
/fragments\ForumInfoFragment.java:200:                                if (data.getForum().getZyqDefine().indexOf(zyqDefineBean) < data.getForum().getZyqDefine().size() - 1)
/fragments\ForumInfoFragment.java:201:                                    friendLinkBuilder.append("\n");
/fragments\ForumInfoFragment.java:202:                            }
/fragments\ForumInfoFragment.java:203:                            zyqDefine.setText(friendLinkBuilder);
/fragments\ForumInfoFragment.java:204:                        } else {
/fragments\ForumInfoFragment.java:205:                            mFriendLinksView.setVisibility(View.GONE);
/fragments\ForumInfoFragment.java:206:                        }
/fragments\ForumInfoFragment.java:207:                        if (data.getForum().getZyqFriend() != null && data.getForum().getZyqFriend().size() > 0) {
/fragments\ForumInfoFragment.java:208:                            mFriendForumsView.setVisibility(View.VISIBLE);
/fragments\ForumInfoFragment.java:209:                            friendForumsRecyclerView.setAdapter(new ZyqFriendAdapter(getAttachContext(), data.getForum().getZyqFriend()));
/fragments\ForumInfoFragment.java:210:                        } else {
/fragments\ForumInfoFragment.java:211:                            mFriendForumsView.setVisibility(View.GONE);
/fragments\ForumInfoFragment.java:212:                        }
/fragments\ForumInfoFragment.java:213:                        if (data.getForum().getManagers() != null && data.getForum().getManagers().size() > 0) {
/fragments\ForumInfoFragment.java:214:                            mManagersView.setVisibility(View.VISIBLE);
/fragments\ForumInfoFragment.java:215:                            SpannableStringBuilder managersBuilder = new SpannableStringBuilder();
/fragments\ForumInfoFragment.java:216:                            for (ForumPageBean.ManagerBean managerBean : data.getForum().getManagers()) {
/fragments\ForumInfoFragment.java:217:                                managersBuilder.append(getUserContent(managerBean.getName(), managerBean.getId()));
/fragments\ForumInfoFragment.java:218:                                if (data.getForum().getManagers().indexOf(managerBean) < data.getForum().getManagers().size() - 1)
/fragments\ForumInfoFragment.java:219:                                    managersBuilder.append("\n");
/fragments\ForumInfoFragment.java:220:                            }
/fragments\ForumInfoFragment.java:221:                            managers.setText(managersBuilder);
/fragments\ForumInfoFragment.java:222:                        } else {
/fragments\ForumInfoFragment.java:223:                            mManagersView.setVisibility(View.GONE);
/fragments\ForumInfoFragment.java:224:                        }
/fragments\ForumInfoFragment.java:225:                    }
/fragments\ForumInfoFragment.java:227:                    @Override
/fragments\ForumInfoFragment.java:228:                    public void onFailure(@NotNull Call<ForumBean> call, @NotNull Throwable t) {
/fragments\ForumInfoFragment.java:229:                        int code = t instanceof TiebaException ? ((TiebaException) t).getCode() : -1;
/fragments\ForumInfoFragment.java:230:                        String error = t.getMessage();
/fragments\ForumInfoFragment.java:231:                        if (getAttachContext() instanceof ForumFragment.OnRefreshedListener) {
/fragments\ForumInfoFragment.java:232:                            ((ForumFragment.OnRefreshedListener) getAttachContext()).onFailure(code, error);
/fragments\ForumInfoFragment.java:233:                        }
/fragments\ForumInfoFragment.java:234:                        mRefreshLayout.setRefreshing(false);
/fragments\ForumInfoFragment.java:235:                        if (code == 0) {
/fragments\ForumInfoFragment.java:236:                            Util.showNetworkErrorSnackbar(content, () -> refresh());
/fragments\ForumInfoFragment.java:237:                            return;
/fragments\ForumInfoFragment.java:238:                        }
/fragments\ForumInfoFragment.java:239:                        Toast.makeText(getAttachContext(), getString(R.string.toast_error, code, error), Toast.LENGTH_SHORT).show();
/fragments\ForumInfoFragment.java:240:                    }
/fragments\ForumInfoFragment.java:241:                });
/fragments\ForumInfoFragment.java:242:    }
/fragments\ForumInfoFragment.java:244:    @Override
/fragments\ForumInfoFragment.java:245:    public void onRefresh() {
/fragments\ForumInfoFragment.java:246:        refresh();
/fragments\ForumInfoFragment.java:247:    }
/fragments\ForumInfoFragment.java:249:    @Override
/fragments\ForumInfoFragment.java:250:    public void scrollToTop() {
/fragments\ForumInfoFragment.java:251:        mScrollView.scrollTo(0, 0);
/fragments\ForumInfoFragment.java:252:    }
/fragments\ForumInfoFragment.java:253:}
/fragments\MenuDialogFragment.java:1:package com.huanchengfly.tieba.post.fragments;
/fragments\MenuDialogFragment.java:3:import android.os.Bundle;
/fragments\MenuDialogFragment.java:4:import android.view.MenuItem;
/fragments\MenuDialogFragment.java:5:import android.view.View;
/fragments\MenuDialogFragment.java:6:import android.view.ViewGroup;
/fragments\MenuDialogFragment.java:7:import android.widget.TextView;
/fragments\MenuDialogFragment.java:9:import androidx.annotation.MenuRes;
/fragments\MenuDialogFragment.java:10:import androidx.annotation.NonNull;
/fragments\MenuDialogFragment.java:11:import androidx.annotation.Nullable;
/fragments\MenuDialogFragment.java:13:import com.google.android.material.bottomsheet.BottomSheetBehavior;
/fragments\MenuDialogFragment.java:14:import com.google.android.material.navigation.NavigationView;
/fragments\MenuDialogFragment.java:15:import com.huanchengfly.tieba.post.R;
/fragments\MenuDialogFragment.java:16:import com.huanchengfly.tieba.post.interfaces.InitMenuCallback;
/fragments\MenuDialogFragment.java:18:public class MenuDialogFragment extends BaseBottomSheetDialogFragment implements NavigationView.OnNavigationItemSelectedListener {
/fragments\MenuDialogFragment.java:19:    private int menuRes;
/fragments\MenuDialogFragment.java:20:    private String title;
/fragments\MenuDialogFragment.java:21:    private TextView titleView;
/fragments\MenuDialogFragment.java:22:    private NavigationView.OnNavigationItemSelectedListener onNavigationItemSelectedListener;
/fragments\MenuDialogFragment.java:23:    private NavigationView navigationView;
/fragments\MenuDialogFragment.java:24:    private InitMenuCallback initMenuCallback;
/fragments\MenuDialogFragment.java:26:    public MenuDialogFragment() {
/fragments\MenuDialogFragment.java:27:    }
/fragments\MenuDialogFragment.java:29:    public static MenuDialogFragment newInstance(@MenuRes int menuRes, String title) {
/fragments\MenuDialogFragment.java:30:        MenuDialogFragment fragment = new MenuDialogFragment();
/fragments\MenuDialogFragment.java:31:        Bundle bundle = new Bundle();
/fragments\MenuDialogFragment.java:32:        bundle.putInt("menuRes", menuRes);
/fragments\MenuDialogFragment.java:33:        bundle.putString("title", title);
/fragments\MenuDialogFragment.java:34:        fragment.setArguments(bundle);
/fragments\MenuDialogFragment.java:35:        return fragment;
/fragments\MenuDialogFragment.java:36:    }
/fragments\MenuDialogFragment.java:38:    public InitMenuCallback getInitMenuCallback() {
/fragments\MenuDialogFragment.java:39:        return initMenuCallback;
/fragments\MenuDialogFragment.java:40:    }
/fragments\MenuDialogFragment.java:42:    public MenuDialogFragment setInitMenuCallback(InitMenuCallback initMenuCallback) {
/fragments\MenuDialogFragment.java:43:        this.initMenuCallback = initMenuCallback;
/fragments\MenuDialogFragment.java:44:        return this;
/fragments\MenuDialogFragment.java:45:    }
/fragments\MenuDialogFragment.java:47:    @Override
/fragments\MenuDialogFragment.java:48:    public void onCreate(@Nullable Bundle savedInstanceState) {
/fragments\MenuDialogFragment.java:49:        super.onCreate(savedInstanceState);
/fragments\MenuDialogFragment.java:50:        Bundle bundle = getArguments();
/fragments\MenuDialogFragment.java:51:        if (bundle != null) {
/fragments\MenuDialogFragment.java:52:            menuRes = bundle.getInt("menuRes", -1);
/fragments\MenuDialogFragment.java:53:            title = bundle.getString("title", null);
/fragments\MenuDialogFragment.java:54:        }
/fragments\MenuDialogFragment.java:55:    }
/fragments\MenuDialogFragment.java:57:    public NavigationView.OnNavigationItemSelectedListener getOnNavigationItemSelectedListener() {
/fragments\MenuDialogFragment.java:58:        return onNavigationItemSelectedListener;
/fragments\MenuDialogFragment.java:59:    }
/fragments\MenuDialogFragment.java:61:    public MenuDialogFragment setOnNavigationItemSelectedListener(NavigationView.OnNavigationItemSelectedListener onNavigationItemSelectedListener) {
/fragments\MenuDialogFragment.java:62:        this.onNavigationItemSelectedListener = onNavigationItemSelectedListener;
/fragments\MenuDialogFragment.java:63:        return this;
/fragments\MenuDialogFragment.java:64:    }
/fragments\MenuDialogFragment.java:66:    @Override
/fragments\MenuDialogFragment.java:67:    protected void onCreatedBehavior(BottomSheetBehavior behavior) {
/fragments\MenuDialogFragment.java:68:        behavior.setHideable(false);
/fragments\MenuDialogFragment.java:69:        behavior.setBottomSheetCallback(new BottomSheetBehavior.BottomSheetCallback() {
/fragments\MenuDialogFragment.java:70:            @Override
/fragments\MenuDialogFragment.java:71:            public void onStateChanged(@NonNull View bottomSheet, int newState) {
/fragments\MenuDialogFragment.java:72:                if (newState == BottomSheetBehavior.STATE_HIDDEN) {
/fragments\MenuDialogFragment.java:73:                    close();
/fragments\MenuDialogFragment.java:74:                } else if (newState != BottomSheetBehavior.STATE_COLLAPSED) {
/fragments\MenuDialogFragment.java:75:                    behavior.setState(BottomSheetBehavior.STATE_COLLAPSED);
/fragments\MenuDialogFragment.java:76:                }
/fragments\MenuDialogFragment.java:77:            }
/fragments\MenuDialogFragment.java:79:            @Override
/fragments\MenuDialogFragment.java:80:            public void onSlide(@NonNull View bottomSheet, float slideOffset) {
/fragments\MenuDialogFragment.java:81:            }
/fragments\MenuDialogFragment.java:82:        });
/fragments\MenuDialogFragment.java:83:    }
/fragments\MenuDialogFragment.java:85:    @Override
/fragments\MenuDialogFragment.java:86:    protected void initView() {
/fragments\MenuDialogFragment.java:87:        navigationView = rootView.findViewById(R.id.navigation_view);
/fragments\MenuDialogFragment.java:88:        titleView = rootView.findViewById(R.id.title_text_view);
/fragments\MenuDialogFragment.java:89:        titleView.setText(title);
/fragments\MenuDialogFragment.java:90:        titleView.setVisibility(title == null ? View.GONE : View.VISIBLE);
/fragments\MenuDialogFragment.java:91:        navigationView.inflateMenu(menuRes);
/fragments\MenuDialogFragment.java:92:        if (initMenuCallback != null) {
/fragments\MenuDialogFragment.java:93:            initMenuCallback.init(navigationView.getMenu());
/fragments\MenuDialogFragment.java:94:        }
/fragments\MenuDialogFragment.java:95:        navigationView.setNavigationItemSelectedListener(this);
/fragments\MenuDialogFragment.java:96:        navigationView.post(() -> {
/fragments\MenuDialogFragment.java:97:            mBehavior.setPeekHeight(titleView.getHeight() + navigationView.getHeight(), false);
/fragments\MenuDialogFragment.java:98:        });
/fragments\MenuDialogFragment.java:99:    }
/fragments\MenuDialogFragment.java:101:    @Override
/fragments\MenuDialogFragment.java:102:    protected int getLayoutId() {
/fragments\MenuDialogFragment.java:103:        return R.layout.fragment_menu_dialog;
/fragments\MenuDialogFragment.java:104:    }
/fragments\MenuDialogFragment.java:106:    @Override
/fragments\MenuDialogFragment.java:107:    public boolean onNavigationItemSelected(@NonNull MenuItem item) {
/fragments\MenuDialogFragment.java:108:        if (onNavigationItemSelectedListener != null) {
/fragments\MenuDialogFragment.java:109:            close();
/fragments\MenuDialogFragment.java:110:            return onNavigationItemSelectedListener.onNavigationItemSelected(item);
/fragments\MenuDialogFragment.java:111:        }
/fragments\MenuDialogFragment.java:112:        return false;
/fragments\MenuDialogFragment.java:113:    }
/fragments\MenuDialogFragment.java:115:    @Override
/fragments\MenuDialogFragment.java:116:    protected int getHeight() {
/fragments\MenuDialogFragment.java:117:        return ViewGroup.LayoutParams.MATCH_PARENT;
/fragments\MenuDialogFragment.java:118:    }
/fragments\MenuDialogFragment.java:119:}
/fragments\MessageFragment.java:1:package com.huanchengfly.tieba.post.fragments;
/fragments\MessageFragment.java:3:import android.content.Context;
/fragments\MessageFragment.java:4:import android.os.Bundle;
/fragments\MessageFragment.java:5:import android.view.View;
/fragments\MessageFragment.java:7:import androidx.annotation.NonNull;
/fragments\MessageFragment.java:8:import androidx.annotation.Nullable;
/fragments\MessageFragment.java:9:import androidx.recyclerview.widget.RecyclerView;
/fragments\MessageFragment.java:10:import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
/fragments\MessageFragment.java:11:import androidx.viewpager.widget.ViewPager;
/fragments\MessageFragment.java:13:import com.google.android.material.tabs.TabLayout;
/fragments\MessageFragment.java:14:import com.huanchengfly.tieba.post.api.TiebaApi;
/fragments\MessageFragment.java:15:import com.huanchengfly.tieba.post.api.models.MessageListBean;
/fragments\MessageFragment.java:16:import com.huanchengfly.tieba.post.api.retrofit.exception.TiebaException;
/fragments\MessageFragment.java:17:import com.huanchengfly.tieba.post.activities.MainActivity;
/fragments\MessageFragment.java:18:import com.huanchengfly.tieba.post.R;
/fragments\MessageFragment.java:19:import com.huanchengfly.tieba.post.adapters.MessageListAdapter;
/fragments\MessageFragment.java:20:import com.huanchengfly.tieba.post.adapters.TabViewPagerAdapter;
/fragments\MessageFragment.java:21:import com.huanchengfly.tieba.post.components.MyLinearLayoutManager;
/fragments\MessageFragment.java:22:import com.huanchengfly.tieba.post.components.dividers.CommonDivider;
/fragments\MessageFragment.java:23:import com.huanchengfly.tieba.post.interfaces.Refreshable;
/fragments\MessageFragment.java:24:import com.huanchengfly.tieba.post.utils.DisplayUtil;
/fragments\MessageFragment.java:25:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/fragments\MessageFragment.java:26:import com.huanchengfly.tieba.post.utils.Util;
/fragments\MessageFragment.java:27:import com.huanchengfly.tieba.post.widgets.theme.TintImageView;
/fragments\MessageFragment.java:29:import org.jetbrains.annotations.NotNull;
/fragments\MessageFragment.java:31:import butterknife.BindView;
/fragments\MessageFragment.java:32:import retrofit2.Call;
/fragments\MessageFragment.java:33:import retrofit2.Callback;
/fragments\MessageFragment.java:34:import retrofit2.Response;
/fragments\MessageFragment.java:36:public class MessageFragment extends BaseFragment implements View.OnClickListener, Refreshable, TabLayout.OnTabSelectedListener {
/fragments\MessageFragment.java:37:    public static final int TYPE_REPLY_ME = 0;
/fragments\MessageFragment.java:38:    public static final int TYPE_AT_ME = 1;
/fragments\MessageFragment.java:40:    public static final String TAG = MessageFragment.class.getSimpleName();
/fragments\MessageFragment.java:42:    private static final String PARAM_TYPE = "type";
/fragments\MessageFragment.java:43:    public static final String PARAM_FROM_NOTIFICATION = "from_notification";
/fragments\MessageFragment.java:44:    @BindView(R.id.fragment_message_tab)
/fragments\MessageFragment.java:45:    TabLayout tabLayout;
/fragments\MessageFragment.java:46:    private MessageListHelper replyMe;
/fragments\MessageFragment.java:47:    private MessageListHelper atMe;
/fragments\MessageFragment.java:48:    private int type;
/fragments\MessageFragment.java:49:    private boolean isFromNotification;
/fragments\MessageFragment.java:51:    public MessageFragment() {
/fragments\MessageFragment.java:52:    }
/fragments\MessageFragment.java:54:    public static MessageFragment newInstance(int type) {
/fragments\MessageFragment.java:55:        return newInstance(type, false);
/fragments\MessageFragment.java:56:    }
/fragments\MessageFragment.java:58:    public static MessageFragment newInstance(int type, boolean isFromNotification) {
/fragments\MessageFragment.java:59:        MessageFragment fragment = new MessageFragment();
/fragments\MessageFragment.java:60:        Bundle bundle = new Bundle();
/fragments\MessageFragment.java:61:        bundle.putInt(PARAM_TYPE, type);
/fragments\MessageFragment.java:62:        bundle.putBoolean(PARAM_FROM_NOTIFICATION, isFromNotification);
/fragments\MessageFragment.java:63:        fragment.setArguments(bundle);
/fragments\MessageFragment.java:64:        return fragment;
/fragments\MessageFragment.java:65:    }
/fragments\MessageFragment.java:67:    @Override
/fragments\MessageFragment.java:68:    public void onFragmentVisibleChange(boolean isVisible) {
/fragments\MessageFragment.java:69:        if (isVisible) {
/fragments\MessageFragment.java:70:            refreshIfNeed();
/fragments\MessageFragment.java:71:        }
/fragments\MessageFragment.java:72:    }
/fragments\MessageFragment.java:74:    @Override
/fragments\MessageFragment.java:75:    public void onFragmentFirstVisible() {
/fragments\MessageFragment.java:76:        refreshIfNeed();
/fragments\MessageFragment.java:77:    }
/fragments\MessageFragment.java:79:    public int getType() {
/fragments\MessageFragment.java:80:        return type;
/fragments\MessageFragment.java:81:    }
/fragments\MessageFragment.java:83:    @Override
/fragments\MessageFragment.java:84:    public void onCreate(Bundle savedInstanceState) {
/fragments\MessageFragment.java:85:        super.onCreate(savedInstanceState);
/fragments\MessageFragment.java:86:        Bundle args = getArguments();
/fragments\MessageFragment.java:87:        if (args != null) {
/fragments\MessageFragment.java:88:            type = args.getInt(PARAM_TYPE, TYPE_REPLY_ME);
/fragments\MessageFragment.java:89:            isFromNotification = args.getBoolean(PARAM_FROM_NOTIFICATION, false);
/fragments\MessageFragment.java:90:        }
/fragments\MessageFragment.java:91:    }
/fragments\MessageFragment.java:93:    @Override
/fragments\MessageFragment.java:94:    int getLayoutId() {
/fragments\MessageFragment.java:95:        return R.layout.fragment_message;
/fragments\MessageFragment.java:96:    }
/fragments\MessageFragment.java:98:    @Override
/fragments\MessageFragment.java:99:    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
/fragments\MessageFragment.java:100:        super.onViewCreated(view, savedInstanceState);
/fragments\MessageFragment.java:101:        ViewPager viewPager = view.findViewById(R.id.fragment_message_vp);
/fragments\MessageFragment.java:102:        TintImageView searchBtn = view.findViewById(R.id.search_btn);
/fragments\MessageFragment.java:103:        if (getAttachContext() instanceof MainActivity) {
/fragments\MessageFragment.java:104:            searchBtn.setVisibility(View.VISIBLE);
/fragments\MessageFragment.java:105:        } else {
/fragments\MessageFragment.java:106:            searchBtn.setVisibility(View.INVISIBLE);
/fragments\MessageFragment.java:107:        }
/fragments\MessageFragment.java:108:        searchBtn.setOnClickListener(this);
/fragments\MessageFragment.java:109:        TabViewPagerAdapter viewPagerAdapter = new TabViewPagerAdapter();
/fragments\MessageFragment.java:110:        replyMe = new MessageListHelper(getAttachContext(), TYPE_REPLY_ME);
/fragments\MessageFragment.java:111:        atMe = new MessageListHelper(getAttachContext(), TYPE_AT_ME);
/fragments\MessageFragment.java:112:        viewPagerAdapter.addView(replyMe.getContentView(), getAttachContext().getString(R.string.title_reply_me));
/fragments\MessageFragment.java:113:        viewPagerAdapter.addView(atMe.getContentView(), getAttachContext().getString(R.string.title_at_me));
/fragments\MessageFragment.java:114:        viewPager.setAdapter(viewPagerAdapter);
/fragments\MessageFragment.java:115:        tabLayout.setupWithViewPager(viewPager);
/fragments\MessageFragment.java:116:        tabLayout.addOnTabSelectedListener(this);
/fragments\MessageFragment.java:117:        viewPager.setCurrentItem(type, false);
/fragments\MessageFragment.java:118:        if (isFromNotification) {
/fragments\MessageFragment.java:119:            refreshIfNeed();
/fragments\MessageFragment.java:120:        }
/fragments\MessageFragment.java:121:    }
/fragments\MessageFragment.java:123:    @Override
/fragments\MessageFragment.java:124:    public boolean hasOwnAppbar() {
/fragments\MessageFragment.java:125:        return true;
/fragments\MessageFragment.java:126:    }
/fragments\MessageFragment.java:128:    @Override
/fragments\MessageFragment.java:129:    public void onClick(View v) {
/fragments\MessageFragment.java:130:        if (v.getId() == R.id.search_btn) {
/fragments\MessageFragment.java:131:            if (getAttachContext() instanceof MainActivity) {
/fragments\MessageFragment.java:132:                ((MainActivity) getAttachContext()).openSearch();
/fragments\MessageFragment.java:133:            }
/fragments\MessageFragment.java:134:        }
/fragments\MessageFragment.java:135:    }
/fragments\MessageFragment.java:137:    @Override
/fragments\MessageFragment.java:138:    public void onRefresh() {
/fragments\MessageFragment.java:139:        switch (tabLayout.getSelectedTabPosition()) {
/fragments\MessageFragment.java:140:            case 0:
/fragments\MessageFragment.java:141:                if (isFragmentVisible()) {
/fragments\MessageFragment.java:142:                    replyMe.refresh();
/fragments\MessageFragment.java:143:                } else {
/fragments\MessageFragment.java:144:                    replyMe.dataBean = null;
/fragments\MessageFragment.java:145:                }
/fragments\MessageFragment.java:146:                break;
/fragments\MessageFragment.java:147:            case 1:
/fragments\MessageFragment.java:148:                if (isFragmentVisible()) {
/fragments\MessageFragment.java:149:                    atMe.refresh();
/fragments\MessageFragment.java:150:                } else {
/fragments\MessageFragment.java:151:                    atMe.dataBean = null;
/fragments\MessageFragment.java:152:                }
/fragments\MessageFragment.java:153:                break;
/fragments\MessageFragment.java:154:        }
/fragments\MessageFragment.java:155:    }
/fragments\MessageFragment.java:157:    private void refreshIfNeed() {
/fragments\MessageFragment.java:158:        switch (tabLayout.getSelectedTabPosition()) {
/fragments\MessageFragment.java:159:            case 0:
/fragments\MessageFragment.java:160:                if (replyMe.needLoad()) {
/fragments\MessageFragment.java:161:                    replyMe.refresh();
/fragments\MessageFragment.java:162:                }
/fragments\MessageFragment.java:163:                break;
/fragments\MessageFragment.java:164:            case 1:
/fragments\MessageFragment.java:165:                if (atMe.needLoad()) {
/fragments\MessageFragment.java:166:                    atMe.refresh();
/fragments\MessageFragment.java:167:                }
/fragments\MessageFragment.java:168:                break;
/fragments\MessageFragment.java:169:        }
/fragments\MessageFragment.java:170:    }
/fragments\MessageFragment.java:172:    @Override
/fragments\MessageFragment.java:173:    public void onTabSelected(TabLayout.Tab tab) {
/fragments\MessageFragment.java:174:        refreshIfNeed();
/fragments\MessageFragment.java:175:    }
/fragments\MessageFragment.java:177:    @Override
/fragments\MessageFragment.java:178:    public void onTabUnselected(TabLayout.Tab tab) {
/fragments\MessageFragment.java:179:    }
/fragments\MessageFragment.java:181:    @Override
/fragments\MessageFragment.java:182:    public void onTabReselected(TabLayout.Tab tab) {
/fragments\MessageFragment.java:183:        refreshIfNeed();
/fragments\MessageFragment.java:184:    }
/fragments\MessageFragment.java:186:    class MessageListHelper {
/fragments\MessageFragment.java:187:        private View contentView;
/fragments\MessageFragment.java:188:        private SwipeRefreshLayout swipeRefreshLayout;
/fragments\MessageFragment.java:189:        private RecyclerView recyclerView;
/fragments\MessageFragment.java:190:        private MessageListAdapter adapter;
/fragments\MessageFragment.java:191:        private int type;
/fragments\MessageFragment.java:192:        private int page;
/fragments\MessageFragment.java:193:        private MessageListBean dataBean;
/fragments\MessageFragment.java:195:        MessageListHelper(Context context, int type) {
/fragments\MessageFragment.java:196:            this.type = type;
/fragments\MessageFragment.java:197:            if (this.type != TYPE_REPLY_ME && this.type != TYPE_AT_ME) {
/fragments\MessageFragment.java:198:                throw new IllegalArgumentException("参数不正确");
/fragments\MessageFragment.java:199:            }
/fragments\MessageFragment.java:200:            contentView = Util.inflate(context, R.layout.fragment_message_list);
/fragments\MessageFragment.java:201:            if (contentView == null) {
/fragments\MessageFragment.java:202:                throw new NullPointerException("引入的布局为空");
/fragments\MessageFragment.java:203:            }
/fragments\MessageFragment.java:204:            recyclerView = contentView.findViewById(R.id.fragment_message_recycler_view);
/fragments\MessageFragment.java:205:            swipeRefreshLayout = contentView.findViewById(R.id.fragment_message_refresh_layout);
/fragments\MessageFragment.java:206:            ThemeUtil.setThemeForSwipeRefreshLayout(swipeRefreshLayout);
/fragments\MessageFragment.java:207:            swipeRefreshLayout.setOnRefreshListener(this::refresh);
/fragments\MessageFragment.java:208:            recyclerView.setLayoutManager(new MyLinearLayoutManager(context));
/fragments\MessageFragment.java:209:            recyclerView.addItemDecoration(new CommonDivider(getAttachContext(), MyLinearLayoutManager.VERTICAL, R.drawable.drawable_divider_1dp, DisplayUtil.dp2px(context, 58), DisplayUtil.dp2px(context, 24)));
/fragments\MessageFragment.java:210:            adapter = new MessageListAdapter(context, type);
/fragments\MessageFragment.java:211:            adapter.setLoadingView(R.layout.layout_footer_loading);
/fragments\MessageFragment.java:212:            adapter.setLoadEndView(R.layout.layout_footer_loadend);
/fragments\MessageFragment.java:213:            adapter.setLoadFailedView(R.layout.layout_footer_load_failed);
/fragments\MessageFragment.java:214:            adapter.setOnLoadMoreListener((boolean isReload) -> {
/fragments\MessageFragment.java:215:                if (isReload) load(false);
/fragments\MessageFragment.java:216:                else loadMore();
/fragments\MessageFragment.java:217:            });
/fragments\MessageFragment.java:218:            recyclerView.setAdapter(adapter);
/fragments\MessageFragment.java:219:        }
/fragments\MessageFragment.java:221:        boolean needLoad() {
/fragments\MessageFragment.java:222:            return dataBean == null;
/fragments\MessageFragment.java:223:        }
/fragments\MessageFragment.java:225:        public int getType() {
/fragments\MessageFragment.java:226:            return type;
/fragments\MessageFragment.java:227:        }
/fragments\MessageFragment.java:229:        public View getContentView() {
/fragments\MessageFragment.java:230:            return contentView;
/fragments\MessageFragment.java:231:        }
/fragments\MessageFragment.java:233:        public void refresh() {
/fragments\MessageFragment.java:234:            swipeRefreshLayout.setRefreshing(true);
/fragments\MessageFragment.java:235:            load(true);
/fragments\MessageFragment.java:236:        }
/fragments\MessageFragment.java:238:        private void load(boolean reload) {
/fragments\MessageFragment.java:239:            if (reload) {
/fragments\MessageFragment.java:240:                page = 1;
/fragments\MessageFragment.java:241:            }
/fragments\MessageFragment.java:242:            Callback<MessageListBean> messageListBeanCallback = new Callback<MessageListBean>() {
/fragments\MessageFragment.java:243:                @Override
/fragments\MessageFragment.java:244:                public void onResponse(@NotNull Call<MessageListBean> call, @NotNull Response<MessageListBean> response) {
/fragments\MessageFragment.java:245:                    dataBean = response.body();
/fragments\MessageFragment.java:246:                    if (reload) {
/fragments\MessageFragment.java:247:                        adapter.reset();
/fragments\MessageFragment.java:248:                        adapter.setData(dataBean);
/fragments\MessageFragment.java:249:                    } else adapter.addData(dataBean);
/fragments\MessageFragment.java:250:                    swipeRefreshLayout.setRefreshing(false);
/fragments\MessageFragment.java:251:                }
/fragments\MessageFragment.java:253:                @Override
/fragments\MessageFragment.java:254:                public void onFailure(@NotNull Call<MessageListBean> call, @NotNull Throwable t) {
/fragments\MessageFragment.java:255:                    if (reload) {
/fragments\MessageFragment.java:256:                        if (!(t instanceof TiebaException)) {
/fragments\MessageFragment.java:257:                            Util.showNetworkErrorSnackbar(recyclerView, () -> refresh());
/fragments\MessageFragment.java:258:                            return;
/fragments\MessageFragment.java:259:                        }
/fragments\MessageFragment.java:260:                    }
/fragments\MessageFragment.java:261:                    adapter.loadFailed();
/fragments\MessageFragment.java:262:                    swipeRefreshLayout.setRefreshing(false);
/fragments\MessageFragment.java:263:                }
/fragments\MessageFragment.java:264:            };
/fragments\MessageFragment.java:265:            switch (getType()) {
/fragments\MessageFragment.java:266:                case TYPE_REPLY_ME:
/fragments\MessageFragment.java:267:                    TiebaApi.getInstance().replyMe(page).enqueue(messageListBeanCallback);
/fragments\MessageFragment.java:268:                    break;
/fragments\MessageFragment.java:269:                case TYPE_AT_ME:
/fragments\MessageFragment.java:270:                    TiebaApi.getInstance().atMe(page).enqueue(messageListBeanCallback);
/fragments\MessageFragment.java:271:                    break;
/fragments\MessageFragment.java:272:            }
/fragments\MessageFragment.java:273:        }
/fragments\MessageFragment.java:275:        private void loadMore() {
/fragments\MessageFragment.java:276:            if (dataBean.getPage().getHasMore().equals("1")) {
/fragments\MessageFragment.java:277:                page += 1;
/fragments\MessageFragment.java:278:                load(false);
/fragments\MessageFragment.java:279:            } else {
/fragments\MessageFragment.java:280:                adapter.loadEnd();
/fragments\MessageFragment.java:281:            }
/fragments\MessageFragment.java:282:        }
/fragments\MessageFragment.java:283:    }
/fragments\MessageFragment.java:284:}/fragments\MyInfoFragment.java:1:package com.huanchengfly.tieba.post.fragments;
/fragments\MyInfoFragment.java:3:import android.app.Activity;
/fragments\MyInfoFragment.java:4:import android.content.Intent;
/fragments\MyInfoFragment.java:5:import android.graphics.Color;
/fragments\MyInfoFragment.java:6:import android.os.Bundle;
/fragments\MyInfoFragment.java:7:import android.text.TextUtils;
/fragments\MyInfoFragment.java:8:import android.util.Log;
/fragments\MyInfoFragment.java:9:import android.view.LayoutInflater;
/fragments\MyInfoFragment.java:10:import android.view.MenuItem;
/fragments\MyInfoFragment.java:11:import android.view.View;
/fragments\MyInfoFragment.java:12:import android.view.ViewGroup;
/fragments\MyInfoFragment.java:13:import android.widget.CompoundButton;
/fragments\MyInfoFragment.java:14:import android.widget.ImageView;
/fragments\MyInfoFragment.java:15:import android.widget.RelativeLayout;
/fragments\MyInfoFragment.java:16:import android.widget.TextView;
/fragments\MyInfoFragment.java:17:import android.widget.Toast;
/fragments\MyInfoFragment.java:19:import androidx.annotation.ColorInt;
/fragments\MyInfoFragment.java:20:import androidx.annotation.NonNull;
/fragments\MyInfoFragment.java:21:import androidx.appcompat.widget.Toolbar;
/fragments\MyInfoFragment.java:22:import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
/fragments\MyInfoFragment.java:24:import com.allen.library.SuperTextView;
/fragments\MyInfoFragment.java:25:import com.bumptech.glide.Glide;
/fragments\MyInfoFragment.java:26:import com.google.android.material.navigation.NavigationView;
/fragments\MyInfoFragment.java:27:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/fragments\MyInfoFragment.java:28:import com.huanchengfly.tieba.post.api.interfaces.CommonCallback;
/fragments\MyInfoFragment.java:29:import com.huanchengfly.tieba.post.activities.MainActivity;
/fragments\MyInfoFragment.java:30:import com.huanchengfly.tieba.post.R;
/fragments\MyInfoFragment.java:31:import com.huanchengfly.tieba.post.activities.WebViewActivity;
/fragments\MyInfoFragment.java:32:import com.huanchengfly.tieba.post.activities.HistoryActivity;
/fragments\MyInfoFragment.java:33:import com.huanchengfly.tieba.post.activities.LoginActivity;
/fragments\MyInfoFragment.java:34:import com.huanchengfly.tieba.post.activities.SettingsActivity;
/fragments\MyInfoFragment.java:35:import com.huanchengfly.tieba.post.activities.ThemeActivity;
/fragments\MyInfoFragment.java:36:import com.huanchengfly.tieba.post.activities.UserActivity;
/fragments\MyInfoFragment.java:37:import com.huanchengfly.tieba.post.activities.UserCollectActivity;
/fragments\MyInfoFragment.java:38:import com.huanchengfly.tieba.post.interfaces.Refreshable;
/fragments\MyInfoFragment.java:39:import com.huanchengfly.tieba.post.models.MyInfoBean;
/fragments\MyInfoFragment.java:40:import com.huanchengfly.tieba.post.models.database.Account;
/fragments\MyInfoFragment.java:41:import com.huanchengfly.tieba.post.utils.AccountUtil;
/fragments\MyInfoFragment.java:42:import com.huanchengfly.tieba.post.utils.ImageUtil;
/fragments\MyInfoFragment.java:43:import com.huanchengfly.tieba.post.utils.NavigationHelper;
/fragments\MyInfoFragment.java:44:import com.huanchengfly.tieba.post.utils.SharedPreferencesUtil;
/fragments\MyInfoFragment.java:45:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/fragments\MyInfoFragment.java:46:import com.huanchengfly.tieba.post.utils.TiebaUtil;
/fragments\MyInfoFragment.java:47:import com.huanchengfly.tieba.post.utils.Util;
/fragments\MyInfoFragment.java:48:import com.huanchengfly.tieba.post.widgets.theme.TintSwitch;
/fragments\MyInfoFragment.java:49:import com.huanchengfly.tieba.post.utils.ColorUtils;
/fragments\MyInfoFragment.java:50:import com.scwang.wave.MultiWaveHeader;
/fragments\MyInfoFragment.java:52:import org.jetbrains.annotations.NotNull;
/fragments\MyInfoFragment.java:54:import java.util.Objects;
/fragments\MyInfoFragment.java:56:import static com.huanchengfly.tieba.post.utils.ThemeUtil.SP_CUSTOM_TOOLBAR_PRIMARY_COLOR;
/fragments\MyInfoFragment.java:57:import static com.huanchengfly.tieba.post.utils.ThemeUtil.THEME_TRANSLUCENT;
/fragments\MyInfoFragment.java:60:public class MyInfoFragment extends BaseFragment implements NavigationView.OnNavigationItemSelectedListener, CompoundButton.OnCheckedChangeListener, Refreshable, Toolbar.OnMenuItemClickListener {
/fragments\MyInfoFragment.java:62:    private static final String TAG = "MyInfoFragment";
/fragments\MyInfoFragment.java:63:    private SwipeRefreshLayout mRefreshView;
/fragments\MyInfoFragment.java:64:    private TextView userNameTextView;
/fragments\MyInfoFragment.java:65:    private ImageView avatarImageView;
/fragments\MyInfoFragment.java:66:    private SuperTextView followsTextView;
/fragments\MyInfoFragment.java:67:    private SuperTextView fansTextView;
/fragments\MyInfoFragment.java:68:    private SuperTextView forumsTextView;
/fragments\MyInfoFragment.java:69:    private SuperTextView threadsTextView;
/fragments\MyInfoFragment.java:70:    private MyInfoBean data;
/fragments\MyInfoFragment.java:71:    private TintSwitch nightSwitch;
/fragments\MyInfoFragment.java:72:    private TextView contentTextView;
/fragments\MyInfoFragment.java:73:    private NavigationHelper navigationHelper;
/fragments\MyInfoFragment.java:74:    private MultiWaveHeader multiWaveHeader;
/fragments\MyInfoFragment.java:76:    public MyInfoFragment() {
/fragments\MyInfoFragment.java:77:    }
/fragments\MyInfoFragment.java:79:    private static int lightenColor(@ColorInt int color) {
/fragments\MyInfoFragment.java:80:        float[] hsv = new float[3];
/fragments\MyInfoFragment.java:81:        Color.colorToHSV(color, hsv);
/fragments\MyInfoFragment.java:82:        hsv[2] = hsv[2] + 0.02f;
/fragments\MyInfoFragment.java:83:        return Color.HSVToColor(hsv);
/fragments\MyInfoFragment.java:84:    }
/fragments\MyInfoFragment.java:86:    @Override
/fragments\MyInfoFragment.java:87:    public void onAccountSwitch() {
/fragments\MyInfoFragment.java:88:        onRefresh();
/fragments\MyInfoFragment.java:89:    }
/fragments\MyInfoFragment.java:91:    @Override
/fragments\MyInfoFragment.java:92:    public void onFragmentVisibleChange(boolean isVisible) {
/fragments\MyInfoFragment.java:93:        if (isVisible) {
/fragments\MyInfoFragment.java:94:            if (data == null) {
/fragments\MyInfoFragment.java:95:                refresh(false);
/fragments\MyInfoFragment.java:96:            }
/fragments\MyInfoFragment.java:97:        }
/fragments\MyInfoFragment.java:98:    }
/fragments\MyInfoFragment.java:100:    @Override
/fragments\MyInfoFragment.java:101:    public void onCreate(Bundle saved) {
/fragments\MyInfoFragment.java:102:        super.onCreate(saved);
/fragments\MyInfoFragment.java:103:        navigationHelper = NavigationHelper.newInstance(getAttachContext());
/fragments\MyInfoFragment.java:104:    }
/fragments\MyInfoFragment.java:106:    @Override
/fragments\MyInfoFragment.java:107:    public void onStart() {
/fragments\MyInfoFragment.java:108:        super.onStart();
/fragments\MyInfoFragment.java:109:        boolean primary = SharedPreferencesUtil.get(getAttachContext(), SharedPreferencesUtil.SP_SETTINGS)
/fragments\MyInfoFragment.java:110:                .getBoolean(SP_CUSTOM_TOOLBAR_PRIMARY_COLOR, true);
/fragments\MyInfoFragment.java:111:        String theme = ThemeUtil.getTheme(getAttachContext());
/fragments\MyInfoFragment.java:112:        int bgColor = ThemeUtils.getColorByAttr(getAttachContext(), R.attr.colorBg);
/fragments\MyInfoFragment.java:113:        int toolbarColor = ThemeUtils.getColorByAttr(getAttachContext(), R.attr.colorToolbar);
/fragments\MyInfoFragment.java:114:        if (bgColor == toolbarColor || THEME_TRANSLUCENT.equals(ThemeUtil.getTheme(getAttachContext()))) {
/fragments\MyInfoFragment.java:115:            multiWaveHeader.setVisibility(View.GONE);
/fragments\MyInfoFragment.java:116:        } else {
/fragments\MyInfoFragment.java:117:            multiWaveHeader.setVisibility(View.VISIBLE);
/fragments\MyInfoFragment.java:118:        }
/fragments\MyInfoFragment.java:119:        multiWaveHeader.setStartColor(toolbarColor);
/fragments\MyInfoFragment.java:120:        multiWaveHeader.setCloseColor(ColorUtils.getDarkerColor(toolbarColor));
/fragments\MyInfoFragment.java:121:    }
/fragments\MyInfoFragment.java:123:    @Override
/fragments\MyInfoFragment.java:124:    public void onFragmentFirstVisible() {
/fragments\MyInfoFragment.java:125:        refresh(true);
/fragments\MyInfoFragment.java:126:    }
/fragments\MyInfoFragment.java:128:    private void refresh(boolean needLogin) {
/fragments\MyInfoFragment.java:129:        mRefreshView.setEnabled(true);
/fragments\MyInfoFragment.java:130:        mRefreshView.setRefreshing(true);
/fragments\MyInfoFragment.java:131:        if (AccountUtil.isLoggedIn(getAttachContext())) {
/fragments\MyInfoFragment.java:132:            String bduss = AccountUtil.getBduss(getAttachContext());
/fragments\MyInfoFragment.java:133:            if (bduss != null) {
/fragments\MyInfoFragment.java:134:                AccountUtil.updateUserInfoByBduss(getAttachContext(), bduss, new CommonCallback<MyInfoBean>() {
/fragments\MyInfoFragment.java:135:                    @Override
/fragments\MyInfoFragment.java:136:                    public void onSuccess(MyInfoBean myInfoBean) {
/fragments\MyInfoFragment.java:137:                        if (myInfoBean.getErrorCode() == 0) {
/fragments\MyInfoFragment.java:138:                            data = myInfoBean;
/fragments\MyInfoFragment.java:139:                            userNameTextView.setText(data.getData().getShowName());
/fragments\MyInfoFragment.java:140:                            followsTextView.setCenterString(data.getData().getConcernNum());
/fragments\MyInfoFragment.java:141:                            followsTextView.getCenterTextView().setTextAppearance(getAttachContext(), R.style.TextAppearance_Bold);
/fragments\MyInfoFragment.java:142:                            fansTextView.setCenterString(data.getData().getFansNum());
/fragments\MyInfoFragment.java:143:                            fansTextView.getCenterTextView().setTextAppearance(getAttachContext(), R.style.TextAppearance_Bold);
/fragments\MyInfoFragment.java:144:                            forumsTextView.setCenterString(data.getData().getLikeForumNum());
/fragments\MyInfoFragment.java:145:                            forumsTextView.getCenterTextView().setTextAppearance(getAttachContext(), R.style.TextAppearance_Bold);
/fragments\MyInfoFragment.java:146:                            threadsTextView.setCenterString(data.getData().getPostNum());
/fragments\MyInfoFragment.java:147:                            threadsTextView.getCenterTextView().setTextAppearance(getAttachContext(), R.style.TextAppearance_Bold);
/fragments\MyInfoFragment.java:148:                            if (TextUtils.isEmpty(data.getData().getIntro())) {
/fragments\MyInfoFragment.java:149:                                data.getData().setIntro(getAttachContext().getResources().getString(R.string.tip_no_intro));
/fragments\MyInfoFragment.java:150:                            }
/fragments\MyInfoFragment.java:151:                            contentTextView.setText(data.getData().getIntro());
/fragments\MyInfoFragment.java:152:                            if (Util.canLoadGlide(getAttachContext())) {
/fragments\MyInfoFragment.java:153:                                Glide.with(getAttachContext()).clear(avatarImageView);
/fragments\MyInfoFragment.java:154:                                ImageUtil.load(avatarImageView, ImageUtil.LOAD_TYPE_AVATAR, data.getData().getAvatarUrl());
/fragments\MyInfoFragment.java:155:                            }
/fragments\MyInfoFragment.java:156:                            mRefreshView.setRefreshing(false);
/fragments\MyInfoFragment.java:157:                        }
/fragments\MyInfoFragment.java:158:                    }
/fragments\MyInfoFragment.java:160:                    @Override
/fragments\MyInfoFragment.java:161:                    public void onFailure(int code, String error) {
/fragments\MyInfoFragment.java:162:                        mRefreshView.setRefreshing(false);
/fragments\MyInfoFragment.java:163:                        if (code == 0) {
/fragments\MyInfoFragment.java:164:                            Util.showNetworkErrorSnackbar(mRefreshView, () -> refresh(needLogin));
/fragments\MyInfoFragment.java:165:                            return;
/fragments\MyInfoFragment.java:166:                        }
/fragments\MyInfoFragment.java:167:                        Toast.makeText(getAttachContext(), "错误 " + error, Toast.LENGTH_SHORT).show();
/fragments\MyInfoFragment.java:168:                    }
/fragments\MyInfoFragment.java:169:                });
/fragments\MyInfoFragment.java:170:            }
/fragments\MyInfoFragment.java:171:        } else {
/fragments\MyInfoFragment.java:172:            if (needLogin) {
/fragments\MyInfoFragment.java:173:                Intent intent = new Intent(getAttachContext(), LoginActivity.class);
/fragments\MyInfoFragment.java:174:                getAttachContext().startActivity(intent);
/fragments\MyInfoFragment.java:175:            }
/fragments\MyInfoFragment.java:176:            Toast.makeText(getAttachContext(), R.string.tip_login, Toast.LENGTH_SHORT).show();
/fragments\MyInfoFragment.java:177:            Glide.with(getAttachContext()).clear(avatarImageView);
/fragments\MyInfoFragment.java:178:            userNameTextView.setText(R.string.tip_login);
/fragments\MyInfoFragment.java:179:            mRefreshView.setRefreshing(false);
/fragments\MyInfoFragment.java:180:        }
/fragments\MyInfoFragment.java:181:    }
/fragments\MyInfoFragment.java:183:    @Override
/fragments\MyInfoFragment.java:184:    int getLayoutId() {
/fragments\MyInfoFragment.java:185:        return R.layout.fragment_my_info;
/fragments\MyInfoFragment.java:186:    }
/fragments\MyInfoFragment.java:188:    @NotNull
/fragments\MyInfoFragment.java:189:    @Override
/fragments\MyInfoFragment.java:190:    public View onCreateView(@NotNull LayoutInflater inflater, ViewGroup container,
/fragments\MyInfoFragment.java:191:                             Bundle savedInstanceState) {
/fragments\MyInfoFragment.java:192:        View contentView = super.onCreateView(inflater, container, savedInstanceState);
/fragments\MyInfoFragment.java:193:        multiWaveHeader = contentView.findViewById(R.id.wave_header);
/fragments\MyInfoFragment.java:194:        RelativeLayout cardView = contentView.findViewById(R.id.my_info);
/fragments\MyInfoFragment.java:195:        cardView.setOnClickListener((View view) -> {
/fragments\MyInfoFragment.java:196:            if (AccountUtil.isLoggedIn(getAttachContext())) {
/fragments\MyInfoFragment.java:197:                if (data != null) {
/fragments\MyInfoFragment.java:198:                    NavigationHelper.toUserSpaceWithAnim(getAttachContext(), String.valueOf(data.getData().getUid()), data.getData().getAvatarUrl(), avatarImageView);
/fragments\MyInfoFragment.java:199:                } else {
/fragments\MyInfoFragment.java:200:                    Account loginInfo = Objects.requireNonNull(AccountUtil.getLoginInfo(getAttachContext()));
/fragments\MyInfoFragment.java:201:                    NavigationHelper.toUserSpaceWithAnim(getAttachContext(), String.valueOf(loginInfo.getUid()), loginInfo.getPortrait(), avatarImageView);
/fragments\MyInfoFragment.java:202:                }
/fragments\MyInfoFragment.java:203:            } else {
/fragments\MyInfoFragment.java:204:                getAttachContext().startActivity(new Intent(getAttachContext(), LoginActivity.class));
/fragments\MyInfoFragment.java:205:            }
/fragments\MyInfoFragment.java:206:        });
/fragments\MyInfoFragment.java:207:        mRefreshView = contentView.findViewById(R.id.my_refresh);
/fragments\MyInfoFragment.java:208:        ThemeUtil.setThemeForSwipeRefreshLayout(mRefreshView);
/fragments\MyInfoFragment.java:209:        Toolbar toolbar = contentView.findViewById(R.id.toolbar);
/fragments\MyInfoFragment.java:210:        toolbar.setNavigationIcon(null);
/fragments\MyInfoFragment.java:211:        toolbar.setTitle(R.string.title_user);
/fragments\MyInfoFragment.java:212:        toolbar.inflateMenu(R.menu.toolbar_menu);
/fragments\MyInfoFragment.java:213:        toolbar.setOnMenuItemClickListener(this);
/fragments\MyInfoFragment.java:214:        followsTextView = contentView.findViewById(R.id.my_info_grid_follows);
/fragments\MyInfoFragment.java:215:        fansTextView = contentView.findViewById(R.id.my_info_grid_fans);
/fragments\MyInfoFragment.java:216:        forumsTextView = contentView.findViewById(R.id.my_info_grid_forums);
/fragments\MyInfoFragment.java:217:        threadsTextView = contentView.findViewById(R.id.my_info_grid_threads);
/fragments\MyInfoFragment.java:218:        userNameTextView = contentView.findViewById(R.id.my_info_username);
/fragments\MyInfoFragment.java:219:        contentTextView = contentView.findViewById(R.id.my_info_content);
/fragments\MyInfoFragment.java:220:        avatarImageView = contentView.findViewById(R.id.my_info_avatar);
/fragments\MyInfoFragment.java:221:        followsTextView.setOnSuperTextViewClickListener(view -> {
/fragments\MyInfoFragment.java:222:            navigationHelper.navigationByData(NavigationHelper.ACTION_URL, getAttachContext().getResources().getString(R.string.url_user_home, data.getData().getName(), 2));
/fragments\MyInfoFragment.java:223:        });
/fragments\MyInfoFragment.java:224:        fansTextView.setOnSuperTextViewClickListener(view -> {
/fragments\MyInfoFragment.java:225:            navigationHelper.navigationByData(NavigationHelper.ACTION_URL, getAttachContext().getResources().getString(R.string.url_user_home, data.getData().getName(), 3));
/fragments\MyInfoFragment.java:226:        });
/fragments\MyInfoFragment.java:227:        forumsTextView.setOnSuperTextViewClickListener(view -> {
/fragments\MyInfoFragment.java:228:            Log.i(TAG, "onCreateView: " + data.getData().getUid());
/fragments\MyInfoFragment.java:229:            getAttachContext().startActivity(new Intent(getAttachContext(), UserActivity.class).putExtra(UserActivity.EXTRA_UID, String.valueOf(data.getData().getUid())).putExtra(UserActivity.EXTRA_TAB, UserActivity.TAB_LIKE_FORUM));
/fragments\MyInfoFragment.java:230:        });
/fragments\MyInfoFragment.java:231:        threadsTextView.setOnSuperTextViewClickListener(view -> {
/fragments\MyInfoFragment.java:232:            Log.i(TAG, "onCreateView: " + data.getData().getUid());
/fragments\MyInfoFragment.java:233:            getAttachContext().startActivity(new Intent(getAttachContext(), UserActivity.class).putExtra(UserActivity.EXTRA_UID, String.valueOf(data.getData().getUid())).putExtra(UserActivity.EXTRA_TAB, UserActivity.TAB_THREAD));
/fragments\MyInfoFragment.java:234:        });
/fragments\MyInfoFragment.java:235:        NavigationView navigationView = contentView.findViewById(R.id.my_info_navigation);
/fragments\MyInfoFragment.java:236:        navigationView.setItemIconTintList(null);
/fragments\MyInfoFragment.java:237:        navigationView.setNavigationItemSelectedListener(this);
/fragments\MyInfoFragment.java:238:        nightSwitch = navigationView.getMenu().getItem(2).getActionView().findViewById(R.id.my_info_night_switch);
/fragments\MyInfoFragment.java:239:        nightSwitch.setOnCheckedChangeListener(null);
/fragments\MyInfoFragment.java:240:        nightSwitch.setChecked(ThemeUtil.isNightMode(getAttachContext()));
/fragments\MyInfoFragment.java:241:        nightSwitch.setOnCheckedChangeListener(this);
/fragments\MyInfoFragment.java:242:        mRefreshView.setOnRefreshListener(() -> {
/fragments\MyInfoFragment.java:243:            mRefreshView.setRefreshing(true);
/fragments\MyInfoFragment.java:244:            refresh(true);
/fragments\MyInfoFragment.java:245:        });
/fragments\MyInfoFragment.java:246:        return contentView;
/fragments\MyInfoFragment.java:247:    }
/fragments\MyInfoFragment.java:249:    @Override
/fragments\MyInfoFragment.java:250:    public void onResume() {
/fragments\MyInfoFragment.java:251:        super.onResume();
/fragments\MyInfoFragment.java:252:        nightSwitch.setOnCheckedChangeListener(null);
/fragments\MyInfoFragment.java:253:        nightSwitch.setChecked(ThemeUtil.isNightMode(getAttachContext()));
/fragments\MyInfoFragment.java:254:        nightSwitch.setOnCheckedChangeListener(this);
/fragments\MyInfoFragment.java:255:    }
/fragments\MyInfoFragment.java:257:    @Override
/fragments\MyInfoFragment.java:258:    public boolean onNavigationItemSelected(@NonNull MenuItem item) {
/fragments\MyInfoFragment.java:259:        switch (item.getItemId()) {
/fragments\MyInfoFragment.java:260:            case R.id.my_info_collect:
/fragments\MyInfoFragment.java:261:                getAttachContext().startActivity(new Intent(getAttachContext(), UserCollectActivity.class));
/fragments\MyInfoFragment.java:262:                return true;
/fragments\MyInfoFragment.java:263:            case R.id.my_info_theme:
/fragments\MyInfoFragment.java:264:                getAttachContext().startActivity(new Intent(getAttachContext(), ThemeActivity.class));
/fragments\MyInfoFragment.java:265:                return true;
/fragments\MyInfoFragment.java:266:            case R.id.my_info_history:
/fragments\MyInfoFragment.java:267:                getAttachContext().startActivity(new Intent(getAttachContext(), HistoryActivity.class));
/fragments\MyInfoFragment.java:268:                return true;
/fragments\MyInfoFragment.java:269:            case R.id.my_info_service_center:
/fragments\MyInfoFragment.java:270:                getAttachContext().startActivity(new Intent(getAttachContext(), WebViewActivity.class).putExtra("url", "http://tieba.baidu.com/n/apage-runtime/page/ueg_service_center"));
/fragments\MyInfoFragment.java:271:                return true;
/fragments\MyInfoFragment.java:272:            case R.id.menu_test:
/fragments\MyInfoFragment.java:273:                //getAttachContext().startActivity(new Intent(getAttachContext(), WebViewActivity.class).putExtra("url", "https://jq.qq.com/?_wv=1027&k=5EuZWD8"));
/fragments\MyInfoFragment.java:274:                return true;
/fragments\MyInfoFragment.java:275:            case R.id.my_info_settings:
/fragments\MyInfoFragment.java:276:                getAttachContext().startActivity(new Intent(getAttachContext(), SettingsActivity.class));
/fragments\MyInfoFragment.java:277:                return true;
/fragments\MyInfoFragment.java:278:        }
/fragments\MyInfoFragment.java:279:        return false;
/fragments\MyInfoFragment.java:280:    }
/fragments\MyInfoFragment.java:282:    @Override
/fragments\MyInfoFragment.java:283:    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
/fragments\MyInfoFragment.java:284:        if (isChecked) {
/fragments\MyInfoFragment.java:285:            ThemeUtil.switchToNightMode((Activity) getAttachContext());
/fragments\MyInfoFragment.java:286:        } else {
/fragments\MyInfoFragment.java:287:            ThemeUtil.switchFromNightMode((Activity) getAttachContext());
/fragments\MyInfoFragment.java:288:        }
/fragments\MyInfoFragment.java:289:    }
/fragments\MyInfoFragment.java:291:    @Override
/fragments\MyInfoFragment.java:292:    public void onRefresh() {
/fragments\MyInfoFragment.java:293:        if (isFragmentVisible()) {
/fragments\MyInfoFragment.java:294:            refresh(true);
/fragments\MyInfoFragment.java:295:        } else {
/fragments\MyInfoFragment.java:296:            data = null;
/fragments\MyInfoFragment.java:297:        }
/fragments\MyInfoFragment.java:298:    }
/fragments\MyInfoFragment.java:300:    @Override
/fragments\MyInfoFragment.java:301:    public boolean hasOwnAppbar() {
/fragments\MyInfoFragment.java:302:        return true;
/fragments\MyInfoFragment.java:303:    }
/fragments\MyInfoFragment.java:305:    @Override
/fragments\MyInfoFragment.java:306:    public boolean onMenuItemClick(MenuItem item) {
/fragments\MyInfoFragment.java:307:        switch (item.getItemId()) {
/fragments\MyInfoFragment.java:308:            case R.id.menu_sign:
/fragments\MyInfoFragment.java:309:                TiebaUtil.startSign(getAttachContext());
/fragments\MyInfoFragment.java:310:                return true;
/fragments\MyInfoFragment.java:311:            case R.id.action_search:
/fragments\MyInfoFragment.java:312:                ((MainActivity) getAttachContext()).openSearch();
/fragments\MyInfoFragment.java:313:                return true;
/fragments\MyInfoFragment.java:314:        }
/fragments\MyInfoFragment.java:315:        return false;
/fragments\MyInfoFragment.java:316:    }
/fragments\MyInfoFragment.java:317:}/fragments\PhotoViewFragment.java:1:package com.huanchengfly.tieba.post.fragments;
/fragments\PhotoViewFragment.java:3:import android.annotation.SuppressLint;
/fragments\PhotoViewFragment.java:4:import android.content.DialogInterface;
/fragments\PhotoViewFragment.java:5:import android.graphics.Bitmap;
/fragments\PhotoViewFragment.java:6:import android.graphics.PointF;
/fragments\PhotoViewFragment.java:7:import android.graphics.drawable.Drawable;
/fragments\PhotoViewFragment.java:8:import android.os.Bundle;
/fragments\PhotoViewFragment.java:9:import android.view.View;
/fragments\PhotoViewFragment.java:10:import android.widget.Toast;
/fragments\PhotoViewFragment.java:12:import androidx.annotation.NonNull;
/fragments\PhotoViewFragment.java:13:import androidx.annotation.Nullable;
/fragments\PhotoViewFragment.java:14:import androidx.core.widget.ContentLoadingProgressBar;
/fragments\PhotoViewFragment.java:16:import com.bumptech.glide.Glide;
/fragments\PhotoViewFragment.java:17:import com.bumptech.glide.load.DataSource;
/fragments\PhotoViewFragment.java:18:import com.bumptech.glide.load.engine.GlideException;
/fragments\PhotoViewFragment.java:19:import com.bumptech.glide.request.RequestListener;
/fragments\PhotoViewFragment.java:20:import com.bumptech.glide.request.RequestOptions;
/fragments\PhotoViewFragment.java:21:import com.bumptech.glide.request.target.CustomViewTarget;
/fragments\PhotoViewFragment.java:22:import com.bumptech.glide.request.target.Target;
/fragments\PhotoViewFragment.java:23:import com.bumptech.glide.request.transition.Transition;
/fragments\PhotoViewFragment.java:24:import com.davemorrissey.labs.subscaleview.ImageSource;
/fragments\PhotoViewFragment.java:25:import com.davemorrissey.labs.subscaleview.ImageViewState;
/fragments\PhotoViewFragment.java:26:import com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView;
/fragments\PhotoViewFragment.java:27:import com.huanchengfly.tieba.post.BaseApplication;
/fragments\PhotoViewFragment.java:28:import com.huanchengfly.tieba.post.R;
/fragments\PhotoViewFragment.java:29:import com.huanchengfly.tieba.post.models.PhotoViewBean;
/fragments\PhotoViewFragment.java:30:import com.huanchengfly.tieba.post.utils.DialogUtil;
/fragments\PhotoViewFragment.java:31:import com.huanchengfly.tieba.post.utils.ImageUtil;
/fragments\PhotoViewFragment.java:32:import com.huanchengfly.tieba.post.widgets.MyPhotoView;
/fragments\PhotoViewFragment.java:34:import butterknife.BindView;
/fragments\PhotoViewFragment.java:36:public class PhotoViewFragment extends BaseFragment {
/fragments\PhotoViewFragment.java:37:    public static final String TAG = PhotoViewFragment.class.getSimpleName();
/fragments\PhotoViewFragment.java:38:    private static final String ARG_INFO = "info";
/fragments\PhotoViewFragment.java:39:    private final RequestOptions requestOptions = new RequestOptions().skipMemoryCache(true);
/fragments\PhotoViewFragment.java:40:    @BindView(R.id.photo_view)
/fragments\PhotoViewFragment.java:41:    public MyPhotoView myPhotoView;
/fragments\PhotoViewFragment.java:42:    @BindView(R.id.scale_image_view)
/fragments\PhotoViewFragment.java:43:    public SubsamplingScaleImageView scaleImageView;
/fragments\PhotoViewFragment.java:44:    @BindView(R.id.progressbar)
/fragments\PhotoViewFragment.java:45:    public ContentLoadingProgressBar progressBar;
/fragments\PhotoViewFragment.java:46:    private PhotoViewBean photoViewBean;
/fragments\PhotoViewFragment.java:48:    public PhotoViewFragment() {
/fragments\PhotoViewFragment.java:49:    }
/fragments\PhotoViewFragment.java:51:    public static PhotoViewFragment newInstance(PhotoViewBean photoViewBean) {
/fragments\PhotoViewFragment.java:52:        PhotoViewFragment fragment = new PhotoViewFragment();
/fragments\PhotoViewFragment.java:53:        Bundle args = new Bundle();
/fragments\PhotoViewFragment.java:54:        args.putParcelable(ARG_INFO, photoViewBean);
/fragments\PhotoViewFragment.java:55:        fragment.setArguments(args);
/fragments\PhotoViewFragment.java:56:        return fragment;
/fragments\PhotoViewFragment.java:57:    }
/fragments\PhotoViewFragment.java:59:    public PhotoViewBean getPhotoViewBean() {
/fragments\PhotoViewFragment.java:60:        return photoViewBean;
/fragments\PhotoViewFragment.java:61:    }
/fragments\PhotoViewFragment.java:63:    @Override
/fragments\PhotoViewFragment.java:64:    public void onCreate(Bundle savedInstanceState) {
/fragments\PhotoViewFragment.java:65:        super.onCreate(savedInstanceState);
/fragments\PhotoViewFragment.java:66:        if (getArguments() != null) {
/fragments\PhotoViewFragment.java:67:            photoViewBean = getArguments().getParcelable(ARG_INFO);
/fragments\PhotoViewFragment.java:68:        }
/fragments\PhotoViewFragment.java:69:    }
/fragments\PhotoViewFragment.java:71:    @Override
/fragments\PhotoViewFragment.java:72:    int getLayoutId() {
/fragments\PhotoViewFragment.java:73:        return R.layout.fragment_photo_view;
/fragments\PhotoViewFragment.java:74:    }
/fragments\PhotoViewFragment.java:76:    @Override
/fragments\PhotoViewFragment.java:77:    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
/fragments\PhotoViewFragment.java:78:        if (!canLoad()) return;
/fragments\PhotoViewFragment.java:79:        if (photoViewBean.isLongPic()) {
/fragments\PhotoViewFragment.java:80:            loadBySubsamplingScaleImageView();
/fragments\PhotoViewFragment.java:81:        } else {
/fragments\PhotoViewFragment.java:82:            loadByMyPhotoView();
/fragments\PhotoViewFragment.java:83:        }
/fragments\PhotoViewFragment.java:84:    }
/fragments\PhotoViewFragment.java:86:    private void showBottomBar(boolean autoHide) {
/fragments\PhotoViewFragment.java:87:        if (getAttachContext() instanceof OnChangeBottomBarVisibilityListener) {
/fragments\PhotoViewFragment.java:88:            ((OnChangeBottomBarVisibilityListener) getAttachContext()).onShow(autoHide);
/fragments\PhotoViewFragment.java:89:        }
/fragments\PhotoViewFragment.java:90:    }
/fragments\PhotoViewFragment.java:92:    @SuppressLint("ClickableViewAccessibility")
/fragments\PhotoViewFragment.java:93:    private void loadByMyPhotoView() {
/fragments\PhotoViewFragment.java:94:        if (!canLoad()) return;
/fragments\PhotoViewFragment.java:95:        myPhotoView.setVisibility(View.VISIBLE);
/fragments\PhotoViewFragment.java:96:        scaleImageView.setVisibility(View.GONE);
/fragments\PhotoViewFragment.java:97:        myPhotoView.enable();
/fragments\PhotoViewFragment.java:98:        myPhotoView.setOnDispatchTouchEvent(event -> {
/fragments\PhotoViewFragment.java:99:            showBottomBar(true);
/fragments\PhotoViewFragment.java:100:        });
/fragments\PhotoViewFragment.java:101:        myPhotoView.setOnLongClickListener(v -> {
/fragments\PhotoViewFragment.java:102:            showBottomBar(false);
/fragments\PhotoViewFragment.java:103:            openDialog(photoViewBean);
/fragments\PhotoViewFragment.java:104:            return true;
/fragments\PhotoViewFragment.java:105:        });
/fragments\PhotoViewFragment.java:106:        myPhotoView.setOnClickListener(view -> {
/fragments\PhotoViewFragment.java:107:            if (getActivity() != null) {
/fragments\PhotoViewFragment.java:108:                getActivity().finish();
/fragments\PhotoViewFragment.java:109:            }
/fragments\PhotoViewFragment.java:110:        });
/fragments\PhotoViewFragment.java:111:        Glide.with(this)
/fragments\PhotoViewFragment.java:112:                .load(photoViewBean.getOriginUrl())
/fragments\PhotoViewFragment.java:113:                .apply(requestOptions)
/fragments\PhotoViewFragment.java:114:                .listener(new RequestListener<Drawable>() {
/fragments\PhotoViewFragment.java:115:                    @Override
/fragments\PhotoViewFragment.java:116:                    public boolean onLoadFailed(@Nullable GlideException e, Object model, Target<Drawable> target, boolean isFirstResource) {
/fragments\PhotoViewFragment.java:117:                        Toast.makeText(getAttachContext(), R.string.toast_load_failed, Toast.LENGTH_SHORT).show();
/fragments\PhotoViewFragment.java:118:                        progressBar.setVisibility(View.GONE);
/fragments\PhotoViewFragment.java:119:                        return false;
/fragments\PhotoViewFragment.java:120:                    }
/fragments\PhotoViewFragment.java:122:                    @Override
/fragments\PhotoViewFragment.java:123:                    public boolean onResourceReady(Drawable resource, Object model, Target<Drawable> target, DataSource dataSource, boolean isFirstResource) {
/fragments\PhotoViewFragment.java:124:                        progressBar.setVisibility(View.GONE);
/fragments\PhotoViewFragment.java:125:                        return false;
/fragments\PhotoViewFragment.java:126:                    }
/fragments\PhotoViewFragment.java:127:                })
/fragments\PhotoViewFragment.java:128:                .apply(requestOptions)
/fragments\PhotoViewFragment.java:129:                .into(myPhotoView);
/fragments\PhotoViewFragment.java:130:        myPhotoView.setOnPhotoErrorListener(e -> loadBySubsamplingScaleImageView());
/fragments\PhotoViewFragment.java:131:    }
/fragments\PhotoViewFragment.java:133:    private void loadBySubsamplingScaleImageView() {
/fragments\PhotoViewFragment.java:134:        if (!canLoad()) return;
/fragments\PhotoViewFragment.java:135:        myPhotoView.setVisibility(View.GONE);
/fragments\PhotoViewFragment.java:136:        scaleImageView.setVisibility(View.VISIBLE);
/fragments\PhotoViewFragment.java:137:        scaleImageView.setOnLongClickListener(v -> {
/fragments\PhotoViewFragment.java:138:            showBottomBar(false);
/fragments\PhotoViewFragment.java:139:            openDialog(photoViewBean);
/fragments\PhotoViewFragment.java:140:            return true;
/fragments\PhotoViewFragment.java:141:        });
/fragments\PhotoViewFragment.java:142:        scaleImageView.setOnClickListener(view -> {
/fragments\PhotoViewFragment.java:143:            if (getActivity() != null) {
/fragments\PhotoViewFragment.java:144:                getActivity().finish();
/fragments\PhotoViewFragment.java:145:            }
/fragments\PhotoViewFragment.java:146:        });
/fragments\PhotoViewFragment.java:147:        Glide.with(this)
/fragments\PhotoViewFragment.java:148:                .asBitmap()
/fragments\PhotoViewFragment.java:149:                .load(photoViewBean.getOriginUrl())
/fragments\PhotoViewFragment.java:150:                .apply(requestOptions)
/fragments\PhotoViewFragment.java:151:                .listener(new RequestListener<Bitmap>() {
/fragments\PhotoViewFragment.java:152:                    @Override
/fragments\PhotoViewFragment.java:153:                    public boolean onLoadFailed(@Nullable GlideException e, Object model, Target<Bitmap> target, boolean isFirstResource) {
/fragments\PhotoViewFragment.java:154:                        Toast.makeText(getAttachContext(), R.string.toast_load_failed, Toast.LENGTH_SHORT).show();
/fragments\PhotoViewFragment.java:155:                        progressBar.setVisibility(View.GONE);
/fragments\PhotoViewFragment.java:156:                        return false;
/fragments\PhotoViewFragment.java:157:                    }
/fragments\PhotoViewFragment.java:159:                    @Override
/fragments\PhotoViewFragment.java:160:                    public boolean onResourceReady(Bitmap resource, Object model, Target<Bitmap> target, DataSource dataSource, boolean isFirstResource) {
/fragments\PhotoViewFragment.java:161:                        progressBar.setVisibility(View.GONE);
/fragments\PhotoViewFragment.java:162:                        return false;
/fragments\PhotoViewFragment.java:163:                    }
/fragments\PhotoViewFragment.java:164:                })
/fragments\PhotoViewFragment.java:165:                .into(new CustomViewTarget<SubsamplingScaleImageView, Bitmap>(scaleImageView) {
/fragments\PhotoViewFragment.java:166:                    @Override
/fragments\PhotoViewFragment.java:167:                    public void onLoadFailed(@Nullable Drawable errorDrawable) {
/fragments\PhotoViewFragment.java:168:                    }
/fragments\PhotoViewFragment.java:170:                    @Override
/fragments\PhotoViewFragment.java:171:                    public void onResourceReady(@NonNull Bitmap resource, @Nullable Transition<? super Bitmap> transition) {
/fragments\PhotoViewFragment.java:172:                        scaleImageView.setImage(ImageSource.bitmap(resource), new ImageViewState(getInitImageScale(resource), new PointF(0, 0), 0));
/fragments\PhotoViewFragment.java:173:                    }
/fragments\PhotoViewFragment.java:175:                    @Override
/fragments\PhotoViewFragment.java:176:                    protected void onResourceCleared(@Nullable Drawable placeholder) {
/fragments\PhotoViewFragment.java:177:                    }
/fragments\PhotoViewFragment.java:178:                });
/fragments\PhotoViewFragment.java:179:    }
/fragments\PhotoViewFragment.java:181:    private float getInitImageScale(Bitmap bitmap) {
/fragments\PhotoViewFragment.java:182:        int width = BaseApplication.ScreenInfo.EXACT_SCREEN_WIDTH;
/fragments\PhotoViewFragment.java:183:        int height = BaseApplication.ScreenInfo.EXACT_SCREEN_HEIGHT;
/fragments\PhotoViewFragment.java:184:        float scale = 1.0f;
/fragments\PhotoViewFragment.java:185:        if (bitmap == null) return scale;
/fragments\PhotoViewFragment.java:186:        // 拿到图片的宽和高
/fragments\PhotoViewFragment.java:187:        int dw = bitmap.getWidth();
/fragments\PhotoViewFragment.java:188:        int dh = bitmap.getHeight();
/fragments\PhotoViewFragment.java:189:        //图片宽度大于屏幕，但高度小于屏幕，则缩小图片至填满屏幕宽
/fragments\PhotoViewFragment.java:190:        if (dw > width && dh <= height) {
/fragments\PhotoViewFragment.java:191:            scale = width * 1.0f / dw;
/fragments\PhotoViewFragment.java:192:        }
/fragments\PhotoViewFragment.java:193:        //图片宽度小于屏幕，但高度大于屏幕，则放大图片至填满屏幕宽
/fragments\PhotoViewFragment.java:194:        if (dw <= width && dh > height) {
/fragments\PhotoViewFragment.java:195:            scale = width * 1.0f / dw;
/fragments\PhotoViewFragment.java:196:        }
/fragments\PhotoViewFragment.java:197:        //图片高度和宽度都小于屏幕，则放大图片至填满屏幕宽
/fragments\PhotoViewFragment.java:198:        if (dw < width && dh < height) {
/fragments\PhotoViewFragment.java:199:            scale = width * 1.0f / dw;
/fragments\PhotoViewFragment.java:200:        }
/fragments\PhotoViewFragment.java:201:        //图片高度和宽度都大于屏幕，则缩小图片至填满屏幕宽
/fragments\PhotoViewFragment.java:202:        if (dw > width && dh > height) {
/fragments\PhotoViewFragment.java:203:            scale = width * 1.0f / dw;
/fragments\PhotoViewFragment.java:204:        }
/fragments\PhotoViewFragment.java:205:        return scale;
/fragments\PhotoViewFragment.java:206:    }
/fragments\PhotoViewFragment.java:208:    @Override
/fragments\PhotoViewFragment.java:209:    public void onDestroyView() {
/fragments\PhotoViewFragment.java:210:        super.onDestroyView();
/fragments\PhotoViewFragment.java:211:        Glide.with(this).clear(myPhotoView);
/fragments\PhotoViewFragment.java:212:        Glide.with(this).clear(scaleImageView);
/fragments\PhotoViewFragment.java:213:    }
/fragments\PhotoViewFragment.java:215:    private boolean canLoad() {
/fragments\PhotoViewFragment.java:216:        return getActivity() != null && !getActivity().isDestroyed() && !getActivity().isFinishing();
/fragments\PhotoViewFragment.java:217:    }
/fragments\PhotoViewFragment.java:219:    private void openDialog(PhotoViewBean photoViewBean) {
/fragments\PhotoViewFragment.java:220:        if (!canLoad()) {
/fragments\PhotoViewFragment.java:221:            return;
/fragments\PhotoViewFragment.java:222:        }
/fragments\PhotoViewFragment.java:223:        final String[] strArray = new String[]{getAttachContext().getString(R.string.menu_save_photo)};
/fragments\PhotoViewFragment.java:224:        DialogUtil.build(getAttachContext())
/fragments\PhotoViewFragment.java:225:                .setItems(strArray, (DialogInterface dialog, int which) -> {
/fragments\PhotoViewFragment.java:226:                    switch (which) {
/fragments\PhotoViewFragment.java:227:                        case 0:
/fragments\PhotoViewFragment.java:228:                            ImageUtil.download(getAttachContext(), photoViewBean.getOriginUrl(), photoViewBean.isGif());
/fragments\PhotoViewFragment.java:229:                            break;
/fragments\PhotoViewFragment.java:230:                    }
/fragments\PhotoViewFragment.java:231:                })
/fragments\PhotoViewFragment.java:232:                .create()
/fragments\PhotoViewFragment.java:233:                .show();
/fragments\PhotoViewFragment.java:234:    }
/fragments\PhotoViewFragment.java:236:    public interface OnChangeBottomBarVisibilityListener {
/fragments\PhotoViewFragment.java:237:        void onShow(boolean autoHide);
/fragments\PhotoViewFragment.java:239:        void onHide();
/fragments\PhotoViewFragment.java:240:    }
/fragments\PhotoViewFragment.java:241:}
/fragments\SearchForumFragment.java:1:package com.huanchengfly.tieba.post.fragments;
/fragments\SearchForumFragment.java:4:import android.os.Bundle;
/fragments\SearchForumFragment.java:5:import android.view.View;
/fragments\SearchForumFragment.java:6:import android.widget.Toast;
/fragments\SearchForumFragment.java:8:import androidx.annotation.NonNull;
/fragments\SearchForumFragment.java:9:import androidx.annotation.Nullable;
/fragments\SearchForumFragment.java:10:import androidx.recyclerview.widget.RecyclerView;
/fragments\SearchForumFragment.java:11:import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
/fragments\SearchForumFragment.java:13:import com.huanchengfly.tieba.post.api.TiebaApi;
/fragments\SearchForumFragment.java:14:import com.huanchengfly.tieba.post.api.models.SearchForumBean;
/fragments\SearchForumFragment.java:15:import com.huanchengfly.tieba.post.R;
/fragments\SearchForumFragment.java:16:import com.huanchengfly.tieba.post.adapters.SearchForumAdapter;
/fragments\SearchForumFragment.java:17:import com.huanchengfly.tieba.post.components.MyLinearLayoutManager;
/fragments\SearchForumFragment.java:18:import com.huanchengfly.tieba.post.components.dividers.SearchDivider;
/fragments\SearchForumFragment.java:19:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/fragments\SearchForumFragment.java:21:import org.jetbrains.annotations.NotNull;
/fragments\SearchForumFragment.java:23:import butterknife.BindView;
/fragments\SearchForumFragment.java:24:import retrofit2.Call;
/fragments\SearchForumFragment.java:25:import retrofit2.Callback;
/fragments\SearchForumFragment.java:26:import retrofit2.Response;
/fragments\SearchForumFragment.java:28:public class SearchForumFragment extends BaseFragment {
/fragments\SearchForumFragment.java:29:    public static final String TAG = "SearchForumFragment";
/fragments\SearchForumFragment.java:31:    public static final String ARG_KEYWORD = "keyword";
/fragments\SearchForumFragment.java:32:    @BindView(R.id.fragment_search_refresh_layout)
/fragments\SearchForumFragment.java:33:    SwipeRefreshLayout refreshLayout;
/fragments\SearchForumFragment.java:34:    @BindView(R.id.fragment_search_recycler_view)
/fragments\SearchForumFragment.java:35:    RecyclerView recyclerView;
/fragments\SearchForumFragment.java:36:    private String keyword;
/fragments\SearchForumFragment.java:37:    private SearchForumAdapter mAdapter;
/fragments\SearchForumFragment.java:39:    private SearchForumBean.DataBean mData;
/fragments\SearchForumFragment.java:41:    public SearchForumFragment() {
/fragments\SearchForumFragment.java:42:    }
/fragments\SearchForumFragment.java:44:    public static SearchForumFragment newInstance(String keyword) {
/fragments\SearchForumFragment.java:45:        SearchForumFragment forumFragment = new SearchForumFragment();
/fragments\SearchForumFragment.java:46:        Bundle bundle = new Bundle();
/fragments\SearchForumFragment.java:47:        bundle.putString(ARG_KEYWORD, keyword);
/fragments\SearchForumFragment.java:48:        forumFragment.setArguments(bundle);
/fragments\SearchForumFragment.java:49:        return forumFragment;
/fragments\SearchForumFragment.java:50:    }
/fragments\SearchForumFragment.java:52:    public void setKeyword(String keyword, boolean refresh) {
/fragments\SearchForumFragment.java:53:        this.keyword = keyword;
/fragments\SearchForumFragment.java:54:        if (refresh) {
/fragments\SearchForumFragment.java:55:            refresh();
/fragments\SearchForumFragment.java:56:        } else {
/fragments\SearchForumFragment.java:57:            this.mData = null;
/fragments\SearchForumFragment.java:58:            mAdapter.reset();
/fragments\SearchForumFragment.java:59:        }
/fragments\SearchForumFragment.java:60:    }
/fragments\SearchForumFragment.java:62:    @Override
/fragments\SearchForumFragment.java:63:    protected void onFragmentVisibleChange(boolean isVisible) {
/fragments\SearchForumFragment.java:64:        if (mData == null && isVisible) {
/fragments\SearchForumFragment.java:65:            refresh();
/fragments\SearchForumFragment.java:66:        }
/fragments\SearchForumFragment.java:67:    }
/fragments\SearchForumFragment.java:69:    @Override
/fragments\SearchForumFragment.java:70:    public void onCreate(@Nullable Bundle savedInstanceState) {
/fragments\SearchForumFragment.java:71:        super.onCreate(savedInstanceState);
/fragments\SearchForumFragment.java:72:        if (getArguments() != null) {
/fragments\SearchForumFragment.java:73:            keyword = getArguments().getString(ARG_KEYWORD);
/fragments\SearchForumFragment.java:74:        }
/fragments\SearchForumFragment.java:75:    }
/fragments\SearchForumFragment.java:77:    @Override
/fragments\SearchForumFragment.java:78:    int getLayoutId() {
/fragments\SearchForumFragment.java:79:        return R.layout.fragment_search;
/fragments\SearchForumFragment.java:80:    }
/fragments\SearchForumFragment.java:82:    @Override
/fragments\SearchForumFragment.java:83:    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
/fragments\SearchForumFragment.java:84:        super.onViewCreated(view, savedInstanceState);
/fragments\SearchForumFragment.java:85:        recyclerView.setLayoutManager(new MyLinearLayoutManager(getAttachContext()));
/fragments\SearchForumFragment.java:86:        recyclerView.addItemDecoration(new SearchDivider(getAttachContext()));
/fragments\SearchForumFragment.java:87:        mAdapter = new SearchForumAdapter(getAttachContext());
/fragments\SearchForumFragment.java:88:        mAdapter.setLoadEndView(R.layout.layout_footer_loadend);
/fragments\SearchForumFragment.java:89:        mAdapter.setLoadFailedView(R.layout.layout_footer_load_failed);
/fragments\SearchForumFragment.java:90:        recyclerView.setAdapter(mAdapter);
/fragments\SearchForumFragment.java:91:        refreshLayout.setOnRefreshListener(this::refresh);
/fragments\SearchForumFragment.java:92:        ThemeUtil.setThemeForSwipeRefreshLayout(refreshLayout);
/fragments\SearchForumFragment.java:93:    }
/fragments\SearchForumFragment.java:95:    private void setRefreshing(boolean refreshing) {
/fragments\SearchForumFragment.java:96:        if (refreshLayout != null) refreshLayout.setRefreshing(refreshing);
/fragments\SearchForumFragment.java:97:    }
/fragments\SearchForumFragment.java:99:    private void refresh() {
/fragments\SearchForumFragment.java:100:        setRefreshing(true);
/fragments\SearchForumFragment.java:101:        TiebaApi.getInstance().searchForum(keyword).enqueue(new Callback<SearchForumBean>() {
/fragments\SearchForumFragment.java:102:            @Override
/fragments\SearchForumFragment.java:103:            public void onResponse(@NotNull Call<SearchForumBean> call, @NotNull Response<SearchForumBean> response) {
/fragments\SearchForumFragment.java:104:                mData = response.body().getData();
/fragments\SearchForumFragment.java:105:                mAdapter.setData(mData);
/fragments\SearchForumFragment.java:106:                setRefreshing(false);
/fragments\SearchForumFragment.java:107:                mAdapter.loadEnd();
/fragments\SearchForumFragment.java:108:            }
/fragments\SearchForumFragment.java:110:            @Override
/fragments\SearchForumFragment.java:111:            public void onFailure(@NotNull Call<SearchForumBean> call, @NotNull Throwable t) {
/fragments\SearchForumFragment.java:112:                setRefreshing(false);
/fragments\SearchForumFragment.java:113:                Toast.makeText(getAttachContext(), t.getMessage(), Toast.LENGTH_SHORT).show();
/fragments\SearchForumFragment.java:114:            }
/fragments\SearchForumFragment.java:115:        });
/fragments\SearchForumFragment.java:116:    }
/fragments\SearchForumFragment.java:118:    @Override
/fragments\SearchForumFragment.java:119:    protected void onFragmentFirstVisible() {
/fragments\SearchForumFragment.java:120:        refresh();
/fragments\SearchForumFragment.java:121:    }
/fragments\SearchForumFragment.java:122:}/fragments\ThreadStoreFragment.java:1:package com.huanchengfly.tieba.post.fragments;
/fragments\ThreadStoreFragment.java:4:import android.graphics.Color;
/fragments\ThreadStoreFragment.java:5:import android.os.Bundle;
/fragments\ThreadStoreFragment.java:6:import android.view.LayoutInflater;
/fragments\ThreadStoreFragment.java:7:import android.view.View;
/fragments\ThreadStoreFragment.java:8:import android.view.ViewGroup;
/fragments\ThreadStoreFragment.java:9:import android.widget.Toast;
/fragments\ThreadStoreFragment.java:11:import androidx.annotation.NonNull;
/fragments\ThreadStoreFragment.java:12:import androidx.annotation.Nullable;
/fragments\ThreadStoreFragment.java:13:import androidx.recyclerview.widget.ItemTouchHelper;
/fragments\ThreadStoreFragment.java:14:import androidx.recyclerview.widget.LinearLayoutManager;
/fragments\ThreadStoreFragment.java:15:import androidx.recyclerview.widget.RecyclerView;
/fragments\ThreadStoreFragment.java:16:import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
/fragments\ThreadStoreFragment.java:18:import com.google.android.material.snackbar.Snackbar;
/fragments\ThreadStoreFragment.java:19:import com.huanchengfly.tieba.post.api.TiebaApi;
/fragments\ThreadStoreFragment.java:20:import com.huanchengfly.tieba.post.api.models.CommonResponse;
/fragments\ThreadStoreFragment.java:21:import com.huanchengfly.tieba.post.api.models.ThreadStoreBean;
/fragments\ThreadStoreFragment.java:22:import com.huanchengfly.tieba.post.R;
/fragments\ThreadStoreFragment.java:23:import com.huanchengfly.tieba.post.adapters.ThreadStoreAdapter;
/fragments\ThreadStoreFragment.java:24:import com.huanchengfly.tieba.post.components.MyLinearLayoutManager;
/fragments\ThreadStoreFragment.java:25:import com.huanchengfly.tieba.post.components.dividers.RecycleViewDivider;
/fragments\ThreadStoreFragment.java:26:import com.huanchengfly.tieba.post.models.database.Account;
/fragments\ThreadStoreFragment.java:27:import com.huanchengfly.tieba.post.utils.AccountUtil;
/fragments\ThreadStoreFragment.java:28:import com.huanchengfly.tieba.post.utils.NavigationHelper;
/fragments\ThreadStoreFragment.java:29:import com.huanchengfly.tieba.post.utils.SharedPreferencesUtil;
/fragments\ThreadStoreFragment.java:30:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/fragments\ThreadStoreFragment.java:31:import com.huanchengfly.tieba.post.utils.Util;
/fragments\ThreadStoreFragment.java:33:import org.jetbrains.annotations.NotNull;
/fragments\ThreadStoreFragment.java:35:import java.util.HashMap;
/fragments\ThreadStoreFragment.java:36:import java.util.List;
/fragments\ThreadStoreFragment.java:37:import java.util.Map;
/fragments\ThreadStoreFragment.java:39:import retrofit2.Call;
/fragments\ThreadStoreFragment.java:40:import retrofit2.Callback;
/fragments\ThreadStoreFragment.java:41:import retrofit2.Response;
/fragments\ThreadStoreFragment.java:43:public class ThreadStoreFragment extends BaseFragment {
/fragments\ThreadStoreFragment.java:45:    public NavigationHelper navigationHelper;
/fragments\ThreadStoreFragment.java:46:    private RecyclerView recyclerView;
/fragments\ThreadStoreFragment.java:47:    private ThreadStoreAdapter threadStoreAdapter;
/fragments\ThreadStoreFragment.java:48:    private SwipeRefreshLayout refreshLayout;
/fragments\ThreadStoreFragment.java:49:    private int page = 0;
/fragments\ThreadStoreFragment.java:50:    private boolean hasMore = true;
/fragments\ThreadStoreFragment.java:51:    private String tbs;
/fragments\ThreadStoreFragment.java:53:    public ThreadStoreFragment() {
/fragments\ThreadStoreFragment.java:54:    }
/fragments\ThreadStoreFragment.java:56:    @Override
/fragments\ThreadStoreFragment.java:57:    public void onCreate(@Nullable Bundle savedInstanceState) {
/fragments\ThreadStoreFragment.java:58:        super.onCreate(savedInstanceState);
/fragments\ThreadStoreFragment.java:59:        navigationHelper = NavigationHelper.newInstance(getAttachContext());
/fragments\ThreadStoreFragment.java:60:        Account account = AccountUtil.getLoginInfo(getAttachContext());
/fragments\ThreadStoreFragment.java:61:        if (account != null) tbs = account.getTbs();
/fragments\ThreadStoreFragment.java:62:    }
/fragments\ThreadStoreFragment.java:64:    @Override
/fragments\ThreadStoreFragment.java:65:    int getLayoutId() {
/fragments\ThreadStoreFragment.java:66:        return R.layout.fragment_thread_store;
/fragments\ThreadStoreFragment.java:67:    }
/fragments\ThreadStoreFragment.java:69:    @NotNull
/fragments\ThreadStoreFragment.java:70:    @Override
/fragments\ThreadStoreFragment.java:71:    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,
/fragments\ThreadStoreFragment.java:72:                             Bundle savedInstanceState) {
/fragments\ThreadStoreFragment.java:73:        View contentView = super.onCreateView(inflater, container, savedInstanceState);
/fragments\ThreadStoreFragment.java:74:        refreshLayout = contentView.findViewById(R.id.thread_store_refresh_layout);
/fragments\ThreadStoreFragment.java:75:        refreshLayout.setOnRefreshListener(this::refresh);
/fragments\ThreadStoreFragment.java:76:        ThemeUtil.setThemeForSwipeRefreshLayout(refreshLayout);
/fragments\ThreadStoreFragment.java:77:        recyclerView = contentView.findViewById(R.id.thread_store_recycler_view);
/fragments\ThreadStoreFragment.java:78:        recyclerView.setLayoutManager(new MyLinearLayoutManager(getAttachContext()));
/fragments\ThreadStoreFragment.java:79:        recyclerView.addItemDecoration(new RecycleViewDivider(getAttachContext(), LinearLayoutManager.VERTICAL, R.drawable.drawable_divider_1dp));
/fragments\ThreadStoreFragment.java:80:        threadStoreAdapter = new ThreadStoreAdapter(getAttachContext());
/fragments\ThreadStoreFragment.java:81:        threadStoreAdapter.setLoadingView(R.layout.layout_footer_loading);
/fragments\ThreadStoreFragment.java:82:        threadStoreAdapter.setLoadEndView(R.layout.layout_footer_loadend);
/fragments\ThreadStoreFragment.java:83:        threadStoreAdapter.setLoadFailedView(R.layout.layout_footer_load_failed);
/fragments\ThreadStoreFragment.java:84:        threadStoreAdapter.setOnLoadMoreListener(this::loadMore);
/fragments\ThreadStoreFragment.java:85:        threadStoreAdapter.setOnItemClickListener((viewHolder, threadStoreInfo, i) -> {
/fragments\ThreadStoreFragment.java:86:            Map<String, String> map = new HashMap<>();
/fragments\ThreadStoreFragment.java:87:            map.put("tid", threadStoreInfo.getThreadId());
/fragments\ThreadStoreFragment.java:88:            map.put("pid", threadStoreInfo.getMarkPid());
/fragments\ThreadStoreFragment.java:89:            map.put("seeLz", SharedPreferencesUtil.get(getAttachContext(), SharedPreferencesUtil.SP_SETTINGS).getBoolean("collect_thread_see_lz", true) ? "1" : "0");
/fragments\ThreadStoreFragment.java:90:            map.put("from", "collect");
/fragments\ThreadStoreFragment.java:91:            map.put("max_pid", threadStoreInfo.getMaxPid());
/fragments\ThreadStoreFragment.java:92:            navigationHelper.navigationByData(NavigationHelper.ACTION_THREAD, map);
/fragments\ThreadStoreFragment.java:93:        });
/fragments\ThreadStoreFragment.java:94:        ItemTouchHelper mItemTouchHelper = new ItemTouchHelper(new ItemTouchHelper.Callback() {
/fragments\ThreadStoreFragment.java:95:            @Override
/fragments\ThreadStoreFragment.java:96:            public void clearView(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder) {
/fragments\ThreadStoreFragment.java:97:                super.clearView(recyclerView, viewHolder);
/fragments\ThreadStoreFragment.java:98:                viewHolder.itemView.setBackgroundColor(Color.TRANSPARENT);
/fragments\ThreadStoreFragment.java:99:            }
/fragments\ThreadStoreFragment.java:101:            @Override
/fragments\ThreadStoreFragment.java:102:            public void onSelectedChanged(RecyclerView.ViewHolder viewHolder, int actionState) {
/fragments\ThreadStoreFragment.java:103:                super.onSelectedChanged(viewHolder, actionState);
/fragments\ThreadStoreFragment.java:104:                if (actionState == ItemTouchHelper.ACTION_STATE_SWIPE) {
/fragments\ThreadStoreFragment.java:105:                    viewHolder.itemView.setBackgroundColor(Util.getColorByAttr(getAttachContext(), R.attr.colorControlHighlight, R.color.transparent));
/fragments\ThreadStoreFragment.java:106:                }
/fragments\ThreadStoreFragment.java:107:            }
/fragments\ThreadStoreFragment.java:109:            @Override
/fragments\ThreadStoreFragment.java:110:            public int getMovementFlags(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder) {
/fragments\ThreadStoreFragment.java:111:                int dragFlags = 0, swiped = ItemTouchHelper.RIGHT | ItemTouchHelper.LEFT;
/fragments\ThreadStoreFragment.java:112:                return makeMovementFlags(dragFlags, swiped);
/fragments\ThreadStoreFragment.java:113:            }
/fragments\ThreadStoreFragment.java:115:            @Override
/fragments\ThreadStoreFragment.java:116:            public boolean onMove(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder, @NonNull RecyclerView.ViewHolder target) {
/fragments\ThreadStoreFragment.java:117:                return true;
/fragments\ThreadStoreFragment.java:118:            }
/fragments\ThreadStoreFragment.java:120:            @Override
/fragments\ThreadStoreFragment.java:121:            public void onSwiped(@NonNull RecyclerView.ViewHolder viewHolder, int direction) {
/fragments\ThreadStoreFragment.java:122:                int position = viewHolder.getAdapterPosition();
/fragments\ThreadStoreFragment.java:123:                ThreadStoreBean.ThreadStoreInfo threadStoreInfo = threadStoreAdapter.getData(position);
/fragments\ThreadStoreFragment.java:124:                threadStoreAdapter.remove(position);
/fragments\ThreadStoreFragment.java:125:                Util.createSnackbar(recyclerView, R.string.toast_deleted, Snackbar.LENGTH_LONG)
/fragments\ThreadStoreFragment.java:126:                        .addCallback(new Snackbar.Callback() {
/fragments\ThreadStoreFragment.java:127:                            @Override
/fragments\ThreadStoreFragment.java:128:                            public void onDismissed(Snackbar snackbar, int event) {
/fragments\ThreadStoreFragment.java:129:                                if (event != DISMISS_EVENT_ACTION) {
/fragments\ThreadStoreFragment.java:130:                                    TiebaApi.getInstance()
/fragments\ThreadStoreFragment.java:131:                                            .removeStore(threadStoreInfo.getThreadId(), tbs)
/fragments\ThreadStoreFragment.java:132:                                            .enqueue(new Callback<CommonResponse>() {
/fragments\ThreadStoreFragment.java:133:                                                @Override
/fragments\ThreadStoreFragment.java:134:                                                public void onResponse(@NotNull Call<CommonResponse> call, @NotNull Response<CommonResponse> response) {
/fragments\ThreadStoreFragment.java:135:                                                }
/fragments\ThreadStoreFragment.java:137:                                                @Override
/fragments\ThreadStoreFragment.java:138:                                                public void onFailure(@NotNull Call<CommonResponse> call, @NotNull Throwable t) {
/fragments\ThreadStoreFragment.java:139:                                                    Toast.makeText(getAttachContext(), getAttachContext().getString(R.string.toast_delete_error, t.getMessage()), Toast.LENGTH_SHORT).show();
/fragments\ThreadStoreFragment.java:140:                                                    threadStoreAdapter.insert(threadStoreInfo, position);
/fragments\ThreadStoreFragment.java:141:                                                }
/fragments\ThreadStoreFragment.java:142:                                            });
/fragments\ThreadStoreFragment.java:143:                                }
/fragments\ThreadStoreFragment.java:144:                            }
/fragments\ThreadStoreFragment.java:145:                        }).setAction(R.string.button_undo, mView -> threadStoreAdapter.insert(threadStoreInfo, position)).show();
/fragments\ThreadStoreFragment.java:146:            }
/fragments\ThreadStoreFragment.java:147:        });
/fragments\ThreadStoreFragment.java:148:        mItemTouchHelper.attachToRecyclerView(recyclerView);
/fragments\ThreadStoreFragment.java:149:        recyclerView.setAdapter(threadStoreAdapter);
/fragments\ThreadStoreFragment.java:150:        return contentView;
/fragments\ThreadStoreFragment.java:151:    }
/fragments\ThreadStoreFragment.java:153:    @Override
/fragments\ThreadStoreFragment.java:154:    protected void onFragmentFirstVisible() {
/fragments\ThreadStoreFragment.java:155:        refresh();
/fragments\ThreadStoreFragment.java:156:    }
/fragments\ThreadStoreFragment.java:158:    private void refresh() {
/fragments\ThreadStoreFragment.java:159:        refreshLayout.setRefreshing(true);
/fragments\ThreadStoreFragment.java:160:        page = 0;
/fragments\ThreadStoreFragment.java:161:        TiebaApi.getInstance()
/fragments\ThreadStoreFragment.java:162:                .threadStore(page, 20)
/fragments\ThreadStoreFragment.java:163:                .enqueue(new Callback<ThreadStoreBean>() {
/fragments\ThreadStoreFragment.java:164:                    @Override
/fragments\ThreadStoreFragment.java:165:                    public void onResponse(@NotNull Call<ThreadStoreBean> call, @NotNull Response<ThreadStoreBean> response) {
/fragments\ThreadStoreFragment.java:166:                        ThreadStoreBean data = response.body();
/fragments\ThreadStoreFragment.java:167:                        refreshLayout.setRefreshing(false);
/fragments\ThreadStoreFragment.java:168:                        List<ThreadStoreBean.ThreadStoreInfo> storeInfoList = data.getStoreThread();
/fragments\ThreadStoreFragment.java:169:                        if (storeInfoList == null) {
/fragments\ThreadStoreFragment.java:170:                            return;
/fragments\ThreadStoreFragment.java:171:                        }
/fragments\ThreadStoreFragment.java:172:                        threadStoreAdapter.reset();
/fragments\ThreadStoreFragment.java:173:                        threadStoreAdapter.setNewData(storeInfoList);
/fragments\ThreadStoreFragment.java:174:                        hasMore = storeInfoList.size() > 0;
/fragments\ThreadStoreFragment.java:175:                        if (!hasMore) {
/fragments\ThreadStoreFragment.java:176:                            threadStoreAdapter.loadEnd();
/fragments\ThreadStoreFragment.java:177:                        }
/fragments\ThreadStoreFragment.java:178:                    }
/fragments\ThreadStoreFragment.java:180:                    @Override
/fragments\ThreadStoreFragment.java:181:                    public void onFailure(@NotNull Call<ThreadStoreBean> call, @NotNull Throwable t) {
/fragments\ThreadStoreFragment.java:182:                        refreshLayout.setRefreshing(false);
/fragments\ThreadStoreFragment.java:183:                    }
/fragments\ThreadStoreFragment.java:184:                });
/fragments\ThreadStoreFragment.java:185:    }
/fragments\ThreadStoreFragment.java:187:    private void loadMore(boolean isReload) {
/fragments\ThreadStoreFragment.java:188:        if (!isReload) {
/fragments\ThreadStoreFragment.java:189:            page += 1;
/fragments\ThreadStoreFragment.java:190:        }
/fragments\ThreadStoreFragment.java:191:        if (!hasMore) {
/fragments\ThreadStoreFragment.java:192:            return;
/fragments\ThreadStoreFragment.java:193:        }
/fragments\ThreadStoreFragment.java:194:        TiebaApi.getInstance()
/fragments\ThreadStoreFragment.java:195:                .threadStore(page, 20)
/fragments\ThreadStoreFragment.java:196:                .enqueue(new Callback<ThreadStoreBean>() {
/fragments\ThreadStoreFragment.java:197:                    @Override
/fragments\ThreadStoreFragment.java:198:                    public void onResponse(@NotNull Call<ThreadStoreBean> call, @NotNull Response<ThreadStoreBean> response) {
/fragments\ThreadStoreFragment.java:199:                        ThreadStoreBean data = response.body();
/fragments\ThreadStoreFragment.java:200:                        List<ThreadStoreBean.ThreadStoreInfo> storeInfoList = data.getStoreThread();
/fragments\ThreadStoreFragment.java:201:                        if (storeInfoList == null) {
/fragments\ThreadStoreFragment.java:202:                            return;
/fragments\ThreadStoreFragment.java:203:                        }
/fragments\ThreadStoreFragment.java:204:                        threadStoreAdapter.setLoadMoreData(storeInfoList);
/fragments\ThreadStoreFragment.java:205:                        hasMore = storeInfoList.size() > 0;
/fragments\ThreadStoreFragment.java:206:                        if (!hasMore) {
/fragments\ThreadStoreFragment.java:207:                            threadStoreAdapter.loadEnd();
/fragments\ThreadStoreFragment.java:208:                        }
/fragments\ThreadStoreFragment.java:209:                    }
/fragments\ThreadStoreFragment.java:211:                    @Override
/fragments\ThreadStoreFragment.java:212:                    public void onFailure(@NotNull Call<ThreadStoreBean> call, @NotNull Throwable t) {
/fragments\ThreadStoreFragment.java:213:                        threadStoreAdapter.loadFailed();
/fragments\ThreadStoreFragment.java:214:                        Toast.makeText(getAttachContext(), t.getMessage(), Toast.LENGTH_SHORT).show();
/fragments\ThreadStoreFragment.java:215:                    }
/fragments\ThreadStoreFragment.java:216:                });
/fragments\ThreadStoreFragment.java:217:    }
/fragments\ThreadStoreFragment.java:218:}
/fragments\TimePreferenceDialogFragmentCompat.java:1:package com.huanchengfly.tieba.post.fragments;
/fragments\TimePreferenceDialogFragmentCompat.java:3:import android.content.Context;
/fragments\TimePreferenceDialogFragmentCompat.java:4:import android.view.View;
/fragments\TimePreferenceDialogFragmentCompat.java:5:import android.widget.TimePicker;
/fragments\TimePreferenceDialogFragmentCompat.java:7:import androidx.preference.DialogPreference;
/fragments\TimePreferenceDialogFragmentCompat.java:8:import androidx.preference.Preference;
/fragments\TimePreferenceDialogFragmentCompat.java:9:import androidx.preference.PreferenceDialogFragmentCompat;
/fragments\TimePreferenceDialogFragmentCompat.java:11:import com.huanchengfly.tieba.post.components.prefs.TimePickerPreference;
/fragments\TimePreferenceDialogFragmentCompat.java:13:public class TimePreferenceDialogFragmentCompat extends PreferenceDialogFragmentCompat implements DialogPreference.TargetFragment {
/fragments\TimePreferenceDialogFragmentCompat.java:14:    TimePicker timePicker = null;
/fragments\TimePreferenceDialogFragmentCompat.java:16:    @Override
/fragments\TimePreferenceDialogFragmentCompat.java:17:    protected View onCreateDialogView(Context context) {
/fragments\TimePreferenceDialogFragmentCompat.java:18:        timePicker = new TimePicker(context);
/fragments\TimePreferenceDialogFragmentCompat.java:19:        return (timePicker);
/fragments\TimePreferenceDialogFragmentCompat.java:20:    }
/fragments\TimePreferenceDialogFragmentCompat.java:22:    @Override
/fragments\TimePreferenceDialogFragmentCompat.java:23:    protected void onBindDialogView(View v) {
/fragments\TimePreferenceDialogFragmentCompat.java:24:        super.onBindDialogView(v);
/fragments\TimePreferenceDialogFragmentCompat.java:25:        timePicker.setIs24HourView(true);
/fragments\TimePreferenceDialogFragmentCompat.java:26:        TimePickerPreference pref = (TimePickerPreference) getPreference();
/fragments\TimePreferenceDialogFragmentCompat.java:27:        timePicker.setCurrentHour(pref.hour);
/fragments\TimePreferenceDialogFragmentCompat.java:28:        timePicker.setCurrentMinute(pref.minute);
/fragments\TimePreferenceDialogFragmentCompat.java:29:    }
/fragments\TimePreferenceDialogFragmentCompat.java:31:    @Override
/fragments\TimePreferenceDialogFragmentCompat.java:32:    public void onDialogClosed(boolean positiveResult) {
/fragments\TimePreferenceDialogFragmentCompat.java:33:        if (positiveResult) {
/fragments\TimePreferenceDialogFragmentCompat.java:34:            TimePickerPreference pref = (TimePickerPreference) getPreference();
/fragments\TimePreferenceDialogFragmentCompat.java:35:            pref.hour = timePicker.getCurrentHour();
/fragments\TimePreferenceDialogFragmentCompat.java:36:            pref.minute = timePicker.getCurrentMinute();
/fragments\TimePreferenceDialogFragmentCompat.java:38:            String value = TimePickerPreference.timeToString(pref.hour, pref.minute);
/fragments\TimePreferenceDialogFragmentCompat.java:39:            if (pref.callChangeListener(value)) pref.persistStringValue(value);
/fragments\TimePreferenceDialogFragmentCompat.java:40:        }
/fragments\TimePreferenceDialogFragmentCompat.java:41:    }
/fragments\TimePreferenceDialogFragmentCompat.java:43:    @Override
/fragments\TimePreferenceDialogFragmentCompat.java:44:    public Preference findPreference(CharSequence charSequence) {
/fragments\TimePreferenceDialogFragmentCompat.java:45:        return getPreference();
/fragments\TimePreferenceDialogFragmentCompat.java:46:    }
/fragments\TimePreferenceDialogFragmentCompat.java:47:}/fragments\UserLikeForumFragment.java:1:package com.huanchengfly.tieba.post.fragments;
/fragments\UserLikeForumFragment.java:3:import android.os.Bundle;
/fragments\UserLikeForumFragment.java:4:import android.view.LayoutInflater;
/fragments\UserLikeForumFragment.java:5:import android.view.View;
/fragments\UserLikeForumFragment.java:6:import android.view.ViewGroup;
/fragments\UserLikeForumFragment.java:7:import android.widget.TextView;
/fragments\UserLikeForumFragment.java:8:import android.widget.Toast;
/fragments\UserLikeForumFragment.java:10:import androidx.annotation.NonNull;
/fragments\UserLikeForumFragment.java:11:import androidx.recyclerview.widget.RecyclerView;
/fragments\UserLikeForumFragment.java:12:import androidx.recyclerview.widget.StaggeredGridLayoutManager;
/fragments\UserLikeForumFragment.java:13:import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
/fragments\UserLikeForumFragment.java:15:import com.huanchengfly.tieba.post.api.TiebaApi;
/fragments\UserLikeForumFragment.java:16:import com.huanchengfly.tieba.post.api.models.UserLikeForumBean;
/fragments\UserLikeForumFragment.java:17:import com.huanchengfly.tieba.post.R;
/fragments\UserLikeForumFragment.java:18:import com.huanchengfly.tieba.post.adapters.UserLikeForumAdapter;
/fragments\UserLikeForumFragment.java:19:import com.huanchengfly.tieba.post.components.dividers.StaggeredDividerItemDecoration;
/fragments\UserLikeForumFragment.java:20:import com.huanchengfly.tieba.post.utils.NavigationHelper;
/fragments\UserLikeForumFragment.java:21:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/fragments\UserLikeForumFragment.java:23:import org.jetbrains.annotations.NotNull;
/fragments\UserLikeForumFragment.java:25:import retrofit2.Call;
/fragments\UserLikeForumFragment.java:26:import retrofit2.Callback;
/fragments\UserLikeForumFragment.java:27:import retrofit2.Response;
/fragments\UserLikeForumFragment.java:29:public class UserLikeForumFragment extends BaseFragment {
/fragments\UserLikeForumFragment.java:30:    public static final String PARAM_UID = "uid";
/fragments\UserLikeForumFragment.java:31:    private String uid;
/fragments\UserLikeForumFragment.java:32:    private int page;
/fragments\UserLikeForumFragment.java:34:    private SwipeRefreshLayout refreshLayout;
/fragments\UserLikeForumFragment.java:35:    private RecyclerView recyclerView;
/fragments\UserLikeForumFragment.java:36:    private UserLikeForumAdapter userLikeForumAdapter;
/fragments\UserLikeForumFragment.java:38:    private View emptyView;
/fragments\UserLikeForumFragment.java:39:    private TextView emptyTipView;
/fragments\UserLikeForumFragment.java:41:    private UserLikeForumBean userLikeForumBean;
/fragments\UserLikeForumFragment.java:43:    public UserLikeForumFragment() {
/fragments\UserLikeForumFragment.java:44:    }
/fragments\UserLikeForumFragment.java:46:    public static UserLikeForumFragment newInstance(String uid) {
/fragments\UserLikeForumFragment.java:47:        UserLikeForumFragment fragment = new UserLikeForumFragment();
/fragments\UserLikeForumFragment.java:48:        Bundle args = new Bundle();
/fragments\UserLikeForumFragment.java:49:        args.putString(PARAM_UID, uid);
/fragments\UserLikeForumFragment.java:50:        fragment.setArguments(args);
/fragments\UserLikeForumFragment.java:51:        return fragment;
/fragments\UserLikeForumFragment.java:52:    }
/fragments\UserLikeForumFragment.java:54:    @Override
/fragments\UserLikeForumFragment.java:55:    public void onCreate(Bundle savedInstanceState) {
/fragments\UserLikeForumFragment.java:56:        super.onCreate(savedInstanceState);
/fragments\UserLikeForumFragment.java:57:        Bundle args = getArguments();
/fragments\UserLikeForumFragment.java:58:        if (args != null) {
/fragments\UserLikeForumFragment.java:59:            uid = args.getString(PARAM_UID, null);
/fragments\UserLikeForumFragment.java:60:        }
/fragments\UserLikeForumFragment.java:61:    }
/fragments\UserLikeForumFragment.java:63:    @Override
/fragments\UserLikeForumFragment.java:64:    int getLayoutId() {
/fragments\UserLikeForumFragment.java:65:        return R.layout.fragment_user_like_forum;
/fragments\UserLikeForumFragment.java:66:    }
/fragments\UserLikeForumFragment.java:68:    @NotNull
/fragments\UserLikeForumFragment.java:69:    @Override
/fragments\UserLikeForumFragment.java:70:    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,
/fragments\UserLikeForumFragment.java:71:                             Bundle savedInstanceState) {
/fragments\UserLikeForumFragment.java:72:        View contentView = super.onCreateView(inflater, container, savedInstanceState);
/fragments\UserLikeForumFragment.java:73:        refreshLayout = contentView.findViewById(R.id.refresh);
/fragments\UserLikeForumFragment.java:74:        refreshLayout.setNestedScrollingEnabled(true);
/fragments\UserLikeForumFragment.java:75:        ThemeUtil.setThemeForSwipeRefreshLayout(refreshLayout);
/fragments\UserLikeForumFragment.java:76:        refreshLayout.setOnRefreshListener(this::refresh);
/fragments\UserLikeForumFragment.java:77:        recyclerView = contentView.findViewById(R.id.user_post_reclcyer_view);
/fragments\UserLikeForumFragment.java:78:        recyclerView.setLayoutManager(new StaggeredGridLayoutManager(2, StaggeredGridLayoutManager.VERTICAL));
/fragments\UserLikeForumFragment.java:79:        recyclerView.addItemDecoration(new StaggeredDividerItemDecoration(getAttachContext(), 16));
/fragments\UserLikeForumFragment.java:80:        userLikeForumAdapter = new UserLikeForumAdapter(getAttachContext());
/fragments\UserLikeForumFragment.java:81:        emptyView = View.inflate(getAttachContext(), R.layout.layout_empty_view, null);
/fragments\UserLikeForumFragment.java:82:        emptyTipView = emptyView.findViewById(R.id.empty_tip);
/fragments\UserLikeForumFragment.java:83:        NavigationHelper navigationHelper = NavigationHelper.newInstance(getAttachContext());
/fragments\UserLikeForumFragment.java:84:        userLikeForumAdapter.setOnItemChildClickListener(R.id.forum_item_card, (viewHolder, forumBean, position) -> navigationHelper.navigationByData(NavigationHelper.ACTION_FORUM, forumBean.getName()));
/fragments\UserLikeForumFragment.java:85:        userLikeForumAdapter.setLoadingView(R.layout.layout_footer_loading);
/fragments\UserLikeForumFragment.java:86:        userLikeForumAdapter.setEmptyView(emptyView);
/fragments\UserLikeForumFragment.java:87:        userLikeForumAdapter.setLoadEndView(R.layout.layout_footer_loadend);
/fragments\UserLikeForumFragment.java:88:        userLikeForumAdapter.setLoadFailedView(R.layout.layout_footer_load_failed);
/fragments\UserLikeForumFragment.java:89:        userLikeForumAdapter.setOnLoadMoreListener(this::load);
/fragments\UserLikeForumFragment.java:90:        recyclerView.setAdapter(userLikeForumAdapter);
/fragments\UserLikeForumFragment.java:91:        return contentView;
/fragments\UserLikeForumFragment.java:92:    }
/fragments\UserLikeForumFragment.java:94:    public void refresh() {
/fragments\UserLikeForumFragment.java:95:        page = 1;
/fragments\UserLikeForumFragment.java:96:        userLikeForumAdapter.reset();
/fragments\UserLikeForumFragment.java:97:        refreshLayout.setRefreshing(true);
/fragments\UserLikeForumFragment.java:98:        TiebaApi.getInstance()
/fragments\UserLikeForumFragment.java:99:                .userLikeForum(uid, page)
/fragments\UserLikeForumFragment.java:100:                .enqueue(new Callback<UserLikeForumBean>() {
/fragments\UserLikeForumFragment.java:101:                    @Override
/fragments\UserLikeForumFragment.java:102:                    public void onResponse(@NotNull Call<UserLikeForumBean> call, @NotNull Response<UserLikeForumBean> response) {
/fragments\UserLikeForumFragment.java:103:                        UserLikeForumBean data = response.body();
/fragments\UserLikeForumFragment.java:104:                        userLikeForumBean = data;
/fragments\UserLikeForumFragment.java:105:                        if (data.getForumList() != null) {
/fragments\UserLikeForumFragment.java:106:                            userLikeForumAdapter.setNewData(data.getForumList().getForumList());
/fragments\UserLikeForumFragment.java:107:                            if ("0".equals(data.getHasMore())) {
/fragments\UserLikeForumFragment.java:108:                                emptyTipView.setText(R.string.tip_empty);
/fragments\UserLikeForumFragment.java:109:                                userLikeForumAdapter.loadEnd();
/fragments\UserLikeForumFragment.java:110:                            }
/fragments\UserLikeForumFragment.java:111:                        } else {
/fragments\UserLikeForumFragment.java:112:                            emptyTipView.setText(R.string.tip_user_hide);
/fragments\UserLikeForumFragment.java:113:                            userLikeForumAdapter.loadEnd();
/fragments\UserLikeForumFragment.java:114:                        }
/fragments\UserLikeForumFragment.java:115:                        refreshLayout.setRefreshing(false);
/fragments\UserLikeForumFragment.java:116:                    }
/fragments\UserLikeForumFragment.java:118:                    @Override
/fragments\UserLikeForumFragment.java:119:                    public void onFailure(@NotNull Call<UserLikeForumBean> call, @NotNull Throwable t) {
/fragments\UserLikeForumFragment.java:120:                        Toast.makeText(getAttachContext(), t.getMessage(), Toast.LENGTH_SHORT).show();
/fragments\UserLikeForumFragment.java:121:                        refreshLayout.setRefreshing(false);
/fragments\UserLikeForumFragment.java:122:                    }
/fragments\UserLikeForumFragment.java:123:                });
/fragments\UserLikeForumFragment.java:124:    }
/fragments\UserLikeForumFragment.java:126:    public void load(boolean isReload) {
/fragments\UserLikeForumFragment.java:127:        if (!isReload) {
/fragments\UserLikeForumFragment.java:128:            page += 1;
/fragments\UserLikeForumFragment.java:129:        }
/fragments\UserLikeForumFragment.java:130:        TiebaApi.getInstance()
/fragments\UserLikeForumFragment.java:131:                .userLikeForum(uid, page)
/fragments\UserLikeForumFragment.java:132:                .enqueue(new Callback<UserLikeForumBean>() {
/fragments\UserLikeForumFragment.java:133:                    @Override
/fragments\UserLikeForumFragment.java:134:                    public void onResponse(@NotNull Call<UserLikeForumBean> call, @NotNull Response<UserLikeForumBean> response) {
/fragments\UserLikeForumFragment.java:135:                        UserLikeForumBean data = response.body();
/fragments\UserLikeForumFragment.java:136:                        userLikeForumBean = data;
/fragments\UserLikeForumFragment.java:137:                        if (data.getForumList() != null) {
/fragments\UserLikeForumFragment.java:138:                            userLikeForumAdapter.setLoadMoreData(data.getForumList().getForumList());
/fragments\UserLikeForumFragment.java:139:                            if ("0".equals(data.getHasMore())) {
/fragments\UserLikeForumFragment.java:140:                                emptyTipView.setText(R.string.tip_empty);
/fragments\UserLikeForumFragment.java:141:                                userLikeForumAdapter.loadEnd();
/fragments\UserLikeForumFragment.java:142:                            }
/fragments\UserLikeForumFragment.java:143:                        } else {
/fragments\UserLikeForumFragment.java:144:                            emptyTipView.setText(R.string.tip_user_hide);
/fragments\UserLikeForumFragment.java:145:                            userLikeForumAdapter.loadEnd();
/fragments\UserLikeForumFragment.java:146:                        }
/fragments\UserLikeForumFragment.java:147:                    }
/fragments\UserLikeForumFragment.java:149:                    @Override
/fragments\UserLikeForumFragment.java:150:                    public void onFailure(@NotNull Call<UserLikeForumBean> call, @NotNull Throwable t) {
/fragments\UserLikeForumFragment.java:151:                        Toast.makeText(getAttachContext(), t.getMessage(), Toast.LENGTH_SHORT).show();
/fragments\UserLikeForumFragment.java:152:                        userLikeForumAdapter.loadFailed();
/fragments\UserLikeForumFragment.java:153:                    }
/fragments\UserLikeForumFragment.java:154:                });
/fragments\UserLikeForumFragment.java:155:    }
/fragments\UserLikeForumFragment.java:157:    @Override
/fragments\UserLikeForumFragment.java:158:    protected void onFragmentFirstVisible() {
/fragments\UserLikeForumFragment.java:159:        refresh();
/fragments\UserLikeForumFragment.java:160:    }
/fragments\UserLikeForumFragment.java:162:    @Override
/fragments\UserLikeForumFragment.java:163:    protected void onFragmentVisibleChange(boolean isVisible) {
/fragments\UserLikeForumFragment.java:164:        if (isVisible && userLikeForumBean == null) {
/fragments\UserLikeForumFragment.java:165:            refresh();
/fragments\UserLikeForumFragment.java:166:        }
/fragments\UserLikeForumFragment.java:167:    }
/fragments\UserLikeForumFragment.java:168:}/fragments\UserPostFragment.java:1:package com.huanchengfly.tieba.post.fragments;
/fragments\UserPostFragment.java:4:import android.content.Intent;
/fragments\UserPostFragment.java:5:import android.os.Bundle;
/fragments\UserPostFragment.java:6:import android.view.LayoutInflater;
/fragments\UserPostFragment.java:7:import android.view.View;
/fragments\UserPostFragment.java:8:import android.view.ViewGroup;
/fragments\UserPostFragment.java:9:import android.widget.TextView;
/fragments\UserPostFragment.java:10:import android.widget.Toast;
/fragments\UserPostFragment.java:12:import androidx.annotation.NonNull;
/fragments\UserPostFragment.java:13:import androidx.recyclerview.widget.RecyclerView;
/fragments\UserPostFragment.java:14:import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
/fragments\UserPostFragment.java:16:import com.huanchengfly.tieba.post.api.TiebaApi;
/fragments\UserPostFragment.java:17:import com.huanchengfly.tieba.post.api.models.UserPostBean;
/fragments\UserPostFragment.java:18:import com.huanchengfly.tieba.post.activities.FloorActivity;
/fragments\UserPostFragment.java:19:import com.huanchengfly.tieba.post.R;
/fragments\UserPostFragment.java:20:import com.huanchengfly.tieba.post.activities.ThreadActivity;
/fragments\UserPostFragment.java:21:import com.huanchengfly.tieba.post.adapters.UserPostAdapter;
/fragments\UserPostFragment.java:22:import com.huanchengfly.tieba.post.components.MyLinearLayoutManager;
/fragments\UserPostFragment.java:23:import com.huanchengfly.tieba.post.components.dividers.CommonDivider;
/fragments\UserPostFragment.java:24:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/fragments\UserPostFragment.java:26:import org.jetbrains.annotations.NotNull;
/fragments\UserPostFragment.java:28:import retrofit2.Call;
/fragments\UserPostFragment.java:29:import retrofit2.Callback;
/fragments\UserPostFragment.java:30:import retrofit2.Response;
/fragments\UserPostFragment.java:32:public class UserPostFragment extends BaseFragment {
/fragments\UserPostFragment.java:33:    public static final String PARAM_UID = "uid";
/fragments\UserPostFragment.java:34:    public static final String PARAM_IS_THREAD = "is_thread";
/fragments\UserPostFragment.java:35:    public static final String TAG = UserPostFragment.class.getSimpleName();
/fragments\UserPostFragment.java:37:    private SwipeRefreshLayout refreshLayout;
/fragments\UserPostFragment.java:38:    private RecyclerView recyclerView;
/fragments\UserPostFragment.java:39:    private UserPostAdapter userPostAdapter;
/fragments\UserPostFragment.java:41:    private View emptyView;
/fragments\UserPostFragment.java:42:    private TextView emptyTipView;
/fragments\UserPostFragment.java:44:    private UserPostBean userPostBean;
/fragments\UserPostFragment.java:46:    private String uid;
/fragments\UserPostFragment.java:47:    private boolean isThread;
/fragments\UserPostFragment.java:48:    private int page;
/fragments\UserPostFragment.java:50:    public UserPostFragment() {
/fragments\UserPostFragment.java:51:    }
/fragments\UserPostFragment.java:53:    public static UserPostFragment newInstance(String uid) {
/fragments\UserPostFragment.java:54:        return newInstance(uid, true);
/fragments\UserPostFragment.java:55:    }
/fragments\UserPostFragment.java:57:    public static UserPostFragment newInstance(String uid, boolean isThread) {
/fragments\UserPostFragment.java:58:        UserPostFragment fragment = new UserPostFragment();
/fragments\UserPostFragment.java:59:        Bundle args = new Bundle();
/fragments\UserPostFragment.java:60:        args.putString(PARAM_UID, uid);
/fragments\UserPostFragment.java:61:        args.putBoolean(PARAM_IS_THREAD, isThread);
/fragments\UserPostFragment.java:62:        fragment.setArguments(args);
/fragments\UserPostFragment.java:63:        return fragment;
/fragments\UserPostFragment.java:64:    }
/fragments\UserPostFragment.java:66:    @Override
/fragments\UserPostFragment.java:67:    public void onCreate(Bundle savedInstanceState) {
/fragments\UserPostFragment.java:68:        super.onCreate(savedInstanceState);
/fragments\UserPostFragment.java:69:        Bundle args = getArguments();
/fragments\UserPostFragment.java:70:        if (args != null) {
/fragments\UserPostFragment.java:71:            uid = args.getString(PARAM_UID, null);
/fragments\UserPostFragment.java:72:            isThread = args.getBoolean(PARAM_IS_THREAD, true);
/fragments\UserPostFragment.java:73:        }
/fragments\UserPostFragment.java:74:    }
/fragments\UserPostFragment.java:76:    @Override
/fragments\UserPostFragment.java:77:    int getLayoutId() {
/fragments\UserPostFragment.java:78:        return R.layout.fragment_user_post;
/fragments\UserPostFragment.java:79:    }
/fragments\UserPostFragment.java:81:    @NotNull
/fragments\UserPostFragment.java:82:    @Override
/fragments\UserPostFragment.java:83:    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,
/fragments\UserPostFragment.java:84:                             Bundle savedInstanceState) {
/fragments\UserPostFragment.java:85:        View contentView = super.onCreateView(inflater, container, savedInstanceState);
/fragments\UserPostFragment.java:86:        refreshLayout = contentView.findViewById(R.id.refresh);
/fragments\UserPostFragment.java:87:        refreshLayout.setNestedScrollingEnabled(true);
/fragments\UserPostFragment.java:88:        ThemeUtil.setThemeForSwipeRefreshLayout(refreshLayout);
/fragments\UserPostFragment.java:89:        refreshLayout.setOnRefreshListener(this::refresh);
/fragments\UserPostFragment.java:90:        recyclerView = contentView.findViewById(R.id.user_post_reclcyer_view);
/fragments\UserPostFragment.java:91:        recyclerView.addItemDecoration(new CommonDivider(getAttachContext(), MyLinearLayoutManager.VERTICAL, R.drawable.drawable_divider_8dp));
/fragments\UserPostFragment.java:92:        userPostAdapter = new UserPostAdapter(getAttachContext());
/fragments\UserPostFragment.java:93:        emptyView = View.inflate(getAttachContext(), R.layout.layout_empty_view, null);
/fragments\UserPostFragment.java:94:        emptyTipView = emptyView.findViewById(R.id.empty_tip);
/fragments\UserPostFragment.java:95:        userPostAdapter.setOnMultiItemClickListener((viewHolder, postBean, position, viewType) -> {
/fragments\UserPostFragment.java:96:            switch (viewType) {
/fragments\UserPostFragment.java:97:                case UserPostAdapter.TYPE_THREAD:
/fragments\UserPostFragment.java:98:                    getAttachContext().startActivity(new Intent(getAttachContext(), ThreadActivity.class)
/fragments\UserPostFragment.java:99:                            .putExtra("tid", postBean.getThreadId()));
/fragments\UserPostFragment.java:100:                    break;
/fragments\UserPostFragment.java:101:                case UserPostAdapter.TYPE_REPLY:
/fragments\UserPostFragment.java:102:                    if ("0".equals(postBean.getPostType())) {
/fragments\UserPostFragment.java:103:                        getAttachContext().startActivity(new Intent(getAttachContext(), FloorActivity.class)
/fragments\UserPostFragment.java:104:                                .putExtra("tid", postBean.getThreadId())
/fragments\UserPostFragment.java:105:                                .putExtra("pid", postBean.getPostId()));
/fragments\UserPostFragment.java:106:                    } else {
/fragments\UserPostFragment.java:107:                        getAttachContext().startActivity(new Intent(getAttachContext(), FloorActivity.class)
/fragments\UserPostFragment.java:108:                                .putExtra("tid", postBean.getThreadId())
/fragments\UserPostFragment.java:109:                                .putExtra("spid", postBean.getPostId()));
/fragments\UserPostFragment.java:110:                    }
/fragments\UserPostFragment.java:111:                    break;
/fragments\UserPostFragment.java:112:            }
/fragments\UserPostFragment.java:113:        });
/fragments\UserPostFragment.java:114:        userPostAdapter.setLoadingView(R.layout.layout_footer_loading);
/fragments\UserPostFragment.java:115:        userPostAdapter.setEmptyView(emptyView);
/fragments\UserPostFragment.java:116:        userPostAdapter.setLoadEndView(R.layout.layout_footer_loadend);
/fragments\UserPostFragment.java:117:        userPostAdapter.setLoadFailedView(R.layout.layout_footer_load_failed);
/fragments\UserPostFragment.java:118:        userPostAdapter.setOnLoadMoreListener(this::load);
/fragments\UserPostFragment.java:119:        recyclerView.setLayoutManager(new MyLinearLayoutManager(getAttachContext()));
/fragments\UserPostFragment.java:120:        recyclerView.setAdapter(userPostAdapter);
/fragments\UserPostFragment.java:121:        return contentView;
/fragments\UserPostFragment.java:122:    }
/fragments\UserPostFragment.java:124:    public void load(boolean isReload) {
/fragments\UserPostFragment.java:125:        if (!isReload) {
/fragments\UserPostFragment.java:126:            page += 1;
/fragments\UserPostFragment.java:127:        }
/fragments\UserPostFragment.java:128:        TiebaApi.getInstance()
/fragments\UserPostFragment.java:129:                .userPost(uid, page, isThread)
/fragments\UserPostFragment.java:130:                .enqueue(new Callback<UserPostBean>() {
/fragments\UserPostFragment.java:131:                    @Override
/fragments\UserPostFragment.java:132:                    public void onResponse(@NotNull Call<UserPostBean> call, @NotNull Response<UserPostBean> response) {
/fragments\UserPostFragment.java:133:                        UserPostBean data = response.body();
/fragments\UserPostFragment.java:134:                        userPostBean = data;
/fragments\UserPostFragment.java:135:                        if ("0".equals(data.getHidePost())) {
/fragments\UserPostFragment.java:136:                            userPostAdapter.setLoadMoreData(data.getPostList());
/fragments\UserPostFragment.java:137:                            if (data.getPostList().size() <= 0) {
/fragments\UserPostFragment.java:138:                                emptyTipView.setText(R.string.tip_empty);
/fragments\UserPostFragment.java:139:                                userPostAdapter.loadEnd();
/fragments\UserPostFragment.java:140:                            }
/fragments\UserPostFragment.java:141:                        } else {
/fragments\UserPostFragment.java:142:                            emptyTipView.setText(R.string.tip_user_hide);
/fragments\UserPostFragment.java:143:                            userPostAdapter.loadEnd();
/fragments\UserPostFragment.java:144:                        }
/fragments\UserPostFragment.java:145:                    }
/fragments\UserPostFragment.java:147:                    @Override
/fragments\UserPostFragment.java:148:                    public void onFailure(@NotNull Call<UserPostBean> call, @NotNull Throwable t) {
/fragments\UserPostFragment.java:149:                        Toast.makeText(getAttachContext(), t.getMessage(), Toast.LENGTH_SHORT).show();
/fragments\UserPostFragment.java:150:                        userPostAdapter.loadFailed();
/fragments\UserPostFragment.java:151:                    }
/fragments\UserPostFragment.java:152:                });
/fragments\UserPostFragment.java:153:    }
/fragments\UserPostFragment.java:155:    public void refresh() {
/fragments\UserPostFragment.java:156:        page = 1;
/fragments\UserPostFragment.java:157:        userPostAdapter.reset();
/fragments\UserPostFragment.java:158:        refreshLayout.setRefreshing(true);
/fragments\UserPostFragment.java:159:        TiebaApi.getInstance()
/fragments\UserPostFragment.java:160:                .userPost(uid, page, isThread)
/fragments\UserPostFragment.java:161:                .enqueue(new Callback<UserPostBean>() {
/fragments\UserPostFragment.java:162:                    @Override
/fragments\UserPostFragment.java:163:                    public void onResponse(@NotNull Call<UserPostBean> call, @NotNull Response<UserPostBean> response) {
/fragments\UserPostFragment.java:164:                        UserPostBean data = response.body();
/fragments\UserPostFragment.java:165:                        userPostBean = data;
/fragments\UserPostFragment.java:166:                        if ("0".equals(data.getHidePost())) {
/fragments\UserPostFragment.java:167:                            userPostAdapter.setNewData(data.getPostList());
/fragments\UserPostFragment.java:168:                            if (data.getPostList().size() <= 0) {
/fragments\UserPostFragment.java:169:                                emptyTipView.setText(R.string.tip_empty);
/fragments\UserPostFragment.java:170:                            }
/fragments\UserPostFragment.java:171:                        } else {
/fragments\UserPostFragment.java:172:                            emptyTipView.setText(R.string.tip_user_hide);
/fragments\UserPostFragment.java:173:                            userPostAdapter.loadEnd();
/fragments\UserPostFragment.java:174:                        }
/fragments\UserPostFragment.java:175:                        refreshLayout.setRefreshing(false);
/fragments\UserPostFragment.java:176:                    }
/fragments\UserPostFragment.java:178:                    @Override
/fragments\UserPostFragment.java:179:                    public void onFailure(@NotNull Call<UserPostBean> call, @NotNull Throwable t) {
/fragments\UserPostFragment.java:180:                        Toast.makeText(getAttachContext(), t.getMessage(), Toast.LENGTH_SHORT).show();
/fragments\UserPostFragment.java:181:                        refreshLayout.setRefreshing(false);
/fragments\UserPostFragment.java:182:                    }
/fragments\UserPostFragment.java:183:                });
/fragments\UserPostFragment.java:184:    }
/fragments\UserPostFragment.java:186:    @Override
/fragments\UserPostFragment.java:187:    protected void onFragmentFirstVisible() {
/fragments\UserPostFragment.java:188:        refresh();
/fragments\UserPostFragment.java:189:    }
/fragments\UserPostFragment.java:191:    @Override
/fragments\UserPostFragment.java:192:    protected void onFragmentVisibleChange(boolean isVisible) {
/fragments\UserPostFragment.java:193:        if (isVisible && userPostBean == null) {
/fragments\UserPostFragment.java:194:            refresh();
/fragments\UserPostFragment.java:195:        }
/fragments\UserPostFragment.java:196:    }
/fragments\UserPostFragment.java:197:}/fragments\WebViewFragment.java:1:package com.huanchengfly.tieba.post.fragments;
/fragments\WebViewFragment.java:3:import android.annotation.SuppressLint;
/fragments\WebViewFragment.java:4:import android.annotation.TargetApi;
/fragments\WebViewFragment.java:5:import android.app.Activity;
/fragments\WebViewFragment.java:6:import android.content.ClipData;
/fragments\WebViewFragment.java:7:import android.content.Intent;
/fragments\WebViewFragment.java:8:import android.graphics.Bitmap;
/fragments\WebViewFragment.java:9:import android.graphics.Color;
/fragments\WebViewFragment.java:10:import android.net.Uri;
/fragments\WebViewFragment.java:11:import android.os.Build;
/fragments\WebViewFragment.java:12:import android.os.Bundle;
/fragments\WebViewFragment.java:13:import android.provider.Settings;
/fragments\WebViewFragment.java:14:import android.view.LayoutInflater;
/fragments\WebViewFragment.java:15:import android.view.View;
/fragments\WebViewFragment.java:16:import android.view.ViewGroup;
/fragments\WebViewFragment.java:17:import android.webkit.CookieManager;
/fragments\WebViewFragment.java:18:import android.webkit.DownloadListener;
/fragments\WebViewFragment.java:19:import android.webkit.GeolocationPermissions;
/fragments\WebViewFragment.java:20:import android.webkit.JsResult;
/fragments\WebViewFragment.java:21:import android.webkit.URLUtil;
/fragments\WebViewFragment.java:22:import android.webkit.ValueCallback;
/fragments\WebViewFragment.java:23:import android.webkit.WebChromeClient;
/fragments\WebViewFragment.java:24:import android.webkit.WebResourceRequest;
/fragments\WebViewFragment.java:25:import android.webkit.WebResourceResponse;
/fragments\WebViewFragment.java:26:import android.webkit.WebSettings;
/fragments\WebViewFragment.java:27:import android.webkit.WebView;
/fragments\WebViewFragment.java:28:import android.webkit.WebViewClient;
/fragments\WebViewFragment.java:29:import android.widget.Toast;
/fragments\WebViewFragment.java:31:import androidx.annotation.NonNull;
/fragments\WebViewFragment.java:32:import androidx.annotation.Nullable;
/fragments\WebViewFragment.java:33:import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
/fragments\WebViewFragment.java:35:import com.google.android.material.snackbar.Snackbar;
/fragments\WebViewFragment.java:36:import com.huanchengfly.tieba.post.R;
/fragments\WebViewFragment.java:37:import com.huanchengfly.tieba.post.components.dialogs.PermissionDialog;
/fragments\WebViewFragment.java:38:import com.huanchengfly.tieba.post.interfaces.OnReceivedTitleListener;
/fragments\WebViewFragment.java:39:import com.huanchengfly.tieba.post.interfaces.WebViewListener;
/fragments\WebViewFragment.java:40:import com.huanchengfly.tieba.post.models.PermissionBean;
/fragments\WebViewFragment.java:41:import com.huanchengfly.tieba.post.utils.AccountUtil;
/fragments\WebViewFragment.java:42:import com.huanchengfly.tieba.post.utils.DialogUtil;
/fragments\WebViewFragment.java:43:import com.huanchengfly.tieba.post.utils.FileUtil;
/fragments\WebViewFragment.java:44:import com.huanchengfly.tieba.post.utils.HistoryHelper;
/fragments\WebViewFragment.java:45:import com.huanchengfly.tieba.post.utils.NavigationHelper;
/fragments\WebViewFragment.java:46:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/fragments\WebViewFragment.java:47:import com.huanchengfly.tieba.post.utils.TiebaLiteJavaScript;
/fragments\WebViewFragment.java:48:import com.huanchengfly.tieba.post.utils.Util;
/fragments\WebViewFragment.java:49:import com.huanchengfly.tieba.post.utils.AssetUtil;
/fragments\WebViewFragment.java:50:import com.yanzhenjie.permission.AndPermission;
/fragments\WebViewFragment.java:51:import com.yanzhenjie.permission.runtime.Permission;
/fragments\WebViewFragment.java:53:import org.jetbrains.annotations.NotNull;
/fragments\WebViewFragment.java:55:import java.util.List;
/fragments\WebViewFragment.java:57:import static com.huanchengfly.tieba.post.utils.FileUtil.FILE_TYPE_DOWNLOAD;
/fragments\WebViewFragment.java:59://TODO: 代码太烂，需要重写
/fragments\WebViewFragment.java:60:public class WebViewFragment extends BaseFragment implements DownloadListener {
/fragments\WebViewFragment.java:61:    public static final String TAG = WebViewFragment.class.getSimpleName();
/fragments\WebViewFragment.java:62:    private static final String DEFAULT_TITLE = "贴吧 Lite";
/fragments\WebViewFragment.java:63:    private final static int FILE_CHOOSER_RESULT_CODE = 1;
/fragments\WebViewFragment.java:64:    private String mUrl;
/fragments\WebViewFragment.java:65:    private String mTitle;
/fragments\WebViewFragment.java:66:    private boolean lazyLoad;
/fragments\WebViewFragment.java:67:    private boolean enableSwipeRefresh;
/fragments\WebViewFragment.java:68:    private boolean isSapi;
/fragments\WebViewFragment.java:69:    private String activityName;
/fragments\WebViewFragment.java:70:    private String tbliteJs;
/fragments\WebViewFragment.java:71:    private String nightJs;
/fragments\WebViewFragment.java:72:    private String aNightJs;
/fragments\WebViewFragment.java:73:    private WebView mWebView;
/fragments\WebViewFragment.java:74:    private NavigationHelper navigationHelper;
/fragments\WebViewFragment.java:75:    private ValueCallback<Uri> uploadMessage;
/fragments\WebViewFragment.java:76:    private ValueCallback<Uri[]> uploadMessageAboveL;
/fragments\WebViewFragment.java:77:    private SwipeRefreshLayout swipeRefreshLayout;
/fragments\WebViewFragment.java:79:    public WebViewFragment() {
/fragments\WebViewFragment.java:80:    }
/fragments\WebViewFragment.java:82:    public static WebViewFragment newInstance(String url, String activityName) {
/fragments\WebViewFragment.java:83:        return newInstance(url, activityName, null);
/fragments\WebViewFragment.java:84:    }
/fragments\WebViewFragment.java:86:    public static WebViewFragment newInstance(String url, String activityName, String title) {
/fragments\WebViewFragment.java:87:        return newInstance(url, activityName, title, false);
/fragments\WebViewFragment.java:88:    }
/fragments\WebViewFragment.java:90:    public static WebViewFragment newInstance(String url, String activityName, boolean lazyLoad) {
/fragments\WebViewFragment.java:91:        return newInstance(url, activityName, null, lazyLoad);
/fragments\WebViewFragment.java:92:    }
/fragments\WebViewFragment.java:94:    public static WebViewFragment newInstance(String url, String activityName, @Nullable String title, boolean lazyLoad) {
/fragments\WebViewFragment.java:95:        return newInstance(url, activityName, title, lazyLoad, true);
/fragments\WebViewFragment.java:96:    }
/fragments\WebViewFragment.java:98:    public static WebViewFragment newInstance(String url, String activityName, @Nullable String title, boolean lazyLoad, boolean enableSwipeRefresh) {
/fragments\WebViewFragment.java:99:        return newInstance(url, activityName, title, lazyLoad, enableSwipeRefresh, false);
/fragments\WebViewFragment.java:100:    }
/fragments\WebViewFragment.java:102:    public static WebViewFragment newInstance(String url, String activityName, @Nullable String title, boolean lazyLoad, boolean enableSwipeRefresh, boolean isSapi) {
/fragments\WebViewFragment.java:103:        WebViewFragment fragment = new WebViewFragment();
/fragments\WebViewFragment.java:104:        Bundle bundle = new Bundle();
/fragments\WebViewFragment.java:105:        bundle.putString("url", url);
/fragments\WebViewFragment.java:106:        bundle.putString("title", title == null ? DEFAULT_TITLE : title);
/fragments\WebViewFragment.java:107:        bundle.putString("activity", activityName);
/fragments\WebViewFragment.java:108:        bundle.putBoolean("enableSwipeRefresh", enableSwipeRefresh);
/fragments\WebViewFragment.java:109:        bundle.putBoolean("isSapi", isSapi);
/fragments\WebViewFragment.java:110:        bundle.putBoolean("lazyLoad", lazyLoad);
/fragments\WebViewFragment.java:111:        fragment.setArguments(bundle);
/fragments\WebViewFragment.java:112:        return fragment;
/fragments\WebViewFragment.java:113:    }
/fragments\WebViewFragment.java:115:    @Override
/fragments\WebViewFragment.java:116:    public void onDownloadStart(String url, String userAgent, String contentDisposition, String mimetype, long contentLength) {
/fragments\WebViewFragment.java:117:        String fileName = URLUtil.guessFileName(url, contentDisposition, mimetype);
/fragments\WebViewFragment.java:118:        Util.createSnackbar(mWebView, getAttachContext().getString(R.string.snackbar_download, fileName), Snackbar.LENGTH_INDEFINITE)
/fragments\WebViewFragment.java:119:                .setAction(R.string.button_download, v -> {
/fragments\WebViewFragment.java:120:                    FileUtil.downloadBySystem(getAttachContext(), FILE_TYPE_DOWNLOAD, url, fileName);
/fragments\WebViewFragment.java:121:                    Toast.makeText(getAttachContext(), R.string.toast_start_download, Toast.LENGTH_SHORT).show();
/fragments\WebViewFragment.java:122:                })
/fragments\WebViewFragment.java:123:                .show();
/fragments\WebViewFragment.java:124:    }
/fragments\WebViewFragment.java:126:    private boolean isEnabledLocationFunction() {
/fragments\WebViewFragment.java:127:        int locationMode = 0;
/fragments\WebViewFragment.java:128:        try {
/fragments\WebViewFragment.java:129:            locationMode = Settings.Secure.getInt(getAttachContext().getContentResolver(), Settings.Secure.LOCATION_MODE);
/fragments\WebViewFragment.java:130:        } catch (Settings.SettingNotFoundException e) {
/fragments\WebViewFragment.java:131:            e.printStackTrace();
/fragments\WebViewFragment.java:132:            return false;
/fragments\WebViewFragment.java:133:        }
/fragments\WebViewFragment.java:134:        return locationMode != Settings.Secure.LOCATION_MODE_OFF;
/fragments\WebViewFragment.java:135:    }
/fragments\WebViewFragment.java:137:    @NonNull
/fragments\WebViewFragment.java:138:    public WebView getWebView() {
/fragments\WebViewFragment.java:139:        return mWebView;
/fragments\WebViewFragment.java:140:    }
/fragments\WebViewFragment.java:142:    @Override
/fragments\WebViewFragment.java:143:    public void onSaveInstanceState(Bundle outState) {
/fragments\WebViewFragment.java:144:        outState.putString("url", mUrl);
/fragments\WebViewFragment.java:145:        outState.putString("title", mTitle);
/fragments\WebViewFragment.java:146:        outState.putBoolean("lazyLoad", lazyLoad);
/fragments\WebViewFragment.java:147:        outState.putBoolean("enableSwipeRefresh", enableSwipeRefresh);
/fragments\WebViewFragment.java:148:        outState.putBoolean("isSapi", isSapi);
/fragments\WebViewFragment.java:149:        outState.putString("activity", activityName);
/fragments\WebViewFragment.java:150:        mWebView.saveState(outState);
/fragments\WebViewFragment.java:151:        super.onSaveInstanceState(outState);
/fragments\WebViewFragment.java:152:    }
/fragments\WebViewFragment.java:154:    @Override
/fragments\WebViewFragment.java:155:    public void onActivityCreated(Bundle savedInstanceState) {
/fragments\WebViewFragment.java:156:        if (savedInstanceState != null) {
/fragments\WebViewFragment.java:157:            mUrl = savedInstanceState.getString("url");
/fragments\WebViewFragment.java:158:            mTitle = savedInstanceState.getString("title");
/fragments\WebViewFragment.java:159:            lazyLoad = savedInstanceState.getBoolean("lazyLoad", false);
/fragments\WebViewFragment.java:160:            enableSwipeRefresh = savedInstanceState.getBoolean("enableSwipeRefresh", true);
/fragments\WebViewFragment.java:161:            isSapi = savedInstanceState.getBoolean("isSapi", false);
/fragments\WebViewFragment.java:162:            activityName = savedInstanceState.getString("activity");
/fragments\WebViewFragment.java:163:            navigationHelper = NavigationHelper.newInstance(getAttachContext());
/fragments\WebViewFragment.java:164:            mWebView.restoreState(savedInstanceState);
/fragments\WebViewFragment.java:165:        }
/fragments\WebViewFragment.java:166:        super.onActivityCreated(savedInstanceState);
/fragments\WebViewFragment.java:167:    }
/fragments\WebViewFragment.java:169:    @Override
/fragments\WebViewFragment.java:170:    public boolean onBackPressed() {
/fragments\WebViewFragment.java:171:        if (mWebView.canGoBack()) {
/fragments\WebViewFragment.java:172:            mWebView.goBack();
/fragments\WebViewFragment.java:173:            return true;
/fragments\WebViewFragment.java:174:        }
/fragments\WebViewFragment.java:175:        return super.onBackPressed();
/fragments\WebViewFragment.java:176:    }
/fragments\WebViewFragment.java:178:    @Override
/fragments\WebViewFragment.java:179:    public void onDestroyView() {
/fragments\WebViewFragment.java:180:        super.onDestroyView();
/fragments\WebViewFragment.java:181:        if (mWebView != null) {
/fragments\WebViewFragment.java:182:            ((ViewGroup) mWebView.getParent()).removeView(mWebView);
/fragments\WebViewFragment.java:183:            mWebView.removeAllViews();
/fragments\WebViewFragment.java:184:            mWebView.destroy();
/fragments\WebViewFragment.java:185:            mWebView = null;
/fragments\WebViewFragment.java:186:        }
/fragments\WebViewFragment.java:187:    }
/fragments\WebViewFragment.java:189:    private void initData() {
/fragments\WebViewFragment.java:190:        tbliteJs = AssetUtil.getStringFromAsset(getAttachContext(), "tblite.js");
/fragments\WebViewFragment.java:191:        nightJs = AssetUtil.getStringFromAsset(getAttachContext(), "night.js");
/fragments\WebViewFragment.java:192:        aNightJs = AssetUtil.getStringFromAsset(getAttachContext(), "anight.js");
/fragments\WebViewFragment.java:193:    }
/fragments\WebViewFragment.java:195:    @Override
/fragments\WebViewFragment.java:196:    public void onCreate(@Nullable Bundle savedInstanceState) {
/fragments\WebViewFragment.java:197:        super.onCreate(savedInstanceState);
/fragments\WebViewFragment.java:198:        HistoryHelper helper = new HistoryHelper(getAttachContext());
/fragments\WebViewFragment.java:199:        initData();
/fragments\WebViewFragment.java:200:        Bundle bundle = getArguments();
/fragments\WebViewFragment.java:201:        navigationHelper = NavigationHelper.newInstance(getAttachContext());
/fragments\WebViewFragment.java:202:        if (savedInstanceState == null && bundle != null) {
/fragments\WebViewFragment.java:203:            mUrl = bundle.getString("url");
/fragments\WebViewFragment.java:204:            mTitle = bundle.getString("title");
/fragments\WebViewFragment.java:205:            lazyLoad = bundle.getBoolean("lazyLoad", false);
/fragments\WebViewFragment.java:206:            enableSwipeRefresh = bundle.getBoolean("enableSwipeRefresh", true);
/fragments\WebViewFragment.java:207:            isSapi = bundle.getBoolean("isSapi", false);
/fragments\WebViewFragment.java:208:            activityName = bundle.getString("activity");
/fragments\WebViewFragment.java:209:        }
/fragments\WebViewFragment.java:210:    }
/fragments\WebViewFragment.java:212:    @Override
/fragments\WebViewFragment.java:213:    protected void onFragmentFirstVisible() {
/fragments\WebViewFragment.java:214:        if (lazyLoad) {
/fragments\WebViewFragment.java:215:            mWebView.loadUrl(mUrl);
/fragments\WebViewFragment.java:216:        }
/fragments\WebViewFragment.java:217:    }
/fragments\WebViewFragment.java:219:    @Override
/fragments\WebViewFragment.java:220:    int getLayoutId() {
/fragments\WebViewFragment.java:221:        return R.layout.fragment_web_view;
/fragments\WebViewFragment.java:222:    }
/fragments\WebViewFragment.java:224:    @NotNull
/fragments\WebViewFragment.java:225:    @SuppressLint("SetJavaScriptEnabled")
/fragments\WebViewFragment.java:226:    @Override
/fragments\WebViewFragment.java:227:    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
/fragments\WebViewFragment.java:228:        View contentView = super.onCreateView(inflater, container, savedInstanceState);
/fragments\WebViewFragment.java:229:        swipeRefreshLayout = contentView.findViewById(R.id.refresh);
/fragments\WebViewFragment.java:230:        mWebView = contentView.findViewById(R.id.webView);
/fragments\WebViewFragment.java:231:        ThemeUtil.setThemeForSwipeRefreshLayout(swipeRefreshLayout);
/fragments\WebViewFragment.java:232:        swipeRefreshLayout.setEnabled(enableSwipeRefresh);
/fragments\WebViewFragment.java:233:        swipeRefreshLayout.setOnRefreshListener(() -> getWebView().reload());
/fragments\WebViewFragment.java:234:        WebSettings webSettings = mWebView.getSettings();
/fragments\WebViewFragment.java:235:        if (isSapi) {
/fragments\WebViewFragment.java:236:            webSettings.setUserAgentString(webSettings.getUserAgentString() + " Sapi_8.7.5.1.6_Android_%E7%99%BE%E5%BA%A6%E8%B4%B4%E5%90%A7_9.9.8.40_" + Build.MODEL.replace(" ", "+") + "_" + Build.VERSION.RELEASE + "_Sapi");
/fragments\WebViewFragment.java:237:        }
/fragments\WebViewFragment.java:238:        webSettings.setJavaScriptEnabled(true);
/fragments\WebViewFragment.java:239:        webSettings.setAllowFileAccess(true);
/fragments\WebViewFragment.java:240:        webSettings.setAllowFileAccessFromFileURLs(true);
/fragments\WebViewFragment.java:241:        webSettings.setAllowUniversalAccessFromFileURLs(true);
/fragments\WebViewFragment.java:242:        webSettings.setCacheMode(WebSettings.LOAD_DEFAULT);
/fragments\WebViewFragment.java:243:        webSettings.setSupportZoom(true);
/fragments\WebViewFragment.java:244:        webSettings.setDisplayZoomControls(false);
/fragments\WebViewFragment.java:245:        webSettings.setDomStorageEnabled(true);
/fragments\WebViewFragment.java:246:        String appCachePath = getAttachContext().getCacheDir().getAbsolutePath();
/fragments\WebViewFragment.java:247:        webSettings.setAppCachePath(appCachePath);
/fragments\WebViewFragment.java:248:        webSettings.setAllowFileAccess(true);
/fragments\WebViewFragment.java:249:        webSettings.setAppCacheEnabled(true);
/fragments\WebViewFragment.java:250:        webSettings.setDomStorageEnabled(true);
/fragments\WebViewFragment.java:251:        webSettings.setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);
/fragments\WebViewFragment.java:252:        mWebView.setWebChromeClient(new ChromeClient());
/fragments\WebViewFragment.java:253:        mWebView.setWebViewClient(new Client());
/fragments\WebViewFragment.java:254:        mWebView.addJavascriptInterface(new TiebaLiteJavaScript(mWebView), "TiebaLiteJsBridge");
/fragments\WebViewFragment.java:255:        mWebView.setBackgroundColor(Color.TRANSPARENT);
/fragments\WebViewFragment.java:256:        mWebView.setDownloadListener(this);
/fragments\WebViewFragment.java:257:        CookieManager.getInstance().setAcceptCookie(true);
/fragments\WebViewFragment.java:258:        if (!lazyLoad) {
/fragments\WebViewFragment.java:259:            mWebView.loadUrl(mUrl);
/fragments\WebViewFragment.java:260:        }
/fragments\WebViewFragment.java:261:        ThemeUtil.setTranslucentThemeWebViewBackground(mWebView);
/fragments\WebViewFragment.java:262:        return contentView;
/fragments\WebViewFragment.java:263:    }
/fragments\WebViewFragment.java:265:    private void injectJavaScript() {
/fragments\WebViewFragment.java:266:        if (mWebView == null) return;
/fragments\WebViewFragment.java:267:        String nowTheme = ThemeUtil.getTheme(getAttachContext());
/fragments\WebViewFragment.java:268:        String url = mWebView.getUrl();
/fragments\WebViewFragment.java:269:        if (url == null || nowTheme == null) {
/fragments\WebViewFragment.java:270:            return;
/fragments\WebViewFragment.java:271:        }
/fragments\WebViewFragment.java:272:        if (mWebView.getUrl().startsWith("http")) {
/fragments\WebViewFragment.java:273:            mWebView.evaluateJavascript(tbliteJs, (String value) -> {
/fragments\WebViewFragment.java:274:                if (mWebView != null)
/fragments\WebViewFragment.java:275:                    mWebView.evaluateJavascript("tblite.init();tblite.theme.init('" + nowTheme + "');", null);
/fragments\WebViewFragment.java:276:            });
/fragments\WebViewFragment.java:277:        }
/fragments\WebViewFragment.java:278:        if (nowTheme.equalsIgnoreCase(ThemeUtil.THEME_AMOLED_DARK)) {
/fragments\WebViewFragment.java:279:            mWebView.evaluateJavascript(aNightJs, null);
/fragments\WebViewFragment.java:280:        } else if (nowTheme.equalsIgnoreCase(ThemeUtil.THEME_BLUE_DARK)) {
/fragments\WebViewFragment.java:281:            mWebView.evaluateJavascript(nightJs, null);
/fragments\WebViewFragment.java:282:        }
/fragments\WebViewFragment.java:283:    }
/fragments\WebViewFragment.java:285:    private void openImageChooserActivity() {
/fragments\WebViewFragment.java:286:        Intent i = new Intent(Intent.ACTION_GET_CONTENT);
/fragments\WebViewFragment.java:287:        i.addCategory(Intent.CATEGORY_OPENABLE);
/fragments\WebViewFragment.java:288:        i.setType("image/*");
/fragments\WebViewFragment.java:289:        startActivityForResult(Intent.createChooser(i, getAttachContext().getString(R.string.title_select_pic)), FILE_CHOOSER_RESULT_CODE);
/fragments\WebViewFragment.java:290:    }
/fragments\WebViewFragment.java:292:    @Override
/fragments\WebViewFragment.java:293:    public void onActivityResult(int requestCode, int resultCode, Intent data) {
/fragments\WebViewFragment.java:294:        super.onActivityResult(requestCode, resultCode, data);
/fragments\WebViewFragment.java:295:        if (requestCode == FILE_CHOOSER_RESULT_CODE) {
/fragments\WebViewFragment.java:296:            if (null == uploadMessage && null == uploadMessageAboveL) return;
/fragments\WebViewFragment.java:297:            Uri result = data == null || resultCode != Activity.RESULT_OK ? null : data.getData();
/fragments\WebViewFragment.java:298:            if (uploadMessageAboveL != null) {
/fragments\WebViewFragment.java:299:                onActivityResultAboveL(requestCode, resultCode, data);
/fragments\WebViewFragment.java:300:            } else if (uploadMessage != null) {
/fragments\WebViewFragment.java:301:                uploadMessage.onReceiveValue(result);
/fragments\WebViewFragment.java:302:                uploadMessage = null;
/fragments\WebViewFragment.java:303:            }
/fragments\WebViewFragment.java:304:        }
/fragments\WebViewFragment.java:305:    }
/fragments\WebViewFragment.java:307:    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
/fragments\WebViewFragment.java:308:    private void onActivityResultAboveL(int requestCode, int resultCode, Intent intent) {
/fragments\WebViewFragment.java:309:        if (requestCode != FILE_CHOOSER_RESULT_CODE || uploadMessageAboveL == null)
/fragments\WebViewFragment.java:310:            return;
/fragments\WebViewFragment.java:311:        Uri[] results = null;
/fragments\WebViewFragment.java:312:        if (resultCode == Activity.RESULT_OK) {
/fragments\WebViewFragment.java:313:            if (intent != null) {
/fragments\WebViewFragment.java:314:                String dataString = intent.getDataString();
/fragments\WebViewFragment.java:315:                ClipData clipData = intent.getClipData();
/fragments\WebViewFragment.java:316:                if (clipData != null) {
/fragments\WebViewFragment.java:317:                    results = new Uri[clipData.getItemCount()];
/fragments\WebViewFragment.java:318:                    for (int i = 0; i < clipData.getItemCount(); i++) {
/fragments\WebViewFragment.java:319:                        ClipData.Item item = clipData.getItemAt(i);
/fragments\WebViewFragment.java:320:                        results[i] = item.getUri();
/fragments\WebViewFragment.java:321:                    }
/fragments\WebViewFragment.java:322:                }
/fragments\WebViewFragment.java:323:                if (dataString != null)
/fragments\WebViewFragment.java:324:                    results = new Uri[]{Uri.parse(dataString)};
/fragments\WebViewFragment.java:325:            }
/fragments\WebViewFragment.java:326:        }
/fragments\WebViewFragment.java:327:        uploadMessageAboveL.onReceiveValue(results);
/fragments\WebViewFragment.java:328:        uploadMessageAboveL = null;
/fragments\WebViewFragment.java:329:    }
/fragments\WebViewFragment.java:331:    private class Client extends WebViewClient {
/fragments\WebViewFragment.java:332:        @Override
/fragments\WebViewFragment.java:333:        public void onPageFinished(WebView view, String url) {
/fragments\WebViewFragment.java:334:            if (getAttachContext() instanceof WebViewListener) {
/fragments\WebViewFragment.java:335:                ((WebViewListener) getAttachContext()).onPageFinished(view, url);
/fragments\WebViewFragment.java:336:            }
/fragments\WebViewFragment.java:337:            if (enableSwipeRefresh) swipeRefreshLayout.setRefreshing(false);
/fragments\WebViewFragment.java:338:            injectJavaScript();
/fragments\WebViewFragment.java:339:        }
/fragments\WebViewFragment.java:341:        @Override
/fragments\WebViewFragment.java:342:        public WebResourceResponse shouldInterceptRequest(WebView view, WebResourceRequest request) {
/fragments\WebViewFragment.java:343:            String url = request.getUrl().toString();
/fragments\WebViewFragment.java:344:            return shouldInterceptRequest(view, url);
/fragments\WebViewFragment.java:345:        }
/fragments\WebViewFragment.java:347:        @Override
/fragments\WebViewFragment.java:348:        public void onPageStarted(WebView view, String url, Bitmap favicon) {
/fragments\WebViewFragment.java:349:            if (getAttachContext() instanceof WebViewListener) {
/fragments\WebViewFragment.java:350:                ((WebViewListener) getAttachContext()).onPageStarted(view, url, favicon);
/fragments\WebViewFragment.java:351:            }
/fragments\WebViewFragment.java:352:            if (enableSwipeRefresh) swipeRefreshLayout.setRefreshing(true);
/fragments\WebViewFragment.java:353:            if (AccountUtil.isLoggedIn(getAttachContext()) && !activityName.startsWith("LoginActivity") && !activityName.startsWith("UpdateInfoActivity")) {
/fragments\WebViewFragment.java:354:                String cookieStr = AccountUtil.getBdussCookie(getAttachContext());
/fragments\WebViewFragment.java:355:                CookieManager.getInstance().setCookie(url, cookieStr);
/fragments\WebViewFragment.java:356:            }
/fragments\WebViewFragment.java:357:        }
/fragments\WebViewFragment.java:359:        @Override
/fragments\WebViewFragment.java:360:        public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
/fragments\WebViewFragment.java:361:            return navigationHelper.interceptWebViewRequest(view, request);
/fragments\WebViewFragment.java:362:        }
/fragments\WebViewFragment.java:364:        @Override
/fragments\WebViewFragment.java:365:        public boolean shouldOverrideUrlLoading(WebView view, String url) {
/fragments\WebViewFragment.java:366:            return navigationHelper.interceptWebViewRequest(view, url);
/fragments\WebViewFragment.java:367:        }
/fragments\WebViewFragment.java:368:    }
/fragments\WebViewFragment.java:370:    private class ChromeClient extends WebChromeClient {
/fragments\WebViewFragment.java:371:        @SuppressLint("WrongConstant")
/fragments\WebViewFragment.java:372:        @Override
/fragments\WebViewFragment.java:373:        public void onGeolocationPermissionsShowPrompt(String origin, GeolocationPermissions.Callback callback) {
/fragments\WebViewFragment.java:374:            Uri uri = Uri.parse(mWebView.getUrl());
/fragments\WebViewFragment.java:375:            if (uri != null && uri.getHost() != null) {
/fragments\WebViewFragment.java:376:                new PermissionDialog(getAttachContext(),
/fragments\WebViewFragment.java:377:                        new PermissionBean(PermissionDialog.CustomPermission.PERMISSION_LOCATION,
/fragments\WebViewFragment.java:378:                                uri.getHost(),
/fragments\WebViewFragment.java:379:                                getAttachContext().getString(R.string.title_ask_permission, uri.getHost(), getAttachContext().getString(R.string.permission_name_location)),
/fragments\WebViewFragment.java:380:                                R.drawable.ic_round_location_on))
/fragments\WebViewFragment.java:381:                        .setOnGrantedCallback(isForever -> {
/fragments\WebViewFragment.java:382:                            AndPermission.with(getAttachContext())
/fragments\WebViewFragment.java:383:                                    .runtime()
/fragments\WebViewFragment.java:384:                                    .permission(Permission.ACCESS_COARSE_LOCATION, Permission.ACCESS_FINE_LOCATION)
/fragments\WebViewFragment.java:385:                                    .onGranted((List<String> permissions) -> {
/fragments\WebViewFragment.java:386:                                        if (isEnabledLocationFunction()) {
/fragments\WebViewFragment.java:387:                                            callback.invoke(origin, true, isForever);
/fragments\WebViewFragment.java:388:                                        } else {
/fragments\WebViewFragment.java:389:                                            callback.invoke(origin, false, false);
/fragments\WebViewFragment.java:390:                                        }
/fragments\WebViewFragment.java:391:                                    })
/fragments\WebViewFragment.java:392:                                    .onDenied((List<String> permissions) -> callback.invoke(origin, false, false))
/fragments\WebViewFragment.java:393:                                    .start();
/fragments\WebViewFragment.java:394:                        })
/fragments\WebViewFragment.java:395:                        .setOnDeniedCallback(isForever -> callback.invoke(origin, false, false))
/fragments\WebViewFragment.java:396:                        .show();
/fragments\WebViewFragment.java:397:            }
/fragments\WebViewFragment.java:398:        }
/fragments\WebViewFragment.java:400:        @Override
/fragments\WebViewFragment.java:401:        public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback, WebChromeClient.FileChooserParams fileChooserParams) {
/fragments\WebViewFragment.java:402:            uploadMessageAboveL = filePathCallback;
/fragments\WebViewFragment.java:403:            openImageChooserActivity();
/fragments\WebViewFragment.java:404:            return true;
/fragments\WebViewFragment.java:405:        }
/fragments\WebViewFragment.java:407:        @Override
/fragments\WebViewFragment.java:408:        public boolean onJsAlert(WebView webView, String url, String message, JsResult result) {
/fragments\WebViewFragment.java:409:            DialogUtil.build(webView.getContext())
/fragments\WebViewFragment.java:410:                    .setMessage(message).setPositiveButton(R.string.button_sure_default, null)
/fragments\WebViewFragment.java:411:                    .setCancelable(false)
/fragments\WebViewFragment.java:412:                    .create().show();
/fragments\WebViewFragment.java:413:            result.confirm();
/fragments\WebViewFragment.java:414:            return true;
/fragments\WebViewFragment.java:415:        }
/fragments\WebViewFragment.java:417:        public boolean onJsConfirm(WebView view, String url, String message, final JsResult result) {
/fragments\WebViewFragment.java:418:            DialogUtil.build(view.getContext())
/fragments\WebViewFragment.java:419:                    .setTitle("Confirm")
/fragments\WebViewFragment.java:420:                    .setMessage(message)
/fragments\WebViewFragment.java:421:                    .setPositiveButton(android.R.string.ok, (dialog, which) -> result.confirm())
/fragments\WebViewFragment.java:422:                    .setNegativeButton(android.R.string.cancel, (dialog, which) -> result.cancel())
/fragments\WebViewFragment.java:423:                    .create().show();
/fragments\WebViewFragment.java:424:            return true;
/fragments\WebViewFragment.java:425:        }
/fragments\WebViewFragment.java:427:        @Override
/fragments\WebViewFragment.java:428:        public void onReceivedTitle(WebView view, String title) {
/fragments\WebViewFragment.java:429:            super.onReceivedTitle(view, title);
/fragments\WebViewFragment.java:430:            mTitle = title;
/fragments\WebViewFragment.java:431:            injectJavaScript();
/fragments\WebViewFragment.java:432:            if (getAttachContext() instanceof OnReceivedTitleListener) {
/fragments\WebViewFragment.java:433:                ((OnReceivedTitleListener) getAttachContext()).onReceivedTitle(view, title, view.getUrl());
/fragments\WebViewFragment.java:434:            }
/fragments\WebViewFragment.java:435:        }
/fragments\WebViewFragment.java:437:        @Override
/fragments\WebViewFragment.java:438:        public void onProgressChanged(WebView view, int newProgress) {
/fragments\WebViewFragment.java:439:            if (newProgress >= 100) {
/fragments\WebViewFragment.java:440:                if (enableSwipeRefresh) swipeRefreshLayout.setRefreshing(false);
/fragments\WebViewFragment.java:441:            }
/fragments\WebViewFragment.java:442:        }
/fragments\WebViewFragment.java:443:    }
/fragments\WebViewFragment.java:444:}/fragments\FloorFragment.kt:1:package com.huanchengfly.tieba.post.fragments
/fragments\FloorFragment.kt:3:import android.content.BroadcastReceiver
/fragments\FloorFragment.kt:4:import android.content.Context
/fragments\FloorFragment.kt:5:import android.content.Intent
/fragments\FloorFragment.kt:6:import android.content.IntentFilter
/fragments\FloorFragment.kt:7:import android.os.Bundle
/fragments\FloorFragment.kt:8:import android.view.View
/fragments\FloorFragment.kt:9:import android.widget.Toast
/fragments\FloorFragment.kt:10:import androidx.appcompat.widget.Toolbar
/fragments\FloorFragment.kt:11:import androidx.recyclerview.widget.LinearLayoutManager
/fragments\FloorFragment.kt:12:import androidx.recyclerview.widget.RecyclerView
/fragments\FloorFragment.kt:13:import butterknife.BindView
/fragments\FloorFragment.kt:14:import butterknife.OnClick
/fragments\FloorFragment.kt:15:import com.google.android.material.appbar.AppBarLayout
/fragments\FloorFragment.kt:16:import com.google.android.material.bottomsheet.BottomSheetBehavior
/fragments\FloorFragment.kt:17:import com.google.android.material.bottomsheet.BottomSheetBehavior.BottomSheetCallback
/fragments\FloorFragment.kt:18:import com.huanchengfly.tieba.post.R
/fragments\FloorFragment.kt:19:import com.huanchengfly.tieba.post.activities.ReplyActivity
/fragments\FloorFragment.kt:20:import com.huanchengfly.tieba.post.activities.ThreadActivity
/fragments\FloorFragment.kt:21:import com.huanchengfly.tieba.post.adapters.RecyclerFloorAdapter
/fragments\FloorFragment.kt:22:import com.huanchengfly.tieba.post.api.TiebaApi
/fragments\FloorFragment.kt:23:import com.huanchengfly.tieba.post.api.models.SubFloorListBean
/fragments\FloorFragment.kt:24:import com.huanchengfly.tieba.post.components.MyLinearLayoutManager
/fragments\FloorFragment.kt:25:import com.huanchengfly.tieba.post.components.dividers.ThreadDivider
/fragments\FloorFragment.kt:26:import com.huanchengfly.tieba.post.components.transformations.RadiusTransformation
/fragments\FloorFragment.kt:27:import com.huanchengfly.tieba.post.models.ReplyInfoBean
/fragments\FloorFragment.kt:28:import com.huanchengfly.tieba.post.utils.AccountUtil
/fragments\FloorFragment.kt:29:import com.huanchengfly.tieba.post.utils.ThemeUtil
/fragments\FloorFragment.kt:30:import retrofit2.Call
/fragments\FloorFragment.kt:31:import retrofit2.Callback
/fragments\FloorFragment.kt:32:import retrofit2.Response
/fragments\FloorFragment.kt:34:class FloorFragment : BaseBottomSheetDialogFragment() {
/fragments\FloorFragment.kt:35:    @BindView(R.id.toolbar)
/fragments\FloorFragment.kt:36:    lateinit var toolbar: Toolbar
/fragments\FloorFragment.kt:37:    @BindView(R.id.appbar)
/fragments\FloorFragment.kt:38:    lateinit var appBarLayout: AppBarLayout
/fragments\FloorFragment.kt:39:    private var dataBean: SubFloorListBean? = null
/fragments\FloorFragment.kt:40:    @BindView(R.id.floor_recycler_view)
/fragments\FloorFragment.kt:41:    lateinit var recyclerView: RecyclerView
/fragments\FloorFragment.kt:42:    private var recyclerViewAdapter: RecyclerFloorAdapter? = null
/fragments\FloorFragment.kt:43:    private var tid = ""
/fragments\FloorFragment.kt:44:    private var pid = ""
/fragments\FloorFragment.kt:45:    private var spid: String? = null
/fragments\FloorFragment.kt:46:    private var jump = false
/fragments\FloorFragment.kt:47:    private var pn = 1
/fragments\FloorFragment.kt:48:    private var mLayoutManager: LinearLayoutManager? = null
/fragments\FloorFragment.kt:49:    private val replyReceiver: BroadcastReceiver = object : BroadcastReceiver() {
/fragments\FloorFragment.kt:50:        override fun onReceive(context: Context, intent: Intent) {
/fragments\FloorFragment.kt:51:            val action = intent.action
/fragments\FloorFragment.kt:52:            if (action != null && action == ThreadActivity.ACTION_REPLY_SUCCESS) {
/fragments\FloorFragment.kt:53:                val pid = intent.getStringExtra("pid")
/fragments\FloorFragment.kt:54:                if (pid == this@FloorFragment.pid) {
/fragments\FloorFragment.kt:55:                    refresh()
/fragments\FloorFragment.kt:56:                }
/fragments\FloorFragment.kt:57:            }
/fragments\FloorFragment.kt:58:        }
/fragments\FloorFragment.kt:59:    }
/fragments\FloorFragment.kt:61:    @OnClick(R.id.floor_reply_bar)
/fragments\FloorFragment.kt:62:    fun onReplyBarClick(view: View) {
/fragments\FloorFragment.kt:63:        if (dataBean == null) {
/fragments\FloorFragment.kt:64:            return
/fragments\FloorFragment.kt:65:        }
/fragments\FloorFragment.kt:66:        val floor = dataBean!!.post!!.floor.toInt()
/fragments\FloorFragment.kt:67:        val pn = floor - floor % 30
/fragments\FloorFragment.kt:68:        startActivity(Intent(attachContext, ReplyActivity::class.java).putExtra("data",
/fragments\FloorFragment.kt:69:                ReplyInfoBean(dataBean!!.thread!!.id,
/fragments\FloorFragment.kt:70:                        dataBean!!.forum!!.id,
/fragments\FloorFragment.kt:71:                        dataBean!!.forum!!.name,
/fragments\FloorFragment.kt:72:                        dataBean!!.anti!!.tbs,
/fragments\FloorFragment.kt:73:                        dataBean!!.post!!.id,
/fragments\FloorFragment.kt:74:                        dataBean!!.post!!.floor,
/fragments\FloorFragment.kt:75:                        dataBean!!.post!!.author.nameShow,
/fragments\FloorFragment.kt:76:                        AccountUtil.getLoginInfo(attachContext)!!.nameShow).setPn(pn.toString()).toString()))
/fragments\FloorFragment.kt:77:    }
/fragments\FloorFragment.kt:79:    override fun onStart() {
/fragments\FloorFragment.kt:80:        super.onStart()
/fragments\FloorFragment.kt:81:        val filter = IntentFilter()
/fragments\FloorFragment.kt:82:        filter.addAction(ThreadActivity.ACTION_REPLY_SUCCESS)
/fragments\FloorFragment.kt:83:        attachContext.registerReceiver(replyReceiver, filter)
/fragments\FloorFragment.kt:84:    }
/fragments\FloorFragment.kt:86:    override fun onStop() {
/fragments\FloorFragment.kt:87:        super.onStop()
/fragments\FloorFragment.kt:88:        attachContext.unregisterReceiver(replyReceiver)
/fragments\FloorFragment.kt:89:    }
/fragments\FloorFragment.kt:91:    override fun onCreate(savedInstanceState: Bundle?) {
/fragments\FloorFragment.kt:92:        super.onCreate(savedInstanceState)
/fragments\FloorFragment.kt:93:        val args = arguments
/fragments\FloorFragment.kt:94:        if (args != null) {
/fragments\FloorFragment.kt:95:            tid = args.getString(PARAM_TID, null)
/fragments\FloorFragment.kt:96:            pid = args.getString(PARAM_PID, null)
/fragments\FloorFragment.kt:97:            spid = args.getString(PARAM_SUB_POST_ID, null)
/fragments\FloorFragment.kt:98:            jump = args.getBoolean(PARAM_JUMP, false)
/fragments\FloorFragment.kt:99:        }
/fragments\FloorFragment.kt:100:    }
/fragments\FloorFragment.kt:102:    override fun initView() {
/fragments\FloorFragment.kt:103:        ThemeUtil.setTranslucentThemeBackground(rootView.findViewById(R.id.background),
/fragments\FloorFragment.kt:104:                false,
/fragments\FloorFragment.kt:105:                false,
/fragments\FloorFragment.kt:106:                RadiusTransformation(attachContext,
/fragments\FloorFragment.kt:107:                        8,
/fragments\FloorFragment.kt:108:                        RadiusTransformation.CORNER_TOP_LEFT or RadiusTransformation.CORNER_TOP_RIGHT))
/fragments\FloorFragment.kt:109:        toolbar.apply {
/fragments\FloorFragment.kt:110:            setTitle(R.string.title_floor)
/fragments\FloorFragment.kt:111:            setNavigationIcon(R.drawable.ic_round_close)
/fragments\FloorFragment.kt:112:            setNavigationOnClickListener { close() }
/fragments\FloorFragment.kt:113:        }
/fragments\FloorFragment.kt:114:        appBarLayout.setBackgroundResource(R.drawable.bg_toolbar)
/fragments\FloorFragment.kt:115:        mLayoutManager = MyLinearLayoutManager(attachContext)
/fragments\FloorFragment.kt:116:        recyclerViewAdapter = RecyclerFloorAdapter(attachContext).apply {
/fragments\FloorFragment.kt:117:            setLoadingView(R.layout.layout_footer_loading)
/fragments\FloorFragment.kt:118:            setLoadEndView(R.layout.layout_footer_loadend)
/fragments\FloorFragment.kt:119:            setLoadFailedView(R.layout.layout_footer_load_failed)
/fragments\FloorFragment.kt:120:            setOnLoadMoreListener { load(it) }
/fragments\FloorFragment.kt:121:        }
/fragments\FloorFragment.kt:122:        recyclerView.apply {
/fragments\FloorFragment.kt:123:            addItemDecoration(ThreadDivider(attachContext))
/fragments\FloorFragment.kt:124:            layoutManager = mLayoutManager
/fragments\FloorFragment.kt:125:            adapter = recyclerViewAdapter
/fragments\FloorFragment.kt:126:        }
/fragments\FloorFragment.kt:127:        if (tid.isNotEmpty() && (pid.isNotEmpty() || !spid.isNullOrEmpty())) {
/fragments\FloorFragment.kt:128:            refresh(jump)
/fragments\FloorFragment.kt:129:        }
/fragments\FloorFragment.kt:130:    }
/fragments\FloorFragment.kt:132:    override fun onCreatedBehavior(behavior: BottomSheetBehavior<*>) {
/fragments\FloorFragment.kt:133:        behavior.state = BottomSheetBehavior.STATE_EXPANDED
/fragments\FloorFragment.kt:134:        behavior.skipCollapsed = true
/fragments\FloorFragment.kt:135:        behavior.setBottomSheetCallback(object : BottomSheetCallback() {
/fragments\FloorFragment.kt:136:            override fun onStateChanged(bottomSheet: View, newState: Int) {
/fragments\FloorFragment.kt:137:                if (newState == BottomSheetBehavior.STATE_EXPANDED) {
/fragments\FloorFragment.kt:138:                    appBarLayout.setBackgroundResource(R.drawable.bg_toolbar)
/fragments\FloorFragment.kt:139:                } else {
/fragments\FloorFragment.kt:140:                    appBarLayout.setBackgroundResource(R.drawable.bg_toolbar_round)
/fragments\FloorFragment.kt:141:                    if (newState == BottomSheetBehavior.STATE_HIDDEN) {
/fragments\FloorFragment.kt:142:                        close()
/fragments\FloorFragment.kt:143:                    }
/fragments\FloorFragment.kt:144:                }
/fragments\FloorFragment.kt:145:            }
/fragments\FloorFragment.kt:147:            override fun onSlide(bottomSheet: View, slideOffset: Float) {}
/fragments\FloorFragment.kt:148:        })
/fragments\FloorFragment.kt:149:    }
/fragments\FloorFragment.kt:151:    override fun getLayoutId(): Int {
/fragments\FloorFragment.kt:152:        return R.layout.fragment_floor
/fragments\FloorFragment.kt:153:    }
/fragments\FloorFragment.kt:155:    private fun refresh(jump: Boolean = false) {
/fragments\FloorFragment.kt:156:        TiebaApi.getInstance()
/fragments\FloorFragment.kt:157:                .floor(tid, pn, pid, spid)
/fragments\FloorFragment.kt:158:                .enqueue(object : Callback<SubFloorListBean> {
/fragments\FloorFragment.kt:159:                    override fun onFailure(call: Call<SubFloorListBean>, t: Throwable) {
/fragments\FloorFragment.kt:160:                        Toast.makeText(attachContext, t.message, Toast.LENGTH_SHORT).show()
/fragments\FloorFragment.kt:161:                        recyclerViewAdapter!!.loadFailed()
/fragments\FloorFragment.kt:162:                    }
/fragments\FloorFragment.kt:164:                    override fun onResponse(call: Call<SubFloorListBean>, response: Response<SubFloorListBean>) {
/fragments\FloorFragment.kt:165:                        val subFloorListBean = response.body() ?: return
/fragments\FloorFragment.kt:166:                        dataBean = subFloorListBean
/fragments\FloorFragment.kt:167:                        recyclerViewAdapter!!.setData(subFloorListBean)
/fragments\FloorFragment.kt:168:                        if (subFloorListBean.page!!.currentPage.toInt() >= subFloorListBean.page.totalPage.toInt()) {
/fragments\FloorFragment.kt:169:                            recyclerViewAdapter!!.loadEnd()
/fragments\FloorFragment.kt:170:                        }
/fragments\FloorFragment.kt:171:                        toolbar.title = attachContext.getString(R.string.title_floor_loaded, subFloorListBean.post!!.floor)
/fragments\FloorFragment.kt:172:                        if (jump) {
/fragments\FloorFragment.kt:173:                            mLayoutManager!!.scrollToPositionWithOffset(1, 0)
/fragments\FloorFragment.kt:174:                        }
/fragments\FloorFragment.kt:175:                    }
/fragments\FloorFragment.kt:176:                })
/fragments\FloorFragment.kt:177:    }
/fragments\FloorFragment.kt:179:    private fun load(reload: Boolean) {
/fragments\FloorFragment.kt:180:        if (!reload) {
/fragments\FloorFragment.kt:181:            pn += 1
/fragments\FloorFragment.kt:182:        }
/fragments\FloorFragment.kt:183:        TiebaApi.getInstance()
/fragments\FloorFragment.kt:184:                .floor(tid, pn, pid, spid)
/fragments\FloorFragment.kt:185:                .enqueue(object : Callback<SubFloorListBean> {
/fragments\FloorFragment.kt:186:                    override fun onFailure(call: Call<SubFloorListBean>, t: Throwable) {
/fragments\FloorFragment.kt:187:                        recyclerViewAdapter!!.loadFailed()
/fragments\FloorFragment.kt:188:                    }
/fragments\FloorFragment.kt:190:                    override fun onResponse(call: Call<SubFloorListBean>, response: Response<SubFloorListBean>) {
/fragments\FloorFragment.kt:191:                        val subFloorListBean = response.body() ?: return
/fragments\FloorFragment.kt:192:                        dataBean = subFloorListBean
/fragments\FloorFragment.kt:193:                        recyclerViewAdapter!!.addData(subFloorListBean)
/fragments\FloorFragment.kt:194:                        if (subFloorListBean.page!!.currentPage.toInt() >= subFloorListBean.page.totalPage.toInt()) {
/fragments\FloorFragment.kt:195:                            recyclerViewAdapter!!.loadEnd()
/fragments\FloorFragment.kt:196:                        }
/fragments\FloorFragment.kt:197:                    }
/fragments\FloorFragment.kt:199:                })
/fragments\FloorFragment.kt:200:    }
/fragments\FloorFragment.kt:202:    companion object {
/fragments\FloorFragment.kt:203:        const val PARAM_TID = "tid"
/fragments\FloorFragment.kt:204:        const val PARAM_PID = "pid"
/fragments\FloorFragment.kt:205:        const val PARAM_SUB_POST_ID = "spid"
/fragments\FloorFragment.kt:206:        const val PARAM_JUMP = "jump"
/fragments\FloorFragment.kt:207:        @JvmStatic
/fragments\FloorFragment.kt:208:        @JvmOverloads
/fragments\FloorFragment.kt:209:        fun newInstance(tid: String?, pid: String?, spid: String? = null, jump: Boolean = false): FloorFragment {
/fragments\FloorFragment.kt:210:            val fragment = FloorFragment()
/fragments\FloorFragment.kt:211:            val bundle = Bundle()
/fragments\FloorFragment.kt:212:            bundle.putString(PARAM_TID, tid)
/fragments\FloorFragment.kt:213:            bundle.putString(PARAM_PID, pid)
/fragments\FloorFragment.kt:214:            bundle.putString(PARAM_SUB_POST_ID, spid ?: "")
/fragments\FloorFragment.kt:215:            bundle.putBoolean(PARAM_JUMP, jump)
/fragments\FloorFragment.kt:216:            fragment.arguments = bundle
/fragments\FloorFragment.kt:217:            return fragment
/fragments\FloorFragment.kt:218:        }
/fragments\FloorFragment.kt:219:    }
/fragments\FloorFragment.kt:220:}/fragments\ForumFragment.kt:1:package com.huanchengfly.tieba.post.fragments
/fragments\ForumFragment.kt:3:import android.os.Bundle
/fragments\ForumFragment.kt:4:import android.view.View
/fragments\ForumFragment.kt:5:import android.widget.Toast
/fragments\ForumFragment.kt:6:import androidx.recyclerview.widget.LinearLayoutManager
/fragments\ForumFragment.kt:7:import androidx.recyclerview.widget.RecyclerView
/fragments\ForumFragment.kt:8:import androidx.recyclerview.widget.RecyclerView.OnChildAttachStateChangeListener
/fragments\ForumFragment.kt:9:import androidx.swiperefreshlayout.widget.SwipeRefreshLayout
/fragments\ForumFragment.kt:10:import butterknife.BindView
/fragments\ForumFragment.kt:11:import cn.jzvd.Jzvd
/fragments\ForumFragment.kt:12:import com.billy.android.preloader.PreLoader
/fragments\ForumFragment.kt:13:import com.billy.android.preloader.interfaces.DataListener
/fragments\ForumFragment.kt:14:import com.bumptech.glide.Glide
/fragments\ForumFragment.kt:15:import com.huanchengfly.tieba.post.api.ForumSortType
/fragments\ForumFragment.kt:16:import com.huanchengfly.tieba.post.api.ForumSortType.Companion.valueOf
/fragments\ForumFragment.kt:17:import com.huanchengfly.tieba.post.api.TiebaApi
/fragments\ForumFragment.kt:18:import com.huanchengfly.tieba.post.api.models.ForumPageBean
/fragments\ForumFragment.kt:19:import com.huanchengfly.tieba.post.api.retrofit.exception.TiebaException
/fragments\ForumFragment.kt:20:import com.huanchengfly.tieba.post.R
/fragments\ForumFragment.kt:21:import com.huanchengfly.tieba.post.adapters.ForumAdapter
/fragments\ForumFragment.kt:22:import com.huanchengfly.tieba.post.components.MyLinearLayoutManager
/fragments\ForumFragment.kt:23:import com.huanchengfly.tieba.post.components.dividers.ForumDivider
/fragments\ForumFragment.kt:24:import com.huanchengfly.tieba.post.interfaces.OnSwitchListener
/fragments\ForumFragment.kt:25:import com.huanchengfly.tieba.post.interfaces.Refreshable
/fragments\ForumFragment.kt:26:import com.huanchengfly.tieba.post.interfaces.ScrollTopable
/fragments\ForumFragment.kt:27:import com.huanchengfly.tieba.post.utils.Util
/fragments\ForumFragment.kt:28:import com.huanchengfly.tieba.post.widgets.VideoPlayerStandard
/fragments\ForumFragment.kt:29:import retrofit2.Call
/fragments\ForumFragment.kt:30:import retrofit2.Callback
/fragments\ForumFragment.kt:31:import retrofit2.Response
/fragments\ForumFragment.kt:33:class ForumFragment : BaseFragment(), Refreshable, OnSwitchListener, ScrollTopable {
/fragments\ForumFragment.kt:34:    private var page = 1
/fragments\ForumFragment.kt:35:    private var pageSize = DEFAULT_PAGE_SIZE
/fragments\ForumFragment.kt:36:    private var sortType: ForumSortType = ForumSortType.REPLY_TIME
/fragments\ForumFragment.kt:37:    private var preload = false
/fragments\ForumFragment.kt:38:    private var preloadId = 0
/fragments\ForumFragment.kt:39:    private var isGood = false
/fragments\ForumFragment.kt:40:    private var classifyId = ""
/fragments\ForumFragment.kt:41:    private var forumName: String? = null
/fragments\ForumFragment.kt:42:    private var mDataBean: ForumPageBean? = null
/fragments\ForumFragment.kt:44:    lateinit var mAdapter: ForumAdapter
/fragments\ForumFragment.kt:45:    @BindView(R.id.recycler_view)
/fragments\ForumFragment.kt:46:    lateinit var mRecyclerView: RecyclerView
/fragments\ForumFragment.kt:47:    @BindView(R.id.refresh)
/fragments\ForumFragment.kt:48:    lateinit var mRefreshLayout: SwipeRefreshLayout
/fragments\ForumFragment.kt:50:    override fun onFragmentFirstVisible() {
/fragments\ForumFragment.kt:51:        if (preload) {
/fragments\ForumFragment.kt:52:            PreLoader.listenData<ForumPageBean>(preloadId, DataHolder())
/fragments\ForumFragment.kt:53:        } else if (mDataBean == null) {
/fragments\ForumFragment.kt:54:            refresh()
/fragments\ForumFragment.kt:55:        }
/fragments\ForumFragment.kt:56:    }
/fragments\ForumFragment.kt:58:    override fun onFragmentVisibleChange(isVisible: Boolean) {
/fragments\ForumFragment.kt:59:        if (isVisible && mDataBean == null) {
/fragments\ForumFragment.kt:60:            refresh()
/fragments\ForumFragment.kt:61:        }
/fragments\ForumFragment.kt:62:    }
/fragments\ForumFragment.kt:64:    override fun onSaveInstanceState(outState: Bundle) {
/fragments\ForumFragment.kt:65:        outState.putString(PARAM_FORUM_NAME, forumName)
/fragments\ForumFragment.kt:66:        outState.putBoolean(PARAM_IS_GOOD, isGood)
/fragments\ForumFragment.kt:67:        outState.putInt(PARAM_SORT_TYPE, sortType.value)
/fragments\ForumFragment.kt:68:        super.onSaveInstanceState(outState)
/fragments\ForumFragment.kt:69:    }
/fragments\ForumFragment.kt:71:    override fun onActivityCreated(savedInstanceState: Bundle?) {
/fragments\ForumFragment.kt:72:        if (savedInstanceState != null) {
/fragments\ForumFragment.kt:73:            forumName = savedInstanceState.getString(PARAM_FORUM_NAME)
/fragments\ForumFragment.kt:74:            isGood = savedInstanceState.getBoolean(PARAM_IS_GOOD)
/fragments\ForumFragment.kt:75:            sortType = valueOf(savedInstanceState.getInt(PARAM_SORT_TYPE))
/fragments\ForumFragment.kt:76:            preload = false
/fragments\ForumFragment.kt:77:        }
/fragments\ForumFragment.kt:78:        super.onActivityCreated(savedInstanceState)
/fragments\ForumFragment.kt:79:    }
/fragments\ForumFragment.kt:81:    fun setSortType(sortType: ForumSortType) {
/fragments\ForumFragment.kt:82:        this.sortType = sortType
/fragments\ForumFragment.kt:83:        mDataBean = null
/fragments\ForumFragment.kt:84:    }
/fragments\ForumFragment.kt:86:    override fun onDestroy() {
/fragments\ForumFragment.kt:87:        super.onDestroy()
/fragments\ForumFragment.kt:88:        if (preload) {
/fragments\ForumFragment.kt:89:            PreLoader.destroy(preloadId)
/fragments\ForumFragment.kt:90:        }
/fragments\ForumFragment.kt:91:    }
/fragments\ForumFragment.kt:93:    override fun onCreate(savedInstanceState: Bundle?) {
/fragments\ForumFragment.kt:94:        super.onCreate(savedInstanceState)
/fragments\ForumFragment.kt:95:        val bundle = arguments
/fragments\ForumFragment.kt:96:        if (savedInstanceState == null && bundle != null) {
/fragments\ForumFragment.kt:97:            forumName = bundle.getString(PARAM_FORUM_NAME)
/fragments\ForumFragment.kt:98:            isGood = bundle.getBoolean(PARAM_IS_GOOD, false)
/fragments\ForumFragment.kt:99:            sortType = valueOf(bundle.getInt(PARAM_SORT_TYPE))
/fragments\ForumFragment.kt:100:            preload = bundle.getBoolean(PARAM_PRELOAD)
/fragments\ForumFragment.kt:101:            preloadId = bundle.getInt(PARAM_PRELOAD_ID)
/fragments\ForumFragment.kt:102:        }
/fragments\ForumFragment.kt:103:        if (isGood) {
/fragments\ForumFragment.kt:104:            classifyId = DEFAULT_CLASSIFY_ID
/fragments\ForumFragment.kt:105:        }
/fragments\ForumFragment.kt:106:        mAdapter = ForumAdapter(attachContext, isGood).apply {
/fragments\ForumFragment.kt:107:            setHasStableIds(true)
/fragments\ForumFragment.kt:108:            setLoadingView(R.layout.layout_footer_loading)
/fragments\ForumFragment.kt:109:            setLoadEndView(R.layout.layout_footer_loadend)
/fragments\ForumFragment.kt:110:            setLoadFailedView(R.layout.layout_footer_load_failed)
/fragments\ForumFragment.kt:111:            setOnLoadMoreListener { isReload: Boolean -> loadMore(isReload) }
/fragments\ForumFragment.kt:112:            if (isGood) setOnSwitchListener(this@ForumFragment)
/fragments\ForumFragment.kt:113:        }
/fragments\ForumFragment.kt:114:    }
/fragments\ForumFragment.kt:116:    public override fun getLayoutId(): Int {
/fragments\ForumFragment.kt:117:        return R.layout.fragment_forum
/fragments\ForumFragment.kt:118:    }
/fragments\ForumFragment.kt:120:    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
/fragments\ForumFragment.kt:121:        super.onViewCreated(view, savedInstanceState)
/fragments\ForumFragment.kt:122:        mRefreshLayout.apply {
/fragments\ForumFragment.kt:123:            setOnRefreshListener { refresh() }
/fragments\ForumFragment.kt:124:        }
/fragments\ForumFragment.kt:125:        mRecyclerView.apply {
/fragments\ForumFragment.kt:126:            layoutManager = MyLinearLayoutManager(attachContext)
/fragments\ForumFragment.kt:127:            addItemDecoration(ForumDivider(attachContext, LinearLayoutManager.VERTICAL))
/fragments\ForumFragment.kt:128:            adapter = mAdapter
/fragments\ForumFragment.kt:129:            if (!appPreferences.loadPictureWhenScroll) {
/fragments\ForumFragment.kt:130:                addOnScrollListener(object : RecyclerView.OnScrollListener() {
/fragments\ForumFragment.kt:131:                    override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) {
/fragments\ForumFragment.kt:132:                        super.onScrollStateChanged(recyclerView, newState)
/fragments\ForumFragment.kt:133:                        if (!Util.canLoadGlide(attachContext)) {
/fragments\ForumFragment.kt:134:                            return
/fragments\ForumFragment.kt:135:                        }
/fragments\ForumFragment.kt:136:                        if (newState == RecyclerView.SCROLL_STATE_IDLE) {
/fragments\ForumFragment.kt:137:                            Glide.with(attachContext)
/fragments\ForumFragment.kt:138:                                    .resumeRequests()
/fragments\ForumFragment.kt:139:                        } else {
/fragments\ForumFragment.kt:140:                            Glide.with(attachContext)
/fragments\ForumFragment.kt:141:                                    .pauseRequests()
/fragments\ForumFragment.kt:142:                        }
/fragments\ForumFragment.kt:143:                    }
/fragments\ForumFragment.kt:144:                })
/fragments\ForumFragment.kt:145:            }
/fragments\ForumFragment.kt:146:            addOnChildAttachStateChangeListener(object : OnChildAttachStateChangeListener {
/fragments\ForumFragment.kt:147:                override fun onChildViewAttachedToWindow(view: View) {}
/fragments\ForumFragment.kt:148:                override fun onChildViewDetachedFromWindow(view: View) {
/fragments\ForumFragment.kt:149:                    val videoPlayerStandard: VideoPlayerStandard? = view.findViewById(R.id.forum_item_content_video)
/fragments\ForumFragment.kt:150:                    if (videoPlayerStandard != null && Jzvd.CURRENT_JZVD != null &&
/fragments\ForumFragment.kt:151:                            videoPlayerStandard.jzDataSource.containsTheUrl(Jzvd.CURRENT_JZVD.jzDataSource.currentUrl)) {
/fragments\ForumFragment.kt:152:                        if (Jzvd.CURRENT_JZVD != null && Jzvd.CURRENT_JZVD.screen != Jzvd.SCREEN_FULLSCREEN) {
/fragments\ForumFragment.kt:153:                            Jzvd.releaseAllVideos()
/fragments\ForumFragment.kt:154:                        }
/fragments\ForumFragment.kt:155:                    }
/fragments\ForumFragment.kt:156:                }
/fragments\ForumFragment.kt:157:            })
/fragments\ForumFragment.kt:158:        }
/fragments\ForumFragment.kt:159:    }
/fragments\ForumFragment.kt:161:    private fun loadMore(isReload: Boolean) {
/fragments\ForumFragment.kt:162:        if (!isReload) {
/fragments\ForumFragment.kt:163:            page += 1
/fragments\ForumFragment.kt:164:        }
/fragments\ForumFragment.kt:165:        TiebaApi.getInstance().forumPage(forumName!!, page, sortType, classifyId).enqueue(object : Callback<ForumPageBean> {
/fragments\ForumFragment.kt:166:            override fun onFailure(call: Call<ForumPageBean>, t: Throwable) {
/fragments\ForumFragment.kt:167:                mAdapter.loadFailed()
/fragments\ForumFragment.kt:168:            }
/fragments\ForumFragment.kt:170:            override fun onResponse(call: Call<ForumPageBean>, response: Response<ForumPageBean>) {
/fragments\ForumFragment.kt:171:                val forumPageBean = response.body()!!
/fragments\ForumFragment.kt:172:                mDataBean = forumPageBean
/fragments\ForumFragment.kt:173:                pageSize = forumPageBean.page?.pageSize?.toInt()!!
/fragments\ForumFragment.kt:174:                mAdapter.addData(forumPageBean)
/fragments\ForumFragment.kt:175:                if (mDataBean!!.page?.hasMore == "0") {
/fragments\ForumFragment.kt:176:                    mAdapter.loadEnd()
/fragments\ForumFragment.kt:177:                }
/fragments\ForumFragment.kt:178:            }
/fragments\ForumFragment.kt:179:        })
/fragments\ForumFragment.kt:180:    }
/fragments\ForumFragment.kt:182:    fun refresh() {
/fragments\ForumFragment.kt:183:        mRecyclerView.scrollToPosition(0)
/fragments\ForumFragment.kt:184:        mAdapter.reset()
/fragments\ForumFragment.kt:185:        mRefreshLayout.isRefreshing = true
/fragments\ForumFragment.kt:186:        page = 1
/fragments\ForumFragment.kt:187:        TiebaApi.getInstance().forumPage(forumName!!, page, sortType, classifyId).enqueue(object : Callback<ForumPageBean> {
/fragments\ForumFragment.kt:188:            override fun onFailure(call: Call<ForumPageBean>, t: Throwable) {
/fragments\ForumFragment.kt:189:                var errorCode = -1
/fragments\ForumFragment.kt:190:                if (t is TiebaException) {
/fragments\ForumFragment.kt:191:                    errorCode = t.code
/fragments\ForumFragment.kt:192:                }
/fragments\ForumFragment.kt:193:                if (attachContext is OnRefreshedListener) {
/fragments\ForumFragment.kt:194:                    (attachContext as OnRefreshedListener).onFailure(errorCode, t.message)
/fragments\ForumFragment.kt:195:                }
/fragments\ForumFragment.kt:196:                mRefreshLayout.isRefreshing = false
/fragments\ForumFragment.kt:197:                mAdapter.loadFailed()
/fragments\ForumFragment.kt:198:                if (errorCode == -1) {
/fragments\ForumFragment.kt:199:                    Util.showNetworkErrorSnackbar(mRecyclerView) { refresh() }
/fragments\ForumFragment.kt:200:                    return
/fragments\ForumFragment.kt:201:                }
/fragments\ForumFragment.kt:202:                Toast.makeText(attachContext, attachContext.getString(R.string.toast_error, errorCode, t.message), Toast.LENGTH_SHORT).show()
/fragments\ForumFragment.kt:203:            }
/fragments\ForumFragment.kt:205:            override fun onResponse(call: Call<ForumPageBean>, response: Response<ForumPageBean>) {
/fragments\ForumFragment.kt:206:                val forumPageBean = response.body()!!
/fragments\ForumFragment.kt:207:                mAdapter.reset()
/fragments\ForumFragment.kt:208:                mAdapter.setData(forumPageBean)
/fragments\ForumFragment.kt:209:                if (attachContext is OnRefreshedListener) {
/fragments\ForumFragment.kt:210:                    (attachContext as OnRefreshedListener).onSuccess(forumPageBean)
/fragments\ForumFragment.kt:211:                }
/fragments\ForumFragment.kt:212:                mRefreshLayout.isRefreshing = false
/fragments\ForumFragment.kt:213:                mDataBean = forumPageBean
/fragments\ForumFragment.kt:214:                pageSize = forumPageBean.page?.pageSize?.toInt()!!
/fragments\ForumFragment.kt:215:                if (mDataBean!!.page?.hasMore == "0") {
/fragments\ForumFragment.kt:216:                    mAdapter.loadEnd()
/fragments\ForumFragment.kt:217:                }
/fragments\ForumFragment.kt:218:            }
/fragments\ForumFragment.kt:219:        })
/fragments\ForumFragment.kt:220:    }
/fragments\ForumFragment.kt:222:    override fun onRefresh() {
/fragments\ForumFragment.kt:223:        refresh()
/fragments\ForumFragment.kt:224:    }
/fragments\ForumFragment.kt:226:    override fun onSwitch(which: Int) {
/fragments\ForumFragment.kt:227:        if (isGood && mDataBean != null) {
/fragments\ForumFragment.kt:228:            classifyId = mDataBean!!.forum?.goodClassify?.get(which)?.classId!!
/fragments\ForumFragment.kt:229:            refresh()
/fragments\ForumFragment.kt:230:        }
/fragments\ForumFragment.kt:231:    }
/fragments\ForumFragment.kt:233:    override fun scrollToTop() {
/fragments\ForumFragment.kt:234:        mRecyclerView.layoutManager!!.scrollToPosition(0)
/fragments\ForumFragment.kt:235:    }
/fragments\ForumFragment.kt:237:    interface OnRefreshedListener {
/fragments\ForumFragment.kt:238:        fun onSuccess(forumPageBean: ForumPageBean)
/fragments\ForumFragment.kt:239:        fun onFailure(errorCode: Int, errorMsg: String?)
/fragments\ForumFragment.kt:240:    }
/fragments\ForumFragment.kt:242:    internal inner class DataHolder : DataListener<ForumPageBean?> {
/fragments\ForumFragment.kt:243:        override fun onDataArrived(forumPageBean: ForumPageBean?) {
/fragments\ForumFragment.kt:244:            if (forumPageBean == null) {
/fragments\ForumFragment.kt:245:                refresh()
/fragments\ForumFragment.kt:246:                return
/fragments\ForumFragment.kt:247:            }
/fragments\ForumFragment.kt:248:            if (attachContext is OnRefreshedListener) {
/fragments\ForumFragment.kt:249:                (attachContext as OnRefreshedListener).onSuccess(forumPageBean)
/fragments\ForumFragment.kt:250:            }
/fragments\ForumFragment.kt:251:            mRefreshLayout.isRefreshing = false
/fragments\ForumFragment.kt:252:            mDataBean = forumPageBean
/fragments\ForumFragment.kt:253:            pageSize = forumPageBean.page?.pageSize?.toInt()!!
/fragments\ForumFragment.kt:254:            mAdapter.setData(forumPageBean)
/fragments\ForumFragment.kt:255:            if ("1" != mDataBean!!.page?.hasMore) {
/fragments\ForumFragment.kt:256:                mAdapter.loadEnd()
/fragments\ForumFragment.kt:257:            }
/fragments\ForumFragment.kt:258:        }
/fragments\ForumFragment.kt:259:    }
/fragments\ForumFragment.kt:261:    companion object {
/fragments\ForumFragment.kt:262:        const val PARAM_FORUM_NAME = "forum_name"
/fragments\ForumFragment.kt:263:        const val PARAM_IS_GOOD = "is_good"
/fragments\ForumFragment.kt:264:        const val PARAM_SORT_TYPE = "sort_type"
/fragments\ForumFragment.kt:265:        const val PARAM_PRELOAD = "preload"
/fragments\ForumFragment.kt:266:        const val PARAM_PRELOAD_ID = "preload_id"
/fragments\ForumFragment.kt:267:        const val DEFAULT_CLASSIFY_ID = "0"
/fragments\ForumFragment.kt:268:        private const val DEFAULT_PAGE_SIZE = 30
/fragments\ForumFragment.kt:269:        fun newInstance(forumName: String?, isGood: Boolean, sortType: ForumSortType): ForumFragment {
/fragments\ForumFragment.kt:270:            val args = Bundle()
/fragments\ForumFragment.kt:271:            args.putString(PARAM_FORUM_NAME, forumName)
/fragments\ForumFragment.kt:272:            args.putBoolean(PARAM_IS_GOOD, isGood)
/fragments\ForumFragment.kt:273:            args.putInt(PARAM_SORT_TYPE, sortType.value)
/fragments\ForumFragment.kt:274:            args.putBoolean(PARAM_PRELOAD, false)
/fragments\ForumFragment.kt:275:            val fragment = ForumFragment()
/fragments\ForumFragment.kt:276:            fragment.arguments = args
/fragments\ForumFragment.kt:277:            return fragment
/fragments\ForumFragment.kt:278:        }
/fragments\ForumFragment.kt:280:        fun newInstance(forumName: String?, isGood: Boolean, sortType: ForumSortType, preloadId: Int): ForumFragment {
/fragments\ForumFragment.kt:281:            val args = Bundle()
/fragments\ForumFragment.kt:282:            args.putString(PARAM_FORUM_NAME, forumName)
/fragments\ForumFragment.kt:283:            args.putBoolean(PARAM_IS_GOOD, isGood)
/fragments\ForumFragment.kt:284:            args.putInt(PARAM_SORT_TYPE, sortType.value)
/fragments\ForumFragment.kt:285:            args.putBoolean(PARAM_PRELOAD, true)
/fragments\ForumFragment.kt:286:            args.putInt(PARAM_PRELOAD_ID, preloadId)
/fragments\ForumFragment.kt:287:            val fragment = ForumFragment()
/fragments\ForumFragment.kt:288:            fragment.arguments = args
/fragments\ForumFragment.kt:289:            return fragment
/fragments\ForumFragment.kt:290:        }
/fragments\ForumFragment.kt:291:    }
/fragments\ForumFragment.kt:292:}/fragments\ForumListFragment.kt:1:package com.huanchengfly.tieba.post.fragments
/fragments\ForumListFragment.kt:3:import android.annotation.SuppressLint
/fragments\ForumListFragment.kt:4:import android.content.Intent
/fragments\ForumListFragment.kt:5:import android.os.Bundle
/fragments\ForumListFragment.kt:6:import android.view.MenuItem
/fragments\ForumListFragment.kt:7:import android.view.View
/fragments\ForumListFragment.kt:8:import android.widget.Toast
/fragments\ForumListFragment.kt:9:import androidx.recyclerview.widget.GridLayoutManager
/fragments\ForumListFragment.kt:10:import androidx.recyclerview.widget.GridLayoutManager.SpanSizeLookup
/fragments\ForumListFragment.kt:11:import androidx.recyclerview.widget.RecyclerView
/fragments\ForumListFragment.kt:12:import androidx.swiperefreshlayout.widget.SwipeRefreshLayout
/fragments\ForumListFragment.kt:13:import butterknife.BindView
/fragments\ForumListFragment.kt:14:import com.huanchengfly.tieba.post.BaseApplication
/fragments\ForumListFragment.kt:15:import com.huanchengfly.tieba.post.R
/fragments\ForumListFragment.kt:16:import com.huanchengfly.tieba.post.activities.ForumActivity
/fragments\ForumListFragment.kt:17:import com.huanchengfly.tieba.post.adapters.LikeForumListAdapter
/fragments\ForumListFragment.kt:18:import com.huanchengfly.tieba.post.api.Error
/fragments\ForumListFragment.kt:19:import com.huanchengfly.tieba.post.api.ForumSortType
/fragments\ForumListFragment.kt:20:import com.huanchengfly.tieba.post.api.TiebaApi
/fragments\ForumListFragment.kt:21:import com.huanchengfly.tieba.post.api.models.CommonResponse
/fragments\ForumListFragment.kt:22:import com.huanchengfly.tieba.post.api.models.ForumRecommend
/fragments\ForumListFragment.kt:23:import com.huanchengfly.tieba.post.api.retrofit.exception.TiebaException
/fragments\ForumListFragment.kt:24:import com.huanchengfly.tieba.post.api.retrofit.exception.TiebaLocalException
/fragments\ForumListFragment.kt:25:import com.huanchengfly.tieba.post.interfaces.OnItemClickListener
/fragments\ForumListFragment.kt:26:import com.huanchengfly.tieba.post.interfaces.OnItemLongClickListener
/fragments\ForumListFragment.kt:27:import com.huanchengfly.tieba.post.interfaces.Refreshable
/fragments\ForumListFragment.kt:28:import com.huanchengfly.tieba.post.models.database.TopForum
/fragments\ForumListFragment.kt:29:import com.huanchengfly.tieba.post.utils.*
/fragments\ForumListFragment.kt:30:import com.huanchengfly.tieba.post.utils.preload.PreloadUtil
/fragments\ForumListFragment.kt:31:import com.huanchengfly.tieba.post.utils.preload.loaders.ForumLoader
/fragments\ForumListFragment.kt:32:import org.litepal.LitePal
/fragments\ForumListFragment.kt:33:import retrofit2.Call
/fragments\ForumListFragment.kt:34:import retrofit2.Callback
/fragments\ForumListFragment.kt:35:import retrofit2.Response
/fragments\ForumListFragment.kt:37:class ForumListFragment : BaseFragment(), Refreshable {
/fragments\ForumListFragment.kt:38:    private var mData: ForumRecommend? = null
/fragments\ForumListFragment.kt:39:    @BindView(R.id.forum_list_recycler)
/fragments\ForumListFragment.kt:40:    lateinit var mRecyclerView: RecyclerView
/fragments\ForumListFragment.kt:41:    @BindView(R.id.refresh)
/fragments\ForumListFragment.kt:42:    lateinit var mRefreshView: SwipeRefreshLayout
/fragments\ForumListFragment.kt:43:    private var navigationHelper: NavigationHelper? = null
/fragments\ForumListFragment.kt:44:    private var likeForumListAdapter: LikeForumListAdapter? = null
/fragments\ForumListFragment.kt:45:    private var gridLayoutManager: GridLayoutManager? = null
/fragments\ForumListFragment.kt:47:    fun reset() {
/fragments\ForumListFragment.kt:48:        if (isFragmentVisible) {
/fragments\ForumListFragment.kt:49:            refresh()
/fragments\ForumListFragment.kt:50:        } else {
/fragments\ForumListFragment.kt:51:            mData = null
/fragments\ForumListFragment.kt:52:        }
/fragments\ForumListFragment.kt:53:    }
/fragments\ForumListFragment.kt:55:    override fun onResume() {
/fragments\ForumListFragment.kt:56:        super.onResume()
/fragments\ForumListFragment.kt:57:        gridLayoutManager!!.spanCount = spanCount
/fragments\ForumListFragment.kt:58:        likeForumListAdapter!!.isSingle = appPreferences.listSingle
/fragments\ForumListFragment.kt:59:    }
/fragments\ForumListFragment.kt:61:    override fun onAccountSwitch() {
/fragments\ForumListFragment.kt:62:        reset()
/fragments\ForumListFragment.kt:63:    }
/fragments\ForumListFragment.kt:65:    public override fun onFragmentVisibleChange(isVisible: Boolean) {
/fragments\ForumListFragment.kt:66:        if (isVisible && mData == null) {
/fragments\ForumListFragment.kt:67:            refresh()
/fragments\ForumListFragment.kt:68:        }
/fragments\ForumListFragment.kt:69:    }
/fragments\ForumListFragment.kt:71:    public override fun onFragmentFirstVisible() {
/fragments\ForumListFragment.kt:72:        refresh()
/fragments\ForumListFragment.kt:73:    }
/fragments\ForumListFragment.kt:75:    override fun onCreate(savedInstanceState: Bundle?) {
/fragments\ForumListFragment.kt:76:        super.onCreate(savedInstanceState)
/fragments\ForumListFragment.kt:77:        navigationHelper = NavigationHelper.newInstance(attachContext)
/fragments\ForumListFragment.kt:78:    }
/fragments\ForumListFragment.kt:80:    private val spanCount: Int
/fragments\ForumListFragment.kt:81:        get() = if (appPreferences.listSingle) {
/fragments\ForumListFragment.kt:82:            1
/fragments\ForumListFragment.kt:83:        } else {
/fragments\ForumListFragment.kt:84:            2
/fragments\ForumListFragment.kt:85:        }
/fragments\ForumListFragment.kt:87:    private fun toggleTopForum(forumId: String) {
/fragments\ForumListFragment.kt:88:        val topForum = LitePal.where("forumId = ?", forumId).findFirst(TopForum::class.java)
/fragments\ForumListFragment.kt:89:        val already = topForum != null
/fragments\ForumListFragment.kt:90:        if (already) {
/fragments\ForumListFragment.kt:91:            topForum!!.delete()
/fragments\ForumListFragment.kt:92:        } else {
/fragments\ForumListFragment.kt:93:            TopForum(forumId).save()
/fragments\ForumListFragment.kt:94:        }
/fragments\ForumListFragment.kt:95:        likeForumListAdapter!!.setData(mData!!.likeForum)
/fragments\ForumListFragment.kt:96:    }
/fragments\ForumListFragment.kt:98:    private fun getSortType(forumName: String): ForumSortType {
/fragments\ForumListFragment.kt:99:        val defaultSortType = appPreferences.defaultSortType!!.toInt()
/fragments\ForumListFragment.kt:100:        return ForumSortType.valueOf(SharedPreferencesUtil.get(attachContext, SharedPreferencesUtil.SP_SETTINGS)
/fragments\ForumListFragment.kt:101:                .getInt(forumName + "_sort_type", defaultSortType))
/fragments\ForumListFragment.kt:102:    }
/fragments\ForumListFragment.kt:104:    override fun getLayoutId(): Int {
/fragments\ForumListFragment.kt:105:        return R.layout.fragment_main_forum_list
/fragments\ForumListFragment.kt:106:    }
/fragments\ForumListFragment.kt:108:    @SuppressLint("ApplySharedPref")
/fragments\ForumListFragment.kt:109:    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
/fragments\ForumListFragment.kt:110:        super.onViewCreated(view, savedInstanceState)
/fragments\ForumListFragment.kt:111:        likeForumListAdapter = LikeForumListAdapter(attachContext).apply {
/fragments\ForumListFragment.kt:112:            onItemClickListener = OnItemClickListener { _, likeForum: ForumRecommend.LikeForum, _, _ ->
/fragments\ForumListFragment.kt:113:                PreloadUtil.startActivityWithPreload(
/fragments\ForumListFragment.kt:114:                        attachContext,
/fragments\ForumListFragment.kt:115:                        Intent(attachContext, ForumActivity::class.java).putExtra(ForumActivity.EXTRA_FORUM_NAME, likeForum.forumName),
/fragments\ForumListFragment.kt:116:                        ForumLoader(likeForum.forumName, 1, getSortType(likeForum.forumName))
/fragments\ForumListFragment.kt:117:                )
/fragments\ForumListFragment.kt:118:            }
/fragments\ForumListFragment.kt:119:            onItemLongClickListener = OnItemLongClickListener { itemView: View?, likeForum: ForumRecommend.LikeForum, position: Int, _ ->
/fragments\ForumListFragment.kt:120:                val popupMenu = PopupUtil.create(itemView).apply {
/fragments\ForumListFragment.kt:121:                    menuInflater.inflate(R.menu.menu_forum_long_click, menu)
/fragments\ForumListFragment.kt:122:                }
/fragments\ForumListFragment.kt:123:                val topItem = popupMenu.menu.findItem(R.id.menu_top)
/fragments\ForumListFragment.kt:124:                val topForum = LitePal.where("forumId = ?", likeForum.forumId).findFirst(TopForum::class.java)
/fragments\ForumListFragment.kt:125:                val already = topForum != null
/fragments\ForumListFragment.kt:126:                topItem.setTitle(if (already) R.string.menu_top_del else R.string.menu_top)
/fragments\ForumListFragment.kt:127:                popupMenu.setOnMenuItemClickListener { item: MenuItem ->
/fragments\ForumListFragment.kt:128:                    when (item.itemId) {
/fragments\ForumListFragment.kt:129:                        R.id.menu_top -> {
/fragments\ForumListFragment.kt:130:                            if (!appPreferences.showTopForumInNormalList) {
/fragments\ForumListFragment.kt:131:                                DialogUtil.build(attachContext)
/fragments\ForumListFragment.kt:132:                                        .setTitle(R.string.title_dialog_show_top_forum)
/fragments\ForumListFragment.kt:133:                                        .setMessage(R.string.message_dialog_show_top_forum)
/fragments\ForumListFragment.kt:134:                                        .setNegativeButton(R.string.button_no) { _, _ -> toggleTopForum(likeForum.forumId) }
/fragments\ForumListFragment.kt:135:                                        .setPositiveButton(R.string.button_yes) { _, _ ->
/fragments\ForumListFragment.kt:136:                                            SharedPreferencesUtil.get(attachContext, SharedPreferencesUtil.SP_SETTINGS).edit().putBoolean("show_top_forum_in_normal_list", true).commit()
/fragments\ForumListFragment.kt:137:                                            toggleTopForum(likeForum.forumId)
/fragments\ForumListFragment.kt:138:                                        }
/fragments\ForumListFragment.kt:139:                                        .setNeutralButton(R.string.button_cancel, null)
/fragments\ForumListFragment.kt:140:                                        .create()
/fragments\ForumListFragment.kt:141:                                        .show()
/fragments\ForumListFragment.kt:142:                            } else {
/fragments\ForumListFragment.kt:143:                                toggleTopForum(likeForum.forumId)
/fragments\ForumListFragment.kt:144:                            }
/fragments\ForumListFragment.kt:145:                        }
/fragments\ForumListFragment.kt:146:                        R.id.menu_copy -> TiebaUtil.copyText(attachContext, likeForum.forumName)
/fragments\ForumListFragment.kt:147:                        R.id.menu_unfollow -> {
/fragments\ForumListFragment.kt:148:                            DialogUtil.build(attachContext)
/fragments\ForumListFragment.kt:149:                                    .setMessage(R.string.title_dialog_unfollow)
/fragments\ForumListFragment.kt:150:                                    .setNegativeButton(R.string.button_cancel, null)
/fragments\ForumListFragment.kt:151:                                    .setPositiveButton(R.string.button_sure_default) { _, _ ->
/fragments\ForumListFragment.kt:152:                                        TiebaApi.getInstance().unlikeForum(likeForum.forumId, likeForum.forumName, AccountUtil.getLoginInfo(attachContext)!!.itbTbs).enqueue(object : Callback<CommonResponse> {
/fragments\ForumListFragment.kt:153:                                            override fun onResponse(call: Call<CommonResponse>, response: Response<CommonResponse>) {
/fragments\ForumListFragment.kt:154:                                                Toast.makeText(attachContext, R.string.toast_unlike_success, Toast.LENGTH_SHORT).show()
/fragments\ForumListFragment.kt:155:                                                likeForumListAdapter!!.remove(position - 1 - likeForumListAdapter!!.topForumItemCount)
/fragments\ForumListFragment.kt:156:                                                refresh()
/fragments\ForumListFragment.kt:157:                                            }
/fragments\ForumListFragment.kt:159:                                            override fun onFailure(call: Call<CommonResponse>, t: Throwable) {
/fragments\ForumListFragment.kt:160:                                                Toast.makeText(attachContext, getString(R.string.toast_unlike_failed, t.message), Toast.LENGTH_SHORT).show()
/fragments\ForumListFragment.kt:161:                                            }
/fragments\ForumListFragment.kt:162:                                        })
/fragments\ForumListFragment.kt:163:                                    }
/fragments\ForumListFragment.kt:164:                                    .create()
/fragments\ForumListFragment.kt:165:                                    .show()
/fragments\ForumListFragment.kt:166:                            return@setOnMenuItemClickListener true
/fragments\ForumListFragment.kt:167:                        }
/fragments\ForumListFragment.kt:168:                    }
/fragments\ForumListFragment.kt:169:                    false
/fragments\ForumListFragment.kt:170:                }
/fragments\ForumListFragment.kt:171:                popupMenu.show()
/fragments\ForumListFragment.kt:172:                true
/fragments\ForumListFragment.kt:173:            }
/fragments\ForumListFragment.kt:174:        }
/fragments\ForumListFragment.kt:175:        gridLayoutManager = GridLayoutManager(attachContext, spanCount, RecyclerView.VERTICAL, false).apply {
/fragments\ForumListFragment.kt:176:            spanSizeLookup = object : SpanSizeLookup() {
/fragments\ForumListFragment.kt:177:                override fun getSpanSize(position: Int): Int {
/fragments\ForumListFragment.kt:178:                    return if (likeForumListAdapter!!.isHeader(position)) spanCount else 1
/fragments\ForumListFragment.kt:179:                }
/fragments\ForumListFragment.kt:180:            }
/fragments\ForumListFragment.kt:181:        }
/fragments\ForumListFragment.kt:182:        mRecyclerView.apply {
/fragments\ForumListFragment.kt:183:            setHasFixedSize(true)
/fragments\ForumListFragment.kt:184:            layoutManager = gridLayoutManager
/fragments\ForumListFragment.kt:185:            adapter = likeForumListAdapter
/fragments\ForumListFragment.kt:186:        }
/fragments\ForumListFragment.kt:187:        mRefreshView.apply {
/fragments\ForumListFragment.kt:188:            ThemeUtil.setThemeForSwipeRefreshLayout(this)
/fragments\ForumListFragment.kt:189:            setOnRefreshListener { refresh() }
/fragments\ForumListFragment.kt:190:        }
/fragments\ForumListFragment.kt:191:    }
/fragments\ForumListFragment.kt:193:    fun refresh() {
/fragments\ForumListFragment.kt:194:        mRefreshView.isRefreshing = true
/fragments\ForumListFragment.kt:195:        TiebaApi.getInstance()
/fragments\ForumListFragment.kt:196:                .forumRecommend()
/fragments\ForumListFragment.kt:197:                .enqueue(object : Callback<ForumRecommend> {
/fragments\ForumListFragment.kt:198:                    override fun onFailure(call: Call<ForumRecommend>, t: Throwable) {
/fragments\ForumListFragment.kt:199:                        mRefreshView.isRefreshing = false
/fragments\ForumListFragment.kt:200:                        t.printStackTrace()
/fragments\ForumListFragment.kt:201:                        if (t is TiebaException) {
/fragments\ForumListFragment.kt:202:                            if (t !is TiebaLocalException || t.code != Error.ERROR_NOT_LOGGED_IN) {
/fragments\ForumListFragment.kt:203:                                Toast.makeText(attachContext, t.message, Toast.LENGTH_SHORT).show()
/fragments\ForumListFragment.kt:204:                            } else if (!BaseApplication.isFirstRun) {
/fragments\ForumListFragment.kt:205:                                Toast.makeText(attachContext, R.string.toast_please_login, Toast.LENGTH_SHORT).show()
/fragments\ForumListFragment.kt:206:                            }
/fragments\ForumListFragment.kt:207:                        } else Util.showNetworkErrorSnackbar(mRefreshView) { refresh() }
/fragments\ForumListFragment.kt:208:                    }
/fragments\ForumListFragment.kt:210:                    override fun onResponse(call: Call<ForumRecommend>, response: Response<ForumRecommend>) {
/fragments\ForumListFragment.kt:211:                        mData = response.body()
/fragments\ForumListFragment.kt:212:                        if (mData != null) {
/fragments\ForumListFragment.kt:213:                            likeForumListAdapter!!.setData(mData!!.likeForum)
/fragments\ForumListFragment.kt:214:                            mRefreshView.isRefreshing = false
/fragments\ForumListFragment.kt:215:                        } else {
/fragments\ForumListFragment.kt:216:                            Toast.makeText(attachContext, R.string.error_unknown, Toast.LENGTH_SHORT).show()
/fragments\ForumListFragment.kt:217:                        }
/fragments\ForumListFragment.kt:218:                    }
/fragments\ForumListFragment.kt:220:                })
/fragments\ForumListFragment.kt:221:    }
/fragments\ForumListFragment.kt:223:    override fun onRefresh() {
/fragments\ForumListFragment.kt:224:        if (isFragmentVisible) {
/fragments\ForumListFragment.kt:225:            refresh()
/fragments\ForumListFragment.kt:226:        } else {
/fragments\ForumListFragment.kt:227:            mData = null
/fragments\ForumListFragment.kt:228:        }
/fragments\ForumListFragment.kt:229:    }
/fragments\ForumListFragment.kt:230:}/fragments\PersonalizedFeedFragment.kt:1:package com.huanchengfly.tieba.post.fragments
/fragments\PersonalizedFeedFragment.kt:3:import android.animation.Animator
/fragments\PersonalizedFeedFragment.kt:4:import android.animation.AnimatorListenerAdapter
/fragments\PersonalizedFeedFragment.kt:5:import android.os.Bundle
/fragments\PersonalizedFeedFragment.kt:6:import android.view.View
/fragments\PersonalizedFeedFragment.kt:7:import android.widget.TextView
/fragments\PersonalizedFeedFragment.kt:8:import android.widget.Toast
/fragments\PersonalizedFeedFragment.kt:9:import androidx.recyclerview.widget.RecyclerView
/fragments\PersonalizedFeedFragment.kt:10:import androidx.recyclerview.widget.RecyclerView.OnChildAttachStateChangeListener
/fragments\PersonalizedFeedFragment.kt:11:import androidx.swiperefreshlayout.widget.SwipeRefreshLayout
/fragments\PersonalizedFeedFragment.kt:12:import butterknife.BindView
/fragments\PersonalizedFeedFragment.kt:13:import cn.jzvd.Jzvd
/fragments\PersonalizedFeedFragment.kt:14:import com.bumptech.glide.Glide
/fragments\PersonalizedFeedFragment.kt:15:import com.huanchengfly.tieba.post.api.TiebaApi
/fragments\PersonalizedFeedFragment.kt:16:import com.huanchengfly.tieba.post.api.models.PersonalizedBean
/fragments\PersonalizedFeedFragment.kt:17:import com.huanchengfly.tieba.post.api.retrofit.exception.TiebaException
/fragments\PersonalizedFeedFragment.kt:18:import com.huanchengfly.tieba.post.R
/fragments\PersonalizedFeedFragment.kt:19:import com.huanchengfly.tieba.post.adapters.PersonalizedFeedAdapter
/fragments\PersonalizedFeedFragment.kt:20:import com.huanchengfly.tieba.post.components.MyLinearLayoutManager
/fragments\PersonalizedFeedFragment.kt:21:import com.huanchengfly.tieba.post.components.dividers.FeedDivider
/fragments\PersonalizedFeedFragment.kt:22:import com.huanchengfly.tieba.post.interfaces.Refreshable
/fragments\PersonalizedFeedFragment.kt:23:import com.huanchengfly.tieba.post.utils.AnimUtil
/fragments\PersonalizedFeedFragment.kt:24:import com.huanchengfly.tieba.post.utils.BlockUtil
/fragments\PersonalizedFeedFragment.kt:25:import com.huanchengfly.tieba.post.utils.ThemeUtil
/fragments\PersonalizedFeedFragment.kt:26:import com.huanchengfly.tieba.post.utils.Util
/fragments\PersonalizedFeedFragment.kt:27:import com.huanchengfly.tieba.post.widgets.ShadowLayout
/fragments\PersonalizedFeedFragment.kt:28:import com.huanchengfly.tieba.post.widgets.VideoPlayerStandard
/fragments\PersonalizedFeedFragment.kt:29:import retrofit2.Call
/fragments\PersonalizedFeedFragment.kt:30:import retrofit2.Callback
/fragments\PersonalizedFeedFragment.kt:31:import retrofit2.Response
/fragments\PersonalizedFeedFragment.kt:32:import java.util.*
/fragments\PersonalizedFeedFragment.kt:34:class PersonalizedFeedFragment : BaseFragment(), PersonalizedFeedAdapter.OnRefreshListener, Refreshable {
/fragments\PersonalizedFeedFragment.kt:35:    private var adapter: PersonalizedFeedAdapter? = null
/fragments\PersonalizedFeedFragment.kt:36:    private var personalizedBean: PersonalizedBean? = null
/fragments\PersonalizedFeedFragment.kt:37:    private var page = 1
/fragments\PersonalizedFeedFragment.kt:39:    @BindView(R.id.refresh)
/fragments\PersonalizedFeedFragment.kt:40:    lateinit var swipeRefreshLayout: SwipeRefreshLayout
/fragments\PersonalizedFeedFragment.kt:42:    @BindView(R.id.recycler_view)
/fragments\PersonalizedFeedFragment.kt:43:    lateinit var recyclerView: RecyclerView
/fragments\PersonalizedFeedFragment.kt:45:    @BindView(R.id.refresh_tip)
/fragments\PersonalizedFeedFragment.kt:46:    lateinit var refreshTip: ShadowLayout
/fragments\PersonalizedFeedFragment.kt:48:    @BindView(R.id.refresh_tip_text)
/fragments\PersonalizedFeedFragment.kt:49:    lateinit var refreshTipText: TextView
/fragments\PersonalizedFeedFragment.kt:51:    public override fun getLayoutId(): Int {
/fragments\PersonalizedFeedFragment.kt:52:        return R.layout.fragment_personalized_feed
/fragments\PersonalizedFeedFragment.kt:53:    }
/fragments\PersonalizedFeedFragment.kt:55:    override fun onViewCreated(contentView: View, savedInstanceState: Bundle?) {
/fragments\PersonalizedFeedFragment.kt:56:        super.onViewCreated(contentView, savedInstanceState)
/fragments\PersonalizedFeedFragment.kt:57:        swipeRefreshLayout.apply {
/fragments\PersonalizedFeedFragment.kt:58:            ThemeUtil.setThemeForSwipeRefreshLayout(this)
/fragments\PersonalizedFeedFragment.kt:59:            setOnRefreshListener { onRefresh() }
/fragments\PersonalizedFeedFragment.kt:60:        }
/fragments\PersonalizedFeedFragment.kt:61:        adapter = PersonalizedFeedAdapter(attachContext).apply {
/fragments\PersonalizedFeedFragment.kt:62:            setOnLoadMoreListener { isReload: Boolean -> loadMore(isReload) }
/fragments\PersonalizedFeedFragment.kt:63:            onRefreshListener = this@PersonalizedFeedFragment
/fragments\PersonalizedFeedFragment.kt:64:        }
/fragments\PersonalizedFeedFragment.kt:65:        recyclerView.apply {
/fragments\PersonalizedFeedFragment.kt:66:            addItemDecoration(FeedDivider(attachContext))
/fragments\PersonalizedFeedFragment.kt:67:            if (!appPreferences.loadPictureWhenScroll) {
/fragments\PersonalizedFeedFragment.kt:68:                addOnScrollListener(object : RecyclerView.OnScrollListener() {
/fragments\PersonalizedFeedFragment.kt:69:                    override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) {
/fragments\PersonalizedFeedFragment.kt:70:                        super.onScrollStateChanged(recyclerView, newState)
/fragments\PersonalizedFeedFragment.kt:71:                        if (!Util.canLoadGlide(attachContext)) {
/fragments\PersonalizedFeedFragment.kt:72:                            return
/fragments\PersonalizedFeedFragment.kt:73:                        }
/fragments\PersonalizedFeedFragment.kt:74:                        if (newState == RecyclerView.SCROLL_STATE_IDLE) {
/fragments\PersonalizedFeedFragment.kt:75:                            Glide.with(attachContext)
/fragments\PersonalizedFeedFragment.kt:76:                                    .resumeRequests()
/fragments\PersonalizedFeedFragment.kt:77:                        } else {
/fragments\PersonalizedFeedFragment.kt:78:                            Glide.with(attachContext)
/fragments\PersonalizedFeedFragment.kt:79:                                    .pauseRequests()
/fragments\PersonalizedFeedFragment.kt:80:                        }
/fragments\PersonalizedFeedFragment.kt:81:                    }
/fragments\PersonalizedFeedFragment.kt:82:                })
/fragments\PersonalizedFeedFragment.kt:83:            }
/fragments\PersonalizedFeedFragment.kt:84:            addOnChildAttachStateChangeListener(object : OnChildAttachStateChangeListener {
/fragments\PersonalizedFeedFragment.kt:85:                override fun onChildViewAttachedToWindow(view: View) {}
/fragments\PersonalizedFeedFragment.kt:86:                override fun onChildViewDetachedFromWindow(view: View) {
/fragments\PersonalizedFeedFragment.kt:87:                    val videoPlayerStandard: VideoPlayerStandard? = view.findViewById(R.id.forum_item_content_video)
/fragments\PersonalizedFeedFragment.kt:88:                    if (videoPlayerStandard != null && Jzvd.CURRENT_JZVD != null &&
/fragments\PersonalizedFeedFragment.kt:89:                            videoPlayerStandard.jzDataSource.containsTheUrl(Jzvd.CURRENT_JZVD.jzDataSource.currentUrl)) {
/fragments\PersonalizedFeedFragment.kt:90:                        if (Jzvd.CURRENT_JZVD != null && Jzvd.CURRENT_JZVD.screen != Jzvd.SCREEN_FULLSCREEN) {
/fragments\PersonalizedFeedFragment.kt:91:                            Jzvd.releaseAllVideos()
/fragments\PersonalizedFeedFragment.kt:92:                        }
/fragments\PersonalizedFeedFragment.kt:93:                    }
/fragments\PersonalizedFeedFragment.kt:94:                }
/fragments\PersonalizedFeedFragment.kt:95:            })
/fragments\PersonalizedFeedFragment.kt:96:            layoutManager = MyLinearLayoutManager(attachContext)
/fragments\PersonalizedFeedFragment.kt:97:            adapter = this@PersonalizedFeedFragment.adapter
/fragments\PersonalizedFeedFragment.kt:98:        }
/fragments\PersonalizedFeedFragment.kt:99:    }
/fragments\PersonalizedFeedFragment.kt:101:    fun refresh() {
/fragments\PersonalizedFeedFragment.kt:102:        page = 1
/fragments\PersonalizedFeedFragment.kt:103:        swipeRefreshLayout.isRefreshing = true
/fragments\PersonalizedFeedFragment.kt:104:        TiebaApi.getInstance().personalized(1, page).enqueue(object : Callback<PersonalizedBean> {
/fragments\PersonalizedFeedFragment.kt:105:            override fun onFailure(call: Call<PersonalizedBean>, t: Throwable) {
/fragments\PersonalizedFeedFragment.kt:106:                swipeRefreshLayout.isRefreshing = false
/fragments\PersonalizedFeedFragment.kt:107:                if (t is TiebaException) {
/fragments\PersonalizedFeedFragment.kt:108:                    Toast.makeText(attachContext, "${t.message}", Toast.LENGTH_SHORT).show()
/fragments\PersonalizedFeedFragment.kt:109:                } else {
/fragments\PersonalizedFeedFragment.kt:110:                    Util.showNetworkErrorSnackbar(recyclerView) { refresh() }
/fragments\PersonalizedFeedFragment.kt:111:                    return
/fragments\PersonalizedFeedFragment.kt:112:                }
/fragments\PersonalizedFeedFragment.kt:113:            }
/fragments\PersonalizedFeedFragment.kt:115:            override fun onResponse(call: Call<PersonalizedBean>, response: Response<PersonalizedBean>) {
/fragments\PersonalizedFeedFragment.kt:116:                val personalizedBean = response.body()!!
/fragments\PersonalizedFeedFragment.kt:117:                this@PersonalizedFeedFragment.personalizedBean = personalizedBean
/fragments\PersonalizedFeedFragment.kt:118:                personalizedBean.threadList?.forEachIndexed { index, threadBean ->
/fragments\PersonalizedFeedFragment.kt:119:                    threadBean.threadPersonalizedBean = personalizedBean.threadPersonalized?.get(index)
/fragments\PersonalizedFeedFragment.kt:120:                }
/fragments\PersonalizedFeedFragment.kt:121:                val newThreadBeans: List<PersonalizedBean.ThreadBean> = personalizedBean.threadList?.filterNot {
/fragments\PersonalizedFeedFragment.kt:122:                    (it.abstractBeans?.size!! > 0 && BlockUtil.needBlock(it.abstractBeans[0].text)) || BlockUtil.needBlock(it.author?.nameShow, it.author?.id)
/fragments\PersonalizedFeedFragment.kt:123:                }!!
/fragments\PersonalizedFeedFragment.kt:124:                val threadBeans: MutableList<PersonalizedBean.ThreadBean> = ArrayList(adapter!!.allData)
/fragments\PersonalizedFeedFragment.kt:125:                adapter!!.apply {
/fragments\PersonalizedFeedFragment.kt:126:                    setData(personalizedBean)
/fragments\PersonalizedFeedFragment.kt:127:                    if (dataCount > 0) {
/fragments\PersonalizedFeedFragment.kt:128:                        refreshPosition = newThreadBeans.size - 1
/fragments\PersonalizedFeedFragment.kt:129:                    }
/fragments\PersonalizedFeedFragment.kt:130:                    setNewData(if (threadBeans.addAll(0, newThreadBeans)) threadBeans else newThreadBeans)
/fragments\PersonalizedFeedFragment.kt:131:                }
/fragments\PersonalizedFeedFragment.kt:132:                swipeRefreshLayout.isRefreshing = false
/fragments\PersonalizedFeedFragment.kt:133:                refreshTipText.text = attachContext.getString(R.string.toast_feed_refresh, newThreadBeans.size)
/fragments\PersonalizedFeedFragment.kt:134:                AnimUtil.alphaIn(refreshTip)
/fragments\PersonalizedFeedFragment.kt:135:                        .setListener(object : AnimatorListenerAdapter() {
/fragments\PersonalizedFeedFragment.kt:136:                            override fun onAnimationEnd(animation: Animator) {
/fragments\PersonalizedFeedFragment.kt:137:                                refreshTip.postDelayed({
/fragments\PersonalizedFeedFragment.kt:138:                                    AnimUtil.alphaOut(refreshTip)
/fragments\PersonalizedFeedFragment.kt:139:                                            .setListener(object : AnimatorListenerAdapter() {
/fragments\PersonalizedFeedFragment.kt:140:                                                override fun onAnimationEnd(animation1: Animator) {
/fragments\PersonalizedFeedFragment.kt:141:                                                    refreshTip.visibility = View.GONE
/fragments\PersonalizedFeedFragment.kt:142:                                                }
/fragments\PersonalizedFeedFragment.kt:143:                                            })
/fragments\PersonalizedFeedFragment.kt:144:                                            .start()
/fragments\PersonalizedFeedFragment.kt:145:                                }, 1500)
/fragments\PersonalizedFeedFragment.kt:146:                            }
/fragments\PersonalizedFeedFragment.kt:147:                        }).start()
/fragments\PersonalizedFeedFragment.kt:148:            }
/fragments\PersonalizedFeedFragment.kt:149:        })
/fragments\PersonalizedFeedFragment.kt:150:    }
/fragments\PersonalizedFeedFragment.kt:152:    fun loadMore(isReload: Boolean) {
/fragments\PersonalizedFeedFragment.kt:153:        if (!isReload) {
/fragments\PersonalizedFeedFragment.kt:154:            page += 1
/fragments\PersonalizedFeedFragment.kt:155:        }
/fragments\PersonalizedFeedFragment.kt:156:        TiebaApi.getInstance().personalized(2, page).enqueue(object : Callback<PersonalizedBean> {
/fragments\PersonalizedFeedFragment.kt:157:            override fun onFailure(call: Call<PersonalizedBean>, t: Throwable) {
/fragments\PersonalizedFeedFragment.kt:158:                swipeRefreshLayout.isRefreshing = false
/fragments\PersonalizedFeedFragment.kt:159:                adapter!!.loadFailed()
/fragments\PersonalizedFeedFragment.kt:160:            }
/fragments\PersonalizedFeedFragment.kt:162:            override fun onResponse(call: Call<PersonalizedBean>, response: Response<PersonalizedBean>) {
/fragments\PersonalizedFeedFragment.kt:163:                val personalizedBean = response.body()!!
/fragments\PersonalizedFeedFragment.kt:164:                this@PersonalizedFeedFragment.personalizedBean = personalizedBean
/fragments\PersonalizedFeedFragment.kt:165:                personalizedBean.threadList?.forEachIndexed { index, threadBean ->
/fragments\PersonalizedFeedFragment.kt:166:                    threadBean.threadPersonalizedBean = personalizedBean.threadPersonalized?.get(index)
/fragments\PersonalizedFeedFragment.kt:167:                }
/fragments\PersonalizedFeedFragment.kt:168:                val newThreadBeans: List<PersonalizedBean.ThreadBean> = personalizedBean.threadList?.filterNot {
/fragments\PersonalizedFeedFragment.kt:169:                    (it.abstractBeans?.size!! > 0 && BlockUtil.needBlock(it.abstractBeans[0].text)) || BlockUtil.needBlock(it.author?.nameShow, it.author?.id)
/fragments\PersonalizedFeedFragment.kt:170:                }!!
/fragments\PersonalizedFeedFragment.kt:171:                adapter!!.apply {
/fragments\PersonalizedFeedFragment.kt:172:                    setData(personalizedBean)
/fragments\PersonalizedFeedFragment.kt:173:                    setLoadMoreData(newThreadBeans)
/fragments\PersonalizedFeedFragment.kt:174:                }
/fragments\PersonalizedFeedFragment.kt:175:                swipeRefreshLayout.isRefreshing = false
/fragments\PersonalizedFeedFragment.kt:176:            }
/fragments\PersonalizedFeedFragment.kt:177:        })
/fragments\PersonalizedFeedFragment.kt:178:    }
/fragments\PersonalizedFeedFragment.kt:180:    override fun onFragmentVisibleChange(isVisible: Boolean) {
/fragments\PersonalizedFeedFragment.kt:181:        if (isVisible && personalizedBean == null) {
/fragments\PersonalizedFeedFragment.kt:182:            refresh()
/fragments\PersonalizedFeedFragment.kt:183:        }
/fragments\PersonalizedFeedFragment.kt:184:    }
/fragments\PersonalizedFeedFragment.kt:186:    override fun onFragmentFirstVisible() {
/fragments\PersonalizedFeedFragment.kt:187:        if (personalizedBean == null) {
/fragments\PersonalizedFeedFragment.kt:188:            refresh()
/fragments\PersonalizedFeedFragment.kt:189:        }
/fragments\PersonalizedFeedFragment.kt:190:    }
/fragments\PersonalizedFeedFragment.kt:192:    override fun onRefresh() {
/fragments\PersonalizedFeedFragment.kt:193:        if (isFragmentVisible) {
/fragments\PersonalizedFeedFragment.kt:194:            recyclerView.smoothScrollToPosition(0)
/fragments\PersonalizedFeedFragment.kt:195:            refresh()
/fragments\PersonalizedFeedFragment.kt:196:        } else {
/fragments\PersonalizedFeedFragment.kt:197:            personalizedBean = null
/fragments\PersonalizedFeedFragment.kt:198:        }
/fragments\PersonalizedFeedFragment.kt:199:    }
/fragments\PersonalizedFeedFragment.kt:201:    override fun onBackPressed(): Boolean {
/fragments\PersonalizedFeedFragment.kt:202:        return Jzvd.backPress()
/fragments\PersonalizedFeedFragment.kt:203:    }
/fragments\PersonalizedFeedFragment.kt:204:}/fragments\SearchThreadFragment.kt:1:package com.huanchengfly.tieba.post.fragments
/fragments\SearchThreadFragment.kt:3:import android.os.Bundle
/fragments\SearchThreadFragment.kt:4:import android.view.View
/fragments\SearchThreadFragment.kt:5:import android.widget.Toast
/fragments\SearchThreadFragment.kt:6:import androidx.recyclerview.widget.LinearLayoutManager
/fragments\SearchThreadFragment.kt:7:import androidx.recyclerview.widget.RecyclerView
/fragments\SearchThreadFragment.kt:8:import androidx.swiperefreshlayout.widget.SwipeRefreshLayout
/fragments\SearchThreadFragment.kt:9:import butterknife.BindView
/fragments\SearchThreadFragment.kt:10:import com.huanchengfly.tieba.post.api.SearchThreadFilter
/fragments\SearchThreadFragment.kt:11:import com.huanchengfly.tieba.post.api.SearchThreadOrder
/fragments\SearchThreadFragment.kt:12:import com.huanchengfly.tieba.post.api.TiebaApi
/fragments\SearchThreadFragment.kt:13:import com.huanchengfly.tieba.post.api.models.SearchThreadBean
/fragments\SearchThreadFragment.kt:14:import com.huanchengfly.tieba.post.R
/fragments\SearchThreadFragment.kt:15:import com.huanchengfly.tieba.post.adapters.SearchThreadAdapter
/fragments\SearchThreadFragment.kt:16:import com.huanchengfly.tieba.post.components.MyLinearLayoutManager
/fragments\SearchThreadFragment.kt:17:import com.huanchengfly.tieba.post.components.dividers.CommonDivider
/fragments\SearchThreadFragment.kt:18:import com.huanchengfly.tieba.post.interfaces.OnOrderSwitchListener
/fragments\SearchThreadFragment.kt:19:import com.huanchengfly.tieba.post.utils.ThemeUtil
/fragments\SearchThreadFragment.kt:20:import retrofit2.Call
/fragments\SearchThreadFragment.kt:21:import retrofit2.Callback
/fragments\SearchThreadFragment.kt:22:import retrofit2.Response
/fragments\SearchThreadFragment.kt:24:class SearchThreadFragment : BaseFragment(), OnOrderSwitchListener {
/fragments\SearchThreadFragment.kt:25:    private var keyword: String? = null
/fragments\SearchThreadFragment.kt:26:    @BindView(R.id.fragment_search_refresh_layout)
/fragments\SearchThreadFragment.kt:27:    lateinit var refreshLayout: SwipeRefreshLayout
/fragments\SearchThreadFragment.kt:28:    @BindView(R.id.fragment_search_recycler_view)
/fragments\SearchThreadFragment.kt:29:    lateinit var recyclerView: RecyclerView
/fragments\SearchThreadFragment.kt:30:    private var mAdapter: SearchThreadAdapter? = null
/fragments\SearchThreadFragment.kt:31:    private var order: SearchThreadOrder = SearchThreadOrder.NEW
/fragments\SearchThreadFragment.kt:32:    private var filter: SearchThreadFilter = SearchThreadFilter.ONLY_THREAD
/fragments\SearchThreadFragment.kt:33:    private var mData: SearchThreadBean.DataBean? = null
/fragments\SearchThreadFragment.kt:34:    private var page = 0
/fragments\SearchThreadFragment.kt:35:    fun setKeyword(keyword: String?, refresh: Boolean) {
/fragments\SearchThreadFragment.kt:36:        this.keyword = keyword
/fragments\SearchThreadFragment.kt:37:        if (refresh) {
/fragments\SearchThreadFragment.kt:38:            refresh()
/fragments\SearchThreadFragment.kt:39:        } else {
/fragments\SearchThreadFragment.kt:40:            mData = null
/fragments\SearchThreadFragment.kt:41:            mAdapter!!.reset()
/fragments\SearchThreadFragment.kt:42:        }
/fragments\SearchThreadFragment.kt:43:    }
/fragments\SearchThreadFragment.kt:45:    override fun onFragmentVisibleChange(isVisible: Boolean) {
/fragments\SearchThreadFragment.kt:46:        if (mData == null && isVisible) {
/fragments\SearchThreadFragment.kt:47:            refresh()
/fragments\SearchThreadFragment.kt:48:        }
/fragments\SearchThreadFragment.kt:49:    }
/fragments\SearchThreadFragment.kt:51:    override fun onCreate(savedInstanceState: Bundle?) {
/fragments\SearchThreadFragment.kt:52:        super.onCreate(savedInstanceState)
/fragments\SearchThreadFragment.kt:53:        order = SearchThreadOrder.NEW
/fragments\SearchThreadFragment.kt:54:        filter = SearchThreadFilter.ONLY_THREAD
/fragments\SearchThreadFragment.kt:55:        if (arguments != null) {
/fragments\SearchThreadFragment.kt:56:            keyword = arguments!!.getString(ARG_KEYWORD)
/fragments\SearchThreadFragment.kt:57:        }
/fragments\SearchThreadFragment.kt:58:    }
/fragments\SearchThreadFragment.kt:60:    public override fun getLayoutId(): Int {
/fragments\SearchThreadFragment.kt:61:        return R.layout.fragment_search
/fragments\SearchThreadFragment.kt:62:    }
/fragments\SearchThreadFragment.kt:64:    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
/fragments\SearchThreadFragment.kt:65:        super.onViewCreated(view, savedInstanceState)
/fragments\SearchThreadFragment.kt:66:        mAdapter = SearchThreadAdapter(this).apply {
/fragments\SearchThreadFragment.kt:67:            setLoadingView(R.layout.layout_footer_loading)
/fragments\SearchThreadFragment.kt:68:            setLoadEndView(R.layout.layout_footer_loadend)
/fragments\SearchThreadFragment.kt:69:            setLoadFailedView(R.layout.layout_footer_load_failed)
/fragments\SearchThreadFragment.kt:70:            setOnLoadMoreListener { isReload: Boolean -> loadMore(isReload) }
/fragments\SearchThreadFragment.kt:71:        }
/fragments\SearchThreadFragment.kt:72:        recyclerView.apply {
/fragments\SearchThreadFragment.kt:73:            layoutManager = MyLinearLayoutManager(attachContext)
/fragments\SearchThreadFragment.kt:74:            adapter = mAdapter
/fragments\SearchThreadFragment.kt:75:            addItemDecoration(CommonDivider(attachContext, LinearLayoutManager.VERTICAL, R.drawable.drawable_divider_1dp))
/fragments\SearchThreadFragment.kt:76:        }
/fragments\SearchThreadFragment.kt:77:        refreshLayout.apply {
/fragments\SearchThreadFragment.kt:78:            setOnRefreshListener { refresh() }
/fragments\SearchThreadFragment.kt:79:            ThemeUtil.setThemeForSwipeRefreshLayout(this)
/fragments\SearchThreadFragment.kt:80:        }
/fragments\SearchThreadFragment.kt:81:    }
/fragments\SearchThreadFragment.kt:83:    private fun hasMore(): Boolean {
/fragments\SearchThreadFragment.kt:84:        if (mData == null) {
/fragments\SearchThreadFragment.kt:85:            return false
/fragments\SearchThreadFragment.kt:86:        }
/fragments\SearchThreadFragment.kt:87:        if (mData!!.hasMore == 0) {
/fragments\SearchThreadFragment.kt:88:            mAdapter!!.loadEnd()
/fragments\SearchThreadFragment.kt:89:        }
/fragments\SearchThreadFragment.kt:90:        return mData!!.hasMore != 0
/fragments\SearchThreadFragment.kt:91:    }
/fragments\SearchThreadFragment.kt:93:    private fun refresh() {
/fragments\SearchThreadFragment.kt:94:        refreshLayout.isRefreshing = true
/fragments\SearchThreadFragment.kt:95:        page = 1
/fragments\SearchThreadFragment.kt:96:        TiebaApi.getInstance().searchThread(keyword!!, page, order, filter).enqueue(object : Callback<SearchThreadBean> {
/fragments\SearchThreadFragment.kt:97:            override fun onFailure(call: Call<SearchThreadBean>, t: Throwable) {
/fragments\SearchThreadFragment.kt:98:                refreshLayout.isRefreshing = false
/fragments\SearchThreadFragment.kt:99:                Toast.makeText(attachContext, t.message, Toast.LENGTH_SHORT).show()
/fragments\SearchThreadFragment.kt:100:            }
/fragments\SearchThreadFragment.kt:102:            override fun onResponse(call: Call<SearchThreadBean>, response: Response<SearchThreadBean>) {
/fragments\SearchThreadFragment.kt:103:                val searchThreadBean = response.body()!!
/fragments\SearchThreadFragment.kt:104:                mData = searchThreadBean.data
/fragments\SearchThreadFragment.kt:105:                mAdapter!!.setNewData(mData!!.postList)
/fragments\SearchThreadFragment.kt:106:                refreshLayout.isRefreshing = false
/fragments\SearchThreadFragment.kt:107:            }
/fragments\SearchThreadFragment.kt:108:        })
/fragments\SearchThreadFragment.kt:109:    }
/fragments\SearchThreadFragment.kt:111:    private fun loadMore(isReload: Boolean) {
/fragments\SearchThreadFragment.kt:112:        if (hasMore()) {
/fragments\SearchThreadFragment.kt:113:            if (!isReload) {
/fragments\SearchThreadFragment.kt:114:                page += 1
/fragments\SearchThreadFragment.kt:115:            }
/fragments\SearchThreadFragment.kt:116:            TiebaApi.getInstance().searchThread(keyword!!, page, order, filter).enqueue(object : Callback<SearchThreadBean> {
/fragments\SearchThreadFragment.kt:117:                override fun onFailure(call: Call<SearchThreadBean>, t: Throwable) {
/fragments\SearchThreadFragment.kt:118:                    refreshLayout.isRefreshing = false
/fragments\SearchThreadFragment.kt:119:                    Toast.makeText(attachContext, t.message, Toast.LENGTH_SHORT).show()
/fragments\SearchThreadFragment.kt:120:                }
/fragments\SearchThreadFragment.kt:122:                override fun onResponse(call: Call<SearchThreadBean>, response: Response<SearchThreadBean>) {
/fragments\SearchThreadFragment.kt:123:                    val searchThreadBean = response.body()!!
/fragments\SearchThreadFragment.kt:124:                    mData = searchThreadBean.data
/fragments\SearchThreadFragment.kt:125:                    mAdapter!!.setLoadMoreData(mData!!.postList)
/fragments\SearchThreadFragment.kt:126:                    refreshLayout.isRefreshing = false
/fragments\SearchThreadFragment.kt:127:                }
/fragments\SearchThreadFragment.kt:128:            })
/fragments\SearchThreadFragment.kt:129:        }
/fragments\SearchThreadFragment.kt:130:    }
/fragments\SearchThreadFragment.kt:132:    override fun onFragmentFirstVisible() {
/fragments\SearchThreadFragment.kt:133:        refresh()
/fragments\SearchThreadFragment.kt:134:    }
/fragments\SearchThreadFragment.kt:136:    override fun onSwitch(type: Int, value: Int) {
/fragments\SearchThreadFragment.kt:137:        when (type) {
/fragments\SearchThreadFragment.kt:138:            0 -> order = SearchThreadOrder.valueOf(value)
/fragments\SearchThreadFragment.kt:139:            1 -> filter = SearchThreadFilter.valueOf(value)
/fragments\SearchThreadFragment.kt:140:        }
/fragments\SearchThreadFragment.kt:141:        refresh()
/fragments\SearchThreadFragment.kt:142:    }
/fragments\SearchThreadFragment.kt:144:    companion object {
/fragments\SearchThreadFragment.kt:145:        const val TAG = "SearchThreadFragment"
/fragments\SearchThreadFragment.kt:146:        const val ARG_KEYWORD = "keyword"
/fragments\SearchThreadFragment.kt:147:        @JvmStatic
/fragments\SearchThreadFragment.kt:148:        fun newInstance(keyword: String?): SearchThreadFragment {
/fragments\SearchThreadFragment.kt:149:            val fragment = SearchThreadFragment()
/fragments\SearchThreadFragment.kt:150:            val bundle = Bundle()
/fragments\SearchThreadFragment.kt:151:            bundle.putString(ARG_KEYWORD, keyword)
/fragments\SearchThreadFragment.kt:152:            fragment.arguments = bundle
/fragments\SearchThreadFragment.kt:153:            return fragment
/fragments\SearchThreadFragment.kt:154:        }
/fragments\SearchThreadFragment.kt:155:    }
/fragments\SearchThreadFragment.kt:156:}/fragments\SearchUserFragment.kt:1:package com.huanchengfly.tieba.post.fragments
/fragments\SearchUserFragment.kt:3:import android.os.Bundle
/fragments\SearchUserFragment.kt:4:import android.view.View
/fragments\SearchUserFragment.kt:5:import android.widget.Toast
/fragments\SearchUserFragment.kt:6:import androidx.recyclerview.widget.RecyclerView
/fragments\SearchUserFragment.kt:7:import androidx.swiperefreshlayout.widget.SwipeRefreshLayout
/fragments\SearchUserFragment.kt:8:import butterknife.BindView
/fragments\SearchUserFragment.kt:9:import com.huanchengfly.tieba.post.api.TiebaApi
/fragments\SearchUserFragment.kt:10:import com.huanchengfly.tieba.post.api.models.SearchUserBean
/fragments\SearchUserFragment.kt:11:import com.huanchengfly.tieba.post.api.models.SearchUserBean.SearchUserDataBean
/fragments\SearchUserFragment.kt:12:import com.huanchengfly.tieba.post.R
/fragments\SearchUserFragment.kt:13:import com.huanchengfly.tieba.post.adapters.SearchUserAdapter
/fragments\SearchUserFragment.kt:14:import com.huanchengfly.tieba.post.components.MyLinearLayoutManager
/fragments\SearchUserFragment.kt:15:import com.huanchengfly.tieba.post.components.dividers.SearchDivider
/fragments\SearchUserFragment.kt:16:import com.huanchengfly.tieba.post.utils.ThemeUtil
/fragments\SearchUserFragment.kt:17:import retrofit2.Call
/fragments\SearchUserFragment.kt:18:import retrofit2.Callback
/fragments\SearchUserFragment.kt:19:import retrofit2.Response
/fragments\SearchUserFragment.kt:21:class SearchUserFragment : BaseFragment() {
/fragments\SearchUserFragment.kt:22:    private var keyword: String? = null
/fragments\SearchUserFragment.kt:23:    @BindView(R.id.fragment_search_refresh_layout)
/fragments\SearchUserFragment.kt:24:    lateinit var mRefreshLayout: SwipeRefreshLayout
/fragments\SearchUserFragment.kt:25:    @BindView(R.id.fragment_search_recycler_view)
/fragments\SearchUserFragment.kt:26:    lateinit var mRecyclerView: RecyclerView
/fragments\SearchUserFragment.kt:27:    private var mAdapter: SearchUserAdapter? = null
/fragments\SearchUserFragment.kt:28:    private var mData: SearchUserDataBean? = null
/fragments\SearchUserFragment.kt:29:    fun setKeyword(keyword: String?, refresh: Boolean) {
/fragments\SearchUserFragment.kt:30:        this.keyword = keyword
/fragments\SearchUserFragment.kt:31:        if (refresh) {
/fragments\SearchUserFragment.kt:32:            refresh()
/fragments\SearchUserFragment.kt:33:        } else {
/fragments\SearchUserFragment.kt:34:            mData = null
/fragments\SearchUserFragment.kt:35:            mAdapter!!.reset()
/fragments\SearchUserFragment.kt:36:        }
/fragments\SearchUserFragment.kt:37:    }
/fragments\SearchUserFragment.kt:39:    override fun onFragmentVisibleChange(isVisible: Boolean) {
/fragments\SearchUserFragment.kt:40:        if (mData == null && isVisible) {
/fragments\SearchUserFragment.kt:41:            refresh()
/fragments\SearchUserFragment.kt:42:        }
/fragments\SearchUserFragment.kt:43:    }
/fragments\SearchUserFragment.kt:45:    override fun onCreate(savedInstanceState: Bundle?) {
/fragments\SearchUserFragment.kt:46:        super.onCreate(savedInstanceState)
/fragments\SearchUserFragment.kt:47:        if (arguments != null) {
/fragments\SearchUserFragment.kt:48:            keyword = arguments!!.getString(ARG_KEYWORD)
/fragments\SearchUserFragment.kt:49:        }
/fragments\SearchUserFragment.kt:50:    }
/fragments\SearchUserFragment.kt:52:    public override fun getLayoutId(): Int {
/fragments\SearchUserFragment.kt:53:        return R.layout.fragment_search
/fragments\SearchUserFragment.kt:54:    }
/fragments\SearchUserFragment.kt:56:    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
/fragments\SearchUserFragment.kt:57:        super.onViewCreated(view, savedInstanceState)
/fragments\SearchUserFragment.kt:58:        mAdapter = SearchUserAdapter(attachContext).apply {
/fragments\SearchUserFragment.kt:59:            setLoadEndView(R.layout.layout_footer_loadend)
/fragments\SearchUserFragment.kt:60:            setLoadFailedView(R.layout.layout_footer_load_failed)
/fragments\SearchUserFragment.kt:61:        }
/fragments\SearchUserFragment.kt:62:        mRecyclerView.apply {
/fragments\SearchUserFragment.kt:63:            layoutManager = MyLinearLayoutManager(attachContext)
/fragments\SearchUserFragment.kt:64:            addItemDecoration(SearchDivider(attachContext))
/fragments\SearchUserFragment.kt:65:            adapter = mAdapter
/fragments\SearchUserFragment.kt:66:        }
/fragments\SearchUserFragment.kt:67:        mRefreshLayout.apply {
/fragments\SearchUserFragment.kt:68:            setOnRefreshListener { refresh() }
/fragments\SearchUserFragment.kt:69:            ThemeUtil.setThemeForSwipeRefreshLayout(this)
/fragments\SearchUserFragment.kt:70:        }
/fragments\SearchUserFragment.kt:71:    }
/fragments\SearchUserFragment.kt:73:    private fun refresh() {
/fragments\SearchUserFragment.kt:74:        mRefreshLayout.isRefreshing = true
/fragments\SearchUserFragment.kt:75:        TiebaApi.getInstance().searchUser(keyword!!).enqueue(object : Callback<SearchUserBean> {
/fragments\SearchUserFragment.kt:76:            override fun onResponse(call: Call<SearchUserBean>, response: Response<SearchUserBean>) {
/fragments\SearchUserFragment.kt:77:                val searchUserDataBean = response.body()!!.data
/fragments\SearchUserFragment.kt:78:                mData = searchUserDataBean
/fragments\SearchUserFragment.kt:79:                mAdapter!!.setData(searchUserDataBean)
/fragments\SearchUserFragment.kt:80:                mRefreshLayout.isRefreshing = false
/fragments\SearchUserFragment.kt:81:                if (searchUserDataBean?.hasMore == 0) mAdapter!!.loadEnd()
/fragments\SearchUserFragment.kt:82:            }
/fragments\SearchUserFragment.kt:84:            override fun onFailure(call: Call<SearchUserBean>, t: Throwable) {
/fragments\SearchUserFragment.kt:85:                mRefreshLayout.isRefreshing = false
/fragments\SearchUserFragment.kt:86:                Toast.makeText(attachContext, t.message, Toast.LENGTH_SHORT).show()
/fragments\SearchUserFragment.kt:87:            }
/fragments\SearchUserFragment.kt:88:        })
/fragments\SearchUserFragment.kt:89:    }
/fragments\SearchUserFragment.kt:91:    override fun onFragmentFirstVisible() {
/fragments\SearchUserFragment.kt:92:        refresh()
/fragments\SearchUserFragment.kt:93:    }
/fragments\SearchUserFragment.kt:95:    companion object {
/fragments\SearchUserFragment.kt:96:        const val TAG = "SearchUserFragment"
/fragments\SearchUserFragment.kt:97:        const val ARG_KEYWORD = "keyword"
/fragments\SearchUserFragment.kt:98:        @JvmStatic
/fragments\SearchUserFragment.kt:99:        fun newInstance(keyword: String?): SearchUserFragment {
/fragments\SearchUserFragment.kt:100:            val forumFragment = SearchUserFragment()
/fragments\SearchUserFragment.kt:101:            val bundle = Bundle()
/fragments\SearchUserFragment.kt:102:            bundle.putString(ARG_KEYWORD, keyword)
/fragments\SearchUserFragment.kt:103:            forumFragment.arguments = bundle
/fragments\SearchUserFragment.kt:104:            return forumFragment
/fragments\SearchUserFragment.kt:105:        }
/fragments\SearchUserFragment.kt:106:    }
/fragments\SearchUserFragment.kt:107:}/fragments\SettingsFragment.kt:1:package com.huanchengfly.tieba.post.fragments
/fragments\SettingsFragment.kt:3:import android.annotation.SuppressLint
/fragments\SettingsFragment.kt:4:import android.content.DialogInterface
/fragments\SettingsFragment.kt:5:import android.content.Intent
/fragments\SettingsFragment.kt:6:import android.os.Build
/fragments\SettingsFragment.kt:7:import android.os.Bundle
/fragments\SettingsFragment.kt:8:import android.view.View
/fragments\SettingsFragment.kt:9:import android.widget.Toast
/fragments\SettingsFragment.kt:10:import androidx.core.content.ContextCompat
/fragments\SettingsFragment.kt:11:import androidx.preference.EditTextPreference
/fragments\SettingsFragment.kt:12:import androidx.preference.ListPreference
/fragments\SettingsFragment.kt:13:import androidx.preference.Preference
/fragments\SettingsFragment.kt:14:import androidx.preference.SwitchPreference
/fragments\SettingsFragment.kt:15:import com.google.android.material.snackbar.Snackbar
/fragments\SettingsFragment.kt:16:import com.huanchengfly.tieba.post.R
/fragments\SettingsFragment.kt:17:import com.huanchengfly.tieba.post.activities.BlockListActivity
/fragments\SettingsFragment.kt:18:import com.huanchengfly.tieba.post.activities.LoginActivity
/fragments\SettingsFragment.kt:19:import com.huanchengfly.tieba.post.api.LiteApi.Companion.instance
/fragments\SettingsFragment.kt:20:import com.huanchengfly.tieba.post.api.interfaces.CommonAPICallback
/fragments\SettingsFragment.kt:21:import com.huanchengfly.tieba.post.api.models.NewUpdateBean
/fragments\SettingsFragment.kt:22:import com.huanchengfly.tieba.post.components.prefs.TimePickerPreference
/fragments\SettingsFragment.kt:23:import com.huanchengfly.tieba.post.fragments.preference.PreferencesFragment
/fragments\SettingsFragment.kt:24:import com.huanchengfly.tieba.post.models.database.Account
/fragments\SettingsFragment.kt:25:import com.huanchengfly.tieba.post.models.database.Block
/fragments\SettingsFragment.kt:26:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils
/fragments\SettingsFragment.kt:27:import com.huanchengfly.tieba.post.utils.*
/fragments\SettingsFragment.kt:28:import com.lapism.searchview.database.SearchHistoryTable
/fragments\SettingsFragment.kt:29:import java.util.*
/fragments\SettingsFragment.kt:31:class SettingsFragment : PreferencesFragment() {
/fragments\SettingsFragment.kt:32:    private var loginInfo: Account? = null
/fragments\SettingsFragment.kt:33:    override fun onResume() {
/fragments\SettingsFragment.kt:34:        super.onResume()
/fragments\SettingsFragment.kt:35:        refresh()
/fragments\SettingsFragment.kt:36:    }
/fragments\SettingsFragment.kt:38:    private fun refresh() {
/fragments\SettingsFragment.kt:39:        loginInfo = AccountUtil.getLoginInfo(attachContext)
/fragments\SettingsFragment.kt:40:        val accounts = AccountUtil.getAllAccounts()
/fragments\SettingsFragment.kt:41:        val usernameList: MutableList<String> = ArrayList()
/fragments\SettingsFragment.kt:42:        val idList: MutableList<String> = ArrayList()
/fragments\SettingsFragment.kt:43:        for (account in accounts) {
/fragments\SettingsFragment.kt:44:            usernameList.add(account.nameShow)
/fragments\SettingsFragment.kt:45:            idList.add(account.id.toString())
/fragments\SettingsFragment.kt:46:        }
/fragments\SettingsFragment.kt:47:        val accountsPreference = findPreference<ListPreference>("switch_account")
/fragments\SettingsFragment.kt:48:        accountsPreference!!.entries = usernameList.toTypedArray()
/fragments\SettingsFragment.kt:49:        accountsPreference.entryValues = idList.toTypedArray()
/fragments\SettingsFragment.kt:50:        if (loginInfo != null) {
/fragments\SettingsFragment.kt:51:            accountsPreference.value = loginInfo!!.id.toString()
/fragments\SettingsFragment.kt:52:            accountsPreference.summary = "已登录账号 " + loginInfo!!.nameShow
/fragments\SettingsFragment.kt:53:        } else {
/fragments\SettingsFragment.kt:54:            accountsPreference.summary = "未登录"
/fragments\SettingsFragment.kt:55:        }
/fragments\SettingsFragment.kt:56:    }
/fragments\SettingsFragment.kt:58:    @SuppressLint("ApplySharedPref")
/fragments\SettingsFragment.kt:59:    override fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {
/fragments\SettingsFragment.kt:60:        preferenceManager.sharedPreferencesName = "settings"
/fragments\SettingsFragment.kt:61:        addPreferencesFromResource(R.xml.preferences)
/fragments\SettingsFragment.kt:62:        val accountsPreference = findPreference<ListPreference>("switch_account")
/fragments\SettingsFragment.kt:63:        accountsPreference!!.onPreferenceChangeListener = Preference.OnPreferenceChangeListener { _: Preference?, newValue: Any? ->
/fragments\SettingsFragment.kt:64:            if (AccountUtil.switchUser(attachContext, Integer.valueOf((newValue as String?)!!))) {
/fragments\SettingsFragment.kt:65:                refresh()
/fragments\SettingsFragment.kt:66:                Toast.makeText(attachContext, R.string.toast_switch_success, Toast.LENGTH_SHORT).show()
/fragments\SettingsFragment.kt:67:            }
/fragments\SettingsFragment.kt:68:            false
/fragments\SettingsFragment.kt:69:        }
/fragments\SettingsFragment.kt:70:        findPreference<Preference>("copy_bduss")!!.onPreferenceClickListener = Preference.OnPreferenceClickListener {
/fragments\SettingsFragment.kt:71:            val account = AccountUtil.getLoginInfo(attachContext)
/fragments\SettingsFragment.kt:72:            if (account != null) {
/fragments\SettingsFragment.kt:73:                TiebaUtil.copyText(attachContext, account.bduss)
/fragments\SettingsFragment.kt:74:            }
/fragments\SettingsFragment.kt:75:            true
/fragments\SettingsFragment.kt:76:        }
/fragments\SettingsFragment.kt:77:        findPreference<Preference>("clear_search_history")!!.onPreferenceClickListener = Preference.OnPreferenceClickListener {
/fragments\SettingsFragment.kt:78:            SearchHistoryTable(attachContext).clearDatabase()
/fragments\SettingsFragment.kt:79:            if (view != null) Util.createSnackbar(view!!, R.string.toast_clear_success, Snackbar.LENGTH_SHORT).show()
/fragments\SettingsFragment.kt:80:            true
/fragments\SettingsFragment.kt:81:        }
/fragments\SettingsFragment.kt:82:        findPreference<Preference>("exit_account")!!.isEnabled = AccountUtil.isLoggedIn(attachContext)
/fragments\SettingsFragment.kt:83:        findPreference<Preference>("exit_account")!!.onPreferenceClickListener = Preference.OnPreferenceClickListener {
/fragments\SettingsFragment.kt:84:            DialogUtil.build(attachContext)
/fragments\SettingsFragment.kt:85:                    .setMessage(R.string.title_dialog_exit_account)
/fragments\SettingsFragment.kt:86:                    .setPositiveButton(R.string.button_sure_default) { _: DialogInterface?, _: Int ->
/fragments\SettingsFragment.kt:87:                        AccountUtil.exit(attachContext)
/fragments\SettingsFragment.kt:88:                        refresh()
/fragments\SettingsFragment.kt:89:                        if (AccountUtil.getLoginInfo(attachContext) == null) {
/fragments\SettingsFragment.kt:90:                            attachContext.startActivity(Intent(attachContext, LoginActivity::class.java))
/fragments\SettingsFragment.kt:91:                        }
/fragments\SettingsFragment.kt:92:                    }
/fragments\SettingsFragment.kt:93:                    .setNegativeButton(R.string.button_cancel, null)
/fragments\SettingsFragment.kt:94:                    .create()
/fragments\SettingsFragment.kt:95:                    .show()
/fragments\SettingsFragment.kt:96:            true
/fragments\SettingsFragment.kt:97:        }
/fragments\SettingsFragment.kt:98:        findPreference<Preference>("black_list")!!.onPreferenceClickListener = Preference.OnPreferenceClickListener {
/fragments\SettingsFragment.kt:99:            startActivity(Intent(attachContext, BlockListActivity::class.java).putExtra("category", Block.CATEGORY_BLACK_LIST))
/fragments\SettingsFragment.kt:100:            true
/fragments\SettingsFragment.kt:101:        }
/fragments\SettingsFragment.kt:102:        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
/fragments\SettingsFragment.kt:103:            findPreference<Preference>("follow_system_night")!!.isEnabled = true
/fragments\SettingsFragment.kt:104:            findPreference<Preference>("follow_system_night")!!.summary = null
/fragments\SettingsFragment.kt:105:        } else {
/fragments\SettingsFragment.kt:106:            findPreference<Preference>("follow_system_night")!!.isEnabled = false
/fragments\SettingsFragment.kt:107:            findPreference<Preference>("follow_system_night")!!.setSummary(R.string.summary_follow_system_night_disabled)
/fragments\SettingsFragment.kt:108:        }
/fragments\SettingsFragment.kt:109:        findPreference<Preference>("show_top_forum_in_normal_list")!!.onPreferenceChangeListener = Preference.OnPreferenceChangeListener { preference: Preference, _: Any? ->
/fragments\SettingsFragment.kt:110:            preference.setSummary(R.string.summary_show_top_forum_in_normal_list_changed)
/fragments\SettingsFragment.kt:111:            true
/fragments\SettingsFragment.kt:112:        }
/fragments\SettingsFragment.kt:113:        findPreference<Preference>("status_bar_darker")!!.onPreferenceChangeListener = Preference.OnPreferenceChangeListener { preference: Preference, _: Any? ->
/fragments\SettingsFragment.kt:114:            preference.setSummary(R.string.summary_status_bar_darker_changed)
/fragments\SettingsFragment.kt:115:            true
/fragments\SettingsFragment.kt:116:        }
/fragments\SettingsFragment.kt:117:        findPreference<Preference>("hideExplore")!!.onPreferenceChangeListener = Preference.OnPreferenceChangeListener { preference: Preference, _: Any? ->
/fragments\SettingsFragment.kt:118:            preference.setSummary(R.string.summary_change_need_restart)
/fragments\SettingsFragment.kt:119:            true
/fragments\SettingsFragment.kt:120:        }
/fragments\SettingsFragment.kt:121:        findPreference<Preference>("white_list")!!.onPreferenceClickListener = Preference.OnPreferenceClickListener {
/fragments\SettingsFragment.kt:122:            startActivity(Intent(attachContext, BlockListActivity::class.java).putExtra("category", Block.CATEGORY_WHITE_LIST))
/fragments\SettingsFragment.kt:123:            true
/fragments\SettingsFragment.kt:124:        }
/fragments\SettingsFragment.kt:125:        val timePickerPreference = findPreference<TimePickerPreference>("auto_sign_time")
/fragments\SettingsFragment.kt:126:        timePickerPreference!!.onPreferenceChangeListener = Preference.OnPreferenceChangeListener { preference: Preference, newValue: Any? ->
/fragments\SettingsFragment.kt:127:            preference.summary = attachContext.getString(R.string.summary_auto_sign_time, newValue as String?)
/fragments\SettingsFragment.kt:128:            true
/fragments\SettingsFragment.kt:129:        }
/fragments\SettingsFragment.kt:130:        timePickerPreference.summary = attachContext.getString(R.string.summary_auto_sign_time, preferenceManager.sharedPreferences.getString("auto_sign_time", "09:00"))
/fragments\SettingsFragment.kt:131:        val clearCache = findPreference<Preference>("clear_cache")
/fragments\SettingsFragment.kt:132:        clearCache!!.summary = attachContext.getString(R.string.tip_cache, GlideCacheUtil.getInstance().getCacheSize(attachContext))
/fragments\SettingsFragment.kt:133:        clearCache.onPreferenceClickListener = Preference.OnPreferenceClickListener { preference: Preference ->
/fragments\SettingsFragment.kt:134:            GlideCacheUtil.getInstance().clearImageAllCache(attachContext)
/fragments\SettingsFragment.kt:135:            if (view != null) Util.createSnackbar(view!!, R.string.toast_clear_cache_success, Snackbar.LENGTH_SHORT).show()
/fragments\SettingsFragment.kt:136:            preference.summary = attachContext.getString(R.string.tip_cache, "0.0B")
/fragments\SettingsFragment.kt:137:            true
/fragments\SettingsFragment.kt:138:        }
/fragments\SettingsFragment.kt:139:        val littleTaliPreference = findPreference<EditTextPreference>("little_tail")
/fragments\SettingsFragment.kt:140:        val littleTali = preferenceManager.sharedPreferences.getString("little_tail", "")
/fragments\SettingsFragment.kt:141:        if (littleTali!!.isEmpty()) {
/fragments\SettingsFragment.kt:142:            littleTaliPreference!!.setSummary(R.string.tip_no_little_tail)
/fragments\SettingsFragment.kt:143:        } else {
/fragments\SettingsFragment.kt:144:            littleTaliPreference!!.summary = littleTali
/fragments\SettingsFragment.kt:145:            littleTaliPreference.text = littleTali
/fragments\SettingsFragment.kt:146:        }
/fragments\SettingsFragment.kt:147:        littleTaliPreference.onPreferenceChangeListener = Preference.OnPreferenceChangeListener { _: Preference?, value: Any? ->
/fragments\SettingsFragment.kt:148:            if (value is String) {
/fragments\SettingsFragment.kt:149:                if (value.isEmpty()) {
/fragments\SettingsFragment.kt:150:                    littleTaliPreference.setSummary(R.string.tip_no_little_tail)
/fragments\SettingsFragment.kt:151:                } else {
/fragments\SettingsFragment.kt:152:                    littleTaliPreference.summary = value
/fragments\SettingsFragment.kt:153:                    littleTaliPreference.text = value
/fragments\SettingsFragment.kt:154:                }
/fragments\SettingsFragment.kt:155:            }
/fragments\SettingsFragment.kt:156:            true
/fragments\SettingsFragment.kt:157:        }
/fragments\SettingsFragment.kt:158:        val aboutPreference = findPreference<Preference>("about")
/fragments\SettingsFragment.kt:159:        instance!!.newCheckUpdate(object : CommonAPICallback<NewUpdateBean?> {
/fragments\SettingsFragment.kt:160:            override fun onSuccess(data: NewUpdateBean?) {
/fragments\SettingsFragment.kt:161:                if (data != null) {
/fragments\SettingsFragment.kt:162:                    if (data.isHasUpdate == true) {
/fragments\SettingsFragment.kt:163:                        aboutPreference!!.summary = attachContext.getString(R.string.tip_new_version, data.result?.versionName)
/fragments\SettingsFragment.kt:164:                    }
/fragments\SettingsFragment.kt:165:                }
/fragments\SettingsFragment.kt:166:            }
/fragments\SettingsFragment.kt:168:            override fun onFailure(code: Int, error: String) {}
/fragments\SettingsFragment.kt:169:        })
/fragments\SettingsFragment.kt:170:        val useCustomTabs = findPreference<SwitchPreference>("use_custom_tabs")
/fragments\SettingsFragment.kt:171:        useCustomTabs!!.isEnabled = !preferenceManager.sharedPreferences.getBoolean("use_webview", true)
/fragments\SettingsFragment.kt:172:        findPreference<Preference>("use_webview")!!.onPreferenceChangeListener = Preference.OnPreferenceChangeListener { _: Preference?, newValue: Any? ->
/fragments\SettingsFragment.kt:173:            useCustomTabs.isEnabled != newValue as Boolean
/fragments\SettingsFragment.kt:174:            true
/fragments\SettingsFragment.kt:175:        }
/fragments\SettingsFragment.kt:176:        initListPreference("dark_theme", "dark")
/fragments\SettingsFragment.kt:177:        aboutPreference!!.summary = getString(R.string.tip_about, VersionUtil.getVersionName(attachContext))
/fragments\SettingsFragment.kt:178:        refresh()
/fragments\SettingsFragment.kt:179:    }
/fragments\SettingsFragment.kt:181:    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
/fragments\SettingsFragment.kt:182:        super.onViewCreated(view, savedInstanceState)
/fragments\SettingsFragment.kt:183:        setDivider(ThemeUtils.tintDrawable(ContextCompat.getDrawable(attachContext, R.drawable.drawable_divider_8dp), ThemeUtils.getColorByAttr(attachContext, R.attr.colorDivider)))
/fragments\SettingsFragment.kt:184:        setDividerHeight(DisplayUtil.dp2px(attachContext, 8f))
/fragments\SettingsFragment.kt:185:    }
/fragments\SettingsFragment.kt:187:    private fun initSwitchPreference(key: String, defValue: Boolean = false) {
/fragments\SettingsFragment.kt:188:        val switchPreference = findPreference<SwitchPreference>(key)
/fragments\SettingsFragment.kt:189:        initSwitchPreference(switchPreference, defValue)
/fragments\SettingsFragment.kt:190:    }
/fragments\SettingsFragment.kt:192:    private fun initSwitchPreference(switchPreference: SwitchPreference?, defValue: Boolean = false) {
/fragments\SettingsFragment.kt:193:        val value = preferenceManager.sharedPreferences.getBoolean(switchPreference!!.key, defValue)
/fragments\SettingsFragment.kt:194:        switchPreference.isChecked = value
/fragments\SettingsFragment.kt:195:    }
/fragments\SettingsFragment.kt:197:    private fun initListPreference(key: String, defValue: String) {
/fragments\SettingsFragment.kt:198:        val listPreference = findPreference<ListPreference>(key)
/fragments\SettingsFragment.kt:199:        val value = preferenceManager.sharedPreferences.getString(key, defValue)
/fragments\SettingsFragment.kt:200:        listPreference!!.value = value
/fragments\SettingsFragment.kt:201:    }
/fragments\SettingsFragment.kt:203:    companion object {
/fragments\SettingsFragment.kt:204:        const val TAG = "SettingsFragment"
/fragments\SettingsFragment.kt:205:    }
/fragments\SettingsFragment.kt:206:}/fragments\intro\CustomSettingsFragment.java:1:package com.huanchengfly.tieba.post.fragments.intro;
/fragments\intro\CustomSettingsFragment.java:3:import android.view.ViewGroup;
/fragments\intro\CustomSettingsFragment.java:5:import androidx.annotation.Nullable;
/fragments\intro\CustomSettingsFragment.java:7:import com.huanchengfly.tieba.post.ui.intro.fragments.BaseIntroFragment;
/fragments\intro\CustomSettingsFragment.java:8:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/fragments\intro\CustomSettingsFragment.java:9:import com.huanchengfly.tieba.post.R;
/fragments\intro\CustomSettingsFragment.java:10:import com.huanchengfly.tieba.post.utils.SharedPreferencesUtil;
/fragments\intro\CustomSettingsFragment.java:12:public class CustomSettingsFragment extends BaseIntroFragment {
/fragments\intro\CustomSettingsFragment.java:13:    @Override
/fragments\intro\CustomSettingsFragment.java:14:    public int getIconRes() {
/fragments\intro\CustomSettingsFragment.java:15:        return R.drawable.ic_round_format_paint_red;
/fragments\intro\CustomSettingsFragment.java:16:    }
/fragments\intro\CustomSettingsFragment.java:18:    @Nullable
/fragments\intro\CustomSettingsFragment.java:19:    @Override
/fragments\intro\CustomSettingsFragment.java:20:    protected CharSequence getTitle() {
/fragments\intro\CustomSettingsFragment.java:21:        return getAttachContext().getString(R.string.title_fragment_custom_settings);
/fragments\intro\CustomSettingsFragment.java:22:    }
/fragments\intro\CustomSettingsFragment.java:24:    @Nullable
/fragments\intro\CustomSettingsFragment.java:25:    @Override
/fragments\intro\CustomSettingsFragment.java:26:    protected CharSequence getSubtitle() {
/fragments\intro\CustomSettingsFragment.java:27:        return getAttachContext().getString(R.string.subtitle_fragment_custom_settings);
/fragments\intro\CustomSettingsFragment.java:28:    }
/fragments\intro\CustomSettingsFragment.java:30:    @Override
/fragments\intro\CustomSettingsFragment.java:31:    protected int getIconColor() {
/fragments\intro\CustomSettingsFragment.java:32:        return ThemeUtils.getColorByAttr(getAttachContext(), R.attr.colorAccent);
/fragments\intro\CustomSettingsFragment.java:33:    }
/fragments\intro\CustomSettingsFragment.java:35:    @Override
/fragments\intro\CustomSettingsFragment.java:36:    protected int getTitleTextColor() {
/fragments\intro\CustomSettingsFragment.java:37:        return ThemeUtils.getColorByAttr(getAttachContext(), R.attr.colorText);
/fragments\intro\CustomSettingsFragment.java:38:    }
/fragments\intro\CustomSettingsFragment.java:40:    @Override
/fragments\intro\CustomSettingsFragment.java:41:    protected int getSubtitleTextColor() {
/fragments\intro\CustomSettingsFragment.java:42:        return ThemeUtils.getColorByAttr(getAttachContext(), R.attr.colorTextSecondary);
/fragments\intro\CustomSettingsFragment.java:43:    }
/fragments\intro\CustomSettingsFragment.java:45:    @Override
/fragments\intro\CustomSettingsFragment.java:46:    protected int getCustomLayoutResId() {
/fragments\intro\CustomSettingsFragment.java:47:        return R.layout.fragment_container;
/fragments\intro\CustomSettingsFragment.java:48:    }
/fragments\intro\CustomSettingsFragment.java:50:    @Override
/fragments\intro\CustomSettingsFragment.java:51:    protected void initCustomLayout(ViewGroup container) {
/fragments\intro\CustomSettingsFragment.java:52:        super.initCustomLayout(container);
/fragments\intro\CustomSettingsFragment.java:53:        getChildFragmentManager().beginTransaction()
/fragments\intro\CustomSettingsFragment.java:54:                .replace(R.id.container, IntroSettingsFragment.newInstance(R.xml.custom_preferences, SharedPreferencesUtil.SP_SETTINGS), "IntroSettingsFragment")
/fragments\intro\CustomSettingsFragment.java:55:                .commit();
/fragments\intro\CustomSettingsFragment.java:56:    }
/fragments\intro\CustomSettingsFragment.java:57:}
/fragments\intro\ExploreFragment.java:1:package com.huanchengfly.tieba.post.fragments.intro;
/fragments\intro\ExploreFragment.java:3:import android.content.Intent;
/fragments\intro\ExploreFragment.java:4:import android.view.View;
/fragments\intro\ExploreFragment.java:5:import android.view.ViewGroup;
/fragments\intro\ExploreFragment.java:7:import androidx.annotation.Nullable;
/fragments\intro\ExploreFragment.java:9:import com.huanchengfly.tieba.post.ui.intro.fragments.BaseIntroFragment;
/fragments\intro\ExploreFragment.java:10:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/fragments\intro\ExploreFragment.java:11:import com.huanchengfly.tieba.post.R;
/fragments\intro\ExploreFragment.java:12:import com.huanchengfly.tieba.post.activities.SettingsActivity;
/fragments\intro\ExploreFragment.java:14:public class ExploreFragment extends BaseIntroFragment implements View.OnClickListener {
/fragments\intro\ExploreFragment.java:15:    @Override
/fragments\intro\ExploreFragment.java:16:    public int getIconRes() {
/fragments\intro\ExploreFragment.java:17:        return R.drawable.ic_round_explore;
/fragments\intro\ExploreFragment.java:18:    }
/fragments\intro\ExploreFragment.java:20:    @Nullable
/fragments\intro\ExploreFragment.java:21:    @Override
/fragments\intro\ExploreFragment.java:22:    protected CharSequence getTitle() {
/fragments\intro\ExploreFragment.java:23:        return getAttachContext().getString(R.string.title_fragment_explore);
/fragments\intro\ExploreFragment.java:24:    }
/fragments\intro\ExploreFragment.java:26:    @Nullable
/fragments\intro\ExploreFragment.java:27:    @Override
/fragments\intro\ExploreFragment.java:28:    protected CharSequence getSubtitle() {
/fragments\intro\ExploreFragment.java:29:        return getAttachContext().getString(R.string.subtitle_fragment_explore);
/fragments\intro\ExploreFragment.java:30:    }
/fragments\intro\ExploreFragment.java:32:    @Override
/fragments\intro\ExploreFragment.java:33:    protected int getIconColor() {
/fragments\intro\ExploreFragment.java:34:        return ThemeUtils.getColorByAttr(getAttachContext(), R.attr.colorAccent);
/fragments\intro\ExploreFragment.java:35:    }
/fragments\intro\ExploreFragment.java:37:    @Override
/fragments\intro\ExploreFragment.java:38:    protected int getTitleTextColor() {
/fragments\intro\ExploreFragment.java:39:        return ThemeUtils.getColorByAttr(getAttachContext(), R.attr.colorText);
/fragments\intro\ExploreFragment.java:40:    }
/fragments\intro\ExploreFragment.java:42:    @Override
/fragments\intro\ExploreFragment.java:43:    protected int getSubtitleTextColor() {
/fragments\intro\ExploreFragment.java:44:        return ThemeUtils.getColorByAttr(getAttachContext(), R.attr.colorTextSecondary);
/fragments\intro\ExploreFragment.java:45:    }
/fragments\intro\ExploreFragment.java:47:    @Override
/fragments\intro\ExploreFragment.java:48:    protected int getCustomLayoutResId() {
/fragments\intro\ExploreFragment.java:49:        return R.layout.layout_fragment_explore;
/fragments\intro\ExploreFragment.java:50:    }
/fragments\intro\ExploreFragment.java:52:    @Override
/fragments\intro\ExploreFragment.java:53:    protected void initCustomLayout(ViewGroup container) {
/fragments\intro\ExploreFragment.java:54:        super.initCustomLayout(container);
/fragments\intro\ExploreFragment.java:55:        container.findViewById(R.id.explore_auto_sign).setOnClickListener(this);
/fragments\intro\ExploreFragment.java:56:    }
/fragments\intro\ExploreFragment.java:58:    @Override
/fragments\intro\ExploreFragment.java:59:    public void onClick(View v) {
/fragments\intro\ExploreFragment.java:60:        switch (v.getId()) {
/fragments\intro\ExploreFragment.java:61:            case R.id.explore_auto_sign:
/fragments\intro\ExploreFragment.java:62:                startActivity(new Intent(getAttachContext(), SettingsActivity.class).putExtra("scroll_to_preference", "auto_sign"));
/fragments\intro\ExploreFragment.java:63:                break;
/fragments\intro\ExploreFragment.java:64:        }
/fragments\intro\ExploreFragment.java:65:    }
/fragments\intro\ExploreFragment.java:66:}
/fragments\intro\HabitSettingsFragment.java:1:package com.huanchengfly.tieba.post.fragments.intro;
/fragments\intro\HabitSettingsFragment.java:3:import android.view.ViewGroup;
/fragments\intro\HabitSettingsFragment.java:5:import androidx.annotation.Nullable;
/fragments\intro\HabitSettingsFragment.java:7:import com.huanchengfly.tieba.post.ui.intro.fragments.BaseIntroFragment;
/fragments\intro\HabitSettingsFragment.java:8:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/fragments\intro\HabitSettingsFragment.java:9:import com.huanchengfly.tieba.post.R;
/fragments\intro\HabitSettingsFragment.java:10:import com.huanchengfly.tieba.post.utils.SharedPreferencesUtil;
/fragments\intro\HabitSettingsFragment.java:12:public class HabitSettingsFragment extends BaseIntroFragment {
/fragments\intro\HabitSettingsFragment.java:13:    @Override
/fragments\intro\HabitSettingsFragment.java:14:    public int getIconRes() {
/fragments\intro\HabitSettingsFragment.java:15:        return R.drawable.ic_round_offline_bolt_green;
/fragments\intro\HabitSettingsFragment.java:16:    }
/fragments\intro\HabitSettingsFragment.java:18:    @Nullable
/fragments\intro\HabitSettingsFragment.java:19:    @Override
/fragments\intro\HabitSettingsFragment.java:20:    protected CharSequence getTitle() {
/fragments\intro\HabitSettingsFragment.java:21:        return getAttachContext().getString(R.string.title_fragment_habit_settings);
/fragments\intro\HabitSettingsFragment.java:22:    }
/fragments\intro\HabitSettingsFragment.java:24:    @Nullable
/fragments\intro\HabitSettingsFragment.java:25:    @Override
/fragments\intro\HabitSettingsFragment.java:26:    protected CharSequence getSubtitle() {
/fragments\intro\HabitSettingsFragment.java:27:        return getAttachContext().getString(R.string.subtitle_fragment_habit_settings);
/fragments\intro\HabitSettingsFragment.java:28:    }
/fragments\intro\HabitSettingsFragment.java:30:    @Override
/fragments\intro\HabitSettingsFragment.java:31:    protected int getIconColor() {
/fragments\intro\HabitSettingsFragment.java:32:        return ThemeUtils.getColorByAttr(getAttachContext(), R.attr.colorAccent);
/fragments\intro\HabitSettingsFragment.java:33:    }
/fragments\intro\HabitSettingsFragment.java:35:    @Override
/fragments\intro\HabitSettingsFragment.java:36:    protected int getTitleTextColor() {
/fragments\intro\HabitSettingsFragment.java:37:        return ThemeUtils.getColorByAttr(getAttachContext(), R.attr.colorText);
/fragments\intro\HabitSettingsFragment.java:38:    }
/fragments\intro\HabitSettingsFragment.java:40:    @Override
/fragments\intro\HabitSettingsFragment.java:41:    protected int getSubtitleTextColor() {
/fragments\intro\HabitSettingsFragment.java:42:        return ThemeUtils.getColorByAttr(getAttachContext(), R.attr.colorTextSecondary);
/fragments\intro\HabitSettingsFragment.java:43:    }
/fragments\intro\HabitSettingsFragment.java:45:    @Override
/fragments\intro\HabitSettingsFragment.java:46:    protected int getCustomLayoutResId() {
/fragments\intro\HabitSettingsFragment.java:47:        return R.layout.fragment_container;
/fragments\intro\HabitSettingsFragment.java:48:    }
/fragments\intro\HabitSettingsFragment.java:50:    @Override
/fragments\intro\HabitSettingsFragment.java:51:    protected void initCustomLayout(ViewGroup container) {
/fragments\intro\HabitSettingsFragment.java:52:        super.initCustomLayout(container);
/fragments\intro\HabitSettingsFragment.java:53:        getChildFragmentManager().beginTransaction()
/fragments\intro\HabitSettingsFragment.java:54:                .replace(R.id.container, IntroSettingsFragment.newInstance(R.xml.habit_preferences, SharedPreferencesUtil.SP_SETTINGS), "IntroSettingsFragment")
/fragments\intro\HabitSettingsFragment.java:55:                .commit();
/fragments\intro\HabitSettingsFragment.java:56:    }
/fragments\intro\HabitSettingsFragment.java:57:}
/fragments\intro\IntroSettingsFragment.java:1:package com.huanchengfly.tieba.post.fragments.intro;
/fragments\intro\IntroSettingsFragment.java:3:import android.os.Bundle;
/fragments\intro\IntroSettingsFragment.java:5:import androidx.annotation.Nullable;
/fragments\intro\IntroSettingsFragment.java:6:import androidx.annotation.XmlRes;
/fragments\intro\IntroSettingsFragment.java:8:import com.huanchengfly.tieba.post.fragments.preference.PreferencesFragment;
/fragments\intro\IntroSettingsFragment.java:10:public class IntroSettingsFragment extends PreferencesFragment {
/fragments\intro\IntroSettingsFragment.java:11:    private String spName;
/fragments\intro\IntroSettingsFragment.java:12:    private @XmlRes
/fragments\intro\IntroSettingsFragment.java:13:    int res;
/fragments\intro\IntroSettingsFragment.java:15:    private IntroSettingsFragment() {
/fragments\intro\IntroSettingsFragment.java:16:    }
/fragments\intro\IntroSettingsFragment.java:18:    public static IntroSettingsFragment newInstance(@XmlRes int res, String spName) {
/fragments\intro\IntroSettingsFragment.java:19:        IntroSettingsFragment fragment = new IntroSettingsFragment();
/fragments\intro\IntroSettingsFragment.java:20:        Bundle bundle = new Bundle();
/fragments\intro\IntroSettingsFragment.java:21:        bundle.putInt("res", res);
/fragments\intro\IntroSettingsFragment.java:22:        bundle.putString("spName", spName);
/fragments\intro\IntroSettingsFragment.java:23:        fragment.setArguments(bundle);
/fragments\intro\IntroSettingsFragment.java:24:        return fragment;
/fragments\intro\IntroSettingsFragment.java:25:    }
/fragments\intro\IntroSettingsFragment.java:27:    @Override
/fragments\intro\IntroSettingsFragment.java:28:    public void onCreate(@Nullable Bundle savedInstanceState) {
/fragments\intro\IntroSettingsFragment.java:29:        Bundle bundle = getArguments();
/fragments\intro\IntroSettingsFragment.java:30:        if (bundle != null) {
/fragments\intro\IntroSettingsFragment.java:31:            spName = bundle.getString("spName");
/fragments\intro\IntroSettingsFragment.java:32:            res = bundle.getInt("res");
/fragments\intro\IntroSettingsFragment.java:33:        }
/fragments\intro\IntroSettingsFragment.java:34:        super.onCreate(savedInstanceState);
/fragments\intro\IntroSettingsFragment.java:35:    }
/fragments\intro\IntroSettingsFragment.java:37:    @Override
/fragments\intro\IntroSettingsFragment.java:38:    public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
/fragments\intro\IntroSettingsFragment.java:39:        getPreferenceManager().setSharedPreferencesName(spName);
/fragments\intro\IntroSettingsFragment.java:40:        addPreferencesFromResource(res);
/fragments\intro\IntroSettingsFragment.java:41:    }
/fragments\intro\IntroSettingsFragment.java:42:}
/fragments\intro\OtherSettingsFragment.java:1:package com.huanchengfly.tieba.post.fragments.intro;
/fragments\intro\OtherSettingsFragment.java:3:import android.view.ViewGroup;
/fragments\intro\OtherSettingsFragment.java:5:import androidx.annotation.Nullable;
/fragments\intro\OtherSettingsFragment.java:7:import com.huanchengfly.tieba.post.ui.intro.fragments.BaseIntroFragment;
/fragments\intro\OtherSettingsFragment.java:8:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/fragments\intro\OtherSettingsFragment.java:9:import com.huanchengfly.tieba.post.R;
/fragments\intro\OtherSettingsFragment.java:10:import com.huanchengfly.tieba.post.utils.SharedPreferencesUtil;
/fragments\intro\OtherSettingsFragment.java:12:public class OtherSettingsFragment extends BaseIntroFragment {
/fragments\intro\OtherSettingsFragment.java:13:    @Override
/fragments\intro\OtherSettingsFragment.java:14:    public int getIconRes() {
/fragments\intro\OtherSettingsFragment.java:15:        return R.drawable.ic_round_settings_grey;
/fragments\intro\OtherSettingsFragment.java:16:    }
/fragments\intro\OtherSettingsFragment.java:18:    @Nullable
/fragments\intro\OtherSettingsFragment.java:19:    @Override
/fragments\intro\OtherSettingsFragment.java:20:    protected CharSequence getTitle() {
/fragments\intro\OtherSettingsFragment.java:21:        return getAttachContext().getString(R.string.title_fragment_other_settings);
/fragments\intro\OtherSettingsFragment.java:22:    }
/fragments\intro\OtherSettingsFragment.java:24:    @Nullable
/fragments\intro\OtherSettingsFragment.java:25:    @Override
/fragments\intro\OtherSettingsFragment.java:26:    protected CharSequence getSubtitle() {
/fragments\intro\OtherSettingsFragment.java:27:        return getAttachContext().getString(R.string.subtitle_fragment_other_settings);
/fragments\intro\OtherSettingsFragment.java:28:    }
/fragments\intro\OtherSettingsFragment.java:30:    @Override
/fragments\intro\OtherSettingsFragment.java:31:    protected int getIconColor() {
/fragments\intro\OtherSettingsFragment.java:32:        return ThemeUtils.getColorByAttr(getAttachContext(), R.attr.colorAccent);
/fragments\intro\OtherSettingsFragment.java:33:    }
/fragments\intro\OtherSettingsFragment.java:35:    @Override
/fragments\intro\OtherSettingsFragment.java:36:    protected int getTitleTextColor() {
/fragments\intro\OtherSettingsFragment.java:37:        return ThemeUtils.getColorByAttr(getAttachContext(), R.attr.colorText);
/fragments\intro\OtherSettingsFragment.java:38:    }
/fragments\intro\OtherSettingsFragment.java:40:    @Override
/fragments\intro\OtherSettingsFragment.java:41:    protected int getSubtitleTextColor() {
/fragments\intro\OtherSettingsFragment.java:42:        return ThemeUtils.getColorByAttr(getAttachContext(), R.attr.colorTextSecondary);
/fragments\intro\OtherSettingsFragment.java:43:    }
/fragments\intro\OtherSettingsFragment.java:45:    @Override
/fragments\intro\OtherSettingsFragment.java:46:    protected int getCustomLayoutResId() {
/fragments\intro\OtherSettingsFragment.java:47:        return R.layout.fragment_container;
/fragments\intro\OtherSettingsFragment.java:48:    }
/fragments\intro\OtherSettingsFragment.java:50:    @Override
/fragments\intro\OtherSettingsFragment.java:51:    protected void initCustomLayout(ViewGroup container) {
/fragments\intro\OtherSettingsFragment.java:52:        super.initCustomLayout(container);
/fragments\intro\OtherSettingsFragment.java:53:        getChildFragmentManager().beginTransaction()
/fragments\intro\OtherSettingsFragment.java:54:                .replace(R.id.container, IntroSettingsFragment.newInstance(R.xml.other_preferences, SharedPreferencesUtil.SP_SETTINGS), "IntroSettingsFragment")
/fragments\intro\OtherSettingsFragment.java:55:                .commit();
/fragments\intro\OtherSettingsFragment.java:56:    }
/fragments\intro\OtherSettingsFragment.java:57:}
/fragments\intro\PermissionFragment.java:1:package com.huanchengfly.tieba.post.fragments.intro;
/fragments\intro\PermissionFragment.java:3:import android.os.Build;
/fragments\intro\PermissionFragment.java:4:import android.view.ViewGroup;
/fragments\intro\PermissionFragment.java:6:import androidx.annotation.Nullable;
/fragments\intro\PermissionFragment.java:8:import com.huanchengfly.tieba.post.ui.intro.fragments.BaseIntroFragment;
/fragments\intro\PermissionFragment.java:9:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/fragments\intro\PermissionFragment.java:10:import com.huanchengfly.tieba.post.R;
/fragments\intro\PermissionFragment.java:11:import com.huanchengfly.tieba.post.utils.PermissionUtil;
/fragments\intro\PermissionFragment.java:12:import com.yanzhenjie.permission.runtime.Permission;
/fragments\intro\PermissionFragment.java:14:public class PermissionFragment extends BaseIntroFragment {
/fragments\intro\PermissionFragment.java:15:    @Override
/fragments\intro\PermissionFragment.java:16:    public int getIconRes() {
/fragments\intro\PermissionFragment.java:17:        return R.drawable.ic_round_warning;
/fragments\intro\PermissionFragment.java:18:    }
/fragments\intro\PermissionFragment.java:20:    @Nullable
/fragments\intro\PermissionFragment.java:21:    @Override
/fragments\intro\PermissionFragment.java:22:    protected CharSequence getTitle() {
/fragments\intro\PermissionFragment.java:23:        return getAttachContext().getString(R.string.title_fragment_permission);
/fragments\intro\PermissionFragment.java:24:    }
/fragments\intro\PermissionFragment.java:26:    @Nullable
/fragments\intro\PermissionFragment.java:27:    @Override
/fragments\intro\PermissionFragment.java:28:    protected CharSequence getSubtitle() {
/fragments\intro\PermissionFragment.java:29:        return getAttachContext().getString(R.string.subtitle_fragment_permission);
/fragments\intro\PermissionFragment.java:30:    }
/fragments\intro\PermissionFragment.java:32:    @Override
/fragments\intro\PermissionFragment.java:33:    protected int getIconColor() {
/fragments\intro\PermissionFragment.java:34:        return ThemeUtils.getColorByAttr(getAttachContext(), R.attr.colorAccent);
/fragments\intro\PermissionFragment.java:35:    }
/fragments\intro\PermissionFragment.java:37:    @Override
/fragments\intro\PermissionFragment.java:38:    protected int getTitleTextColor() {
/fragments\intro\PermissionFragment.java:39:        return ThemeUtils.getColorByAttr(getAttachContext(), R.attr.colorText);
/fragments\intro\PermissionFragment.java:40:    }
/fragments\intro\PermissionFragment.java:42:    @Override
/fragments\intro\PermissionFragment.java:43:    protected int getSubtitleTextColor() {
/fragments\intro\PermissionFragment.java:44:        return ThemeUtils.getColorByAttr(getAttachContext(), R.attr.colorTextSecondary);
/fragments\intro\PermissionFragment.java:45:    }
/fragments\intro\PermissionFragment.java:47:    @Override
/fragments\intro\PermissionFragment.java:48:    protected int getCustomLayoutResId() {
/fragments\intro\PermissionFragment.java:49:        return R.layout.layout_fragment_permission;
/fragments\intro\PermissionFragment.java:50:    }
/fragments\intro\PermissionFragment.java:52:    @Override
/fragments\intro\PermissionFragment.java:53:    protected void initCustomLayout(ViewGroup container) {
/fragments\intro\PermissionFragment.java:54:        super.initCustomLayout(container);
/fragments\intro\PermissionFragment.java:55:    }
/fragments\intro\PermissionFragment.java:57:    @Override
/fragments\intro\PermissionFragment.java:58:    public boolean onNext() {
/fragments\intro\PermissionFragment.java:59:        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {
/fragments\intro\PermissionFragment.java:60:            PermissionUtil.askPermission(getAttachContext(), data -> next(),
/fragments\intro\PermissionFragment.java:61:                    new PermissionUtil.Permission(Permission.READ_PHONE_STATE, getString(R.string.tip_permission_phone)),
/fragments\intro\PermissionFragment.java:62:                    new PermissionUtil.Permission(Permission.Group.STORAGE, getString(R.string.tip_permission_storage)));
/fragments\intro\PermissionFragment.java:63:            return true;
/fragments\intro\PermissionFragment.java:64:        }
/fragments\intro\PermissionFragment.java:65:        return false;
/fragments\intro\PermissionFragment.java:66:    }
/fragments\intro\PermissionFragment.java:67:}
/fragments\preference\PreferencesFragment.java:1:package com.huanchengfly.tieba.post.fragments.preference;
/fragments\preference\PreferencesFragment.java:3:import android.annotation.TargetApi;
/fragments\preference\PreferencesFragment.java:4:import android.app.Activity;
/fragments\preference\PreferencesFragment.java:5:import android.content.Context;
/fragments\preference\PreferencesFragment.java:6:import android.os.Build;
/fragments\preference\PreferencesFragment.java:7:import android.os.Bundle;
/fragments\preference\PreferencesFragment.java:9:import androidx.annotation.CallSuper;
/fragments\preference\PreferencesFragment.java:10:import androidx.annotation.NonNull;
/fragments\preference\PreferencesFragment.java:11:import androidx.fragment.app.DialogFragment;
/fragments\preference\PreferencesFragment.java:12:import androidx.preference.EditTextPreference;
/fragments\preference\PreferencesFragment.java:13:import androidx.preference.Preference;
/fragments\preference\PreferencesFragment.java:14:import androidx.preference.PreferenceFragmentCompat;
/fragments\preference\PreferencesFragment.java:16:import com.huanchengfly.tieba.post.components.prefs.TimePickerPreference;
/fragments\preference\PreferencesFragment.java:17:import com.huanchengfly.tieba.post.fragments.TimePreferenceDialogFragmentCompat;
/fragments\preference\PreferencesFragment.java:19:public abstract class PreferencesFragment extends PreferenceFragmentCompat {
/fragments\preference\PreferencesFragment.java:20:    private Context attachContext;
/fragments\preference\PreferencesFragment.java:22:    @TargetApi(23)
/fragments\preference\PreferencesFragment.java:23:    @Override
/fragments\preference\PreferencesFragment.java:24:    public void onAttach(Context context) {
/fragments\preference\PreferencesFragment.java:25:        super.onAttach(context);
/fragments\preference\PreferencesFragment.java:26:        onAttachToContext(context);
/fragments\preference\PreferencesFragment.java:27:    }
/fragments\preference\PreferencesFragment.java:29:    @SuppressWarnings("deprecation")
/fragments\preference\PreferencesFragment.java:30:    @Override
/fragments\preference\PreferencesFragment.java:31:    public void onAttach(Activity activity) {
/fragments\preference\PreferencesFragment.java:32:        super.onAttach(activity);
/fragments\preference\PreferencesFragment.java:33:        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
/fragments\preference\PreferencesFragment.java:34:            onAttachToContext(activity);
/fragments\preference\PreferencesFragment.java:35:        }
/fragments\preference\PreferencesFragment.java:36:    }
/fragments\preference\PreferencesFragment.java:38:    @CallSuper
/fragments\preference\PreferencesFragment.java:39:    private void onAttachToContext(Context context) {
/fragments\preference\PreferencesFragment.java:40:        attachContext = context;
/fragments\preference\PreferencesFragment.java:41:    }
/fragments\preference\PreferencesFragment.java:43:    @NonNull
/fragments\preference\PreferencesFragment.java:44:    protected Context getAttachContext() {
/fragments\preference\PreferencesFragment.java:45:        return attachContext;
/fragments\preference\PreferencesFragment.java:46:    }
/fragments\preference\PreferencesFragment.java:48:    @Override
/fragments\preference\PreferencesFragment.java:49:    public void onDisplayPreferenceDialog(Preference preference) {
/fragments\preference\PreferencesFragment.java:50:        DialogFragment dialogFragment = null;
/fragments\preference\PreferencesFragment.java:51:        if (preference instanceof TimePickerPreference) {
/fragments\preference\PreferencesFragment.java:52:            dialogFragment = new TimePreferenceDialogFragmentCompat();
/fragments\preference\PreferencesFragment.java:53:            Bundle bundle = new Bundle(1);
/fragments\preference\PreferencesFragment.java:54:            bundle.putString("key", preference.getKey());
/fragments\preference\PreferencesFragment.java:55:            dialogFragment.setArguments(bundle);
/fragments\preference\PreferencesFragment.java:56:        } else if (preference instanceof EditTextPreference) {
/fragments\preference\PreferencesFragment.java:57:            dialogFragment = EditTextPreferenceDialogFragment.newInstance(preference.getKey());
/fragments\preference\PreferencesFragment.java:58:        }
/fragments\preference\PreferencesFragment.java:59:        if (dialogFragment != null) {
/fragments\preference\PreferencesFragment.java:60:            dialogFragment.setTargetFragment(this, 0);
/fragments\preference\PreferencesFragment.java:61:            dialogFragment.show(getParentFragmentManager(), "androidx.preference.PreferenceFragment.DIALOG");
/fragments\preference\PreferencesFragment.java:62:        } else {
/fragments\preference\PreferencesFragment.java:63:            super.onDisplayPreferenceDialog(preference);
/fragments\preference\PreferencesFragment.java:64:        }
/fragments\preference\PreferencesFragment.java:65:    }
/fragments\preference\PreferencesFragment.java:66:}
/fragments\preference\EditTextPreferenceDialogFragment.kt:1:package com.huanchengfly.tieba.post.fragments.preference
/fragments\preference\EditTextPreferenceDialogFragment.kt:3:import android.os.Bundle
/fragments\preference\EditTextPreferenceDialogFragment.kt:4:import android.view.View
/fragments\preference\EditTextPreferenceDialogFragment.kt:5:import androidx.preference.EditTextPreferenceDialogFragmentCompat
/fragments\preference\EditTextPreferenceDialogFragment.kt:6:import androidx.preference.PreferenceDialogFragmentCompat
/fragments\preference\EditTextPreferenceDialogFragment.kt:7:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils
/fragments\preference\EditTextPreferenceDialogFragment.kt:9:class EditTextPreferenceDialogFragment : EditTextPreferenceDialogFragmentCompat() {
/fragments\preference\EditTextPreferenceDialogFragment.kt:10:    companion object {
/fragments\preference\EditTextPreferenceDialogFragment.kt:11:        fun newInstance(key: String): EditTextPreferenceDialogFragment {
/fragments\preference\EditTextPreferenceDialogFragment.kt:12:            val fragment = EditTextPreferenceDialogFragment()
/fragments\preference\EditTextPreferenceDialogFragment.kt:13:            val b = Bundle(1)
/fragments\preference\EditTextPreferenceDialogFragment.kt:14:            b.putString(PreferenceDialogFragmentCompat.ARG_KEY, key)
/fragments\preference\EditTextPreferenceDialogFragment.kt:15:            fragment.arguments = b
/fragments\preference\EditTextPreferenceDialogFragment.kt:16:            return fragment
/fragments\preference\EditTextPreferenceDialogFragment.kt:17:        }
/fragments\preference\EditTextPreferenceDialogFragment.kt:18:    }
/fragments\preference\EditTextPreferenceDialogFragment.kt:20:    override fun onBindDialogView(view: View) {
/fragments\preference\EditTextPreferenceDialogFragment.kt:21:        super.onBindDialogView(view)
/fragments\preference\EditTextPreferenceDialogFragment.kt:22:        ThemeUtils.refreshUI(view.context)
/fragments\preference\EditTextPreferenceDialogFragment.kt:23:    }
/fragments\preference\EditTextPreferenceDialogFragment.kt:24:}/interfaces\BackHandledInterface.java:1:package com.huanchengfly.tieba.post.interfaces;
/interfaces\BackHandledInterface.java:3:public interface BackHandledInterface {
/interfaces\BackHandledInterface.java:4:    boolean onBackPressed();
/interfaces\BackHandledInterface.java:5:}
/interfaces\InitMenuCallback.java:1:package com.huanchengfly.tieba.post.interfaces;
/interfaces\InitMenuCallback.java:3:import android.view.Menu;
/interfaces\InitMenuCallback.java:5:public interface InitMenuCallback {
/interfaces\InitMenuCallback.java:6:    void init(Menu menu);
/interfaces\InitMenuCallback.java:7:}
/interfaces\InsertPhotoListener.java:1:package com.huanchengfly.tieba.post.interfaces;
/interfaces\InsertPhotoListener.java:3:import com.huanchengfly.tieba.post.api.models.UploadResultBean;
/interfaces\InsertPhotoListener.java:5:public interface InsertPhotoListener {
/interfaces\InsertPhotoListener.java:6:    void onInsert(UploadResultBean.UploadInfo uploadInfo);
/interfaces\InsertPhotoListener.java:7:}
/interfaces\OnChooseListener.java:1:package com.huanchengfly.tieba.post.interfaces;
/interfaces\OnChooseListener.java:3:public interface OnChooseListener {
/interfaces\OnChooseListener.java:4:    void onChoose(int position, String title);
/interfaces\OnChooseListener.java:5:}
/interfaces\OnClickListener.java:1:package com.huanchengfly.tieba.post.interfaces;
/interfaces\OnClickListener.java:3:public interface OnClickListener {
/interfaces\OnClickListener.java:4:    void onClick(int position);
/interfaces\OnClickListener.java:5:}
/interfaces\OnDeleteListener.java:1:package com.huanchengfly.tieba.post.interfaces;
/interfaces\OnDeleteListener.java:3:import android.view.View;
/interfaces\OnDeleteListener.java:5:public interface OnDeleteListener {
/interfaces\OnDeleteListener.java:6:    void onDelete(View view, int position);
/interfaces\OnDeleteListener.java:7:}
/interfaces\OnDeniedCallback.java:1:package com.huanchengfly.tieba.post.interfaces;
/interfaces\OnDeniedCallback.java:3:public interface OnDeniedCallback {
/interfaces\OnDeniedCallback.java:4:    void onDenied(boolean isForever);
/interfaces\OnDeniedCallback.java:5:}
/interfaces\OnDispatchTouchEvent.java:1:package com.huanchengfly.tieba.post.interfaces;
/interfaces\OnDispatchTouchEvent.java:3:import android.view.MotionEvent;
/interfaces\OnDispatchTouchEvent.java:5:public interface OnDispatchTouchEvent {
/interfaces\OnDispatchTouchEvent.java:6:    void onDispatchTouchEvent(MotionEvent event);
/interfaces\OnDispatchTouchEvent.java:7:}
/interfaces\OnGrantedCallback.java:1:package com.huanchengfly.tieba.post.interfaces;
/interfaces\OnGrantedCallback.java:3:public interface OnGrantedCallback {
/interfaces\OnGrantedCallback.java:4:    void onGranted(boolean isForever);
/interfaces\OnGrantedCallback.java:5:}
/interfaces\OnItemClickListener.java:1:package com.huanchengfly.tieba.post.interfaces;
/interfaces\OnItemClickListener.java:3:import android.view.View;
/interfaces\OnItemClickListener.java:5:public interface OnItemClickListener<T> {
/interfaces\OnItemClickListener.java:6:    void onClick(View itemView, T t, int position, int viewType);
/interfaces\OnItemClickListener.java:7:}
/interfaces\OnItemLongClickListener.java:1:package com.huanchengfly.tieba.post.interfaces;
/interfaces\OnItemLongClickListener.java:3:import android.view.View;
/interfaces\OnItemLongClickListener.java:5:public interface OnItemLongClickListener<T> {
/interfaces\OnItemLongClickListener.java:6:    boolean onLongClick(View itemView, T t, int position, int viewType);
/interfaces\OnItemLongClickListener.java:7:}
/interfaces\OnLoadMoreListener.java:1:package com.huanchengfly.tieba.post.interfaces;
/interfaces\OnLoadMoreListener.java:3:public interface OnLoadMoreListener {
/interfaces\OnLoadMoreListener.java:4:    void onLoadNext();
/interfaces\OnLoadMoreListener.java:6:    void onLoadPrev();
/interfaces\OnLoadMoreListener.java:7:}/interfaces\OnOrderSwitchListener.java:1:package com.huanchengfly.tieba.post.interfaces;
/interfaces\OnOrderSwitchListener.java:3:public interface OnOrderSwitchListener {
/interfaces\OnOrderSwitchListener.java:4:    void onSwitch(int type, int value);
/interfaces\OnOrderSwitchListener.java:5:}
/interfaces\OnPhotoErrorListener.java:1:package com.huanchengfly.tieba.post.interfaces;
/interfaces\OnPhotoErrorListener.java:3:public interface OnPhotoErrorListener {
/interfaces\OnPhotoErrorListener.java:4:    void onError(Exception e);
/interfaces\OnPhotoErrorListener.java:5:}
/interfaces\OnReceivedTitleListener.java:1:package com.huanchengfly.tieba.post.interfaces;
/interfaces\OnReceivedTitleListener.java:3:import android.webkit.WebView;
/interfaces\OnReceivedTitleListener.java:5:public interface OnReceivedTitleListener {
/interfaces\OnReceivedTitleListener.java:6:    void onReceivedTitle(WebView view, String title, String url);
/interfaces\OnReceivedTitleListener.java:7:}
/interfaces\OnSubmitListener.java:1:package com.huanchengfly.tieba.post.interfaces;
/interfaces\OnSubmitListener.java:3:public interface OnSubmitListener {
/interfaces\OnSubmitListener.java:4:    void onSubmit(String content);
/interfaces\OnSubmitListener.java:5:}/interfaces\OnSwitchListener.java:1:package com.huanchengfly.tieba.post.interfaces;
/interfaces\OnSwitchListener.java:3:public interface OnSwitchListener {
/interfaces\OnSwitchListener.java:4:    void onSwitch(int which);
/interfaces\OnSwitchListener.java:5:}
/interfaces\OnSwitchTabListener.java:1:package com.huanchengfly.tieba.post.interfaces;
/interfaces\OnSwitchTabListener.java:3:public interface OnSwitchTabListener {
/interfaces\OnSwitchTabListener.java:4:    void onSwitchTab(int which);
/interfaces\OnSwitchTabListener.java:5:}
/interfaces\Refreshable.java:1:package com.huanchengfly.tieba.post.interfaces;
/interfaces\Refreshable.java:3:public interface Refreshable {
/interfaces\Refreshable.java:4:    void onRefresh();
/interfaces\Refreshable.java:5:}
/interfaces\ReplyContentCallback.java:1:package com.huanchengfly.tieba.post.interfaces;
/interfaces\ReplyContentCallback.java:3:public interface ReplyContentCallback {
/interfaces\ReplyContentCallback.java:4:    void onSuccess(String data);
/interfaces\ReplyContentCallback.java:6:    void onStart(int total);
/interfaces\ReplyContentCallback.java:8:    void onProgress(int current, int total);
/interfaces\ReplyContentCallback.java:10:    void onFailure(String error);
/interfaces\ReplyContentCallback.java:11:}
/interfaces\ScrollTopable.java:1:package com.huanchengfly.tieba.post.interfaces;
/interfaces\ScrollTopable.java:3:public interface ScrollTopable {
/interfaces\ScrollTopable.java:4:    void scrollToTop();
/interfaces\ScrollTopable.java:5:}
/interfaces\UploadCallback.java:1:package com.huanchengfly.tieba.post.interfaces;
/interfaces\UploadCallback.java:3:import com.huanchengfly.tieba.post.models.PhotoInfoBean;
/interfaces\UploadCallback.java:5:import java.util.List;
/interfaces\UploadCallback.java:7:public interface UploadCallback {
/interfaces\UploadCallback.java:8:    void onSuccess(List<PhotoInfoBean> photoInfoBeans);
/interfaces\UploadCallback.java:10:    void onStart(int total);
/interfaces\UploadCallback.java:12:    void onProgress(int current, int total);
/interfaces\UploadCallback.java:14:    void onFailure(String error);
/interfaces\UploadCallback.java:15:}
/interfaces\WebViewListener.java:1:package com.huanchengfly.tieba.post.interfaces;
/interfaces\WebViewListener.java:3:import android.graphics.Bitmap;
/interfaces\WebViewListener.java:4:import android.webkit.WebView;
/interfaces\WebViewListener.java:6:public interface WebViewListener {
/interfaces\WebViewListener.java:7:    void onPageFinished(WebView view, String url);
/interfaces\WebViewListener.java:9:    void onPageStarted(WebView view, String url, Bitmap favicon);
/interfaces\WebViewListener.java:10:}
/models\CollectInfoBean.java:1:package com.huanchengfly.tieba.post.models;
/models\CollectInfoBean.java:3:public class CollectInfoBean {
/models\CollectInfoBean.java:4:    private String title;
/models\CollectInfoBean.java:5:    private String subtitle;
/models\CollectInfoBean.java:6:    private long tid;
/models\CollectInfoBean.java:7:    private boolean hasUpdate;
/models\CollectInfoBean.java:8:    private String url;
/models\CollectInfoBean.java:10:    public String getTitle() {
/models\CollectInfoBean.java:11:        return title;
/models\CollectInfoBean.java:12:    }
/models\CollectInfoBean.java:14:    public CollectInfoBean setTitle(String title) {
/models\CollectInfoBean.java:15:        this.title = title;
/models\CollectInfoBean.java:16:        return this;
/models\CollectInfoBean.java:17:    }
/models\CollectInfoBean.java:19:    public String getSubtitle() {
/models\CollectInfoBean.java:20:        return subtitle;
/models\CollectInfoBean.java:21:    }
/models\CollectInfoBean.java:23:    public CollectInfoBean setSubtitle(String subtitle) {
/models\CollectInfoBean.java:24:        this.subtitle = subtitle;
/models\CollectInfoBean.java:25:        return this;
/models\CollectInfoBean.java:26:    }
/models\CollectInfoBean.java:28:    public long getTid() {
/models\CollectInfoBean.java:29:        return tid;
/models\CollectInfoBean.java:30:    }
/models\CollectInfoBean.java:32:    public CollectInfoBean setTid(long tid) {
/models\CollectInfoBean.java:33:        this.tid = tid;
/models\CollectInfoBean.java:34:        return this;
/models\CollectInfoBean.java:35:    }
/models\CollectInfoBean.java:37:    public boolean isHasUpdate() {
/models\CollectInfoBean.java:38:        return hasUpdate;
/models\CollectInfoBean.java:39:    }
/models\CollectInfoBean.java:41:    public CollectInfoBean setHasUpdate(boolean hasUpdate) {
/models\CollectInfoBean.java:42:        this.hasUpdate = hasUpdate;
/models\CollectInfoBean.java:43:        return this;
/models\CollectInfoBean.java:44:    }
/models\CollectInfoBean.java:46:    public String getUrl() {
/models\CollectInfoBean.java:47:        return url;
/models\CollectInfoBean.java:48:    }
/models\CollectInfoBean.java:50:    public CollectInfoBean setUrl(String url) {
/models\CollectInfoBean.java:51:        this.url = url;
/models\CollectInfoBean.java:52:        return this;
/models\CollectInfoBean.java:53:    }
/models\CollectInfoBean.java:54:}
/models\DislikeBean.java:1:package com.huanchengfly.tieba.post.models;
/models\DislikeBean.java:3:import com.google.gson.annotations.SerializedName;
/models\DislikeBean.java:5:public class DislikeBean extends BaseBean {
/models\DislikeBean.java:6:    @SerializedName("tid")
/models\DislikeBean.java:7:    private String threadId;
/models\DislikeBean.java:8:    @SerializedName("dislike_ids")
/models\DislikeBean.java:9:    private String dislikeIds;
/models\DislikeBean.java:10:    @SerializedName("fid")
/models\DislikeBean.java:11:    private String forumId;
/models\DislikeBean.java:12:    @SerializedName("click_time")
/models\DislikeBean.java:13:    private long clickTime;
/models\DislikeBean.java:14:    private String extra;
/models\DislikeBean.java:16:    public DislikeBean(String threadId, String dislikeIds, String forumId, long clickTime, String extra) {
/models\DislikeBean.java:17:        this.threadId = threadId;
/models\DislikeBean.java:18:        this.dislikeIds = dislikeIds;
/models\DislikeBean.java:19:        this.forumId = forumId;
/models\DislikeBean.java:20:        this.clickTime = clickTime;
/models\DislikeBean.java:21:        this.extra = extra;
/models\DislikeBean.java:22:    }
/models\DislikeBean.java:24:    public String getThreadId() {
/models\DislikeBean.java:25:        return threadId;
/models\DislikeBean.java:26:    }
/models\DislikeBean.java:28:    public DislikeBean setThreadId(String threadId) {
/models\DislikeBean.java:29:        this.threadId = threadId;
/models\DislikeBean.java:30:        return this;
/models\DislikeBean.java:31:    }
/models\DislikeBean.java:33:    public String getDislikeIds() {
/models\DislikeBean.java:34:        return dislikeIds;
/models\DislikeBean.java:35:    }
/models\DislikeBean.java:37:    public DislikeBean setDislikeIds(String dislikeIds) {
/models\DislikeBean.java:38:        this.dislikeIds = dislikeIds;
/models\DislikeBean.java:39:        return this;
/models\DislikeBean.java:40:    }
/models\DislikeBean.java:42:    public String getForumId() {
/models\DislikeBean.java:43:        return forumId;
/models\DislikeBean.java:44:    }
/models\DislikeBean.java:46:    public DislikeBean setForumId(String forumId) {
/models\DislikeBean.java:47:        this.forumId = forumId;
/models\DislikeBean.java:48:        return this;
/models\DislikeBean.java:49:    }
/models\DislikeBean.java:51:    public long getClickTime() {
/models\DislikeBean.java:52:        return clickTime;
/models\DislikeBean.java:53:    }
/models\DislikeBean.java:55:    public DislikeBean setClickTime(long clickTime) {
/models\DislikeBean.java:56:        this.clickTime = clickTime;
/models\DislikeBean.java:57:        return this;
/models\DislikeBean.java:58:    }
/models\DislikeBean.java:60:    public String getExtra() {
/models\DislikeBean.java:61:        return extra;
/models\DislikeBean.java:62:    }
/models\DislikeBean.java:64:    public DislikeBean setExtra(String extra) {
/models\DislikeBean.java:65:        this.extra = extra;
/models\DislikeBean.java:66:        return this;
/models\DislikeBean.java:67:    }
/models\DislikeBean.java:68:}
/models\ErrorBean.java:1:package com.huanchengfly.tieba.post.models;
/models\ErrorBean.java:3:import com.google.gson.annotations.SerializedName;
/models\ErrorBean.java:5:public class ErrorBean extends BaseBean {
/models\ErrorBean.java:6:    @SerializedName("error_code")
/models\ErrorBean.java:7:    private String errorCode;
/models\ErrorBean.java:8:    @SerializedName("error_msg")
/models\ErrorBean.java:9:    private String errorMsg;
/models\ErrorBean.java:11:    public String getErrorCode() {
/models\ErrorBean.java:12:        return errorCode;
/models\ErrorBean.java:13:    }
/models\ErrorBean.java:15:    public void setErrorCode(String errorCode) {
/models\ErrorBean.java:16:        this.errorCode = errorCode;
/models\ErrorBean.java:17:    }
/models\ErrorBean.java:19:    public String getErrorMsg() {
/models\ErrorBean.java:20:        return errorMsg;
/models\ErrorBean.java:21:    }
/models\ErrorBean.java:23:    public void setErrorMsg(String errorMsg) {
/models\ErrorBean.java:24:        this.errorMsg = errorMsg;
/models\ErrorBean.java:25:    }
/models\ErrorBean.java:26:}/models\ForumInfoBean.java:1:package com.huanchengfly.tieba.post.models;
/models\ForumInfoBean.java:3:public class ForumInfoBean {
/models\ForumInfoBean.java:4:    private String id;
/models\ForumInfoBean.java:5:    private String name;
/models\ForumInfoBean.java:6:    private String avatar;
/models\ForumInfoBean.java:8:    public String getId() {
/models\ForumInfoBean.java:9:        return id;
/models\ForumInfoBean.java:10:    }
/models\ForumInfoBean.java:12:    public String getName() {
/models\ForumInfoBean.java:13:        return name;
/models\ForumInfoBean.java:14:    }
/models\ForumInfoBean.java:16:    public String getAvatar() {
/models\ForumInfoBean.java:17:        return avatar;
/models\ForumInfoBean.java:18:    }
/models\ForumInfoBean.java:19:}
/models\ImageInfoBean.java:1:package com.huanchengfly.tieba.post.models;
/models\ImageInfoBean.java:3:import android.os.Parcel;
/models\ImageInfoBean.java:4:import android.os.Parcelable;
/models\ImageInfoBean.java:6:import java.util.ArrayList;
/models\ImageInfoBean.java:7:import java.util.List;
/models\ImageInfoBean.java:9:public class ImageInfoBean extends BaseBean implements Parcelable {
/models\ImageInfoBean.java:10:    public static final Creator<ImageInfoBean> CREATOR = new Creator<ImageInfoBean>() {
/models\ImageInfoBean.java:11:        @Override
/models\ImageInfoBean.java:12:        public ImageInfoBean createFromParcel(Parcel in) {
/models\ImageInfoBean.java:13:            return new ImageInfoBean(in);
/models\ImageInfoBean.java:14:        }
/models\ImageInfoBean.java:16:        @Override
/models\ImageInfoBean.java:17:        public ImageInfoBean[] newArray(int size) {
/models\ImageInfoBean.java:18:            return new ImageInfoBean[size];
/models\ImageInfoBean.java:19:        }
/models\ImageInfoBean.java:20:    };
/models\ImageInfoBean.java:21:    private String url;
/models\ImageInfoBean.java:22:    private String size;
/models\ImageInfoBean.java:23:    private boolean longPic;
/models\ImageInfoBean.java:25:    public ImageInfoBean(String url, String size, boolean longPic) {
/models\ImageInfoBean.java:26:        this.url = url;
/models\ImageInfoBean.java:27:        this.size = size;
/models\ImageInfoBean.java:28:        this.longPic = longPic;
/models\ImageInfoBean.java:29:    }
/models\ImageInfoBean.java:31:    public ImageInfoBean(String url, boolean longPic) {
/models\ImageInfoBean.java:32:        this(url, "", longPic);
/models\ImageInfoBean.java:33:    }
/models\ImageInfoBean.java:35:    public ImageInfoBean(String url, String size) {
/models\ImageInfoBean.java:36:        this(url, size, false);
/models\ImageInfoBean.java:37:    }
/models\ImageInfoBean.java:39:    public ImageInfoBean(String url) {
/models\ImageInfoBean.java:40:        this(url, "", false);
/models\ImageInfoBean.java:41:    }
/models\ImageInfoBean.java:43:    protected ImageInfoBean(Parcel in) {
/models\ImageInfoBean.java:44:        url = in.readString();
/models\ImageInfoBean.java:45:        size = in.readString();
/models\ImageInfoBean.java:46:        longPic = in.readInt() != 0;
/models\ImageInfoBean.java:47:    }
/models\ImageInfoBean.java:49:    public static List<ImageInfoBean> asList(List<String> strings) {
/models\ImageInfoBean.java:50:        List<ImageInfoBean> list = new ArrayList<>();
/models\ImageInfoBean.java:51:        for (String url : strings) {
/models\ImageInfoBean.java:52:            list.add(new ImageInfoBean(url, true));
/models\ImageInfoBean.java:53:        }
/models\ImageInfoBean.java:54:        return list;
/models\ImageInfoBean.java:55:    }
/models\ImageInfoBean.java:57:    public String getUrl() {
/models\ImageInfoBean.java:58:        return url;
/models\ImageInfoBean.java:59:    }
/models\ImageInfoBean.java:61:    public ImageInfoBean setUrl(String url) {
/models\ImageInfoBean.java:62:        this.url = url;
/models\ImageInfoBean.java:63:        return this;
/models\ImageInfoBean.java:64:    }
/models\ImageInfoBean.java:66:    public boolean isLongPic() {
/models\ImageInfoBean.java:67:        return longPic;
/models\ImageInfoBean.java:68:    }
/models\ImageInfoBean.java:70:    public ImageInfoBean setLongPic(boolean longPic) {
/models\ImageInfoBean.java:71:        this.longPic = longPic;
/models\ImageInfoBean.java:72:        return this;
/models\ImageInfoBean.java:73:    }
/models\ImageInfoBean.java:75:    public String getSize() {
/models\ImageInfoBean.java:76:        return size;
/models\ImageInfoBean.java:77:    }
/models\ImageInfoBean.java:79:    public ImageInfoBean setSize(String size) {
/models\ImageInfoBean.java:80:        this.size = size;
/models\ImageInfoBean.java:81:        return this;
/models\ImageInfoBean.java:82:    }
/models\ImageInfoBean.java:84:    @Override
/models\ImageInfoBean.java:85:    public int describeContents() {
/models\ImageInfoBean.java:86:        return 0;
/models\ImageInfoBean.java:87:    }
/models\ImageInfoBean.java:89:    @Override
/models\ImageInfoBean.java:90:    public void writeToParcel(Parcel dest, int flags) {
/models\ImageInfoBean.java:91:        dest.writeString(url);
/models\ImageInfoBean.java:92:        dest.writeString(size);
/models\ImageInfoBean.java:93:        dest.writeInt(longPic ? 1 : 0);
/models\ImageInfoBean.java:94:    }
/models\ImageInfoBean.java:95:}
/models\MyInfoBean.java:1:package com.huanchengfly.tieba.post.models;
/models\MyInfoBean.java:3:import com.google.gson.annotations.SerializedName;
/models\MyInfoBean.java:4:import com.huanchengfly.tieba.post.api.models.web.WebBaseBean;
/models\MyInfoBean.java:6:public class MyInfoBean extends WebBaseBean<MyInfoBean.MyInfoDataBean> {
/models\MyInfoBean.java:7:    public class MyInfoDataBean {
/models\MyInfoBean.java:8:        @SerializedName("itb_tbs")
/models\MyInfoBean.java:9:        public String itbTbs;
/models\MyInfoBean.java:10:        public String tbs;
/models\MyInfoBean.java:11:        @SerializedName("portrait_url")
/models\MyInfoBean.java:12:        public String avatarUrl;
/models\MyInfoBean.java:13:        public long uid;
/models\MyInfoBean.java:14:        @SerializedName("user_sex")
/models\MyInfoBean.java:15:        public int userSex;
/models\MyInfoBean.java:16:        @SerializedName("name_show")
/models\MyInfoBean.java:17:        public String showName;
/models\MyInfoBean.java:18:        public String intro;
/models\MyInfoBean.java:19:        public String name;
/models\MyInfoBean.java:20:        @SerializedName("concern_num")
/models\MyInfoBean.java:21:        public String concernNum;
/models\MyInfoBean.java:22:        @SerializedName("fans_num")
/models\MyInfoBean.java:23:        public String fansNum;
/models\MyInfoBean.java:24:        @SerializedName("like_forum_num")
/models\MyInfoBean.java:25:        public String likeForumNum;
/models\MyInfoBean.java:26:        @SerializedName("post_num")
/models\MyInfoBean.java:27:        public String postNum;
/models\MyInfoBean.java:28:        @SerializedName("is_login")
/models\MyInfoBean.java:29:        public boolean isLogin;
/models\MyInfoBean.java:31:        public String getIntro() {
/models\MyInfoBean.java:32:            return intro;
/models\MyInfoBean.java:33:        }
/models\MyInfoBean.java:35:        public MyInfoDataBean setIntro(String intro) {
/models\MyInfoBean.java:36:            this.intro = intro;
/models\MyInfoBean.java:37:            return this;
/models\MyInfoBean.java:38:        }
/models\MyInfoBean.java:40:        public String getItbTbs() {
/models\MyInfoBean.java:41:            return itbTbs;
/models\MyInfoBean.java:42:        }
/models\MyInfoBean.java:44:        public String getTbs() {
/models\MyInfoBean.java:45:            return tbs;
/models\MyInfoBean.java:46:        }
/models\MyInfoBean.java:48:        public String getAvatarUrl() {
/models\MyInfoBean.java:49:            return avatarUrl;
/models\MyInfoBean.java:50:        }
/models\MyInfoBean.java:52:        public long getUid() {
/models\MyInfoBean.java:53:            return uid;
/models\MyInfoBean.java:54:        }
/models\MyInfoBean.java:56:        public int getUserSex() {
/models\MyInfoBean.java:57:            return userSex;
/models\MyInfoBean.java:58:        }
/models\MyInfoBean.java:60:        public String getShowName() {
/models\MyInfoBean.java:61:            return showName;
/models\MyInfoBean.java:62:        }
/models\MyInfoBean.java:64:        public String getName() {
/models\MyInfoBean.java:65:            return name;
/models\MyInfoBean.java:66:        }
/models\MyInfoBean.java:68:        public String getConcernNum() {
/models\MyInfoBean.java:69:            return concernNum;
/models\MyInfoBean.java:70:        }
/models\MyInfoBean.java:72:        public String getFansNum() {
/models\MyInfoBean.java:73:            return fansNum;
/models\MyInfoBean.java:74:        }
/models\MyInfoBean.java:76:        public String getLikeForumNum() {
/models\MyInfoBean.java:77:            return likeForumNum;
/models\MyInfoBean.java:78:        }
/models\MyInfoBean.java:80:        public String getPostNum() {
/models\MyInfoBean.java:81:            return postNum;
/models\MyInfoBean.java:82:        }
/models\MyInfoBean.java:84:        public boolean isLogin() {
/models\MyInfoBean.java:85:            return isLogin;
/models\MyInfoBean.java:86:        }
/models\MyInfoBean.java:87:    }
/models\MyInfoBean.java:88:}/models\PermissionBean.java:1:package com.huanchengfly.tieba.post.models;
/models\PermissionBean.java:3:import androidx.annotation.DrawableRes;
/models\PermissionBean.java:5:public class PermissionBean {
/models\PermissionBean.java:6:    private int id;
/models\PermissionBean.java:7:    private String data;
/models\PermissionBean.java:8:    private String title;
/models\PermissionBean.java:9:    private int icon;
/models\PermissionBean.java:11:    public PermissionBean(int id, String data, String title, @DrawableRes int icon) {
/models\PermissionBean.java:12:        this.id = id;
/models\PermissionBean.java:13:        this.data = data;
/models\PermissionBean.java:14:        this.title = title;
/models\PermissionBean.java:15:        this.icon = icon;
/models\PermissionBean.java:16:    }
/models\PermissionBean.java:18:    public int getId() {
/models\PermissionBean.java:19:        return id;
/models\PermissionBean.java:20:    }
/models\PermissionBean.java:22:    public PermissionBean setId(int id) {
/models\PermissionBean.java:23:        this.id = id;
/models\PermissionBean.java:24:        return this;
/models\PermissionBean.java:25:    }
/models\PermissionBean.java:27:    public String getData() {
/models\PermissionBean.java:28:        return data;
/models\PermissionBean.java:29:    }
/models\PermissionBean.java:31:    public PermissionBean setData(String data) {
/models\PermissionBean.java:32:        this.data = data;
/models\PermissionBean.java:33:        return this;
/models\PermissionBean.java:34:    }
/models\PermissionBean.java:36:    public String getTitle() {
/models\PermissionBean.java:37:        return title;
/models\PermissionBean.java:38:    }
/models\PermissionBean.java:40:    public PermissionBean setTitle(String title) {
/models\PermissionBean.java:41:        this.title = title;
/models\PermissionBean.java:42:        return this;
/models\PermissionBean.java:43:    }
/models\PermissionBean.java:45:    public int getIcon() {
/models\PermissionBean.java:46:        return icon;
/models\PermissionBean.java:47:    }
/models\PermissionBean.java:49:    public PermissionBean setIcon(@DrawableRes int icon) {
/models\PermissionBean.java:50:        this.icon = icon;
/models\PermissionBean.java:51:        return this;
/models\PermissionBean.java:52:    }
/models\PermissionBean.java:53:}
/models\PhotoInfoBean.java:1:package com.huanchengfly.tieba.post.models;
/models\PhotoInfoBean.java:3:import android.content.Context;
/models\PhotoInfoBean.java:4:import android.net.Uri;
/models\PhotoInfoBean.java:6:import androidx.annotation.Nullable;
/models\PhotoInfoBean.java:8:import com.huanchengfly.tieba.post.api.models.UploadResultBean;
/models\PhotoInfoBean.java:9:import com.huanchengfly.tieba.post.api.models.WebUploadPicBean;
/models\PhotoInfoBean.java:10:import com.huanchengfly.tieba.post.utils.FileUtil;
/models\PhotoInfoBean.java:12:import java.io.File;
/models\PhotoInfoBean.java:14:public class PhotoInfoBean {
/models\PhotoInfoBean.java:15:    public static final String TAG = "PhotoInfoBean";
/models\PhotoInfoBean.java:16:    private String filePath;
/models\PhotoInfoBean.java:17:    private Uri fileUri;
/models\PhotoInfoBean.java:18:    private File file;
/models\PhotoInfoBean.java:19:    private WebUploadPicBean webUploadPicBean;
/models\PhotoInfoBean.java:20:    private UploadResultBean uploadResult;
/models\PhotoInfoBean.java:22:    public PhotoInfoBean(Context context, Uri fileUri) {
/models\PhotoInfoBean.java:23:        this(context, fileUri, null);
/models\PhotoInfoBean.java:24:    }
/models\PhotoInfoBean.java:26:    public PhotoInfoBean(Context context, Uri fileUri, UploadResultBean uploadResult) {
/models\PhotoInfoBean.java:27:        this.fileUri = fileUri;
/models\PhotoInfoBean.java:28:        this.uploadResult = uploadResult;
/models\PhotoInfoBean.java:29:        try {
/models\PhotoInfoBean.java:30:            this.file = new File(FileUtil.getRealPathFromUri(context, fileUri));
/models\PhotoInfoBean.java:31:        } catch (Exception e) {
/models\PhotoInfoBean.java:32:            e.printStackTrace();
/models\PhotoInfoBean.java:33:        }
/models\PhotoInfoBean.java:34:    }
/models\PhotoInfoBean.java:36:    public WebUploadPicBean getWebUploadPicBean() {
/models\PhotoInfoBean.java:37:        return webUploadPicBean;
/models\PhotoInfoBean.java:38:    }
/models\PhotoInfoBean.java:40:    public void setWebUploadPicBean(WebUploadPicBean webUploadPicBean) {
/models\PhotoInfoBean.java:41:        this.webUploadPicBean = webUploadPicBean;
/models\PhotoInfoBean.java:42:    }
/models\PhotoInfoBean.java:44:    public Uri getFileUri() {
/models\PhotoInfoBean.java:45:        return fileUri;
/models\PhotoInfoBean.java:46:    }
/models\PhotoInfoBean.java:48:    public PhotoInfoBean setFileUri(Uri fileUri) {
/models\PhotoInfoBean.java:49:        this.fileUri = fileUri;
/models\PhotoInfoBean.java:50:        return this;
/models\PhotoInfoBean.java:51:    }
/models\PhotoInfoBean.java:53:    @Nullable
/models\PhotoInfoBean.java:54:    public File getFile() {
/models\PhotoInfoBean.java:55:        return file;
/models\PhotoInfoBean.java:56:    }
/models\PhotoInfoBean.java:58:    public UploadResultBean getUploadResult() {
/models\PhotoInfoBean.java:59:        return uploadResult;
/models\PhotoInfoBean.java:60:    }
/models\PhotoInfoBean.java:62:    public PhotoInfoBean setUploadResult(UploadResultBean uploadResult) {
/models\PhotoInfoBean.java:63:        this.uploadResult = uploadResult;
/models\PhotoInfoBean.java:64:        return this;
/models\PhotoInfoBean.java:65:    }
/models\PhotoInfoBean.java:66:}
/models\PhotoViewBean.java:1:package com.huanchengfly.tieba.post.models;
/models\PhotoViewBean.java:3:import android.os.Parcel;
/models\PhotoViewBean.java:4:import android.os.Parcelable;
/models\PhotoViewBean.java:6:public class PhotoViewBean extends BaseBean implements Parcelable {
/models\PhotoViewBean.java:7:    public static final Creator<PhotoViewBean> CREATOR = new Creator<PhotoViewBean>() {
/models\PhotoViewBean.java:8:        @Override
/models\PhotoViewBean.java:9:        public PhotoViewBean createFromParcel(Parcel in) {
/models\PhotoViewBean.java:10:            return new PhotoViewBean(in);
/models\PhotoViewBean.java:11:        }
/models\PhotoViewBean.java:13:        @Override
/models\PhotoViewBean.java:14:        public PhotoViewBean[] newArray(int size) {
/models\PhotoViewBean.java:15:            return new PhotoViewBean[size];
/models\PhotoViewBean.java:16:        }
/models\PhotoViewBean.java:17:    };
/models\PhotoViewBean.java:19:    private String url;
/models\PhotoViewBean.java:20:    private String originUrl;
/models\PhotoViewBean.java:21:    private boolean longPic;
/models\PhotoViewBean.java:22:    private String index;
/models\PhotoViewBean.java:23:    private boolean gif;
/models\PhotoViewBean.java:25:    public PhotoViewBean(String url, String originUrl, boolean longPic, String index, boolean gif) {
/models\PhotoViewBean.java:26:        this.url = url;
/models\PhotoViewBean.java:27:        this.originUrl = originUrl;
/models\PhotoViewBean.java:28:        this.longPic = longPic;
/models\PhotoViewBean.java:29:        this.index = index;
/models\PhotoViewBean.java:30:        this.gif = gif;
/models\PhotoViewBean.java:31:    }
/models\PhotoViewBean.java:33:    public PhotoViewBean(String url, String originUrl, boolean longPic, String index) {
/models\PhotoViewBean.java:34:        this(url, originUrl, longPic, index, false);
/models\PhotoViewBean.java:35:    }
/models\PhotoViewBean.java:37:    public PhotoViewBean(String url, String originUrl, boolean longPic) {
/models\PhotoViewBean.java:38:        this(url, originUrl, longPic, null);
/models\PhotoViewBean.java:39:    }
/models\PhotoViewBean.java:41:    public PhotoViewBean(String url, boolean longPic) {
/models\PhotoViewBean.java:42:        this(url, url, longPic);
/models\PhotoViewBean.java:43:    }
/models\PhotoViewBean.java:45:    public PhotoViewBean(String url) {
/models\PhotoViewBean.java:46:        this(url, true);
/models\PhotoViewBean.java:47:    }
/models\PhotoViewBean.java:49:    protected PhotoViewBean(Parcel in) {
/models\PhotoViewBean.java:50:        url = in.readString();
/models\PhotoViewBean.java:51:        originUrl = in.readString();
/models\PhotoViewBean.java:52:        longPic = in.readInt() != 0;
/models\PhotoViewBean.java:53:        index = in.readString();
/models\PhotoViewBean.java:54:    }
/models\PhotoViewBean.java:56:    public boolean isGif() {
/models\PhotoViewBean.java:57:        return gif;
/models\PhotoViewBean.java:58:    }
/models\PhotoViewBean.java:60:    public PhotoViewBean setGif(boolean gif) {
/models\PhotoViewBean.java:61:        this.gif = gif;
/models\PhotoViewBean.java:62:        return this;
/models\PhotoViewBean.java:63:    }
/models\PhotoViewBean.java:65:    public String getIndex() {
/models\PhotoViewBean.java:66:        return index;
/models\PhotoViewBean.java:67:    }
/models\PhotoViewBean.java:69:    public PhotoViewBean setIndex(String index) {
/models\PhotoViewBean.java:70:        this.index = index;
/models\PhotoViewBean.java:71:        return this;
/models\PhotoViewBean.java:72:    }
/models\PhotoViewBean.java:74:    public String getUrl() {
/models\PhotoViewBean.java:75:        return url;
/models\PhotoViewBean.java:76:    }
/models\PhotoViewBean.java:78:    public PhotoViewBean setUrl(String url) {
/models\PhotoViewBean.java:79:        this.url = url;
/models\PhotoViewBean.java:80:        return this;
/models\PhotoViewBean.java:81:    }
/models\PhotoViewBean.java:83:    public String getOriginUrl() {
/models\PhotoViewBean.java:84:        return originUrl;
/models\PhotoViewBean.java:85:    }
/models\PhotoViewBean.java:87:    public PhotoViewBean setOriginUrl(String originUrl) {
/models\PhotoViewBean.java:88:        this.originUrl = originUrl;
/models\PhotoViewBean.java:89:        return this;
/models\PhotoViewBean.java:90:    }
/models\PhotoViewBean.java:92:    public boolean isLongPic() {
/models\PhotoViewBean.java:93:        return longPic;
/models\PhotoViewBean.java:94:    }
/models\PhotoViewBean.java:96:    public PhotoViewBean setLongPic(boolean longPic) {
/models\PhotoViewBean.java:97:        this.longPic = longPic;
/models\PhotoViewBean.java:98:        return this;
/models\PhotoViewBean.java:99:    }
/models\PhotoViewBean.java:101:    @Override
/models\PhotoViewBean.java:102:    public int describeContents() {
/models\PhotoViewBean.java:103:        return 0;
/models\PhotoViewBean.java:104:    }
/models\PhotoViewBean.java:106:    @Override
/models\PhotoViewBean.java:107:    public void writeToParcel(Parcel dest, int flags) {
/models\PhotoViewBean.java:108:        dest.writeString(url);
/models\PhotoViewBean.java:109:        dest.writeString(originUrl);
/models\PhotoViewBean.java:110:        dest.writeInt(longPic ? 1 : 0);
/models\PhotoViewBean.java:111:        dest.writeString(index);
/models\PhotoViewBean.java:112:    }
/models\PhotoViewBean.java:113:}
/models\ReplyInfoBean.java:1:package com.huanchengfly.tieba.post.models;
/models\ReplyInfoBean.java:3:import android.text.TextUtils;
/models\ReplyInfoBean.java:5:import androidx.annotation.NonNull;
/models\ReplyInfoBean.java:7:import com.huanchengfly.tieba.post.utils.GsonUtil;
/models\ReplyInfoBean.java:9:import java.util.Objects;
/models\ReplyInfoBean.java:11:public class ReplyInfoBean {
/models\ReplyInfoBean.java:12:    private String threadId;
/models\ReplyInfoBean.java:13:    private String forumId;
/models\ReplyInfoBean.java:14:    private String forumName;
/models\ReplyInfoBean.java:15:    private String tbs;
/models\ReplyInfoBean.java:16:    private String pid;
/models\ReplyInfoBean.java:17:    private String spid;
/models\ReplyInfoBean.java:18:    private String floorNum;
/models\ReplyInfoBean.java:19:    private String replyUser;
/models\ReplyInfoBean.java:20:    private String nickName;
/models\ReplyInfoBean.java:21:    private String pn;
/models\ReplyInfoBean.java:22:    private boolean isSubFloor;
/models\ReplyInfoBean.java:24:    public ReplyInfoBean(String threadId, String forumId, String forumName, String tbs, String pid, String spid, String floorNum, String replyUser, String nickName) {
/models\ReplyInfoBean.java:25:        this.threadId = threadId;
/models\ReplyInfoBean.java:26:        this.forumId = forumId;
/models\ReplyInfoBean.java:27:        this.forumName = forumName;
/models\ReplyInfoBean.java:28:        this.tbs = tbs;
/models\ReplyInfoBean.java:29:        this.pid = pid;
/models\ReplyInfoBean.java:30:        this.spid = spid;
/models\ReplyInfoBean.java:31:        this.floorNum = floorNum;
/models\ReplyInfoBean.java:32:        this.replyUser = replyUser;
/models\ReplyInfoBean.java:33:        this.nickName = nickName;
/models\ReplyInfoBean.java:34:        this.isSubFloor = !TextUtils.equals(pid, spid);
/models\ReplyInfoBean.java:35:    }
/models\ReplyInfoBean.java:37:    public ReplyInfoBean(String threadId, String forumId, String forumName, String tbs, String pid, String floorNum, String replyUser, String nickName) {
/models\ReplyInfoBean.java:38:        this.threadId = threadId;
/models\ReplyInfoBean.java:39:        this.forumId = forumId;
/models\ReplyInfoBean.java:40:        this.forumName = forumName;
/models\ReplyInfoBean.java:41:        this.tbs = tbs;
/models\ReplyInfoBean.java:42:        this.pid = pid;
/models\ReplyInfoBean.java:43:        this.spid = null;
/models\ReplyInfoBean.java:44:        this.floorNum = floorNum;
/models\ReplyInfoBean.java:45:        this.replyUser = replyUser;
/models\ReplyInfoBean.java:46:        this.nickName = nickName;
/models\ReplyInfoBean.java:47:        this.isSubFloor = false;
/models\ReplyInfoBean.java:48:    }
/models\ReplyInfoBean.java:50:    public ReplyInfoBean(String threadId, String forumId, String forumName, String tbs, String nickName) {
/models\ReplyInfoBean.java:51:        this.threadId = threadId;
/models\ReplyInfoBean.java:52:        this.forumId = forumId;
/models\ReplyInfoBean.java:53:        this.forumName = forumName;
/models\ReplyInfoBean.java:54:        this.tbs = tbs;
/models\ReplyInfoBean.java:55:        this.pid = null;
/models\ReplyInfoBean.java:56:        this.spid = null;
/models\ReplyInfoBean.java:57:        this.nickName = nickName;
/models\ReplyInfoBean.java:58:        this.isSubFloor = false;
/models\ReplyInfoBean.java:59:    }
/models\ReplyInfoBean.java:61:    public String hash() {
/models\ReplyInfoBean.java:62:        return getThreadId() + "-" + getPid() + "-" + getSpid();
/models\ReplyInfoBean.java:63:    }
/models\ReplyInfoBean.java:65:    public String getPn() {
/models\ReplyInfoBean.java:66:        return pn;
/models\ReplyInfoBean.java:67:    }
/models\ReplyInfoBean.java:69:    public ReplyInfoBean setPn(String pn) {
/models\ReplyInfoBean.java:70:        this.pn = pn;
/models\ReplyInfoBean.java:71:        return this;
/models\ReplyInfoBean.java:72:    }
/models\ReplyInfoBean.java:74:    public String getSpid() {
/models\ReplyInfoBean.java:75:        return spid;
/models\ReplyInfoBean.java:76:    }
/models\ReplyInfoBean.java:78:    public ReplyInfoBean setSpid(String spid) {
/models\ReplyInfoBean.java:79:        this.spid = spid;
/models\ReplyInfoBean.java:80:        return this;
/models\ReplyInfoBean.java:81:    }
/models\ReplyInfoBean.java:83:    public String getNickName() {
/models\ReplyInfoBean.java:84:        return nickName;
/models\ReplyInfoBean.java:85:    }
/models\ReplyInfoBean.java:87:    public ReplyInfoBean setNickName(String nickName) {
/models\ReplyInfoBean.java:88:        this.nickName = nickName;
/models\ReplyInfoBean.java:89:        return this;
/models\ReplyInfoBean.java:90:    }
/models\ReplyInfoBean.java:92:    public boolean isSubFloor() {
/models\ReplyInfoBean.java:93:        return isSubFloor;
/models\ReplyInfoBean.java:94:    }
/models\ReplyInfoBean.java:96:    public ReplyInfoBean setSubFloor(boolean subFloor) {
/models\ReplyInfoBean.java:97:        isSubFloor = subFloor;
/models\ReplyInfoBean.java:98:        return this;
/models\ReplyInfoBean.java:99:    }
/models\ReplyInfoBean.java:101:    public String getReplyUser() {
/models\ReplyInfoBean.java:102:        return replyUser;
/models\ReplyInfoBean.java:103:    }
/models\ReplyInfoBean.java:105:    public ReplyInfoBean setReplyUser(String replyUser) {
/models\ReplyInfoBean.java:106:        this.replyUser = replyUser;
/models\ReplyInfoBean.java:107:        return this;
/models\ReplyInfoBean.java:108:    }
/models\ReplyInfoBean.java:110:    @NonNull
/models\ReplyInfoBean.java:111:    @Override
/models\ReplyInfoBean.java:112:    public String toString() {
/models\ReplyInfoBean.java:113:        return GsonUtil.getGson().toJson(this);
/models\ReplyInfoBean.java:114:    }
/models\ReplyInfoBean.java:116:    @Override
/models\ReplyInfoBean.java:117:    public int hashCode() {
/models\ReplyInfoBean.java:118:        return Objects.hash(getThreadId(), getForumId(), getPid());
/models\ReplyInfoBean.java:119:    }
/models\ReplyInfoBean.java:121:    @Override
/models\ReplyInfoBean.java:122:    public boolean equals(Object o) {
/models\ReplyInfoBean.java:123:        if (this == o) return true;
/models\ReplyInfoBean.java:124:        if (!(o instanceof ReplyInfoBean)) return false;
/models\ReplyInfoBean.java:125:        ReplyInfoBean that = (ReplyInfoBean) o;
/models\ReplyInfoBean.java:126:        return Objects.equals(getThreadId(), that.getThreadId()) &&
/models\ReplyInfoBean.java:127:                Objects.equals(getForumId(), that.getForumId()) &&
/models\ReplyInfoBean.java:128:                Objects.equals(getPid(), that.getPid());
/models\ReplyInfoBean.java:129:    }
/models\ReplyInfoBean.java:131:    public String getThreadId() {
/models\ReplyInfoBean.java:132:        return threadId;
/models\ReplyInfoBean.java:133:    }
/models\ReplyInfoBean.java:135:    public ReplyInfoBean setThreadId(String threadId) {
/models\ReplyInfoBean.java:136:        this.threadId = threadId;
/models\ReplyInfoBean.java:137:        return this;
/models\ReplyInfoBean.java:138:    }
/models\ReplyInfoBean.java:140:    public String getForumId() {
/models\ReplyInfoBean.java:141:        return forumId;
/models\ReplyInfoBean.java:142:    }
/models\ReplyInfoBean.java:144:    public ReplyInfoBean setForumId(String forumId) {
/models\ReplyInfoBean.java:145:        this.forumId = forumId;
/models\ReplyInfoBean.java:146:        return this;
/models\ReplyInfoBean.java:147:    }
/models\ReplyInfoBean.java:149:    public String getForumName() {
/models\ReplyInfoBean.java:150:        return forumName;
/models\ReplyInfoBean.java:151:    }
/models\ReplyInfoBean.java:153:    public ReplyInfoBean setForumName(String forumName) {
/models\ReplyInfoBean.java:154:        this.forumName = forumName;
/models\ReplyInfoBean.java:155:        return this;
/models\ReplyInfoBean.java:156:    }
/models\ReplyInfoBean.java:158:    public String getTbs() {
/models\ReplyInfoBean.java:159:        return tbs;
/models\ReplyInfoBean.java:160:    }
/models\ReplyInfoBean.java:162:    public ReplyInfoBean setTbs(String tbs) {
/models\ReplyInfoBean.java:163:        this.tbs = tbs;
/models\ReplyInfoBean.java:164:        return this;
/models\ReplyInfoBean.java:165:    }
/models\ReplyInfoBean.java:167:    public String getPid() {
/models\ReplyInfoBean.java:168:        return pid;
/models\ReplyInfoBean.java:169:    }
/models\ReplyInfoBean.java:171:    public ReplyInfoBean setPid(String pid) {
/models\ReplyInfoBean.java:172:        this.pid = pid;
/models\ReplyInfoBean.java:173:        return this;
/models\ReplyInfoBean.java:174:    }
/models\ReplyInfoBean.java:176:    public String getFloorNum() {
/models\ReplyInfoBean.java:177:        return floorNum;
/models\ReplyInfoBean.java:178:    }
/models\ReplyInfoBean.java:180:    public ReplyInfoBean setFloorNum(String floorNum) {
/models\ReplyInfoBean.java:181:        this.floorNum = floorNum;
/models\ReplyInfoBean.java:182:        return this;
/models\ReplyInfoBean.java:183:    }
/models\ReplyInfoBean.java:184:}
/models\SignDataBean.java:1:package com.huanchengfly.tieba.post.models;
/models\SignDataBean.java:3:public class SignDataBean {
/models\SignDataBean.java:4:    private String kw;
/models\SignDataBean.java:5:    private String tbs;
/models\SignDataBean.java:7:    public SignDataBean(String kw, String tbs) {
/models\SignDataBean.java:8:        this.kw = kw;
/models\SignDataBean.java:9:        this.tbs = tbs;
/models\SignDataBean.java:10:    }
/models\SignDataBean.java:12:    public String getKw() {
/models\SignDataBean.java:13:        return kw;
/models\SignDataBean.java:14:    }
/models\SignDataBean.java:16:    public SignDataBean setKw(String kw) {
/models\SignDataBean.java:17:        this.kw = kw;
/models\SignDataBean.java:18:        return this;
/models\SignDataBean.java:19:    }
/models\SignDataBean.java:21:    public String getTbs() {
/models\SignDataBean.java:22:        return tbs;
/models\SignDataBean.java:23:    }
/models\SignDataBean.java:25:    public SignDataBean setTbs(String tbs) {
/models\SignDataBean.java:26:        this.tbs = tbs;
/models\SignDataBean.java:27:        return this;
/models\SignDataBean.java:28:    }
/models\SignDataBean.java:29:}
/models\ThreadHistoryInfoBean.java:1:package com.huanchengfly.tieba.post.models;
/models\ThreadHistoryInfoBean.java:3:public class ThreadHistoryInfoBean extends BaseBean {
/models\ThreadHistoryInfoBean.java:4:    private boolean seeLz;
/models\ThreadHistoryInfoBean.java:5:    private String pid;
/models\ThreadHistoryInfoBean.java:6:    private String forumName;
/models\ThreadHistoryInfoBean.java:7:    private String floor;
/models\ThreadHistoryInfoBean.java:9:    public String getForumName() {
/models\ThreadHistoryInfoBean.java:10:        return forumName;
/models\ThreadHistoryInfoBean.java:11:    }
/models\ThreadHistoryInfoBean.java:13:    public ThreadHistoryInfoBean setForumName(String forumName) {
/models\ThreadHistoryInfoBean.java:14:        this.forumName = forumName;
/models\ThreadHistoryInfoBean.java:15:        return this;
/models\ThreadHistoryInfoBean.java:16:    }
/models\ThreadHistoryInfoBean.java:18:    public String getFloor() {
/models\ThreadHistoryInfoBean.java:19:        return floor;
/models\ThreadHistoryInfoBean.java:20:    }
/models\ThreadHistoryInfoBean.java:22:    public ThreadHistoryInfoBean setFloor(String floor) {
/models\ThreadHistoryInfoBean.java:23:        this.floor = floor;
/models\ThreadHistoryInfoBean.java:24:        return this;
/models\ThreadHistoryInfoBean.java:25:    }
/models\ThreadHistoryInfoBean.java:27:    public boolean isSeeLz() {
/models\ThreadHistoryInfoBean.java:28:        return seeLz;
/models\ThreadHistoryInfoBean.java:29:    }
/models\ThreadHistoryInfoBean.java:31:    public ThreadHistoryInfoBean setSeeLz(boolean seeLz) {
/models\ThreadHistoryInfoBean.java:32:        this.seeLz = seeLz;
/models\ThreadHistoryInfoBean.java:33:        return this;
/models\ThreadHistoryInfoBean.java:34:    }
/models\ThreadHistoryInfoBean.java:36:    public String getPid() {
/models\ThreadHistoryInfoBean.java:37:        return pid;
/models\ThreadHistoryInfoBean.java:38:    }
/models\ThreadHistoryInfoBean.java:40:    public ThreadHistoryInfoBean setPid(String pid) {
/models\ThreadHistoryInfoBean.java:41:        this.pid = pid;
/models\ThreadHistoryInfoBean.java:42:        return this;
/models\ThreadHistoryInfoBean.java:43:    }
/models\ThreadHistoryInfoBean.java:44:}/models\BaseBean.kt:1:package com.huanchengfly.tieba.post.models
/models\BaseBean.kt:3:import com.huanchengfly.tieba.post.toJson
/models\BaseBean.kt:5:open class BaseBean {
/models\BaseBean.kt:6:    override fun toString(): String {
/models\BaseBean.kt:7:        return toJson()
/models\BaseBean.kt:8:    }
/models\BaseBean.kt:9:}/models\database\Account.java:1:package com.huanchengfly.tieba.post.models.database;
/models\database\Account.java:3:import org.litepal.crud.LitePalSupport;
/models\database\Account.java:5:public class Account extends LitePalSupport {
/models\database\Account.java:6:    private int id;
/models\database\Account.java:7:    private String uid;
/models\database\Account.java:8:    private String name;
/models\database\Account.java:9:    private String nameShow;
/models\database\Account.java:10:    private String bduss;
/models\database\Account.java:11:    private String tbs;
/models\database\Account.java:12:    private String itbTbs;
/models\database\Account.java:13:    private String portrait;
/models\database\Account.java:14:    private String sToken;
/models\database\Account.java:15:    private String cookie;
/models\database\Account.java:17:    public String getCookie() {
/models\database\Account.java:18:        return cookie;
/models\database\Account.java:19:    }
/models\database\Account.java:21:    public Account setCookie(String cookie) {
/models\database\Account.java:22:        this.cookie = cookie;
/models\database\Account.java:23:        return this;
/models\database\Account.java:24:    }
/models\database\Account.java:26:    public String getsToken() {
/models\database\Account.java:27:        return sToken;
/models\database\Account.java:28:    }
/models\database\Account.java:30:    public Account setsToken(String sToken) {
/models\database\Account.java:31:        this.sToken = sToken;
/models\database\Account.java:32:        return this;
/models\database\Account.java:33:    }
/models\database\Account.java:35:    public String getItbTbs() {
/models\database\Account.java:36:        return itbTbs;
/models\database\Account.java:37:    }
/models\database\Account.java:39:    public Account setItbTbs(String itbTbs) {
/models\database\Account.java:40:        this.itbTbs = itbTbs;
/models\database\Account.java:41:        return this;
/models\database\Account.java:42:    }
/models\database\Account.java:44:    public int getId() {
/models\database\Account.java:45:        return id;
/models\database\Account.java:46:    }
/models\database\Account.java:48:    public String getUid() {
/models\database\Account.java:49:        return uid;
/models\database\Account.java:50:    }
/models\database\Account.java:52:    public Account setUid(String uid) {
/models\database\Account.java:53:        this.uid = uid;
/models\database\Account.java:54:        return this;
/models\database\Account.java:55:    }
/models\database\Account.java:57:    public String getName() {
/models\database\Account.java:58:        return name;
/models\database\Account.java:59:    }
/models\database\Account.java:61:    public Account setName(String name) {
/models\database\Account.java:62:        this.name = name;
/models\database\Account.java:63:        return this;
/models\database\Account.java:64:    }
/models\database\Account.java:66:    public String getNameShow() {
/models\database\Account.java:67:        return nameShow;
/models\database\Account.java:68:    }
/models\database\Account.java:70:    public Account setNameShow(String nameShow) {
/models\database\Account.java:71:        this.nameShow = nameShow;
/models\database\Account.java:72:        return this;
/models\database\Account.java:73:    }
/models\database\Account.java:75:    public String getBduss() {
/models\database\Account.java:76:        return bduss;
/models\database\Account.java:77:    }
/models\database\Account.java:79:    public Account setBduss(String bduss) {
/models\database\Account.java:80:        this.bduss = bduss;
/models\database\Account.java:81:        return this;
/models\database\Account.java:82:    }
/models\database\Account.java:84:    public String getTbs() {
/models\database\Account.java:85:        return tbs;
/models\database\Account.java:86:    }
/models\database\Account.java:88:    public Account setTbs(String tbs) {
/models\database\Account.java:89:        this.tbs = tbs;
/models\database\Account.java:90:        return this;
/models\database\Account.java:91:    }
/models\database\Account.java:93:    public String getPortrait() {
/models\database\Account.java:94:        return portrait;
/models\database\Account.java:95:    }
/models\database\Account.java:97:    public Account setPortrait(String portrait) {
/models\database\Account.java:98:        this.portrait = portrait;
/models\database\Account.java:99:        return this;
/models\database\Account.java:100:    }
/models\database\Account.java:101:}/models\database\Block.java:1:package com.huanchengfly.tieba.post.models.database;
/models\database\Block.java:3:import org.litepal.crud.LitePalSupport;
/models\database\Block.java:5:public class Block extends LitePalSupport {
/models\database\Block.java:6:    public static final int CATEGORY_BLACK_LIST = 10;
/models\database\Block.java:7:    public static final int CATEGORY_WHITE_LIST = 11;
/models\database\Block.java:8:    public static final int TYPE_KEYWORD = 0;
/models\database\Block.java:9:    public static final int TYPE_USER = 1;
/models\database\Block.java:11:    private int id;
/models\database\Block.java:12:    private int category;
/models\database\Block.java:13:    private int type;
/models\database\Block.java:14:    private String username;
/models\database\Block.java:15:    private String uid;
/models\database\Block.java:16:    private String keywords;
/models\database\Block.java:18:    public String getUid() {
/models\database\Block.java:19:        return uid;
/models\database\Block.java:20:    }
/models\database\Block.java:22:    public Block setUid(String uid) {
/models\database\Block.java:23:        this.uid = uid;
/models\database\Block.java:24:        return this;
/models\database\Block.java:25:    }
/models\database\Block.java:27:    public int getCategory() {
/models\database\Block.java:28:        return category;
/models\database\Block.java:29:    }
/models\database\Block.java:31:    public Block setCategory(int category) {
/models\database\Block.java:32:        this.category = category;
/models\database\Block.java:33:        return this;
/models\database\Block.java:34:    }
/models\database\Block.java:36:    public int getId() {
/models\database\Block.java:37:        return id;
/models\database\Block.java:38:    }
/models\database\Block.java:40:    public int getType() {
/models\database\Block.java:41:        return type;
/models\database\Block.java:42:    }
/models\database\Block.java:44:    public Block setType(int type) {
/models\database\Block.java:45:        this.type = type;
/models\database\Block.java:46:        return this;
/models\database\Block.java:47:    }
/models\database\Block.java:49:    public String getUsername() {
/models\database\Block.java:50:        return username;
/models\database\Block.java:51:    }
/models\database\Block.java:53:    public Block setUsername(String username) {
/models\database\Block.java:54:        this.username = username;
/models\database\Block.java:55:        return this;
/models\database\Block.java:56:    }
/models\database\Block.java:58:    public String getKeywords() {
/models\database\Block.java:59:        return keywords;
/models\database\Block.java:60:    }
/models\database\Block.java:62:    public Block setKeywords(String keywords) {
/models\database\Block.java:63:        this.keywords = keywords;
/models\database\Block.java:64:        return this;
/models\database\Block.java:65:    }
/models\database\Block.java:66:}
/models\database\Draft.java:1:package com.huanchengfly.tieba.post.models.database;
/models\database\Draft.java:3:import org.litepal.crud.LitePalSupport;
/models\database\Draft.java:5:public class Draft extends LitePalSupport {
/models\database\Draft.java:6:    private String hash;
/models\database\Draft.java:7:    private String content;
/models\database\Draft.java:9:    public Draft(String hash, String content) {
/models\database\Draft.java:10:        this.hash = hash;
/models\database\Draft.java:11:        this.content = content;
/models\database\Draft.java:12:    }
/models\database\Draft.java:14:    public String getHash() {
/models\database\Draft.java:15:        return hash;
/models\database\Draft.java:16:    }
/models\database\Draft.java:18:    public Draft setHash(String hash) {
/models\database\Draft.java:19:        this.hash = hash;
/models\database\Draft.java:20:        return this;
/models\database\Draft.java:21:    }
/models\database\Draft.java:23:    public String getContent() {
/models\database\Draft.java:24:        return content;
/models\database\Draft.java:25:    }
/models\database\Draft.java:27:    public Draft setContent(String content) {
/models\database\Draft.java:28:        this.content = content;
/models\database\Draft.java:29:        return this;
/models\database\Draft.java:30:    }
/models\database\Draft.java:31:}
/models\database\Emotion.java:1:package com.huanchengfly.tieba.post.models.database;
/models\database\Emotion.java:3:import org.litepal.crud.LitePalSupport;
/models\database\Emotion.java:5:public class Emotion extends LitePalSupport {
/models\database\Emotion.java:6:    private int id;
/models\database\Emotion.java:7:    private String picId;
/models\database\Emotion.java:8:    private String size;
/models\database\Emotion.java:10:    public int getId() {
/models\database\Emotion.java:11:        return id;
/models\database\Emotion.java:12:    }
/models\database\Emotion.java:14:    public Emotion setId(int id) {
/models\database\Emotion.java:15:        this.id = id;
/models\database\Emotion.java:16:        return this;
/models\database\Emotion.java:17:    }
/models\database\Emotion.java:19:    public String getPicId() {
/models\database\Emotion.java:20:        return picId;
/models\database\Emotion.java:21:    }
/models\database\Emotion.java:23:    public Emotion setPicId(String picId) {
/models\database\Emotion.java:24:        this.picId = picId;
/models\database\Emotion.java:25:        return this;
/models\database\Emotion.java:26:    }
/models\database\Emotion.java:28:    public String getSize() {
/models\database\Emotion.java:29:        return size;
/models\database\Emotion.java:30:    }
/models\database\Emotion.java:32:    public Emotion setSize(String size) {
/models\database\Emotion.java:33:        this.size = size;
/models\database\Emotion.java:34:        return this;
/models\database\Emotion.java:35:    }
/models\database\Emotion.java:36:}
/models\database\History.java:1:package com.huanchengfly.tieba.post.models.database;
/models\database\History.java:3:import org.litepal.crud.LitePalSupport;
/models\database\History.java:5:public class History extends LitePalSupport {
/models\database\History.java:6:    private int id;
/models\database\History.java:7:    private String avatar;
/models\database\History.java:8:    private String username;
/models\database\History.java:9:    private String data;
/models\database\History.java:10:    private String extras;
/models\database\History.java:11:    private String title;
/models\database\History.java:12:    private long timestamp;
/models\database\History.java:13:    private int count;
/models\database\History.java:14:    private int type;
/models\database\History.java:16:    public String getUsername() {
/models\database\History.java:17:        return username;
/models\database\History.java:18:    }
/models\database\History.java:20:    public History setUsername(String username) {
/models\database\History.java:21:        this.username = username;
/models\database\History.java:22:        return this;
/models\database\History.java:23:    }
/models\database\History.java:25:    public String getAvatar() {
/models\database\History.java:26:        return avatar;
/models\database\History.java:27:    }
/models\database\History.java:29:    public History setAvatar(String avatar) {
/models\database\History.java:30:        this.avatar = avatar;
/models\database\History.java:31:        return this;
/models\database\History.java:32:    }
/models\database\History.java:34:    public String getExtras() {
/models\database\History.java:35:        return extras;
/models\database\History.java:36:    }
/models\database\History.java:38:    public History setExtras(String extras) {
/models\database\History.java:39:        this.extras = extras;
/models\database\History.java:40:        return this;
/models\database\History.java:41:    }
/models\database\History.java:43:    public int getId() {
/models\database\History.java:44:        return id;
/models\database\History.java:45:    }
/models\database\History.java:47:    public String getData() {
/models\database\History.java:48:        return data;
/models\database\History.java:49:    }
/models\database\History.java:51:    public History setData(String data) {
/models\database\History.java:52:        this.data = data;
/models\database\History.java:53:        return this;
/models\database\History.java:54:    }
/models\database\History.java:56:    public String getTitle() {
/models\database\History.java:57:        return title;
/models\database\History.java:58:    }
/models\database\History.java:60:    public History setTitle(String title) {
/models\database\History.java:61:        this.title = title;
/models\database\History.java:62:        return this;
/models\database\History.java:63:    }
/models\database\History.java:65:    public long getTimestamp() {
/models\database\History.java:66:        return timestamp;
/models\database\History.java:67:    }
/models\database\History.java:69:    public History setTimestamp(long timestamp) {
/models\database\History.java:70:        this.timestamp = timestamp;
/models\database\History.java:71:        return this;
/models\database\History.java:72:    }
/models\database\History.java:74:    public int getCount() {
/models\database\History.java:75:        return count;
/models\database\History.java:76:    }
/models\database\History.java:78:    public History setCount(int count) {
/models\database\History.java:79:        this.count = count;
/models\database\History.java:80:        return this;
/models\database\History.java:81:    }
/models\database\History.java:83:    public int getType() {
/models\database\History.java:84:        return type;
/models\database\History.java:85:    }
/models\database\History.java:87:    public History setType(int type) {
/models\database\History.java:88:        this.type = type;
/models\database\History.java:89:        return this;
/models\database\History.java:90:    }
/models\database\History.java:91:}
/models\database\SearchHistory.java:1:package com.huanchengfly.tieba.post.models.database;
/models\database\SearchHistory.java:3:import org.litepal.crud.LitePalSupport;
/models\database\SearchHistory.java:5:public class SearchHistory extends LitePalSupport {
/models\database\SearchHistory.java:6:    private int id;
/models\database\SearchHistory.java:7:    private long timestamp;
/models\database\SearchHistory.java:8:    private String content;
/models\database\SearchHistory.java:10:    public SearchHistory(String content) {
/models\database\SearchHistory.java:11:        this.timestamp = System.currentTimeMillis();
/models\database\SearchHistory.java:12:        this.content = content;
/models\database\SearchHistory.java:13:    }
/models\database\SearchHistory.java:15:    public int getId() {
/models\database\SearchHistory.java:16:        return id;
/models\database\SearchHistory.java:17:    }
/models\database\SearchHistory.java:19:    public long getTimestamp() {
/models\database\SearchHistory.java:20:        return timestamp;
/models\database\SearchHistory.java:21:    }
/models\database\SearchHistory.java:23:    public void setTimestamp(long timestamp) {
/models\database\SearchHistory.java:24:        this.timestamp = timestamp;
/models\database\SearchHistory.java:25:    }
/models\database\SearchHistory.java:27:    public String getContent() {
/models\database\SearchHistory.java:28:        return content;
/models\database\SearchHistory.java:29:    }
/models\database\SearchHistory.java:31:    public void setContent(String content) {
/models\database\SearchHistory.java:32:        this.content = content;
/models\database\SearchHistory.java:33:    }
/models\database\SearchHistory.java:34:}
/models\database\TopForum.java:1:package com.huanchengfly.tieba.post.models.database;
/models\database\TopForum.java:3:import org.litepal.crud.LitePalSupport;
/models\database\TopForum.java:5:public class TopForum extends LitePalSupport {
/models\database\TopForum.java:6:    private String forumId;
/models\database\TopForum.java:7:    private int id;
/models\database\TopForum.java:9:    public TopForum(String forumId) {
/models\database\TopForum.java:10:        this.forumId = forumId;
/models\database\TopForum.java:11:    }
/models\database\TopForum.java:13:    public int getId() {
/models\database\TopForum.java:14:        return id;
/models\database\TopForum.java:15:    }
/models\database\TopForum.java:17:    public String getForumId() {
/models\database\TopForum.java:18:        return forumId;
/models\database\TopForum.java:19:    }
/models\database\TopForum.java:21:    public TopForum setForumId(String forumId) {
/models\database\TopForum.java:22:        this.forumId = forumId;
/models\database\TopForum.java:23:        return this;
/models\database\TopForum.java:24:    }
/models\database\TopForum.java:25:}
/receivers\AutoSignAlarm.kt:1:package com.huanchengfly.tieba.post.receivers
/receivers\AutoSignAlarm.kt:3:import android.content.BroadcastReceiver
/receivers\AutoSignAlarm.kt:4:import android.content.Context
/receivers\AutoSignAlarm.kt:5:import android.content.Intent
/receivers\AutoSignAlarm.kt:6:import com.huanchengfly.tieba.post.utils.TiebaUtil
/receivers\AutoSignAlarm.kt:8:class AutoSignAlarm : BroadcastReceiver() {
/receivers\AutoSignAlarm.kt:9:    override fun onReceive(context: Context, intent: Intent) {
/receivers\AutoSignAlarm.kt:10:        TiebaUtil.startSign(context)
/receivers\AutoSignAlarm.kt:11:    }
/receivers\AutoSignAlarm.kt:13:    companion object {
/receivers\AutoSignAlarm.kt:14:        val TAG = AutoSignAlarm::class.java.simpleName
/receivers\AutoSignAlarm.kt:15:    }
/receivers\AutoSignAlarm.kt:16:}/receivers\BootCompleteSignReceiver.kt:1:package com.huanchengfly.tieba.post.receivers
/receivers\BootCompleteSignReceiver.kt:3:import android.app.AlarmManager
/receivers\BootCompleteSignReceiver.kt:4:import android.app.PendingIntent
/receivers\BootCompleteSignReceiver.kt:5:import android.content.BroadcastReceiver
/receivers\BootCompleteSignReceiver.kt:6:import android.content.Context
/receivers\BootCompleteSignReceiver.kt:7:import android.content.Intent
/receivers\BootCompleteSignReceiver.kt:8:import com.huanchengfly.tieba.post.utils.TiebaUtil
/receivers\BootCompleteSignReceiver.kt:9:import com.huanchengfly.tieba.post.utils.Util
/receivers\BootCompleteSignReceiver.kt:10:import com.huanchengfly.tieba.post.utils.appPreferences
/receivers\BootCompleteSignReceiver.kt:11:import java.util.*
/receivers\BootCompleteSignReceiver.kt:13:class BootCompleteSignReceiver : BroadcastReceiver() {
/receivers\BootCompleteSignReceiver.kt:14:    override fun onReceive(context: Context, intent: Intent) {
/receivers\BootCompleteSignReceiver.kt:15:        if (Intent.ACTION_BOOT_COMPLETED == intent.action) {
/receivers\BootCompleteSignReceiver.kt:16:            val autoSign = context.appPreferences.autoSign
/receivers\BootCompleteSignReceiver.kt:17:            if (autoSign) {
/receivers\BootCompleteSignReceiver.kt:18:                val autoSignTimeStr = context.appPreferences.autoSignTime
/receivers\BootCompleteSignReceiver.kt:19:                if (Util.getTimeInMillis(autoSignTimeStr) > System.currentTimeMillis()) {
/receivers\BootCompleteSignReceiver.kt:20:                    TiebaUtil.initAutoSign(context)
/receivers\BootCompleteSignReceiver.kt:21:                } else {
/receivers\BootCompleteSignReceiver.kt:22:                    val signDay = context.appPreferences.signDay
/receivers\BootCompleteSignReceiver.kt:23:                    if (signDay != Calendar.getInstance()[Calendar.DAY_OF_MONTH]) {
/receivers\BootCompleteSignReceiver.kt:24:                        TiebaUtil.startSign(context)
/receivers\BootCompleteSignReceiver.kt:25:                    }
/receivers\BootCompleteSignReceiver.kt:26:                    val alarmManager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager
/receivers\BootCompleteSignReceiver.kt:27:                    val time = Util.time2Calendar(autoSignTimeStr).apply {
/receivers\BootCompleteSignReceiver.kt:28:                        add(Calendar.DAY_OF_MONTH, 1)
/receivers\BootCompleteSignReceiver.kt:29:                    }.timeInMillis
/receivers\BootCompleteSignReceiver.kt:30:                    val pendingIntent = PendingIntent.getBroadcast(context, 0, Intent(context, AutoSignAlarm::class.java), 0)
/receivers\BootCompleteSignReceiver.kt:31:                    alarmManager.setInexactRepeating(AlarmManager.RTC, time, AlarmManager.INTERVAL_DAY, pendingIntent)
/receivers\BootCompleteSignReceiver.kt:32:                }
/receivers\BootCompleteSignReceiver.kt:33:            }
/receivers\BootCompleteSignReceiver.kt:34:        }
/receivers\BootCompleteSignReceiver.kt:35:    }
/receivers\BootCompleteSignReceiver.kt:36:}/services\OKSignTileService.java:1:package com.huanchengfly.tieba.post.services;

import android.annotation.TargetApi;
import android.content.Intent;
import android.service.quicksettings.Tile;
import android.service.quicksettings.TileService;

import com.huanchengfly.tieba.post.activities.OKSignActivity;

@TargetApi(24)
public class OKSignTileService extends TileService {
    @Override
    public void onStartListening() {
        super.onStartListening();
        if (getQsTile() == null) {
            return;
        }
        getQsTile().setState(Tile.STATE_ACTIVE);
        getQsTile().updateTile();
    }

    @Override
    public void onStopListening() {
        super.onStopListening();
        if (getQsTile() == null) {
            return;
        }
        getQsTile().setState(Tile.STATE_INACTIVE);
        getQsTile().updateTile();
    }

    @Override
    public void onClick() {
        super.onClick();
        startActivity(new Intent(this, OKSignActivity.class)
                .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
    }
}/services\NotifyJobService.kt:1:package com.huanchengfly.tieba.post.services
/services\NotifyJobService.kt:3:import android.annotation.SuppressLint
/services\NotifyJobService.kt:4:import android.app.NotificationChannel
/services\NotifyJobService.kt:5:import android.app.NotificationChannelGroup
/services\NotifyJobService.kt:6:import android.app.NotificationManager
/services\NotifyJobService.kt:7:import android.app.PendingIntent
/services\NotifyJobService.kt:8:import android.app.job.JobParameters
/services\NotifyJobService.kt:9:import android.app.job.JobService
/services\NotifyJobService.kt:10:import android.content.Context
/services\NotifyJobService.kt:11:import android.content.Intent
/services\NotifyJobService.kt:12:import android.os.Build
/services\NotifyJobService.kt:13:import android.util.Log
/services\NotifyJobService.kt:14:import androidx.core.app.NotificationCompat
/services\NotifyJobService.kt:15:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils
/services\NotifyJobService.kt:16:import com.huanchengfly.tieba.post.api.TiebaApi
/services\NotifyJobService.kt:17:import com.huanchengfly.tieba.post.api.models.MsgBean
/services\NotifyJobService.kt:18:import com.huanchengfly.tieba.post.R
/services\NotifyJobService.kt:19:import com.huanchengfly.tieba.post.activities.MessageActivity
/services\NotifyJobService.kt:20:import com.huanchengfly.tieba.post.fragments.MessageFragment
/services\NotifyJobService.kt:21:import retrofit2.Call
/services\NotifyJobService.kt:22:import retrofit2.Callback
/services\NotifyJobService.kt:23:import retrofit2.Response
/services\NotifyJobService.kt:25:class NotifyJobService : JobService() {
/services\NotifyJobService.kt:26:    var notificationManager: NotificationManager? = null
/services\NotifyJobService.kt:27:    private fun createChannel(id: String, name: String) {
/services\NotifyJobService.kt:28:        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
/services\NotifyJobService.kt:29:            val channel = NotificationChannel(id,
/services\NotifyJobService.kt:30:                    name, NotificationManager.IMPORTANCE_DEFAULT)
/services\NotifyJobService.kt:31:            channel.group = CHANNEL_GROUP
/services\NotifyJobService.kt:32:            channel.setShowBadge(true)
/services\NotifyJobService.kt:33:            notificationManager!!.createNotificationChannel(channel)
/services\NotifyJobService.kt:34:        }
/services\NotifyJobService.kt:35:    }
/services\NotifyJobService.kt:37:    override fun onStartJob(params: JobParameters): Boolean {
/services\NotifyJobService.kt:38:        Log.i(TAG, "onStartJob")
/services\NotifyJobService.kt:39:        notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
/services\NotifyJobService.kt:40:        if (notificationManager != null) {
/services\NotifyJobService.kt:41:            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
/services\NotifyJobService.kt:42:                val channelGroup = NotificationChannelGroup(CHANNEL_GROUP, CHANNEL_GROUP_NAME)
/services\NotifyJobService.kt:43:                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
/services\NotifyJobService.kt:44:                    channelGroup.description = "贴吧的各种消息通知"
/services\NotifyJobService.kt:45:                }
/services\NotifyJobService.kt:46:                notificationManager!!.createNotificationChannelGroup(channelGroup)
/services\NotifyJobService.kt:47:                createChannel(CHANNEL_REPLY, CHANNEL_REPLY_NAME)
/services\NotifyJobService.kt:48:                createChannel(CHANNEL_AT, CHANNEL_AT_NAME)
/services\NotifyJobService.kt:49:            }
/services\NotifyJobService.kt:50:        }
/services\NotifyJobService.kt:51:        TiebaApi.getInstance().msg().enqueue(object : Callback<MsgBean> {
/services\NotifyJobService.kt:52:            override fun onFailure(call: Call<MsgBean>, t: Throwable) {
/services\NotifyJobService.kt:53:                jobFinished(params, true)
/services\NotifyJobService.kt:54:            }
/services\NotifyJobService.kt:56:            override fun onResponse(call: Call<MsgBean>, response: Response<MsgBean>) {
/services\NotifyJobService.kt:57:                val msgBean = response.body() ?: return
/services\NotifyJobService.kt:58:                if (notificationManager != null) {
/services\NotifyJobService.kt:59:                    var total = 0
/services\NotifyJobService.kt:60:                    if ("0" != msgBean.message?.replyMe) {
/services\NotifyJobService.kt:61:                        val replyCount = msgBean.message?.replyMe?.let { Integer.valueOf(it) }
/services\NotifyJobService.kt:62:                        if (replyCount != null) {
/services\NotifyJobService.kt:63:                            total += replyCount
/services\NotifyJobService.kt:64:                        }
/services\NotifyJobService.kt:65:                        sendBroadcast(Intent()
/services\NotifyJobService.kt:66:                                .setAction(ACTION_NEW_MESSAGE)
/services\NotifyJobService.kt:67:                                .putExtra("channel", CHANNEL_REPLY)
/services\NotifyJobService.kt:68:                                .putExtra("count", replyCount))
/services\NotifyJobService.kt:69:                        updateNotification(getString(R.string.tips_message_reply, msgBean.message?.replyMe), ID_REPLY, CHANNEL_REPLY, CHANNEL_REPLY_NAME, MessageActivity.createIntent(this@NotifyJobService, MessageFragment.TYPE_REPLY_ME))
/services\NotifyJobService.kt:70:                    }
/services\NotifyJobService.kt:71:                    if ("0" != msgBean.message?.atMe) {
/services\NotifyJobService.kt:72:                        val atCount = msgBean.message?.atMe?.let { Integer.valueOf(it) }
/services\NotifyJobService.kt:73:                        if (atCount != null) {
/services\NotifyJobService.kt:74:                            total += atCount
/services\NotifyJobService.kt:75:                        }
/services\NotifyJobService.kt:76:                        sendBroadcast(Intent()
/services\NotifyJobService.kt:77:                                .setAction(ACTION_NEW_MESSAGE)
/services\NotifyJobService.kt:78:                                .putExtra("channel", CHANNEL_AT)
/services\NotifyJobService.kt:79:                                .putExtra("count", msgBean.message?.atMe))
/services\NotifyJobService.kt:80:                        updateNotification(getString(R.string.tips_message_at, msgBean.message?.atMe), ID_AT, CHANNEL_AT, CHANNEL_AT_NAME, MessageActivity.createIntent(this@NotifyJobService, MessageFragment.TYPE_AT_ME))
/services\NotifyJobService.kt:81:                    }
/services\NotifyJobService.kt:82:                    sendBroadcast(Intent()
/services\NotifyJobService.kt:83:                            .setAction(ACTION_NEW_MESSAGE)
/services\NotifyJobService.kt:84:                            .putExtra("channel", CHANNEL_TOTAL)
/services\NotifyJobService.kt:85:                            .putExtra("count", total))
/services\NotifyJobService.kt:86:                }
/services\NotifyJobService.kt:87:                jobFinished(params, false)
/services\NotifyJobService.kt:88:            }
/services\NotifyJobService.kt:89:        })
/services\NotifyJobService.kt:90:        return true
/services\NotifyJobService.kt:91:    }
/services\NotifyJobService.kt:93:    override fun onStopJob(params: JobParameters): Boolean {
/services\NotifyJobService.kt:94:        return true
/services\NotifyJobService.kt:95:    }
/services\NotifyJobService.kt:97:    @SuppressLint("WrongConstant")
/services\NotifyJobService.kt:98:    private fun updateNotification(text: String, id: Int, channel: String, channelName: String, intent: Intent) {
/services\NotifyJobService.kt:99:        val notification = NotificationCompat.Builder(this, channel)
/services\NotifyJobService.kt:100:                .setSubText(channelName)
/services\NotifyJobService.kt:101:                .setContentText(getString(R.string.tip_touch_to_view))
/services\NotifyJobService.kt:102:                .setContentTitle(text)
/services\NotifyJobService.kt:103:                .setSmallIcon(R.drawable.ic_round_drafts)
/services\NotifyJobService.kt:104:                .setWhen(System.currentTimeMillis())
/services\NotifyJobService.kt:105:                .setAutoCancel(true)
/services\NotifyJobService.kt:106:                .setPriority(NotificationCompat.PRIORITY_DEFAULT)
/services\NotifyJobService.kt:107:                .setContentIntent(PendingIntent.getActivity(this, 0, intent, Intent.FLAG_ACTIVITY_NEW_TASK))
/services\NotifyJobService.kt:108:                .setColor(ThemeUtils.getColorByAttr(this, R.attr.colorPrimary))
/services\NotifyJobService.kt:109:                .build()
/services\NotifyJobService.kt:110:        notificationManager!!.notify(id, notification)
/services\NotifyJobService.kt:111:    }
/services\NotifyJobService.kt:113:    companion object {
/services\NotifyJobService.kt:114:        val TAG = NotifyJobService::class.java.simpleName
/services\NotifyJobService.kt:115:        const val ACTION_NEW_MESSAGE = "com.huanchengfly.tieba.post.action.NEW_MESSAGE"
/services\NotifyJobService.kt:116:        const val CHANNEL_GROUP = "20"
/services\NotifyJobService.kt:117:        const val CHANNEL_AT = "3"
/services\NotifyJobService.kt:118:        const val CHANNEL_AT_NAME = "提到我的"
/services\NotifyJobService.kt:119:        const val CHANNEL_TOTAL = "total"
/services\NotifyJobService.kt:120:        const val ID_REPLY = 20
/services\NotifyJobService.kt:121:        const val ID_AT = 21
/services\NotifyJobService.kt:122:        private const val CHANNEL_GROUP_NAME = "消息通知"
/services\NotifyJobService.kt:123:        private const val CHANNEL_REPLY = "2"
/services\NotifyJobService.kt:124:        private const val CHANNEL_REPLY_NAME = "回复我的"
/services\NotifyJobService.kt:125:    }
/services\NotifyJobService.kt:126:}/services\OKSignService.kt:1:package com.huanchengfly.tieba.post.services
/services\OKSignService.kt:3:import android.annotation.SuppressLint
/services\OKSignService.kt:4:import android.app.IntentService
/services\OKSignService.kt:5:import android.app.NotificationChannel
/services\OKSignService.kt:6:import android.app.NotificationManager
/services\OKSignService.kt:7:import android.app.PendingIntent
/services\OKSignService.kt:8:import android.content.Context
/services\OKSignService.kt:9:import android.content.Intent
/services\OKSignService.kt:10:import android.os.Build
/services\OKSignService.kt:11:import android.os.Handler
/services\OKSignService.kt:12:import android.widget.Toast
/services\OKSignService.kt:13:import androidx.core.app.NotificationCompat
/services\OKSignService.kt:14:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils
/services\OKSignService.kt:15:import com.huanchengfly.tieba.post.api.TiebaApi
/services\OKSignService.kt:16:import com.huanchengfly.tieba.post.api.interfaces.CommonCallback
/services\OKSignService.kt:17:import com.huanchengfly.tieba.post.api.models.ForumRecommend
/services\OKSignService.kt:18:import com.huanchengfly.tieba.post.api.models.SignResultBean
/services\OKSignService.kt:19:import com.huanchengfly.tieba.post.api.retrofit.exception.TiebaException
/services\OKSignService.kt:20:import com.huanchengfly.tieba.post.activities.MainActivity
/services\OKSignService.kt:21:import com.huanchengfly.tieba.post.R
/services\OKSignService.kt:22:import com.huanchengfly.tieba.post.activities.LoginActivity
/services\OKSignService.kt:23:import com.huanchengfly.tieba.post.models.MyInfoBean
/services\OKSignService.kt:24:import com.huanchengfly.tieba.post.models.SignDataBean
/services\OKSignService.kt:25:import com.huanchengfly.tieba.post.utils.AccountUtil
/services\OKSignService.kt:26:import retrofit2.Call
/services\OKSignService.kt:27:import retrofit2.Callback
/services\OKSignService.kt:28:import retrofit2.Response
/services\OKSignService.kt:29:import java.util.*
/services\OKSignService.kt:30:import java.util.concurrent.ThreadLocalRandom
/services\OKSignService.kt:32:class OKSignService : IntentService(TAG) {
/services\OKSignService.kt:33:    private val signData: MutableList<SignDataBean> = ArrayList()
/services\OKSignService.kt:34:    private var position = 0
/services\OKSignService.kt:35:    lateinit var manager: NotificationManager
/services\OKSignService.kt:37:    override fun onCreate() {
/services\OKSignService.kt:38:        super.onCreate()
/services\OKSignService.kt:39:        manager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
/services\OKSignService.kt:40:        updateNotification("正在获取吧列表", "请稍后...", 100, 0, true)
/services\OKSignService.kt:41:        startForeground(9, NotificationCompat.Builder(this, "1")
/services\OKSignService.kt:42:                .setContentTitle(getString(R.string.title_oksign))
/services\OKSignService.kt:43:                .setContentText(getString(R.string.tip_oksign_running))
/services\OKSignService.kt:44:                .setSmallIcon(R.drawable.ic_oksign)
/services\OKSignService.kt:45:                .setWhen(System.currentTimeMillis())
/services\OKSignService.kt:46:                .build())
/services\OKSignService.kt:47:    }
/services\OKSignService.kt:49:    private fun startSign() {
/services\OKSignService.kt:50:        if (signData.size > 0) {
/services\OKSignService.kt:51:            position = 0
/services\OKSignService.kt:52:            sign(signData[position])
/services\OKSignService.kt:53:            updateNotification("即将开始签到", null, 100, 100, true)
/services\OKSignService.kt:54:            Toast.makeText(this@OKSignService, "签到已开始，可在通知栏查看进度", Toast.LENGTH_SHORT).show()
/services\OKSignService.kt:55:        } else {
/services\OKSignService.kt:56:            updateNotification("签到完成", "没有可签到的吧", Intent(this, MainActivity::class.java))
/services\OKSignService.kt:57:            stopForeground(true)
/services\OKSignService.kt:58:        }
/services\OKSignService.kt:59:    }
/services\OKSignService.kt:61:    private fun buildNotification(title: String, text: String?): NotificationCompat.Builder {
/services\OKSignService.kt:62:        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
/services\OKSignService.kt:63:            val channel = NotificationChannel("1",
/services\OKSignService.kt:64:                    "一键签到", NotificationManager.IMPORTANCE_LOW)
/services\OKSignService.kt:65:            channel.enableLights(false)
/services\OKSignService.kt:66:            channel.setShowBadge(false)
/services\OKSignService.kt:67:            manager.createNotificationChannel(channel)
/services\OKSignService.kt:68:        }
/services\OKSignService.kt:69:        return NotificationCompat.Builder(this, "1")
/services\OKSignService.kt:70:                .setContentText(text)
/services\OKSignService.kt:71:                .setContentTitle(title)
/services\OKSignService.kt:72:                .setSubText("一键签到")
/services\OKSignService.kt:73:                .setSmallIcon(R.drawable.ic_oksign)
/services\OKSignService.kt:74:                .setWhen(System.currentTimeMillis())
/services\OKSignService.kt:75:                .setAutoCancel(true)
/services\OKSignService.kt:76:                .setColor(ThemeUtils.getColorByAttr(this, R.attr.colorPrimary))
/services\OKSignService.kt:77:    }
/services\OKSignService.kt:79:    @SuppressLint("WrongConstant")
/services\OKSignService.kt:80:    private fun updateNotification(title: String, text: String, intent: Intent) {
/services\OKSignService.kt:81:        manager.notify(1,
/services\OKSignService.kt:82:                buildNotification(title, text)
/services\OKSignService.kt:83:                        .setContentIntent(PendingIntent.getActivity(this, 0, intent, Intent.FLAG_ACTIVITY_NEW_TASK))
/services\OKSignService.kt:84:                        .build())
/services\OKSignService.kt:85:    }
/services\OKSignService.kt:87:    private fun updateNotification(title: String, text: String, onGoing: Boolean) {
/services\OKSignService.kt:88:        val notification = buildNotification(title, text).build()
/services\OKSignService.kt:89:        if (onGoing) {
/services\OKSignService.kt:90:            notification.flags = notification.flags or NotificationCompat.FLAG_ONGOING_EVENT
/services\OKSignService.kt:91:        }
/services\OKSignService.kt:92:        manager.notify(1, notification)
/services\OKSignService.kt:93:    }
/services\OKSignService.kt:95:    private fun updateNotification(title: String, text: String?, progress: Int, max: Int, indeterminate: Boolean) {
/services\OKSignService.kt:96:        val notification = buildNotification(title, text)
/services\OKSignService.kt:97:                .setProgress(max, progress, indeterminate)
/services\OKSignService.kt:98:                .build()
/services\OKSignService.kt:99:        notification.flags = notification.flags or NotificationCompat.FLAG_ONGOING_EVENT
/services\OKSignService.kt:100:        manager.notify(1, notification)
/services\OKSignService.kt:101:    }
/services\OKSignService.kt:103:    private fun sign(data: SignDataBean) {
/services\OKSignService.kt:104:        val kw = data.kw
/services\OKSignService.kt:105:        updateNotification(getString(R.string.title_signing_progress, position + 1, signData.size), kw + "吧", position, signData.size, false)
/services\OKSignService.kt:106:        TiebaApi.getInstance().sign(kw, data.tbs).enqueue(object : Callback<SignResultBean> {
/services\OKSignService.kt:107:            override fun onFailure(call: Call<SignResultBean>, t: Throwable) {
/services\OKSignService.kt:108:                if (t is TiebaException) {
/services\OKSignService.kt:109:                    updateNotification(getString(R.string.title_signing_progress, position, signData.size), "${kw}吧 × (${t.code}) ${t.message}", position, signData.size, false)
/services\OKSignService.kt:110:                } else {
/services\OKSignService.kt:111:                    updateNotification(getString(R.string.title_signing_progress, position, signData.size), "${kw}吧 × ${t.message}", position, signData.size, false)
/services\OKSignService.kt:112:                }
/services\OKSignService.kt:113:                if (position < signData.size - 1) {
/services\OKSignService.kt:114:                    position += 1
/services\OKSignService.kt:115:                    handler.postDelayed({ sign(signData[position]) }, ThreadLocalRandom.current().nextInt(1000, 3500).toLong())
/services\OKSignService.kt:116:                } else {
/services\OKSignService.kt:117:                    updateNotification("签到完成", getString(R.string.text_oksign_done, signData.size), Intent(this@OKSignService, MainActivity::class.java))
/services\OKSignService.kt:118:                    sendBroadcast(Intent(ACTION_SIGN_SUCCESS_ALL))
/services\OKSignService.kt:119:                    stopForeground(true)
/services\OKSignService.kt:120:                }
/services\OKSignService.kt:121:            }
/services\OKSignService.kt:123:            override fun onResponse(call: Call<SignResultBean>, response: Response<SignResultBean>) {
/services\OKSignService.kt:124:                val signResultBean = response.body() ?: return
/services\OKSignService.kt:125:                if (position < signData.size - 1) {
/services\OKSignService.kt:126:                    position += 1
/services\OKSignService.kt:127:                    if (signResultBean.userInfo != null) {
/services\OKSignService.kt:128:                        updateNotification(getString(R.string.title_signing_progress, position, signData.size), kw + "吧 √ 经验 +" + signResultBean.userInfo.signBonusPoint, position, signData.size, false)
/services\OKSignService.kt:129:                    } else {
/services\OKSignService.kt:130:                        updateNotification(getString(R.string.title_signing_progress, position, signData.size), kw + "吧 √", position, signData.size, false)
/services\OKSignService.kt:131:                    }
/services\OKSignService.kt:132:                    handler.postDelayed({ sign(signData[position]) }, ThreadLocalRandom.current().nextInt(1000, 3500).toLong())
/services\OKSignService.kt:133:                } else {
/services\OKSignService.kt:134:                    updateNotification("签到完成", getString(R.string.text_oksign_done, signData.size), Intent(this@OKSignService, MainActivity::class.java))
/services\OKSignService.kt:135:                    sendBroadcast(Intent(ACTION_SIGN_SUCCESS_ALL))
/services\OKSignService.kt:136:                    stopForeground(true)
/services\OKSignService.kt:137:                }
/services\OKSignService.kt:138:            }
/services\OKSignService.kt:140:        })
/services\OKSignService.kt:141:    }
/services\OKSignService.kt:143:    override fun onHandleIntent(intent: Intent?) {
/services\OKSignService.kt:144:        if (intent != null) {
/services\OKSignService.kt:145:            if (ACTION_START_SIGN == intent.action) {
/services\OKSignService.kt:146:                val bduss = AccountUtil.getBduss(this)
/services\OKSignService.kt:147:                if (bduss != null) {
/services\OKSignService.kt:148:                    AccountUtil.updateUserInfoByBduss(this@OKSignService, bduss, object : CommonCallback<MyInfoBean> {
/services\OKSignService.kt:149:                        override fun onSuccess(data: MyInfoBean) {
/services\OKSignService.kt:150:                            TiebaApi.getInstance().forumRecommend().enqueue(object : Callback<ForumRecommend> {
/services\OKSignService.kt:151:                                override fun onFailure(call: Call<ForumRecommend>, t: Throwable) {
/services\OKSignService.kt:152:                                    updateNotification("签到失败", t.message ?: "未知错误", false)
/services\OKSignService.kt:153:                                    stopForeground(true)
/services\OKSignService.kt:154:                                }
/services\OKSignService.kt:156:                                override fun onResponse(call: Call<ForumRecommend>, response: Response<ForumRecommend>) {
/services\OKSignService.kt:157:                                    val itemBeanList = response.body()?.likeForum ?: return
/services\OKSignService.kt:158:                                    for ((_, forumName, _, isSign) in itemBeanList) {
/services\OKSignService.kt:159:                                        if ("1" != isSign) {
/services\OKSignService.kt:160:                                            signData.add(SignDataBean(forumName, data.data.getItbTbs()))
/services\OKSignService.kt:161:                                        }
/services\OKSignService.kt:162:                                    }
/services\OKSignService.kt:163:                                    startSign()
/services\OKSignService.kt:164:                                }
/services\OKSignService.kt:166:                            })
/services\OKSignService.kt:167:                        }
/services\OKSignService.kt:169:                        override fun onFailure(code: Int, error: String) {
/services\OKSignService.kt:170:                            updateNotification("签到失败", error, false)
/services\OKSignService.kt:171:                            stopForeground(true)
/services\OKSignService.kt:172:                        }
/services\OKSignService.kt:173:                    })
/services\OKSignService.kt:174:                } else {
/services\OKSignService.kt:175:                    updateNotification("签到失败", "请先登录", Intent(this, LoginActivity::class.java))
/services\OKSignService.kt:176:                    stopForeground(true)
/services\OKSignService.kt:177:                }
/services\OKSignService.kt:178:            }
/services\OKSignService.kt:179:        }
/services\OKSignService.kt:180:    }
/services\OKSignService.kt:182:    companion object {
/services\OKSignService.kt:183:        const val TAG = "OKSignService"
/services\OKSignService.kt:184:        const val ACTION_START_SIGN = "com.huanchengfly.tieba.post.service.action.ACTION_SIGN_START"
/services\OKSignService.kt:185:        const val ACTION_SIGN_SUCCESS_ALL = "com.huanchengfly.tieba.post.service.action.SIGN_SUCCESS_ALL"
/services\OKSignService.kt:187:        private val handler = Handler()
/services\OKSignService.kt:188:    }
/services\OKSignService.kt:189:}/ui\about\AboutPage.java:1:package com.huanchengfly.tieba.post.ui.about;
/ui\about\AboutPage.java:3:import android.annotation.SuppressLint;
/ui\about\AboutPage.java:4:import android.content.ActivityNotFoundException;
/ui\about\AboutPage.java:5:import android.content.Context;
/ui\about\AboutPage.java:6:import android.content.Intent;
/ui\about\AboutPage.java:7:import android.view.LayoutInflater;
/ui\about\AboutPage.java:8:import android.view.View;
/ui\about\AboutPage.java:9:import android.view.ViewGroup;
/ui\about\AboutPage.java:11:import androidx.annotation.ColorInt;
/ui\about\AboutPage.java:12:import androidx.annotation.DrawableRes;
/ui\about\AboutPage.java:13:import androidx.annotation.LayoutRes;
/ui\about\AboutPage.java:14:import androidx.annotation.Nullable;
/ui\about\AboutPage.java:15:import androidx.annotation.StringRes;
/ui\about\AboutPage.java:16:import androidx.recyclerview.widget.LinearLayoutManager;
/ui\about\AboutPage.java:17:import androidx.recyclerview.widget.RecyclerView;
/ui\about\AboutPage.java:19:import com.google.android.material.snackbar.Snackbar;
/ui\about\AboutPage.java:20:import com.huanchengfly.tieba.post.ui.about.adapter.AboutPageAdapter;
/ui\about\AboutPage.java:21:import com.huanchengfly.tieba.post.R;
/ui\about\AboutPage.java:22:import com.huanchengfly.tieba.post.utils.Util;
/ui\about\AboutPage.java:24:import java.util.ArrayList;
/ui\about\AboutPage.java:25:import java.util.List;
/ui\about\AboutPage.java:27:public class AboutPage {
/ui\about\AboutPage.java:28:    private final Context mContext;
/ui\about\AboutPage.java:29:    private final LayoutInflater mInflater;
/ui\about\AboutPage.java:30:    private final View mView;
/ui\about\AboutPage.java:31:    private final RecyclerView mRecyclerView;
/ui\about\AboutPage.java:32:    private final List<Item> itemList;
/ui\about\AboutPage.java:33:    private View mHeaderView;
/ui\about\AboutPage.java:34:    private AboutPageAdapter aboutPageAdapter;
/ui\about\AboutPage.java:36:    @SuppressLint("InflateParams")
/ui\about\AboutPage.java:37:    public AboutPage(Context context) {
/ui\about\AboutPage.java:38:        mContext = context;
/ui\about\AboutPage.java:39:        mInflater = LayoutInflater.from(context);
/ui\about\AboutPage.java:40:        mView = mInflater.inflate(R.layout.about_page, null);
/ui\about\AboutPage.java:41:        mRecyclerView = mView.findViewById(R.id.about_recycler_view);
/ui\about\AboutPage.java:42:        aboutPageAdapter = new AboutPageAdapter(mContext);
/ui\about\AboutPage.java:43:        aboutPageAdapter.setHasStableIds(true);
/ui\about\AboutPage.java:44:        mRecyclerView.setLayoutManager(new LinearLayoutManager(mContext));
/ui\about\AboutPage.java:45:        mRecyclerView.setAdapter(aboutPageAdapter);
/ui\about\AboutPage.java:46:        itemList = new ArrayList<>();
/ui\about\AboutPage.java:47:    }
/ui\about\AboutPage.java:49:    public RecyclerView getRecyclerView() {
/ui\about\AboutPage.java:50:        return mRecyclerView;
/ui\about\AboutPage.java:51:    }
/ui\about\AboutPage.java:53:    public View getHeaderView() {
/ui\about\AboutPage.java:54:        return mHeaderView;
/ui\about\AboutPage.java:55:    }
/ui\about\AboutPage.java:57:    public AboutPage setHeaderView(View view) {
/ui\about\AboutPage.java:58:        this.mHeaderView = view;
/ui\about\AboutPage.java:59:        return this;
/ui\about\AboutPage.java:60:    }
/ui\about\AboutPage.java:62:    public AboutPage setHeaderView(@LayoutRes int layoutId) {
/ui\about\AboutPage.java:63:        return this.setHeaderView(View.inflate(mContext, layoutId, null));
/ui\about\AboutPage.java:64:    }
/ui\about\AboutPage.java:66:    public void notifyDataSetChanged() {
/ui\about\AboutPage.java:67:        aboutPageAdapter.setHeaderView(mHeaderView);
/ui\about\AboutPage.java:68:        aboutPageAdapter.setItemList(itemList);
/ui\about\AboutPage.java:69:    }
/ui\about\AboutPage.java:71:    public void into(ViewGroup viewGroup) {
/ui\about\AboutPage.java:72:        aboutPageAdapter.setHeaderView(mHeaderView);
/ui\about\AboutPage.java:73:        aboutPageAdapter.setItemList(itemList);
/ui\about\AboutPage.java:74:        viewGroup.addView(mView);
/ui\about\AboutPage.java:75:    }
/ui\about\AboutPage.java:77:    public AboutPage addTitle(CharSequence title) {
/ui\about\AboutPage.java:78:        itemList.add(new Item(title, true));
/ui\about\AboutPage.java:79:        return this;
/ui\about\AboutPage.java:80:    }
/ui\about\AboutPage.java:82:    public AboutPage addTitle(CharSequence title, @ColorInt int color) {
/ui\about\AboutPage.java:83:        itemList.add(new Item(title, true).setTitleTextColor(color));
/ui\about\AboutPage.java:84:        return this;
/ui\about\AboutPage.java:85:    }
/ui\about\AboutPage.java:87:    public AboutPage addTitle(@StringRes int resId) {
/ui\about\AboutPage.java:88:        return addTitle(mContext.getString(resId));
/ui\about\AboutPage.java:89:    }
/ui\about\AboutPage.java:91:    public AboutPage addItem(Item item) {
/ui\about\AboutPage.java:92:        itemList.add(item);
/ui\about\AboutPage.java:93:        return this;
/ui\about\AboutPage.java:94:    }
/ui\about\AboutPage.java:96:    public static class Item {
/ui\about\AboutPage.java:97:        public static final int TYPE_TITLE = 10;
/ui\about\AboutPage.java:98:        public static final int TYPE_ITEM = 11;
/ui\about\AboutPage.java:100:        private int type;
/ui\about\AboutPage.java:101:        private CharSequence title;
/ui\about\AboutPage.java:102:        private CharSequence subtitle;
/ui\about\AboutPage.java:103:        private int titleTextColor;
/ui\about\AboutPage.java:104:        private int subtitleTextColor;
/ui\about\AboutPage.java:105:        private Icon icon;
/ui\about\AboutPage.java:106:        private View.OnClickListener onClickListener;
/ui\about\AboutPage.java:108:        public Item() {
/ui\about\AboutPage.java:109:            setTitleTextColor(-1);
/ui\about\AboutPage.java:110:            setSubtitleTextColor(-1);
/ui\about\AboutPage.java:111:        }
/ui\about\AboutPage.java:113:        public Item(CharSequence title) {
/ui\about\AboutPage.java:114:            this(title, false);
/ui\about\AboutPage.java:115:        }
/ui\about\AboutPage.java:117:        public Item(CharSequence title, boolean isTitle) {
/ui\about\AboutPage.java:118:            this();
/ui\about\AboutPage.java:119:            setTitle(title);
/ui\about\AboutPage.java:120:            setSubtitle(null);
/ui\about\AboutPage.java:121:            setIcon((Icon) null);
/ui\about\AboutPage.java:122:            setType(isTitle ? TYPE_TITLE : TYPE_ITEM);
/ui\about\AboutPage.java:123:            if (isTitle) {
/ui\about\AboutPage.java:124:                setTitleTextColor(0xFF4477E0);
/ui\about\AboutPage.java:125:            }
/ui\about\AboutPage.java:126:        }
/ui\about\AboutPage.java:128:        public Item(CharSequence title, CharSequence subtitle) {
/ui\about\AboutPage.java:129:            this();
/ui\about\AboutPage.java:130:            setTitle(title);
/ui\about\AboutPage.java:131:            setSubtitle(subtitle);
/ui\about\AboutPage.java:132:            setIcon((Icon) null);
/ui\about\AboutPage.java:133:            setType(TYPE_ITEM);
/ui\about\AboutPage.java:134:        }
/ui\about\AboutPage.java:136:        public Item(CharSequence title, CharSequence subtitle, @DrawableRes int drawableId) {
/ui\about\AboutPage.java:137:            this(title, subtitle, new Icon().setIconDrawable(drawableId));
/ui\about\AboutPage.java:138:        }
/ui\about\AboutPage.java:140:        public Item(CharSequence title, CharSequence subtitle, @DrawableRes int drawableId, @ColorInt int tint) {
/ui\about\AboutPage.java:141:            this(title, subtitle, new Icon().setIconDrawable(drawableId).setIconTint(tint));
/ui\about\AboutPage.java:142:        }
/ui\about\AboutPage.java:144:        public Item(CharSequence title, CharSequence subtitle, String url) {
/ui\about\AboutPage.java:145:            this(title, subtitle, new Icon().setIconUrl(url));
/ui\about\AboutPage.java:146:        }
/ui\about\AboutPage.java:148:        public Item(CharSequence title, CharSequence subtitle, Icon icon) {
/ui\about\AboutPage.java:149:            this();
/ui\about\AboutPage.java:150:            setTitle(title);
/ui\about\AboutPage.java:151:            setSubtitle(subtitle);
/ui\about\AboutPage.java:152:            setIcon(icon);
/ui\about\AboutPage.java:153:            setType(TYPE_ITEM);
/ui\about\AboutPage.java:154:        }
/ui\about\AboutPage.java:156:        public int getTitleTextColor() {
/ui\about\AboutPage.java:157:            return titleTextColor;
/ui\about\AboutPage.java:158:        }
/ui\about\AboutPage.java:160:        public Item setTitleTextColor(@ColorInt int titleTextColor) {
/ui\about\AboutPage.java:161:            this.titleTextColor = titleTextColor;
/ui\about\AboutPage.java:162:            return this;
/ui\about\AboutPage.java:163:        }
/ui\about\AboutPage.java:165:        public int getSubtitleTextColor() {
/ui\about\AboutPage.java:166:            return subtitleTextColor;
/ui\about\AboutPage.java:167:        }
/ui\about\AboutPage.java:169:        public Item setSubtitleTextColor(@ColorInt int subtitleTextColor) {
/ui\about\AboutPage.java:170:            this.subtitleTextColor = subtitleTextColor;
/ui\about\AboutPage.java:171:            return this;
/ui\about\AboutPage.java:172:        }
/ui\about\AboutPage.java:174:        public int getType() {
/ui\about\AboutPage.java:175:            return type;
/ui\about\AboutPage.java:176:        }
/ui\about\AboutPage.java:178:        public Item setType(int type) {
/ui\about\AboutPage.java:179:            this.type = type;
/ui\about\AboutPage.java:180:            return this;
/ui\about\AboutPage.java:181:        }
/ui\about\AboutPage.java:183:        public Item setIntent(Intent intent) {
/ui\about\AboutPage.java:184:            setOnClickListener(v -> {
/ui\about\AboutPage.java:185:                try {
/ui\about\AboutPage.java:186:                    v.getContext().startActivity(intent);
/ui\about\AboutPage.java:187:                } catch (ActivityNotFoundException e) {
/ui\about\AboutPage.java:188:                    e.printStackTrace();
/ui\about\AboutPage.java:189:                    Util.createSnackbar(v, R.string.toast_open_error, Snackbar.LENGTH_SHORT).show();
/ui\about\AboutPage.java:190:                }
/ui\about\AboutPage.java:191:            });
/ui\about\AboutPage.java:192:            return this;
/ui\about\AboutPage.java:193:        }
/ui\about\AboutPage.java:195:        public View.OnClickListener getOnClickListener() {
/ui\about\AboutPage.java:196:            return onClickListener;
/ui\about\AboutPage.java:197:        }
/ui\about\AboutPage.java:199:        public Item setOnClickListener(View.OnClickListener onClickListener) {
/ui\about\AboutPage.java:200:            this.onClickListener = onClickListener;
/ui\about\AboutPage.java:201:            return this;
/ui\about\AboutPage.java:202:        }
/ui\about\AboutPage.java:204:        public CharSequence getTitle() {
/ui\about\AboutPage.java:205:            return title;
/ui\about\AboutPage.java:206:        }
/ui\about\AboutPage.java:208:        public Item setTitle(CharSequence title) {
/ui\about\AboutPage.java:209:            this.title = title;
/ui\about\AboutPage.java:210:            return this;
/ui\about\AboutPage.java:211:        }
/ui\about\AboutPage.java:213:        public CharSequence getSubtitle() {
/ui\about\AboutPage.java:214:            return subtitle;
/ui\about\AboutPage.java:215:        }
/ui\about\AboutPage.java:217:        public Item setSubtitle(CharSequence subtitle) {
/ui\about\AboutPage.java:218:            this.subtitle = subtitle;
/ui\about\AboutPage.java:219:            return this;
/ui\about\AboutPage.java:220:        }
/ui\about\AboutPage.java:222:        public Icon getIcon() {
/ui\about\AboutPage.java:223:            return icon;
/ui\about\AboutPage.java:224:        }
/ui\about\AboutPage.java:226:        public Item setIcon(int drawable) {
/ui\about\AboutPage.java:227:            return setIcon(new Icon().setIconDrawable(drawable));
/ui\about\AboutPage.java:228:        }
/ui\about\AboutPage.java:230:        public Item setIcon(@Nullable Icon icon) {
/ui\about\AboutPage.java:231:            this.icon = icon;
/ui\about\AboutPage.java:232:            return this;
/ui\about\AboutPage.java:233:        }
/ui\about\AboutPage.java:235:        public Item setIcon(String url) {
/ui\about\AboutPage.java:236:            return setIcon(new Icon().setIconUrl(url));
/ui\about\AboutPage.java:237:        }
/ui\about\AboutPage.java:239:        public Item setIcon(int drawable, @ColorInt int tint) {
/ui\about\AboutPage.java:240:            return setIcon(new Icon().setIconDrawable(drawable).setIconTint(tint));
/ui\about\AboutPage.java:241:        }
/ui\about\AboutPage.java:242:    }
/ui\about\AboutPage.java:244:    public static class Icon {
/ui\about\AboutPage.java:245:        public static final int TYPE_DRAWABLE = 0;
/ui\about\AboutPage.java:246:        public static final int TYPE_URL = 1;
/ui\about\AboutPage.java:248:        private int type;
/ui\about\AboutPage.java:249:        private int drawable;
/ui\about\AboutPage.java:250:        private String url;
/ui\about\AboutPage.java:251:        private int tint;
/ui\about\AboutPage.java:253:        public Icon() {
/ui\about\AboutPage.java:254:            setIconTint(0xFF4477E0);
/ui\about\AboutPage.java:255:        }
/ui\about\AboutPage.java:257:        public int getType() {
/ui\about\AboutPage.java:258:            return type;
/ui\about\AboutPage.java:259:        }
/ui\about\AboutPage.java:261:        public int getDrawable() {
/ui\about\AboutPage.java:262:            return drawable;
/ui\about\AboutPage.java:263:        }
/ui\about\AboutPage.java:265:        public int getIconTint() {
/ui\about\AboutPage.java:266:            return tint;
/ui\about\AboutPage.java:267:        }
/ui\about\AboutPage.java:269:        public Icon setIconTint(@ColorInt int color) {
/ui\about\AboutPage.java:270:            this.tint = color;
/ui\about\AboutPage.java:271:            return this;
/ui\about\AboutPage.java:272:        }
/ui\about\AboutPage.java:274:        public Icon setIconDrawable(@DrawableRes int drawable) {
/ui\about\AboutPage.java:275:            this.drawable = drawable;
/ui\about\AboutPage.java:276:            this.type = TYPE_DRAWABLE;
/ui\about\AboutPage.java:277:            return this;
/ui\about\AboutPage.java:278:        }
/ui\about\AboutPage.java:280:        public String getIconUrl() {
/ui\about\AboutPage.java:281:            return url;
/ui\about\AboutPage.java:282:        }
/ui\about\AboutPage.java:284:        public Icon setIconUrl(String url) {
/ui\about\AboutPage.java:285:            this.url = url;
/ui\about\AboutPage.java:286:            this.type = TYPE_URL;
/ui\about\AboutPage.java:287:            return this;
/ui\about\AboutPage.java:288:        }
/ui\about\AboutPage.java:289:    }
/ui\about\AboutPage.java:290:}
/ui\about\ViewHolder.java:1:package com.huanchengfly.tieba.post.ui.about;
/ui\about\ViewHolder.java:3:import android.content.Context;
/ui\about\ViewHolder.java:4:import android.util.SparseArray;
/ui\about\ViewHolder.java:5:import android.view.LayoutInflater;
/ui\about\ViewHolder.java:6:import android.view.View;
/ui\about\ViewHolder.java:7:import android.view.ViewGroup;
/ui\about\ViewHolder.java:8:import android.widget.TextView;
/ui\about\ViewHolder.java:10:import androidx.annotation.IdRes;
/ui\about\ViewHolder.java:11:import androidx.annotation.LayoutRes;
/ui\about\ViewHolder.java:12:import androidx.annotation.NonNull;
/ui\about\ViewHolder.java:13:import androidx.annotation.Nullable;
/ui\about\ViewHolder.java:14:import androidx.recyclerview.widget.RecyclerView;
/ui\about\ViewHolder.java:16:public class ViewHolder extends RecyclerView.ViewHolder {
/ui\about\ViewHolder.java:17:    private SparseArray<View> mViews;
/ui\about\ViewHolder.java:18:    private View itemView;
/ui\about\ViewHolder.java:20:    private ViewHolder(@NonNull View itemView) {
/ui\about\ViewHolder.java:21:        super(itemView);
/ui\about\ViewHolder.java:22:        this.itemView = itemView;
/ui\about\ViewHolder.java:23:        this.mViews = new SparseArray<View>();
/ui\about\ViewHolder.java:24:    }
/ui\about\ViewHolder.java:26:    public static ViewHolder create(Context context, @LayoutRes int layoutId) {
/ui\about\ViewHolder.java:27:        return create(context, layoutId, null);
/ui\about\ViewHolder.java:28:    }
/ui\about\ViewHolder.java:30:    public static ViewHolder create(Context context, @LayoutRes int layoutId, @Nullable ViewGroup parent) {
/ui\about\ViewHolder.java:31:        return create(context, layoutId, parent, parent != null);
/ui\about\ViewHolder.java:32:    }
/ui\about\ViewHolder.java:34:    public static ViewHolder create(Context context, @LayoutRes int layoutId, @Nullable ViewGroup parent, boolean attachToRoot) {
/ui\about\ViewHolder.java:35:        return new ViewHolder(LayoutInflater.from(context).inflate(layoutId, parent, attachToRoot));
/ui\about\ViewHolder.java:36:    }
/ui\about\ViewHolder.java:38:    public static ViewHolder create(View view) {
/ui\about\ViewHolder.java:39:        return new ViewHolder(view);
/ui\about\ViewHolder.java:40:    }
/ui\about\ViewHolder.java:42:    public <T extends View> T getView(@IdRes int id) {
/ui\about\ViewHolder.java:43:        View view = this.mViews.get(id);
/ui\about\ViewHolder.java:44:        if (view == null) {
/ui\about\ViewHolder.java:45:            view = this.itemView.findViewById(id);
/ui\about\ViewHolder.java:46:            this.mViews.put(id, view);
/ui\about\ViewHolder.java:47:        }
/ui\about\ViewHolder.java:48:        return (T) view;
/ui\about\ViewHolder.java:49:    }
/ui\about\ViewHolder.java:51:    public void setText(int viewId, CharSequence text) {
/ui\about\ViewHolder.java:52:        TextView textView = this.getView(viewId);
/ui\about\ViewHolder.java:53:        textView.setText(text);
/ui\about\ViewHolder.java:54:    }
/ui\about\ViewHolder.java:56:    public void setText(int viewId, int textId) {
/ui\about\ViewHolder.java:57:        TextView textView = this.getView(viewId);
/ui\about\ViewHolder.java:58:        textView.setText(textId);
/ui\about\ViewHolder.java:59:    }
/ui\about\ViewHolder.java:61:    public void setTextColor(int viewId, int colorId) {
/ui\about\ViewHolder.java:62:        TextView textView = this.getView(viewId);
/ui\about\ViewHolder.java:63:        textView.setTextColor(colorId);
/ui\about\ViewHolder.java:64:    }
/ui\about\ViewHolder.java:66:    public void setTextSize(int viewId, int size) {
/ui\about\ViewHolder.java:67:        TextView textView = this.getView(viewId);
/ui\about\ViewHolder.java:68:        textView.setTextSize(size);
/ui\about\ViewHolder.java:69:    }
/ui\about\ViewHolder.java:71:    public void setOnClickListener(int viewId, View.OnClickListener clickListener) {
/ui\about\ViewHolder.java:72:        View view = this.getView(viewId);
/ui\about\ViewHolder.java:73:        view.setOnClickListener(clickListener);
/ui\about\ViewHolder.java:74:    }
/ui\about\ViewHolder.java:76:    public void setVisibility(int viewId, int visibility) {
/ui\about\ViewHolder.java:77:        View view = this.getView(viewId);
/ui\about\ViewHolder.java:78:        view.setVisibility(visibility);
/ui\about\ViewHolder.java:79:    }
/ui\about\ViewHolder.java:80:}
/ui\about\adapter\AboutPageAdapter.java:1:package com.huanchengfly.tieba.post.ui.about.adapter;
/ui\about\adapter\AboutPageAdapter.java:3:import android.content.Context;
/ui\about\adapter\AboutPageAdapter.java:4:import android.content.res.ColorStateList;
/ui\about\adapter\AboutPageAdapter.java:5:import android.view.View;
/ui\about\adapter\AboutPageAdapter.java:6:import android.widget.ImageView;
/ui\about\adapter\AboutPageAdapter.java:7:import android.widget.RelativeLayout;
/ui\about\adapter\AboutPageAdapter.java:9:import com.bumptech.glide.Glide;
/ui\about\adapter\AboutPageAdapter.java:10:import com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions;
/ui\about\adapter\AboutPageAdapter.java:11:import com.bumptech.glide.request.RequestOptions;
/ui\about\adapter\AboutPageAdapter.java:12:import com.huanchengfly.tieba.post.ui.about.AboutPage;
/ui\about\adapter\AboutPageAdapter.java:13:import com.huanchengfly.tieba.post.ui.about.ViewHolder;
/ui\about\adapter\AboutPageAdapter.java:14:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/ui\about\adapter\AboutPageAdapter.java:15:import com.huanchengfly.tieba.post.R;
/ui\about\adapter\AboutPageAdapter.java:16:import com.huanchengfly.tieba.post.utils.DisplayUtil;
/ui\about\adapter\AboutPageAdapter.java:18:public class AboutPageAdapter extends BaseAdapter<AboutPage.Item> {
/ui\about\adapter\AboutPageAdapter.java:19:    public AboutPageAdapter(Context context) {
/ui\about\adapter\AboutPageAdapter.java:20:        super(context);
/ui\about\adapter\AboutPageAdapter.java:21:    }
/ui\about\adapter\AboutPageAdapter.java:23:    public long getItemId(int position) {
/ui\about\adapter\AboutPageAdapter.java:24:        return position;
/ui\about\adapter\AboutPageAdapter.java:25:    }
/ui\about\adapter\AboutPageAdapter.java:27:    @Override
/ui\about\adapter\AboutPageAdapter.java:28:    protected int getItemLayoutId() {
/ui\about\adapter\AboutPageAdapter.java:29:        return R.layout.item_about;
/ui\about\adapter\AboutPageAdapter.java:30:    }
/ui\about\adapter\AboutPageAdapter.java:32:    @Override
/ui\about\adapter\AboutPageAdapter.java:33:    protected void convert(ViewHolder viewHolder, AboutPage.Item item, int position) {
/ui\about\adapter\AboutPageAdapter.java:34:        int textColor = ThemeUtils.getColorByAttr(mContext, R.attr.colorText);
/ui\about\adapter\AboutPageAdapter.java:35:        int secondaryTextColor = ThemeUtils.getColorByAttr(mContext, R.attr.colorTextSecondary);
/ui\about\adapter\AboutPageAdapter.java:36:        viewHolder.setOnClickListener(R.id.item_about_root, item.getOnClickListener());
/ui\about\adapter\AboutPageAdapter.java:37:        viewHolder.setVisibility(R.id.item_about_icon_holder, item.getIcon() == null ? item.getType() == AboutPage.Item.TYPE_TITLE ? View.GONE : View.INVISIBLE : View.VISIBLE);
/ui\about\adapter\AboutPageAdapter.java:38:        viewHolder.setVisibility(R.id.item_about_divider, item.getType() == AboutPage.Item.TYPE_TITLE && position > 0 ? View.VISIBLE : View.GONE);
/ui\about\adapter\AboutPageAdapter.java:39:        viewHolder.setVisibility(R.id.item_about_subtitle, item.getSubtitle() == null ? View.GONE : View.VISIBLE);
/ui\about\adapter\AboutPageAdapter.java:40:        viewHolder.setText(R.id.item_about_title, item.getTitle());
/ui\about\adapter\AboutPageAdapter.java:41:        viewHolder.setText(R.id.item_about_subtitle, item.getSubtitle());
/ui\about\adapter\AboutPageAdapter.java:42:        viewHolder.setTextColor(R.id.item_about_title, item.getTitleTextColor() != -1 ? item.getTitleTextColor() : textColor);
/ui\about\adapter\AboutPageAdapter.java:43:        viewHolder.setTextColor(R.id.item_about_subtitle, item.getSubtitleTextColor() != -1 ? item.getSubtitleTextColor() : secondaryTextColor);
/ui\about\adapter\AboutPageAdapter.java:44:        if (item.getType() == AboutPage.Item.TYPE_ITEM && item.getIcon() != null) {
/ui\about\adapter\AboutPageAdapter.java:45:            switch (item.getIcon().getType()) {
/ui\about\adapter\AboutPageAdapter.java:46:                case AboutPage.Icon.TYPE_DRAWABLE:
/ui\about\adapter\AboutPageAdapter.java:47:                    ImageView iconView = viewHolder.getView(R.id.item_about_icon);
/ui\about\adapter\AboutPageAdapter.java:48:                    iconView.setImageResource(item.getIcon().getDrawable());
/ui\about\adapter\AboutPageAdapter.java:49:                    iconView.setImageTintList(ColorStateList.valueOf(item.getIcon().getIconTint()));
/ui\about\adapter\AboutPageAdapter.java:50:                    RelativeLayout.LayoutParams iconLayoutParams = (RelativeLayout.LayoutParams) iconView.getLayoutParams();
/ui\about\adapter\AboutPageAdapter.java:51:                    iconLayoutParams.width = iconLayoutParams.height = DisplayUtil.dp2px(mContext, 24);
/ui\about\adapter\AboutPageAdapter.java:52:                    iconView.setLayoutParams(iconLayoutParams);
/ui\about\adapter\AboutPageAdapter.java:53:                    break;
/ui\about\adapter\AboutPageAdapter.java:54:                case AboutPage.Icon.TYPE_URL:
/ui\about\adapter\AboutPageAdapter.java:55:                    ImageView avatarView = viewHolder.getView(R.id.item_about_icon);
/ui\about\adapter\AboutPageAdapter.java:56:                    Glide.with(mContext)
/ui\about\adapter\AboutPageAdapter.java:57:                            .load(item.getIcon().getIconUrl())
/ui\about\adapter\AboutPageAdapter.java:58:                            .apply(new RequestOptions()
/ui\about\adapter\AboutPageAdapter.java:59:                                    .placeholder(R.drawable.bg_placeholder_circle)
/ui\about\adapter\AboutPageAdapter.java:60:                                    .circleCrop())
/ui\about\adapter\AboutPageAdapter.java:61:                            .transition(DrawableTransitionOptions.withCrossFade())
/ui\about\adapter\AboutPageAdapter.java:62:                            .into(avatarView);
/ui\about\adapter\AboutPageAdapter.java:63:                    avatarView.setImageTintList(null);
/ui\about\adapter\AboutPageAdapter.java:64:                    RelativeLayout.LayoutParams avatarLayoutParams = (RelativeLayout.LayoutParams) avatarView.getLayoutParams();
/ui\about\adapter\AboutPageAdapter.java:65:                    avatarLayoutParams.width = avatarLayoutParams.height = DisplayUtil.dp2px(mContext, 40);
/ui\about\adapter\AboutPageAdapter.java:66:                    avatarView.setLayoutParams(avatarLayoutParams);
/ui\about\adapter\AboutPageAdapter.java:67:                    break;
/ui\about\adapter\AboutPageAdapter.java:68:            }
/ui\about\adapter\AboutPageAdapter.java:69:        }
/ui\about\adapter\AboutPageAdapter.java:70:    }
/ui\about\adapter\AboutPageAdapter.java:71:}
/ui\about\adapter\BaseAdapter.java:1:package com.huanchengfly.tieba.post.ui.about.adapter;
/ui\about\adapter\BaseAdapter.java:3:import android.content.Context;
/ui\about\adapter\BaseAdapter.java:4:import android.view.View;
/ui\about\adapter\BaseAdapter.java:5:import android.view.ViewGroup;
/ui\about\adapter\BaseAdapter.java:7:import androidx.annotation.LayoutRes;
/ui\about\adapter\BaseAdapter.java:8:import androidx.annotation.NonNull;
/ui\about\adapter\BaseAdapter.java:9:import androidx.recyclerview.widget.RecyclerView;
/ui\about\adapter\BaseAdapter.java:11:import com.huanchengfly.tieba.post.ui.about.ViewHolder;
/ui\about\adapter\BaseAdapter.java:13:import java.util.ArrayList;
/ui\about\adapter\BaseAdapter.java:14:import java.util.List;
/ui\about\adapter\BaseAdapter.java:16:public abstract class BaseAdapter<T> extends RecyclerView.Adapter<ViewHolder> {
/ui\about\adapter\BaseAdapter.java:17:    private static final int TYPE_HEADER = 10;
/ui\about\adapter\BaseAdapter.java:18:    private static final int TYPE_COMMON = 11;
/ui\about\adapter\BaseAdapter.java:19:    protected Context mContext;
/ui\about\adapter\BaseAdapter.java:20:    private View mHeaderView;
/ui\about\adapter\BaseAdapter.java:21:    private List<T> itemList;
/ui\about\adapter\BaseAdapter.java:23:    public BaseAdapter(Context context) {
/ui\about\adapter\BaseAdapter.java:24:        super();
/ui\about\adapter\BaseAdapter.java:25:        mContext = context;
/ui\about\adapter\BaseAdapter.java:26:        itemList = new ArrayList<>();
/ui\about\adapter\BaseAdapter.java:27:        mHeaderView = null;
/ui\about\adapter\BaseAdapter.java:28:    }
/ui\about\adapter\BaseAdapter.java:30:    public long getItemId(int position) {
/ui\about\adapter\BaseAdapter.java:31:        return position;
/ui\about\adapter\BaseAdapter.java:32:    }
/ui\about\adapter\BaseAdapter.java:34:    public List<T> getItemList() {
/ui\about\adapter\BaseAdapter.java:35:        return itemList;
/ui\about\adapter\BaseAdapter.java:36:    }
/ui\about\adapter\BaseAdapter.java:38:    public BaseAdapter setItemList(List<T> itemList) {
/ui\about\adapter\BaseAdapter.java:39:        this.itemList = itemList;
/ui\about\adapter\BaseAdapter.java:40:        notifyDataSetChanged();
/ui\about\adapter\BaseAdapter.java:41:        return this;
/ui\about\adapter\BaseAdapter.java:42:    }
/ui\about\adapter\BaseAdapter.java:44:    public View getHeaderView() {
/ui\about\adapter\BaseAdapter.java:45:        return mHeaderView;
/ui\about\adapter\BaseAdapter.java:46:    }
/ui\about\adapter\BaseAdapter.java:48:    public void setHeaderView(View headerView) {
/ui\about\adapter\BaseAdapter.java:49:        boolean insert = mHeaderView == null;
/ui\about\adapter\BaseAdapter.java:50:        mHeaderView = headerView;
/ui\about\adapter\BaseAdapter.java:51:        if (insert) {
/ui\about\adapter\BaseAdapter.java:52:            notifyItemInserted(0);
/ui\about\adapter\BaseAdapter.java:53:        } else {
/ui\about\adapter\BaseAdapter.java:54:            notifyItemChanged(0);
/ui\about\adapter\BaseAdapter.java:55:        }
/ui\about\adapter\BaseAdapter.java:56:    }
/ui\about\adapter\BaseAdapter.java:58:    public void setHeaderView(@LayoutRes int layoutId) {
/ui\about\adapter\BaseAdapter.java:59:        setHeaderView(View.inflate(mContext, layoutId, null));
/ui\about\adapter\BaseAdapter.java:60:    }
/ui\about\adapter\BaseAdapter.java:62:    @Override
/ui\about\adapter\BaseAdapter.java:63:    public final int getItemViewType(int position) {
/ui\about\adapter\BaseAdapter.java:64:        if (position == 0 && mHeaderView != null) {
/ui\about\adapter\BaseAdapter.java:65:            return TYPE_HEADER;
/ui\about\adapter\BaseAdapter.java:66:        }
/ui\about\adapter\BaseAdapter.java:67:        return TYPE_COMMON;
/ui\about\adapter\BaseAdapter.java:68:    }
/ui\about\adapter\BaseAdapter.java:70:    @NonNull
/ui\about\adapter\BaseAdapter.java:71:    @Override
/ui\about\adapter\BaseAdapter.java:72:    public final ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
/ui\about\adapter\BaseAdapter.java:73:        if (viewType == TYPE_HEADER && mHeaderView != null) {
/ui\about\adapter\BaseAdapter.java:74:            return ViewHolder.create(mHeaderView);
/ui\about\adapter\BaseAdapter.java:75:        } else {
/ui\about\adapter\BaseAdapter.java:76:            return ViewHolder.create(mContext, getItemLayoutId(), parent, false);
/ui\about\adapter\BaseAdapter.java:77:        }
/ui\about\adapter\BaseAdapter.java:78:    }
/ui\about\adapter\BaseAdapter.java:80:    @Override
/ui\about\adapter\BaseAdapter.java:81:    public final void onBindViewHolder(@NonNull ViewHolder holder, int position) {
/ui\about\adapter\BaseAdapter.java:82:        if (position == 0 && mHeaderView != null) {
/ui\about\adapter\BaseAdapter.java:83:            return;
/ui\about\adapter\BaseAdapter.java:84:        }
/ui\about\adapter\BaseAdapter.java:85:        if (mHeaderView != null) {
/ui\about\adapter\BaseAdapter.java:86:            position -= 1;
/ui\about\adapter\BaseAdapter.java:87:        }
/ui\about\adapter\BaseAdapter.java:88:        convert(holder, itemList.get(position), position);
/ui\about\adapter\BaseAdapter.java:89:    }
/ui\about\adapter\BaseAdapter.java:92:    @Override
/ui\about\adapter\BaseAdapter.java:93:    public final int getItemCount() {
/ui\about\adapter\BaseAdapter.java:94:        return (mHeaderView == null ? 0 : 1) + itemList.size();
/ui\about\adapter\BaseAdapter.java:95:    }
/ui\about\adapter\BaseAdapter.java:97:    protected abstract int getItemLayoutId();
/ui\about\adapter\BaseAdapter.java:99:    protected abstract void convert(ViewHolder viewHolder, T item, int position);
/ui\about\adapter\BaseAdapter.java:100:}
/ui\intro\BaseIntroActivity.java:1:package com.huanchengfly.tieba.post.ui.intro;
/ui\intro\BaseIntroActivity.java:3:import android.os.Bundle;
/ui\intro\BaseIntroActivity.java:4:import android.view.View;
/ui\intro\BaseIntroActivity.java:6:import androidx.annotation.ColorInt;
/ui\intro\BaseIntroActivity.java:7:import androidx.appcompat.app.AppCompatActivity;
/ui\intro\BaseIntroActivity.java:8:import androidx.viewpager.widget.ViewPager;
/ui\intro\BaseIntroActivity.java:10:import com.google.android.material.button.MaterialButton;
/ui\intro\BaseIntroActivity.java:11:import com.huanchengfly.tieba.post.ui.intro.adapters.ViewPagerAdapter;
/ui\intro\BaseIntroActivity.java:12:import com.huanchengfly.tieba.post.ui.intro.fragments.BaseIntroFragment;
/ui\intro\BaseIntroActivity.java:13:import com.huanchengfly.tieba.post.ui.intro.widgets.MyViewPager;
/ui\intro\BaseIntroActivity.java:14:import com.huanchengfly.tieba.post.R;
/ui\intro\BaseIntroActivity.java:16:public abstract class BaseIntroActivity extends AppCompatActivity implements View.OnClickListener, ViewPager.OnPageChangeListener {
/ui\intro\BaseIntroActivity.java:17:    public static final String TAG = BaseIntroActivity.class.getSimpleName();
/ui\intro\BaseIntroActivity.java:19:    private MaterialButton nextButton;
/ui\intro\BaseIntroActivity.java:20:    private MaterialButton prevButton;
/ui\intro\BaseIntroActivity.java:21:    private ViewPagerAdapter adapter;
/ui\intro\BaseIntroActivity.java:22:    private MyViewPager myViewPager;
/ui\intro\BaseIntroActivity.java:24:    protected @ColorInt
/ui\intro\BaseIntroActivity.java:25:    int getColor() {
/ui\intro\BaseIntroActivity.java:26:        return getResources().getColor(R.color.colorAccent);
/ui\intro\BaseIntroActivity.java:27:    }
/ui\intro\BaseIntroActivity.java:29:    public void setNextButtonEnabled(boolean enabled) {
/ui\intro\BaseIntroActivity.java:30:        if (enabled) {
/ui\intro\BaseIntroActivity.java:31:            nextButton.setVisibility(View.VISIBLE);
/ui\intro\BaseIntroActivity.java:32:        } else {
/ui\intro\BaseIntroActivity.java:33:            nextButton.setVisibility(View.INVISIBLE);
/ui\intro\BaseIntroActivity.java:34:        }
/ui\intro\BaseIntroActivity.java:35:    }
/ui\intro\BaseIntroActivity.java:37:    private void refreshButtonState(int position) {
/ui\intro\BaseIntroActivity.java:38:        BaseIntroFragment introFragment = (BaseIntroFragment) adapter.getItem(position);
/ui\intro\BaseIntroActivity.java:39:        setNextButtonEnabled(introFragment.getDefaultNextButtonEnabled());
/ui\intro\BaseIntroActivity.java:40:        if (introFragment.getNextButton() != null) {
/ui\intro\BaseIntroActivity.java:41:            nextButton.setText(introFragment.getNextButton());
/ui\intro\BaseIntroActivity.java:42:        } else {
/ui\intro\BaseIntroActivity.java:43:            if (position + 1 >= adapter.getCount()) {
/ui\intro\BaseIntroActivity.java:44:                nextButton.setText(R.string.button_next_last);
/ui\intro\BaseIntroActivity.java:45:            } else {
/ui\intro\BaseIntroActivity.java:46:                nextButton.setText(R.string.button_next_default);
/ui\intro\BaseIntroActivity.java:47:            }
/ui\intro\BaseIntroActivity.java:48:        }
/ui\intro\BaseIntroActivity.java:49:        if (adapter.getCount() > 0 && position > 0) {
/ui\intro\BaseIntroActivity.java:50:            prevButton.setVisibility(View.VISIBLE);
/ui\intro\BaseIntroActivity.java:51:        } else {
/ui\intro\BaseIntroActivity.java:52:            prevButton.setVisibility(View.INVISIBLE);
/ui\intro\BaseIntroActivity.java:53:        }
/ui\intro\BaseIntroActivity.java:54:    }
/ui\intro\BaseIntroActivity.java:56:    @Override
/ui\intro\BaseIntroActivity.java:57:    protected void onCreate(Bundle savedInstanceState) {
/ui\intro\BaseIntroActivity.java:58:        super.onCreate(savedInstanceState);
/ui\intro\BaseIntroActivity.java:59:        setContentView(R.layout.activity_intro);
/ui\intro\BaseIntroActivity.java:60:        nextButton = findViewById(R.id.button_next);
/ui\intro\BaseIntroActivity.java:61:        prevButton = findViewById(R.id.button_prev);
/ui\intro\BaseIntroActivity.java:62:        nextButton.setOnClickListener(this);
/ui\intro\BaseIntroActivity.java:63:        nextButton.setBackgroundColor(getColor());
/ui\intro\BaseIntroActivity.java:64:        prevButton.setOnClickListener(this);
/ui\intro\BaseIntroActivity.java:65:        myViewPager = findViewById(R.id.view_pager);
/ui\intro\BaseIntroActivity.java:66:        adapter = new ViewPagerAdapter(getSupportFragmentManager());
/ui\intro\BaseIntroActivity.java:67:        myViewPager.addOnPageChangeListener(this);
/ui\intro\BaseIntroActivity.java:68:        myViewPager.setCanScroll(false);
/ui\intro\BaseIntroActivity.java:69:        onCreateIntro();
/ui\intro\BaseIntroActivity.java:70:        myViewPager.setAdapter(adapter);
/ui\intro\BaseIntroActivity.java:71:    }
/ui\intro\BaseIntroActivity.java:73:    public ViewPagerAdapter getAdapter() {
/ui\intro\BaseIntroActivity.java:74:        return adapter;
/ui\intro\BaseIntroActivity.java:75:    }
/ui\intro\BaseIntroActivity.java:77:    protected abstract void onCreateIntro();
/ui\intro\BaseIntroActivity.java:79:    @Override
/ui\intro\BaseIntroActivity.java:80:    public void onBackPressed() {
/ui\intro\BaseIntroActivity.java:81:        if (myViewPager.getCurrentItem() - 1 >= 0) {
/ui\intro\BaseIntroActivity.java:82:            prev();
/ui\intro\BaseIntroActivity.java:83:            return;
/ui\intro\BaseIntroActivity.java:84:        }
/ui\intro\BaseIntroActivity.java:85:        super.onBackPressed();
/ui\intro\BaseIntroActivity.java:86:    }
/ui\intro\BaseIntroActivity.java:88:    @Override
/ui\intro\BaseIntroActivity.java:89:    public void onClick(View v) {
/ui\intro\BaseIntroActivity.java:90:        switch (v.getId()) {
/ui\intro\BaseIntroActivity.java:91:            case R.id.button_next:
/ui\intro\BaseIntroActivity.java:92:                if (adapter.getCurrentFragmentPosition() + 1 >= adapter.getCount()) {
/ui\intro\BaseIntroActivity.java:93:                    onFinish();
/ui\intro\BaseIntroActivity.java:94:                    finish();
/ui\intro\BaseIntroActivity.java:95:                    break;
/ui\intro\BaseIntroActivity.java:96:                }
/ui\intro\BaseIntroActivity.java:97:                if (((BaseIntroFragment) adapter.getItem(adapter.getCurrentFragmentPosition())).onNext()) {
/ui\intro\BaseIntroActivity.java:98:                    break;
/ui\intro\BaseIntroActivity.java:99:                }
/ui\intro\BaseIntroActivity.java:100:                next();
/ui\intro\BaseIntroActivity.java:101:                break;
/ui\intro\BaseIntroActivity.java:102:            case R.id.button_prev:
/ui\intro\BaseIntroActivity.java:103:                prev();
/ui\intro\BaseIntroActivity.java:104:                break;
/ui\intro\BaseIntroActivity.java:105:        }
/ui\intro\BaseIntroActivity.java:106:    }
/ui\intro\BaseIntroActivity.java:108:    protected void onFinish() {
/ui\intro\BaseIntroActivity.java:109:    }
/ui\intro\BaseIntroActivity.java:111:    @Override
/ui\intro\BaseIntroActivity.java:112:    public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
/ui\intro\BaseIntroActivity.java:113:    }
/ui\intro\BaseIntroActivity.java:115:    @Override
/ui\intro\BaseIntroActivity.java:116:    public void onPageSelected(int position) {
/ui\intro\BaseIntroActivity.java:117:        refreshButtonState(position);
/ui\intro\BaseIntroActivity.java:118:        ((BaseIntroFragment) adapter.getItem(position)).onVisible();
/ui\intro\BaseIntroActivity.java:119:    }
/ui\intro\BaseIntroActivity.java:121:    @Override
/ui\intro\BaseIntroActivity.java:122:    public void onPageScrollStateChanged(int state) {
/ui\intro\BaseIntroActivity.java:123:    }
/ui\intro\BaseIntroActivity.java:125:    public void next() {
/ui\intro\BaseIntroActivity.java:126:        if (myViewPager.getCurrentItem() + 1 < adapter.getCount()) {
/ui\intro\BaseIntroActivity.java:127:            refreshButtonState(adapter.getCurrentFragmentPosition() + 1);
/ui\intro\BaseIntroActivity.java:128:            myViewPager.setCurrentItem(myViewPager.getCurrentItem() + 1, true);
/ui\intro\BaseIntroActivity.java:129:        }
/ui\intro\BaseIntroActivity.java:130:    }
/ui\intro\BaseIntroActivity.java:132:    public void prev() {
/ui\intro\BaseIntroActivity.java:133:        if (myViewPager.getCurrentItem() - 1 >= 0) {
/ui\intro\BaseIntroActivity.java:134:            refreshButtonState(adapter.getCurrentFragmentPosition() - 1);
/ui\intro\BaseIntroActivity.java:135:            myViewPager.setCurrentItem(myViewPager.getCurrentItem() - 1, true);
/ui\intro\BaseIntroActivity.java:136:        }
/ui\intro\BaseIntroActivity.java:137:    }
/ui\intro\BaseIntroActivity.java:138:}
/ui\intro\adapters\ViewPagerAdapter.java:1:package com.huanchengfly.tieba.post.ui.intro.adapters;
/ui\intro\adapters\ViewPagerAdapter.java:3:import android.annotation.SuppressLint;
/ui\intro\adapters\ViewPagerAdapter.java:4:import android.view.ViewGroup;
/ui\intro\adapters\ViewPagerAdapter.java:6:import androidx.annotation.NonNull;
/ui\intro\adapters\ViewPagerAdapter.java:7:import androidx.fragment.app.FragmentManager;
/ui\intro\adapters\ViewPagerAdapter.java:8:import androidx.fragment.app.FragmentPagerAdapter;
/ui\intro\adapters\ViewPagerAdapter.java:10:import com.huanchengfly.tieba.post.ui.intro.fragments.BaseFragment;
/ui\intro\adapters\ViewPagerAdapter.java:12:import java.util.ArrayList;
/ui\intro\adapters\ViewPagerAdapter.java:13:import java.util.List;
/ui\intro\adapters\ViewPagerAdapter.java:15:public class ViewPagerAdapter extends FragmentPagerAdapter {
/ui\intro\adapters\ViewPagerAdapter.java:16:    private BaseFragment currentFragment;
/ui\intro\adapters\ViewPagerAdapter.java:17:    private int currentFragmentPosition;
/ui\intro\adapters\ViewPagerAdapter.java:18:    private List<BaseFragment> fragments = new ArrayList<>();
/ui\intro\adapters\ViewPagerAdapter.java:20:    @SuppressLint("WrongConstant")
/ui\intro\adapters\ViewPagerAdapter.java:21:    public ViewPagerAdapter(FragmentManager fm) {
/ui\intro\adapters\ViewPagerAdapter.java:22:        super(fm, FragmentPagerAdapter.BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT);
/ui\intro\adapters\ViewPagerAdapter.java:23:    }
/ui\intro\adapters\ViewPagerAdapter.java:25:    public List<BaseFragment> getFragments() {
/ui\intro\adapters\ViewPagerAdapter.java:26:        return fragments;
/ui\intro\adapters\ViewPagerAdapter.java:27:    }
/ui\intro\adapters\ViewPagerAdapter.java:29:    @NonNull
/ui\intro\adapters\ViewPagerAdapter.java:30:    @Override
/ui\intro\adapters\ViewPagerAdapter.java:31:    public BaseFragment getItem(int position) {
/ui\intro\adapters\ViewPagerAdapter.java:32:        return fragments.get(position);
/ui\intro\adapters\ViewPagerAdapter.java:33:    }
/ui\intro\adapters\ViewPagerAdapter.java:35:    @Override
/ui\intro\adapters\ViewPagerAdapter.java:36:    public int getCount() {
/ui\intro\adapters\ViewPagerAdapter.java:37:        return fragments.size();
/ui\intro\adapters\ViewPagerAdapter.java:38:    }
/ui\intro\adapters\ViewPagerAdapter.java:40:    public void addFragment(BaseFragment fragment) {
/ui\intro\adapters\ViewPagerAdapter.java:41:        fragments.add(fragment);
/ui\intro\adapters\ViewPagerAdapter.java:42:    }
/ui\intro\adapters\ViewPagerAdapter.java:44:    @Override
/ui\intro\adapters\ViewPagerAdapter.java:45:    public void setPrimaryItem(@NonNull ViewGroup container, int position, @NonNull Object object) {
/ui\intro\adapters\ViewPagerAdapter.java:46:        currentFragment = (BaseFragment) object;
/ui\intro\adapters\ViewPagerAdapter.java:47:        currentFragmentPosition = position;
/ui\intro\adapters\ViewPagerAdapter.java:48:        super.setPrimaryItem(container, position, object);
/ui\intro\adapters\ViewPagerAdapter.java:49:    }
/ui\intro\adapters\ViewPagerAdapter.java:51:    public BaseFragment getCurrentFragment() {
/ui\intro\adapters\ViewPagerAdapter.java:52:        return currentFragment;
/ui\intro\adapters\ViewPagerAdapter.java:53:    }
/ui\intro\adapters\ViewPagerAdapter.java:55:    public int getCurrentFragmentPosition() {
/ui\intro\adapters\ViewPagerAdapter.java:56:        return currentFragmentPosition;
/ui\intro\adapters\ViewPagerAdapter.java:57:    }
/ui\intro\adapters\ViewPagerAdapter.java:59:    public void clear() {
/ui\intro\adapters\ViewPagerAdapter.java:60:        fragments.clear();
/ui\intro\adapters\ViewPagerAdapter.java:61:        notifyDataSetChanged();
/ui\intro\adapters\ViewPagerAdapter.java:62:    }
/ui\intro\adapters\ViewPagerAdapter.java:63:}/ui\intro\fragments\AppIntroFragment.java:1:package com.huanchengfly.tieba.post.ui.intro.fragments;
/ui\intro\fragments\AppIntroFragment.java:3:import android.content.Context;
/ui\intro\fragments\AppIntroFragment.java:5:import androidx.annotation.ColorInt;
/ui\intro\fragments\AppIntroFragment.java:6:import androidx.annotation.ColorRes;
/ui\intro\fragments\AppIntroFragment.java:7:import androidx.annotation.Nullable;
/ui\intro\fragments\AppIntroFragment.java:9:import java.lang.ref.WeakReference;
/ui\intro\fragments\AppIntroFragment.java:11:public class AppIntroFragment extends BaseIntroFragment {
/ui\intro\fragments\AppIntroFragment.java:12:    private int iconColor;
/ui\intro\fragments\AppIntroFragment.java:13:    private int titleTextColor;
/ui\intro\fragments\AppIntroFragment.java:14:    private int subtitleTextColor;
/ui\intro\fragments\AppIntroFragment.java:15:    private int iconRes;
/ui\intro\fragments\AppIntroFragment.java:16:    private CharSequence title;
/ui\intro\fragments\AppIntroFragment.java:17:    private CharSequence subtitle;
/ui\intro\fragments\AppIntroFragment.java:19:    private AppIntroFragment(Builder builder) {
/ui\intro\fragments\AppIntroFragment.java:20:        this.iconRes = builder.getIconRes();
/ui\intro\fragments\AppIntroFragment.java:21:        this.title = builder.getTitle();
/ui\intro\fragments\AppIntroFragment.java:22:        this.subtitle = builder.getSubtitle();
/ui\intro\fragments\AppIntroFragment.java:23:        this.iconColor = builder.getIconColor();
/ui\intro\fragments\AppIntroFragment.java:24:        this.titleTextColor = builder.getTitleTextColor();
/ui\intro\fragments\AppIntroFragment.java:25:        this.subtitleTextColor = builder.getSubtitleTextColor();
/ui\intro\fragments\AppIntroFragment.java:26:    }
/ui\intro\fragments\AppIntroFragment.java:28:    @Override
/ui\intro\fragments\AppIntroFragment.java:29:    protected int getIconColor() {
/ui\intro\fragments\AppIntroFragment.java:30:        return iconColor;
/ui\intro\fragments\AppIntroFragment.java:31:    }
/ui\intro\fragments\AppIntroFragment.java:33:    @Override
/ui\intro\fragments\AppIntroFragment.java:34:    public int getIconRes() {
/ui\intro\fragments\AppIntroFragment.java:35:        return iconRes;
/ui\intro\fragments\AppIntroFragment.java:36:    }
/ui\intro\fragments\AppIntroFragment.java:38:    public void setIconRes(int iconRes) {
/ui\intro\fragments\AppIntroFragment.java:39:        this.iconRes = iconRes;
/ui\intro\fragments\AppIntroFragment.java:40:    }
/ui\intro\fragments\AppIntroFragment.java:42:    @Nullable
/ui\intro\fragments\AppIntroFragment.java:43:    @Override
/ui\intro\fragments\AppIntroFragment.java:44:    protected CharSequence getTitle() {
/ui\intro\fragments\AppIntroFragment.java:45:        return title;
/ui\intro\fragments\AppIntroFragment.java:46:    }
/ui\intro\fragments\AppIntroFragment.java:48:    public void setTitle(CharSequence title) {
/ui\intro\fragments\AppIntroFragment.java:49:        this.title = title;
/ui\intro\fragments\AppIntroFragment.java:50:    }
/ui\intro\fragments\AppIntroFragment.java:52:    @Nullable
/ui\intro\fragments\AppIntroFragment.java:53:    @Override
/ui\intro\fragments\AppIntroFragment.java:54:    protected CharSequence getSubtitle() {
/ui\intro\fragments\AppIntroFragment.java:55:        return subtitle;
/ui\intro\fragments\AppIntroFragment.java:56:    }
/ui\intro\fragments\AppIntroFragment.java:58:    public void setSubtitle(CharSequence subtitle) {
/ui\intro\fragments\AppIntroFragment.java:59:        this.subtitle = subtitle;
/ui\intro\fragments\AppIntroFragment.java:60:    }
/ui\intro\fragments\AppIntroFragment.java:62:    @Override
/ui\intro\fragments\AppIntroFragment.java:63:    protected int getTitleTextColor() {
/ui\intro\fragments\AppIntroFragment.java:64:        return titleTextColor;
/ui\intro\fragments\AppIntroFragment.java:65:    }
/ui\intro\fragments\AppIntroFragment.java:67:    @Override
/ui\intro\fragments\AppIntroFragment.java:68:    protected int getSubtitleTextColor() {
/ui\intro\fragments\AppIntroFragment.java:69:        return subtitleTextColor;
/ui\intro\fragments\AppIntroFragment.java:70:    }
/ui\intro\fragments\AppIntroFragment.java:72:    public static class Builder {
/ui\intro\fragments\AppIntroFragment.java:73:        private WeakReference<Context> contextWeakReference;
/ui\intro\fragments\AppIntroFragment.java:75:        private int iconColor;
/ui\intro\fragments\AppIntroFragment.java:76:        private int titleTextColor;
/ui\intro\fragments\AppIntroFragment.java:77:        private int subtitleTextColor;
/ui\intro\fragments\AppIntroFragment.java:78:        private int iconRes;
/ui\intro\fragments\AppIntroFragment.java:79:        private CharSequence title;
/ui\intro\fragments\AppIntroFragment.java:80:        private CharSequence subtitle;
/ui\intro\fragments\AppIntroFragment.java:82:        public Builder(Context context) {
/ui\intro\fragments\AppIntroFragment.java:83:            this.contextWeakReference = new WeakReference<>(context);
/ui\intro\fragments\AppIntroFragment.java:84:            this.iconRes = -1;
/ui\intro\fragments\AppIntroFragment.java:85:            this.iconColor = -1;
/ui\intro\fragments\AppIntroFragment.java:86:            this.titleTextColor = -1;
/ui\intro\fragments\AppIntroFragment.java:87:            this.subtitleTextColor = -1;
/ui\intro\fragments\AppIntroFragment.java:88:        }
/ui\intro\fragments\AppIntroFragment.java:90:        private Context getContext() {
/ui\intro\fragments\AppIntroFragment.java:91:            return contextWeakReference.get();
/ui\intro\fragments\AppIntroFragment.java:92:        }
/ui\intro\fragments\AppIntroFragment.java:94:        public int getIconColor() {
/ui\intro\fragments\AppIntroFragment.java:95:            return iconColor;
/ui\intro\fragments\AppIntroFragment.java:96:        }
/ui\intro\fragments\AppIntroFragment.java:98:        public Builder setIconColor(@ColorInt int iconColor) {
/ui\intro\fragments\AppIntroFragment.java:99:            this.iconColor = iconColor;
/ui\intro\fragments\AppIntroFragment.java:100:            return this;
/ui\intro\fragments\AppIntroFragment.java:101:        }
/ui\intro\fragments\AppIntroFragment.java:103:        public Builder setIconColorRes(@ColorRes int iconColor) {
/ui\intro\fragments\AppIntroFragment.java:104:            this.iconColor = getContext().getResources().getColor(iconColor);
/ui\intro\fragments\AppIntroFragment.java:105:            return this;
/ui\intro\fragments\AppIntroFragment.java:106:        }
/ui\intro\fragments\AppIntroFragment.java:108:        public int getTitleTextColor() {
/ui\intro\fragments\AppIntroFragment.java:109:            return titleTextColor;
/ui\intro\fragments\AppIntroFragment.java:110:        }
/ui\intro\fragments\AppIntroFragment.java:112:        public Builder setTitleTextColor(@ColorInt int titleTextColor) {
/ui\intro\fragments\AppIntroFragment.java:113:            this.titleTextColor = titleTextColor;
/ui\intro\fragments\AppIntroFragment.java:114:            return this;
/ui\intro\fragments\AppIntroFragment.java:115:        }
/ui\intro\fragments\AppIntroFragment.java:117:        public Builder setTitleTextColorRes(@ColorRes int titleTextColorRes) {
/ui\intro\fragments\AppIntroFragment.java:118:            this.titleTextColor = getContext().getResources().getColor(titleTextColorRes);
/ui\intro\fragments\AppIntroFragment.java:119:            return this;
/ui\intro\fragments\AppIntroFragment.java:120:        }
/ui\intro\fragments\AppIntroFragment.java:122:        public int getSubtitleTextColor() {
/ui\intro\fragments\AppIntroFragment.java:123:            return subtitleTextColor;
/ui\intro\fragments\AppIntroFragment.java:124:        }
/ui\intro\fragments\AppIntroFragment.java:126:        public Builder setSubtitleTextColor(@ColorInt int subtitleTextColor) {
/ui\intro\fragments\AppIntroFragment.java:127:            this.subtitleTextColor = subtitleTextColor;
/ui\intro\fragments\AppIntroFragment.java:128:            return this;
/ui\intro\fragments\AppIntroFragment.java:129:        }
/ui\intro\fragments\AppIntroFragment.java:131:        public Builder setSubtitleTextColorRes(@ColorRes int subtitleTextColorRes) {
/ui\intro\fragments\AppIntroFragment.java:132:            this.subtitleTextColor = getContext().getResources().getColor(subtitleTextColorRes);
/ui\intro\fragments\AppIntroFragment.java:133:            return this;
/ui\intro\fragments\AppIntroFragment.java:134:        }
/ui\intro\fragments\AppIntroFragment.java:136:        public int getIconRes() {
/ui\intro\fragments\AppIntroFragment.java:137:            return iconRes;
/ui\intro\fragments\AppIntroFragment.java:138:        }
/ui\intro\fragments\AppIntroFragment.java:140:        public Builder setIconRes(int iconRes) {
/ui\intro\fragments\AppIntroFragment.java:141:            this.iconRes = iconRes;
/ui\intro\fragments\AppIntroFragment.java:142:            return this;
/ui\intro\fragments\AppIntroFragment.java:143:        }
/ui\intro\fragments\AppIntroFragment.java:145:        public CharSequence getTitle() {
/ui\intro\fragments\AppIntroFragment.java:146:            return title;
/ui\intro\fragments\AppIntroFragment.java:147:        }
/ui\intro\fragments\AppIntroFragment.java:149:        public Builder setTitle(CharSequence title) {
/ui\intro\fragments\AppIntroFragment.java:150:            this.title = title;
/ui\intro\fragments\AppIntroFragment.java:151:            return this;
/ui\intro\fragments\AppIntroFragment.java:152:        }
/ui\intro\fragments\AppIntroFragment.java:154:        public CharSequence getSubtitle() {
/ui\intro\fragments\AppIntroFragment.java:155:            return subtitle;
/ui\intro\fragments\AppIntroFragment.java:156:        }
/ui\intro\fragments\AppIntroFragment.java:158:        public Builder setSubtitle(CharSequence subtitle) {
/ui\intro\fragments\AppIntroFragment.java:159:            this.subtitle = subtitle;
/ui\intro\fragments\AppIntroFragment.java:160:            return this;
/ui\intro\fragments\AppIntroFragment.java:161:        }
/ui\intro\fragments\AppIntroFragment.java:163:        public AppIntroFragment build() {
/ui\intro\fragments\AppIntroFragment.java:164:            return new AppIntroFragment(this);
/ui\intro\fragments\AppIntroFragment.java:165:        }
/ui\intro\fragments\AppIntroFragment.java:166:    }
/ui\intro\fragments\AppIntroFragment.java:167:}
/ui\intro\fragments\BaseFragment.java:1:package com.huanchengfly.tieba.post.ui.intro.fragments;
/ui\intro\fragments\BaseFragment.java:3:import android.annotation.TargetApi;
/ui\intro\fragments\BaseFragment.java:4:import android.app.Activity;
/ui\intro\fragments\BaseFragment.java:5:import android.content.Context;
/ui\intro\fragments\BaseFragment.java:6:import android.os.Build;
/ui\intro\fragments\BaseFragment.java:8:import androidx.annotation.CallSuper;
/ui\intro\fragments\BaseFragment.java:9:import androidx.annotation.NonNull;
/ui\intro\fragments\BaseFragment.java:10:import androidx.fragment.app.Fragment;
/ui\intro\fragments\BaseFragment.java:12:public class BaseFragment extends Fragment {
/ui\intro\fragments\BaseFragment.java:13:    private Context attachContext;
/ui\intro\fragments\BaseFragment.java:15:    @TargetApi(23)
/ui\intro\fragments\BaseFragment.java:16:    @Override
/ui\intro\fragments\BaseFragment.java:17:    public void onAttach(Context context) {
/ui\intro\fragments\BaseFragment.java:18:        super.onAttach(context);
/ui\intro\fragments\BaseFragment.java:19:        onAttachToContext(context);
/ui\intro\fragments\BaseFragment.java:20:    }
/ui\intro\fragments\BaseFragment.java:22:    @SuppressWarnings("deprecation")
/ui\intro\fragments\BaseFragment.java:23:    @Override
/ui\intro\fragments\BaseFragment.java:24:    public void onAttach(Activity activity) {
/ui\intro\fragments\BaseFragment.java:25:        super.onAttach(activity);
/ui\intro\fragments\BaseFragment.java:26:        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
/ui\intro\fragments\BaseFragment.java:27:            onAttachToContext(activity);
/ui\intro\fragments\BaseFragment.java:28:        }
/ui\intro\fragments\BaseFragment.java:29:    }
/ui\intro\fragments\BaseFragment.java:31:    @CallSuper
/ui\intro\fragments\BaseFragment.java:32:    private void onAttachToContext(Context context) {
/ui\intro\fragments\BaseFragment.java:33:        attachContext = context;
/ui\intro\fragments\BaseFragment.java:34:    }
/ui\intro\fragments\BaseFragment.java:36:    @NonNull
/ui\intro\fragments\BaseFragment.java:37:    protected Context getAttachContext() {
/ui\intro\fragments\BaseFragment.java:38:        return attachContext;
/ui\intro\fragments\BaseFragment.java:39:    }
/ui\intro\fragments\BaseFragment.java:40:}
/ui\intro\fragments\BaseIntroFragment.java:1:package com.huanchengfly.tieba.post.ui.intro.fragments;
/ui\intro\fragments\BaseIntroFragment.java:3:import android.content.res.ColorStateList;
/ui\intro\fragments\BaseIntroFragment.java:4:import android.os.Bundle;
/ui\intro\fragments\BaseIntroFragment.java:5:import android.view.LayoutInflater;
/ui\intro\fragments\BaseIntroFragment.java:6:import android.view.View;
/ui\intro\fragments\BaseIntroFragment.java:7:import android.view.ViewGroup;
/ui\intro\fragments\BaseIntroFragment.java:8:import android.widget.ImageView;
/ui\intro\fragments\BaseIntroFragment.java:9:import android.widget.LinearLayout;
/ui\intro\fragments\BaseIntroFragment.java:10:import android.widget.TextView;
/ui\intro\fragments\BaseIntroFragment.java:12:import androidx.annotation.NonNull;
/ui\intro\fragments\BaseIntroFragment.java:13:import androidx.annotation.Nullable;
/ui\intro\fragments\BaseIntroFragment.java:15:import com.huanchengfly.tieba.post.ui.intro.BaseIntroActivity;
/ui\intro\fragments\BaseIntroFragment.java:16:import com.huanchengfly.tieba.post.R;
/ui\intro\fragments\BaseIntroFragment.java:18:public abstract class BaseIntroFragment extends BaseFragment {
/ui\intro\fragments\BaseIntroFragment.java:19:    private static final int NO_CUSTOM_LAYOUT = -1;
/ui\intro\fragments\BaseIntroFragment.java:20:    private static final int NO_ICON = -1;
/ui\intro\fragments\BaseIntroFragment.java:21:    private static final int DEFAULT_COLOR = -1;
/ui\intro\fragments\BaseIntroFragment.java:23:    @Nullable
/ui\intro\fragments\BaseIntroFragment.java:24:    protected abstract CharSequence getTitle();
/ui\intro\fragments\BaseIntroFragment.java:26:    @Nullable
/ui\intro\fragments\BaseIntroFragment.java:27:    protected abstract CharSequence getSubtitle();
/ui\intro\fragments\BaseIntroFragment.java:29:    protected int getIconRes() {
/ui\intro\fragments\BaseIntroFragment.java:30:        return NO_ICON;
/ui\intro\fragments\BaseIntroFragment.java:31:    }
/ui\intro\fragments\BaseIntroFragment.java:33:    protected int getIconColor() {
/ui\intro\fragments\BaseIntroFragment.java:34:        return DEFAULT_COLOR;
/ui\intro\fragments\BaseIntroFragment.java:35:    }
/ui\intro\fragments\BaseIntroFragment.java:37:    protected int getTitleTextColor() {
/ui\intro\fragments\BaseIntroFragment.java:38:        return DEFAULT_COLOR;
/ui\intro\fragments\BaseIntroFragment.java:39:    }
/ui\intro\fragments\BaseIntroFragment.java:42:    protected int getSubtitleTextColor() {
/ui\intro\fragments\BaseIntroFragment.java:43:        return DEFAULT_COLOR;
/ui\intro\fragments\BaseIntroFragment.java:44:    }
/ui\intro\fragments\BaseIntroFragment.java:46:    public CharSequence getNextButton() {
/ui\intro\fragments\BaseIntroFragment.java:47:        return null;
/ui\intro\fragments\BaseIntroFragment.java:48:    }
/ui\intro\fragments\BaseIntroFragment.java:50:    protected int getCustomLayoutResId() {
/ui\intro\fragments\BaseIntroFragment.java:51:        return NO_CUSTOM_LAYOUT;
/ui\intro\fragments\BaseIntroFragment.java:52:    }
/ui\intro\fragments\BaseIntroFragment.java:54:    protected void initCustomLayout(ViewGroup container) {
/ui\intro\fragments\BaseIntroFragment.java:55:    }
/ui\intro\fragments\BaseIntroFragment.java:57:    protected void initView(View view) {
/ui\intro\fragments\BaseIntroFragment.java:58:    }
/ui\intro\fragments\BaseIntroFragment.java:60:    @Nullable
/ui\intro\fragments\BaseIntroFragment.java:61:    @Override
/ui\intro\fragments\BaseIntroFragment.java:62:    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
/ui\intro\fragments\BaseIntroFragment.java:63:        View contentView = inflater.inflate(R.layout.fragment_intro, container, false);
/ui\intro\fragments\BaseIntroFragment.java:64:        if (NO_CUSTOM_LAYOUT != getCustomLayoutResId()) {
/ui\intro\fragments\BaseIntroFragment.java:65:            LinearLayout customLayoutContainer = contentView.findViewById(R.id.custom_layout);
/ui\intro\fragments\BaseIntroFragment.java:66:            inflater.inflate(getCustomLayoutResId(), customLayoutContainer, true);
/ui\intro\fragments\BaseIntroFragment.java:67:        }
/ui\intro\fragments\BaseIntroFragment.java:68:        return contentView;
/ui\intro\fragments\BaseIntroFragment.java:69:    }
/ui\intro\fragments\BaseIntroFragment.java:71:    @Override
/ui\intro\fragments\BaseIntroFragment.java:72:    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
/ui\intro\fragments\BaseIntroFragment.java:73:        super.onViewCreated(view, savedInstanceState);
/ui\intro\fragments\BaseIntroFragment.java:74:        initView(view);
/ui\intro\fragments\BaseIntroFragment.java:75:        ImageView icon = view.findViewById(R.id.icon);
/ui\intro\fragments\BaseIntroFragment.java:76:        TextView title = view.findViewById(R.id.title);
/ui\intro\fragments\BaseIntroFragment.java:77:        TextView subtitle = view.findViewById(R.id.subtitle);
/ui\intro\fragments\BaseIntroFragment.java:78:        if (NO_ICON != getIconRes()) {
/ui\intro\fragments\BaseIntroFragment.java:79:            icon.setVisibility(View.VISIBLE);
/ui\intro\fragments\BaseIntroFragment.java:80:            icon.setImageResource(getIconRes());
/ui\intro\fragments\BaseIntroFragment.java:81:        } else {
/ui\intro\fragments\BaseIntroFragment.java:82:            icon.setVisibility(View.GONE);
/ui\intro\fragments\BaseIntroFragment.java:83:        }
/ui\intro\fragments\BaseIntroFragment.java:84:        if (getIconColor() != DEFAULT_COLOR)
/ui\intro\fragments\BaseIntroFragment.java:85:            icon.setImageTintList(ColorStateList.valueOf(getIconColor()));
/ui\intro\fragments\BaseIntroFragment.java:86:        if (getTitleTextColor() != DEFAULT_COLOR)
/ui\intro\fragments\BaseIntroFragment.java:87:            title.setTextColor(getTitleTextColor());
/ui\intro\fragments\BaseIntroFragment.java:88:        if (getSubtitleTextColor() != DEFAULT_COLOR)
/ui\intro\fragments\BaseIntroFragment.java:89:            subtitle.setTextColor(getSubtitleTextColor());
/ui\intro\fragments\BaseIntroFragment.java:90:        if (NO_CUSTOM_LAYOUT != getCustomLayoutResId()) {
/ui\intro\fragments\BaseIntroFragment.java:91:            initCustomLayout(view.findViewById(R.id.custom_layout));
/ui\intro\fragments\BaseIntroFragment.java:92:        }
/ui\intro\fragments\BaseIntroFragment.java:93:        title.setText(getTitle());
/ui\intro\fragments\BaseIntroFragment.java:94:        subtitle.setText(getSubtitle());
/ui\intro\fragments\BaseIntroFragment.java:95:    }
/ui\intro\fragments\BaseIntroFragment.java:97:    protected void setNextButtonEnabled(boolean enabled) {
/ui\intro\fragments\BaseIntroFragment.java:98:        if (getAttachContext() instanceof BaseIntroActivity) {
/ui\intro\fragments\BaseIntroFragment.java:99:            ((BaseIntroActivity) getAttachContext()).setNextButtonEnabled(enabled);
/ui\intro\fragments\BaseIntroFragment.java:100:        }
/ui\intro\fragments\BaseIntroFragment.java:101:    }
/ui\intro\fragments\BaseIntroFragment.java:103:    public void onVisible() {
/ui\intro\fragments\BaseIntroFragment.java:104:    }
/ui\intro\fragments\BaseIntroFragment.java:106:    public boolean getDefaultNextButtonEnabled() {
/ui\intro\fragments\BaseIntroFragment.java:107:        return true;
/ui\intro\fragments\BaseIntroFragment.java:108:    }
/ui\intro\fragments\BaseIntroFragment.java:110:    public boolean onNext() {
/ui\intro\fragments\BaseIntroFragment.java:111:        return false;
/ui\intro\fragments\BaseIntroFragment.java:112:    }
/ui\intro\fragments\BaseIntroFragment.java:114:    public void next() {
/ui\intro\fragments\BaseIntroFragment.java:115:        if (getAttachContext() instanceof BaseIntroActivity) {
/ui\intro\fragments\BaseIntroFragment.java:116:            ((BaseIntroActivity) getAttachContext()).next();
/ui\intro\fragments\BaseIntroFragment.java:117:        }
/ui\intro\fragments\BaseIntroFragment.java:118:    }
/ui\intro\fragments\BaseIntroFragment.java:119:}
/ui\intro\widgets\MyViewPager.java:1:package com.huanchengfly.tieba.post.ui.intro.widgets;
/ui\intro\widgets\MyViewPager.java:3:import android.content.Context;
/ui\intro\widgets\MyViewPager.java:4:import android.util.AttributeSet;
/ui\intro\widgets\MyViewPager.java:5:import android.view.MotionEvent;
/ui\intro\widgets\MyViewPager.java:7:import androidx.viewpager.widget.ViewPager;
/ui\intro\widgets\MyViewPager.java:9:/**
/ui\intro\widgets\MyViewPager.java:10: * Created by Administrator on 2017/5/19.
/ui\intro\widgets\MyViewPager.java:11: */
/ui\intro\widgets\MyViewPager.java:13:public class MyViewPager extends ViewPager {
/ui\intro\widgets\MyViewPager.java:15:    private boolean isCanScroll = true;
/ui\intro\widgets\MyViewPager.java:17:    public MyViewPager(Context context) {
/ui\intro\widgets\MyViewPager.java:18:        super(context);
/ui\intro\widgets\MyViewPager.java:19:    }
/ui\intro\widgets\MyViewPager.java:21:    public MyViewPager(Context context, AttributeSet attrs) {
/ui\intro\widgets\MyViewPager.java:22:        super(context, attrs);
/ui\intro\widgets\MyViewPager.java:23:    }
/ui\intro\widgets\MyViewPager.java:25:    /**
/ui\intro\widgets\MyViewPager.java:26:     * 设置其是否能滑动换页
/ui\intro\widgets\MyViewPager.java:27:     *
/ui\intro\widgets\MyViewPager.java:28:     * @param isCanScroll false 不能换页， true 可以滑动换页
/ui\intro\widgets\MyViewPager.java:29:     */
/ui\intro\widgets\MyViewPager.java:30:    public void setCanScroll(boolean isCanScroll) {
/ui\intro\widgets\MyViewPager.java:31:        this.isCanScroll = isCanScroll;
/ui\intro\widgets\MyViewPager.java:32:    }
/ui\intro\widgets\MyViewPager.java:34:    @Override
/ui\intro\widgets\MyViewPager.java:35:    public boolean onInterceptTouchEvent(MotionEvent ev) {
/ui\intro\widgets\MyViewPager.java:36:        return isCanScroll && super.onInterceptTouchEvent(ev);
/ui\intro\widgets\MyViewPager.java:37:    }
/ui\intro\widgets\MyViewPager.java:39:    @Override
/ui\intro\widgets\MyViewPager.java:40:    public boolean onTouchEvent(MotionEvent ev) {
/ui\intro\widgets\MyViewPager.java:41:        return isCanScroll && super.onTouchEvent(ev);
/ui\intro\widgets\MyViewPager.java:42:    }
/ui\intro\widgets\MyViewPager.java:43:}
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:1:package com.huanchengfly.tieba.post.ui.overscroll;
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:3:import android.view.MotionEvent;
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:4:import android.view.View;
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:6:import com.huanchengfly.tieba.post.ui.overscroll.adapters.IOverScrollDecoratorAdapter;
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:8:/**
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:9: * A concrete implementation of {@link OverScrollBounceEffectDecoratorBase} for a horizontal orientation.
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:10: *
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:11: * @author amit
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:12: */
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:13:public class HorizontalOverScrollBounceEffectDecorator extends OverScrollBounceEffectDecoratorBase {
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:15:    protected static class MotionAttributesHorizontal extends MotionAttributes {
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:17:        public boolean init(View view, MotionEvent event) {
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:19:            // We must have history available to calc the dx. Normally it's there - if it isn't temporarily,
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:20:            // we declare the event 'invalid' and expect it in consequent events.
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:21:            if (event.getHistorySize() == 0) {
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:22:                return false;
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:23:            }
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:25:            // Allow for counter-orientation-direction operations (e.g. item swiping) to run fluently.
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:26:            final float dy = event.getY(0) - event.getHistoricalY(0, 0);
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:27:            final float dx = event.getX(0) - event.getHistoricalX(0, 0);
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:28:            if (Math.abs(dx) < Math.abs(dy)) {
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:29:                return false;
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:30:            }
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:32:            mAbsOffset = view.getTranslationX();
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:33:            mDeltaOffset = dx;
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:34:            mDir = mDeltaOffset > 0;
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:36:            return true;
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:37:        }
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:38:    }
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:40:    protected static class AnimationAttributesHorizontal extends AnimationAttributes {
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:42:        public AnimationAttributesHorizontal() {
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:43:            mProperty = View.TRANSLATION_X;
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:44:        }
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:46:        @Override
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:47:        protected void init(View view) {
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:48:            mAbsOffset = view.getTranslationX();
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:49:            mMaxOffset = view.getWidth();
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:50:        }
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:51:    }
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:53:    /**
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:54:     * C'tor, creating the effect with default arguments:
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:55:     * <br/>Touch-drag ratio in 'forward' direction will be set to DEFAULT_TOUCH_DRAG_MOVE_RATIO_FWD.
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:56:     * <br/>Touch-drag ratio in 'backwards' direction will be set to DEFAULT_TOUCH_DRAG_MOVE_RATIO_BCK.
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:57:     * <br/>Deceleration factor (for the bounce-back effect) will be set to DEFAULT_DECELERATE_FACTOR.
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:58:     *
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:59:     * @param viewAdapter The view's encapsulation.
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:60:     */
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:61:    public HorizontalOverScrollBounceEffectDecorator(IOverScrollDecoratorAdapter viewAdapter) {
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:62:        this(viewAdapter, DEFAULT_TOUCH_DRAG_MOVE_RATIO_FWD, DEFAULT_TOUCH_DRAG_MOVE_RATIO_BCK, DEFAULT_DECELERATE_FACTOR);
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:63:    }
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:65:    /**
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:66:     * C'tor, creating the effect with explicit arguments.
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:67:     * @param viewAdapter The view's encapsulation.
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:68:     * @param touchDragRatioFwd Ratio of touch distance to actual drag distance when in 'forward' direction.
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:69:     * @param touchDragRatioBck Ratio of touch distance to actual drag distance when in 'backward'
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:70:     *                          direction (opposite to initial one).
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:71:     * @param decelerateFactor Deceleration factor used when decelerating the motion to create the
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:72:     *                         bounce-back effect.
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:73:     */
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:74:    public HorizontalOverScrollBounceEffectDecorator(IOverScrollDecoratorAdapter viewAdapter,
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:75:                                                     float touchDragRatioFwd, float touchDragRatioBck, float decelerateFactor) {
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:76:        super(viewAdapter, decelerateFactor, touchDragRatioFwd, touchDragRatioBck);
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:77:    }
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:79:    @Override
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:80:    protected MotionAttributes createMotionAttributes() {
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:81:        return new MotionAttributesHorizontal();
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:82:    }
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:84:    @Override
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:85:    protected AnimationAttributes createAnimationAttributes() {
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:86:        return new AnimationAttributesHorizontal();
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:87:    }
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:89:    @Override
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:90:    protected void translateView(View view, float offset) {
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:91:        view.setTranslationX(offset);
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:92:    }
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:94:    @Override
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:95:    protected void translateViewAndEvent(View view, float offset, MotionEvent event) {
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:96:        view.setTranslationX(offset);
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:97:        event.offsetLocation(offset - event.getX(0), 0f);
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:98:    }
/ui\overscroll\HorizontalOverScrollBounceEffectDecorator.java:99:}
/ui\overscroll\IOverScrollDecor.java:1:package com.huanchengfly.tieba.post.ui.overscroll;
/ui\overscroll\IOverScrollDecor.java:3:import android.view.View;
/ui\overscroll\IOverScrollDecor.java:5:/**
/ui\overscroll\IOverScrollDecor.java:6: * @author amit
/ui\overscroll\IOverScrollDecor.java:7: */
/ui\overscroll\IOverScrollDecor.java:8:public interface IOverScrollDecor {
/ui\overscroll\IOverScrollDecor.java:9:    View getView();
/ui\overscroll\IOverScrollDecor.java:11:    void setOverScrollStateListener(IOverScrollStateListener listener);
/ui\overscroll\IOverScrollDecor.java:12:    void setOverScrollUpdateListener(IOverScrollUpdateListener listener);
/ui\overscroll\IOverScrollDecor.java:14:    /**
/ui\overscroll\IOverScrollDecor.java:15:     * Get the current decorator's runtime state, i.e. one of the values specified by {@link IOverScrollState}.
/ui\overscroll\IOverScrollDecor.java:16:     * @return The state.
/ui\overscroll\IOverScrollDecor.java:17:     */
/ui\overscroll\IOverScrollDecor.java:18:    int getCurrentState();
/ui\overscroll\IOverScrollDecor.java:20:    /**
/ui\overscroll\IOverScrollDecor.java:21:     * Detach the decorator from its associated view, thus disabling it entirely.
/ui\overscroll\IOverScrollDecor.java:22:     *
/ui\overscroll\IOverScrollDecor.java:23:     * <p>It is best to call this only when over-scroll isn't currently in-effect - i.e. verify that
/ui\overscroll\IOverScrollDecor.java:24:     * <code>getCurrentState()==IOverScrollState.STATE_IDLE</code> as a precondition, or otherwise
/ui\overscroll\IOverScrollDecor.java:25:     * use a state listener previously installed using
/ui\overscroll\IOverScrollDecor.java:26:     * {@link #setOverScrollStateListener(IOverScrollStateListener)}.</p>
/ui\overscroll\IOverScrollDecor.java:27:     *
/ui\overscroll\IOverScrollDecor.java:28:     * <p>Note: Upon detachment completion, the view in question will return to the default
/ui\overscroll\IOverScrollDecor.java:29:     * Android over-scroll configuration (i.e. {@link View.OVER_SCROLL_ALWAYS} mode). This can be
/ui\overscroll\IOverScrollDecor.java:30:     * overridden by calling <code>View.setOverScrollMode(mode)</code> immediately thereafter.</p>
/ui\overscroll\IOverScrollDecor.java:31:     */
/ui\overscroll\IOverScrollDecor.java:32:    void detach();
/ui\overscroll\IOverScrollDecor.java:33:}
/ui\overscroll\IOverScrollState.java:1:package com.huanchengfly.tieba.post.ui.overscroll;
/ui\overscroll\IOverScrollState.java:3:/**
/ui\overscroll\IOverScrollState.java:4: * @author amit
/ui\overscroll\IOverScrollState.java:5: */
/ui\overscroll\IOverScrollState.java:6:public interface IOverScrollState {
/ui\overscroll\IOverScrollState.java:8:    /** No over-scroll is in-effect. */
/ui\overscroll\IOverScrollState.java:9:    int STATE_IDLE = 0;
/ui\overscroll\IOverScrollState.java:11:    /** User is actively touch-dragging, thus enabling over-scroll at the view's <i>start</i> side. */
/ui\overscroll\IOverScrollState.java:12:    int STATE_DRAG_START_SIDE = 1;
/ui\overscroll\IOverScrollState.java:14:    /** User is actively touch-dragging, thus enabling over-scroll at the view's <i>end</i> side. */
/ui\overscroll\IOverScrollState.java:15:    int STATE_DRAG_END_SIDE = 2;
/ui\overscroll\IOverScrollState.java:17:    /** User has released their touch, thus throwing the view back into place via bounce-back animation. */
/ui\overscroll\IOverScrollState.java:18:    int STATE_BOUNCE_BACK = 3;
/ui\overscroll\IOverScrollState.java:19:}
/ui\overscroll\IOverScrollStateListener.java:1:package com.huanchengfly.tieba.post.ui.overscroll;
/ui\overscroll\IOverScrollStateListener.java:3:/**
/ui\overscroll\IOverScrollStateListener.java:4: * A callback-listener enabling over-scroll effect clients to be notified of effect state transitions.
/ui\overscroll\IOverScrollStateListener.java:5: * <br/>Invoked whenever state is transitioned onto one of {@link IOverScrollState#STATE_IDLE},
/ui\overscroll\IOverScrollStateListener.java:6: * {@link IOverScrollState#STATE_DRAG_START_SIDE}, {@link IOverScrollState#STATE_DRAG_END_SIDE}
/ui\overscroll\IOverScrollStateListener.java:7: * or {@link IOverScrollState#STATE_BOUNCE_BACK}.
/ui\overscroll\IOverScrollStateListener.java:8: *
/ui\overscroll\IOverScrollStateListener.java:9: * @author amit
/ui\overscroll\IOverScrollStateListener.java:10: *
/ui\overscroll\IOverScrollStateListener.java:11: * @see IOverScrollUpdateListener
/ui\overscroll\IOverScrollStateListener.java:12: */
/ui\overscroll\IOverScrollStateListener.java:13:public interface IOverScrollStateListener {
/ui\overscroll\IOverScrollStateListener.java:15:    /**
/ui\overscroll\IOverScrollStateListener.java:16:     * The invoked callback.
/ui\overscroll\IOverScrollStateListener.java:17:     *
/ui\overscroll\IOverScrollStateListener.java:18:     * @param decor The associated over-scroll 'decorator'.
/ui\overscroll\IOverScrollStateListener.java:19:     * @param oldState The old over-scroll state; ID's specified by {@link IOverScrollState}, e.g.
/ui\overscroll\IOverScrollStateListener.java:20:     *                 {@link IOverScrollState#STATE_IDLE}.
/ui\overscroll\IOverScrollStateListener.java:21:     * @param newState The <b>new</b> over-scroll state; ID's specified by {@link IOverScrollState},
/ui\overscroll\IOverScrollStateListener.java:22:     *                 e.g. {@link IOverScrollState#STATE_IDLE}.
/ui\overscroll\IOverScrollStateListener.java:23:     */
/ui\overscroll\IOverScrollStateListener.java:24:    void onOverScrollStateChange(IOverScrollDecor decor, int oldState, int newState);
/ui\overscroll\IOverScrollStateListener.java:25:}
/ui\overscroll\IOverScrollUpdateListener.java:1:package com.huanchengfly.tieba.post.ui.overscroll;
/ui\overscroll\IOverScrollUpdateListener.java:3:/**
/ui\overscroll\IOverScrollUpdateListener.java:4: * A callback-listener enabling over-scroll effect clients to subscribe to <b>real-time</b> updates
/ui\overscroll\IOverScrollUpdateListener.java:5: * of over-scrolling intensity, provided as the view-translation offset from pre-scroll position.
/ui\overscroll\IOverScrollUpdateListener.java:6: *
/ui\overscroll\IOverScrollUpdateListener.java:7: * @author amit
/ui\overscroll\IOverScrollUpdateListener.java:8: *
/ui\overscroll\IOverScrollUpdateListener.java:9: * @see IOverScrollStateListener
/ui\overscroll\IOverScrollUpdateListener.java:10: */
/ui\overscroll\IOverScrollUpdateListener.java:11:public interface IOverScrollUpdateListener {
/ui\overscroll\IOverScrollUpdateListener.java:13:    /**
/ui\overscroll\IOverScrollUpdateListener.java:14:     * The invoked callback.
/ui\overscroll\IOverScrollUpdateListener.java:15:     *
/ui\overscroll\IOverScrollUpdateListener.java:16:     * @param decor The associated over-scroll 'decorator'.
/ui\overscroll\IOverScrollUpdateListener.java:17:     * @param state One of: {@link IOverScrollState#STATE_IDLE}, {@link IOverScrollState#STATE_DRAG_START_SIDE},
/ui\overscroll\IOverScrollUpdateListener.java:18:     *              {@link IOverScrollState#STATE_DRAG_START_SIDE} or {@link IOverScrollState#STATE_BOUNCE_BACK}.
/ui\overscroll\IOverScrollUpdateListener.java:19:     * @param offset The currently visible offset created due to over-scroll.
/ui\overscroll\IOverScrollUpdateListener.java:20:     */
/ui\overscroll\IOverScrollUpdateListener.java:21:    void onOverScrollUpdate(IOverScrollDecor decor, int state, float offset);
/ui\overscroll\IOverScrollUpdateListener.java:22:}
/ui\overscroll\ListenerStubs.java:1:package com.huanchengfly.tieba.post.ui.overscroll;
/ui\overscroll\ListenerStubs.java:3:/**
/ui\overscroll\ListenerStubs.java:4: * @author amit
/ui\overscroll\ListenerStubs.java:5: */
/ui\overscroll\ListenerStubs.java:6:public interface ListenerStubs {
/ui\overscroll\ListenerStubs.java:8:    class OverScrollStateListenerStub implements IOverScrollStateListener {
/ui\overscroll\ListenerStubs.java:9:        @Override
/ui\overscroll\ListenerStubs.java:10:        public void onOverScrollStateChange(IOverScrollDecor decor, int oldState, int newState) { }
/ui\overscroll\ListenerStubs.java:11:    }
/ui\overscroll\ListenerStubs.java:13:    class OverScrollUpdateListenerStub implements IOverScrollUpdateListener {
/ui\overscroll\ListenerStubs.java:14:        @Override
/ui\overscroll\ListenerStubs.java:15:        public void onOverScrollUpdate(IOverScrollDecor decor, int state, float offset) { }
/ui\overscroll\ListenerStubs.java:16:    }
/ui\overscroll\ListenerStubs.java:17:}
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:1:package com.huanchengfly.tieba.post.ui.overscroll;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:3:import android.animation.Animator;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:4:import android.animation.AnimatorSet;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:5:import android.animation.ObjectAnimator;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:6:import android.animation.ValueAnimator;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:7:import android.util.Log;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:8:import android.util.Property;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:9:import android.view.MotionEvent;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:10:import android.view.VelocityTracker;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:11:import android.view.View;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:12:import android.view.animation.Interpolator;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:14:import com.huanchengfly.tieba.post.ui.overscroll.adapters.IOverScrollDecoratorAdapter;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:15:import com.huanchengfly.tieba.post.ui.overscroll.adapters.RecyclerViewOverScrollDecorAdapter;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:17:import static com.huanchengfly.tieba.post.ui.overscroll.IOverScrollState.STATE_BOUNCE_BACK;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:18:import static com.huanchengfly.tieba.post.ui.overscroll.IOverScrollState.STATE_DRAG_END_SIDE;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:19:import static com.huanchengfly.tieba.post.ui.overscroll.IOverScrollState.STATE_DRAG_START_SIDE;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:20:import static com.huanchengfly.tieba.post.ui.overscroll.IOverScrollState.STATE_IDLE;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:21:import static com.huanchengfly.tieba.post.ui.overscroll.ListenerStubs.OverScrollStateListenerStub;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:22:import static com.huanchengfly.tieba.post.ui.overscroll.ListenerStubs.OverScrollUpdateListenerStub;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:24:/**
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:25: * A standalone view decorator adding over-scroll with a smooth bounce-back effect to (potentially) any view -
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:26: * provided that an appropriate {@link IOverScrollDecoratorAdapter} implementation exists / can be written
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:27: * for that view type (e.g. {@link RecyclerViewOverScrollDecorAdapter}).
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:28: *
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:29: * <p>Design-wise, being a standalone class, this decorator powerfully provides the ability to add
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:30: * the over-scroll effect over any view without adjusting the view's implementation. In essence, this
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:31: * eliminates the need to repeatedly implement the effect per each view type (list-view,
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:32: * recycler-view, image-view, etc.). Therefore, using it is highly recommended compared to other
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:33: * more intrusive solutions.</p>
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:34: *
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:35: * <p>Note that this class is abstract, having {@link HorizontalOverScrollBounceEffectDecorator} and
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:36: * {@link VerticalOverScrollBounceEffectDecorator} providing concrete implementations that are
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:37: * view-orientation specific.</p>
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:38: *
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:39: * <hr width="97%"/>
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:40: * <h2>Implementation Notes</h2>
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:41: *
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:42: * <p>At it's core, the class simply registers itself as a touch-listener over the decorated view and
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:43: * intercepts touch events as needed.</p>
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:44: *
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:45: * <p>Internally, it delegates the over-scrolling calculations onto 3 state-based classes:
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:46: * <ol>
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:47: *     <li><b>Idle state</b> - monitors view state and touch events to intercept over-scrolling initiation
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:48: *     (in which case it hands control over to the Over-scrolling state).</li>
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:49: *     <li><b>Over-scrolling state</b> - handles motion events to apply the over-scroll effect as users
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:50: *     interact with the view.</li>
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:51: *     <li><b>Bounce-back state</b> - runs the bounce-back animation, all-the-while blocking all
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:52: *     touch events till the animation completes (in which case it hands control back to the idle
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:53: *     state).</li>
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:54: * </ol>
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:55: * </p>
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:56: *
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:57: * @author amit
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:58: *
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:59: * @see RecyclerViewOverScrollDecorAdapter
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:60: * @see IOverScrollDecoratorAdapter
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:61: */
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:62:public abstract class OverScrollBounceEffectDecoratorBase implements IOverScrollDecor, View.OnTouchListener {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:64:    public static final String TAG = "OverScrollDecor";
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:66:    public static final float DEFAULT_TOUCH_DRAG_MOVE_RATIO_FWD = 3f;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:67:    public static final float DEFAULT_TOUCH_DRAG_MOVE_RATIO_BCK = 1f;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:68:    public static final float DEFAULT_DECELERATE_FACTOR = -2f;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:70:    protected static final int MAX_BOUNCE_BACK_DURATION_MS = 800;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:71:    protected static final int MIN_BOUNCE_BACK_DURATION_MS = 200;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:73:    protected final OverScrollStartAttributes mStartAttr = new OverScrollStartAttributes();
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:74:    protected final IOverScrollDecoratorAdapter mViewAdapter;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:76:    protected final IdleState mIdleState;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:77:    protected final OverScrollingState mOverScrollingState;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:78:    protected final BounceBackState mBounceBackState;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:79:    protected IDecoratorState mCurrentState;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:81:    protected IOverScrollStateListener mStateListener = new OverScrollStateListenerStub();
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:82:    protected IOverScrollUpdateListener mUpdateListener = new OverScrollUpdateListenerStub();
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:84:    /**
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:85:     * When in over-scroll mode, keep track of dragging velocity to provide a smooth slow-down
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:86:     * for the bounce-back effect.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:87:     */
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:88:    protected float mVelocity;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:90:    /**
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:91:     * Motion attributes: keeps data describing current motion event.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:92:     * <br/>Orientation agnostic: subclasses provide either horizontal or vertical
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:93:     * initialization of the agnostic attributes.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:94:     */
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:95:    protected abstract static class MotionAttributes {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:96:        public float mAbsOffset;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:97:        public float mDeltaOffset;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:98:        public boolean mDir; // True = 'forward', false = 'backwards'.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:100:        protected abstract boolean init(View view, MotionEvent event);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:101:    }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:103:    protected static class OverScrollStartAttributes {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:104:        protected int mPointerId;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:105:        protected float mAbsOffset;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:106:        protected boolean mDir; // True = 'forward', false = 'backwards'.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:107:    }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:109:    protected abstract static class AnimationAttributes {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:110:        public Property<View, Float> mProperty;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:111:        public float mAbsOffset;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:112:        public float mMaxOffset;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:114:        protected abstract void init(View view);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:115:    }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:117:    /**
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:118:     * Interface of decorator-state delegation classes. Defines states as handles of two fundamental
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:119:     * touch events: actual movement, up/cancel.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:120:     */
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:121:    protected interface IDecoratorState {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:123:        /**
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:124:         * Handle a motion (touch) event.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:125:         *
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:126:         * @param event The event from onTouch.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:127:         * @return Return value for onTouch.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:128:         */
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:129:        boolean handleMoveTouchEvent(MotionEvent event);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:131:        /**
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:132:         * Handle up / touch-cancel events.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:133:         *
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:134:         * @param event The event from onTouch.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:135:         * @return Return value for onTouch.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:136:         */
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:137:        boolean handleUpOrCancelTouchEvent(MotionEvent event);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:139:        /**
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:140:         * Handle a transition onto this state, as it becomes 'current' state.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:141:         * @param fromState
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:142:         */
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:143:        void handleEntryTransition(IDecoratorState fromState);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:145:        /**
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:146:         * The client-perspective ID of the state associated with this (internal) one. ID's
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:147:         * are as specified in {@link IOverScrollState}.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:148:         *
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:149:         * @return The ID, e.g. {@link IOverScrollState#STATE_IDLE}.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:150:         */
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:151:        int getStateId();
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:152:    }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:154:    /**
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:155:     * Idle state: monitors move events, trying to figure out whether over-scrolling should be
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:156:     * initiated (i.e. when scrolled further when the view is at one of its displayable ends).
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:157:     * <br/>When such is the case, it hands over control to the over-scrolling state.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:158:     */
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:159:    protected class IdleState implements IDecoratorState {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:161:        final MotionAttributes mMoveAttr;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:163:        public IdleState() {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:164:            mMoveAttr = createMotionAttributes();
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:165:        }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:167:        @Override
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:168:        public int getStateId() {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:169:            return STATE_IDLE;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:170:        }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:172:        @Override
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:173:        public boolean handleMoveTouchEvent(MotionEvent event) {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:175:            final View view = mViewAdapter.getView();
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:176:            if (!mMoveAttr.init(view, event)) {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:177:                return false;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:178:            }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:180:            // Has over-scrolling officially started?
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:181:            if ((mViewAdapter.isInAbsoluteStart() && mMoveAttr.mDir) ||
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:182:                (mViewAdapter.isInAbsoluteEnd() && !mMoveAttr.mDir)) {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:184:                // Save initial over-scroll attributes for future reference.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:185:                mStartAttr.mPointerId = event.getPointerId(0);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:186:                mStartAttr.mAbsOffset = mMoveAttr.mAbsOffset;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:187:                mStartAttr.mDir = mMoveAttr.mDir;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:189:                issueStateTransition(mOverScrollingState);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:190:                return mOverScrollingState.handleMoveTouchEvent(event);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:191:            }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:193:            return false;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:194:        }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:196:        @Override
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:197:        public boolean handleUpOrCancelTouchEvent(MotionEvent event) {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:198:            return false;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:199:        }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:201:        @Override
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:202:        public void handleEntryTransition(IDecoratorState fromState) {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:203:            mStateListener.onOverScrollStateChange(OverScrollBounceEffectDecoratorBase.this, fromState.getStateId(), this.getStateId());
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:204:        }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:205:    }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:207:    /**
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:208:     * Handles the actual over-scrolling: thus translating the view according to configuration
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:209:     * and user interactions, dynamically.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:210:     *
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:211:     * <br/><br/>The state is exited - thus completing over-scroll handling, in one of two cases:
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:212:     * <br/>When user lets go of the view, it transitions control to the bounce-back state.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:213:     * <br/>When user moves the view back onto a potential 'under-scroll' state, it abruptly
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:214:     * transitions control to the idle-state, so as to return touch-events management to the
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:215:     * normal over-scroll-less environment (thus preventing under-scrolling and potentially regaining
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:216:     * regular scrolling).
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:217:     */
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:218:    protected class OverScrollingState implements IDecoratorState {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:220:        protected final float mTouchDragRatioFwd;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:221:        protected final float mTouchDragRatioBck;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:223:        final MotionAttributes mMoveAttr;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:224:        int mCurrDragState;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:226:        public OverScrollingState(float touchDragRatioFwd, float touchDragRatioBck) {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:227:            mMoveAttr = createMotionAttributes();
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:228:            mTouchDragRatioFwd = touchDragRatioFwd;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:229:            mTouchDragRatioBck = touchDragRatioBck;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:230:        }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:232:        @Override
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:233:        public int getStateId() {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:234:            // This is really a single class that implements 2 states, so our ID depends on what
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:235:            // it was during the last invocation.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:236:            return mCurrDragState;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:237:        }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:239:        @Override
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:240:        public boolean handleMoveTouchEvent(MotionEvent event) {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:241:            // Switching 'pointers' (e.g. fingers) on-the-fly isn't supported -- abort over-scroll
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:242:            // smoothly using the default bounce-back animation in this case.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:243:            if (mStartAttr.mPointerId != event.getPointerId(0)) {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:244:                issueStateTransition(mBounceBackState);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:245:                return true;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:246:            }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:248:            final View view = mViewAdapter.getView();
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:249:            if (!mMoveAttr.init(view, event)) {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:250:                // Keep intercepting the touch event as long as we're still over-scrolling...
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:251:                return true;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:252:            }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:254:            float deltaOffset = mMoveAttr.mDeltaOffset / (mMoveAttr.mDir == mStartAttr.mDir ? mTouchDragRatioFwd : mTouchDragRatioBck);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:255:            float newOffset = mMoveAttr.mAbsOffset + deltaOffset;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:257:            // If moved in counter direction onto a potential under-scroll state -- don't. Instead, abort
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:258:            // over-scrolling abruptly, thus returning control to which-ever touch handlers there
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:259:            // are waiting (e.g. regular scroller handlers).
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:260:            if ( (mStartAttr.mDir && !mMoveAttr.mDir && (newOffset <= mStartAttr.mAbsOffset)) ||
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:261:                 (!mStartAttr.mDir && mMoveAttr.mDir && (newOffset >= mStartAttr.mAbsOffset)) ) {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:262:                translateViewAndEvent(view, mStartAttr.mAbsOffset, event);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:263:                mUpdateListener.onOverScrollUpdate(OverScrollBounceEffectDecoratorBase.this, mCurrDragState, 0);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:265:                issueStateTransition(mIdleState);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:266:                return true;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:267:            }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:269:            if (view.getParent() != null) {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:270:                view.getParent().requestDisallowInterceptTouchEvent(true);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:271:            }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:273:            long dt = event.getEventTime() - event.getHistoricalEventTime(0);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:274:            if (dt > 0) { // Sometimes (though rarely) dt==0 cause originally timing is in nanos, but is presented in millis.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:275:                mVelocity = deltaOffset / dt;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:276:            }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:278:            translateView(view, newOffset);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:279:            mUpdateListener.onOverScrollUpdate(OverScrollBounceEffectDecoratorBase.this, mCurrDragState, newOffset);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:281:            return true;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:282:        }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:284:        @Override
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:285:        public boolean handleUpOrCancelTouchEvent(MotionEvent event) {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:286:            issueStateTransition(mBounceBackState);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:287:            return false;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:288:        }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:290:        @Override
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:291:        public void handleEntryTransition(IDecoratorState fromState) {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:292:            mCurrDragState = (mStartAttr.mDir ? STATE_DRAG_START_SIDE : STATE_DRAG_END_SIDE);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:293:            mStateListener.onOverScrollStateChange(OverScrollBounceEffectDecoratorBase.this, fromState.getStateId(), this.getStateId());
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:294:        }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:295:    }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:297:    private static final Interpolator sCustomInterpolator = new Interpolator() {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:298:        @Override
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:299:        public float getInterpolation(float t) {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:300:            t -= 1.0f;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:301:            return t * t * t + 1.0f;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:302:        }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:303:    };
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:305:    /**
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:306:     * When entered, starts the bounce-back animation.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:307:     * <br/>Upon animation completion, transitions control onto the idle state; Does so by
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:308:     * registering itself as an animation listener.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:309:     * <br/>In the meantime, blocks (intercepts) all touch events.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:310:     */
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:311:    protected class BounceBackState implements IDecoratorState, Animator.AnimatorListener, ValueAnimator.AnimatorUpdateListener {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:313:        protected final Interpolator mBounceBackInterpolator = sCustomInterpolator;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:314:        protected final float mDecelerateFactor;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:315:        protected final float mDoubleDecelerateFactor;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:317:        protected final AnimationAttributes mAnimAttributes;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:319:        public BounceBackState(float decelerateFactor) {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:320:            mDecelerateFactor = decelerateFactor;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:321:            mDoubleDecelerateFactor = 2f * decelerateFactor;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:323:            mAnimAttributes = createAnimationAttributes();
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:324:        }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:326:        @Override
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:327:        public int getStateId() {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:328:            return STATE_BOUNCE_BACK;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:329:        }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:331:        @Override
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:332:        public void handleEntryTransition(IDecoratorState fromState) {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:334:            mStateListener.onOverScrollStateChange(OverScrollBounceEffectDecoratorBase.this, fromState.getStateId(), this.getStateId());
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:336:            Animator bounceBackAnim = createAnimator();
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:337:            bounceBackAnim.addListener(this);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:339:            bounceBackAnim.start();
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:340:        }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:342:        @Override
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:343:        public boolean handleMoveTouchEvent(MotionEvent event) {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:344:            // Flush all touches down the drain till animation is over.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:345:            return true;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:346:        }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:348:        @Override
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:349:        public boolean handleUpOrCancelTouchEvent(MotionEvent event) {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:350:            // Flush all touches down the drain till animation is over.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:351:            return true;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:352:        }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:354:        @Override
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:355:        public void onAnimationEnd(Animator animation) {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:356:            issueStateTransition(mIdleState);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:357:        }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:359:        @Override
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:360:        public void onAnimationUpdate(ValueAnimator animation) {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:361:            mUpdateListener.onOverScrollUpdate(OverScrollBounceEffectDecoratorBase.this, STATE_BOUNCE_BACK, (Float) animation.getAnimatedValue());
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:362:        }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:364:        @Override public void onAnimationStart(Animator animation) {}
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:365:        @Override public void onAnimationCancel(Animator animation) {}
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:366:        @Override public void onAnimationRepeat(Animator animation) {}
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:368:        protected Animator createAnimator() {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:370:            final View view = mViewAdapter.getView();
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:372:            mAnimAttributes.init(view);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:374:            // Set up a low-duration slow-down animation IN the drag direction.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:376:            // Exception: If wasn't dragging in 'forward' direction (or velocity=0 -- i.e. not dragging at all),
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:377:            // skip slow-down anim directly to the bounce-back.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:378:            if (mVelocity == 0f || (mVelocity < 0 && mStartAttr.mDir) || (mVelocity > 0 && !mStartAttr.mDir)) {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:379:                return createBounceBackAnimator(mAnimAttributes.mAbsOffset);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:380:            }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:382:            // dt = (Vt - Vo) / a; Vt=0 ==> dt = -Vo / a
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:383:            float slowdownDuration = -mVelocity / mDecelerateFactor;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:384:            slowdownDuration = (slowdownDuration < 0 ? 0 : slowdownDuration); // Happens in counter-direction dragging
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:386:            // dx = (Vt^2 - Vo^2) / 2a; Vt=0 ==> dx = -Vo^2 / 2a
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:387:            float slowdownDistance = -mVelocity * mVelocity / mDoubleDecelerateFactor;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:388:            float slowdownEndOffset = mAnimAttributes.mAbsOffset + slowdownDistance;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:390:            ObjectAnimator slowdownAnim = createSlowdownAnimator(view, (int) slowdownDuration, slowdownEndOffset);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:392:            // Set up the bounce back animation, bringing the view back into the original, pre-overscroll position (translation=0).
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:394:            ObjectAnimator bounceBackAnim = createBounceBackAnimator(slowdownEndOffset);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:396:            // Play the 2 animations as a sequence.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:397:            AnimatorSet wholeAnim = new AnimatorSet();
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:398:            wholeAnim.playSequentially(slowdownAnim, bounceBackAnim);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:399:            return wholeAnim;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:400:        }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:402:        protected ObjectAnimator createSlowdownAnimator(View view, int slowdownDuration, float slowdownEndOffset) {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:403:            ObjectAnimator slowdownAnim = ObjectAnimator.ofFloat(view, mAnimAttributes.mProperty, slowdownEndOffset);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:404:            slowdownAnim.setDuration(slowdownDuration);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:405:            slowdownAnim.setInterpolator(mBounceBackInterpolator);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:406:            slowdownAnim.addUpdateListener(this);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:407:            return slowdownAnim;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:408:        }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:410:        protected ObjectAnimator createBounceBackAnimator(float startOffset) {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:412:            final View view = mViewAdapter.getView();
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:414:            // Duration is proportional to the view's size.
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:415:            float bounceBackDuration = (Math.abs(startOffset) / mAnimAttributes.mMaxOffset) * MAX_BOUNCE_BACK_DURATION_MS;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:416:            ObjectAnimator bounceBackAnim = ObjectAnimator.ofFloat(view, mAnimAttributes.mProperty, mStartAttr.mAbsOffset);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:417:            bounceBackAnim.setDuration(Math.max((int) bounceBackDuration, MIN_BOUNCE_BACK_DURATION_MS));
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:418:            bounceBackAnim.setInterpolator(mBounceBackInterpolator);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:419:            bounceBackAnim.addUpdateListener(this);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:420:            return bounceBackAnim;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:421:        }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:422:    }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:424:    public OverScrollBounceEffectDecoratorBase(IOverScrollDecoratorAdapter viewAdapter, float decelerateFactor, float touchDragRatioFwd, float touchDragRatioBck) {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:425:        mViewAdapter = viewAdapter;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:427:        mBounceBackState = new BounceBackState(decelerateFactor);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:428:        mOverScrollingState = new OverScrollingState(touchDragRatioFwd, touchDragRatioBck);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:429:        mIdleState = new IdleState();
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:431:        mCurrentState = mIdleState;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:433:        attach();
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:434:    }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:436:    VelocityTracker mVelocityTracker;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:438:    @Override
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:439:    public boolean onTouch(View v, MotionEvent event) {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:440:        switch (event.getAction()) {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:441:            case MotionEvent.ACTION_MOVE:
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:442:                return mCurrentState.handleMoveTouchEvent(event);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:443:            case MotionEvent.ACTION_CANCEL:
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:444:            case MotionEvent.ACTION_UP:
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:445:                return mCurrentState.handleUpOrCancelTouchEvent(event);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:446:        }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:447:        return false;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:448:    }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:450:    @Override
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:451:    public void setOverScrollStateListener(IOverScrollStateListener listener) {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:452:        mStateListener = (listener != null ? listener : new OverScrollStateListenerStub());
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:453:    }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:455:    @Override
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:456:    public void setOverScrollUpdateListener(IOverScrollUpdateListener listener) {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:457:        mUpdateListener = (listener != null ? listener : new OverScrollUpdateListenerStub());
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:458:    }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:460:    @Override
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:461:    public int getCurrentState() {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:462:        return mCurrentState.getStateId();
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:463:    }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:465:    @Override
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:466:    public View getView() {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:467:        return mViewAdapter.getView();
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:468:    }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:470:    protected void issueStateTransition(IDecoratorState state) {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:471:        IDecoratorState oldState = mCurrentState;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:472:        mCurrentState = state;
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:473:        mCurrentState.handleEntryTransition(oldState);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:474:    }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:476:    protected void attach() {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:477:        getView().setOnTouchListener(this);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:478:        getView().setOverScrollMode(View.OVER_SCROLL_NEVER);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:479:    }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:481:    @Override
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:482:    public void detach() {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:483:        if (mCurrentState != mIdleState) {
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:484:            Log.w(TAG, "Decorator detached while over-scroll is in effect. You might want to add a precondition of that getCurrentState()==STATE_IDLE, first.");
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:485:        }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:486:        getView().setOnTouchListener(null);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:487:        getView().setOverScrollMode(View.OVER_SCROLL_ALWAYS);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:488:    }
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:490:    protected abstract MotionAttributes createMotionAttributes();
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:491:    protected abstract AnimationAttributes createAnimationAttributes();
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:492:    protected abstract void translateView(View view, float offset);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:493:    protected abstract void translateViewAndEvent(View view, float offset, MotionEvent event);
/ui\overscroll\OverScrollBounceEffectDecoratorBase.java:494:}
/ui\overscroll\OverScrollDecoratorHelper.java:1:package com.huanchengfly.tieba.post.ui.overscroll;
/ui\overscroll\OverScrollDecoratorHelper.java:3:import android.view.View;
/ui\overscroll\OverScrollDecoratorHelper.java:4:import android.widget.GridView;
/ui\overscroll\OverScrollDecoratorHelper.java:5:import android.widget.HorizontalScrollView;
/ui\overscroll\OverScrollDecoratorHelper.java:6:import android.widget.ListView;
/ui\overscroll\OverScrollDecoratorHelper.java:7:import android.widget.ScrollView;
/ui\overscroll\OverScrollDecoratorHelper.java:9:import androidx.recyclerview.widget.GridLayoutManager;
/ui\overscroll\OverScrollDecoratorHelper.java:10:import androidx.recyclerview.widget.LinearLayoutManager;
/ui\overscroll\OverScrollDecoratorHelper.java:11:import androidx.recyclerview.widget.RecyclerView;
/ui\overscroll\OverScrollDecoratorHelper.java:12:import androidx.recyclerview.widget.StaggeredGridLayoutManager;
/ui\overscroll\OverScrollDecoratorHelper.java:13:import androidx.viewpager.widget.ViewPager;
/ui\overscroll\OverScrollDecoratorHelper.java:15:import com.huanchengfly.tieba.post.ui.overscroll.adapters.AbsListViewOverScrollDecorAdapter;
/ui\overscroll\OverScrollDecoratorHelper.java:16:import com.huanchengfly.tieba.post.ui.overscroll.adapters.HorizontalScrollViewOverScrollDecorAdapter;
/ui\overscroll\OverScrollDecoratorHelper.java:17:import com.huanchengfly.tieba.post.ui.overscroll.adapters.RecyclerViewOverScrollDecorAdapter;
/ui\overscroll\OverScrollDecoratorHelper.java:18:import com.huanchengfly.tieba.post.ui.overscroll.adapters.ScrollViewOverScrollDecorAdapter;
/ui\overscroll\OverScrollDecoratorHelper.java:19:import com.huanchengfly.tieba.post.ui.overscroll.adapters.StaticOverScrollDecorAdapter;
/ui\overscroll\OverScrollDecoratorHelper.java:20:import com.huanchengfly.tieba.post.ui.overscroll.adapters.ViewPagerOverScrollDecorAdapter;
/ui\overscroll\OverScrollDecoratorHelper.java:22:/**
/ui\overscroll\OverScrollDecoratorHelper.java:23: * @author amit
/ui\overscroll\OverScrollDecoratorHelper.java:24: */
/ui\overscroll\OverScrollDecoratorHelper.java:25:public class OverScrollDecoratorHelper {
/ui\overscroll\OverScrollDecoratorHelper.java:27:    public static final int ORIENTATION_VERTICAL = 0;
/ui\overscroll\OverScrollDecoratorHelper.java:28:    public static final int ORIENTATION_HORIZONTAL = 1;
/ui\overscroll\OverScrollDecoratorHelper.java:30:    /**
/ui\overscroll\OverScrollDecoratorHelper.java:31:     * Set up the over-scroll effect over a specified {@link RecyclerView} view.
/ui\overscroll\OverScrollDecoratorHelper.java:32:     * <br/>Only recycler-views using <b>native</b> Android layout managers (i.e. {@link LinearLayoutManager},
/ui\overscroll\OverScrollDecoratorHelper.java:33:     * {@link GridLayoutManager} and {@link StaggeredGridLayoutManager}) are currently supported
/ui\overscroll\OverScrollDecoratorHelper.java:34:     * by this convenience method.
/ui\overscroll\OverScrollDecoratorHelper.java:35:     *
/ui\overscroll\OverScrollDecoratorHelper.java:36:     * @param recyclerView The view.
/ui\overscroll\OverScrollDecoratorHelper.java:37:     * @param orientation Either {@link #ORIENTATION_HORIZONTAL} or {@link #ORIENTATION_VERTICAL}.
/ui\overscroll\OverScrollDecoratorHelper.java:38:     *
/ui\overscroll\OverScrollDecoratorHelper.java:39:     * @return The over-scroll effect 'decorator', enabling further effect configuration.
/ui\overscroll\OverScrollDecoratorHelper.java:40:     */
/ui\overscroll\OverScrollDecoratorHelper.java:41:    public static IOverScrollDecor setUpOverScroll(RecyclerView recyclerView, int orientation) {
/ui\overscroll\OverScrollDecoratorHelper.java:42:        switch (orientation) {
/ui\overscroll\OverScrollDecoratorHelper.java:43:            case ORIENTATION_HORIZONTAL:
/ui\overscroll\OverScrollDecoratorHelper.java:44:                return new HorizontalOverScrollBounceEffectDecorator(new RecyclerViewOverScrollDecorAdapter(recyclerView));
/ui\overscroll\OverScrollDecoratorHelper.java:45:            case ORIENTATION_VERTICAL:
/ui\overscroll\OverScrollDecoratorHelper.java:46:                return new VerticalOverScrollBounceEffectDecorator(new RecyclerViewOverScrollDecorAdapter(recyclerView));
/ui\overscroll\OverScrollDecoratorHelper.java:47:            default:
/ui\overscroll\OverScrollDecoratorHelper.java:48:                throw new IllegalArgumentException("orientation");
/ui\overscroll\OverScrollDecoratorHelper.java:49:        }
/ui\overscroll\OverScrollDecoratorHelper.java:50:    }
/ui\overscroll\OverScrollDecoratorHelper.java:52:    public static IOverScrollDecor setUpOverScroll(ListView listView) {
/ui\overscroll\OverScrollDecoratorHelper.java:53:        return new VerticalOverScrollBounceEffectDecorator(new AbsListViewOverScrollDecorAdapter(listView));
/ui\overscroll\OverScrollDecoratorHelper.java:54:    }
/ui\overscroll\OverScrollDecoratorHelper.java:56:    public static IOverScrollDecor setUpOverScroll(GridView gridView) {
/ui\overscroll\OverScrollDecoratorHelper.java:57:        return new VerticalOverScrollBounceEffectDecorator(new AbsListViewOverScrollDecorAdapter(gridView));
/ui\overscroll\OverScrollDecoratorHelper.java:58:    }
/ui\overscroll\OverScrollDecoratorHelper.java:60:    public static IOverScrollDecor setUpOverScroll(ScrollView scrollView) {
/ui\overscroll\OverScrollDecoratorHelper.java:61:        return new VerticalOverScrollBounceEffectDecorator(new ScrollViewOverScrollDecorAdapter(scrollView));
/ui\overscroll\OverScrollDecoratorHelper.java:62:    }
/ui\overscroll\OverScrollDecoratorHelper.java:64:    public static IOverScrollDecor setUpOverScroll(HorizontalScrollView scrollView) {
/ui\overscroll\OverScrollDecoratorHelper.java:65:        return new HorizontalOverScrollBounceEffectDecorator(new HorizontalScrollViewOverScrollDecorAdapter(scrollView));
/ui\overscroll\OverScrollDecoratorHelper.java:66:    }
/ui\overscroll\OverScrollDecoratorHelper.java:68:    /**
/ui\overscroll\OverScrollDecoratorHelper.java:69:     * Set up the over-scroll over a generic view, assumed to always be over-scroll ready (e.g.
/ui\overscroll\OverScrollDecoratorHelper.java:70:     * a plain text field, image view).
/ui\overscroll\OverScrollDecoratorHelper.java:71:     *
/ui\overscroll\OverScrollDecoratorHelper.java:72:     * @param view The view.
/ui\overscroll\OverScrollDecoratorHelper.java:73:     * @param orientation One of {@link #ORIENTATION_HORIZONTAL} or {@link #ORIENTATION_VERTICAL}.
/ui\overscroll\OverScrollDecoratorHelper.java:74:     *
/ui\overscroll\OverScrollDecoratorHelper.java:75:     * @return The over-scroll effect 'decorator', enabling further effect configuration.
/ui\overscroll\OverScrollDecoratorHelper.java:76:     */
/ui\overscroll\OverScrollDecoratorHelper.java:77:    public static IOverScrollDecor setUpStaticOverScroll(View view, int orientation) {
/ui\overscroll\OverScrollDecoratorHelper.java:78:        switch (orientation) {
/ui\overscroll\OverScrollDecoratorHelper.java:79:            case ORIENTATION_HORIZONTAL:
/ui\overscroll\OverScrollDecoratorHelper.java:80:                return new HorizontalOverScrollBounceEffectDecorator(new StaticOverScrollDecorAdapter(view));
/ui\overscroll\OverScrollDecoratorHelper.java:82:            case ORIENTATION_VERTICAL:
/ui\overscroll\OverScrollDecoratorHelper.java:83:                return new VerticalOverScrollBounceEffectDecorator(new StaticOverScrollDecorAdapter(view));
/ui\overscroll\OverScrollDecoratorHelper.java:85:            default:
/ui\overscroll\OverScrollDecoratorHelper.java:86:                throw new IllegalArgumentException("orientation");
/ui\overscroll\OverScrollDecoratorHelper.java:87:        }
/ui\overscroll\OverScrollDecoratorHelper.java:88:    }
/ui\overscroll\OverScrollDecoratorHelper.java:90:    public static IOverScrollDecor setUpOverScroll(ViewPager viewPager) {
/ui\overscroll\OverScrollDecoratorHelper.java:91:        return new HorizontalOverScrollBounceEffectDecorator(new ViewPagerOverScrollDecorAdapter(viewPager));
/ui\overscroll\OverScrollDecoratorHelper.java:92:    }
/ui\overscroll\OverScrollDecoratorHelper.java:94:}
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:1:package com.huanchengfly.tieba.post.ui.overscroll;
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:3:import android.view.MotionEvent;
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:4:import android.view.View;
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:6:import com.huanchengfly.tieba.post.ui.overscroll.adapters.IOverScrollDecoratorAdapter;
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:8:/**
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:9: * A concrete implementation of {@link OverScrollBounceEffectDecoratorBase} for a vertical orientation.
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:10: *
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:11: * @author amit
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:12: */
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:13:public class VerticalOverScrollBounceEffectDecorator extends OverScrollBounceEffectDecoratorBase {
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:15:    protected static class MotionAttributesVertical extends MotionAttributes {
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:17:        public boolean init(View view, MotionEvent event) {
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:19:            // We must have history available to calc the dx. Normally it's there - if it isn't temporarily,
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:20:            // we declare the event 'invalid' and expect it in consequent events.
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:21:            if (event.getHistorySize() == 0) {
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:22:                return false;
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:23:            }
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:25:            // Allow for counter-orientation-direction operations (e.g. item swiping) to run fluently.
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:26:            final float dy = event.getY(0) - event.getHistoricalY(0, 0);
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:27:            final float dx = event.getX(0) - event.getHistoricalX(0, 0);
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:28:            if (Math.abs(dx) > Math.abs(dy)) {
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:29:                return false;
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:30:            }
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:32:            mAbsOffset = view.getTranslationY();
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:33:            mDeltaOffset = dy;
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:34:            mDir = mDeltaOffset > 0;
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:36:            return true;
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:37:        }
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:38:    }
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:40:    protected static class AnimationAttributesVertical extends AnimationAttributes {
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:42:        public AnimationAttributesVertical() {
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:43:            mProperty = View.TRANSLATION_Y;
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:44:        }
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:46:        @Override
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:47:        protected void init(View view) {
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:48:            mAbsOffset = view.getTranslationY();
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:49:            mMaxOffset = view.getHeight();
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:50:        }
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:51:    }
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:53:    /**
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:54:     * C'tor, creating the effect with default arguments:
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:55:     * <br/>Touch-drag ratio in 'forward' direction will be set to DEFAULT_TOUCH_DRAG_MOVE_RATIO_FWD.
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:56:     * <br/>Touch-drag ratio in 'backwards' direction will be set to DEFAULT_TOUCH_DRAG_MOVE_RATIO_BCK.
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:57:     * <br/>Deceleration factor (for the bounce-back effect) will be set to DEFAULT_DECELERATE_FACTOR.
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:58:     *
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:59:     * @param viewAdapter The view's encapsulation.
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:60:     */
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:61:    public VerticalOverScrollBounceEffectDecorator(IOverScrollDecoratorAdapter viewAdapter) {
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:62:        this(viewAdapter, DEFAULT_TOUCH_DRAG_MOVE_RATIO_FWD, DEFAULT_TOUCH_DRAG_MOVE_RATIO_BCK, DEFAULT_DECELERATE_FACTOR);
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:63:    }
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:65:    /**
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:66:     * C'tor, creating the effect with explicit arguments.
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:67:     * @param viewAdapter The view's encapsulation.
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:68:     * @param touchDragRatioFwd Ratio of touch distance to actual drag distance when in 'forward' direction.
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:69:     * @param touchDragRatioBck Ratio of touch distance to actual drag distance when in 'backward'
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:70:     *                          direction (opposite to initial one).
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:71:     * @param decelerateFactor Deceleration factor used when decelerating the motion to create the
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:72:     *                         bounce-back effect.
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:73:     */
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:74:    public VerticalOverScrollBounceEffectDecorator(IOverScrollDecoratorAdapter viewAdapter,
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:75:                                                   float touchDragRatioFwd, float touchDragRatioBck, float decelerateFactor) {
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:76:        super(viewAdapter, decelerateFactor, touchDragRatioFwd, touchDragRatioBck);
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:77:    }
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:79:    @Override
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:80:    protected MotionAttributes createMotionAttributes() {
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:81:        return new MotionAttributesVertical();
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:82:    }
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:84:    @Override
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:85:    protected AnimationAttributes createAnimationAttributes() {
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:86:        return new AnimationAttributesVertical();
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:87:    }
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:89:    @Override
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:90:    protected void translateView(View view, float offset) {
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:91:        view.setTranslationY(offset);
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:92:    }
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:94:    @Override
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:95:    protected void translateViewAndEvent(View view, float offset, MotionEvent event) {
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:96:        view.setTranslationY(offset);
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:97:        event.offsetLocation(offset - event.getY(0), 0f);
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:98:    }
/ui\overscroll\VerticalOverScrollBounceEffectDecorator.java:99:}
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:1:package com.huanchengfly.tieba.post.ui.overscroll.adapters;
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:3:import android.view.View;
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:4:import android.widget.AbsListView;
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:6:import com.huanchengfly.tieba.post.ui.overscroll.HorizontalOverScrollBounceEffectDecorator;
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:7:import com.huanchengfly.tieba.post.ui.overscroll.VerticalOverScrollBounceEffectDecorator;
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:9:/**
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:10: * An mAdapter to enable over-scrolling over object of {@link AbsListView}, namely {@link
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:11: * android.widget.ListView} and it's extensions, and {@link android.widget.GridView}.
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:12: *
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:13: * @author amit
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:14: *
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:15: * @see HorizontalOverScrollBounceEffectDecorator
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:16: * @see VerticalOverScrollBounceEffectDecorator
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:17: */
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:18:public class AbsListViewOverScrollDecorAdapter implements IOverScrollDecoratorAdapter {
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:20:    protected final AbsListView mView;
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:22:    public AbsListViewOverScrollDecorAdapter(AbsListView view) {
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:23:        mView = view;
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:24:    }
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:26:    @Override
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:27:    public View getView() {
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:28:        return mView;
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:29:    }
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:31:    @Override
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:32:    public boolean isInAbsoluteStart() {
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:33:        return mView.getChildCount() > 0 && !canScrollListUp();
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:34:    }
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:36:    @Override
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:37:    public boolean isInAbsoluteEnd() {
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:38:        return mView.getChildCount() > 0 && !canScrollListDown();
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:39:    }
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:41:    public boolean canScrollListUp() {
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:42:        // Ported from AbsListView#canScrollList() which isn't compatible to all API levels
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:43:        final int firstTop = mView.getChildAt(0).getTop();
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:44:        final int firstPosition = mView.getFirstVisiblePosition();
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:45:        return firstPosition > 0 || firstTop < mView.getListPaddingTop();
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:46:    }
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:48:    public boolean canScrollListDown() {
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:49:        // Ported from AbsListView#canScrollList() which isn't compatible to all API levels
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:50:        final int childCount = mView.getChildCount();
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:51:        final int itemsCount = mView.getCount();
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:52:        final int firstPosition = mView.getFirstVisiblePosition();
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:53:        final int lastPosition = firstPosition + childCount;
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:54:        final int lastBottom = mView.getChildAt(childCount - 1).getBottom();
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:55:        return lastPosition < itemsCount || lastBottom > mView.getHeight() - mView.getListPaddingBottom();
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:56:    }
/ui\overscroll\adapters\AbsListViewOverScrollDecorAdapter.java:57:}
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:1:package com.huanchengfly.tieba.post.ui.overscroll.adapters;
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:3:import android.view.View;
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:4:import android.widget.HorizontalScrollView;
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:6:import com.huanchengfly.tieba.post.ui.overscroll.HorizontalOverScrollBounceEffectDecorator;
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:7:import com.huanchengfly.tieba.post.ui.overscroll.VerticalOverScrollBounceEffectDecorator;
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:9:/**
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:10: * An mAdapter that enables over-scrolling support over a {@link HorizontalScrollView}.
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:11: * <br/>Seeing that {@link HorizontalScrollView} only supports horizontal scrolling, this mAdapter
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:12: * should only be used with a {@link HorizontalOverScrollBounceEffectDecorator}.
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:13: *
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:14: * @author amit
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:15: *
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:16: * @see HorizontalOverScrollBounceEffectDecorator
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:17: * @see VerticalOverScrollBounceEffectDecorator
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:18: */
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:19:public class HorizontalScrollViewOverScrollDecorAdapter implements IOverScrollDecoratorAdapter {
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:21:    protected final HorizontalScrollView mView;
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:23:    public HorizontalScrollViewOverScrollDecorAdapter(HorizontalScrollView view) {
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:24:        mView = view;
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:25:    }
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:27:    @Override
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:28:    public View getView() {
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:29:        return mView;
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:30:    }
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:32:    @Override
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:33:    public boolean isInAbsoluteStart() {
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:34:        return !mView.canScrollHorizontally(-1);
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:35:    }
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:37:    @Override
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:38:    public boolean isInAbsoluteEnd() {
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:39:        return !mView.canScrollHorizontally(1);
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:40:    }
/ui\overscroll\adapters\HorizontalScrollViewOverScrollDecorAdapter.java:41:}
/ui\overscroll\adapters\IOverScrollDecoratorAdapter.java:1:package com.huanchengfly.tieba.post.ui.overscroll.adapters;
/ui\overscroll\adapters\IOverScrollDecoratorAdapter.java:3:import android.view.View;
/ui\overscroll\adapters\IOverScrollDecoratorAdapter.java:5:import com.huanchengfly.tieba.post.ui.overscroll.HorizontalOverScrollBounceEffectDecorator;
/ui\overscroll\adapters\IOverScrollDecoratorAdapter.java:7:/**
/ui\overscroll\adapters\IOverScrollDecoratorAdapter.java:8: * @author amitd
/ui\overscroll\adapters\IOverScrollDecoratorAdapter.java:9: *
/ui\overscroll\adapters\IOverScrollDecoratorAdapter.java:10: * @see HorizontalOverScrollBounceEffectDecorator
/ui\overscroll\adapters\IOverScrollDecoratorAdapter.java:11: */
/ui\overscroll\adapters\IOverScrollDecoratorAdapter.java:12:public interface IOverScrollDecoratorAdapter {
/ui\overscroll\adapters\IOverScrollDecoratorAdapter.java:14:    View getView();
/ui\overscroll\adapters\IOverScrollDecoratorAdapter.java:16:    /**
/ui\overscroll\adapters\IOverScrollDecoratorAdapter.java:17:     * Is view in it's absolute start position - such that a negative over-scroll can potentially
/ui\overscroll\adapters\IOverScrollDecoratorAdapter.java:18:     * be initiated. For example, in list-views, this is synonymous with the first item being
/ui\overscroll\adapters\IOverScrollDecoratorAdapter.java:19:     * fully visible.
/ui\overscroll\adapters\IOverScrollDecoratorAdapter.java:20:     *
/ui\overscroll\adapters\IOverScrollDecoratorAdapter.java:21:     * @return Whether in absolute start position.
/ui\overscroll\adapters\IOverScrollDecoratorAdapter.java:22:     */
/ui\overscroll\adapters\IOverScrollDecoratorAdapter.java:23:    boolean isInAbsoluteStart();
/ui\overscroll\adapters\IOverScrollDecoratorAdapter.java:25:    /**
/ui\overscroll\adapters\IOverScrollDecoratorAdapter.java:26:     * Is view in it's absolute end position - such that an over-scroll can potentially
/ui\overscroll\adapters\IOverScrollDecoratorAdapter.java:27:     * be initiated. For example, in list-views, this is synonymous with the last item being
/ui\overscroll\adapters\IOverScrollDecoratorAdapter.java:28:     * fully visible.
/ui\overscroll\adapters\IOverScrollDecoratorAdapter.java:29:     *
/ui\overscroll\adapters\IOverScrollDecoratorAdapter.java:30:     * @return Whether in absolute end position.
/ui\overscroll\adapters\IOverScrollDecoratorAdapter.java:31:     */
/ui\overscroll\adapters\IOverScrollDecoratorAdapter.java:32:    boolean isInAbsoluteEnd();
/ui\overscroll\adapters\IOverScrollDecoratorAdapter.java:33:}
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:1:package com.huanchengfly.tieba.post.ui.overscroll.adapters;
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:3:import android.graphics.Canvas;
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:4:import android.view.View;
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:6:import androidx.recyclerview.widget.ItemTouchHelper;
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:7:import androidx.recyclerview.widget.LinearLayoutManager;
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:8:import androidx.recyclerview.widget.RecyclerView;
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:9:import androidx.recyclerview.widget.StaggeredGridLayoutManager;
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:11:import java.util.List;
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:13:import com.huanchengfly.tieba.post.ui.overscroll.HorizontalOverScrollBounceEffectDecorator;
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:14:import com.huanchengfly.tieba.post.ui.overscroll.VerticalOverScrollBounceEffectDecorator;
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:16:/**
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:17: * @author amitd
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:18: *
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:19: * @see HorizontalOverScrollBounceEffectDecorator
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:20: * @see VerticalOverScrollBounceEffectDecorator
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:21: */
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:22:public class RecyclerViewOverScrollDecorAdapter implements IOverScrollDecoratorAdapter {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:24:    /**
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:25:     * A delegation of the mAdapter implementation of this view that should provide the processing
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:26:     * of {@link #isInAbsoluteStart()} and {@link #isInAbsoluteEnd()}. Essentially needed simply
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:27:     * because the implementation depends on the layout manager implementation being used.
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:28:     */
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:29:    protected interface Impl {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:30:        boolean isInAbsoluteStart();
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:31:        boolean isInAbsoluteEnd();
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:32:    }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:34:    protected final RecyclerView mRecyclerView;
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:35:    protected final Impl mImpl;
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:37:    protected boolean mIsItemTouchInEffect = false;
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:39:    public RecyclerViewOverScrollDecorAdapter(RecyclerView recyclerView) {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:41:        mRecyclerView = recyclerView;
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:43:        final RecyclerView.LayoutManager layoutManager = recyclerView.getLayoutManager();
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:44:        if (layoutManager instanceof LinearLayoutManager ||
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:45:            layoutManager instanceof StaggeredGridLayoutManager)
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:46:        {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:47:            final int orientation =
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:48:                    (layoutManager instanceof LinearLayoutManager
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:49:                        ? ((LinearLayoutManager) layoutManager).getOrientation()
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:50:                        : ((StaggeredGridLayoutManager) layoutManager).getOrientation());
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:52:            if (orientation == LinearLayoutManager.HORIZONTAL) {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:53:                mImpl = new ImplHorizLayout();
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:54:            } else {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:55:                mImpl = new ImplVerticalLayout();
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:56:            }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:57:        }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:58:        else
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:59:        {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:60:            throw new IllegalArgumentException("Recycler views with custom layout managers are not supported by this mAdapter out of the box." +
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:61:                    "Try implementing and providing an explicit 'impl' parameter to the other c'tors, or otherwise create a custom mAdapter subclass of your own.");
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:62:        }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:63:    }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:65:    public RecyclerViewOverScrollDecorAdapter(RecyclerView recyclerView, Impl impl) {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:66:        mRecyclerView = recyclerView;
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:67:        mImpl = impl;
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:68:    }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:70:    public RecyclerViewOverScrollDecorAdapter(RecyclerView recyclerView, ItemTouchHelper.Callback itemTouchHelperCallback) {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:71:        this(recyclerView);
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:72:        setUpTouchHelperCallback(itemTouchHelperCallback);
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:73:    }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:75:    public RecyclerViewOverScrollDecorAdapter(RecyclerView recyclerView, Impl impl, ItemTouchHelper.Callback itemTouchHelperCallback) {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:76:        this(recyclerView, impl);
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:77:        setUpTouchHelperCallback(itemTouchHelperCallback);
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:78:    }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:80:    protected void setUpTouchHelperCallback(final ItemTouchHelper.Callback itemTouchHelperCallback) {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:81:        new ItemTouchHelper(new ItemTouchHelperCallbackWrapper(itemTouchHelperCallback) {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:82:            @Override
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:83:            public void onSelectedChanged(RecyclerView.ViewHolder viewHolder, int actionState) {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:84:                mIsItemTouchInEffect = actionState != 0;
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:85:                super.onSelectedChanged(viewHolder, actionState);
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:86:            }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:87:        }).attachToRecyclerView(mRecyclerView);
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:88:    }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:90:    @Override
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:91:    public View getView() {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:92:        return mRecyclerView;
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:93:    }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:95:    @Override
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:96:    public boolean isInAbsoluteStart() {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:97:        return !mIsItemTouchInEffect && mImpl.isInAbsoluteStart();
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:98:    }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:100:    @Override
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:101:    public boolean isInAbsoluteEnd() {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:102:        return !mIsItemTouchInEffect && mImpl.isInAbsoluteEnd();
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:103:    }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:105:    protected class ImplHorizLayout implements Impl {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:107:        @Override
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:108:        public boolean isInAbsoluteStart() {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:109:            return !mRecyclerView.canScrollHorizontally(-1);
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:110:        }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:112:        @Override
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:113:        public boolean isInAbsoluteEnd() {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:114:            return !mRecyclerView.canScrollHorizontally(1);
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:115:        }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:116:    }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:118:    protected class ImplVerticalLayout implements Impl {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:120:        @Override
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:121:        public boolean isInAbsoluteStart() {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:122:            return !mRecyclerView.canScrollVertically(-1);
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:123:        }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:125:        @Override
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:126:        public boolean isInAbsoluteEnd() {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:127:            return !mRecyclerView.canScrollVertically(1);
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:128:        }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:129:    }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:131:    private static class ItemTouchHelperCallbackWrapper extends ItemTouchHelper.Callback {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:133:        final ItemTouchHelper.Callback mCallback;
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:135:        private ItemTouchHelperCallbackWrapper(ItemTouchHelper.Callback callback) {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:136:            mCallback = callback;
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:137:        }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:139:        @Override
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:140:        public int getMovementFlags(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder) {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:141:            return mCallback.getMovementFlags(recyclerView, viewHolder);
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:142:        }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:144:        @Override
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:145:        public boolean onMove(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, RecyclerView.ViewHolder target) {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:146:            return mCallback.onMove(recyclerView, viewHolder, target);
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:147:        }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:149:        @Override
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:150:        public void onSwiped(RecyclerView.ViewHolder viewHolder, int direction) {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:151:            mCallback.onSwiped(viewHolder, direction);
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:152:        }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:154:        @Override
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:155:        public int convertToAbsoluteDirection(int flags, int layoutDirection) {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:156:            return mCallback.convertToAbsoluteDirection(flags, layoutDirection);
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:157:        }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:159:        @Override
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:160:        public boolean canDropOver(RecyclerView recyclerView, RecyclerView.ViewHolder current, RecyclerView.ViewHolder target) {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:161:            return mCallback.canDropOver(recyclerView, current, target);
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:162:        }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:164:        @Override
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:165:        public boolean isLongPressDragEnabled() {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:166:            return mCallback.isLongPressDragEnabled();
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:167:        }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:169:        @Override
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:170:        public boolean isItemViewSwipeEnabled() {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:171:            return mCallback.isItemViewSwipeEnabled();
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:172:        }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:174:        @Override
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:175:        public int getBoundingBoxMargin() {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:176:            return mCallback.getBoundingBoxMargin();
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:177:        }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:179:        @Override
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:180:        public float getSwipeThreshold(RecyclerView.ViewHolder viewHolder) {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:181:            return mCallback.getSwipeThreshold(viewHolder);
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:182:        }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:184:        @Override
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:185:        public float getMoveThreshold(RecyclerView.ViewHolder viewHolder) {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:186:            return mCallback.getMoveThreshold(viewHolder);
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:187:        }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:189:        @Override
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:190:        public RecyclerView.ViewHolder chooseDropTarget(RecyclerView.ViewHolder selected, List<RecyclerView.ViewHolder> dropTargets, int curX, int curY) {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:191:            return mCallback.chooseDropTarget(selected, dropTargets, curX, curY);
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:192:        }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:194:        @Override
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:195:        public void onSelectedChanged(RecyclerView.ViewHolder viewHolder, int actionState) {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:196:            mCallback.onSelectedChanged(viewHolder, actionState);
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:197:        }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:199:        @Override
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:200:        public void onMoved(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, int fromPos, RecyclerView.ViewHolder target, int toPos, int x, int y) {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:201:            mCallback.onMoved(recyclerView, viewHolder, fromPos, target, toPos, x, y);
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:202:        }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:204:        @Override
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:205:        public void clearView(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder) {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:206:            mCallback.clearView(recyclerView, viewHolder);
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:207:        }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:209:        @Override
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:210:        public void onChildDraw(Canvas c, RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, float dX, float dY, int actionState, boolean isCurrentlyActive) {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:211:            mCallback.onChildDraw(c, recyclerView, viewHolder, dX, dY, actionState, isCurrentlyActive);
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:212:        }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:214:        @Override
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:215:        public void onChildDrawOver(Canvas c, RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, float dX, float dY, int actionState, boolean isCurrentlyActive) {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:216:            mCallback.onChildDrawOver(c, recyclerView, viewHolder, dX, dY, actionState, isCurrentlyActive);
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:217:        }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:219:        @Override
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:220:        public long getAnimationDuration(RecyclerView recyclerView, int animationType, float animateDx, float animateDy) {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:221:            return mCallback.getAnimationDuration(recyclerView, animationType, animateDx, animateDy);
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:222:        }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:224:        @Override
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:225:        public int interpolateOutOfBoundsScroll(RecyclerView recyclerView, int viewSize, int viewSizeOutOfBounds, int totalSize, long msSinceStartScroll) {
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:226:            return mCallback.interpolateOutOfBoundsScroll(recyclerView, viewSize, viewSizeOutOfBounds, totalSize, msSinceStartScroll);
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:227:        }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:228:    }
/ui\overscroll\adapters\RecyclerViewOverScrollDecorAdapter.java:229:}
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:1:package com.huanchengfly.tieba.post.ui.overscroll.adapters;
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:3:import android.view.View;
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:4:import android.widget.ScrollView;
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:6:import com.huanchengfly.tieba.post.ui.overscroll.HorizontalOverScrollBounceEffectDecorator;
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:7:import com.huanchengfly.tieba.post.ui.overscroll.VerticalOverScrollBounceEffectDecorator;
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:9:/**
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:10: * An mAdapter that enables over-scrolling over a {@link ScrollView}.
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:11: * <br/>Seeing that {@link ScrollView} only supports vertical scrolling, this mAdapter
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:12: * should only be used with a {@link VerticalOverScrollBounceEffectDecorator}. For horizontal
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:13: * over-scrolling, use {@link HorizontalScrollViewOverScrollDecorAdapter} in conjunction with
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:14: * a {@link android.widget.HorizontalScrollView}.
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:15: *
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:16: * @author amit
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:17: *
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:18: * @see HorizontalOverScrollBounceEffectDecorator
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:19: * @see VerticalOverScrollBounceEffectDecorator
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:20: */
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:21:public class ScrollViewOverScrollDecorAdapter implements IOverScrollDecoratorAdapter {
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:23:    protected final ScrollView mView;
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:25:    public ScrollViewOverScrollDecorAdapter(ScrollView view) {
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:26:        mView = view;
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:27:    }
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:29:    @Override
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:30:    public View getView() {
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:31:        return mView;
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:32:    }
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:34:    @Override
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:35:    public boolean isInAbsoluteStart() {
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:36:        return !mView.canScrollVertically(-1);
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:37:    }
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:39:    @Override
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:40:    public boolean isInAbsoluteEnd() {
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:41:        return !mView.canScrollVertically(1);
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:42:    }
/ui\overscroll\adapters\ScrollViewOverScrollDecorAdapter.java:43:}
/ui\overscroll\adapters\StaticOverScrollDecorAdapter.java:1:package com.huanchengfly.tieba.post.ui.overscroll.adapters;
/ui\overscroll\adapters\StaticOverScrollDecorAdapter.java:3:import android.view.View;
/ui\overscroll\adapters\StaticOverScrollDecorAdapter.java:5:import com.huanchengfly.tieba.post.ui.overscroll.HorizontalOverScrollBounceEffectDecorator;
/ui\overscroll\adapters\StaticOverScrollDecorAdapter.java:6:import com.huanchengfly.tieba.post.ui.overscroll.VerticalOverScrollBounceEffectDecorator;
/ui\overscroll\adapters\StaticOverScrollDecorAdapter.java:8:/**
/ui\overscroll\adapters\StaticOverScrollDecorAdapter.java:9: * A static mAdapter for views that are ALWAYS over-scroll-able (e.g. image view).
/ui\overscroll\adapters\StaticOverScrollDecorAdapter.java:10: *
/ui\overscroll\adapters\StaticOverScrollDecorAdapter.java:11: * @author amit
/ui\overscroll\adapters\StaticOverScrollDecorAdapter.java:12: *
/ui\overscroll\adapters\StaticOverScrollDecorAdapter.java:13: * @see HorizontalOverScrollBounceEffectDecorator
/ui\overscroll\adapters\StaticOverScrollDecorAdapter.java:14: * @see VerticalOverScrollBounceEffectDecorator
/ui\overscroll\adapters\StaticOverScrollDecorAdapter.java:15: */
/ui\overscroll\adapters\StaticOverScrollDecorAdapter.java:16:public class StaticOverScrollDecorAdapter implements IOverScrollDecoratorAdapter {
/ui\overscroll\adapters\StaticOverScrollDecorAdapter.java:18:    protected final View mView;
/ui\overscroll\adapters\StaticOverScrollDecorAdapter.java:20:    public StaticOverScrollDecorAdapter(View view) {
/ui\overscroll\adapters\StaticOverScrollDecorAdapter.java:21:        mView = view;
/ui\overscroll\adapters\StaticOverScrollDecorAdapter.java:22:    }
/ui\overscroll\adapters\StaticOverScrollDecorAdapter.java:24:    @Override
/ui\overscroll\adapters\StaticOverScrollDecorAdapter.java:25:    public View getView() {
/ui\overscroll\adapters\StaticOverScrollDecorAdapter.java:26:        return mView;
/ui\overscroll\adapters\StaticOverScrollDecorAdapter.java:27:    }
/ui\overscroll\adapters\StaticOverScrollDecorAdapter.java:29:    @Override
/ui\overscroll\adapters\StaticOverScrollDecorAdapter.java:30:    public boolean isInAbsoluteStart() {
/ui\overscroll\adapters\StaticOverScrollDecorAdapter.java:31:        return true;
/ui\overscroll\adapters\StaticOverScrollDecorAdapter.java:32:    }
/ui\overscroll\adapters\StaticOverScrollDecorAdapter.java:34:    @Override
/ui\overscroll\adapters\StaticOverScrollDecorAdapter.java:35:    public boolean isInAbsoluteEnd() {
/ui\overscroll\adapters\StaticOverScrollDecorAdapter.java:36:        return true;
/ui\overscroll\adapters\StaticOverScrollDecorAdapter.java:37:    }
/ui\overscroll\adapters\StaticOverScrollDecorAdapter.java:38:}
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:1:package com.huanchengfly.tieba.post.ui.overscroll.adapters;
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:3:import android.view.View;
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:5:import androidx.viewpager.widget.ViewPager;
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:7:import com.huanchengfly.tieba.post.ui.overscroll.HorizontalOverScrollBounceEffectDecorator;
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:9:/**
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:10: * Created by Bruce too
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:11: * Enhance by amit
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:12: * On 2016/6/16
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:13: * At 14:51
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:14: * An mAdapter to enable over-scrolling over object of {@link ViewPager}
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:15: *
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:16: * @see HorizontalOverScrollBounceEffectDecorator
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:17: */
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:18:public class ViewPagerOverScrollDecorAdapter implements IOverScrollDecoratorAdapter, ViewPager.OnPageChangeListener {
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:20:    protected final ViewPager mViewPager;
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:22:    protected int mLastPagerPosition = 0;
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:23:    protected float mLastPagerScrollOffset;
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:25:    public ViewPagerOverScrollDecorAdapter(ViewPager viewPager) {
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:26:        this.mViewPager = viewPager;
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:28:        mViewPager.addOnPageChangeListener(this);
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:30:        mLastPagerPosition = mViewPager.getCurrentItem();
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:31:        mLastPagerScrollOffset = 0f;
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:32:    }
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:34:    @Override
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:35:    public View getView() {
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:36:        return mViewPager;
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:37:    }
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:39:    @Override
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:40:    public boolean isInAbsoluteStart() {
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:42:        return mLastPagerPosition == 0 &&
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:43:                mLastPagerScrollOffset == 0f;
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:44:    }
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:46:    @Override
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:47:    public boolean isInAbsoluteEnd() {
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:49:        return mLastPagerPosition == mViewPager.getAdapter().getCount()-1 &&
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:50:                mLastPagerScrollOffset == 0f;
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:51:    }
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:53:    @Override
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:54:    public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:55:        mLastPagerPosition = position;
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:56:        mLastPagerScrollOffset = positionOffset;
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:57:    }
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:59:    @Override
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:60:    public void onPageSelected(int position) {
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:62:    }
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:64:    @Override
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:65:    public void onPageScrollStateChanged(int state) {
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:67:    }
/ui\overscroll\adapters\ViewPagerOverScrollDecorAdapter.java:68:}
/ui\theme\interfaces\DrawableInflateDelegate.java:1:package com.huanchengfly.tieba.post.ui.theme.interfaces;
/ui\theme\interfaces\DrawableInflateDelegate.java:3:import android.content.Context;
/ui\theme\interfaces\DrawableInflateDelegate.java:4:import android.graphics.drawable.Drawable;
/ui\theme\interfaces\DrawableInflateDelegate.java:5:import android.util.AttributeSet;
/ui\theme\interfaces\DrawableInflateDelegate.java:7:import org.xmlpull.v1.XmlPullParser;
/ui\theme\interfaces\DrawableInflateDelegate.java:8:import org.xmlpull.v1.XmlPullParserException;
/ui\theme\interfaces\DrawableInflateDelegate.java:10:import java.io.IOException;
/ui\theme\interfaces\DrawableInflateDelegate.java:12:public interface DrawableInflateDelegate<T extends Drawable> {
/ui\theme\interfaces\DrawableInflateDelegate.java:13:    T inflateDrawable(Context context, XmlPullParser parser, AttributeSet attrs) throws IOException, XmlPullParserException;
/ui\theme\interfaces\DrawableInflateDelegate.java:14:}
/ui\theme\interfaces\ExtraRefreshable.java:1:package com.huanchengfly.tieba.post.ui.theme.interfaces;
/ui\theme\interfaces\ExtraRefreshable.java:3:import android.app.Activity;
/ui\theme\interfaces\ExtraRefreshable.java:4:import android.view.View;
/ui\theme\interfaces\ExtraRefreshable.java:6:public interface ExtraRefreshable {
/ui\theme\interfaces\ExtraRefreshable.java:7:    void refreshGlobal(Activity activity);
/ui\theme\interfaces\ExtraRefreshable.java:9:    void refreshSpecificView(View view);
/ui\theme\interfaces\ExtraRefreshable.java:10:}
/ui\theme\interfaces\ThemeSwitcher.java:1:package com.huanchengfly.tieba.post.ui.theme.interfaces;
/ui\theme\interfaces\ThemeSwitcher.java:3:import android.content.Context;
/ui\theme\interfaces\ThemeSwitcher.java:5:import androidx.annotation.AttrRes;
/ui\theme\interfaces\ThemeSwitcher.java:6:import androidx.annotation.ColorInt;
/ui\theme\interfaces\ThemeSwitcher.java:7:import androidx.annotation.ColorRes;
/ui\theme\interfaces\ThemeSwitcher.java:9:public interface ThemeSwitcher {
/ui\theme\interfaces\ThemeSwitcher.java:10:    @ColorInt
/ui\theme\interfaces\ThemeSwitcher.java:11:    int getColorByAttr(Context context, @AttrRes int attrId);
/ui\theme\interfaces\ThemeSwitcher.java:13:    @ColorInt
/ui\theme\interfaces\ThemeSwitcher.java:14:    int getColorById(Context context, @ColorRes int colorId);
/ui\theme\interfaces\ThemeSwitcher.java:15:}/ui\theme\interfaces\Tintable.java:1:package com.huanchengfly.tieba.post.ui.theme.interfaces;
/ui\theme\interfaces\Tintable.java:3:public interface Tintable {
/ui\theme\interfaces\Tintable.java:4:    void tint();
/ui\theme\interfaces\Tintable.java:5:}
/ui\theme\utils\ColorStateListUtils.java:1:package com.huanchengfly.tieba.post.ui.theme.utils;
/ui\theme\utils\ColorStateListUtils.java:3:import android.content.Context;
/ui\theme\utils\ColorStateListUtils.java:4:import android.content.res.ColorStateList;
/ui\theme\utils\ColorStateListUtils.java:5:import android.content.res.TypedArray;
/ui\theme\utils\ColorStateListUtils.java:6:import android.content.res.XmlResourceParser;
/ui\theme\utils\ColorStateListUtils.java:7:import android.graphics.Color;
/ui\theme\utils\ColorStateListUtils.java:8:import android.util.AttributeSet;
/ui\theme\utils\ColorStateListUtils.java:9:import android.util.StateSet;
/ui\theme\utils\ColorStateListUtils.java:10:import android.util.TypedValue;
/ui\theme\utils\ColorStateListUtils.java:11:import android.util.Xml;
/ui\theme\utils\ColorStateListUtils.java:13:import androidx.core.graphics.ColorUtils;
/ui\theme\utils\ColorStateListUtils.java:15:import org.xmlpull.v1.XmlPullParser;
/ui\theme\utils\ColorStateListUtils.java:16:import org.xmlpull.v1.XmlPullParserException;
/ui\theme\utils\ColorStateListUtils.java:18:import java.io.IOException;
/ui\theme\utils\ColorStateListUtils.java:19:import java.util.LinkedList;
/ui\theme\utils\ColorStateListUtils.java:21:public class ColorStateListUtils {
/ui\theme\utils\ColorStateListUtils.java:22:    public static ColorStateList createColorStateList(Context context, int resId) {
/ui\theme\utils\ColorStateListUtils.java:23:        if (resId <= 0) return null;
/ui\theme\utils\ColorStateListUtils.java:25:        TypedValue value = new TypedValue();
/ui\theme\utils\ColorStateListUtils.java:26:        context.getResources().getValue(resId, value, true);
/ui\theme\utils\ColorStateListUtils.java:27:        ColorStateList cl = null;
/ui\theme\utils\ColorStateListUtils.java:28:        if (value.type >= TypedValue.TYPE_FIRST_COLOR_INT
/ui\theme\utils\ColorStateListUtils.java:29:                && value.type <= TypedValue.TYPE_LAST_COLOR_INT) {
/ui\theme\utils\ColorStateListUtils.java:30:            //Assume that "color/theme_color_primary" and "color/theme_color_profile" have the same color value;
/ui\theme\utils\ColorStateListUtils.java:31:            //However, "color/theme_color_primary" need to replace by themeId, "color/theme_color_profile" not.
/ui\theme\utils\ColorStateListUtils.java:32:            //If use value.data may cause "color/theme_color_profile" still been replaced by themeId
/ui\theme\utils\ColorStateListUtils.java:33:            cl = ColorStateList.valueOf(ThemeUtils.getColorById(context, value.resourceId));
/ui\theme\utils\ColorStateListUtils.java:34:        } else {
/ui\theme\utils\ColorStateListUtils.java:35:            final String file = value.string.toString();
/ui\theme\utils\ColorStateListUtils.java:36:            try {
/ui\theme\utils\ColorStateListUtils.java:37:                if (file.endsWith("xml")) {
/ui\theme\utils\ColorStateListUtils.java:38:                    final XmlResourceParser rp = context.getResources().getAssets().openXmlResourceParser(
/ui\theme\utils\ColorStateListUtils.java:39:                            value.assetCookie, file);
/ui\theme\utils\ColorStateListUtils.java:40:                    final AttributeSet attrs = Xml.asAttributeSet(rp);
/ui\theme\utils\ColorStateListUtils.java:41:                    int type;
/ui\theme\utils\ColorStateListUtils.java:43:                    while ((type = rp.next()) != XmlPullParser.START_TAG
/ui\theme\utils\ColorStateListUtils.java:44:                            && type != XmlPullParser.END_DOCUMENT) {
/ui\theme\utils\ColorStateListUtils.java:45:                        // Seek parser to start tag.
/ui\theme\utils\ColorStateListUtils.java:46:                    }
/ui\theme\utils\ColorStateListUtils.java:48:                    if (type != XmlPullParser.START_TAG) {
/ui\theme\utils\ColorStateListUtils.java:49:                        throw new XmlPullParserException("No start tag found");
/ui\theme\utils\ColorStateListUtils.java:50:                    }
/ui\theme\utils\ColorStateListUtils.java:52:                    cl = createFromXmlInner(context, rp, attrs);
/ui\theme\utils\ColorStateListUtils.java:53:                    rp.close();
/ui\theme\utils\ColorStateListUtils.java:54:                }
/ui\theme\utils\ColorStateListUtils.java:55:            } catch (IOException e) {
/ui\theme\utils\ColorStateListUtils.java:56:                e.printStackTrace();
/ui\theme\utils\ColorStateListUtils.java:57:            } catch (XmlPullParserException e) {
/ui\theme\utils\ColorStateListUtils.java:58:                e.printStackTrace();
/ui\theme\utils\ColorStateListUtils.java:59:            }
/ui\theme\utils\ColorStateListUtils.java:60:        }
/ui\theme\utils\ColorStateListUtils.java:61:        return cl;
/ui\theme\utils\ColorStateListUtils.java:62:    }
/ui\theme\utils\ColorStateListUtils.java:64:    private static ColorStateList createFromXmlInner(Context context, XmlPullParser parser, AttributeSet attrs) throws IOException, XmlPullParserException {
/ui\theme\utils\ColorStateListUtils.java:66:        final String name = parser.getName();
/ui\theme\utils\ColorStateListUtils.java:67:        if (!name.equals("selector")) {
/ui\theme\utils\ColorStateListUtils.java:68:            throw new XmlPullParserException(
/ui\theme\utils\ColorStateListUtils.java:69:                    parser.getPositionDescription() + ": invalid color state list tag " + name);
/ui\theme\utils\ColorStateListUtils.java:70:        }
/ui\theme\utils\ColorStateListUtils.java:72:        return inflateColorStateList(context, parser, attrs);
/ui\theme\utils\ColorStateListUtils.java:73:    }
/ui\theme\utils\ColorStateListUtils.java:75:    private static ColorStateList inflateColorStateList(Context context, XmlPullParser parser, AttributeSet attrs) throws IOException, XmlPullParserException {
/ui\theme\utils\ColorStateListUtils.java:76:        final int innerDepth = parser.getDepth() + 1;
/ui\theme\utils\ColorStateListUtils.java:77:        int depth;
/ui\theme\utils\ColorStateListUtils.java:78:        int type;
/ui\theme\utils\ColorStateListUtils.java:80:        LinkedList<int[]> stateList = new LinkedList<>();
/ui\theme\utils\ColorStateListUtils.java:81:        LinkedList<Integer> colorList = new LinkedList<>();
/ui\theme\utils\ColorStateListUtils.java:83:        while ((type = parser.next()) != XmlPullParser.END_DOCUMENT
/ui\theme\utils\ColorStateListUtils.java:84:                && ((depth = parser.getDepth()) >= innerDepth || type != XmlPullParser.END_TAG)) {
/ui\theme\utils\ColorStateListUtils.java:85:            if (type != XmlPullParser.START_TAG || depth > innerDepth
/ui\theme\utils\ColorStateListUtils.java:86:                    || !parser.getName().equals("item")) {
/ui\theme\utils\ColorStateListUtils.java:87:                continue;
/ui\theme\utils\ColorStateListUtils.java:88:            }
/ui\theme\utils\ColorStateListUtils.java:90:            TypedArray a1 = context.obtainStyledAttributes(attrs, new int[]{android.R.attr.color});
/ui\theme\utils\ColorStateListUtils.java:91:            final int value = a1.getResourceId(0, Color.MAGENTA);
/ui\theme\utils\ColorStateListUtils.java:92:            final int baseColor = value == Color.MAGENTA ? Color.MAGENTA : ThemeUtils.getColorById(context, value);
/ui\theme\utils\ColorStateListUtils.java:93:            a1.recycle();
/ui\theme\utils\ColorStateListUtils.java:94:            TypedArray a2 = context.obtainStyledAttributes(attrs, new int[]{android.R.attr.alpha});
/ui\theme\utils\ColorStateListUtils.java:95:            final float alphaMod = a2.getFloat(0, 1.0f);
/ui\theme\utils\ColorStateListUtils.java:96:            a2.recycle();
/ui\theme\utils\ColorStateListUtils.java:97:            colorList.add(alphaMod != 1.0f
/ui\theme\utils\ColorStateListUtils.java:98:                    ? ColorUtils.setAlphaComponent(baseColor, Math.round(Color.alpha(baseColor) * alphaMod))
/ui\theme\utils\ColorStateListUtils.java:99:                    : baseColor);
/ui\theme\utils\ColorStateListUtils.java:101:            stateList.add(extractStateSet(attrs));
/ui\theme\utils\ColorStateListUtils.java:102:        }
/ui\theme\utils\ColorStateListUtils.java:104:        if (stateList.size() > 0 && stateList.size() == colorList.size()) {
/ui\theme\utils\ColorStateListUtils.java:105:            int[] colors = new int[colorList.size()];
/ui\theme\utils\ColorStateListUtils.java:106:            for (int i = 0; i < colorList.size(); i++) {
/ui\theme\utils\ColorStateListUtils.java:107:                colors[i] = colorList.get(i);
/ui\theme\utils\ColorStateListUtils.java:108:            }
/ui\theme\utils\ColorStateListUtils.java:109:            return new ColorStateList(stateList.toArray(new int[stateList.size()][]), colors);
/ui\theme\utils\ColorStateListUtils.java:110:        }
/ui\theme\utils\ColorStateListUtils.java:111:        return null;
/ui\theme\utils\ColorStateListUtils.java:112:    }
/ui\theme\utils\ColorStateListUtils.java:114:    private static int[] extractStateSet(AttributeSet attrs) {
/ui\theme\utils\ColorStateListUtils.java:115:        int j = 0;
/ui\theme\utils\ColorStateListUtils.java:116:        final int numAttrs = attrs.getAttributeCount();
/ui\theme\utils\ColorStateListUtils.java:117:        int[] states = new int[numAttrs];
/ui\theme\utils\ColorStateListUtils.java:118:        for (int i = 0; i < numAttrs; i++) {
/ui\theme\utils\ColorStateListUtils.java:119:            final int stateResId = attrs.getAttributeNameResource(i);
/ui\theme\utils\ColorStateListUtils.java:120:            switch (stateResId) {
/ui\theme\utils\ColorStateListUtils.java:121:                case 0:
/ui\theme\utils\ColorStateListUtils.java:122:                    break;
/ui\theme\utils\ColorStateListUtils.java:123:                case android.R.attr.color:
/ui\theme\utils\ColorStateListUtils.java:124:                case android.R.attr.alpha:
/ui\theme\utils\ColorStateListUtils.java:125:                    // Ignore attributes from StateListDrawableItem and
/ui\theme\utils\ColorStateListUtils.java:126:                    // AnimatedStateListDrawableItem.
/ui\theme\utils\ColorStateListUtils.java:127:                    continue;
/ui\theme\utils\ColorStateListUtils.java:128:                default:
/ui\theme\utils\ColorStateListUtils.java:129:                    states[j++] = attrs.getAttributeBooleanValue(i, false)
/ui\theme\utils\ColorStateListUtils.java:130:                            ? stateResId : -stateResId;
/ui\theme\utils\ColorStateListUtils.java:131:            }
/ui\theme\utils\ColorStateListUtils.java:132:        }
/ui\theme\utils\ColorStateListUtils.java:133:        states = StateSet.trimStateSet(states, j);
/ui\theme\utils\ColorStateListUtils.java:134:        return states;
/ui\theme\utils\ColorStateListUtils.java:135:    }
/ui\theme\utils\ColorStateListUtils.java:136:}/ui\theme\utils\ThemeUtils.java:1:package com.huanchengfly.tieba.post.ui.theme.utils;
/ui\theme\utils\ThemeUtils.java:3:import android.annotation.SuppressLint;
/ui\theme\utils\ThemeUtils.java:4:import android.app.Activity;
/ui\theme\utils\ThemeUtils.java:5:import android.content.Context;
/ui\theme\utils\ThemeUtils.java:6:import android.content.ContextWrapper;
/ui\theme\utils\ThemeUtils.java:7:import android.content.res.ColorStateList;
/ui\theme\utils\ThemeUtils.java:8:import android.graphics.PorterDuff;
/ui\theme\utils\ThemeUtils.java:9:import android.graphics.drawable.Drawable;
/ui\theme\utils\ThemeUtils.java:10:import android.view.View;
/ui\theme\utils\ThemeUtils.java:11:import android.view.ViewGroup;
/ui\theme\utils\ThemeUtils.java:12:import android.widget.AbsListView;
/ui\theme\utils\ThemeUtils.java:13:import android.widget.BaseAdapter;
/ui\theme\utils\ThemeUtils.java:14:import android.widget.ListAdapter;
/ui\theme\utils\ThemeUtils.java:15:import android.widget.WrapperListAdapter;
/ui\theme\utils\ThemeUtils.java:17:import androidx.annotation.AttrRes;
/ui\theme\utils\ThemeUtils.java:18:import androidx.annotation.ColorInt;
/ui\theme\utils\ThemeUtils.java:19:import androidx.annotation.ColorRes;
/ui\theme\utils\ThemeUtils.java:20:import androidx.core.graphics.drawable.DrawableCompat;
/ui\theme\utils\ThemeUtils.java:21:import androidx.recyclerview.widget.RecyclerView;
/ui\theme\utils\ThemeUtils.java:23:import com.huanchengfly.tieba.post.ui.theme.interfaces.ExtraRefreshable;
/ui\theme\utils\ThemeUtils.java:24:import com.huanchengfly.tieba.post.ui.theme.interfaces.ThemeSwitcher;
/ui\theme\utils\ThemeUtils.java:25:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/ui\theme\utils\ThemeUtils.java:27:import java.lang.reflect.Field;
/ui\theme\utils\ThemeUtils.java:28:import java.lang.reflect.InvocationTargetException;
/ui\theme\utils\ThemeUtils.java:29:import java.lang.reflect.Method;
/ui\theme\utils\ThemeUtils.java:31:public class ThemeUtils {
/ui\theme\utils\ThemeUtils.java:32:    private static ThemeSwitcher mThemeSwitcher;
/ui\theme\utils\ThemeUtils.java:33:    private static Field sRecycler;
/ui\theme\utils\ThemeUtils.java:34:    private static Method sRecycleViewClearMethod;
/ui\theme\utils\ThemeUtils.java:35:    private static Field sRecyclerBin;
/ui\theme\utils\ThemeUtils.java:36:    private static Method sListViewClearMethod;
/ui\theme\utils\ThemeUtils.java:38:    public static Drawable tintDrawable(Drawable drawable, ColorStateList colorStateList) {
/ui\theme\utils\ThemeUtils.java:39:        if (drawable == null) return null;
/ui\theme\utils\ThemeUtils.java:40:        Drawable wrapper = DrawableCompat.wrap(drawable.mutate());
/ui\theme\utils\ThemeUtils.java:41:        DrawableCompat.setTintList(wrapper, colorStateList);
/ui\theme\utils\ThemeUtils.java:42:        DrawableCompat.setTintMode(drawable, PorterDuff.Mode.SRC_IN);
/ui\theme\utils\ThemeUtils.java:43:        return drawable;
/ui\theme\utils\ThemeUtils.java:44:    }
/ui\theme\utils\ThemeUtils.java:46:    public static Drawable tintDrawable(Drawable drawable, @ColorInt int color) {
/ui\theme\utils\ThemeUtils.java:47:        if (drawable == null) return null;
/ui\theme\utils\ThemeUtils.java:48:        Drawable wrapper = DrawableCompat.wrap(drawable.mutate());
/ui\theme\utils\ThemeUtils.java:49:        DrawableCompat.setTint(wrapper, color);
/ui\theme\utils\ThemeUtils.java:50:        DrawableCompat.setTintMode(drawable, PorterDuff.Mode.SRC_IN);
/ui\theme\utils\ThemeUtils.java:51:        return drawable;
/ui\theme\utils\ThemeUtils.java:52:    }
/ui\theme\utils\ThemeUtils.java:54:    public static void init(ThemeSwitcher themeSwitcher) {
/ui\theme\utils\ThemeUtils.java:55:        mThemeSwitcher = themeSwitcher;
/ui\theme\utils\ThemeUtils.java:56:    }
/ui\theme\utils\ThemeUtils.java:58:    @ColorInt
/ui\theme\utils\ThemeUtils.java:59:    public static int getColorByAttr(Context context, @AttrRes int attrId) {
/ui\theme\utils\ThemeUtils.java:60:        if (mThemeSwitcher == null) {
/ui\theme\utils\ThemeUtils.java:61:            throw new IllegalStateException("ThemeSwitcher is uninitialized.");
/ui\theme\utils\ThemeUtils.java:62:        }
/ui\theme\utils\ThemeUtils.java:63:        return mThemeSwitcher.getColorByAttr(context, attrId);
/ui\theme\utils\ThemeUtils.java:64:    }
/ui\theme\utils\ThemeUtils.java:66:    @ColorInt
/ui\theme\utils\ThemeUtils.java:67:    public static int getColorById(Context context, @ColorRes int colorId) {
/ui\theme\utils\ThemeUtils.java:68:        if (mThemeSwitcher == null) {
/ui\theme\utils\ThemeUtils.java:69:            throw new IllegalStateException("ThemeSwitcher is uninitialized.");
/ui\theme\utils\ThemeUtils.java:70:        }
/ui\theme\utils\ThemeUtils.java:71:        return mThemeSwitcher.getColorById(context, colorId);
/ui\theme\utils\ThemeUtils.java:72:    }
/ui\theme\utils\ThemeUtils.java:74:    public static void refreshUI(Context context) {
/ui\theme\utils\ThemeUtils.java:75:        refreshUI(context, null);
/ui\theme\utils\ThemeUtils.java:76:    }
/ui\theme\utils\ThemeUtils.java:78:    public static Activity getWrapperActivity(Context context) {
/ui\theme\utils\ThemeUtils.java:79:        if (context instanceof Activity) {
/ui\theme\utils\ThemeUtils.java:80:            return (Activity) context;
/ui\theme\utils\ThemeUtils.java:81:        } else if (context instanceof ContextWrapper) {
/ui\theme\utils\ThemeUtils.java:82:            return getWrapperActivity(((ContextWrapper) context).getBaseContext());
/ui\theme\utils\ThemeUtils.java:83:        }
/ui\theme\utils\ThemeUtils.java:84:        return null;
/ui\theme\utils\ThemeUtils.java:85:    }
/ui\theme\utils\ThemeUtils.java:87:    public static void refreshUI(Context context, ExtraRefreshable extraRefreshable) {
/ui\theme\utils\ThemeUtils.java:88:        Activity activity = getWrapperActivity(context);
/ui\theme\utils\ThemeUtils.java:89:        if (activity != null) {
/ui\theme\utils\ThemeUtils.java:90:            if (extraRefreshable != null) {
/ui\theme\utils\ThemeUtils.java:91:                extraRefreshable.refreshGlobal(activity);
/ui\theme\utils\ThemeUtils.java:92:            }
/ui\theme\utils\ThemeUtils.java:93:            View rootView = activity.getWindow().getDecorView().findViewById(android.R.id.content);
/ui\theme\utils\ThemeUtils.java:94:            refreshView(rootView, extraRefreshable);
/ui\theme\utils\ThemeUtils.java:95:        }
/ui\theme\utils\ThemeUtils.java:96:    }
/ui\theme\utils\ThemeUtils.java:98:    @SuppressLint("PrivateApi")
/ui\theme\utils\ThemeUtils.java:99:    private static void refreshView(View view, ExtraRefreshable extraRefreshable) {
/ui\theme\utils\ThemeUtils.java:100:        if (view == null) return;
/ui\theme\utils\ThemeUtils.java:101:        view.destroyDrawingCache();
/ui\theme\utils\ThemeUtils.java:102:        if (view instanceof Tintable) {
/ui\theme\utils\ThemeUtils.java:103:            ((Tintable) view).tint();
/ui\theme\utils\ThemeUtils.java:104:            if (view instanceof ViewGroup) {
/ui\theme\utils\ThemeUtils.java:105:                for (int i = 0; i < ((ViewGroup) view).getChildCount(); i++) {
/ui\theme\utils\ThemeUtils.java:106:                    refreshView(((ViewGroup) view).getChildAt(i), extraRefreshable);
/ui\theme\utils\ThemeUtils.java:107:                }
/ui\theme\utils\ThemeUtils.java:108:            }
/ui\theme\utils\ThemeUtils.java:109:        } else {
/ui\theme\utils\ThemeUtils.java:110:            if (extraRefreshable != null) {
/ui\theme\utils\ThemeUtils.java:111:                extraRefreshable.refreshSpecificView(view);
/ui\theme\utils\ThemeUtils.java:112:            }
/ui\theme\utils\ThemeUtils.java:113:            if (view instanceof AbsListView) {
/ui\theme\utils\ThemeUtils.java:114:                try {
/ui\theme\utils\ThemeUtils.java:115:                    if (sRecyclerBin == null) {
/ui\theme\utils\ThemeUtils.java:116:                        sRecyclerBin = AbsListView.class.getDeclaredField("mRecycler");
/ui\theme\utils\ThemeUtils.java:117:                        sRecyclerBin.setAccessible(true);
/ui\theme\utils\ThemeUtils.java:118:                    }
/ui\theme\utils\ThemeUtils.java:119:                    if (sListViewClearMethod == null) {
/ui\theme\utils\ThemeUtils.java:120:                        sListViewClearMethod = Class.forName("android.widget.AbsListView$RecycleBin")
/ui\theme\utils\ThemeUtils.java:121:                                .getDeclaredMethod("clear");
/ui\theme\utils\ThemeUtils.java:122:                        sListViewClearMethod.setAccessible(true);
/ui\theme\utils\ThemeUtils.java:123:                    }
/ui\theme\utils\ThemeUtils.java:124:                    sListViewClearMethod.invoke(sRecyclerBin.get(view));
/ui\theme\utils\ThemeUtils.java:125:                } catch (NoSuchFieldException e) {
/ui\theme\utils\ThemeUtils.java:126:                    e.printStackTrace();
/ui\theme\utils\ThemeUtils.java:127:                } catch (ClassNotFoundException e) {
/ui\theme\utils\ThemeUtils.java:128:                    e.printStackTrace();
/ui\theme\utils\ThemeUtils.java:129:                } catch (NoSuchMethodException e) {
/ui\theme\utils\ThemeUtils.java:130:                    e.printStackTrace();
/ui\theme\utils\ThemeUtils.java:131:                } catch (InvocationTargetException e) {
/ui\theme\utils\ThemeUtils.java:132:                    e.printStackTrace();
/ui\theme\utils\ThemeUtils.java:133:                } catch (IllegalAccessException e) {
/ui\theme\utils\ThemeUtils.java:134:                    e.printStackTrace();
/ui\theme\utils\ThemeUtils.java:135:                }
/ui\theme\utils\ThemeUtils.java:136:                ListAdapter adapter = ((AbsListView) view).getAdapter();
/ui\theme\utils\ThemeUtils.java:137:                while (adapter instanceof WrapperListAdapter) {
/ui\theme\utils\ThemeUtils.java:138:                    adapter = ((WrapperListAdapter) adapter).getWrappedAdapter();
/ui\theme\utils\ThemeUtils.java:139:                }
/ui\theme\utils\ThemeUtils.java:140:                if (adapter instanceof BaseAdapter) {
/ui\theme\utils\ThemeUtils.java:141:                    ((BaseAdapter) adapter).notifyDataSetChanged();
/ui\theme\utils\ThemeUtils.java:142:                }
/ui\theme\utils\ThemeUtils.java:143:            }
/ui\theme\utils\ThemeUtils.java:144:            if (view instanceof RecyclerView) {
/ui\theme\utils\ThemeUtils.java:145:                try {
/ui\theme\utils\ThemeUtils.java:146:                    sRecycler = RecyclerView.class.getDeclaredField("mRecycler");
/ui\theme\utils\ThemeUtils.java:147:                    sRecycler.setAccessible(true);
/ui\theme\utils\ThemeUtils.java:148:                    sRecycleViewClearMethod = Class.forName("androidx.recyclerview.widget.RecyclerView$Recycler")
/ui\theme\utils\ThemeUtils.java:149:                            .getDeclaredMethod("clear");
/ui\theme\utils\ThemeUtils.java:150:                    sRecycleViewClearMethod.setAccessible(true);
/ui\theme\utils\ThemeUtils.java:151:                    sRecycleViewClearMethod.invoke(sRecycler.get(view));
/ui\theme\utils\ThemeUtils.java:152:                } catch (NoSuchMethodException e) {
/ui\theme\utils\ThemeUtils.java:153:                    e.printStackTrace();
/ui\theme\utils\ThemeUtils.java:154:                } catch (IllegalAccessException e) {
/ui\theme\utils\ThemeUtils.java:155:                    e.printStackTrace();
/ui\theme\utils\ThemeUtils.java:156:                } catch (NoSuchFieldException e) {
/ui\theme\utils\ThemeUtils.java:157:                    e.printStackTrace();
/ui\theme\utils\ThemeUtils.java:158:                } catch (InvocationTargetException e) {
/ui\theme\utils\ThemeUtils.java:159:                    e.printStackTrace();
/ui\theme\utils\ThemeUtils.java:160:                } catch (ClassNotFoundException e) {
/ui\theme\utils\ThemeUtils.java:161:                    e.printStackTrace();
/ui\theme\utils\ThemeUtils.java:162:                }
/ui\theme\utils\ThemeUtils.java:163:                RecyclerView recyclerView = (RecyclerView) view;
/ui\theme\utils\ThemeUtils.java:164:                recyclerView.getRecycledViewPool().clear();
/ui\theme\utils\ThemeUtils.java:165:                for (int i = 0; i < recyclerView.getItemDecorationCount(); i++) {
/ui\theme\utils\ThemeUtils.java:166:                    RecyclerView.ItemDecoration itemDecoration = recyclerView.getItemDecorationAt(i);
/ui\theme\utils\ThemeUtils.java:167:                    if (itemDecoration instanceof Tintable) {
/ui\theme\utils\ThemeUtils.java:168:                        ((Tintable) itemDecoration).tint();
/ui\theme\utils\ThemeUtils.java:169:                    }
/ui\theme\utils\ThemeUtils.java:170:                }
/ui\theme\utils\ThemeUtils.java:171:                recyclerView.invalidateItemDecorations();
/ui\theme\utils\ThemeUtils.java:172:            }
/ui\theme\utils\ThemeUtils.java:173:            if (view instanceof ViewGroup) {
/ui\theme\utils\ThemeUtils.java:174:                for (int i = 0; i < ((ViewGroup) view).getChildCount(); i++) {
/ui\theme\utils\ThemeUtils.java:175:                    refreshView(((ViewGroup) view).getChildAt(i), extraRefreshable);
/ui\theme\utils\ThemeUtils.java:176:                }
/ui\theme\utils\ThemeUtils.java:177:            }
/ui\theme\utils\ThemeUtils.java:178:        }
/ui\theme\utils\ThemeUtils.java:179:    }
/ui\theme\utils\ThemeUtils.java:180:}
/utils\AccountUtil.java:1:package com.huanchengfly.tieba.post.utils;
/utils\AccountUtil.java:3:import android.content.Context;
/utils\AccountUtil.java:4:import android.content.Intent;
/utils\AccountUtil.java:5:import android.webkit.CookieManager;
/utils\AccountUtil.java:6:import android.widget.Toast;
/utils\AccountUtil.java:8:import androidx.annotation.NonNull;
/utils\AccountUtil.java:9:import androidx.annotation.Nullable;
/utils\AccountUtil.java:11:import com.huanchengfly.tieba.post.R;
/utils\AccountUtil.java:12:import com.huanchengfly.tieba.post.api.Error;
/utils\AccountUtil.java:13:import com.huanchengfly.tieba.post.api.TiebaApi;
/utils\AccountUtil.java:14:import com.huanchengfly.tieba.post.api.interfaces.CommonCallback;
/utils\AccountUtil.java:15:import com.huanchengfly.tieba.post.api.retrofit.exception.TiebaException;
/utils\AccountUtil.java:16:import com.huanchengfly.tieba.post.models.MyInfoBean;
/utils\AccountUtil.java:17:import com.huanchengfly.tieba.post.models.database.Account;
/utils\AccountUtil.java:19:import org.litepal.LitePal;
/utils\AccountUtil.java:21:import java.util.List;
/utils\AccountUtil.java:23:import retrofit2.Call;
/utils\AccountUtil.java:24:import retrofit2.Callback;
/utils\AccountUtil.java:25:import retrofit2.Response;
/utils\AccountUtil.java:27:public class AccountUtil {
/utils\AccountUtil.java:28:    public static final String TAG = "AccountUtil";
/utils\AccountUtil.java:29:    public static final String ACTION_SWITCH_ACCOUNT = "com.huanchengfly.tieba.post.action.SWITCH_ACCOUNT";
/utils\AccountUtil.java:31:    @Nullable
/utils\AccountUtil.java:32:    public static Account getLoginInfo(@NonNull Context context) {
/utils\AccountUtil.java:33:        int loginUser = context.getSharedPreferences("accountData", Context.MODE_PRIVATE).getInt("now", -1);
/utils\AccountUtil.java:34:        if (loginUser == -1) {
/utils\AccountUtil.java:35:            return null;
/utils\AccountUtil.java:36:        }
/utils\AccountUtil.java:37:        return getAccountInfo(loginUser);
/utils\AccountUtil.java:38:    }
/utils\AccountUtil.java:40:    public static List<Account> getAllAccounts() {
/utils\AccountUtil.java:41:        return LitePal.findAll(Account.class);
/utils\AccountUtil.java:42:    }
/utils\AccountUtil.java:44:    public static Account getAccountInfo(int accountId) {
/utils\AccountUtil.java:45:        return LitePal.where("id = ?", String.valueOf(accountId)).findFirst(Account.class);
/utils\AccountUtil.java:46:    }
/utils\AccountUtil.java:48:    public static Account getAccountInfoByUid(@NonNull String uid) {
/utils\AccountUtil.java:49:        return LitePal.where("uid = ?", uid).findFirst(Account.class);
/utils\AccountUtil.java:50:    }
/utils\AccountUtil.java:52:    public static Account getAccountInfoByBduss(@NonNull String bduss) {
/utils\AccountUtil.java:53:        return LitePal.where("bduss = ?", bduss).findFirst(Account.class);
/utils\AccountUtil.java:54:    }
/utils\AccountUtil.java:56:    public static boolean isLoggedIn(@NonNull Context context) {
/utils\AccountUtil.java:57:        return (getLoginInfo(context) != null);
/utils\AccountUtil.java:58:    }
/utils\AccountUtil.java:60:    public static boolean newAccount(@NonNull Context context, @NonNull Account account, boolean needSwitch) {
/utils\AccountUtil.java:61:        if (account.save()) {
/utils\AccountUtil.java:62:            if (needSwitch) {
/utils\AccountUtil.java:63:                return switchUser(context, account.getId());
/utils\AccountUtil.java:64:            }
/utils\AccountUtil.java:65:            return true;
/utils\AccountUtil.java:66:        }
/utils\AccountUtil.java:67:        return false;
/utils\AccountUtil.java:68:    }
/utils\AccountUtil.java:70:    public static boolean switchUser(@NonNull Context context, int id) {
/utils\AccountUtil.java:71:        context.sendBroadcast(new Intent().setAction(ACTION_SWITCH_ACCOUNT));
/utils\AccountUtil.java:72:        return context.getSharedPreferences("accountData", Context.MODE_PRIVATE).edit().putInt("now", id).commit();
/utils\AccountUtil.java:73:    }
/utils\AccountUtil.java:75:    public static void updateUserInfo(@NonNull Context context, CommonCallback<MyInfoBean> commonCallback) {
/utils\AccountUtil.java:76:        Account account = getLoginInfo(context);
/utils\AccountUtil.java:77:        if (account == null) {
/utils\AccountUtil.java:78:            commonCallback.onFailure(Error.ERROR_NOT_LOGGED_IN, "未登录");
/utils\AccountUtil.java:79:            return;
/utils\AccountUtil.java:80:        }
/utils\AccountUtil.java:81:        updateUserInfoByBduss(context, account.getBduss(), commonCallback);
/utils\AccountUtil.java:82:    }
/utils\AccountUtil.java:84:    public static boolean updateLoginInfo(@NonNull String cookie) {
/utils\AccountUtil.java:85:        String[] bdussSplit = cookie.split("BDUSS=");
/utils\AccountUtil.java:86:        String[] sTokenSplit = cookie.split("STOKEN=");
/utils\AccountUtil.java:87:        if (bdussSplit.length > 1 && sTokenSplit.length > 1) {
/utils\AccountUtil.java:88:            String bduss = bdussSplit[1].split(";")[0];
/utils\AccountUtil.java:89:            String sToken = sTokenSplit[1].split(";")[0];
/utils\AccountUtil.java:90:            Account account = getAccountInfoByBduss(bduss);
/utils\AccountUtil.java:91:            if (account != null) {
/utils\AccountUtil.java:92:                account.setsToken(sToken)
/utils\AccountUtil.java:93:                        .setCookie(cookie)
/utils\AccountUtil.java:94:                        .update(account.getId());
/utils\AccountUtil.java:95:                return true;
/utils\AccountUtil.java:96:            }
/utils\AccountUtil.java:97:        }
/utils\AccountUtil.java:98:        return false;
/utils\AccountUtil.java:99:    }
/utils\AccountUtil.java:101:    public static void updateUserInfoByBduss(@NonNull Context context, @NonNull String bduss, @Nullable CommonCallback<MyInfoBean> commonCallback) {
/utils\AccountUtil.java:102:        TiebaApi.getInstance().myInfo(AccountUtil.getBdussCookie(bduss)).enqueue(new Callback<MyInfoBean>() {
/utils\AccountUtil.java:103:            @Override
/utils\AccountUtil.java:104:            public void onResponse(@NonNull Call<MyInfoBean> call, @NonNull Response<MyInfoBean> response) {
/utils\AccountUtil.java:105:                MyInfoBean myInfoBean = response.body();
/utils\AccountUtil.java:106:                if (myInfoBean == null) {
/utils\AccountUtil.java:107:                    if (commonCallback != null)
/utils\AccountUtil.java:108:                        commonCallback.onFailure(Error.ERROR_UNKNOWN, "未知错误");
/utils\AccountUtil.java:109:                    return;
/utils\AccountUtil.java:110:                }
/utils\AccountUtil.java:111:                if (!myInfoBean.getData().isLogin()) {
/utils\AccountUtil.java:112:                    if (commonCallback != null)
/utils\AccountUtil.java:113:                        commonCallback.onFailure(Error.ERROR_LOGGED_IN_EXPIRED, "登录已过期");
/utils\AccountUtil.java:114:                    return;
/utils\AccountUtil.java:115:                }
/utils\AccountUtil.java:116:                String id = String.valueOf(myInfoBean.getData().getUid());
/utils\AccountUtil.java:117:                Account account = getAccountInfoByBduss(bduss);
/utils\AccountUtil.java:118:                if (account == null) account = getAccountInfoByUid(id);
/utils\AccountUtil.java:119:                if (account == null) {
/utils\AccountUtil.java:120:                    account = new Account()
/utils\AccountUtil.java:121:                            .setBduss(bduss)
/utils\AccountUtil.java:122:                            .setPortrait(myInfoBean.getData().getAvatarUrl())
/utils\AccountUtil.java:123:                            .setUid(id)
/utils\AccountUtil.java:124:                            .setTbs(myInfoBean.getData().getTbs())
/utils\AccountUtil.java:125:                            .setItbTbs(myInfoBean.getData().getItbTbs())
/utils\AccountUtil.java:126:                            .setName(myInfoBean.getData().getName())
/utils\AccountUtil.java:127:                            .setNameShow(myInfoBean.getData().getShowName());
/utils\AccountUtil.java:128:                    account.save();
/utils\AccountUtil.java:129:                    return;
/utils\AccountUtil.java:130:                }
/utils\AccountUtil.java:131:                account.setBduss(bduss)
/utils\AccountUtil.java:132:                        .setPortrait(myInfoBean.getData().getAvatarUrl())
/utils\AccountUtil.java:133:                        .setTbs(myInfoBean.getData().getTbs())
/utils\AccountUtil.java:134:                        .setItbTbs(myInfoBean.getData().getItbTbs())
/utils\AccountUtil.java:135:                        .setUid(String.valueOf(myInfoBean.getData().getUid()))
/utils\AccountUtil.java:136:                        .setName(myInfoBean.getData().getName())
/utils\AccountUtil.java:137:                        .setNameShow(myInfoBean.getData().getShowName())
/utils\AccountUtil.java:138:                        .update(account.getId());
/utils\AccountUtil.java:139:                if (commonCallback != null) {
/utils\AccountUtil.java:140:                    commonCallback.onSuccess(myInfoBean);
/utils\AccountUtil.java:141:                }
/utils\AccountUtil.java:142:            }
/utils\AccountUtil.java:144:            @Override
/utils\AccountUtil.java:145:            public void onFailure(@NonNull Call<MyInfoBean> call, @NonNull Throwable t) {
/utils\AccountUtil.java:146:                if (commonCallback != null) {
/utils\AccountUtil.java:147:                    if (t instanceof TiebaException) {
/utils\AccountUtil.java:148:                        commonCallback.onFailure(((TiebaException) t).getCode(), t.getMessage());
/utils\AccountUtil.java:149:                    } else {
/utils\AccountUtil.java:150:                        commonCallback.onFailure(-1, t.getMessage());
/utils\AccountUtil.java:151:                    }
/utils\AccountUtil.java:152:                }
/utils\AccountUtil.java:153:            }
/utils\AccountUtil.java:154:        });
/utils\AccountUtil.java:155:    }
/utils\AccountUtil.java:157:    @SuppressWarnings("ApplySharedPref")
/utils\AccountUtil.java:158:    public static void exit(@NonNull Context context) {
/utils\AccountUtil.java:159:        List<Account> accounts = getAllAccounts();
/utils\AccountUtil.java:160:        Account account = getLoginInfo(context);
/utils\AccountUtil.java:161:        if (account == null) return;
/utils\AccountUtil.java:162:        account.delete();
/utils\AccountUtil.java:163:        CookieManager.getInstance().removeAllCookies(null);
/utils\AccountUtil.java:164:        if (accounts.size() > 1) {
/utils\AccountUtil.java:165:            accounts = getAllAccounts();
/utils\AccountUtil.java:166:            account = accounts.get(0);
/utils\AccountUtil.java:167:            switchUser(context, account.getId());
/utils\AccountUtil.java:168:            Toast.makeText(context, "退出登录成功，已切换至账号 " + account.getNameShow(), Toast.LENGTH_SHORT).show();
/utils\AccountUtil.java:169:            return;
/utils\AccountUtil.java:170:        }
/utils\AccountUtil.java:171:        context.getSharedPreferences("accountData", Context.MODE_PRIVATE).edit().clear().commit();
/utils\AccountUtil.java:172:        Toast.makeText(context, R.string.toast_exit_account_success, Toast.LENGTH_SHORT).show();
/utils\AccountUtil.java:173:    }
/utils\AccountUtil.java:175:    @Nullable
/utils\AccountUtil.java:176:    public static String getSToken(Context context) {
/utils\AccountUtil.java:177:        if (context == null) return null;
/utils\AccountUtil.java:178:        Account account = AccountUtil.getLoginInfo(context);
/utils\AccountUtil.java:179:        if (account != null) {
/utils\AccountUtil.java:180:            return account.getsToken();
/utils\AccountUtil.java:181:        }
/utils\AccountUtil.java:182:        return null;
/utils\AccountUtil.java:183:    }
/utils\AccountUtil.java:185:    @Nullable
/utils\AccountUtil.java:186:    public static String getCookie(Context context) {
/utils\AccountUtil.java:187:        if (context == null) return null;
/utils\AccountUtil.java:188:        Account account = AccountUtil.getLoginInfo(context);
/utils\AccountUtil.java:189:        if (account != null) {
/utils\AccountUtil.java:190:            return account.getCookie();
/utils\AccountUtil.java:191:        }
/utils\AccountUtil.java:192:        return null;
/utils\AccountUtil.java:193:    }
/utils\AccountUtil.java:195:    @Nullable
/utils\AccountUtil.java:196:    public static String getUid(Context context) {
/utils\AccountUtil.java:197:        if (context == null) return null;
/utils\AccountUtil.java:198:        Account account = AccountUtil.getLoginInfo(context);
/utils\AccountUtil.java:199:        if (account != null) {
/utils\AccountUtil.java:200:            return account.getUid();
/utils\AccountUtil.java:201:        }
/utils\AccountUtil.java:202:        return null;
/utils\AccountUtil.java:203:    }
/utils\AccountUtil.java:205:    @Nullable
/utils\AccountUtil.java:206:    public static String getBduss(Context context) {
/utils\AccountUtil.java:207:        if (context == null) return null;
/utils\AccountUtil.java:208:        Account account = AccountUtil.getLoginInfo(context);
/utils\AccountUtil.java:209:        if (account != null) {
/utils\AccountUtil.java:210:            return account.getBduss();
/utils\AccountUtil.java:211:        }
/utils\AccountUtil.java:212:        return null;
/utils\AccountUtil.java:213:    }
/utils\AccountUtil.java:215:    @Nullable
/utils\AccountUtil.java:216:    public static String getBdussCookie(Context context) {
/utils\AccountUtil.java:217:        if (context == null) return null;
/utils\AccountUtil.java:218:        String bduss = getBduss(context);
/utils\AccountUtil.java:219:        if (bduss != null) {
/utils\AccountUtil.java:220:            return getBdussCookie(bduss);
/utils\AccountUtil.java:221:        }
/utils\AccountUtil.java:222:        return null;
/utils\AccountUtil.java:223:    }
/utils\AccountUtil.java:225:    @NonNull
/utils\AccountUtil.java:226:    public static String getBdussCookie(@NonNull String bduss) {
/utils\AccountUtil.java:227:        return "BDUSS=" + bduss + "; path=/; domain=.baidu.com; httponly";
/utils\AccountUtil.java:228:    }
/utils\AccountUtil.java:229:}/utils\AnimUtil.java:1:package com.huanchengfly.tieba.post.utils;
/utils\AnimUtil.java:3:import android.animation.Keyframe;
/utils\AnimUtil.java:4:import android.animation.ObjectAnimator;
/utils\AnimUtil.java:5:import android.animation.PropertyValuesHolder;
/utils\AnimUtil.java:6:import android.view.View;
/utils\AnimUtil.java:7:import android.view.ViewPropertyAnimator;
/utils\AnimUtil.java:8:import android.view.animation.AccelerateDecelerateInterpolator;
/utils\AnimUtil.java:9:import android.view.animation.Animation;
/utils\AnimUtil.java:10:import android.view.animation.RotateAnimation;
/utils\AnimUtil.java:11:import android.widget.ImageView;
/utils\AnimUtil.java:13:import androidx.recyclerview.widget.RecyclerView;
/utils\AnimUtil.java:15:import com.huanchengfly.tieba.post.R;
/utils\AnimUtil.java:17:import com.huanchengfly.tieba.post.ui.overscroll.IOverScrollDecor;
/utils\AnimUtil.java:18:import com.huanchengfly.tieba.post.ui.overscroll.IOverScrollUpdateListener;
/utils\AnimUtil.java:19:import com.huanchengfly.tieba.post.ui.overscroll.VerticalOverScrollBounceEffectDecorator;
/utils\AnimUtil.java:20:import com.huanchengfly.tieba.post.ui.overscroll.adapters.RecyclerViewOverScrollDecorAdapter;
/utils\AnimUtil.java:22:public class AnimUtil {
/utils\AnimUtil.java:23:    public static IOverScrollDecor setUpOverScroll(RecyclerView recyclerView) {
/utils\AnimUtil.java:24:        IOverScrollDecor decor = new VerticalOverScrollBounceEffectDecorator(new RecyclerViewOverScrollDecorAdapter(recyclerView),
/utils\AnimUtil.java:25:                1.25f,
/utils\AnimUtil.java:26:                1f,
/utils\AnimUtil.java:27:                -1.5f // Default is -2
/utils\AnimUtil.java:28:        );
/utils\AnimUtil.java:29:        decor.setOverScrollUpdateListener(new IOverScrollUpdateListener() {
/utils\AnimUtil.java:30:            @Override
/utils\AnimUtil.java:31:            public void onOverScrollUpdate(IOverScrollDecor decor, int state, float offset) {
/utils\AnimUtil.java:32:                if (offset > 0) {
/utils\AnimUtil.java:34:                }
/utils\AnimUtil.java:35:            }
/utils\AnimUtil.java:36:        });
/utils\AnimUtil.java:37:        return decor;
/utils\AnimUtil.java:38:    }
/utils\AnimUtil.java:40:    public static ViewPropertyAnimator alphaIn(View view) {
/utils\AnimUtil.java:41:        return alphaIn(view, 200);
/utils\AnimUtil.java:42:    }
/utils\AnimUtil.java:44:    public static ViewPropertyAnimator alphaIn(View view, int duration) {
/utils\AnimUtil.java:45:        view.setAlpha(0F);
/utils\AnimUtil.java:46:        view.setVisibility(View.VISIBLE);
/utils\AnimUtil.java:47:        return view.animate()
/utils\AnimUtil.java:48:                .alpha(1F)
/utils\AnimUtil.java:49:                .setDuration(duration)
/utils\AnimUtil.java:50:                .setInterpolator(new AccelerateDecelerateInterpolator())
/utils\AnimUtil.java:51:                .setListener(null);
/utils\AnimUtil.java:52:    }
/utils\AnimUtil.java:54:    public static ViewPropertyAnimator alphaOut(View view) {
/utils\AnimUtil.java:55:        return alphaOut(view, 200);
/utils\AnimUtil.java:56:    }
/utils\AnimUtil.java:58:    public static ViewPropertyAnimator alphaOut(View view, int duration) {
/utils\AnimUtil.java:59:        view.setAlpha(1F);
/utils\AnimUtil.java:60:        view.setVisibility(View.VISIBLE);
/utils\AnimUtil.java:61:        return view.animate()
/utils\AnimUtil.java:62:                .alpha(0F)
/utils\AnimUtil.java:63:                .setDuration(duration)
/utils\AnimUtil.java:64:                .setInterpolator(new AccelerateDecelerateInterpolator())
/utils\AnimUtil.java:65:                .setListener(null);
/utils\AnimUtil.java:66:    }
/utils\AnimUtil.java:68:    public static void rotate(ImageView imageView, int fromDegrees, int toDegrees) {
/utils\AnimUtil.java:69:        Animation rotateAnimation = new RotateAnimation(fromDegrees, toDegrees, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 1);
/utils\AnimUtil.java:70:        rotateAnimation.setFillAfter(true);
/utils\AnimUtil.java:71:        rotateAnimation.setDuration(150);
/utils\AnimUtil.java:72:        rotateAnimation.setRepeatCount(0);
/utils\AnimUtil.java:73:        rotateAnimation.setInterpolator(new AccelerateDecelerateInterpolator());
/utils\AnimUtil.java:74:        imageView.startAnimation(rotateAnimation);
/utils\AnimUtil.java:75:    }
/utils\AnimUtil.java:77:    public ObjectAnimator nope(View view) {
/utils\AnimUtil.java:78:        int delta = view.getResources().getDimensionPixelOffset(R.dimen.spacing_medium);
/utils\AnimUtil.java:80:        PropertyValuesHolder pvhTranslateX = PropertyValuesHolder.ofKeyframe(View.TRANSLATION_X,
/utils\AnimUtil.java:81:                Keyframe.ofFloat(0f, 0),
/utils\AnimUtil.java:82:                Keyframe.ofFloat(.10f, -delta),
/utils\AnimUtil.java:83:                Keyframe.ofFloat(.26f, delta),
/utils\AnimUtil.java:84:                Keyframe.ofFloat(.42f, -delta),
/utils\AnimUtil.java:85:                Keyframe.ofFloat(.58f, delta),
/utils\AnimUtil.java:86:                Keyframe.ofFloat(.74f, -delta),
/utils\AnimUtil.java:87:                Keyframe.ofFloat(.90f, delta),
/utils\AnimUtil.java:88:                Keyframe.ofFloat(1f, 0f)
/utils\AnimUtil.java:89:        );
/utils\AnimUtil.java:91:        return ObjectAnimator.ofPropertyValuesHolder(view, pvhTranslateX).
/utils\AnimUtil.java:92:                setDuration(500);
/utils\AnimUtil.java:93:    }
/utils\AnimUtil.java:94:}
/utils\AssetUtil.java:1:package com.huanchengfly.tieba.post.utils;
/utils\AssetUtil.java:3:import android.content.Context;
/utils\AssetUtil.java:4:import android.webkit.WebResourceResponse;
/utils\AssetUtil.java:6:import java.io.ByteArrayInputStream;
/utils\AssetUtil.java:7:import java.io.IOException;
/utils\AssetUtil.java:8:import java.io.InputStream;
/utils\AssetUtil.java:9:import java.nio.charset.StandardCharsets;
/utils\AssetUtil.java:11:public class AssetUtil {
/utils\AssetUtil.java:12:    public static String TYPE_CSS = "text/css";
/utils\AssetUtil.java:13:    public static String TYPE_JS = "application/javascript";
/utils\AssetUtil.java:14:    public static String TYPE_FONT_WOFF = "application/x-font-woff";
/utils\AssetUtil.java:16:    public static WebResourceResponse getResponseFromAssets(Context context, String filename, String mimeType) {
/utils\AssetUtil.java:17:        if (filename.equals("")) {
/utils\AssetUtil.java:18:            return null;
/utils\AssetUtil.java:19:        }
/utils\AssetUtil.java:20:        InputStream is = null;
/utils\AssetUtil.java:21:        try {
/utils\AssetUtil.java:22:            is = context.getAssets().open(filename);
/utils\AssetUtil.java:23:        } catch (IOException e) {
/utils\AssetUtil.java:24:            e.printStackTrace();
/utils\AssetUtil.java:25:            return null;
/utils\AssetUtil.java:26:        }
/utils\AssetUtil.java:27:        return new WebResourceResponse(mimeType, "utf-8", is);
/utils\AssetUtil.java:28:    }
/utils\AssetUtil.java:30:    public static WebResourceResponse getEmptyResponse() {
/utils\AssetUtil.java:31:        return new WebResourceResponse("text/plain", "utf-8", new ByteArrayInputStream("".getBytes()));
/utils\AssetUtil.java:32:    }
/utils\AssetUtil.java:34:    public static String getStringFromAsset(Context context, String file) {
/utils\AssetUtil.java:35:        if (context == null) {
/utils\AssetUtil.java:36:            return "";
/utils\AssetUtil.java:37:        }
/utils\AssetUtil.java:38:        try {
/utils\AssetUtil.java:39:            InputStream is = context.getAssets().open(file);
/utils\AssetUtil.java:40:            int length = is.available();
/utils\AssetUtil.java:41:            byte[] buffer = new byte[length];
/utils\AssetUtil.java:42:            is.read(buffer);
/utils\AssetUtil.java:43:            return new String(buffer, StandardCharsets.UTF_8);
/utils\AssetUtil.java:44:        } catch (IOException e) {
/utils\AssetUtil.java:45:            e.printStackTrace();
/utils\AssetUtil.java:46:        }
/utils\AssetUtil.java:47:        return "";
/utils\AssetUtil.java:48:    }
/utils\AssetUtil.java:49:}
/utils\BlockUtil.java:1:package com.huanchengfly.tieba.post.utils;
/utils\BlockUtil.java:3:import com.huanchengfly.tieba.post.api.models.ThreadContentBean;
/utils\BlockUtil.java:4:import com.huanchengfly.tieba.post.models.database.Block;
/utils\BlockUtil.java:6:import org.litepal.LitePal;
/utils\BlockUtil.java:8:import java.util.List;
/utils\BlockUtil.java:10:public class BlockUtil {
/utils\BlockUtil.java:11:    private static List<Block> blackList;
/utils\BlockUtil.java:12:    private static List<Block> whiteList;
/utils\BlockUtil.java:13:    //private static Map<String, Boolean> map = new ArrayMap<>();
/utils\BlockUtil.java:15:    private static boolean isInWhiteList(String content) {
/utils\BlockUtil.java:16:        List<Block> list = LitePal.where("type = ? and category = ?", String.valueOf(Block.TYPE_KEYWORD), String.valueOf(Block.CATEGORY_WHITE_LIST)).find(Block.class);
/utils\BlockUtil.java:17:        for (Block block : list) {
/utils\BlockUtil.java:18:            for (String keyword : GsonUtil.getGson().fromJson(block.getKeywords(), String[].class)) {
/utils\BlockUtil.java:19:                if (content.toLowerCase().contains(keyword.toLowerCase())) {
/utils\BlockUtil.java:20:                    return true;
/utils\BlockUtil.java:21:                }
/utils\BlockUtil.java:22:            }
/utils\BlockUtil.java:23:        }
/utils\BlockUtil.java:24:        return false;
/utils\BlockUtil.java:25:    }
/utils\BlockUtil.java:27:    private static boolean isInWhiteList(ThreadContentBean.UserInfoBean userInfo) {
/utils\BlockUtil.java:28:        if (userInfo == null) {
/utils\BlockUtil.java:29:            return false;
/utils\BlockUtil.java:30:        }
/utils\BlockUtil.java:31:        return LitePal.where("uid = ? and category = ?", userInfo.getId(), String.valueOf(Block.CATEGORY_WHITE_LIST)).count(Block.class) > 0;
/utils\BlockUtil.java:32:    }
/utils\BlockUtil.java:34:    private static boolean isInWhiteList(String username, String uid) {
/utils\BlockUtil.java:35:        if (uid != null && LitePal.where("uid = ? and category = ?", uid, String.valueOf(Block.CATEGORY_WHITE_LIST)).count(Block.class) > 0) {
/utils\BlockUtil.java:36:            return true;
/utils\BlockUtil.java:37:        }
/utils\BlockUtil.java:38:        return username != null && LitePal.where("username = ? and category = ?", username, String.valueOf(Block.CATEGORY_WHITE_LIST)).count(Block.class) > 0;
/utils\BlockUtil.java:39:    }
/utils\BlockUtil.java:41:    public static boolean needBlock(String content) {
/utils\BlockUtil.java:42:        List<Block> list = LitePal.where("type = ? and category = ?", String.valueOf(Block.TYPE_KEYWORD), String.valueOf(Block.CATEGORY_BLACK_LIST)).find(Block.class);
/utils\BlockUtil.java:43:        for (Block block : list) {
/utils\BlockUtil.java:44:            for (String keyword : GsonUtil.getGson().fromJson(block.getKeywords(), String[].class)) {
/utils\BlockUtil.java:45:                if (content.toLowerCase().contains(keyword.toLowerCase())) {
/utils\BlockUtil.java:46:                    if (!isInWhiteList(content)) {
/utils\BlockUtil.java:47:                        return true;
/utils\BlockUtil.java:48:                    }
/utils\BlockUtil.java:49:                }
/utils\BlockUtil.java:50:            }
/utils\BlockUtil.java:51:        }
/utils\BlockUtil.java:52:        return false;
/utils\BlockUtil.java:53:    }
/utils\BlockUtil.java:55:    public static boolean needBlock(String username, String uid) {
/utils\BlockUtil.java:56:        if (isInWhiteList(username, uid)) {
/utils\BlockUtil.java:57:            return false;
/utils\BlockUtil.java:58:        }
/utils\BlockUtil.java:59:        if (uid != null && LitePal.where("uid = ? and category = ?", uid, String.valueOf(Block.CATEGORY_BLACK_LIST)).count(Block.class) > 0) {
/utils\BlockUtil.java:60:            return true;
/utils\BlockUtil.java:61:        }
/utils\BlockUtil.java:62:        return username != null && LitePal.where("username = ? and category = ?", username, String.valueOf(Block.CATEGORY_BLACK_LIST)).count(Block.class) > 0;
/utils\BlockUtil.java:63:    }
/utils\BlockUtil.java:65:    public static boolean needBlock(ThreadContentBean.UserInfoBean userInfo) {
/utils\BlockUtil.java:66:        return needBlock(userInfo.getName(), userInfo.getId());
/utils\BlockUtil.java:67:    }
/utils\BlockUtil.java:69:    public static List<Block> getBlackList() {
/utils\BlockUtil.java:70:        if (blackList == null) {
/utils\BlockUtil.java:71:            blackList = LitePal.where("category = ?", "10").find(Block.class);
/utils\BlockUtil.java:72:            return blackList;
/utils\BlockUtil.java:73:        }
/utils\BlockUtil.java:74:        LitePal.where("category = ?", "10").findAsync(Block.class).listen((List<Block> list) -> {
/utils\BlockUtil.java:75:            blackList = list;
/utils\BlockUtil.java:76:        });
/utils\BlockUtil.java:77:        return blackList;
/utils\BlockUtil.java:78:    }
/utils\BlockUtil.java:80:    public static List<Block> getWhiteList() {
/utils\BlockUtil.java:81:        if (whiteList == null) {
/utils\BlockUtil.java:82:            whiteList = LitePal.where("category = ?", "11").find(Block.class);
/utils\BlockUtil.java:83:            return whiteList;
/utils\BlockUtil.java:84:        }
/utils\BlockUtil.java:85:        LitePal.where("category = ?", "11").findAsync(Block.class).listen((List<Block> list) -> {
/utils\BlockUtil.java:86:            whiteList = list;
/utils\BlockUtil.java:87:        });
/utils\BlockUtil.java:88:        return whiteList;
/utils\BlockUtil.java:89:    }
/utils\BlockUtil.java:90:}/utils\CacheUtil.java:1:package com.huanchengfly.tieba.post.utils;
/utils\CacheUtil.java:3:import android.content.Context;
/utils\CacheUtil.java:4:import android.util.Base64;
/utils\CacheUtil.java:6:import androidx.annotation.Nullable;
/utils\CacheUtil.java:8:import com.google.gson.JsonSyntaxException;
/utils\CacheUtil.java:10:import java.io.File;
/utils\CacheUtil.java:11:import java.io.IOException;
/utils\CacheUtil.java:12:import java.nio.charset.StandardCharsets;
/utils\CacheUtil.java:14:public final class CacheUtil {
/utils\CacheUtil.java:15:    private CacheUtil() {
/utils\CacheUtil.java:16:    }
/utils\CacheUtil.java:18:    @Nullable
/utils\CacheUtil.java:19:    public static <T> T getCache(Context context, String cacheId, Class<T> tClass) {
/utils\CacheUtil.java:20:        File cacheDir = context.getExternalCacheDir();
/utils\CacheUtil.java:21:        File cacheFile = new File(cacheDir, MD5Util.toMd5(tClass.getName() + "_" + cacheId));
/utils\CacheUtil.java:22:        if (cacheFile.exists()) {
/utils\CacheUtil.java:23:            try {
/utils\CacheUtil.java:24:                return GsonUtil.getGson().fromJson(base64Decode(FileUtil.readFile(cacheFile)), tClass);
/utils\CacheUtil.java:25:            } catch (JsonSyntaxException e) {
/utils\CacheUtil.java:26:                e.printStackTrace();
/utils\CacheUtil.java:27:            }
/utils\CacheUtil.java:28:        }
/utils\CacheUtil.java:29:        return null;
/utils\CacheUtil.java:30:    }
/utils\CacheUtil.java:32:    public static void putCache(Context context, String cacheId, Object object) {
/utils\CacheUtil.java:33:        File cacheDir = context.getExternalCacheDir();
/utils\CacheUtil.java:34:        File cacheFile = new File(cacheDir, MD5Util.toMd5(object.getClass().getName() + "_" + cacheId));
/utils\CacheUtil.java:35:        try {
/utils\CacheUtil.java:36:            if (cacheFile.exists() || cacheFile.createNewFile()) {
/utils\CacheUtil.java:37:                try {
/utils\CacheUtil.java:38:                    FileUtil.writeFile(cacheFile, base64Encode(GsonUtil.getGson().toJson(object)), false);
/utils\CacheUtil.java:39:                } catch (JsonSyntaxException e) {
/utils\CacheUtil.java:40:                    e.printStackTrace();
/utils\CacheUtil.java:41:                }
/utils\CacheUtil.java:42:            }
/utils\CacheUtil.java:43:        } catch (IOException e) {
/utils\CacheUtil.java:44:            e.printStackTrace();
/utils\CacheUtil.java:45:        }
/utils\CacheUtil.java:46:    }
/utils\CacheUtil.java:48:    public static String base64Encode(String s) {
/utils\CacheUtil.java:49:        return Base64.encodeToString(s.getBytes(StandardCharsets.UTF_8), Base64.DEFAULT);
/utils\CacheUtil.java:50:    }
/utils\CacheUtil.java:52:    public static String base64Decode(String s) {
/utils\CacheUtil.java:53:        return new String(Base64.decode(s.getBytes(StandardCharsets.UTF_8), Base64.DEFAULT), StandardCharsets.UTF_8);
/utils\CacheUtil.java:54:    }
/utils\CacheUtil.java:55:}
/utils\ColorUtils.java:1:package com.huanchengfly.tieba.post.utils;
/utils\ColorUtils.java:3:import android.graphics.Color;
/utils\ColorUtils.java:5:import androidx.annotation.ColorInt;
/utils\ColorUtils.java:6:import androidx.annotation.FloatRange;
/utils\ColorUtils.java:7:import androidx.annotation.IntRange;
/utils\ColorUtils.java:9:public final class ColorUtils {
/utils\ColorUtils.java:10:    public static int getDarkerColor(@ColorInt int color) {
/utils\ColorUtils.java:11:        float[] hsv = new float[3];
/utils\ColorUtils.java:12:        Color.colorToHSV(color, hsv); // convert to hsv
/utils\ColorUtils.java:13:        // make darker
/utils\ColorUtils.java:14:        hsv[1] = hsv[1] + 0.1f; // more saturation
/utils\ColorUtils.java:15:        hsv[2] = hsv[2] - 0.1f; // less brightness
/utils\ColorUtils.java:16:        return Color.HSVToColor(hsv);
/utils\ColorUtils.java:17:    }
/utils\ColorUtils.java:19:    @ColorInt
/utils\ColorUtils.java:20:    public static int alpha(@ColorInt int color, @IntRange(from = 0, to = 255) int alpha) {
/utils\ColorUtils.java:21:        return Color.argb(alpha, Color.red(color), Color.green(color), Color.blue(color));
/utils\ColorUtils.java:22:    }
/utils\ColorUtils.java:24:    public static int getLighterColor(@ColorInt int color) {
/utils\ColorUtils.java:25:        return getLighterColor(color, 0.1f);
/utils\ColorUtils.java:26:    }
/utils\ColorUtils.java:28:    public static int getLighterColor(@ColorInt int color, float i) {
/utils\ColorUtils.java:29:        float[] hsv = new float[3];
/utils\ColorUtils.java:30:        Color.colorToHSV(color, hsv); // convert to hsv
/utils\ColorUtils.java:31:        // make lighter
/utils\ColorUtils.java:32:        hsv[1] = hsv[1] - i; // less saturation
/utils\ColorUtils.java:33:        hsv[2] = hsv[2] + i; // more brightness
/utils\ColorUtils.java:34:        return Color.HSVToColor(hsv);
/utils\ColorUtils.java:35:    }
/utils\ColorUtils.java:37:    public static int greifyColor(@ColorInt int color, @FloatRange(from = 0f, to = 1f) float sat) {
/utils\ColorUtils.java:38:        float[] hsv = new float[3];
/utils\ColorUtils.java:39:        Color.colorToHSV(color, hsv);
/utils\ColorUtils.java:40:        hsv[1] = hsv[1] - sat;
/utils\ColorUtils.java:41:        hsv[2] = hsv[2] - (sat / 3);
/utils\ColorUtils.java:42:        return Color.HSVToColor(hsv);
/utils\ColorUtils.java:43:    }
/utils\ColorUtils.java:44:}
/utils\CrashUtil.java:1:package com.huanchengfly.tieba.post.utils;
/utils\CrashUtil.java:3:import android.annotation.SuppressLint;
/utils\CrashUtil.java:4:import android.app.AlarmManager;
/utils\CrashUtil.java:5:import android.app.PendingIntent;
/utils\CrashUtil.java:6:import android.content.Context;
/utils\CrashUtil.java:7:import android.content.Intent;
/utils\CrashUtil.java:8:import android.content.pm.PackageInfo;
/utils\CrashUtil.java:9:import android.content.pm.PackageManager;
/utils\CrashUtil.java:10:import android.os.Build;
/utils\CrashUtil.java:11:import android.text.TextUtils;
/utils\CrashUtil.java:13:import androidx.annotation.NonNull;
/utils\CrashUtil.java:14:import androidx.annotation.Nullable;
/utils\CrashUtil.java:16:import com.huanchengfly.tieba.post.activities.MainActivity;
/utils\CrashUtil.java:17:import com.huanchengfly.tieba.post.BaseApplication;
/utils\CrashUtil.java:19:public class CrashUtil {
/utils\CrashUtil.java:20:    public static final String TAG = "CrashUtil";
/utils\CrashUtil.java:22:    public static void newCrash(Context context, Throwable throwable) {
/utils\CrashUtil.java:23:        long time = getTime(context);
/utils\CrashUtil.java:24:        saveException(context, throwable);
/utils\CrashUtil.java:25:        if (System.currentTimeMillis() - time > 30 * 1000L) restart(context);
/utils\CrashUtil.java:26:    }
/utils\CrashUtil.java:28:    @Nullable
/utils\CrashUtil.java:29:    private static PackageInfo getLocalPackageInfo(Context context) {
/utils\CrashUtil.java:30:        PackageInfo packageInfo;
/utils\CrashUtil.java:31:        try {
/utils\CrashUtil.java:32:            packageInfo = context.getApplicationContext()
/utils\CrashUtil.java:33:                    .getPackageManager().getPackageInfo(context.getPackageName(), 0);
/utils\CrashUtil.java:34:            return packageInfo;
/utils\CrashUtil.java:35:        } catch (PackageManager.NameNotFoundException e) {
/utils\CrashUtil.java:36:            e.printStackTrace();
/utils\CrashUtil.java:37:            return null;
/utils\CrashUtil.java:38:        }
/utils\CrashUtil.java:39:    }
/utils\CrashUtil.java:41:    private static String getCrashReport(Context context, Throwable ex) {
/utils\CrashUtil.java:42:        StringBuilder exceptionStr = new StringBuilder();
/utils\CrashUtil.java:43:        PackageInfo pinfo = getLocalPackageInfo(context);
/utils\CrashUtil.java:44:        if (pinfo != null) {
/utils\CrashUtil.java:45:            if (ex != null) {
/utils\CrashUtil.java:46:                //app版本信息
/utils\CrashUtil.java:47:                exceptionStr.append("App Version：" + pinfo.versionName);
/utils\CrashUtil.java:48:                exceptionStr.append("_" + pinfo.versionCode + "\n");
/utils\CrashUtil.java:49:                //手机系统信息
/utils\CrashUtil.java:50:                exceptionStr.append("OS Version：" + Build.VERSION.RELEASE);
/utils\CrashUtil.java:51:                exceptionStr.append("_");
/utils\CrashUtil.java:52:                exceptionStr.append(Build.VERSION.SDK_INT + "\n");
/utils\CrashUtil.java:53:                //手机制造商
/utils\CrashUtil.java:54:                exceptionStr.append("Vendor: " + Build.MANUFACTURER + "\n");
/utils\CrashUtil.java:55:                //手机型号
/utils\CrashUtil.java:56:                exceptionStr.append("Model: " + Build.MODEL + "\n");
/utils\CrashUtil.java:57:                String errorStr = ex.getLocalizedMessage();
/utils\CrashUtil.java:58:                if (TextUtils.isEmpty(errorStr)) {
/utils\CrashUtil.java:59:                    errorStr = ex.getMessage();
/utils\CrashUtil.java:60:                }
/utils\CrashUtil.java:61:                if (TextUtils.isEmpty(errorStr)) {
/utils\CrashUtil.java:62:                    errorStr = ex.toString();
/utils\CrashUtil.java:63:                }
/utils\CrashUtil.java:64:                exceptionStr.append("Exception: " + errorStr + "\n");
/utils\CrashUtil.java:65:                StackTraceElement[] elements = ex.getStackTrace();
/utils\CrashUtil.java:66:                if (elements != null) {
/utils\CrashUtil.java:67:                    for (int i = 0; i < elements.length; i++) {
/utils\CrashUtil.java:68:                        exceptionStr.append(elements[i].toString() + "\n");
/utils\CrashUtil.java:69:                    }
/utils\CrashUtil.java:70:                }
/utils\CrashUtil.java:71:            } else {
/utils\CrashUtil.java:72:                exceptionStr.append("no exception. Throwable is null\n");
/utils\CrashUtil.java:73:            }
/utils\CrashUtil.java:74:            return exceptionStr.toString();
/utils\CrashUtil.java:75:        } else {
/utils\CrashUtil.java:76:            return "";
/utils\CrashUtil.java:77:        }
/utils\CrashUtil.java:78:    }
/utils\CrashUtil.java:80:    @SuppressWarnings("ApplySharedPref")
/utils\CrashUtil.java:81:    private static void saveException(@NonNull Context context, Throwable throwable) {
/utils\CrashUtil.java:82:        context.getSharedPreferences("crash", Context.MODE_PRIVATE)
/utils\CrashUtil.java:83:                .edit()
/utils\CrashUtil.java:84:                .clear()
/utils\CrashUtil.java:85:                .putLong("time", System.currentTimeMillis())
/utils\CrashUtil.java:86:                .putString("message", getCrashMessage(throwable))
/utils\CrashUtil.java:87:                .putString("crash", getCrashReport(context, throwable))
/utils\CrashUtil.java:88:                .commit();
/utils\CrashUtil.java:89:    }
/utils\CrashUtil.java:91:    private static String getCrashMessage(Throwable ex) {
/utils\CrashUtil.java:92:        String errorStr = ex.getLocalizedMessage();
/utils\CrashUtil.java:93:        if (TextUtils.isEmpty(errorStr)) {
/utils\CrashUtil.java:94:            errorStr = ex.getMessage();
/utils\CrashUtil.java:95:        }
/utils\CrashUtil.java:96:        if (TextUtils.isEmpty(errorStr)) {
/utils\CrashUtil.java:97:            errorStr = ex.toString();
/utils\CrashUtil.java:98:        }
/utils\CrashUtil.java:99:        return errorStr;
/utils\CrashUtil.java:100:    }
/utils\CrashUtil.java:102:    public static String getCrashMessage(Context context) {
/utils\CrashUtil.java:103:        return context.getSharedPreferences("crash", Context.MODE_PRIVATE)
/utils\CrashUtil.java:104:                .getString("message", "");
/utils\CrashUtil.java:105:    }
/utils\CrashUtil.java:107:    @SuppressWarnings("WrongConstant")
/utils\CrashUtil.java:108:    private static void restart(@NonNull Context context) {
/utils\CrashUtil.java:109:        Intent intent = new Intent(context.getApplicationContext(), MainActivity.class)
/utils\CrashUtil.java:110:                .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
/utils\CrashUtil.java:111:        AlarmManager mAlarmManager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);
/utils\CrashUtil.java:112:        if (mAlarmManager != null) {
/utils\CrashUtil.java:113:            PendingIntent restartIntent = PendingIntent.getActivity(
/utils\CrashUtil.java:114:                    context.getApplicationContext(), 0, intent,
/utils\CrashUtil.java:115:                    Intent.FLAG_ACTIVITY_NEW_TASK);
/utils\CrashUtil.java:116:            mAlarmManager.set(AlarmManager.RTC, System.currentTimeMillis() + 1000,
/utils\CrashUtil.java:117:                    restartIntent);
/utils\CrashUtil.java:118:        }
/utils\CrashUtil.java:119:        ((BaseApplication) context.getApplicationContext()).removeAllActivity();
/utils\CrashUtil.java:120:        android.os.Process.killProcess(android.os.Process.myPid());
/utils\CrashUtil.java:121:    }
/utils\CrashUtil.java:123:    public static long getTime(@NonNull Context context) {
/utils\CrashUtil.java:124:        return context.getSharedPreferences("crash", Context.MODE_PRIVATE).getLong("time", 0L);
/utils\CrashUtil.java:125:    }
/utils\CrashUtil.java:127:    @Nullable
/utils\CrashUtil.java:128:    public static String getCrash(@NonNull Context context) {
/utils\CrashUtil.java:129:        return context.getSharedPreferences("crash", Context.MODE_PRIVATE).getString("crash", null);
/utils\CrashUtil.java:130:    }
/utils\CrashUtil.java:132:    public static void clear(@NonNull Context context) {
/utils\CrashUtil.java:133:        context.getSharedPreferences("crash", Context.MODE_PRIVATE)
/utils\CrashUtil.java:134:                .edit()
/utils\CrashUtil.java:135:                .clear()
/utils\CrashUtil.java:136:                .apply();
/utils\CrashUtil.java:137:    }
/utils\CrashUtil.java:139:    public static class CrashHandler implements Thread.UncaughtExceptionHandler {
/utils\CrashUtil.java:140:        @SuppressLint("StaticFieldLeak")
/utils\CrashUtil.java:141:        private static CrashHandler sInstance = null;
/utils\CrashUtil.java:142:        boolean crashing = false;
/utils\CrashUtil.java:143:        private Thread.UncaughtExceptionHandler mDefaultHandler;
/utils\CrashUtil.java:144:        private Context mContext;
/utils\CrashUtil.java:146:        private CrashHandler() {
/utils\CrashUtil.java:147:        }
/utils\CrashUtil.java:149:        public static CrashHandler getInstance() {
/utils\CrashUtil.java:150:            if (sInstance == null) {
/utils\CrashUtil.java:151:                synchronized (CrashHandler.class) {
/utils\CrashUtil.java:152:                    if (sInstance == null) {
/utils\CrashUtil.java:153:                        synchronized (CrashHandler.class) {
/utils\CrashUtil.java:154:                            sInstance = new CrashHandler();
/utils\CrashUtil.java:155:                        }
/utils\CrashUtil.java:156:                    }
/utils\CrashUtil.java:157:                }
/utils\CrashUtil.java:158:            }
/utils\CrashUtil.java:159:            return sInstance;
/utils\CrashUtil.java:160:        }
/utils\CrashUtil.java:162:        /**
/utils\CrashUtil.java:163:         * 初始化默认异常捕获
/utils\CrashUtil.java:164:         *
/utils\CrashUtil.java:165:         * @param context context
/utils\CrashUtil.java:166:         */
/utils\CrashUtil.java:167:        public void init(Context context) {
/utils\CrashUtil.java:168:            mContext = context;
/utils\CrashUtil.java:169:            mDefaultHandler = Thread.getDefaultUncaughtExceptionHandler();
/utils\CrashUtil.java:170:            Thread.setDefaultUncaughtExceptionHandler(this);
/utils\CrashUtil.java:171:        }
/utils\CrashUtil.java:173:        @Override
/utils\CrashUtil.java:174:        public void uncaughtException(Thread t, Throwable e) {
/utils\CrashUtil.java:175:            if (crashing) {
/utils\CrashUtil.java:176:                return;
/utils\CrashUtil.java:177:            }
/utils\CrashUtil.java:178:            crashing = true;
/utils\CrashUtil.java:179:            e.printStackTrace();
/utils\CrashUtil.java:180:            if (!handleException(e) && mDefaultHandler != null) {
/utils\CrashUtil.java:181:                mDefaultHandler.uncaughtException(t, e);
/utils\CrashUtil.java:182:            }
/utils\CrashUtil.java:183:        }
/utils\CrashUtil.java:185:        private boolean handleException(Throwable e) {
/utils\CrashUtil.java:186:            if (e == null) {
/utils\CrashUtil.java:187:                return false;
/utils\CrashUtil.java:188:            }
/utils\CrashUtil.java:189:            try {
/utils\CrashUtil.java:190:                newCrash(mContext, e);
/utils\CrashUtil.java:191:            } catch (Exception ex) {
/utils\CrashUtil.java:192:                return false;
/utils\CrashUtil.java:193:            }
/utils\CrashUtil.java:194:            return true;
/utils\CrashUtil.java:195:        }
/utils\CrashUtil.java:196:    }
/utils\CrashUtil.java:197:}/utils\DialogUtil.java:1:package com.huanchengfly.tieba.post.utils;
/utils\DialogUtil.java:3:import android.content.Context;
/utils\DialogUtil.java:5:import androidx.appcompat.app.AlertDialog;
/utils\DialogUtil.java:7:import com.huanchengfly.tieba.post.R;
/utils\DialogUtil.java:9:public class DialogUtil {
/utils\DialogUtil.java:10:    public static AlertDialog.Builder build(Context context) {
/utils\DialogUtil.java:11:        return new AlertDialog.Builder(context);
/utils\DialogUtil.java:12:    }
/utils\DialogUtil.java:14:    public static AlertDialog.Builder buildBottomDialog(Context context) {
/utils\DialogUtil.java:15:        return new AlertDialog.Builder(context, R.style.Dialog_Bottom);
/utils\DialogUtil.java:16:    }
/utils\DialogUtil.java:17:}/utils\DisplayUtil.java:1:package com.huanchengfly.tieba.post.utils;
/utils\DisplayUtil.java:3:import android.app.Activity;
/utils\DisplayUtil.java:4:import android.content.Context;
/utils\DisplayUtil.java:5:import android.util.DisplayMetrics;
/utils\DisplayUtil.java:7:public class DisplayUtil {
/utils\DisplayUtil.java:8:    /**
/utils\DisplayUtil.java:9:     * 将px值转换为dp值
/utils\DisplayUtil.java:10:     */
/utils\DisplayUtil.java:11:    public static int px2dp(Context context, float pxValue) {
/utils\DisplayUtil.java:12:        final float scale = context.getResources().getDisplayMetrics().density;
/utils\DisplayUtil.java:13:        return (int) (pxValue / scale + 0.5f);
/utils\DisplayUtil.java:14:    }
/utils\DisplayUtil.java:16:    /**
/utils\DisplayUtil.java:17:     * 将dp值转换为px值
/utils\DisplayUtil.java:18:     */
/utils\DisplayUtil.java:19:    public static int dp2px(Context context, float dpValue) {
/utils\DisplayUtil.java:20:        final float scale = context.getResources().getDisplayMetrics().density;
/utils\DisplayUtil.java:21:        return (int) (dpValue * scale + 0.5f);
/utils\DisplayUtil.java:22:    }
/utils\DisplayUtil.java:24:    /**
/utils\DisplayUtil.java:25:     * 将px值转换为sp值
/utils\DisplayUtil.java:26:     */
/utils\DisplayUtil.java:27:    public static int px2sp(Context context, float pxValue) {
/utils\DisplayUtil.java:28:        final float fontScale = context.getResources().getDisplayMetrics().scaledDensity;
/utils\DisplayUtil.java:29:        return (int) (pxValue / fontScale + 0.5f);
/utils\DisplayUtil.java:30:    }
/utils\DisplayUtil.java:32:    /**
/utils\DisplayUtil.java:33:     * 将sp值转换为px值
/utils\DisplayUtil.java:34:     */
/utils\DisplayUtil.java:35:    public static int sp2px(Context context, float spValue) {
/utils\DisplayUtil.java:36:        final float fontScale = context.getResources().getDisplayMetrics().scaledDensity;
/utils\DisplayUtil.java:37:        return (int) (spValue * fontScale + 0.5f);
/utils\DisplayUtil.java:38:    }
/utils\DisplayUtil.java:40:    /**
/utils\DisplayUtil.java:41:     * 获取屏幕宽度
/utils\DisplayUtil.java:42:     */
/utils\DisplayUtil.java:43:    public static int getScreenWidthPixels(Activity context) {
/utils\DisplayUtil.java:44:        DisplayMetrics metric = new DisplayMetrics();
/utils\DisplayUtil.java:45:        context.getWindowManager().getDefaultDisplay().getMetrics(metric);
/utils\DisplayUtil.java:46:        return metric.widthPixels;
/utils\DisplayUtil.java:47:    }
/utils\DisplayUtil.java:49:    /**
/utils\DisplayUtil.java:50:     * 获取屏幕高度
/utils\DisplayUtil.java:51:     */
/utils\DisplayUtil.java:52:    public static int getScreenHeightPixels(Activity context) {
/utils\DisplayUtil.java:53:        DisplayMetrics metric = new DisplayMetrics();
/utils\DisplayUtil.java:54:        context.getWindowManager().getDefaultDisplay().getMetrics(metric);
/utils\DisplayUtil.java:55:        return metric.heightPixels;
/utils\DisplayUtil.java:56:    }
/utils\DisplayUtil.java:57:}
/utils\EmotionUtil.java:1:package com.huanchengfly.tieba.post.utils;
/utils\EmotionUtil.java:3:import android.content.Context;
/utils\EmotionUtil.java:4:import android.text.Editable;
/utils\EmotionUtil.java:5:import android.widget.AdapterView;
/utils\EmotionUtil.java:6:import android.widget.EditText;
/utils\EmotionUtil.java:8:import androidx.annotation.DrawableRes;
/utils\EmotionUtil.java:10:import com.huanchengfly.tieba.post.R;
/utils\EmotionUtil.java:11:import com.huanchengfly.tieba.post.adapters.EmotionGridViewAdapter;
/utils\EmotionUtil.java:13:import org.intellij.lang.annotations.RegExp;
/utils\EmotionUtil.java:15:import java.util.HashMap;
/utils\EmotionUtil.java:16:import java.util.Map;
/utils\EmotionUtil.java:18:public class EmotionUtil {
/utils\EmotionUtil.java:19:    public static final int EMOTION_ALL_TYPE = 0;
/utils\EmotionUtil.java:20:    public static final int EMOTION_CLASSIC_TYPE = 1;
/utils\EmotionUtil.java:21:    public static final int EMOTION_EMOJI_TYPE = 2;
/utils\EmotionUtil.java:22:    public static final int EMOTION_ALL_WEB_TYPE = 3;
/utils\EmotionUtil.java:23:    public static final int EMOTION_CLASSIC_WEB_TYPE = 4;
/utils\EmotionUtil.java:24:    public static final int EMOTION_EMOJI_WEB_TYPE = 5;
/utils\EmotionUtil.java:26:    @RegExp
/utils\EmotionUtil.java:27:    private static final String REGEX_WEB = "\\(#([\u4e00-\u9fa5\\w\u007e])+\\)";
/utils\EmotionUtil.java:28:    @RegExp
/utils\EmotionUtil.java:29:    private static final String REGEX = "#\\(([一-龥\\w~])+\\)";
/utils\EmotionUtil.java:30:    private static Map<String, Integer> EMPTY_MAP;
/utils\EmotionUtil.java:31:    private static Map<String, Integer> EMOTION_ALL_MAP;
/utils\EmotionUtil.java:32:    private static Map<String, Integer> EMOTION_CLASSIC_MAP;
/utils\EmotionUtil.java:33:    private static Map<String, Integer> EMOTION_EMOJI_MAP;
/utils\EmotionUtil.java:34:    private static Map<String, Integer> EMOTION_ALL_WEB_MAP;
/utils\EmotionUtil.java:35:    private static Map<String, Integer> EMOTION_CLASSIC_WEB_MAP;
/utils\EmotionUtil.java:36:    private static Map<String, Integer> EMOTION_EMOJI_WEB_MAP;
/utils\EmotionUtil.java:38:    static {
/utils\EmotionUtil.java:39:        EMPTY_MAP = new HashMap<>();
/utils\EmotionUtil.java:40:        EMOTION_ALL_MAP = new HashMap<>();
/utils\EmotionUtil.java:41:        EMOTION_CLASSIC_MAP = new HashMap<>();
/utils\EmotionUtil.java:42:        EMOTION_EMOJI_MAP = new HashMap<>();
/utils\EmotionUtil.java:43:        EMOTION_ALL_WEB_MAP = new HashMap<>();
/utils\EmotionUtil.java:44:        EMOTION_CLASSIC_WEB_MAP = new HashMap<>();
/utils\EmotionUtil.java:45:        EMOTION_EMOJI_WEB_MAP = new HashMap<>();
/utils\EmotionUtil.java:46:        EMOTION_CLASSIC_WEB_MAP.put("(#滑稽)", R.drawable.emotion_huaji);
/utils\EmotionUtil.java:47:        EMOTION_CLASSIC_WEB_MAP.put("(#呵呵)", R.drawable.emotion_hehe);
/utils\EmotionUtil.java:48:        EMOTION_CLASSIC_WEB_MAP.put("(#哈哈)", R.drawable.emotion_haha);
/utils\EmotionUtil.java:49:        EMOTION_CLASSIC_WEB_MAP.put("(#啊)", R.drawable.emotion_a);
/utils\EmotionUtil.java:50:        EMOTION_CLASSIC_WEB_MAP.put("(#开心)", R.drawable.emotion_kaixin);
/utils\EmotionUtil.java:51:        EMOTION_CLASSIC_WEB_MAP.put("(#酷)", R.drawable.emotion_ku);
/utils\EmotionUtil.java:52:        EMOTION_CLASSIC_WEB_MAP.put("(#汗)", R.drawable.emotion_han);
/utils\EmotionUtil.java:53:        EMOTION_CLASSIC_WEB_MAP.put("(#怒)", R.drawable.emotion_nu);
/utils\EmotionUtil.java:54:        EMOTION_CLASSIC_WEB_MAP.put("(#鄙视)", R.drawable.emotion_bishi);
/utils\EmotionUtil.java:55:        EMOTION_CLASSIC_WEB_MAP.put("(#不高兴)", R.drawable.emotion_bugaoxin);
/utils\EmotionUtil.java:56:        EMOTION_CLASSIC_WEB_MAP.put("(#泪)", R.drawable.emotion_lei);
/utils\EmotionUtil.java:57:        EMOTION_CLASSIC_WEB_MAP.put("(#吐舌)", R.drawable.emotion_tushe);
/utils\EmotionUtil.java:58:        EMOTION_CLASSIC_WEB_MAP.put("(#黑线)", R.drawable.emotion_heixian);
/utils\EmotionUtil.java:59:        //EMOTION_CLASSIC_WEB_MAP.put("(#暗中观察)", R.drawable.emotion_anzhongguancha);
/utils\EmotionUtil.java:60:        //EMOTION_CLASSIC_WEB_MAP.put("(#吃瓜)", R.drawable.emotion_chigua);
/utils\EmotionUtil.java:61:        EMOTION_CLASSIC_WEB_MAP.put("(#乖)", R.drawable.emotion_guai);
/utils\EmotionUtil.java:62:        //EMOTION_CLASSIC_WEB_MAP.put("(#嘿嘿嘿)", R.drawable.emotion_heiheihei);
/utils\EmotionUtil.java:63:        //EMOTION_CLASSIC_WEB_MAP.put("(#喝酒)", R.drawable.emotion_hejiu);
/utils\EmotionUtil.java:64:        //EMOTION_CLASSIC_WEB_MAP.put("(#黑头瞪眼)", R.drawable.emotion_htdy);
/utils\EmotionUtil.java:65:        //EMOTION_CLASSIC_WEB_MAP.put("(#黑头高兴)", R.drawable.emotion_htgx);
/utils\EmotionUtil.java:66:        EMOTION_CLASSIC_WEB_MAP.put("(#呼~)", R.drawable.emotion_hu);
/utils\EmotionUtil.java:67:        //EMOTION_CLASSIC_WEB_MAP.put("(#欢呼)", R.drawable.emotion_huanhu);
/utils\EmotionUtil.java:68:        EMOTION_CLASSIC_WEB_MAP.put("(#花心)", R.drawable.emotion_huaxin);
/utils\EmotionUtil.java:69:        EMOTION_CLASSIC_WEB_MAP.put("(#惊哭)", R.drawable.emotion_jingku);
/utils\EmotionUtil.java:70:        EMOTION_CLASSIC_WEB_MAP.put("(#惊讶)", R.drawable.emotion_jingya);
/utils\EmotionUtil.java:71:        //EMOTION_CLASSIC_WEB_MAP.put("(#紧张)", R.drawable.emotion_jinzhang);
/utils\EmotionUtil.java:72:        //EMOTION_CLASSIC_WEB_MAP.put("(#柯基暗中观察)", R.drawable.emotion_kjazgc);
/utils\EmotionUtil.java:73:        EMOTION_CLASSIC_WEB_MAP.put("(#狂汗)", R.drawable.emotion_kuanghan);
/utils\EmotionUtil.java:74:        //EMOTION_CLASSIC_WEB_MAP.put("(#困成狗)", R.drawable.emotion_kunchenggou);
/utils\EmotionUtil.java:75:        //EMOTION_CLASSIC_WEB_MAP.put("(#懒得理)", R.drawable.emotion_landeli);
/utils\EmotionUtil.java:76:        EMOTION_CLASSIC_WEB_MAP.put("(#冷)", R.drawable.emotion_len);
/utils\EmotionUtil.java:77:        EMOTION_CLASSIC_WEB_MAP.put("(#勉强)", R.drawable.emotion_mianqiang);
/utils\EmotionUtil.java:78:        //EMOTION_CLASSIC_WEB_MAP.put("(#你懂的)", R.drawable.emotion_nidongde);
/utils\EmotionUtil.java:79:        EMOTION_CLASSIC_WEB_MAP.put("(#喷)", R.drawable.emotion_pen);
/utils\EmotionUtil.java:80:        EMOTION_CLASSIC_WEB_MAP.put("(#噗)", R.drawable.emotion_pu);
/utils\EmotionUtil.java:81:        EMOTION_CLASSIC_WEB_MAP.put("(#钱)", R.drawable.emotion_qian);
/utils\EmotionUtil.java:82:        EMOTION_CLASSIC_WEB_MAP.put("(#生气)", R.drawable.emotion_shengqi);
/utils\EmotionUtil.java:83:        EMOTION_CLASSIC_WEB_MAP.put("(#睡觉)", R.drawable.emotion_shuijiao);
/utils\EmotionUtil.java:84:        //EMOTION_CLASSIC_WEB_MAP.put("(#酸爽)", R.drawable.emotion_suanshuang);
/utils\EmotionUtil.java:85:        EMOTION_CLASSIC_WEB_MAP.put("(#太开心)", R.drawable.emotion_taikaixin);
/utils\EmotionUtil.java:86:        //EMOTION_CLASSIC_WEB_MAP.put("(#摊摊手)", R.drawable.emotion_tantanshou);
/utils\EmotionUtil.java:87:        EMOTION_CLASSIC_WEB_MAP.put("(#吐)", R.drawable.emotion_tu);
/utils\EmotionUtil.java:88:        //EMOTION_CLASSIC_WEB_MAP.put("(#托腮)", R.drawable.emotion_tuosai);
/utils\EmotionUtil.java:89:        //EMOTION_CLASSIC_WEB_MAP.put("(#突然兴奋)", R.drawable.emotion_turanxinfen);
/utils\EmotionUtil.java:90:        //EMOTION_CLASSIC_WEB_MAP.put("(#挖鼻)", R.drawable.emotion_wabi);
/utils\EmotionUtil.java:91:        EMOTION_CLASSIC_WEB_MAP.put("(#委屈)", R.drawable.emotion_weiqu);
/utils\EmotionUtil.java:92:        //EMOTION_CLASSIC_WEB_MAP.put("(#微微一笑)", R.drawable.emotion_weiweiyixiao);
/utils\EmotionUtil.java:93:        //EMOTION_CLASSIC_WEB_MAP.put("(#what)", R.drawable.emotion_what);
/utils\EmotionUtil.java:94:        //EMOTION_CLASSIC_WEB_MAP.put("(#捂嘴笑)", R.drawable.emotion_wuzuixiao);
/utils\EmotionUtil.java:95:        //EMOTION_CLASSIC_WEB_MAP.put("(#小乖)", R.drawable.emotion_xiaoguai);
/utils\EmotionUtil.java:96:        //EMOTION_CLASSIC_WEB_MAP.put("(#小红脸)", R.drawable.emotion_xiaohonglian);
/utils\EmotionUtil.java:97:        //EMOTION_CLASSIC_WEB_MAP.put("(#笑尿)", R.drawable.emotion_xiaoniao);
/utils\EmotionUtil.java:98:        EMOTION_CLASSIC_WEB_MAP.put("(#笑眼)", R.drawable.emotion_xiaoyan);
/utils\EmotionUtil.java:99:        //EMOTION_CLASSIC_WEB_MAP.put("(#犀利)", R.drawable.emotion_xili);
/utils\EmotionUtil.java:100:        //EMOTION_CLASSIC_WEB_MAP.put("(#呀咩爹)", R.drawable.emotion_yamiedie);
/utils\EmotionUtil.java:101:        EMOTION_CLASSIC_WEB_MAP.put("(#咦)", R.drawable.emotion_yi);
/utils\EmotionUtil.java:102:        EMOTION_CLASSIC_WEB_MAP.put("(#阴险)", R.drawable.emotion_yinxian);
/utils\EmotionUtil.java:103:        EMOTION_CLASSIC_WEB_MAP.put("(#疑问)", R.drawable.emotion_yiwen);
/utils\EmotionUtil.java:104:        //EMOTION_CLASSIC_WEB_MAP.put("(#炸药)", R.drawable.emotion_zhayao);
/utils\EmotionUtil.java:105:        EMOTION_CLASSIC_WEB_MAP.put("(#真棒)", R.drawable.emotion_zhenbang);
/utils\EmotionUtil.java:106:        EMOTION_EMOJI_WEB_MAP.put("(#爱心)", R.drawable.image_emoticon34);
/utils\EmotionUtil.java:107:        EMOTION_EMOJI_WEB_MAP.put("(#心碎)", R.drawable.image_emoticon35);
/utils\EmotionUtil.java:108:        EMOTION_EMOJI_WEB_MAP.put("(#玫瑰)", R.drawable.image_emoticon36);
/utils\EmotionUtil.java:109:        EMOTION_EMOJI_WEB_MAP.put("(#礼物)", R.drawable.image_emoticon37);
/utils\EmotionUtil.java:110:        EMOTION_EMOJI_WEB_MAP.put("(#彩虹)", R.drawable.image_emoticon38);
/utils\EmotionUtil.java:111:        EMOTION_EMOJI_WEB_MAP.put("(#星星月亮)", R.drawable.image_emoticon39);
/utils\EmotionUtil.java:112:        EMOTION_EMOJI_WEB_MAP.put("(#太阳)", R.drawable.image_emoticon40);
/utils\EmotionUtil.java:113:        EMOTION_EMOJI_WEB_MAP.put("(#钱币)", R.drawable.image_emoticon41);
/utils\EmotionUtil.java:114:        EMOTION_EMOJI_WEB_MAP.put("(#灯泡)", R.drawable.image_emoticon42);
/utils\EmotionUtil.java:115:        EMOTION_EMOJI_WEB_MAP.put("(#茶杯)", R.drawable.image_emoticon43);
/utils\EmotionUtil.java:116:        EMOTION_EMOJI_WEB_MAP.put("(#蛋糕)", R.drawable.image_emoticon44);
/utils\EmotionUtil.java:117:        EMOTION_EMOJI_WEB_MAP.put("(#音乐)", R.drawable.image_emoticon45);
/utils\EmotionUtil.java:118:        EMOTION_EMOJI_WEB_MAP.put("(#haha)", R.drawable.image_emoticon46);
/utils\EmotionUtil.java:119:        EMOTION_EMOJI_WEB_MAP.put("(#胜利)", R.drawable.image_emoticon47);
/utils\EmotionUtil.java:120:        EMOTION_EMOJI_WEB_MAP.put("(#大拇指)", R.drawable.image_emoticon48);
/utils\EmotionUtil.java:121:        EMOTION_EMOJI_WEB_MAP.put("(#弱)", R.drawable.image_emoticon49);
/utils\EmotionUtil.java:122:        EMOTION_EMOJI_WEB_MAP.put("(#OK)", R.drawable.image_emoticon50);
/utils\EmotionUtil.java:123:        /*
/utils\EmotionUtil.java:124:        EMOTION_EMOJI_WEB_MAP.put("(#沙发)", R.drawable.image_emoticon77);
/utils\EmotionUtil.java:125:        EMOTION_EMOJI_WEB_MAP.put("(#手纸)", R.drawable.image_emoticon78);
/utils\EmotionUtil.java:126:        EMOTION_EMOJI_WEB_MAP.put("(#香蕉)", R.drawable.image_emoticon79);
/utils\EmotionUtil.java:127:        EMOTION_EMOJI_WEB_MAP.put("(#便便)", R.drawable.image_emoticon80);
/utils\EmotionUtil.java:128:        EMOTION_EMOJI_WEB_MAP.put("(#药丸)", R.drawable.image_emoticon81);
/utils\EmotionUtil.java:129:        EMOTION_EMOJI_WEB_MAP.put("(#红领巾)", R.drawable.image_emoticon82);
/utils\EmotionUtil.java:130:        EMOTION_EMOJI_WEB_MAP.put("(#蜡烛)", R.drawable.image_emoticon83);
/utils\EmotionUtil.java:131:        EMOTION_EMOJI_WEB_MAP.put("(#三道杠)", R.drawable.image_emoticon84);
/utils\EmotionUtil.java:132:        EMOTION_EMOJI_WEB_MAP.put("(#哎呦)", R.drawable.emotion_aiyou);
/utils\EmotionUtil.java:133:        EMOTION_EMOJI_WEB_MAP.put("(#惊恐)", R.drawable.emotion_jingkong);
/utils\EmotionUtil.java:134:        EMOTION_EMOJI_WEB_MAP.put("(#扔便便)", R.drawable.emotion_renbianbian);
/utils\EmotionUtil.java:135:        */
/utils\EmotionUtil.java:136:        EMOTION_ALL_WEB_MAP.putAll(EMOTION_CLASSIC_WEB_MAP);
/utils\EmotionUtil.java:137:        EMOTION_ALL_WEB_MAP.putAll(EMOTION_EMOJI_WEB_MAP);
/utils\EmotionUtil.java:138:        EMOTION_CLASSIC_MAP.put("#(滑稽)", R.drawable.emotion_huaji);
/utils\EmotionUtil.java:139:        EMOTION_CLASSIC_MAP.put("#(呵呵)", R.drawable.emotion_hehe);
/utils\EmotionUtil.java:140:        EMOTION_CLASSIC_MAP.put("#(哈哈)", R.drawable.emotion_haha);
/utils\EmotionUtil.java:141:        EMOTION_CLASSIC_MAP.put("#(啊)", R.drawable.emotion_a);
/utils\EmotionUtil.java:142:        EMOTION_CLASSIC_MAP.put("#(开心)", R.drawable.emotion_kaixin);
/utils\EmotionUtil.java:143:        EMOTION_CLASSIC_MAP.put("#(酷)", R.drawable.emotion_ku);
/utils\EmotionUtil.java:144:        EMOTION_CLASSIC_MAP.put("#(汗)", R.drawable.emotion_han);
/utils\EmotionUtil.java:145:        EMOTION_CLASSIC_MAP.put("#(怒)", R.drawable.emotion_nu);
/utils\EmotionUtil.java:146:        EMOTION_CLASSIC_MAP.put("#(鄙视)", R.drawable.emotion_bishi);
/utils\EmotionUtil.java:147:        EMOTION_CLASSIC_MAP.put("#(不高兴)", R.drawable.emotion_bugaoxin);
/utils\EmotionUtil.java:148:        EMOTION_CLASSIC_MAP.put("#(泪)", R.drawable.emotion_lei);
/utils\EmotionUtil.java:149:        EMOTION_CLASSIC_MAP.put("#(吐舌)", R.drawable.emotion_tushe);
/utils\EmotionUtil.java:150:        EMOTION_CLASSIC_MAP.put("#(黑线)", R.drawable.emotion_heixian);
/utils\EmotionUtil.java:151:        EMOTION_CLASSIC_MAP.put("#(暗中观察)", R.drawable.emotion_anzhongguancha);
/utils\EmotionUtil.java:152:        EMOTION_CLASSIC_MAP.put("#(吃瓜)", R.drawable.emotion_chigua);
/utils\EmotionUtil.java:153:        EMOTION_CLASSIC_MAP.put("#(乖)", R.drawable.emotion_guai);
/utils\EmotionUtil.java:154:        EMOTION_CLASSIC_MAP.put("#(嘿嘿嘿)", R.drawable.emotion_heiheihei);
/utils\EmotionUtil.java:155:        EMOTION_CLASSIC_MAP.put("#(喝酒)", R.drawable.emotion_hejiu);
/utils\EmotionUtil.java:156:        EMOTION_CLASSIC_MAP.put("#(黑头瞪眼)", R.drawable.emotion_htdy);
/utils\EmotionUtil.java:157:        EMOTION_CLASSIC_MAP.put("#(黑头高兴)", R.drawable.emotion_htgx);
/utils\EmotionUtil.java:158:        EMOTION_CLASSIC_MAP.put("#(呼~)", R.drawable.emotion_hu);
/utils\EmotionUtil.java:159:        EMOTION_CLASSIC_MAP.put("#(欢呼)", R.drawable.emotion_huanhu);
/utils\EmotionUtil.java:160:        EMOTION_CLASSIC_MAP.put("#(花心)", R.drawable.emotion_huaxin);
/utils\EmotionUtil.java:161:        EMOTION_CLASSIC_MAP.put("#(惊哭)", R.drawable.emotion_jingku);
/utils\EmotionUtil.java:162:        EMOTION_CLASSIC_MAP.put("#(惊讶)", R.drawable.emotion_jingya);
/utils\EmotionUtil.java:163:        EMOTION_CLASSIC_MAP.put("#(紧张)", R.drawable.emotion_jinzhang);
/utils\EmotionUtil.java:164:        EMOTION_CLASSIC_MAP.put("#(柯基暗中观察)", R.drawable.emotion_kjazgc);
/utils\EmotionUtil.java:165:        EMOTION_CLASSIC_MAP.put("#(狂汗)", R.drawable.emotion_kuanghan);
/utils\EmotionUtil.java:166:        EMOTION_CLASSIC_MAP.put("#(困成狗)", R.drawable.emotion_kunchenggou);
/utils\EmotionUtil.java:167:        EMOTION_CLASSIC_MAP.put("#(懒得理)", R.drawable.emotion_landeli);
/utils\EmotionUtil.java:168:        EMOTION_CLASSIC_MAP.put("#(冷)", R.drawable.emotion_len);
/utils\EmotionUtil.java:169:        EMOTION_CLASSIC_MAP.put("#(勉强)", R.drawable.emotion_mianqiang);
/utils\EmotionUtil.java:170:        EMOTION_CLASSIC_MAP.put("#(你懂的)", R.drawable.emotion_nidongde);
/utils\EmotionUtil.java:171:        EMOTION_CLASSIC_MAP.put("#(喷)", R.drawable.emotion_pen);
/utils\EmotionUtil.java:172:        EMOTION_CLASSIC_MAP.put("#(噗)", R.drawable.emotion_pu);
/utils\EmotionUtil.java:173:        EMOTION_CLASSIC_MAP.put("#(钱)", R.drawable.emotion_qian);
/utils\EmotionUtil.java:174:        EMOTION_CLASSIC_MAP.put("#(生气)", R.drawable.emotion_shengqi);
/utils\EmotionUtil.java:175:        EMOTION_CLASSIC_MAP.put("#(睡觉)", R.drawable.emotion_shuijiao);
/utils\EmotionUtil.java:176:        EMOTION_CLASSIC_MAP.put("#(酸爽)", R.drawable.emotion_suanshuang);
/utils\EmotionUtil.java:177:        EMOTION_CLASSIC_MAP.put("#(太开心)", R.drawable.emotion_taikaixin);
/utils\EmotionUtil.java:178:        EMOTION_CLASSIC_MAP.put("#(摊摊手)", R.drawable.emotion_tantanshou);
/utils\EmotionUtil.java:179:        EMOTION_CLASSIC_MAP.put("#(吐)", R.drawable.emotion_tu);
/utils\EmotionUtil.java:180:        EMOTION_CLASSIC_MAP.put("#(托腮)", R.drawable.emotion_tuosai);
/utils\EmotionUtil.java:181:        EMOTION_CLASSIC_MAP.put("#(突然兴奋)", R.drawable.emotion_turanxinfen);
/utils\EmotionUtil.java:182:        EMOTION_CLASSIC_MAP.put("#(挖鼻)", R.drawable.emotion_wabi);
/utils\EmotionUtil.java:183:        EMOTION_CLASSIC_MAP.put("#(委屈)", R.drawable.emotion_weiqu);
/utils\EmotionUtil.java:184:        EMOTION_CLASSIC_MAP.put("#(微微一笑)", R.drawable.emotion_weiweiyixiao);
/utils\EmotionUtil.java:185:        EMOTION_CLASSIC_MAP.put("#(what)", R.drawable.emotion_what);
/utils\EmotionUtil.java:186:        EMOTION_CLASSIC_MAP.put("#(捂嘴笑)", R.drawable.emotion_wuzuixiao);
/utils\EmotionUtil.java:187:        EMOTION_CLASSIC_MAP.put("#(小乖)", R.drawable.emotion_xiaoguai);
/utils\EmotionUtil.java:188:        EMOTION_CLASSIC_MAP.put("#(小红脸)", R.drawable.emotion_xiaohonglian);
/utils\EmotionUtil.java:189:        EMOTION_CLASSIC_MAP.put("#(笑尿)", R.drawable.emotion_xiaoniao);
/utils\EmotionUtil.java:190:        EMOTION_CLASSIC_MAP.put("#(笑眼)", R.drawable.emotion_xiaoyan);
/utils\EmotionUtil.java:191:        EMOTION_CLASSIC_MAP.put("#(犀利)", R.drawable.emotion_xili);
/utils\EmotionUtil.java:192:        EMOTION_CLASSIC_MAP.put("#(呀咩爹)", R.drawable.emotion_yamiedie);
/utils\EmotionUtil.java:193:        EMOTION_CLASSIC_MAP.put("#(咦)", R.drawable.emotion_yi);
/utils\EmotionUtil.java:194:        EMOTION_CLASSIC_MAP.put("#(阴险)", R.drawable.emotion_yinxian);
/utils\EmotionUtil.java:195:        EMOTION_CLASSIC_MAP.put("#(疑问)", R.drawable.emotion_yiwen);
/utils\EmotionUtil.java:196:        EMOTION_CLASSIC_MAP.put("#(炸药)", R.drawable.emotion_zhayao);
/utils\EmotionUtil.java:197:        EMOTION_CLASSIC_MAP.put("#(真棒)", R.drawable.emotion_zhenbang);
/utils\EmotionUtil.java:198:        EMOTION_EMOJI_MAP.put("#(爱心)", R.drawable.image_emoticon34);
/utils\EmotionUtil.java:199:        EMOTION_EMOJI_MAP.put("#(心碎)", R.drawable.image_emoticon35);
/utils\EmotionUtil.java:200:        EMOTION_EMOJI_MAP.put("#(玫瑰)", R.drawable.image_emoticon36);
/utils\EmotionUtil.java:201:        EMOTION_EMOJI_MAP.put("#(礼物)", R.drawable.image_emoticon37);
/utils\EmotionUtil.java:202:        EMOTION_EMOJI_MAP.put("#(彩虹)", R.drawable.image_emoticon38);
/utils\EmotionUtil.java:203:        EMOTION_EMOJI_MAP.put("#(星星月亮)", R.drawable.image_emoticon39);
/utils\EmotionUtil.java:204:        EMOTION_EMOJI_MAP.put("#(太阳)", R.drawable.image_emoticon40);
/utils\EmotionUtil.java:205:        EMOTION_EMOJI_MAP.put("#(钱币)", R.drawable.image_emoticon41);
/utils\EmotionUtil.java:206:        EMOTION_EMOJI_MAP.put("#(灯泡)", R.drawable.image_emoticon42);
/utils\EmotionUtil.java:207:        EMOTION_EMOJI_MAP.put("#(茶杯)", R.drawable.image_emoticon43);
/utils\EmotionUtil.java:208:        EMOTION_EMOJI_MAP.put("#(蛋糕)", R.drawable.image_emoticon44);
/utils\EmotionUtil.java:209:        EMOTION_EMOJI_MAP.put("#(音乐)", R.drawable.image_emoticon45);
/utils\EmotionUtil.java:210:        EMOTION_EMOJI_MAP.put("#(haha)", R.drawable.image_emoticon46);
/utils\EmotionUtil.java:211:        EMOTION_EMOJI_MAP.put("#(胜利)", R.drawable.image_emoticon47);
/utils\EmotionUtil.java:212:        EMOTION_EMOJI_MAP.put("#(大拇指)", R.drawable.image_emoticon48);
/utils\EmotionUtil.java:213:        EMOTION_EMOJI_MAP.put("#(弱)", R.drawable.image_emoticon49);
/utils\EmotionUtil.java:214:        EMOTION_EMOJI_MAP.put("#(OK)", R.drawable.image_emoticon50);
/utils\EmotionUtil.java:215:        EMOTION_EMOJI_MAP.put("#(沙发)", R.drawable.image_emoticon77);
/utils\EmotionUtil.java:216:        EMOTION_EMOJI_MAP.put("#(手纸)", R.drawable.image_emoticon78);
/utils\EmotionUtil.java:217:        EMOTION_EMOJI_MAP.put("#(香蕉)", R.drawable.image_emoticon79);
/utils\EmotionUtil.java:218:        EMOTION_EMOJI_MAP.put("#(便便)", R.drawable.image_emoticon80);
/utils\EmotionUtil.java:219:        EMOTION_EMOJI_MAP.put("#(药丸)", R.drawable.image_emoticon81);
/utils\EmotionUtil.java:220:        EMOTION_EMOJI_MAP.put("#(红领巾)", R.drawable.image_emoticon82);
/utils\EmotionUtil.java:221:        EMOTION_EMOJI_MAP.put("#(蜡烛)", R.drawable.image_emoticon83);
/utils\EmotionUtil.java:222:        EMOTION_EMOJI_MAP.put("#(三道杠)", R.drawable.image_emoticon84);
/utils\EmotionUtil.java:223:        EMOTION_EMOJI_MAP.put("#(哎呦)", R.drawable.emotion_aiyou);
/utils\EmotionUtil.java:224:        EMOTION_EMOJI_MAP.put("#(惊恐)", R.drawable.emotion_jingkong);
/utils\EmotionUtil.java:225:        EMOTION_EMOJI_MAP.put("#(扔便便)", R.drawable.emotion_renbianbian);
/utils\EmotionUtil.java:226:        EMOTION_ALL_MAP.putAll(EMOTION_CLASSIC_MAP);
/utils\EmotionUtil.java:227:        EMOTION_ALL_MAP.putAll(EMOTION_EMOJI_MAP);
/utils\EmotionUtil.java:228:    }
/utils\EmotionUtil.java:230:    @RegExp
/utils\EmotionUtil.java:231:    static String getRegex(int type) {
/utils\EmotionUtil.java:232:        switch (type) {
/utils\EmotionUtil.java:233:            case EMOTION_ALL_TYPE:
/utils\EmotionUtil.java:234:            case EMOTION_CLASSIC_TYPE:
/utils\EmotionUtil.java:235:            case EMOTION_EMOJI_TYPE:
/utils\EmotionUtil.java:236:                return REGEX;
/utils\EmotionUtil.java:237:            case EMOTION_ALL_WEB_TYPE:
/utils\EmotionUtil.java:238:            case EMOTION_CLASSIC_WEB_TYPE:
/utils\EmotionUtil.java:239:            case EMOTION_EMOJI_WEB_TYPE:
/utils\EmotionUtil.java:240:                return REGEX_WEB;
/utils\EmotionUtil.java:241:        }
/utils\EmotionUtil.java:242:        return REGEX;
/utils\EmotionUtil.java:243:    }
/utils\EmotionUtil.java:245:    @DrawableRes
/utils\EmotionUtil.java:246:    public static int getImgByName(int EmotionType, String imgName) {
/utils\EmotionUtil.java:247:        Integer integer = null;
/utils\EmotionUtil.java:248:        switch (EmotionType) {
/utils\EmotionUtil.java:249:            case EMOTION_CLASSIC_TYPE:
/utils\EmotionUtil.java:250:                integer = EMOTION_CLASSIC_MAP.get(imgName);
/utils\EmotionUtil.java:251:                break;
/utils\EmotionUtil.java:252:            case EMOTION_EMOJI_TYPE:
/utils\EmotionUtil.java:253:                integer = EMOTION_EMOJI_MAP.get(imgName);
/utils\EmotionUtil.java:254:                break;
/utils\EmotionUtil.java:255:            case EMOTION_ALL_TYPE:
/utils\EmotionUtil.java:256:                integer = EMOTION_ALL_MAP.get(imgName);
/utils\EmotionUtil.java:257:                break;
/utils\EmotionUtil.java:258:            case EMOTION_ALL_WEB_TYPE:
/utils\EmotionUtil.java:259:                integer = EMOTION_ALL_WEB_MAP.get(imgName);
/utils\EmotionUtil.java:260:                break;
/utils\EmotionUtil.java:261:            case EMOTION_CLASSIC_WEB_TYPE:
/utils\EmotionUtil.java:262:                integer = EMOTION_CLASSIC_WEB_MAP.get(imgName);
/utils\EmotionUtil.java:263:                break;
/utils\EmotionUtil.java:264:            case EMOTION_EMOJI_WEB_TYPE:
/utils\EmotionUtil.java:265:                integer = EMOTION_EMOJI_WEB_MAP.get(imgName);
/utils\EmotionUtil.java:266:                break;
/utils\EmotionUtil.java:267:            default:
/utils\EmotionUtil.java:268:                break;
/utils\EmotionUtil.java:269:        }
/utils\EmotionUtil.java:270:        return integer == null ? -1 : integer;
/utils\EmotionUtil.java:271:    }
/utils\EmotionUtil.java:273:    public static Map<String, Integer> getEmojiMap(int emotionType) {
/utils\EmotionUtil.java:274:        Map<String, Integer> emojiMap;
/utils\EmotionUtil.java:275:        switch (emotionType) {
/utils\EmotionUtil.java:276:            case EMOTION_ALL_TYPE:
/utils\EmotionUtil.java:277:                emojiMap = EMOTION_ALL_MAP;
/utils\EmotionUtil.java:278:                break;
/utils\EmotionUtil.java:279:            case EMOTION_CLASSIC_TYPE:
/utils\EmotionUtil.java:280:                emojiMap = EMOTION_CLASSIC_MAP;
/utils\EmotionUtil.java:281:                break;
/utils\EmotionUtil.java:282:            case EMOTION_EMOJI_TYPE:
/utils\EmotionUtil.java:283:                emojiMap = EMOTION_EMOJI_MAP;
/utils\EmotionUtil.java:284:                break;
/utils\EmotionUtil.java:285:            case EMOTION_ALL_WEB_TYPE:
/utils\EmotionUtil.java:286:                emojiMap = EMOTION_ALL_WEB_MAP;
/utils\EmotionUtil.java:287:                break;
/utils\EmotionUtil.java:288:            case EMOTION_CLASSIC_WEB_TYPE:
/utils\EmotionUtil.java:289:                emojiMap = EMOTION_CLASSIC_WEB_MAP;
/utils\EmotionUtil.java:290:                break;
/utils\EmotionUtil.java:291:            case EMOTION_EMOJI_WEB_TYPE:
/utils\EmotionUtil.java:292:                emojiMap = EMOTION_EMOJI_WEB_MAP;
/utils\EmotionUtil.java:293:                break;
/utils\EmotionUtil.java:294:            default:
/utils\EmotionUtil.java:295:                emojiMap = EMPTY_MAP;
/utils\EmotionUtil.java:296:                break;
/utils\EmotionUtil.java:297:        }
/utils\EmotionUtil.java:298:        return emojiMap;
/utils\EmotionUtil.java:299:    }
/utils\EmotionUtil.java:301:    /**
/utils\EmotionUtil.java:302:     * Created by zejian
/utils\EmotionUtil.java:303:     * Time  16/1/8 下午5:05
/utils\EmotionUtil.java:304:     * Email shinezejian@163.com
/utils\EmotionUtil.java:305:     * Description:点击表情的全局监听管理类
/utils\EmotionUtil.java:306:     */
/utils\EmotionUtil.java:307:    public static class GlobalOnItemClickManagerUtil {
/utils\EmotionUtil.java:309:        private static GlobalOnItemClickManagerUtil instance;
/utils\EmotionUtil.java:310:        private static Context mContext;
/utils\EmotionUtil.java:311:        private EditText mEditText;//输入框
/utils\EmotionUtil.java:313:        public static GlobalOnItemClickManagerUtil getInstance(Context context) {
/utils\EmotionUtil.java:314:            mContext = context;
/utils\EmotionUtil.java:315:            if (instance == null) {
/utils\EmotionUtil.java:316:                synchronized (GlobalOnItemClickManagerUtil.class) {
/utils\EmotionUtil.java:317:                    if (instance == null) {
/utils\EmotionUtil.java:318:                        instance = new GlobalOnItemClickManagerUtil();
/utils\EmotionUtil.java:319:                    }
/utils\EmotionUtil.java:320:                }
/utils\EmotionUtil.java:321:            }
/utils\EmotionUtil.java:322:            return instance;
/utils\EmotionUtil.java:323:        }
/utils\EmotionUtil.java:325:        public void attachToEditText(EditText editText) {
/utils\EmotionUtil.java:326:            mEditText = editText;
/utils\EmotionUtil.java:327:        }
/utils\EmotionUtil.java:329:        public AdapterView.OnItemClickListener getOnItemClickListener(final int emotion_map_type) {
/utils\EmotionUtil.java:330:            return (parent, view, position, id) -> {
/utils\EmotionUtil.java:331:                Object itemAdapter = parent.getAdapter();
/utils\EmotionUtil.java:332:                if (itemAdapter instanceof EmotionGridViewAdapter) {
/utils\EmotionUtil.java:333:                    // 点击的是表情
/utils\EmotionUtil.java:334:                    EmotionGridViewAdapter emotionGvAdapter = (EmotionGridViewAdapter) itemAdapter;
/utils\EmotionUtil.java:335:                    //if (position == emotionGvAdapter.getCount() - 1) {
/utils\EmotionUtil.java:336:                    // 如果点击了表情,则添加到输入框中
/utils\EmotionUtil.java:337:                    String emotionName = emotionGvAdapter.getItem(position);
/utils\EmotionUtil.java:339:                    // 获取当前光标位置,在指定位置上添加表情图片文本
/utils\EmotionUtil.java:340:                    int curPosition = mEditText.getSelectionStart();
/utils\EmotionUtil.java:341:                    Editable sb = mEditText.getText();
/utils\EmotionUtil.java:342:                    sb.insert(curPosition, emotionName);
/utils\EmotionUtil.java:344:                    // 特殊文字处理,将表情等转换一下
/utils\EmotionUtil.java:345:                    mEditText.setText(StringUtil.getEmotionContent(emotion_map_type,
/utils\EmotionUtil.java:346:                            mEditText, sb));
/utils\EmotionUtil.java:348:                    // 将光标设置到新增完表情的右侧
/utils\EmotionUtil.java:349:                    mEditText.setSelection(curPosition + emotionName.length());
/utils\EmotionUtil.java:350:                }
/utils\EmotionUtil.java:351:            };
/utils\EmotionUtil.java:352:        }
/utils\EmotionUtil.java:353:    }
/utils\EmotionUtil.java:354:}/utils\FastBlur.java:1:package com.huanchengfly.tieba.post.utils;
/utils\FastBlur.java:3:import android.graphics.Bitmap;
/utils\FastBlur.java:5:public class FastBlur {
/utils\FastBlur.java:6:    public static Bitmap blur(Bitmap sentBitmap, int radius, boolean canReuseInBitmap) {
/utils\FastBlur.java:7:        // Stack Blur v1.0 from
/utils\FastBlur.java:8:        // http://www.quasimondo.com/StackBlurForCanvas/StackBlurDemo.html
/utils\FastBlur.java:9:        //
/utils\FastBlur.java:10:        // Java Author: Mario Klingemann <mario at quasimondo.com>
/utils\FastBlur.java:11:        // http://incubator.quasimondo.com
/utils\FastBlur.java:12:        // created Feburary 29, 2004
/utils\FastBlur.java:13:        // Android port : Yahel Bouaziz <yahel at kayenko.com>
/utils\FastBlur.java:14:        // http://www.kayenko.com
/utils\FastBlur.java:15:        // ported april 5th, 2012
/utils\FastBlur.java:17:        // This is a compromise between Gaussian Blur and Box blur
/utils\FastBlur.java:18:        // It creates much better looking blurs than Box Blur, but is
/utils\FastBlur.java:19:        // 7x faster than my Gaussian Blur implementation.
/utils\FastBlur.java:20:        //
/utils\FastBlur.java:21:        // I called it Stack Blur because this describes best how this
/utils\FastBlur.java:22:        // filter works internally: it creates a kind of moving stack
/utils\FastBlur.java:23:        // of colors whilst scanning through the image. Thereby it
/utils\FastBlur.java:24:        // just has to add one new block of color to the right side
/utils\FastBlur.java:25:        // of the stack and remove the leftmost color. The remaining
/utils\FastBlur.java:26:        // colors on the topmost layer of the stack are either added on
/utils\FastBlur.java:27:        // or reduced by one, depending on if they are on the right or
/utils\FastBlur.java:28:        // on the left side of the stack.
/utils\FastBlur.java:29:        //
/utils\FastBlur.java:30:        // If you are using this algorithm in your code please add
/utils\FastBlur.java:31:        // the following line:
/utils\FastBlur.java:32:        //
/utils\FastBlur.java:33:        // Stack Blur Algorithm by Mario Klingemann <mario@quasimondo.com>
/utils\FastBlur.java:35:        Bitmap bitmap;
/utils\FastBlur.java:36:        if (canReuseInBitmap) {
/utils\FastBlur.java:37:            bitmap = sentBitmap;
/utils\FastBlur.java:38:        } else {
/utils\FastBlur.java:39:            bitmap = sentBitmap.copy(sentBitmap.getConfig(), true);
/utils\FastBlur.java:40:        }
/utils\FastBlur.java:42:        if (radius < 1) {
/utils\FastBlur.java:43:            return (null);
/utils\FastBlur.java:44:        }
/utils\FastBlur.java:46:        int w = bitmap.getWidth();
/utils\FastBlur.java:47:        int h = bitmap.getHeight();
/utils\FastBlur.java:49:        int[] pix = new int[w * h];
/utils\FastBlur.java:50:        bitmap.getPixels(pix, 0, w, 0, 0, w, h);
/utils\FastBlur.java:52:        int wm = w - 1;
/utils\FastBlur.java:53:        int hm = h - 1;
/utils\FastBlur.java:54:        int wh = w * h;
/utils\FastBlur.java:55:        int div = radius + radius + 1;
/utils\FastBlur.java:57:        int[] r = new int[wh];
/utils\FastBlur.java:58:        int[] g = new int[wh];
/utils\FastBlur.java:59:        int[] b = new int[wh];
/utils\FastBlur.java:60:        int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;
/utils\FastBlur.java:61:        int[] vmin = new int[Math.max(w, h)];
/utils\FastBlur.java:63:        int divsum = (div + 1) >> 1;
/utils\FastBlur.java:64:        divsum *= divsum;
/utils\FastBlur.java:65:        int[] dv = new int[256 * divsum];
/utils\FastBlur.java:66:        for (i = 0; i < 256 * divsum; i++) {
/utils\FastBlur.java:67:            dv[i] = (i / divsum);
/utils\FastBlur.java:68:        }
/utils\FastBlur.java:70:        yw = yi = 0;
/utils\FastBlur.java:72:        int[][] stack = new int[div][3];
/utils\FastBlur.java:73:        int stackpointer;
/utils\FastBlur.java:74:        int stackstart;
/utils\FastBlur.java:75:        int[] sir;
/utils\FastBlur.java:76:        int rbs;
/utils\FastBlur.java:77:        int r1 = radius + 1;
/utils\FastBlur.java:78:        int routsum, goutsum, boutsum;
/utils\FastBlur.java:79:        int rinsum, ginsum, binsum;
/utils\FastBlur.java:81:        for (y = 0; y < h; y++) {
/utils\FastBlur.java:82:            rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;
/utils\FastBlur.java:83:            for (i = -radius; i <= radius; i++) {
/utils\FastBlur.java:84:                p = pix[yi + Math.min(wm, Math.max(i, 0))];
/utils\FastBlur.java:85:                sir = stack[i + radius];
/utils\FastBlur.java:86:                sir[0] = (p & 0xff0000) >> 16;
/utils\FastBlur.java:87:                sir[1] = (p & 0x00ff00) >> 8;
/utils\FastBlur.java:88:                sir[2] = (p & 0x0000ff);
/utils\FastBlur.java:89:                rbs = r1 - Math.abs(i);
/utils\FastBlur.java:90:                rsum += sir[0] * rbs;
/utils\FastBlur.java:91:                gsum += sir[1] * rbs;
/utils\FastBlur.java:92:                bsum += sir[2] * rbs;
/utils\FastBlur.java:93:                if (i > 0) {
/utils\FastBlur.java:94:                    rinsum += sir[0];
/utils\FastBlur.java:95:                    ginsum += sir[1];
/utils\FastBlur.java:96:                    binsum += sir[2];
/utils\FastBlur.java:97:                } else {
/utils\FastBlur.java:98:                    routsum += sir[0];
/utils\FastBlur.java:99:                    goutsum += sir[1];
/utils\FastBlur.java:100:                    boutsum += sir[2];
/utils\FastBlur.java:101:                }
/utils\FastBlur.java:102:            }
/utils\FastBlur.java:103:            stackpointer = radius;
/utils\FastBlur.java:105:            for (x = 0; x < w; x++) {
/utils\FastBlur.java:107:                r[yi] = dv[rsum];
/utils\FastBlur.java:108:                g[yi] = dv[gsum];
/utils\FastBlur.java:109:                b[yi] = dv[bsum];
/utils\FastBlur.java:111:                rsum -= routsum;
/utils\FastBlur.java:112:                gsum -= goutsum;
/utils\FastBlur.java:113:                bsum -= boutsum;
/utils\FastBlur.java:115:                stackstart = stackpointer - radius + div;
/utils\FastBlur.java:116:                sir = stack[stackstart % div];
/utils\FastBlur.java:118:                routsum -= sir[0];
/utils\FastBlur.java:119:                goutsum -= sir[1];
/utils\FastBlur.java:120:                boutsum -= sir[2];
/utils\FastBlur.java:122:                if (y == 0) {
/utils\FastBlur.java:123:                    vmin[x] = Math.min(x + radius + 1, wm);
/utils\FastBlur.java:124:                }
/utils\FastBlur.java:125:                p = pix[yw + vmin[x]];
/utils\FastBlur.java:127:                sir[0] = (p & 0xff0000) >> 16;
/utils\FastBlur.java:128:                sir[1] = (p & 0x00ff00) >> 8;
/utils\FastBlur.java:129:                sir[2] = (p & 0x0000ff);
/utils\FastBlur.java:131:                rinsum += sir[0];
/utils\FastBlur.java:132:                ginsum += sir[1];
/utils\FastBlur.java:133:                binsum += sir[2];
/utils\FastBlur.java:135:                rsum += rinsum;
/utils\FastBlur.java:136:                gsum += ginsum;
/utils\FastBlur.java:137:                bsum += binsum;
/utils\FastBlur.java:139:                stackpointer = (stackpointer + 1) % div;
/utils\FastBlur.java:140:                sir = stack[(stackpointer) % div];
/utils\FastBlur.java:142:                routsum += sir[0];
/utils\FastBlur.java:143:                goutsum += sir[1];
/utils\FastBlur.java:144:                boutsum += sir[2];
/utils\FastBlur.java:146:                rinsum -= sir[0];
/utils\FastBlur.java:147:                ginsum -= sir[1];
/utils\FastBlur.java:148:                binsum -= sir[2];
/utils\FastBlur.java:150:                yi++;
/utils\FastBlur.java:151:            }
/utils\FastBlur.java:152:            yw += w;
/utils\FastBlur.java:153:        }
/utils\FastBlur.java:154:        for (x = 0; x < w; x++) {
/utils\FastBlur.java:155:            rinsum = ginsum = binsum = routsum = goutsum = boutsum = rsum = gsum = bsum = 0;
/utils\FastBlur.java:156:            yp = -radius * w;
/utils\FastBlur.java:157:            for (i = -radius; i <= radius; i++) {
/utils\FastBlur.java:158:                yi = Math.max(0, yp) + x;
/utils\FastBlur.java:160:                sir = stack[i + radius];
/utils\FastBlur.java:162:                sir[0] = r[yi];
/utils\FastBlur.java:163:                sir[1] = g[yi];
/utils\FastBlur.java:164:                sir[2] = b[yi];
/utils\FastBlur.java:166:                rbs = r1 - Math.abs(i);
/utils\FastBlur.java:168:                rsum += r[yi] * rbs;
/utils\FastBlur.java:169:                gsum += g[yi] * rbs;
/utils\FastBlur.java:170:                bsum += b[yi] * rbs;
/utils\FastBlur.java:172:                if (i > 0) {
/utils\FastBlur.java:173:                    rinsum += sir[0];
/utils\FastBlur.java:174:                    ginsum += sir[1];
/utils\FastBlur.java:175:                    binsum += sir[2];
/utils\FastBlur.java:176:                } else {
/utils\FastBlur.java:177:                    routsum += sir[0];
/utils\FastBlur.java:178:                    goutsum += sir[1];
/utils\FastBlur.java:179:                    boutsum += sir[2];
/utils\FastBlur.java:180:                }
/utils\FastBlur.java:182:                if (i < hm) {
/utils\FastBlur.java:183:                    yp += w;
/utils\FastBlur.java:184:                }
/utils\FastBlur.java:185:            }
/utils\FastBlur.java:186:            yi = x;
/utils\FastBlur.java:187:            stackpointer = radius;
/utils\FastBlur.java:188:            for (y = 0; y < h; y++) {
/utils\FastBlur.java:189:                // Preserve alpha channel: ( 0xff000000 & pix[yi] )
/utils\FastBlur.java:190:                pix[yi] = (0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8) | dv[bsum];
/utils\FastBlur.java:192:                rsum -= routsum;
/utils\FastBlur.java:193:                gsum -= goutsum;
/utils\FastBlur.java:194:                bsum -= boutsum;
/utils\FastBlur.java:196:                stackstart = stackpointer - radius + div;
/utils\FastBlur.java:197:                sir = stack[stackstart % div];
/utils\FastBlur.java:199:                routsum -= sir[0];
/utils\FastBlur.java:200:                goutsum -= sir[1];
/utils\FastBlur.java:201:                boutsum -= sir[2];
/utils\FastBlur.java:203:                if (x == 0) {
/utils\FastBlur.java:204:                    vmin[y] = Math.min(y + r1, hm) * w;
/utils\FastBlur.java:205:                }
/utils\FastBlur.java:206:                p = x + vmin[y];
/utils\FastBlur.java:208:                sir[0] = r[p];
/utils\FastBlur.java:209:                sir[1] = g[p];
/utils\FastBlur.java:210:                sir[2] = b[p];
/utils\FastBlur.java:212:                rinsum += sir[0];
/utils\FastBlur.java:213:                ginsum += sir[1];
/utils\FastBlur.java:214:                binsum += sir[2];
/utils\FastBlur.java:216:                rsum += rinsum;
/utils\FastBlur.java:217:                gsum += ginsum;
/utils\FastBlur.java:218:                bsum += binsum;
/utils\FastBlur.java:220:                stackpointer = (stackpointer + 1) % div;
/utils\FastBlur.java:221:                sir = stack[stackpointer];
/utils\FastBlur.java:223:                routsum += sir[0];
/utils\FastBlur.java:224:                goutsum += sir[1];
/utils\FastBlur.java:225:                boutsum += sir[2];
/utils\FastBlur.java:227:                rinsum -= sir[0];
/utils\FastBlur.java:228:                ginsum -= sir[1];
/utils\FastBlur.java:229:                binsum -= sir[2];
/utils\FastBlur.java:231:                yi += w;
/utils\FastBlur.java:232:            }
/utils\FastBlur.java:233:        }
/utils\FastBlur.java:235:        bitmap.setPixels(pix, 0, w, 0, 0, w, h);
/utils\FastBlur.java:237:        return (bitmap);
/utils\FastBlur.java:238:    }
/utils\FastBlur.java:239:}
/utils\FileUtil.java:1:package com.huanchengfly.tieba.post.utils;
/utils\FileUtil.java:3:import android.app.DownloadManager;
/utils\FileUtil.java:4:import android.content.ContentResolver;
/utils\FileUtil.java:5:import android.content.ContentUris;
/utils\FileUtil.java:6:import android.content.Context;
/utils\FileUtil.java:7:import android.database.Cursor;
/utils\FileUtil.java:8:import android.net.Uri;
/utils\FileUtil.java:9:import android.os.Build;
/utils\FileUtil.java:10:import android.os.Environment;
/utils\FileUtil.java:11:import android.provider.DocumentsContract;
/utils\FileUtil.java:12:import android.provider.MediaStore;
/utils\FileUtil.java:13:import android.webkit.URLUtil;
/utils\FileUtil.java:15:import com.huanchengfly.tieba.post.R;
/utils\FileUtil.java:16:import com.yanzhenjie.permission.runtime.Permission;
/utils\FileUtil.java:18:import java.io.File;
/utils\FileUtil.java:19:import java.io.FileInputStream;
/utils\FileUtil.java:20:import java.io.FileOutputStream;
/utils\FileUtil.java:21:import java.io.IOException;
/utils\FileUtil.java:22:import java.io.InputStream;
/utils\FileUtil.java:23:import java.nio.charset.StandardCharsets;
/utils\FileUtil.java:25:import static android.content.Context.DOWNLOAD_SERVICE;
/utils\FileUtil.java:27:public class FileUtil {
/utils\FileUtil.java:28:    public static final int FILE_TYPE_DOWNLOAD = 0;
/utils\FileUtil.java:29:    public static final int FILE_TYPE_VIDEO = 1;
/utils\FileUtil.java:30:    public static final int FILE_TYPE_AUDIO = 2;
/utils\FileUtil.java:32:    public static void deleteAllFiles(File root) {
/utils\FileUtil.java:33:        File[] files = root.listFiles();
/utils\FileUtil.java:34:        if (files != null)
/utils\FileUtil.java:35:            for (File f : files) {
/utils\FileUtil.java:36:                if (f.isDirectory()) { // 判断是否为文件夹
/utils\FileUtil.java:37:                    deleteAllFiles(f);
/utils\FileUtil.java:38:                    try {
/utils\FileUtil.java:39:                        f.delete();
/utils\FileUtil.java:40:                    } catch (Exception e) {
/utils\FileUtil.java:41:                    }
/utils\FileUtil.java:42:                } else {
/utils\FileUtil.java:43:                    if (f.exists()) { // 判断是否存在
/utils\FileUtil.java:44:                        deleteAllFiles(f);
/utils\FileUtil.java:45:                        try {
/utils\FileUtil.java:46:                            f.delete();
/utils\FileUtil.java:47:                        } catch (Exception e) {
/utils\FileUtil.java:48:                        }
/utils\FileUtil.java:49:                    }
/utils\FileUtil.java:50:                }
/utils\FileUtil.java:51:            }
/utils\FileUtil.java:52:    }
/utils\FileUtil.java:54:    /**
/utils\FileUtil.java:55:     *  
/utils\FileUtil.java:56:     *
/utils\FileUtil.java:57:     * @param context 上下文对象
/utils\FileUtil.java:58:     * @param dir      存储目录
/utils\FileUtil.java:59:     * @return
/utils\FileUtil.java:60:     */
/utils\FileUtil.java:61:    public static String getFilePath(Context context, String dir) {
/utils\FileUtil.java:62:        String directoryPath = "";
/utils\FileUtil.java:63:        //判断SD卡是否可用 
/utils\FileUtil.java:64:        if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {
/utils\FileUtil.java:65:            directoryPath = context.getExternalFilesDir(dir).getAbsolutePath();
/utils\FileUtil.java:66:        } else {
/utils\FileUtil.java:67:            directoryPath = context.getFilesDir() + File.separator + dir;
/utils\FileUtil.java:68:        }
/utils\FileUtil.java:69:        File file = new File(directoryPath);
/utils\FileUtil.java:70:        if (!file.exists()) {
/utils\FileUtil.java:71:            file.mkdirs();
/utils\FileUtil.java:72:        }
/utils\FileUtil.java:73:        return directoryPath;
/utils\FileUtil.java:74:    }
/utils\FileUtil.java:76:    public static String getFilePathByUri(Context context, Uri uri) {
/utils\FileUtil.java:77:        String path;
/utils\FileUtil.java:78:        if (ContentResolver.SCHEME_FILE.equals(uri.getScheme())) {
/utils\FileUtil.java:79:            path = uri.getPath();
/utils\FileUtil.java:80:            return path;
/utils\FileUtil.java:81:        }
/utils\FileUtil.java:82:        if (ContentResolver.SCHEME_CONTENT.equals(uri.getScheme())) {
/utils\FileUtil.java:83:            if (DocumentsContract.isDocumentUri(context, uri)) {
/utils\FileUtil.java:84:                if (isExternalStorageDocument(uri)) {
/utils\FileUtil.java:85:                    final String docId = DocumentsContract.getDocumentId(uri);
/utils\FileUtil.java:86:                    final String[] split = docId.split(":");
/utils\FileUtil.java:87:                    final String type = split[0];
/utils\FileUtil.java:88:                    if ("primary".equalsIgnoreCase(type)) {
/utils\FileUtil.java:89:                        path = Environment.getExternalStorageDirectory() + "/" + split[1];
/utils\FileUtil.java:90:                        return path;
/utils\FileUtil.java:91:                    }
/utils\FileUtil.java:92:                } else if (isDownloadsDocument(uri)) {
/utils\FileUtil.java:93:                    final String id = DocumentsContract.getDocumentId(uri);
/utils\FileUtil.java:94:                    final Uri contentUri = ContentUris.withAppendedId(Uri.parse("content://downloads/public_downloads"),
/utils\FileUtil.java:95:                            Long.valueOf(id));
/utils\FileUtil.java:96:                    path = getDataColumn(context, contentUri, null, null);
/utils\FileUtil.java:97:                    return path;
/utils\FileUtil.java:98:                } else if (isMediaDocument(uri)) {
/utils\FileUtil.java:99:                    final String docId = DocumentsContract.getDocumentId(uri);
/utils\FileUtil.java:100:                    final String[] split = docId.split(":");
/utils\FileUtil.java:101:                    final String type = split[0];
/utils\FileUtil.java:102:                    Uri contentUri = null;
/utils\FileUtil.java:103:                    if ("image".equals(type)) {
/utils\FileUtil.java:104:                        contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
/utils\FileUtil.java:105:                    } else if ("video".equals(type)) {
/utils\FileUtil.java:106:                        contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;
/utils\FileUtil.java:107:                    } else if ("audio".equals(type)) {
/utils\FileUtil.java:108:                        contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;
/utils\FileUtil.java:109:                    }
/utils\FileUtil.java:110:                    final String selection = "_id=?";
/utils\FileUtil.java:111:                    final String[] selectionArgs = new String[]{split[1]};
/utils\FileUtil.java:112:                    path = getDataColumn(context, contentUri, selection, selectionArgs);
/utils\FileUtil.java:113:                    return path;
/utils\FileUtil.java:114:                }
/utils\FileUtil.java:115:            }
/utils\FileUtil.java:116:        }
/utils\FileUtil.java:117:        return null;
/utils\FileUtil.java:118:    }
/utils\FileUtil.java:120:    private static String getDataColumn(Context context, Uri uri, String selection, String[] selectionArgs) {
/utils\FileUtil.java:121:        final String column = "_data";
/utils\FileUtil.java:122:        final String[] projection = {column};
/utils\FileUtil.java:123:        try (Cursor cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs, null)) {
/utils\FileUtil.java:124:            if (cursor != null && cursor.moveToFirst()) {
/utils\FileUtil.java:125:                final int column_index = cursor.getColumnIndexOrThrow(column);
/utils\FileUtil.java:126:                return cursor.getString(column_index);
/utils\FileUtil.java:127:            }
/utils\FileUtil.java:128:        }
/utils\FileUtil.java:129:        return null;
/utils\FileUtil.java:130:    }
/utils\FileUtil.java:132:    private static boolean isExternalStorageDocument(Uri uri) {
/utils\FileUtil.java:133:        return "com.android.externalstorage.documents".equals(uri.getAuthority());
/utils\FileUtil.java:134:    }
/utils\FileUtil.java:136:    private static boolean isDownloadsDocument(Uri uri) {
/utils\FileUtil.java:137:        return "com.android.providers.downloads.documents".equals(uri.getAuthority());
/utils\FileUtil.java:138:    }
/utils\FileUtil.java:140:    private static boolean isMediaDocument(Uri uri) {
/utils\FileUtil.java:141:        return "com.android.providers.media.documents".equals(uri.getAuthority());
/utils\FileUtil.java:142:    }
/utils\FileUtil.java:144:    public static String getRealPathFromUri(Context context, Uri contentUri) {
/utils\FileUtil.java:145:        String[] proj = {MediaStore.Images.Media.DATA};
/utils\FileUtil.java:146:        try (Cursor cursor = context.getContentResolver().query(contentUri, proj, null, null, null)) {
/utils\FileUtil.java:147:            if (cursor != null) {
/utils\FileUtil.java:148:                int column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
/utils\FileUtil.java:149:                cursor.moveToFirst();
/utils\FileUtil.java:150:                return cursor.getString(column_index);
/utils\FileUtil.java:151:            }
/utils\FileUtil.java:152:        }
/utils\FileUtil.java:153:        return "";
/utils\FileUtil.java:154:    }
/utils\FileUtil.java:156:    public static void downloadBySystem(Context context, int fileType, String url) {
/utils\FileUtil.java:157:        String fileName = URLUtil.guessFileName(url, null, null);
/utils\FileUtil.java:158:        downloadBySystem(context, fileType, url, fileName);
/utils\FileUtil.java:159:    }
/utils\FileUtil.java:161:    private static void downloadBySystemWithPermission(Context context, int fileType, String url, String fileName) {
/utils\FileUtil.java:162:        // 指定下载地址
/utils\FileUtil.java:163:        DownloadManager.Request request = new DownloadManager.Request(Uri.parse(url));
/utils\FileUtil.java:164:        // 允许媒体扫描，根据下载的文件类型被加入相册、音乐等媒体库
/utils\FileUtil.java:165:        request.allowScanningByMediaScanner();
/utils\FileUtil.java:166:        // 设置通知的显示类型，下载进行时和完成后显示通知
/utils\FileUtil.java:167:        request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);
/utils\FileUtil.java:168:        // 允许该记录在下载管理界面可见
/utils\FileUtil.java:169:        request.setVisibleInDownloadsUi(true);
/utils\FileUtil.java:170:        // 允许漫游时下载
/utils\FileUtil.java:171:        request.setAllowedOverRoaming(false);
/utils\FileUtil.java:172:        // 设置下载文件保存的路径和文件名
/utils\FileUtil.java:173:        String directory;
/utils\FileUtil.java:174:        switch (fileType) {
/utils\FileUtil.java:175:            case FILE_TYPE_VIDEO:
/utils\FileUtil.java:176:                directory = Environment.DIRECTORY_MOVIES;
/utils\FileUtil.java:177:                break;
/utils\FileUtil.java:178:            case FILE_TYPE_AUDIO:
/utils\FileUtil.java:179:                directory = Environment.DIRECTORY_PODCASTS;
/utils\FileUtil.java:180:                break;
/utils\FileUtil.java:181:            case FILE_TYPE_DOWNLOAD:
/utils\FileUtil.java:182:            default:
/utils\FileUtil.java:183:                directory = Environment.DIRECTORY_DOWNLOADS;
/utils\FileUtil.java:184:                break;
/utils\FileUtil.java:185:        }
/utils\FileUtil.java:186:        request.setDestinationInExternalPublicDir(directory, "Tieba Lite/" + fileName);
/utils\FileUtil.java:187:        final DownloadManager downloadManager = (DownloadManager) context.getSystemService(DOWNLOAD_SERVICE);
/utils\FileUtil.java:188:        // 添加一个下载任务
/utils\FileUtil.java:189:        if (downloadManager != null) {
/utils\FileUtil.java:190:            downloadManager.enqueue(request);
/utils\FileUtil.java:191:        }
/utils\FileUtil.java:192:    }
/utils\FileUtil.java:194:    public static void downloadBySystem(Context context, int fileType, String url, String fileName) {
/utils\FileUtil.java:195:        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
/utils\FileUtil.java:196:            downloadBySystemWithPermission(context, fileType, url, fileName);
/utils\FileUtil.java:197:            return;
/utils\FileUtil.java:198:        }
/utils\FileUtil.java:199:        PermissionUtil.askPermission(context,
/utils\FileUtil.java:200:                data -> downloadBySystemWithPermission(context, fileType, url, fileName),
/utils\FileUtil.java:201:                R.string.toast_without_permission_download,
/utils\FileUtil.java:202:                new PermissionUtil.Permission(Permission.WRITE_EXTERNAL_STORAGE, context.getString(R.string.tip_permission_storage_download)));
/utils\FileUtil.java:203:    }
/utils\FileUtil.java:205:    public static String readFile(File file) {
/utils\FileUtil.java:206:        if (file == null || !file.exists() || !file.canRead()) {
/utils\FileUtil.java:207:            return null;
/utils\FileUtil.java:208:        }
/utils\FileUtil.java:209:        try {
/utils\FileUtil.java:210:            InputStream is = new FileInputStream(file);
/utils\FileUtil.java:211:            int length = is.available();
/utils\FileUtil.java:212:            byte[] buffer = new byte[length];
/utils\FileUtil.java:213:            is.read(buffer);
/utils\FileUtil.java:214:            return new String(buffer, StandardCharsets.UTF_8);
/utils\FileUtil.java:215:        } catch (IOException e) {
/utils\FileUtil.java:216:            e.printStackTrace();
/utils\FileUtil.java:217:        }
/utils\FileUtil.java:218:        return null;
/utils\FileUtil.java:219:    }
/utils\FileUtil.java:221:    public static boolean writeFile(File file, String content, boolean append) {
/utils\FileUtil.java:222:        if (file == null || !file.exists() || !file.canWrite()) {
/utils\FileUtil.java:223:            return false;
/utils\FileUtil.java:224:        }
/utils\FileUtil.java:225:        try {
/utils\FileUtil.java:226:            FileOutputStream fos = new FileOutputStream(file);
/utils\FileUtil.java:227:            fos.write(content.getBytes());
/utils\FileUtil.java:228:            fos.flush();
/utils\FileUtil.java:229:            fos.close();
/utils\FileUtil.java:230:            return true;
/utils\FileUtil.java:231:        } catch (IOException e) {
/utils\FileUtil.java:232:            e.printStackTrace();
/utils\FileUtil.java:233:        }
/utils\FileUtil.java:234:        return false;
/utils\FileUtil.java:235:    }
/utils\FileUtil.java:236:}/utils\GlideCacheUtil.java:1:package com.huanchengfly.tieba.post.utils;
/utils\GlideCacheUtil.java:3:import android.content.Context;
/utils\GlideCacheUtil.java:4:import android.os.Looper;
/utils\GlideCacheUtil.java:5:import android.text.TextUtils;
/utils\GlideCacheUtil.java:7:import com.bumptech.glide.Glide;
/utils\GlideCacheUtil.java:8:import com.bumptech.glide.load.engine.cache.ExternalCacheDiskCacheFactory;
/utils\GlideCacheUtil.java:9:import com.bumptech.glide.load.engine.cache.InternalCacheDiskCacheFactory;
/utils\GlideCacheUtil.java:11:import java.io.File;
/utils\GlideCacheUtil.java:12:import java.math.BigDecimal;
/utils\GlideCacheUtil.java:14:/**
/utils\GlideCacheUtil.java:15: * Glide缓存工具类
/utils\GlideCacheUtil.java:16: * Created by Trojx on 2016/10/10 0010.
/utils\GlideCacheUtil.java:17: */
/utils\GlideCacheUtil.java:19:public class GlideCacheUtil {
/utils\GlideCacheUtil.java:20:    private static GlideCacheUtil inst;
/utils\GlideCacheUtil.java:22:    public static GlideCacheUtil getInstance() {
/utils\GlideCacheUtil.java:23:        if (inst == null) {
/utils\GlideCacheUtil.java:24:            inst = new GlideCacheUtil();
/utils\GlideCacheUtil.java:25:        }
/utils\GlideCacheUtil.java:26:        return inst;
/utils\GlideCacheUtil.java:27:    }
/utils\GlideCacheUtil.java:29:    /**
/utils\GlideCacheUtil.java:30:     * 格式化单位
/utils\GlideCacheUtil.java:31:     *
/utils\GlideCacheUtil.java:32:     * @param size size
/utils\GlideCacheUtil.java:33:     * @return size
/utils\GlideCacheUtil.java:34:     */
/utils\GlideCacheUtil.java:35:    private static String getFormatSize(double size) {
/utils\GlideCacheUtil.java:37:        double kiloByte = size / 1024;
/utils\GlideCacheUtil.java:38:        if (kiloByte < 1) {
/utils\GlideCacheUtil.java:39:            return size + "B";
/utils\GlideCacheUtil.java:40:        }
/utils\GlideCacheUtil.java:42:        double megaByte = kiloByte / 1024;
/utils\GlideCacheUtil.java:43:        if (megaByte < 1) {
/utils\GlideCacheUtil.java:44:            BigDecimal result1 = new BigDecimal(Double.toString(kiloByte));
/utils\GlideCacheUtil.java:45:            return result1.setScale(2, BigDecimal.ROUND_HALF_UP).toPlainString() + "KB";
/utils\GlideCacheUtil.java:46:        }
/utils\GlideCacheUtil.java:48:        double gigaByte = megaByte / 1024;
/utils\GlideCacheUtil.java:49:        if (gigaByte < 1) {
/utils\GlideCacheUtil.java:50:            BigDecimal result2 = new BigDecimal(Double.toString(megaByte));
/utils\GlideCacheUtil.java:51:            return result2.setScale(2, BigDecimal.ROUND_HALF_UP).toPlainString() + "MB";
/utils\GlideCacheUtil.java:52:        }
/utils\GlideCacheUtil.java:54:        double teraBytes = gigaByte / 1024;
/utils\GlideCacheUtil.java:55:        if (teraBytes < 1) {
/utils\GlideCacheUtil.java:56:            BigDecimal result3 = new BigDecimal(Double.toString(gigaByte));
/utils\GlideCacheUtil.java:57:            return result3.setScale(2, BigDecimal.ROUND_HALF_UP).toPlainString() + "GB";
/utils\GlideCacheUtil.java:58:        }
/utils\GlideCacheUtil.java:59:        BigDecimal result4 = new BigDecimal(teraBytes);
/utils\GlideCacheUtil.java:61:        return result4.setScale(2, BigDecimal.ROUND_HALF_UP).toPlainString() + "TB";
/utils\GlideCacheUtil.java:62:    }
/utils\GlideCacheUtil.java:64:    /**
/utils\GlideCacheUtil.java:65:     * 清除图片磁盘缓存
/utils\GlideCacheUtil.java:66:     */
/utils\GlideCacheUtil.java:67:    public void clearImageDiskCache(Context context) {
/utils\GlideCacheUtil.java:68:        try {
/utils\GlideCacheUtil.java:69:            if (Looper.myLooper() == Looper.getMainLooper()) {
/utils\GlideCacheUtil.java:70:                new Thread(() -> Glide.get(context).clearDiskCache()).start();
/utils\GlideCacheUtil.java:71:            } else {
/utils\GlideCacheUtil.java:72:                Glide.get(context).clearDiskCache();
/utils\GlideCacheUtil.java:73:            }
/utils\GlideCacheUtil.java:74:        } catch (Exception e) {
/utils\GlideCacheUtil.java:75:            e.printStackTrace();
/utils\GlideCacheUtil.java:76:        }
/utils\GlideCacheUtil.java:77:    }
/utils\GlideCacheUtil.java:79:    /**
/utils\GlideCacheUtil.java:80:     * 清除图片内存缓存
/utils\GlideCacheUtil.java:81:     */
/utils\GlideCacheUtil.java:82:    public void clearImageMemoryCache(Context context) {
/utils\GlideCacheUtil.java:83:        try {
/utils\GlideCacheUtil.java:84:            if (Looper.myLooper() == Looper.getMainLooper()) { //只能在主线程执行
/utils\GlideCacheUtil.java:85:                Glide.get(context).clearMemory();
/utils\GlideCacheUtil.java:86:            }
/utils\GlideCacheUtil.java:87:        } catch (Exception e) {
/utils\GlideCacheUtil.java:88:            e.printStackTrace();
/utils\GlideCacheUtil.java:89:        }
/utils\GlideCacheUtil.java:90:    }
/utils\GlideCacheUtil.java:92:    /**
/utils\GlideCacheUtil.java:93:     * 清除图片所有缓存
/utils\GlideCacheUtil.java:94:     */
/utils\GlideCacheUtil.java:95:    public void clearImageAllCache(Context context) {
/utils\GlideCacheUtil.java:96:        clearImageDiskCache(context);
/utils\GlideCacheUtil.java:97:        clearImageMemoryCache(context);
/utils\GlideCacheUtil.java:98:        String ImageExternalCatchDir = context.getExternalCacheDir() + ExternalCacheDiskCacheFactory.DEFAULT_DISK_CACHE_DIR;
/utils\GlideCacheUtil.java:99:        deleteFolderFile(ImageExternalCatchDir, true);
/utils\GlideCacheUtil.java:100:    }
/utils\GlideCacheUtil.java:102:    /**
/utils\GlideCacheUtil.java:103:     * 获取Glide造成的缓存大小
/utils\GlideCacheUtil.java:104:     *
/utils\GlideCacheUtil.java:105:     * @return CacheSize
/utils\GlideCacheUtil.java:106:     */
/utils\GlideCacheUtil.java:107:    public String getCacheSize(Context context) {
/utils\GlideCacheUtil.java:108:        try {
/utils\GlideCacheUtil.java:109:            return getFormatSize(getFolderSize(new File(context.getCacheDir() + "/" + InternalCacheDiskCacheFactory.DEFAULT_DISK_CACHE_DIR)));
/utils\GlideCacheUtil.java:110:        } catch (Exception e) {
/utils\GlideCacheUtil.java:111:            e.printStackTrace();
/utils\GlideCacheUtil.java:112:        }
/utils\GlideCacheUtil.java:113:        return "";
/utils\GlideCacheUtil.java:114:    }
/utils\GlideCacheUtil.java:116:    /**
/utils\GlideCacheUtil.java:117:     * 获取指定文件夹内所有文件大小的和
/utils\GlideCacheUtil.java:118:     *
/utils\GlideCacheUtil.java:119:     * @param file file
/utils\GlideCacheUtil.java:120:     * @return size
/utils\GlideCacheUtil.java:121:     * @throws Exception
/utils\GlideCacheUtil.java:122:     */
/utils\GlideCacheUtil.java:123:    private long getFolderSize(File file) throws Exception {
/utils\GlideCacheUtil.java:124:        long size = 0;
/utils\GlideCacheUtil.java:125:        try {
/utils\GlideCacheUtil.java:126:            File[] fileList = file.listFiles();
/utils\GlideCacheUtil.java:127:            for (File aFileList : fileList) {
/utils\GlideCacheUtil.java:128:                if (aFileList.isDirectory()) {
/utils\GlideCacheUtil.java:129:                    size = size + getFolderSize(aFileList);
/utils\GlideCacheUtil.java:130:                } else {
/utils\GlideCacheUtil.java:131:                    size = size + aFileList.length();
/utils\GlideCacheUtil.java:132:                }
/utils\GlideCacheUtil.java:133:            }
/utils\GlideCacheUtil.java:134:        } catch (Exception e) {
/utils\GlideCacheUtil.java:135:            e.printStackTrace();
/utils\GlideCacheUtil.java:136:        }
/utils\GlideCacheUtil.java:137:        return size;
/utils\GlideCacheUtil.java:138:    }
/utils\GlideCacheUtil.java:140:    /**
/utils\GlideCacheUtil.java:141:     * 删除指定目录下的文件，这里用于缓存的删除
/utils\GlideCacheUtil.java:142:     *
/utils\GlideCacheUtil.java:143:     * @param filePath       filePath
/utils\GlideCacheUtil.java:144:     * @param deleteThisPath deleteThisPath
/utils\GlideCacheUtil.java:145:     */
/utils\GlideCacheUtil.java:146:    private void deleteFolderFile(String filePath, boolean deleteThisPath) {
/utils\GlideCacheUtil.java:147:        if (!TextUtils.isEmpty(filePath)) {
/utils\GlideCacheUtil.java:148:            try {
/utils\GlideCacheUtil.java:149:                File file = new File(filePath);
/utils\GlideCacheUtil.java:150:                if (file.isDirectory()) {
/utils\GlideCacheUtil.java:151:                    File[] files = file.listFiles();
/utils\GlideCacheUtil.java:152:                    for (File file1 : files) {
/utils\GlideCacheUtil.java:153:                        deleteFolderFile(file1.getAbsolutePath(), true);
/utils\GlideCacheUtil.java:154:                    }
/utils\GlideCacheUtil.java:155:                }
/utils\GlideCacheUtil.java:156:                if (deleteThisPath) {
/utils\GlideCacheUtil.java:157:                    if (!file.isDirectory()) {
/utils\GlideCacheUtil.java:158:                        file.delete();
/utils\GlideCacheUtil.java:159:                    } else {
/utils\GlideCacheUtil.java:160:                        if (file.listFiles().length == 0) {
/utils\GlideCacheUtil.java:161:                            file.delete();
/utils\GlideCacheUtil.java:162:                        }
/utils\GlideCacheUtil.java:163:                    }
/utils\GlideCacheUtil.java:164:                }
/utils\GlideCacheUtil.java:165:            } catch (Exception e) {
/utils\GlideCacheUtil.java:166:                e.printStackTrace();
/utils\GlideCacheUtil.java:167:            }
/utils\GlideCacheUtil.java:168:        }
/utils\GlideCacheUtil.java:169:    }
/utils\GlideCacheUtil.java:170:}/utils\GsonUtil.java:1:package com.huanchengfly.tieba.post.utils;
/utils\GsonUtil.java:3:import com.google.gson.Gson;
/utils\GsonUtil.java:5:public class GsonUtil {
/utils\GsonUtil.java:6:    private static Gson gson;
/utils\GsonUtil.java:8:    public static synchronized Gson getGson() {
/utils\GsonUtil.java:9:        if (gson == null) {
/utils\GsonUtil.java:10:            synchronized (GsonUtil.class) {
/utils\GsonUtil.java:11:                if (gson == null) {
/utils\GsonUtil.java:12:                    gson = new Gson();
/utils\GsonUtil.java:13:                }
/utils\GsonUtil.java:14:            }
/utils\GsonUtil.java:15:        }
/utils\GsonUtil.java:16:        return gson;
/utils\GsonUtil.java:17:    }
/utils\GsonUtil.java:18:}
/utils\HandleBackUtil.java:1:package com.huanchengfly.tieba.post.utils;
/utils\HandleBackUtil.java:3:import androidx.fragment.app.Fragment;
/utils\HandleBackUtil.java:4:import androidx.fragment.app.FragmentActivity;
/utils\HandleBackUtil.java:5:import androidx.fragment.app.FragmentManager;
/utils\HandleBackUtil.java:7:import com.huanchengfly.tieba.post.interfaces.BackHandledInterface;
/utils\HandleBackUtil.java:9:import java.util.List;
/utils\HandleBackUtil.java:11:public class HandleBackUtil {
/utils\HandleBackUtil.java:13:    /**
/utils\HandleBackUtil.java:14:     * 将back事件分发给 FragmentManager 中管理的子Fragment，如果该 FragmentManager 中的所有Fragment都
/utils\HandleBackUtil.java:15:     * 没有处理back事件，则尝试 FragmentManager.popBackStack()
/utils\HandleBackUtil.java:16:     *
/utils\HandleBackUtil.java:17:     * @return 如果处理了back键则返回 <b>true</b>
/utils\HandleBackUtil.java:18:     * @see #handleBackPress(Fragment)
/utils\HandleBackUtil.java:19:     * @see #handleBackPress(FragmentActivity)
/utils\HandleBackUtil.java:20:     */
/utils\HandleBackUtil.java:21:    public static boolean handleBackPress(FragmentManager fragmentManager) {
/utils\HandleBackUtil.java:22:        List<Fragment> fragments = fragmentManager.getFragments();
/utils\HandleBackUtil.java:24:        if (fragments == null) return false;
/utils\HandleBackUtil.java:26:        for (int i = fragments.size() - 1; i >= 0; i--) {
/utils\HandleBackUtil.java:27:            Fragment child = fragments.get(i);
/utils\HandleBackUtil.java:29:            if (isFragmentBackHandled(child)) {
/utils\HandleBackUtil.java:30:                return true;
/utils\HandleBackUtil.java:31:            }
/utils\HandleBackUtil.java:32:        }
/utils\HandleBackUtil.java:34:        if (fragmentManager.getBackStackEntryCount() > 0) {
/utils\HandleBackUtil.java:35:            fragmentManager.popBackStack();
/utils\HandleBackUtil.java:36:            return true;
/utils\HandleBackUtil.java:37:        }
/utils\HandleBackUtil.java:38:        return false;
/utils\HandleBackUtil.java:39:    }
/utils\HandleBackUtil.java:41:    public static boolean handleBackPress(Fragment fragment) {
/utils\HandleBackUtil.java:42:        return handleBackPress(fragment.getChildFragmentManager());
/utils\HandleBackUtil.java:43:    }
/utils\HandleBackUtil.java:45:    public static boolean handleBackPress(FragmentActivity fragmentActivity) {
/utils\HandleBackUtil.java:46:        return handleBackPress(fragmentActivity.getSupportFragmentManager());
/utils\HandleBackUtil.java:47:    }
/utils\HandleBackUtil.java:49:    /**
/utils\HandleBackUtil.java:50:     * 判断Fragment是否处理了Back键
/utils\HandleBackUtil.java:51:     *
/utils\HandleBackUtil.java:52:     * @return 如果处理了back键则返回 <b>true</b>
/utils\HandleBackUtil.java:53:     */
/utils\HandleBackUtil.java:54:    public static boolean isFragmentBackHandled(Fragment fragment) {
/utils\HandleBackUtil.java:55:        return fragment != null
/utils\HandleBackUtil.java:56:                && fragment.isVisible()
/utils\HandleBackUtil.java:57:                && fragment.getUserVisibleHint() //for ViewPager
/utils\HandleBackUtil.java:58:                && fragment instanceof BackHandledInterface
/utils\HandleBackUtil.java:59:                && ((BackHandledInterface) fragment).onBackPressed();
/utils\HandleBackUtil.java:60:    }
/utils\HandleBackUtil.java:62:}
/utils\HistoryHelper.java:1:package com.huanchengfly.tieba.post.utils;
/utils\HistoryHelper.java:3:import android.content.Context;
/utils\HistoryHelper.java:5:import com.huanchengfly.tieba.post.models.database.History;
/utils\HistoryHelper.java:7:import org.litepal.LitePal;
/utils\HistoryHelper.java:9:import java.util.List;
/utils\HistoryHelper.java:11:public class HistoryHelper {
/utils\HistoryHelper.java:12:    public static final int TYPE_URL = 0;
/utils\HistoryHelper.java:13:    public static final int TYPE_BA = 1;
/utils\HistoryHelper.java:14:    public static final int TYPE_THREAD = 2;
/utils\HistoryHelper.java:16:    private Context mContext;
/utils\HistoryHelper.java:18:    public HistoryHelper(Context context) {
/utils\HistoryHelper.java:19:        this.mContext = context;
/utils\HistoryHelper.java:20:    }
/utils\HistoryHelper.java:22:    public void delete() {
/utils\HistoryHelper.java:23:        LitePal.deleteAll(History.class);
/utils\HistoryHelper.java:24:    }
/utils\HistoryHelper.java:26:    public void writeHistory(String data, String title, int type) {
/utils\HistoryHelper.java:27:        add(data, "", title, type);
/utils\HistoryHelper.java:28:    }
/utils\HistoryHelper.java:30:    public void writeHistory(String data, String extras, String title, int type) {
/utils\HistoryHelper.java:31:        add(data, extras, title, type);
/utils\HistoryHelper.java:32:    }
/utils\HistoryHelper.java:34:    public void writeHistory(History history) {
/utils\HistoryHelper.java:35:        add(history);
/utils\HistoryHelper.java:36:    }
/utils\HistoryHelper.java:38:    public List<History> getAll() {
/utils\HistoryHelper.java:39:        return LitePal.order("timestamp desc,count desc").limit(100).find(History.class);
/utils\HistoryHelper.java:40:    }
/utils\HistoryHelper.java:42:    private void add(String data, String extras, String title, int type) {
/utils\HistoryHelper.java:43:        History historyBean = LitePal.where("data = ?", data).findFirst(History.class);
/utils\HistoryHelper.java:44:        if (historyBean != null) {
/utils\HistoryHelper.java:45:            historyBean.setTimestamp(System.currentTimeMillis())
/utils\HistoryHelper.java:46:                    .setTitle(title)
/utils\HistoryHelper.java:47:                    .setExtras(extras)
/utils\HistoryHelper.java:48:                    .setCount(historyBean.getCount() + 1)
/utils\HistoryHelper.java:49:                    .update(historyBean.getId());
/utils\HistoryHelper.java:50:            return;
/utils\HistoryHelper.java:51:        }
/utils\HistoryHelper.java:52:        add(new History()
/utils\HistoryHelper.java:53:                .setData(data)
/utils\HistoryHelper.java:54:                .setExtras(extras)
/utils\HistoryHelper.java:55:                .setTitle(title)
/utils\HistoryHelper.java:56:                .setType(type));
/utils\HistoryHelper.java:57:    }
/utils\HistoryHelper.java:59:    private boolean update(History history) {
/utils\HistoryHelper.java:60:        History historyBean = LitePal.where("data = ?", history.getData()).findFirst(History.class);
/utils\HistoryHelper.java:61:        if (historyBean != null) {
/utils\HistoryHelper.java:62:            historyBean.setTimestamp(System.currentTimeMillis())
/utils\HistoryHelper.java:63:                    .setTitle(history.getTitle())
/utils\HistoryHelper.java:64:                    .setExtras(history.getExtras())
/utils\HistoryHelper.java:65:                    .setAvatar(history.getAvatar())
/utils\HistoryHelper.java:66:                    .setUsername(history.getUsername())
/utils\HistoryHelper.java:67:                    .setCount(historyBean.getCount() + 1)
/utils\HistoryHelper.java:68:                    .update(historyBean.getId());
/utils\HistoryHelper.java:69:            return true;
/utils\HistoryHelper.java:70:        }
/utils\HistoryHelper.java:71:        return false;
/utils\HistoryHelper.java:72:    }
/utils\HistoryHelper.java:74:    private void add(History history) {
/utils\HistoryHelper.java:75:        if (update(history)) {
/utils\HistoryHelper.java:76:            return;
/utils\HistoryHelper.java:77:        }
/utils\HistoryHelper.java:78:        history.setCount(1)
/utils\HistoryHelper.java:79:                .setTimestamp(System.currentTimeMillis())
/utils\HistoryHelper.java:80:                .save();
/utils\HistoryHelper.java:81:    }
/utils\HistoryHelper.java:82:}/utils\ImageUtil.java:1:package com.huanchengfly.tieba.post.utils;
/utils\ImageUtil.java:3:import android.annotation.SuppressLint;
/utils\ImageUtil.java:4:import android.content.ContentResolver;
/utils\ImageUtil.java:5:import android.content.ContentValues;
/utils\ImageUtil.java:6:import android.content.Context;
/utils\ImageUtil.java:7:import android.content.Intent;
/utils\ImageUtil.java:8:import android.graphics.Bitmap;
/utils\ImageUtil.java:9:import android.graphics.Canvas;
/utils\ImageUtil.java:10:import android.graphics.ColorMatrix;
/utils\ImageUtil.java:11:import android.graphics.ColorMatrixColorFilter;
/utils\ImageUtil.java:12:import android.graphics.PixelFormat;
/utils\ImageUtil.java:13:import android.graphics.drawable.Drawable;
/utils\ImageUtil.java:14:import android.graphics.drawable.GradientDrawable;
/utils\ImageUtil.java:15:import android.net.Uri;
/utils\ImageUtil.java:16:import android.os.AsyncTask;
/utils\ImageUtil.java:17:import android.os.Build;
/utils\ImageUtil.java:18:import android.os.Environment;
/utils\ImageUtil.java:19:import android.os.ParcelFileDescriptor;
/utils\ImageUtil.java:20:import android.provider.MediaStore;
/utils\ImageUtil.java:21:import android.text.TextUtils;
/utils\ImageUtil.java:22:import android.util.Base64;
/utils\ImageUtil.java:23:import android.webkit.URLUtil;
/utils\ImageUtil.java:24:import android.widget.ImageView;
/utils\ImageUtil.java:25:import android.widget.Toast;
/utils\ImageUtil.java:27:import androidx.annotation.IntDef;
/utils\ImageUtil.java:28:import androidx.annotation.NonNull;
/utils\ImageUtil.java:29:import androidx.annotation.Nullable;
/utils\ImageUtil.java:30:import androidx.appcompat.widget.PopupMenu;
/utils\ImageUtil.java:31:import androidx.core.content.FileProvider;
/utils\ImageUtil.java:33:import com.bumptech.glide.Glide;
/utils\ImageUtil.java:34:import com.bumptech.glide.RequestBuilder;
/utils\ImageUtil.java:35:import com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions;
/utils\ImageUtil.java:36:import com.bumptech.glide.request.FutureTarget;
/utils\ImageUtil.java:37:import com.bumptech.glide.request.RequestOptions;
/utils\ImageUtil.java:38:import com.bumptech.glide.request.target.Target;
/utils\ImageUtil.java:39:import com.huanchengfly.tieba.post.R;
/utils\ImageUtil.java:40:import com.huanchengfly.tieba.post.activities.PhotoViewActivity;
/utils\ImageUtil.java:41:import com.huanchengfly.tieba.post.BaseApplication;
/utils\ImageUtil.java:42:import com.huanchengfly.tieba.post.components.transformations.RadiusTransformation;
/utils\ImageUtil.java:43:import com.huanchengfly.tieba.post.models.PhotoViewBean;
/utils\ImageUtil.java:44:import com.yanzhenjie.permission.runtime.Permission;
/utils\ImageUtil.java:45:import com.zhihu.matisse.MimeType;
/utils\ImageUtil.java:47:import java.io.ByteArrayOutputStream;
/utils\ImageUtil.java:48:import java.io.File;
/utils\ImageUtil.java:49:import java.io.FileInputStream;
/utils\ImageUtil.java:50:import java.io.FileNotFoundException;
/utils\ImageUtil.java:51:import java.io.FileOutputStream;
/utils\ImageUtil.java:52:import java.io.IOException;
/utils\ImageUtil.java:53:import java.io.InputStream;
/utils\ImageUtil.java:54:import java.lang.annotation.Retention;
/utils\ImageUtil.java:55:import java.lang.annotation.RetentionPolicy;
/utils\ImageUtil.java:56:import java.lang.ref.WeakReference;
/utils\ImageUtil.java:57:import java.nio.channels.FileChannel;
/utils\ImageUtil.java:58:import java.util.ArrayList;
/utils\ImageUtil.java:59:import java.util.Arrays;
/utils\ImageUtil.java:60:import java.util.Collections;
/utils\ImageUtil.java:61:import java.util.List;
/utils\ImageUtil.java:63:public class ImageUtil {
/utils\ImageUtil.java:64:    /**
/utils\ImageUtil.java:65:     * 智能省流
/utils\ImageUtil.java:66:     */
/utils\ImageUtil.java:67:    public static final int SETTINGS_SMART_ORIGIN = 0;
/utils\ImageUtil.java:68:    /**
/utils\ImageUtil.java:69:     * 智能无图
/utils\ImageUtil.java:70:     */
/utils\ImageUtil.java:71:    public static final int SETTINGS_SMART_LOAD = 1;
/utils\ImageUtil.java:72:    /**
/utils\ImageUtil.java:73:     * 始终高质量
/utils\ImageUtil.java:74:     */
/utils\ImageUtil.java:75:    public static final int SETTINGS_ALL_ORIGIN = 2;
/utils\ImageUtil.java:76:    /**
/utils\ImageUtil.java:77:     * 始终无图
/utils\ImageUtil.java:78:     */
/utils\ImageUtil.java:79:    public static final int SETTINGS_ALL_NO = 3;
/utils\ImageUtil.java:81:    public static final int LOAD_TYPE_SMALL_PIC = 0;
/utils\ImageUtil.java:82:    public static final int LOAD_TYPE_AVATAR = 1;
/utils\ImageUtil.java:83:    public static final int LOAD_TYPE_NO_RADIUS = 2;
/utils\ImageUtil.java:84:    public static final String TAG = "ImageUtil";
/utils\ImageUtil.java:86:    public static File compressImage(Bitmap bitmap, File output, int maxSize) {
/utils\ImageUtil.java:87:        ByteArrayOutputStream baos = new ByteArrayOutputStream();
/utils\ImageUtil.java:88:        int quality = 100;
/utils\ImageUtil.java:89:        bitmap.compress(Bitmap.CompressFormat.JPEG, quality, baos);//质量压缩方法，这里100表示不压缩，把压缩后的数据存放到baos中
/utils\ImageUtil.java:90:        while (baos.toByteArray().length / 1024 > maxSize && quality > 0) {  //循环判断如果压缩后图片是否大于20kb,大于继续压缩 友盟缩略图要求不大于18kb
/utils\ImageUtil.java:91:            baos.reset();//重置baos即清空baos
/utils\ImageUtil.java:92:            quality -= 5;//每次都减少5
/utils\ImageUtil.java:93:            bitmap.compress(Bitmap.CompressFormat.JPEG, quality, baos);//这里压缩options%，把压缩后的数据存放到baos中
/utils\ImageUtil.java:94:        }
/utils\ImageUtil.java:95:        try {
/utils\ImageUtil.java:96:            FileOutputStream fos = new FileOutputStream(output);
/utils\ImageUtil.java:97:            try {
/utils\ImageUtil.java:98:                fos.write(baos.toByteArray());
/utils\ImageUtil.java:99:                fos.flush();
/utils\ImageUtil.java:100:                fos.close();
/utils\ImageUtil.java:101:            } catch (IOException e) {
/utils\ImageUtil.java:102:                e.printStackTrace();
/utils\ImageUtil.java:103:            }
/utils\ImageUtil.java:104:        } catch (FileNotFoundException e) {
/utils\ImageUtil.java:105:            e.printStackTrace();
/utils\ImageUtil.java:106:        }
/utils\ImageUtil.java:107:        return output;
/utils\ImageUtil.java:108:    }
/utils\ImageUtil.java:110:    public static File bitmapToFile(Bitmap bitmap, File output) {
/utils\ImageUtil.java:111:        ByteArrayOutputStream baos = new ByteArrayOutputStream();
/utils\ImageUtil.java:112:        int quality = 100;
/utils\ImageUtil.java:113:        bitmap.compress(Bitmap.CompressFormat.JPEG, quality, baos);
/utils\ImageUtil.java:114:        try {
/utils\ImageUtil.java:115:            FileOutputStream fos = new FileOutputStream(output);
/utils\ImageUtil.java:116:            try {
/utils\ImageUtil.java:117:                fos.write(baos.toByteArray());
/utils\ImageUtil.java:118:                fos.flush();
/utils\ImageUtil.java:119:                fos.close();
/utils\ImageUtil.java:120:            } catch (IOException e) {
/utils\ImageUtil.java:121:                e.printStackTrace();
/utils\ImageUtil.java:122:            }
/utils\ImageUtil.java:123:        } catch (FileNotFoundException e) {
/utils\ImageUtil.java:124:            e.printStackTrace();
/utils\ImageUtil.java:125:        }
/utils\ImageUtil.java:126:        return output;
/utils\ImageUtil.java:127:    }
/utils\ImageUtil.java:129:    public static File compressImage(Bitmap bitmap, File output) {
/utils\ImageUtil.java:130:        return compressImage(bitmap, output, 100);
/utils\ImageUtil.java:131:    }
/utils\ImageUtil.java:133:    public static Bitmap drawableToBitmap(Drawable drawable) {
/utils\ImageUtil.java:134:        Bitmap bitmap = Bitmap.createBitmap(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight(),
/utils\ImageUtil.java:135:                drawable.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565);
/utils\ImageUtil.java:136:        Canvas canvas = new Canvas(bitmap);
/utils\ImageUtil.java:137:        drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());
/utils\ImageUtil.java:138:        drawable.draw(canvas);
/utils\ImageUtil.java:139:        return bitmap;
/utils\ImageUtil.java:140:    }
/utils\ImageUtil.java:142:    public static boolean copyFile(FileInputStream src, FileOutputStream dest) {
/utils\ImageUtil.java:143:        boolean result = false;
/utils\ImageUtil.java:144:        if ((src == null) || (dest == null)) {
/utils\ImageUtil.java:145:            return result;
/utils\ImageUtil.java:146:        }
/utils\ImageUtil.java:148:        FileChannel srcChannel = null;
/utils\ImageUtil.java:149:        FileChannel dstChannel = null;
/utils\ImageUtil.java:151:        try {
/utils\ImageUtil.java:152:            srcChannel = src.getChannel();
/utils\ImageUtil.java:153:            dstChannel = dest.getChannel();
/utils\ImageUtil.java:154:            srcChannel.transferTo(0, srcChannel.size(), dstChannel);
/utils\ImageUtil.java:155:            result = true;
/utils\ImageUtil.java:156:        } catch (IOException e) {
/utils\ImageUtil.java:157:            e.printStackTrace();
/utils\ImageUtil.java:158:            return result;
/utils\ImageUtil.java:159:        }
/utils\ImageUtil.java:160:        try {
/utils\ImageUtil.java:161:            srcChannel.close();
/utils\ImageUtil.java:162:            dstChannel.close();
/utils\ImageUtil.java:163:        } catch (IOException e) {
/utils\ImageUtil.java:164:            e.printStackTrace();
/utils\ImageUtil.java:165:        }
/utils\ImageUtil.java:166:        return result;
/utils\ImageUtil.java:167:    }
/utils\ImageUtil.java:169:    public static boolean copyFile(File src, File dest) {
/utils\ImageUtil.java:170:        boolean result = false;
/utils\ImageUtil.java:171:        if ((src == null) || (dest == null)) {
/utils\ImageUtil.java:172:            return result;
/utils\ImageUtil.java:173:        }
/utils\ImageUtil.java:174:        if (dest.exists()) {
/utils\ImageUtil.java:175:            dest.delete();
/utils\ImageUtil.java:176:        }
/utils\ImageUtil.java:177:        try {
/utils\ImageUtil.java:178:            dest.createNewFile();
/utils\ImageUtil.java:179:        } catch (IOException e) {
/utils\ImageUtil.java:180:            e.printStackTrace();
/utils\ImageUtil.java:181:        }
/utils\ImageUtil.java:183:        FileChannel srcChannel = null;
/utils\ImageUtil.java:184:        FileChannel dstChannel = null;
/utils\ImageUtil.java:186:        try {
/utils\ImageUtil.java:187:            srcChannel = new FileInputStream(src).getChannel();
/utils\ImageUtil.java:188:            dstChannel = new FileOutputStream(dest).getChannel();
/utils\ImageUtil.java:189:            srcChannel.transferTo(0, srcChannel.size(), dstChannel);
/utils\ImageUtil.java:190:            result = true;
/utils\ImageUtil.java:191:        } catch (IOException e) {
/utils\ImageUtil.java:192:            e.printStackTrace();
/utils\ImageUtil.java:193:            return result;
/utils\ImageUtil.java:194:        }
/utils\ImageUtil.java:195:        try {
/utils\ImageUtil.java:196:            srcChannel.close();
/utils\ImageUtil.java:197:            dstChannel.close();
/utils\ImageUtil.java:198:        } catch (IOException e) {
/utils\ImageUtil.java:199:            e.printStackTrace();
/utils\ImageUtil.java:200:        }
/utils\ImageUtil.java:201:        return result;
/utils\ImageUtil.java:202:    }
/utils\ImageUtil.java:204:    private static void changeBrightness(ImageView imageView, int brightness) {
/utils\ImageUtil.java:205:        ColorMatrix cMatrix = new ColorMatrix();
/utils\ImageUtil.java:206:        cMatrix.set(new float[]{1, 0, 0, 0, brightness, 0, 1, 0, 0, brightness, // 改变亮度
/utils\ImageUtil.java:207:                0, 0, 1, 0, brightness, 0, 0, 0, 1, 0});
/utils\ImageUtil.java:208:        imageView.setColorFilter(new ColorMatrixColorFilter(cMatrix));
/utils\ImageUtil.java:209:    }
/utils\ImageUtil.java:211:    @SuppressLint("StaticFieldLeak")
/utils\ImageUtil.java:212:    public static void download(Context context, String url, boolean gif) {
/utils\ImageUtil.java:213:        download(context, url, gif, false, null);
/utils\ImageUtil.java:214:    }
/utils\ImageUtil.java:216:    @SuppressLint("StaticFieldLeak")
/utils\ImageUtil.java:217:    public static void download(Context context, String url, boolean gif, boolean forShare, @Nullable ShareTaskCallback taskCallback) {
/utils\ImageUtil.java:218:        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
/utils\ImageUtil.java:219:            downloadAboveQ(context, url, forShare, taskCallback);
/utils\ImageUtil.java:220:            return;
/utils\ImageUtil.java:221:        }
/utils\ImageUtil.java:222:        PermissionUtil.askPermission(context,
/utils\ImageUtil.java:223:                data -> downloadBelowQ(context, url, forShare, taskCallback),
/utils\ImageUtil.java:224:                R.string.toast_no_permission_save_photo,
/utils\ImageUtil.java:225:                new PermissionUtil.Permission(Permission.Group.STORAGE, context.getString(R.string.tip_permission_storage)));
/utils\ImageUtil.java:226:    }
/utils\ImageUtil.java:228:    private static void downloadAboveQ(Context context, String url, boolean forShare, @Nullable ShareTaskCallback taskCallback) {
/utils\ImageUtil.java:229:        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {
/utils\ImageUtil.java:230:            return;
/utils\ImageUtil.java:231:        }
/utils\ImageUtil.java:232:        new DownloadAsyncTask(context, url, file -> {
/utils\ImageUtil.java:233:            String fileName = URLUtil.guessFileName(url, null, MimeType.JPEG.toString());
/utils\ImageUtil.java:234:            String relativePath = Environment.DIRECTORY_PICTURES + File.separator + "Tieba Lite";
/utils\ImageUtil.java:235:            if (forShare) {
/utils\ImageUtil.java:236:                relativePath += File.separator + "shareTemp";
/utils\ImageUtil.java:237:            }
/utils\ImageUtil.java:238:            ContentValues values = new ContentValues();
/utils\ImageUtil.java:239:            values.put(MediaStore.Images.Media.RELATIVE_PATH, relativePath);
/utils\ImageUtil.java:240:            values.put(MediaStore.Images.Media.DISPLAY_NAME, fileName);
/utils\ImageUtil.java:241:            values.put(MediaStore.Images.Media.MIME_TYPE, MimeType.JPEG.toString());
/utils\ImageUtil.java:242:            values.put(MediaStore.Images.Media.DESCRIPTION, fileName);
/utils\ImageUtil.java:243:            Uri uri = null;
/utils\ImageUtil.java:244:            ContentResolver cr = context.getContentResolver();
/utils\ImageUtil.java:245:            try {
/utils\ImageUtil.java:246:                uri = cr.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values);
/utils\ImageUtil.java:247:                if (uri == null) {
/utils\ImageUtil.java:248:                    return;
/utils\ImageUtil.java:249:                }
/utils\ImageUtil.java:250:                ParcelFileDescriptor descriptor = cr.openFileDescriptor(uri, "w");
/utils\ImageUtil.java:251:                FileOutputStream outputStream = new FileOutputStream(descriptor.getFileDescriptor());
/utils\ImageUtil.java:252:                FileInputStream inputStream = new FileInputStream(file);
/utils\ImageUtil.java:253:                copyFile(inputStream, outputStream);
/utils\ImageUtil.java:254:            } catch (Exception e) {
/utils\ImageUtil.java:255:                e.printStackTrace();
/utils\ImageUtil.java:256:                if (uri != null) {
/utils\ImageUtil.java:257:                    cr.delete(uri, null, null);
/utils\ImageUtil.java:258:                }
/utils\ImageUtil.java:259:                return;
/utils\ImageUtil.java:260:            }
/utils\ImageUtil.java:261:            if (!forShare)
/utils\ImageUtil.java:262:                Toast.makeText(context, context.getString(R.string.toast_photo_saved, relativePath), Toast.LENGTH_SHORT).show();
/utils\ImageUtil.java:263:            else if (taskCallback != null)
/utils\ImageUtil.java:264:                taskCallback.onGetUri(uri);
/utils\ImageUtil.java:265:        }).execute();
/utils\ImageUtil.java:266:    }
/utils\ImageUtil.java:268:    private static void downloadAboveQ(Context context, String url) {
/utils\ImageUtil.java:269:        downloadAboveQ(context, url, false, null);
/utils\ImageUtil.java:270:    }
/utils\ImageUtil.java:272:    @SuppressLint("StaticFieldLeak")
/utils\ImageUtil.java:273:    private static void downloadBelowQ(Context context, String url, boolean forShare, @Nullable ShareTaskCallback taskCallback) {
/utils\ImageUtil.java:274:        new DownloadAsyncTask(context, url, file -> {
/utils\ImageUtil.java:275:            File pictureFolder = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES).getAbsoluteFile();
/utils\ImageUtil.java:276:            File appDir;
/utils\ImageUtil.java:277:            if (forShare) {
/utils\ImageUtil.java:278:                appDir = new File(pictureFolder, "Tieba Lite" + File.separator + "shareTemp");
/utils\ImageUtil.java:279:            } else {
/utils\ImageUtil.java:280:                appDir = new File(pictureFolder, "Tieba Lite");
/utils\ImageUtil.java:281:            }
/utils\ImageUtil.java:282:            if (appDir.exists() || appDir.mkdirs()) {
/utils\ImageUtil.java:283:                if (forShare) {
/utils\ImageUtil.java:284:                    File nomedia = new File(appDir, ".nomedia");
/utils\ImageUtil.java:285:                    if (!nomedia.exists()) {
/utils\ImageUtil.java:286:                        try {
/utils\ImageUtil.java:287:                            nomedia.createNewFile();
/utils\ImageUtil.java:288:                        } catch (IOException e) {
/utils\ImageUtil.java:289:                            e.printStackTrace();
/utils\ImageUtil.java:290:                        }
/utils\ImageUtil.java:291:                    }
/utils\ImageUtil.java:292:                }
/utils\ImageUtil.java:293:                String fileName = URLUtil.guessFileName(url, null, MimeType.JPEG.toString());
/utils\ImageUtil.java:294:                File destFile = new File(appDir, fileName);
/utils\ImageUtil.java:295:                if (destFile.exists()) {
/utils\ImageUtil.java:296:                    return;
/utils\ImageUtil.java:297:                }
/utils\ImageUtil.java:298:                copyFile(file, destFile);
/utils\ImageUtil.java:299:                if (!forShare) {
/utils\ImageUtil.java:300:                    context.sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, Uri.fromFile(new File(destFile.getPath()))));
/utils\ImageUtil.java:301:                    Toast.makeText(context, context.getString(R.string.toast_photo_saved, destFile.getPath()), Toast.LENGTH_SHORT).show();
/utils\ImageUtil.java:302:                } else if (taskCallback != null) {
/utils\ImageUtil.java:303:                    taskCallback.onGetUri(FileProvider.getUriForFile(context, context.getPackageName() + ".share.FileProvider", destFile));
/utils\ImageUtil.java:304:                }
/utils\ImageUtil.java:305:            }
/utils\ImageUtil.java:306:        }).execute();
/utils\ImageUtil.java:307:    }
/utils\ImageUtil.java:309:    @SuppressLint("StaticFieldLeak")
/utils\ImageUtil.java:310:    private static void downloadBelowQ(Context context, String url) {
/utils\ImageUtil.java:311:        downloadBelowQ(context, url, false, null);
/utils\ImageUtil.java:312:    }
/utils\ImageUtil.java:314:    public static String getPicId(String picUrl) {
/utils\ImageUtil.java:315:        String fileName = URLUtil.guessFileName(picUrl, null, MimeType.JPEG.toString());
/utils\ImageUtil.java:316:        return fileName.replace(".jpg", "");
/utils\ImageUtil.java:317:    }
/utils\ImageUtil.java:319:    public static void initImageView(ImageView view, List<PhotoViewBean> photoViewBeans, int position, String forumName, String forumId, String threadId, boolean seeLz, String objType) {
/utils\ImageUtil.java:320:        view.setOnClickListener(v -> {
/utils\ImageUtil.java:321:            Object tag = view.getTag(R.id.image_load_tag);
/utils\ImageUtil.java:322:            if (tag != null) {
/utils\ImageUtil.java:323:                boolean loaded = (boolean) tag;
/utils\ImageUtil.java:324:                if (loaded) {
/utils\ImageUtil.java:325:                    PhotoViewActivity.launch(v.getContext(), photoViewBeans.toArray(new PhotoViewBean[0]), position, forumName, forumId, threadId, seeLz, objType);
/utils\ImageUtil.java:326:                } else {
/utils\ImageUtil.java:327:                    load(view, LOAD_TYPE_SMALL_PIC, photoViewBeans.get(position).getUrl(), true);
/utils\ImageUtil.java:328:                }
/utils\ImageUtil.java:329:            }
/utils\ImageUtil.java:330:        });
/utils\ImageUtil.java:331:        view.setOnLongClickListener(v -> {
/utils\ImageUtil.java:332:            PopupMenu popupMenu = PopupUtil.create(view);
/utils\ImageUtil.java:333:            popupMenu.getMenuInflater().inflate(R.menu.menu_image_long_click, popupMenu.getMenu());
/utils\ImageUtil.java:334:            popupMenu.setOnMenuItemClickListener(item -> {
/utils\ImageUtil.java:335:                switch (item.getItemId()) {
/utils\ImageUtil.java:336:                    case R.id.menu_save_image:
/utils\ImageUtil.java:337:                        download(view.getContext(), photoViewBeans.get(position).getOriginUrl(), false);
/utils\ImageUtil.java:338:                        return true;
/utils\ImageUtil.java:339:                }
/utils\ImageUtil.java:340:                return false;
/utils\ImageUtil.java:341:            });
/utils\ImageUtil.java:342:            popupMenu.show();
/utils\ImageUtil.java:343:            return true;
/utils\ImageUtil.java:344:        });
/utils\ImageUtil.java:345:    }
/utils\ImageUtil.java:347:    public static void initImageView(ImageView view, List<PhotoViewBean> photoViewBeans, int position) {
/utils\ImageUtil.java:348:        view.setOnClickListener(v -> {
/utils\ImageUtil.java:349:            Object tag = view.getTag(R.id.image_load_tag);
/utils\ImageUtil.java:350:            if (tag != null) {
/utils\ImageUtil.java:351:                boolean loaded = (boolean) tag;
/utils\ImageUtil.java:352:                if (loaded) {
/utils\ImageUtil.java:353:                    PhotoViewActivity.launch(v.getContext(), photoViewBeans, position);
/utils\ImageUtil.java:354:                } else {
/utils\ImageUtil.java:355:                    load(view, LOAD_TYPE_SMALL_PIC, photoViewBeans.get(position).getUrl(), true);
/utils\ImageUtil.java:356:                }
/utils\ImageUtil.java:357:            }
/utils\ImageUtil.java:358:        });
/utils\ImageUtil.java:359:        view.setOnLongClickListener(v -> {
/utils\ImageUtil.java:360:            PopupMenu popupMenu = PopupUtil.create(view);
/utils\ImageUtil.java:361:            popupMenu.getMenuInflater().inflate(R.menu.menu_image_long_click, popupMenu.getMenu());
/utils\ImageUtil.java:362:            popupMenu.setOnMenuItemClickListener(item -> {
/utils\ImageUtil.java:363:                switch (item.getItemId()) {
/utils\ImageUtil.java:364:                    case R.id.menu_save_image:
/utils\ImageUtil.java:365:                        download(view.getContext(), photoViewBeans.get(position).getOriginUrl(), false);
/utils\ImageUtil.java:366:                        return true;
/utils\ImageUtil.java:367:                }
/utils\ImageUtil.java:368:                return false;
/utils\ImageUtil.java:369:            });
/utils\ImageUtil.java:370:            popupMenu.show();
/utils\ImageUtil.java:371:            return true;
/utils\ImageUtil.java:372:        });
/utils\ImageUtil.java:373:    }
/utils\ImageUtil.java:375:    public static void initImageView(ImageView view, PhotoViewBean photoViewBean) {
/utils\ImageUtil.java:376:        List<PhotoViewBean> photoViewBeans = new ArrayList<>();
/utils\ImageUtil.java:377:        photoViewBeans.add(photoViewBean);
/utils\ImageUtil.java:378:        initImageView(view, photoViewBeans, 0);
/utils\ImageUtil.java:379:    }
/utils\ImageUtil.java:381:    public static String getNonNullString(String... strings) {
/utils\ImageUtil.java:382:        for (String url : strings) {
/utils\ImageUtil.java:383:            if (!TextUtils.isEmpty(url)) {
/utils\ImageUtil.java:384:                return url;
/utils\ImageUtil.java:385:            }
/utils\ImageUtil.java:386:        }
/utils\ImageUtil.java:387:        return null;
/utils\ImageUtil.java:388:    }
/utils\ImageUtil.java:390:    public static int getRadiusPx(Context context) {
/utils\ImageUtil.java:391:        return DisplayUtil.dp2px(context, getRadiusDp(context));
/utils\ImageUtil.java:392:    }
/utils\ImageUtil.java:394:    public static int getRadiusDp(Context context) {
/utils\ImageUtil.java:395:        return SharedPreferencesUtil.get(context, SharedPreferencesUtil.SP_SETTINGS).getInt("radius", 8);
/utils\ImageUtil.java:396:    }
/utils\ImageUtil.java:398:    public static void load(ImageView imageView, @LoadType int type, String url) {
/utils\ImageUtil.java:399:        load(imageView, type, url, false);
/utils\ImageUtil.java:400:    }
/utils\ImageUtil.java:402:    private static Drawable getPlaceHolder(Context context, int radius) {
/utils\ImageUtil.java:403:        GradientDrawable drawable = new GradientDrawable();
/utils\ImageUtil.java:404:        int color = ThemeUtil.isNightMode(context) ? context.getResources().getColor(R.color.color_place_holder_night) : context.getResources().getColor(R.color.color_place_holder);
/utils\ImageUtil.java:405:        drawable.setColor(color);
/utils\ImageUtil.java:406:        drawable.setCornerRadius(DisplayUtil.dp2px(context, radius));
/utils\ImageUtil.java:407:        return drawable;
/utils\ImageUtil.java:408:    }
/utils\ImageUtil.java:410:    public static void load(ImageView imageView, @LoadType int type, String url, boolean skipNetworkCheck) {
/utils\ImageUtil.java:411:        if (!Util.canLoadGlide(imageView.getContext())) {
/utils\ImageUtil.java:412:            return;
/utils\ImageUtil.java:413:        }
/utils\ImageUtil.java:414:        int radius = SharedPreferencesUtil.get(imageView.getContext(), SharedPreferencesUtil.SP_SETTINGS).getInt("radius", 8);
/utils\ImageUtil.java:415:        RequestBuilder<Drawable> requestBuilder;
/utils\ImageUtil.java:416:        if (skipNetworkCheck ||
/utils\ImageUtil.java:417:                type == LOAD_TYPE_AVATAR ||
/utils\ImageUtil.java:418:                getImageLoadSettings() == SETTINGS_ALL_ORIGIN ||
/utils\ImageUtil.java:419:                getImageLoadSettings() == SETTINGS_SMART_ORIGIN ||
/utils\ImageUtil.java:420:                (getImageLoadSettings() == SETTINGS_SMART_LOAD && NetworkUtil.isWifiConnected(imageView.getContext()))) {
/utils\ImageUtil.java:421:            imageView.setTag(R.id.image_load_tag, true);
/utils\ImageUtil.java:422:            requestBuilder = Glide.with(imageView).load(url);
/utils\ImageUtil.java:423:        } else {
/utils\ImageUtil.java:424:            imageView.setTag(R.id.image_load_tag, false);
/utils\ImageUtil.java:425:            requestBuilder = Glide.with(imageView).load(getPlaceHolder(imageView.getContext(), type == LOAD_TYPE_SMALL_PIC ? radius : 0));
/utils\ImageUtil.java:426:        }
/utils\ImageUtil.java:427:        if (ThemeUtil.isNightMode(imageView.getContext())) {
/utils\ImageUtil.java:428:            changeBrightness(imageView, -35);
/utils\ImageUtil.java:429:        } else {
/utils\ImageUtil.java:430:            imageView.clearColorFilter();
/utils\ImageUtil.java:431:        }
/utils\ImageUtil.java:432:        switch (type) {
/utils\ImageUtil.java:433:            case LOAD_TYPE_SMALL_PIC:
/utils\ImageUtil.java:434:                requestBuilder.apply(RequestOptions.bitmapTransform(new RadiusTransformation(imageView.getContext(), radius))
/utils\ImageUtil.java:435:                        .placeholder(getPlaceHolder(imageView.getContext(), radius))
/utils\ImageUtil.java:436:                        .skipMemoryCache(true));
/utils\ImageUtil.java:437:                break;
/utils\ImageUtil.java:438:            case LOAD_TYPE_AVATAR:
/utils\ImageUtil.java:439:                requestBuilder.apply(RequestOptions.circleCropTransform()
/utils\ImageUtil.java:440:                        .placeholder(getPlaceHolder(imageView.getContext(), 50))
/utils\ImageUtil.java:441:                        .skipMemoryCache(true));
/utils\ImageUtil.java:442:                break;
/utils\ImageUtil.java:443:            case LOAD_TYPE_NO_RADIUS:
/utils\ImageUtil.java:444:                requestBuilder.apply(new RequestOptions()
/utils\ImageUtil.java:445:                        .placeholder(getPlaceHolder(imageView.getContext(), 0))
/utils\ImageUtil.java:446:                        .skipMemoryCache(true));
/utils\ImageUtil.java:447:                break;
/utils\ImageUtil.java:448:        }
/utils\ImageUtil.java:449:        requestBuilder.transition(DrawableTransitionOptions.withCrossFade())
/utils\ImageUtil.java:450:                .into(imageView);
/utils\ImageUtil.java:451:    }
/utils\ImageUtil.java:453:    /**
/utils\ImageUtil.java:454:     * 获取要加载的图片 Url
/utils\ImageUtil.java:455:     *
/utils\ImageUtil.java:456:     * @param isSmallPic   加载的是否为缩略图
/utils\ImageUtil.java:457:     * @param originUrl    原图 Url
/utils\ImageUtil.java:458:     * @param smallPicUrls 缩略图 Url，按照画质从好到差排序
/utils\ImageUtil.java:459:     * @return 要加载的图片 Url
/utils\ImageUtil.java:460:     */
/utils\ImageUtil.java:461:    public static String getUrl(Context context, boolean isSmallPic, @NonNull String originUrl, @NonNull String... smallPicUrls) {
/utils\ImageUtil.java:462:        List<String> urls = Arrays.asList(smallPicUrls);
/utils\ImageUtil.java:463:        if (isSmallPic) {
/utils\ImageUtil.java:464:            if (needReverse(context)) {
/utils\ImageUtil.java:465:                Collections.reverse(urls);
/utils\ImageUtil.java:466:            }
/utils\ImageUtil.java:467:            for (String url : urls) {
/utils\ImageUtil.java:468:                if (!TextUtils.isEmpty(url)) {
/utils\ImageUtil.java:469:                    return url;
/utils\ImageUtil.java:470:                }
/utils\ImageUtil.java:471:            }
/utils\ImageUtil.java:472:        }
/utils\ImageUtil.java:473:        return originUrl;
/utils\ImageUtil.java:474:    }
/utils\ImageUtil.java:476:    private static boolean needReverse(Context context) {
/utils\ImageUtil.java:477:        if (getImageLoadSettings() == SETTINGS_SMART_ORIGIN && NetworkUtil.isWifiConnected(context)) {
/utils\ImageUtil.java:478:            return false;
/utils\ImageUtil.java:479:        }
/utils\ImageUtil.java:480:        return getImageLoadSettings() != SETTINGS_ALL_ORIGIN;
/utils\ImageUtil.java:481:    }
/utils\ImageUtil.java:483:    @ImageLoadSettings
/utils\ImageUtil.java:484:    private static int getImageLoadSettings() {
/utils\ImageUtil.java:485:        return Integer.parseInt(SharedPreferencesUtil.get(BaseApplication.getInstance(), SharedPreferencesUtil.SP_SETTINGS).getString("image_load_type", String.valueOf(SETTINGS_SMART_ORIGIN)));
/utils\ImageUtil.java:486:    }
/utils\ImageUtil.java:488:    public static String imageToBase64(InputStream is) {
/utils\ImageUtil.java:489:        if (is == null) {
/utils\ImageUtil.java:490:            return null;
/utils\ImageUtil.java:491:        }
/utils\ImageUtil.java:492:        byte[] data = null;
/utils\ImageUtil.java:493:        String result = null;
/utils\ImageUtil.java:494:        try {
/utils\ImageUtil.java:495:            //创建一个字符流大小的数组。
/utils\ImageUtil.java:496:            data = new byte[is.available()];
/utils\ImageUtil.java:497:            //写入数组
/utils\ImageUtil.java:498:            is.read(data);
/utils\ImageUtil.java:499:            //用默认的编码格式进行编码
/utils\ImageUtil.java:500:            result = Base64.encodeToString(data, Base64.DEFAULT);
/utils\ImageUtil.java:501:        } catch (IOException e) {
/utils\ImageUtil.java:502:            e.printStackTrace();
/utils\ImageUtil.java:503:        } finally {
/utils\ImageUtil.java:504:            if (null != is) {
/utils\ImageUtil.java:505:                try {
/utils\ImageUtil.java:506:                    is.close();
/utils\ImageUtil.java:507:                } catch (IOException e) {
/utils\ImageUtil.java:508:                    e.printStackTrace();
/utils\ImageUtil.java:509:                }
/utils\ImageUtil.java:510:            }
/utils\ImageUtil.java:512:        }
/utils\ImageUtil.java:513:        return result;
/utils\ImageUtil.java:514:    }
/utils\ImageUtil.java:516:    public static String imageToBase64(File file) {
/utils\ImageUtil.java:517:        if (file == null) {
/utils\ImageUtil.java:518:            return null;
/utils\ImageUtil.java:519:        }
/utils\ImageUtil.java:520:        String result = null;
/utils\ImageUtil.java:521:        try {
/utils\ImageUtil.java:522:            InputStream is = new FileInputStream(file);
/utils\ImageUtil.java:523:            result = imageToBase64(is);
/utils\ImageUtil.java:524:        } catch (IOException e) {
/utils\ImageUtil.java:525:            e.printStackTrace();
/utils\ImageUtil.java:526:        }
/utils\ImageUtil.java:527:        return result;
/utils\ImageUtil.java:528:    }
/utils\ImageUtil.java:530:    public interface ShareTaskCallback {
/utils\ImageUtil.java:531:        void onGetUri(Uri uri);
/utils\ImageUtil.java:532:    }
/utils\ImageUtil.java:534:    @IntDef({LOAD_TYPE_SMALL_PIC, LOAD_TYPE_AVATAR, LOAD_TYPE_NO_RADIUS})
/utils\ImageUtil.java:535:    @Retention(RetentionPolicy.SOURCE)
/utils\ImageUtil.java:536:    public @interface LoadType {
/utils\ImageUtil.java:537:    }
/utils\ImageUtil.java:539:    @IntDef({SETTINGS_SMART_ORIGIN, SETTINGS_SMART_LOAD, SETTINGS_ALL_ORIGIN, SETTINGS_ALL_NO})
/utils\ImageUtil.java:540:    public @interface ImageLoadSettings {
/utils\ImageUtil.java:541:    }
/utils\ImageUtil.java:543:    public static class DownloadAsyncTask extends AsyncTask<Void, Integer, File> {
/utils\ImageUtil.java:544:        private WeakReference<Context> contextWeakReference;
/utils\ImageUtil.java:545:        private TaskCallback callback;
/utils\ImageUtil.java:546:        private String url;
/utils\ImageUtil.java:548:        public DownloadAsyncTask(Context context, String url, TaskCallback callback) {
/utils\ImageUtil.java:549:            this.contextWeakReference = new WeakReference<>(context);
/utils\ImageUtil.java:550:            this.url = url;
/utils\ImageUtil.java:551:            this.callback = callback;
/utils\ImageUtil.java:552:        }
/utils\ImageUtil.java:554:        public TaskCallback getCallback() {
/utils\ImageUtil.java:555:            return callback;
/utils\ImageUtil.java:556:        }
/utils\ImageUtil.java:558:        public String getUrl() {
/utils\ImageUtil.java:559:            return url;
/utils\ImageUtil.java:560:        }
/utils\ImageUtil.java:562:        private Context getContext() {
/utils\ImageUtil.java:563:            return contextWeakReference.get();
/utils\ImageUtil.java:564:        }
/utils\ImageUtil.java:566:        @Override
/utils\ImageUtil.java:567:        protected File doInBackground(Void... voids) {
/utils\ImageUtil.java:568:            File file = null;
/utils\ImageUtil.java:569:            try {
/utils\ImageUtil.java:570:                FutureTarget<File> future = Glide.with(getContext())
/utils\ImageUtil.java:571:                        .asFile()
/utils\ImageUtil.java:572:                        .load(getUrl())
/utils\ImageUtil.java:573:                        .submit(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL);
/utils\ImageUtil.java:574:                file = future.get();
/utils\ImageUtil.java:575:                return file;
/utils\ImageUtil.java:576:            } catch (Exception e) {
/utils\ImageUtil.java:577:                e.printStackTrace();
/utils\ImageUtil.java:578:            }
/utils\ImageUtil.java:579:            return file;
/utils\ImageUtil.java:580:        }
/utils\ImageUtil.java:582:        @Override
/utils\ImageUtil.java:583:        protected void onPostExecute(File file) {
/utils\ImageUtil.java:584:            super.onPostExecute(file);
/utils\ImageUtil.java:585:            getCallback().onPostExecute(file);
/utils\ImageUtil.java:586:        }
/utils\ImageUtil.java:588:        public interface TaskCallback {
/utils\ImageUtil.java:589:            void onPostExecute(File file);
/utils\ImageUtil.java:590:        }
/utils\ImageUtil.java:591:    }
/utils\ImageUtil.java:592:}
/utils\JobServiceUtil.java:1:package com.huanchengfly.tieba.post.utils;
/utils\JobServiceUtil.java:3:import android.content.Context;
/utils\JobServiceUtil.java:4:import android.content.SharedPreferences;
/utils\JobServiceUtil.java:6:public class JobServiceUtil {
/utils\JobServiceUtil.java:7:    public static int getJobId(Context context) {
/utils\JobServiceUtil.java:8:        SharedPreferences sharedPreferences = context.getSharedPreferences("appData", Context.MODE_PRIVATE);
/utils\JobServiceUtil.java:9:        int jobId = sharedPreferences.getInt("jobId", -1);
/utils\JobServiceUtil.java:10:        if (jobId == -1) {
/utils\JobServiceUtil.java:11:            jobId = (int) (Math.random() * (99999 + 1));
/utils\JobServiceUtil.java:12:            sharedPreferences.edit()
/utils\JobServiceUtil.java:13:                    .putInt("jobId", jobId)
/utils\JobServiceUtil.java:14:                    .apply();
/utils\JobServiceUtil.java:15:        }
/utils\JobServiceUtil.java:16:        return jobId;
/utils\JobServiceUtil.java:17:    }
/utils\JobServiceUtil.java:18:}
/utils\MD5Util.java:1:package com.huanchengfly.tieba.post.utils;
/utils\MD5Util.java:3:import java.nio.charset.StandardCharsets;
/utils\MD5Util.java:4:import java.security.MessageDigest;
/utils\MD5Util.java:5:import java.security.NoSuchAlgorithmException;
/utils\MD5Util.java:7:public class MD5Util {
/utils\MD5Util.java:9:    private static final char[] yT = {48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70};
/utils\MD5Util.java:11:    public static String p(byte[] paramArrayOfByte) throws NoSuchAlgorithmException {
/utils\MD5Util.java:12:        MessageDigest localMessageDigest = MessageDigest.getInstance("MD5");
/utils\MD5Util.java:13:        localMessageDigest.update(paramArrayOfByte);
/utils\MD5Util.java:14:        return toHexString(localMessageDigest.digest());
/utils\MD5Util.java:15:    }
/utils\MD5Util.java:17:    public static String toHexString(byte[] paramArrayOfByte) {
/utils\MD5Util.java:18:        if (paramArrayOfByte == null)
/utils\MD5Util.java:19:            return null;
/utils\MD5Util.java:20:        StringBuilder localStringBuilder = new StringBuilder(paramArrayOfByte.length * 2);
/utils\MD5Util.java:21:        int i = 0;
/utils\MD5Util.java:22:        while (true) {
/utils\MD5Util.java:23:            if (i >= paramArrayOfByte.length)
/utils\MD5Util.java:24:                return localStringBuilder.toString();
/utils\MD5Util.java:25:            localStringBuilder.append(yT[((paramArrayOfByte[i] & 0xF0) >>> 4)]);
/utils\MD5Util.java:26:            localStringBuilder.append(yT[(paramArrayOfByte[i] & 0xF)]);
/utils\MD5Util.java:27:            i += 1;
/utils\MD5Util.java:28:        }
/utils\MD5Util.java:29:    }
/utils\MD5Util.java:31:    public static String toMd5(String paramString) {
/utils\MD5Util.java:32:        if (paramString == null) {
/utils\MD5Util.java:33:            return null;
/utils\MD5Util.java:34:        }
/utils\MD5Util.java:35:        try {
/utils\MD5Util.java:36:            paramString = p(paramString.getBytes(StandardCharsets.UTF_8));
/utils\MD5Util.java:37:            return paramString;
/utils\MD5Util.java:38:        } catch (Exception e) {
/utils\MD5Util.java:39:        }
/utils\MD5Util.java:40:        return null;
/utils\MD5Util.java:41:    }
/utils\MD5Util.java:43:    public static String toMd5(byte[] bytes) {
/utils\MD5Util.java:44:        if (bytes == null) {
/utils\MD5Util.java:45:            return null;
/utils\MD5Util.java:46:        }
/utils\MD5Util.java:47:        try {
/utils\MD5Util.java:48:            return p(bytes);
/utils\MD5Util.java:49:        } catch (NoSuchAlgorithmException e) {
/utils\MD5Util.java:50:            e.printStackTrace();
/utils\MD5Util.java:51:        }
/utils\MD5Util.java:52:        return null;
/utils\MD5Util.java:53:    }
/utils\MD5Util.java:54:}/utils\MobileInfoUtil.java:1:package com.huanchengfly.tieba.post.utils;
/utils\MobileInfoUtil.java:3:import android.annotation.SuppressLint;
/utils\MobileInfoUtil.java:4:import android.content.Context;
/utils\MobileInfoUtil.java:5:import android.os.Build;
/utils\MobileInfoUtil.java:6:import android.telephony.TelephonyManager;
/utils\MobileInfoUtil.java:8:public class MobileInfoUtil {
/utils\MobileInfoUtil.java:9:    public static final String DEFAULT_IMEI = "000000000000000";
/utils\MobileInfoUtil.java:11:    @SuppressLint("HardwareIds")
/utils\MobileInfoUtil.java:12:    public static String getIMEI(Context context) {
/utils\MobileInfoUtil.java:13:        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
/utils\MobileInfoUtil.java:14:            return DEFAULT_IMEI;
/utils\MobileInfoUtil.java:15:        }
/utils\MobileInfoUtil.java:16:        try {
/utils\MobileInfoUtil.java:17:            TelephonyManager telephonyManager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
/utils\MobileInfoUtil.java:18:            String imei = null;
/utils\MobileInfoUtil.java:19:            if (telephonyManager != null) {
/utils\MobileInfoUtil.java:20:                imei = telephonyManager.getDeviceId();
/utils\MobileInfoUtil.java:21:            }
/utils\MobileInfoUtil.java:22:            if (imei == null) {
/utils\MobileInfoUtil.java:23:                imei = DEFAULT_IMEI;
/utils\MobileInfoUtil.java:24:            }
/utils\MobileInfoUtil.java:25:            return imei;
/utils\MobileInfoUtil.java:26:        } catch (SecurityException e) {
/utils\MobileInfoUtil.java:27:            return DEFAULT_IMEI;
/utils\MobileInfoUtil.java:28:        } catch (Exception e) {
/utils\MobileInfoUtil.java:29:            return DEFAULT_IMEI;
/utils\MobileInfoUtil.java:30:        }
/utils\MobileInfoUtil.java:31:    }
/utils\MobileInfoUtil.java:32:}
/utils\NavigationHelper.java:1:package com.huanchengfly.tieba.post.utils;
/utils\NavigationHelper.java:3:import android.app.Activity;
/utils\NavigationHelper.java:4:import android.app.ActivityOptions;
/utils\NavigationHelper.java:5:import android.content.ActivityNotFoundException;
/utils\NavigationHelper.java:6:import android.content.Context;
/utils\NavigationHelper.java:7:import android.content.Intent;
/utils\NavigationHelper.java:8:import android.content.pm.PackageManager;
/utils\NavigationHelper.java:9:import android.content.pm.ResolveInfo;
/utils\NavigationHelper.java:10:import android.net.Uri;
/utils\NavigationHelper.java:11:import android.view.View;
/utils\NavigationHelper.java:12:import android.webkit.WebResourceRequest;
/utils\NavigationHelper.java:13:import android.webkit.WebView;
/utils\NavigationHelper.java:14:import android.widget.Toast;
/utils\NavigationHelper.java:16:import androidx.annotation.NonNull;
/utils\NavigationHelper.java:17:import androidx.browser.customtabs.CustomTabsIntent;
/utils\NavigationHelper.java:19:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/utils\NavigationHelper.java:20:import com.huanchengfly.tieba.post.activities.FloorActivity;
/utils\NavigationHelper.java:21:import com.huanchengfly.tieba.post.activities.ForumActivity;
/utils\NavigationHelper.java:22:import com.huanchengfly.tieba.post.R;
/utils\NavigationHelper.java:23:import com.huanchengfly.tieba.post.activities.ThreadActivity;
/utils\NavigationHelper.java:24:import com.huanchengfly.tieba.post.activities.WebViewActivity;
/utils\NavigationHelper.java:25:import com.huanchengfly.tieba.post.activities.LoginActivity;
/utils\NavigationHelper.java:26:import com.huanchengfly.tieba.post.activities.UserActivity;
/utils\NavigationHelper.java:27:import com.huanchengfly.tieba.post.components.dialogs.PermissionDialog;
/utils\NavigationHelper.java:28:import com.huanchengfly.tieba.post.models.PermissionBean;
/utils\NavigationHelper.java:30:import java.net.URISyntaxException;
/utils\NavigationHelper.java:31:import java.util.List;
/utils\NavigationHelper.java:32:import java.util.Map;
/utils\NavigationHelper.java:34:import static com.huanchengfly.tieba.post.activities.ForumActivity.EXTRA_FORUM_NAME;
/utils\NavigationHelper.java:36:public final class NavigationHelper {
/utils\NavigationHelper.java:37:    public static final String TAG = "NavigationHelper";
/utils\NavigationHelper.java:38:    public static final int ACTION_LOGIN = 1;
/utils\NavigationHelper.java:39:    public static final int ACTION_FORUM = 2;
/utils\NavigationHelper.java:40:    public static final int ACTION_THREAD = 3;
/utils\NavigationHelper.java:41:    public static final int ACTION_URL = 4;
/utils\NavigationHelper.java:42:    public static final int ACTION_FLOOR = 5;
/utils\NavigationHelper.java:43:    public static final int ACTION_THREAD_POST = 6;
/utils\NavigationHelper.java:44:    public static final int ACTION_USER = 7;
/utils\NavigationHelper.java:45:    public static final int ACTION_USER_BY_UID = 8;
/utils\NavigationHelper.java:46:    private Context mContext;
/utils\NavigationHelper.java:47:    private Activity activity;
/utils\NavigationHelper.java:48:    private String activityName;
/utils\NavigationHelper.java:49:    private boolean isActivityContext;
/utils\NavigationHelper.java:51:    private NavigationHelper(Context context) {
/utils\NavigationHelper.java:52:        this(context, context.getClass().getSimpleName());
/utils\NavigationHelper.java:53:    }
/utils\NavigationHelper.java:55:    private NavigationHelper(Context context, String activityName) {
/utils\NavigationHelper.java:56:        this.mContext = context;
/utils\NavigationHelper.java:57:        this.activityName = activityName;
/utils\NavigationHelper.java:58:        if (context instanceof Activity) {
/utils\NavigationHelper.java:59:            this.isActivityContext = true;
/utils\NavigationHelper.java:60:            this.activity = (Activity) context;
/utils\NavigationHelper.java:61:        }
/utils\NavigationHelper.java:62:    }
/utils\NavigationHelper.java:64:    public static NavigationHelper newInstance(Context context) {
/utils\NavigationHelper.java:65:        return new NavigationHelper(context);
/utils\NavigationHelper.java:66:    }
/utils\NavigationHelper.java:68:    public static NavigationHelper newInstance(Context context, String activityName) {
/utils\NavigationHelper.java:69:        return new NavigationHelper(context, activityName);
/utils\NavigationHelper.java:70:    }
/utils\NavigationHelper.java:72:    public static void toUserSpaceWithAnim(Context context, String uid, String avatarUrl, View avatarView) {
/utils\NavigationHelper.java:73:        if (context instanceof Activity) {
/utils\NavigationHelper.java:74:            avatarView.setTransitionName("avatar");
/utils\NavigationHelper.java:75:            context.startActivity(new Intent(context, UserActivity.class)
/utils\NavigationHelper.java:76:                    .putExtra(UserActivity.EXTRA_UID, uid)
/utils\NavigationHelper.java:77:                    .putExtra(UserActivity.EXTRA_AVATAR, avatarUrl), ActivityOptions.makeSceneTransitionAnimation((Activity) context, avatarView, "avatar").toBundle());
/utils\NavigationHelper.java:78:        } else if (context != null) {
/utils\NavigationHelper.java:79:            context.startActivity(new Intent(context, UserActivity.class)
/utils\NavigationHelper.java:80:                    .putExtra(UserActivity.EXTRA_UID, uid)
/utils\NavigationHelper.java:81:                    .putExtra(UserActivity.EXTRA_AVATAR, avatarUrl));
/utils\NavigationHelper.java:82:        }
/utils\NavigationHelper.java:83:    }
/utils\NavigationHelper.java:85:    public boolean interceptWebViewRequest(WebView mWebView, WebResourceRequest request) {
/utils\NavigationHelper.java:86:        return navigationByUrl(request.getUrl().toString(), mWebView.getUrl());
/utils\NavigationHelper.java:87:    }
/utils\NavigationHelper.java:89:    public boolean interceptWebViewRequest(WebView mWebView, String url) {
/utils\NavigationHelper.java:90:        return navigationByUrl(url, mWebView.getUrl());
/utils\NavigationHelper.java:91:    }
/utils\NavigationHelper.java:93:    public void navigationByData(int action) {
/utils\NavigationHelper.java:94:        switch (action) {
/utils\NavigationHelper.java:95:            case ACTION_LOGIN:
/utils\NavigationHelper.java:96:                startActivity(new Intent(mContext, LoginActivity.class));
/utils\NavigationHelper.java:97:                break;
/utils\NavigationHelper.java:98:        }
/utils\NavigationHelper.java:99:    }
/utils\NavigationHelper.java:101:    private void startActivity(Intent intent) {
/utils\NavigationHelper.java:102:        try {
/utils\NavigationHelper.java:103:            mContext.startActivity(intent);
/utils\NavigationHelper.java:104:        } catch (ActivityNotFoundException e) {
/utils\NavigationHelper.java:105:            e.printStackTrace();
/utils\NavigationHelper.java:106:            Toast.makeText(mContext, R.string.toast_nav_failed, Toast.LENGTH_SHORT).show();
/utils\NavigationHelper.java:107:        }
/utils\NavigationHelper.java:108:    }
/utils\NavigationHelper.java:110:    public void navigationByData(int action, String data) {
/utils\NavigationHelper.java:111:        switch (action) {
/utils\NavigationHelper.java:112:            case ACTION_FORUM:
/utils\NavigationHelper.java:113:                Intent intent = new Intent(mContext, ForumActivity.class);
/utils\NavigationHelper.java:114:                intent.putExtra(EXTRA_FORUM_NAME, data);
/utils\NavigationHelper.java:115:                startActivity(intent);
/utils\NavigationHelper.java:116:                break;
/utils\NavigationHelper.java:117:            case ACTION_URL:
/utils\NavigationHelper.java:118:                navigationByUrl(data);
/utils\NavigationHelper.java:119:                break;
/utils\NavigationHelper.java:120:            case ACTION_THREAD_POST:
/utils\NavigationHelper.java:121:                navigationByUrl("https://tieba.baidu.com/mo/q/thread_post?word=" + data);
/utils\NavigationHelper.java:122:                break;
/utils\NavigationHelper.java:123:            case ACTION_USER:
/utils\NavigationHelper.java:124:                navigationByUrl(mContext.getString(R.string.url_user_home, data, 0));
/utils\NavigationHelper.java:125:                break;
/utils\NavigationHelper.java:126:            case ACTION_USER_BY_UID:
/utils\NavigationHelper.java:127:                startActivity(new Intent(mContext, UserActivity.class).putExtra(UserActivity.EXTRA_UID, data));
/utils\NavigationHelper.java:128:                break;
/utils\NavigationHelper.java:129:        }
/utils\NavigationHelper.java:130:    }
/utils\NavigationHelper.java:132:    public void navigationByData(int action, Map<String, String> data) {
/utils\NavigationHelper.java:133:        switch (action) {
/utils\NavigationHelper.java:134:            case ACTION_THREAD:
/utils\NavigationHelper.java:135:                String tid = data.get("tid");
/utils\NavigationHelper.java:136:                String pid = data.get("pid");
/utils\NavigationHelper.java:137:                String seeLzStr = data.get("seeLz");
/utils\NavigationHelper.java:138:                String from = data.get("from");
/utils\NavigationHelper.java:139:                String maxPid = data.get("max_pid");
/utils\NavigationHelper.java:140:                if (tid != null) {
/utils\NavigationHelper.java:141:                    pid = pid == null ? "" : pid;
/utils\NavigationHelper.java:142:                    from = from == null ? "" : from;
/utils\NavigationHelper.java:143:                    maxPid = maxPid == null ? "" : maxPid;
/utils\NavigationHelper.java:144:                    boolean seeLz = (seeLzStr != null && seeLzStr.equalsIgnoreCase("1"));
/utils\NavigationHelper.java:145:                    startActivity(new Intent(mContext, ThreadActivity.class)
/utils\NavigationHelper.java:146:                            .putExtra("tid", tid)
/utils\NavigationHelper.java:147:                            .putExtra("pid", pid)
/utils\NavigationHelper.java:148:                            .putExtra("from", from)
/utils\NavigationHelper.java:149:                            .putExtra("max_pid", maxPid)
/utils\NavigationHelper.java:150:                            .putExtra("seeLz", seeLz));
/utils\NavigationHelper.java:151:                }
/utils\NavigationHelper.java:152:                break;
/utils\NavigationHelper.java:153:            case ACTION_FLOOR:
/utils\NavigationHelper.java:154:                String floorTid = data.get("tid");
/utils\NavigationHelper.java:155:                String floorPid = data.get("pid");
/utils\NavigationHelper.java:156:                String floorSPid = data.get("spid");
/utils\NavigationHelper.java:157:                if (floorTid != null) {
/utils\NavigationHelper.java:158:                    pid = floorPid == null ? "" : floorPid;
/utils\NavigationHelper.java:159:                    String spid = floorSPid == null ? "" : floorSPid;
/utils\NavigationHelper.java:160:                    startActivity(new Intent(mContext, FloorActivity.class)
/utils\NavigationHelper.java:161:                            .putExtra("tid", floorTid)
/utils\NavigationHelper.java:162:                            .putExtra("pid", pid)
/utils\NavigationHelper.java:163:                            .putExtra("spid", spid));
/utils\NavigationHelper.java:164:                }
/utils\NavigationHelper.java:165:                break;
/utils\NavigationHelper.java:166:        }
/utils\NavigationHelper.java:167:    }
/utils\NavigationHelper.java:169:    private boolean navigationByUrl(String url) {
/utils\NavigationHelper.java:170:        return navigationByUrl(url, "");
/utils\NavigationHelper.java:171:    }
/utils\NavigationHelper.java:173:    private boolean navigationByUrl(String url, @NonNull String oldUrl) {
/utils\NavigationHelper.java:174:        Uri uri = Uri.parse(url),
/utils\NavigationHelper.java:175:                oldUri = Uri.parse(oldUrl);
/utils\NavigationHelper.java:176:        String host = uri.getHost(),
/utils\NavigationHelper.java:177:                path = uri.getPath(),
/utils\NavigationHelper.java:178:                oldHost = oldUri.getHost(),
/utils\NavigationHelper.java:179:                oldPath = oldUri.getPath(),
/utils\NavigationHelper.java:180:                scheme = uri.getScheme();
/utils\NavigationHelper.java:181:        if (host == null || scheme == null || path == null) {
/utils\NavigationHelper.java:182:            return false;
/utils\NavigationHelper.java:183:        }
/utils\NavigationHelper.java:184:        if (path.equalsIgnoreCase("/mo/q/checkurl")) {
/utils\NavigationHelper.java:185:            url = uri.getQueryParameter("url");
/utils\NavigationHelper.java:186:            uri = Uri.parse(url);
/utils\NavigationHelper.java:187:            host = uri.getHost();
/utils\NavigationHelper.java:188:            path = uri.getPath();
/utils\NavigationHelper.java:189:            scheme = uri.getScheme();
/utils\NavigationHelper.java:190:            if (host == null || scheme == null || path == null) {
/utils\NavigationHelper.java:191:                return false;
/utils\NavigationHelper.java:192:            }
/utils\NavigationHelper.java:193:        }
/utils\NavigationHelper.java:194:        if (scheme.startsWith("http") || scheme.startsWith("file")) {
/utils\NavigationHelper.java:195:            if (host.equalsIgnoreCase("wapp.baidu.com") || host.equalsIgnoreCase("tieba.baidu.com") || host.equalsIgnoreCase("tiebac.baidu.com")) {
/utils\NavigationHelper.java:196:                if (path.equalsIgnoreCase("/f") || path.equalsIgnoreCase("/mo/q/m")) {
/utils\NavigationHelper.java:197:                    String kw = uri.getQueryParameter("kw");
/utils\NavigationHelper.java:198:                    String word = uri.getQueryParameter("word");
/utils\NavigationHelper.java:199:                    String kz = uri.getQueryParameter("kz");
/utils\NavigationHelper.java:200:                    if (kw != null) {
/utils\NavigationHelper.java:201:                        if (activityName.startsWith("WebViewActivity") && isPostUri(oldUri)) {
/utils\NavigationHelper.java:202:                            if (this.isActivityContext && activity != null) activity.finish();
/utils\NavigationHelper.java:203:                            return true;
/utils\NavigationHelper.java:204:                        } else if (!activityName.startsWith("ForumActivity")) {
/utils\NavigationHelper.java:205:                            navigationByData(ACTION_FORUM, kw);
/utils\NavigationHelper.java:206:                            return true;
/utils\NavigationHelper.java:207:                        }
/utils\NavigationHelper.java:208:                    } else if (word != null) {
/utils\NavigationHelper.java:209:                        if (!activityName.startsWith("ForumActivity")) {
/utils\NavigationHelper.java:210:                            navigationByData(ACTION_FORUM, word);
/utils\NavigationHelper.java:211:                            return true;
/utils\NavigationHelper.java:212:                        }
/utils\NavigationHelper.java:213:                    } else if (kz != null) {
/utils\NavigationHelper.java:214:                        Intent intent = new Intent(mContext, ThreadActivity.class);
/utils\NavigationHelper.java:215:                        intent.putExtra("url", url);
/utils\NavigationHelper.java:216:                        startActivity(intent);
/utils\NavigationHelper.java:217:                        return true;
/utils\NavigationHelper.java:218:                    }
/utils\NavigationHelper.java:219:                } else if (path.startsWith("/index/tbwise") || path.equalsIgnoreCase("/")) {
/utils\NavigationHelper.java:220:                    if (activityName.startsWith("ForumActivity")) {
/utils\NavigationHelper.java:221:                        if (this.isActivityContext) activity.finish();
/utils\NavigationHelper.java:222:                        Toast.makeText(mContext, "没找到内容鸭", Toast.LENGTH_SHORT).show();
/utils\NavigationHelper.java:223:                    } else if (oldPath != null && oldPath.startsWith("/mo/q/accountstatus")) {
/utils\NavigationHelper.java:224:                        if (this.isActivityContext) activity.finish();
/utils\NavigationHelper.java:225:                    }
/utils\NavigationHelper.java:226:                    return false;
/utils\NavigationHelper.java:227:                } else if (path.startsWith("/p/")) {
/utils\NavigationHelper.java:228:                    Intent intent = new Intent(mContext, ThreadActivity.class);
/utils\NavigationHelper.java:229:                    intent.putExtra("url", url);
/utils\NavigationHelper.java:230:                    startActivity(intent);
/utils\NavigationHelper.java:231:                    return true;
/utils\NavigationHelper.java:232:                }
/utils\NavigationHelper.java:233:            }
/utils\NavigationHelper.java:234:            if (!path.contains("android_asset")) {
/utils\NavigationHelper.java:235:                if (!(activityName.startsWith("WebViewActivity") || activityName.startsWith("LoginActivity"))) {
/utils\NavigationHelper.java:236:                    boolean isTiebaLink = host.contains("tieba.baidu.com") || host.contains("wappass.baidu.com") || host.contains("ufosdk.baidu.com") || host.contains("m.help.baidu.com");
/utils\NavigationHelper.java:237:                    if (isTiebaLink || SharedPreferencesUtil.get(mContext, SharedPreferencesUtil.SP_SETTINGS).getBoolean("use_webview", true)) {
/utils\NavigationHelper.java:238:                        startActivity(new Intent(mContext, WebViewActivity.class).putExtra("url", url));
/utils\NavigationHelper.java:239:                        return true;
/utils\NavigationHelper.java:240:                    } else {
/utils\NavigationHelper.java:241:                        if (SharedPreferencesUtil.get(mContext, SharedPreferencesUtil.SP_SETTINGS).getBoolean("use_custom_tabs", true)) {
/utils\NavigationHelper.java:242:                            CustomTabsIntent.Builder intentBuilder = new CustomTabsIntent.Builder()
/utils\NavigationHelper.java:243:                                    .setShowTitle(true)
/utils\NavigationHelper.java:244:                                    .setToolbarColor(ThemeUtils.getColorByAttr(mContext, R.attr.colorToolbar));
/utils\NavigationHelper.java:245:                            try {
/utils\NavigationHelper.java:246:                                intentBuilder.build().launchUrl(mContext, uri);
/utils\NavigationHelper.java:247:                            } catch (ActivityNotFoundException e) {
/utils\NavigationHelper.java:248:                                startActivity(new Intent(Intent.ACTION_VIEW, uri));
/utils\NavigationHelper.java:249:                            }
/utils\NavigationHelper.java:250:                        } else {
/utils\NavigationHelper.java:251:                            startActivity(new Intent(Intent.ACTION_VIEW, uri));
/utils\NavigationHelper.java:252:                        }
/utils\NavigationHelper.java:253:                    }
/utils\NavigationHelper.java:254:                }
/utils\NavigationHelper.java:255:            }
/utils\NavigationHelper.java:256:            return false;
/utils\NavigationHelper.java:257:        } else if (scheme.startsWith("intent")) {
/utils\NavigationHelper.java:258:            Intent intent;
/utils\NavigationHelper.java:259:            String appName;
/utils\NavigationHelper.java:260:            try {
/utils\NavigationHelper.java:261:                intent = Intent.parseUri(url, Intent.URI_INTENT_SCHEME);
/utils\NavigationHelper.java:262:                intent.addCategory(Intent.CATEGORY_BROWSABLE);
/utils\NavigationHelper.java:263:                intent.setComponent(null);
/utils\NavigationHelper.java:264:                intent.setSelector(null);
/utils\NavigationHelper.java:265:                List<ResolveInfo> resolves = mContext.getPackageManager().queryIntentActivities(intent, 0);
/utils\NavigationHelper.java:266:                if (resolves.size() > 0) {
/utils\NavigationHelper.java:267:                    if (resolves.size() == 1) {
/utils\NavigationHelper.java:268:                        ResolveInfo resolveInfo = resolves.get(0);
/utils\NavigationHelper.java:269:                        PackageManager pManager = mContext.getPackageManager();
/utils\NavigationHelper.java:270:                        appName = resolveInfo.loadLabel(pManager).toString();
/utils\NavigationHelper.java:271:                    } else {
/utils\NavigationHelper.java:272:                        appName = mContext.getString(R.string.name_multiapp);
/utils\NavigationHelper.java:273:                    }
/utils\NavigationHelper.java:274:                    new PermissionDialog(mContext,
/utils\NavigationHelper.java:275:                            new PermissionBean(PermissionDialog.CustomPermission.PERMISSION_START_APP,
/utils\NavigationHelper.java:276:                                    oldHost + scheme,
/utils\NavigationHelper.java:277:                                    mContext.getString(R.string.title_start_app_permission, oldHost, appName),
/utils\NavigationHelper.java:278:                                    R.drawable.ic_round_exit_to_app))
/utils\NavigationHelper.java:279:                            .setOnGrantedCallback(isForever -> startActivity(intent))
/utils\NavigationHelper.java:280:                            .show();
/utils\NavigationHelper.java:281:                }
/utils\NavigationHelper.java:282:                return true;
/utils\NavigationHelper.java:283:            } catch (URISyntaxException e) {
/utils\NavigationHelper.java:284:                e.printStackTrace();
/utils\NavigationHelper.java:285:            }
/utils\NavigationHelper.java:286:        } else {
/utils\NavigationHelper.java:287:            try {
/utils\NavigationHelper.java:288:                String appName;
/utils\NavigationHelper.java:289:                final Intent intent = new Intent(Intent.ACTION_VIEW,
/utils\NavigationHelper.java:290:                        uri);
/utils\NavigationHelper.java:291:                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK
/utils\NavigationHelper.java:292:                        | Intent.FLAG_ACTIVITY_SINGLE_TOP);
/utils\NavigationHelper.java:293:                List<ResolveInfo> resolves = mContext.getPackageManager().queryIntentActivities(intent, 0);
/utils\NavigationHelper.java:294:                if (resolves.size() > 0) {
/utils\NavigationHelper.java:295:                    if (resolves.size() == 1) {
/utils\NavigationHelper.java:296:                        ResolveInfo resolveInfo = resolves.get(0);
/utils\NavigationHelper.java:297:                        PackageManager pManager = mContext.getPackageManager();
/utils\NavigationHelper.java:298:                        appName = resolveInfo.loadLabel(pManager).toString();
/utils\NavigationHelper.java:299:                    } else {
/utils\NavigationHelper.java:300:                        appName = mContext.getString(R.string.name_multiapp);
/utils\NavigationHelper.java:301:                    }
/utils\NavigationHelper.java:302:                    new PermissionDialog(mContext,
/utils\NavigationHelper.java:303:                            new PermissionBean(PermissionDialog.CustomPermission.PERMISSION_START_APP,
/utils\NavigationHelper.java:304:                                    oldHost + scheme,
/utils\NavigationHelper.java:305:                                    mContext.getString(R.string.title_start_app_permission, oldHost, appName),
/utils\NavigationHelper.java:306:                                    R.drawable.ic_round_exit_to_app))
/utils\NavigationHelper.java:307:                            .setOnGrantedCallback(isForever -> startActivity(intent))
/utils\NavigationHelper.java:308:                            .show();
/utils\NavigationHelper.java:309:                }
/utils\NavigationHelper.java:310:                return true;
/utils\NavigationHelper.java:311:            } catch (Exception e) {
/utils\NavigationHelper.java:312:                e.printStackTrace();
/utils\NavigationHelper.java:313:            }
/utils\NavigationHelper.java:314:        }
/utils\NavigationHelper.java:315:        return true;
/utils\NavigationHelper.java:316:    }
/utils\NavigationHelper.java:318:    private boolean isPostUri(Uri uri) {
/utils\NavigationHelper.java:319:        String host = uri.getHost();
/utils\NavigationHelper.java:320:        String path = uri.getPath();
/utils\NavigationHelper.java:321:        String word = uri.getQueryParameter("word");
/utils\NavigationHelper.java:322:        if (host == null || path == null) {
/utils\NavigationHelper.java:323:            return false;
/utils\NavigationHelper.java:324:        }
/utils\NavigationHelper.java:325:        return path.equalsIgnoreCase("/mo/q/thread_post") && word != null;
/utils\NavigationHelper.java:326:    }
/utils\NavigationHelper.java:327:}/utils\NetworkUtil.java:1:package com.huanchengfly.tieba.post.utils;
/utils\NetworkUtil.java:3:import android.content.Context;
/utils\NetworkUtil.java:4:import android.net.ConnectivityManager;
/utils\NetworkUtil.java:5:import android.net.NetworkInfo;
/utils\NetworkUtil.java:7:public final class NetworkUtil {
/utils\NetworkUtil.java:8:    private NetworkUtil() {
/utils\NetworkUtil.java:9:    }
/utils\NetworkUtil.java:11:    public static boolean isNetworkConnected(Context context) {
/utils\NetworkUtil.java:12:        if (context == null) {
/utils\NetworkUtil.java:13:            return false;
/utils\NetworkUtil.java:14:        }
/utils\NetworkUtil.java:15:        ConnectivityManager mConnectivityManager = (ConnectivityManager) context
/utils\NetworkUtil.java:16:                .getSystemService(Context.CONNECTIVITY_SERVICE);
/utils\NetworkUtil.java:17:        if (mConnectivityManager == null) {
/utils\NetworkUtil.java:18:            return false;
/utils\NetworkUtil.java:19:        }
/utils\NetworkUtil.java:20:        NetworkInfo mNetworkInfo = mConnectivityManager.getActiveNetworkInfo();
/utils\NetworkUtil.java:21:        if (mNetworkInfo == null) {
/utils\NetworkUtil.java:22:            return false;
/utils\NetworkUtil.java:23:        }
/utils\NetworkUtil.java:24:        return mNetworkInfo.isConnected();
/utils\NetworkUtil.java:25:    }
/utils\NetworkUtil.java:27:    public static boolean isWifiConnected(Context context) {
/utils\NetworkUtil.java:28:        if (context == null) {
/utils\NetworkUtil.java:29:            return false;
/utils\NetworkUtil.java:30:        }
/utils\NetworkUtil.java:31:        ConnectivityManager mConnectivityManager = (ConnectivityManager) context
/utils\NetworkUtil.java:32:                .getSystemService(Context.CONNECTIVITY_SERVICE);
/utils\NetworkUtil.java:33:        if (mConnectivityManager == null) {
/utils\NetworkUtil.java:34:            return false;
/utils\NetworkUtil.java:35:        }
/utils\NetworkUtil.java:36:        NetworkInfo mWiFiNetworkInfo = mConnectivityManager
/utils\NetworkUtil.java:37:                .getNetworkInfo(ConnectivityManager.TYPE_WIFI);
/utils\NetworkUtil.java:39:        if (mWiFiNetworkInfo == null) {
/utils\NetworkUtil.java:40:            return false;
/utils\NetworkUtil.java:41:        }
/utils\NetworkUtil.java:42:        return mWiFiNetworkInfo.isConnected();
/utils\NetworkUtil.java:43:    }
/utils\NetworkUtil.java:45:    public static boolean isMobileConnected(Context context) {
/utils\NetworkUtil.java:46:        if (context == null) {
/utils\NetworkUtil.java:47:            return false;
/utils\NetworkUtil.java:48:        }
/utils\NetworkUtil.java:49:        ConnectivityManager mConnectivityManager = (ConnectivityManager) context
/utils\NetworkUtil.java:50:                .getSystemService(Context.CONNECTIVITY_SERVICE);
/utils\NetworkUtil.java:51:        if (mConnectivityManager == null) {
/utils\NetworkUtil.java:52:            return false;
/utils\NetworkUtil.java:53:        }
/utils\NetworkUtil.java:54:        NetworkInfo mMobileNetworkInfo = mConnectivityManager
/utils\NetworkUtil.java:55:                .getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
/utils\NetworkUtil.java:56:        if (mMobileNetworkInfo == null) {
/utils\NetworkUtil.java:57:            return false;
/utils\NetworkUtil.java:58:        }
/utils\NetworkUtil.java:59:        return mMobileNetworkInfo.isConnected();
/utils\NetworkUtil.java:60:    }
/utils\NetworkUtil.java:61:}/utils\PermissionUtil.java:1:package com.huanchengfly.tieba.post.utils;
/utils\PermissionUtil.java:3:import android.annotation.SuppressLint;
/utils\PermissionUtil.java:4:import android.content.Context;
/utils\PermissionUtil.java:5:import android.text.TextUtils;
/utils\PermissionUtil.java:6:import android.widget.Toast;
/utils\PermissionUtil.java:8:import androidx.annotation.Nullable;
/utils\PermissionUtil.java:9:import androidx.annotation.StringRes;
/utils\PermissionUtil.java:11:import com.huanchengfly.tieba.post.R;
/utils\PermissionUtil.java:12:import com.huanchengfly.tieba.post.utils.DialogUtil;
/utils\PermissionUtil.java:13:import com.yanzhenjie.permission.Action;
/utils\PermissionUtil.java:14:import com.yanzhenjie.permission.AndPermission;
/utils\PermissionUtil.java:16:import java.util.ArrayList;
/utils\PermissionUtil.java:17:import java.util.Arrays;
/utils\PermissionUtil.java:18:import java.util.List;
/utils\PermissionUtil.java:20:public class PermissionUtil {
/utils\PermissionUtil.java:21:    public static void askPermission(Context context, Permission... permissions) {
/utils\PermissionUtil.java:22:        askPermission(context, null, permissions);
/utils\PermissionUtil.java:23:    }
/utils\PermissionUtil.java:25:    public static void askPermission(Context context, Action<List<String>> action, Permission... permissions) {
/utils\PermissionUtil.java:26:        askPermission(context, action, context.getString(R.string.tip_no_permission), permissions);
/utils\PermissionUtil.java:27:    }
/utils\PermissionUtil.java:29:    public static void askPermission(Context context, Action<List<String>> action, @StringRes int deniedTip, Permission... permissions) {
/utils\PermissionUtil.java:30:        askPermission(context, action, context.getString(deniedTip), permissions);
/utils\PermissionUtil.java:31:    }
/utils\PermissionUtil.java:33:    private static String getMessage(Context context, Permission... permissions) {
/utils\PermissionUtil.java:34:        StringBuilder stringBuilder = new StringBuilder(context.getString(R.string.message_need_permission));
/utils\PermissionUtil.java:35:        for (Permission permission : permissions) {
/utils\PermissionUtil.java:36:            if (permission.isGroup()) {
/utils\PermissionUtil.java:37:                if (!AndPermission.hasPermissions(context, permission.getPermissionGroup())) {
/utils\PermissionUtil.java:38:                    stringBuilder.append(context.getString(R.string.message_permission_desc, com.yanzhenjie.permission.runtime.Permission.transformText(context, permission.getPermissionGroup()).get(0), permission.getDesc()));
/utils\PermissionUtil.java:39:                }
/utils\PermissionUtil.java:40:            } else {
/utils\PermissionUtil.java:41:                if (!AndPermission.hasPermissions(context, permission.getPermission())) {
/utils\PermissionUtil.java:42:                    stringBuilder.append(context.getString(R.string.message_permission_desc, com.yanzhenjie.permission.runtime.Permission.transformText(context, permission.getPermission()).get(0), permission.getDesc()));
/utils\PermissionUtil.java:43:                }
/utils\PermissionUtil.java:44:            }
/utils\PermissionUtil.java:45:        }
/utils\PermissionUtil.java:46:        stringBuilder.append(context.getString(R.string.tip_regrant_permission, context.getString(R.string.button_sure_default)));
/utils\PermissionUtil.java:47:        return stringBuilder.toString();
/utils\PermissionUtil.java:48:    }
/utils\PermissionUtil.java:50:    @SuppressLint("WrongConstant")
/utils\PermissionUtil.java:51:    public static void askPermission(Context context, @Nullable Action<List<String>> action, @Nullable String deniedTip, Permission... permissions) {
/utils\PermissionUtil.java:52:        List<String> permissionList = new ArrayList<>();
/utils\PermissionUtil.java:53:        for (Permission permission : permissions) {
/utils\PermissionUtil.java:54:            if (permission.isGroup()) {
/utils\PermissionUtil.java:55:                permissionList.addAll(Arrays.asList(permission.getPermissionGroup()));
/utils\PermissionUtil.java:56:            } else {
/utils\PermissionUtil.java:57:                permissionList.add(permission.getPermission());
/utils\PermissionUtil.java:58:            }
/utils\PermissionUtil.java:59:        }
/utils\PermissionUtil.java:60:        String[] permissionArray = permissionList.toArray(new String[0]);
/utils\PermissionUtil.java:61:        if (AndPermission.hasPermissions(context, permissionArray) && action != null) {
/utils\PermissionUtil.java:62:            action.onAction(permissionList);
/utils\PermissionUtil.java:63:            return;
/utils\PermissionUtil.java:64:        }
/utils\PermissionUtil.java:65:        AndPermission.with(context)
/utils\PermissionUtil.java:66:                .runtime()
/utils\PermissionUtil.java:67:                .permission(permissionArray)
/utils\PermissionUtil.java:68:                .rationale((c, data, executor) -> {
/utils\PermissionUtil.java:69:                    DialogUtil.build(c)
/utils\PermissionUtil.java:70:                            .setCancelable(false)
/utils\PermissionUtil.java:71:                            .setTitle(R.string.title_dialog_permission)
/utils\PermissionUtil.java:72:                            .setMessage(getMessage(c, permissions))
/utils\PermissionUtil.java:73:                            .setPositiveButton(R.string.button_sure_default, (dialog, which) -> {
/utils\PermissionUtil.java:74:                                executor.execute();
/utils\PermissionUtil.java:75:                            })
/utils\PermissionUtil.java:76:                            .setNegativeButton(R.string.button_cancel, (dialog, which) -> {
/utils\PermissionUtil.java:77:                                executor.cancel();
/utils\PermissionUtil.java:78:                            })
/utils\PermissionUtil.java:79:                            .create()
/utils\PermissionUtil.java:80:                            .show();
/utils\PermissionUtil.java:81:                })
/utils\PermissionUtil.java:82:                .onGranted(action)
/utils\PermissionUtil.java:83:                .onDenied(data -> {
/utils\PermissionUtil.java:84:                    if (!TextUtils.isEmpty(deniedTip))
/utils\PermissionUtil.java:85:                        Toast.makeText(context, deniedTip, Toast.LENGTH_SHORT).show();
/utils\PermissionUtil.java:86:                    boolean hasAlwaysDeniedPermission = AndPermission.hasAlwaysDeniedPermission(context, data);
/utils\PermissionUtil.java:87:                    if (hasAlwaysDeniedPermission) {
/utils\PermissionUtil.java:88:                        AndPermission.with(context)
/utils\PermissionUtil.java:89:                                .runtime()
/utils\PermissionUtil.java:90:                                .setting()
/utils\PermissionUtil.java:91:                                .start(0);
/utils\PermissionUtil.java:92:                    }
/utils\PermissionUtil.java:93:                    /*
/utils\PermissionUtil.java:94:                    DialogUtil.build(context)
/utils\PermissionUtil.java:95:                            .setCancelable(false)
/utils\PermissionUtil.java:96:                            .setTitle(R.string.title_dialog_permission)
/utils\PermissionUtil.java:97:                            .setMessage(getMessage(context, permissions))
/utils\PermissionUtil.java:98:                            .setPositiveButton(R.string.button_sure_default, (dialog, which) -> {
/utils\PermissionUtil.java:99:                                if (hasAlwaysDeniedPermission) {
/utils\PermissionUtil.java:100:                                    AndPermission.with(context)
/utils\PermissionUtil.java:101:                                            .runtime()
/utils\PermissionUtil.java:102:                                            .setting()
/utils\PermissionUtil.java:103:                                            .onComeback(() -> askPermission(context, action, deniedTip, permissions))
/utils\PermissionUtil.java:104:                                            .start();
/utils\PermissionUtil.java:105:                                } else {
/utils\PermissionUtil.java:106:                                    askPermission(context, action, deniedTip, permissions);
/utils\PermissionUtil.java:107:                                }
/utils\PermissionUtil.java:108:                            })
/utils\PermissionUtil.java:109:                            .setNegativeButton(R.string.button_cancel, (dialog, which) -> {
/utils\PermissionUtil.java:110:                                if (!TextUtils.isEmpty(deniedTip))
/utils\PermissionUtil.java:111:                                    Toast.makeText(context, deniedTip, Toast.LENGTH_SHORT).show();
/utils\PermissionUtil.java:112:                            })
/utils\PermissionUtil.java:113:                            .create()
/utils\PermissionUtil.java:114:                            .show();
/utils\PermissionUtil.java:115:                            */
/utils\PermissionUtil.java:116:                })
/utils\PermissionUtil.java:117:                .start();
/utils\PermissionUtil.java:118:    }
/utils\PermissionUtil.java:120:    public static class Permission {
/utils\PermissionUtil.java:121:        private boolean isGroup;
/utils\PermissionUtil.java:122:        private String permission;
/utils\PermissionUtil.java:123:        private String[] permissionGroup;
/utils\PermissionUtil.java:124:        private String desc;
/utils\PermissionUtil.java:126:        public Permission(String permission, String desc) {
/utils\PermissionUtil.java:127:            this.isGroup = false;
/utils\PermissionUtil.java:128:            this.permission = permission;
/utils\PermissionUtil.java:129:            this.desc = desc;
/utils\PermissionUtil.java:130:        }
/utils\PermissionUtil.java:132:        public Permission(String[] permissionGroup, String desc) {
/utils\PermissionUtil.java:133:            this.isGroup = true;
/utils\PermissionUtil.java:134:            this.permissionGroup = permissionGroup;
/utils\PermissionUtil.java:135:            this.desc = desc;
/utils\PermissionUtil.java:136:        }
/utils\PermissionUtil.java:138:        public String getDesc() {
/utils\PermissionUtil.java:139:            return desc;
/utils\PermissionUtil.java:140:        }
/utils\PermissionUtil.java:142:        public boolean isGroup() {
/utils\PermissionUtil.java:143:            return isGroup;
/utils\PermissionUtil.java:144:        }
/utils\PermissionUtil.java:146:        public String getPermission() {
/utils\PermissionUtil.java:147:            return permission;
/utils\PermissionUtil.java:148:        }
/utils\PermissionUtil.java:150:        public String[] getPermissionGroup() {
/utils\PermissionUtil.java:151:            return permissionGroup;
/utils\PermissionUtil.java:152:        }
/utils\PermissionUtil.java:153:    }
/utils\PermissionUtil.java:154:}/utils\PopupUtil.java:1:package com.huanchengfly.tieba.post.utils;
/utils\PopupUtil.java:3:import android.annotation.SuppressLint;
/utils\PopupUtil.java:4:import android.content.Context;
/utils\PopupUtil.java:5:import android.view.View;
/utils\PopupUtil.java:7:import androidx.appcompat.view.menu.MenuPopupHelper;
/utils\PopupUtil.java:8:import androidx.appcompat.widget.ListPopupWindow;
/utils\PopupUtil.java:9:import androidx.appcompat.widget.MenuPopupWindow;
/utils\PopupUtil.java:10:import androidx.appcompat.widget.PopupMenu;
/utils\PopupUtil.java:12:import com.huanchengfly.tieba.post.R;
/utils\PopupUtil.java:13:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/utils\PopupUtil.java:15:import java.lang.reflect.Field;
/utils\PopupUtil.java:17:@SuppressLint("RestrictedApi")
/utils\PopupUtil.java:18:public class PopupUtil {
/utils\PopupUtil.java:19:    private PopupUtil() {
/utils\PopupUtil.java:20:    }
/utils\PopupUtil.java:22:    public static void replaceBackground(ListPopupWindow listPopupWindow) {
/utils\PopupUtil.java:23:        try {
/utils\PopupUtil.java:24:            Field contextField = ListPopupWindow.class.getDeclaredField("mContext");
/utils\PopupUtil.java:25:            contextField.setAccessible(true);
/utils\PopupUtil.java:26:            Context context = (Context) contextField.get(listPopupWindow);
/utils\PopupUtil.java:27:            if (ThemeUtil.THEME_TRANSLUCENT.equals(ThemeUtil.getTheme(context))) {
/utils\PopupUtil.java:28:                listPopupWindow.setBackgroundDrawable(ThemeUtils.tintDrawable(context.getDrawable(R.drawable.bg_popup), context.getResources().getColor(R.color.theme_color_background_dark)));
/utils\PopupUtil.java:29:            } else {
/utils\PopupUtil.java:30:                listPopupWindow.setBackgroundDrawable(ThemeUtils.tintDrawable(context.getDrawable(R.drawable.bg_popup), ThemeUtils.getColorByAttr(context, R.attr.colorCard)));
/utils\PopupUtil.java:31:            }
/utils\PopupUtil.java:32:        } catch (NoSuchFieldException e) {
/utils\PopupUtil.java:33:            e.printStackTrace();
/utils\PopupUtil.java:34:        } catch (IllegalAccessException e) {
/utils\PopupUtil.java:35:            e.printStackTrace();
/utils\PopupUtil.java:36:        }
/utils\PopupUtil.java:37:    }
/utils\PopupUtil.java:39:    private static void replaceBackground(PopupMenu popupMenu) {
/utils\PopupUtil.java:40:        try {
/utils\PopupUtil.java:41:            Field contextField = PopupMenu.class.getDeclaredField("mContext");
/utils\PopupUtil.java:42:            contextField.setAccessible(true);
/utils\PopupUtil.java:43:            Context context = (Context) contextField.get(popupMenu);
/utils\PopupUtil.java:44:            Field field = PopupMenu.class.getDeclaredField("mPopup");
/utils\PopupUtil.java:45:            field.setAccessible(true);
/utils\PopupUtil.java:46:            MenuPopupHelper menuPopupHelper = (MenuPopupHelper) field.get(popupMenu);
/utils\PopupUtil.java:47:            Object obj = menuPopupHelper.getPopup();
/utils\PopupUtil.java:48:            Field popupField = obj.getClass().getDeclaredField("mPopup");
/utils\PopupUtil.java:49:            popupField.setAccessible(true);
/utils\PopupUtil.java:50:            MenuPopupWindow menuPopupWindow = (MenuPopupWindow) popupField.get(obj);
/utils\PopupUtil.java:51:            if (ThemeUtil.THEME_TRANSLUCENT.equals(ThemeUtil.getTheme(context))) {
/utils\PopupUtil.java:52:                menuPopupWindow.setBackgroundDrawable(ThemeUtils.tintDrawable(context.getDrawable(R.drawable.bg_popup), context.getResources().getColor(R.color.white)));
/utils\PopupUtil.java:53:            } else {
/utils\PopupUtil.java:54:                menuPopupWindow.setBackgroundDrawable(ThemeUtils.tintDrawable(context.getDrawable(R.drawable.bg_popup), ThemeUtils.getColorByAttr(context, R.attr.colorCard)));
/utils\PopupUtil.java:55:            }
/utils\PopupUtil.java:56:        } catch (NoSuchFieldException e) {
/utils\PopupUtil.java:57:            e.printStackTrace();
/utils\PopupUtil.java:58:        } catch (IllegalAccessException e) {
/utils\PopupUtil.java:59:            e.printStackTrace();
/utils\PopupUtil.java:60:        }
/utils\PopupUtil.java:61:    }
/utils\PopupUtil.java:63:    public static PopupMenu create(View anchor) {
/utils\PopupUtil.java:64:        PopupMenu popupMenu = new PopupMenu(anchor.getContext(), anchor);
/utils\PopupUtil.java:65:        replaceBackground(popupMenu);
/utils\PopupUtil.java:66:        return popupMenu;
/utils\PopupUtil.java:67:    }
/utils\PopupUtil.java:68:}
/utils\ReceiverUtil.java:1:package com.huanchengfly.tieba.post.utils;
/utils\ReceiverUtil.java:3:import android.content.IntentFilter;
/utils\ReceiverUtil.java:5:public class ReceiverUtil {
/utils\ReceiverUtil.java:6:    public static IntentFilter createIntentFilter(String action) {
/utils\ReceiverUtil.java:7:        IntentFilter filter = new IntentFilter();
/utils\ReceiverUtil.java:8:        filter.addAction(action);
/utils\ReceiverUtil.java:9:        return filter;
/utils\ReceiverUtil.java:10:    }
/utils\ReceiverUtil.java:11:}
/utils\SharedPreferencesUtil.java:1:package com.huanchengfly.tieba.post.utils;
/utils\SharedPreferencesUtil.java:3:import android.content.Context;
/utils\SharedPreferencesUtil.java:4:import android.content.SharedPreferences;
/utils\SharedPreferencesUtil.java:6:import androidx.annotation.StringDef;
/utils\SharedPreferencesUtil.java:8:import com.huanchengfly.tieba.post.BaseApplication;
/utils\SharedPreferencesUtil.java:10:import java.lang.annotation.Retention;
/utils\SharedPreferencesUtil.java:11:import java.lang.annotation.RetentionPolicy;
/utils\SharedPreferencesUtil.java:13:public class SharedPreferencesUtil {
/utils\SharedPreferencesUtil.java:14:    public static final String SP_APP_DATA = "appData";
/utils\SharedPreferencesUtil.java:15:    public static final String SP_DRAFT = "draft";
/utils\SharedPreferencesUtil.java:16:    public static final String SP_SETTINGS = "settings";
/utils\SharedPreferencesUtil.java:17:    public static final String SP_PERMISSION = "permission";
/utils\SharedPreferencesUtil.java:18:    public static final String SP_IGNORE_VERSIONS = "ignore_version";
/utils\SharedPreferencesUtil.java:19:    public static final String SP_WEBVIEW_INFO = "webview_info";
/utils\SharedPreferencesUtil.java:21:    public static SharedPreferences get(@Preferences String name) {
/utils\SharedPreferencesUtil.java:22:        return get(BaseApplication.getInstance(), name);
/utils\SharedPreferencesUtil.java:23:    }
/utils\SharedPreferencesUtil.java:25:    public static SharedPreferences get(Context context, @Preferences String name) {
/utils\SharedPreferencesUtil.java:26:        return context.getSharedPreferences(name, Context.MODE_PRIVATE);
/utils\SharedPreferencesUtil.java:27:    }
/utils\SharedPreferencesUtil.java:29:    public static boolean put(SharedPreferences sharedPreferences, String key, String value) {
/utils\SharedPreferencesUtil.java:30:        return sharedPreferences.edit().putString(key, value).commit();
/utils\SharedPreferencesUtil.java:31:    }
/utils\SharedPreferencesUtil.java:33:    public static boolean put(SharedPreferences sharedPreferences, String key, boolean value) {
/utils\SharedPreferencesUtil.java:34:        return sharedPreferences.edit().putBoolean(key, value).commit();
/utils\SharedPreferencesUtil.java:35:    }
/utils\SharedPreferencesUtil.java:37:    public static boolean put(SharedPreferences sharedPreferences, String key, int value) {
/utils\SharedPreferencesUtil.java:38:        return sharedPreferences.edit().putInt(key, value).commit();
/utils\SharedPreferencesUtil.java:39:    }
/utils\SharedPreferencesUtil.java:41:    public static boolean put(Context context, @Preferences String preference, String key, String value) {
/utils\SharedPreferencesUtil.java:42:        return put(get(context, preference), key, value);
/utils\SharedPreferencesUtil.java:43:    }
/utils\SharedPreferencesUtil.java:45:    public static boolean put(Context context, @Preferences String preference, String key, boolean value) {
/utils\SharedPreferencesUtil.java:46:        return put(get(context, preference), key, value);
/utils\SharedPreferencesUtil.java:47:    }
/utils\SharedPreferencesUtil.java:49:    public static boolean put(Context context, @Preferences String preference, String key, int value) {
/utils\SharedPreferencesUtil.java:50:        return put(get(context, preference), key, value);
/utils\SharedPreferencesUtil.java:51:    }
/utils\SharedPreferencesUtil.java:53:    @StringDef({SP_APP_DATA, SP_IGNORE_VERSIONS, SP_PERMISSION, SP_SETTINGS, SP_WEBVIEW_INFO, SP_DRAFT})
/utils\SharedPreferencesUtil.java:54:    @Retention(RetentionPolicy.SOURCE)
/utils\SharedPreferencesUtil.java:55:    public @interface Preferences {
/utils\SharedPreferencesUtil.java:56:    }
/utils\SharedPreferencesUtil.java:57:}
/utils\StatusBarUtil.java:1:package com.huanchengfly.tieba.post.utils;
/utils\StatusBarUtil.java:3:import android.app.Activity;
/utils\StatusBarUtil.java:4:import android.content.Context;
/utils\StatusBarUtil.java:5:import android.graphics.Color;
/utils\StatusBarUtil.java:6:import android.view.View;
/utils\StatusBarUtil.java:7:import android.view.Window;
/utils\StatusBarUtil.java:8:import android.view.WindowManager;
/utils\StatusBarUtil.java:10:import androidx.annotation.NonNull;
/utils\StatusBarUtil.java:12:import java.lang.reflect.Field;
/utils\StatusBarUtil.java:13:import java.lang.reflect.Method;
/utils\StatusBarUtil.java:15:public class StatusBarUtil {
/utils\StatusBarUtil.java:16:    /**
/utils\StatusBarUtil.java:17:     * 修改 MIUI V6  以上状态栏颜色
/utils\StatusBarUtil.java:18:     */
/utils\StatusBarUtil.java:19:    private static void setMIUIStatusBarDarkIcon(@NonNull Activity activity, boolean darkIcon) {
/utils\StatusBarUtil.java:20:        Class<? extends Window> clazz = activity.getWindow().getClass();
/utils\StatusBarUtil.java:21:        try {
/utils\StatusBarUtil.java:22:            Class<?> layoutParams = Class.forName("android.view.MiuiWindowManager$LayoutParams");
/utils\StatusBarUtil.java:23:            Field field = layoutParams.getField("EXTRA_FLAG_STATUS_BAR_DARK_MODE");
/utils\StatusBarUtil.java:24:            int darkModeFlag = field.getInt(layoutParams);
/utils\StatusBarUtil.java:25:            Method extraFlagField = clazz.getMethod("setExtraFlags", int.class, int.class);
/utils\StatusBarUtil.java:26:            extraFlagField.invoke(activity.getWindow(), darkIcon ? darkModeFlag : 0, darkModeFlag);
/utils\StatusBarUtil.java:27:        } catch (Exception e) {
/utils\StatusBarUtil.java:28:            //e.printStackTrace();
/utils\StatusBarUtil.java:29:        }
/utils\StatusBarUtil.java:30:    }
/utils\StatusBarUtil.java:32:    /**
/utils\StatusBarUtil.java:33:     * 修改魅族状态栏字体颜色 Flyme 4.0
/utils\StatusBarUtil.java:34:     */
/utils\StatusBarUtil.java:35:    private static void setMeizuStatusBarDarkIcon(@NonNull Activity activity, boolean darkIcon) {
/utils\StatusBarUtil.java:36:        try {
/utils\StatusBarUtil.java:37:            WindowManager.LayoutParams lp = activity.getWindow().getAttributes();
/utils\StatusBarUtil.java:38:            Field darkFlag = WindowManager.LayoutParams.class.getDeclaredField("MEIZU_FLAG_DARK_STATUS_BAR_ICON");
/utils\StatusBarUtil.java:39:            Field meizuFlags = WindowManager.LayoutParams.class.getDeclaredField("meizuFlags");
/utils\StatusBarUtil.java:40:            darkFlag.setAccessible(true);
/utils\StatusBarUtil.java:41:            meizuFlags.setAccessible(true);
/utils\StatusBarUtil.java:42:            int bit = darkFlag.getInt(null);
/utils\StatusBarUtil.java:43:            int value = meizuFlags.getInt(lp);
/utils\StatusBarUtil.java:44:            if (darkIcon) {
/utils\StatusBarUtil.java:45:                value |= bit;
/utils\StatusBarUtil.java:46:            } else {
/utils\StatusBarUtil.java:47:                value &= ~bit;
/utils\StatusBarUtil.java:48:            }
/utils\StatusBarUtil.java:49:            meizuFlags.setInt(lp, value);
/utils\StatusBarUtil.java:50:            activity.getWindow().setAttributes(lp);
/utils\StatusBarUtil.java:51:        } catch (Exception e) {
/utils\StatusBarUtil.java:52:            //e.printStackTrace();
/utils\StatusBarUtil.java:53:        }
/utils\StatusBarUtil.java:54:    }
/utils\StatusBarUtil.java:56:    public static int getStatusBarHeight(Context context) {
/utils\StatusBarUtil.java:57:        int result = DisplayUtil.dp2px(context, 20);
/utils\StatusBarUtil.java:58:        int resourceId = context.getResources().getIdentifier("status_bar_height", "dimen", "android");
/utils\StatusBarUtil.java:59:        if (resourceId > 0) {
/utils\StatusBarUtil.java:60:            result = context.getResources().getDimensionPixelSize(resourceId);
/utils\StatusBarUtil.java:61:        }
/utils\StatusBarUtil.java:62:        return result;
/utils\StatusBarUtil.java:63:    }
/utils\StatusBarUtil.java:65:    public static void transparentStatusBar(Activity activity) {
/utils\StatusBarUtil.java:66:        Window window = activity.getWindow();
/utils\StatusBarUtil.java:67:        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
/utils\StatusBarUtil.java:68:        window.getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
/utils\StatusBarUtil.java:69:                | View.SYSTEM_UI_FLAG_LAYOUT_STABLE);
/utils\StatusBarUtil.java:70:        window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
/utils\StatusBarUtil.java:71:        window.setStatusBarColor(Color.TRANSPARENT);
/utils\StatusBarUtil.java:72:    }
/utils\StatusBarUtil.java:73:}/utils\StringUtil.java:1:package com.huanchengfly.tieba.post.utils;
/utils\StringUtil.java:3:import android.content.Context;
/utils\StringUtil.java:4:import android.text.Spannable;
/utils\StringUtil.java:5:import android.text.SpannableString;
/utils\StringUtil.java:6:import android.text.TextUtils;
/utils\StringUtil.java:7:import android.widget.TextView;
/utils\StringUtil.java:9:import com.huanchengfly.tieba.post.R;
/utils\StringUtil.java:10:import com.huanchengfly.tieba.post.components.spans.EmotionSpan;
/utils\StringUtil.java:12:import java.util.regex.Matcher;
/utils\StringUtil.java:13:import java.util.regex.Pattern;
/utils\StringUtil.java:15:public class StringUtil {
/utils\StringUtil.java:16:    public static SpannableString getEmotionContent(int emotion_map_type, final TextView tv, CharSequence source) {
/utils\StringUtil.java:17:        try {
/utils\StringUtil.java:18:            if (source == null) {
/utils\StringUtil.java:19:                return new SpannableString("");
/utils\StringUtil.java:20:            }
/utils\StringUtil.java:21:            SpannableString spannableString;
/utils\StringUtil.java:22:            if (source instanceof SpannableString) {
/utils\StringUtil.java:23:                spannableString = (SpannableString) source;
/utils\StringUtil.java:24:            } else {
/utils\StringUtil.java:25:                spannableString = new SpannableString(source);
/utils\StringUtil.java:26:            }
/utils\StringUtil.java:27:            String regexEmotion = EmotionUtil.getRegex(emotion_map_type);
/utils\StringUtil.java:28:            Pattern patternEmotion = Pattern.compile(regexEmotion);
/utils\StringUtil.java:29:            Matcher matcherEmotion = patternEmotion.matcher(spannableString);
/utils\StringUtil.java:30:            while (matcherEmotion.find()) {
/utils\StringUtil.java:31:                String key = matcherEmotion.group();
/utils\StringUtil.java:32:                int start = matcherEmotion.start();
/utils\StringUtil.java:33:                int imgRes = EmotionUtil.getImgByName(emotion_map_type, key);
/utils\StringUtil.java:34:                if (imgRes != -1) {
/utils\StringUtil.java:35:                    int size = (int) tv.getTextSize();
/utils\StringUtil.java:36:                    /*
/utils\StringUtil.java:37:                    Bitmap bitmap = BitmapFactory.decodeResource(res, imgRes);
/utils\StringUtil.java:38:                    Bitmap scaleBitmap = Bitmap.createScaledBitmap(bitmap, size, size, true);
/utils\StringUtil.java:39:                    ImageSpan span = new MyImageSpan(context, scaleBitmap);
/utils\StringUtil.java:40:                    */
/utils\StringUtil.java:41:                    EmotionSpan span = new EmotionSpan(tv.getContext(), imgRes, size);
/utils\StringUtil.java:42:                    spannableString.setSpan(span, start, start + key.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
/utils\StringUtil.java:43:                }
/utils\StringUtil.java:44:            }
/utils\StringUtil.java:45:            return spannableString;
/utils\StringUtil.java:46:        } catch (Exception e) {
/utils\StringUtil.java:47:            e.printStackTrace();
/utils\StringUtil.java:48:            SpannableString spannableString;
/utils\StringUtil.java:49:            if (source instanceof SpannableString) {
/utils\StringUtil.java:50:                spannableString = (SpannableString) source;
/utils\StringUtil.java:51:            } else {
/utils\StringUtil.java:52:                spannableString = new SpannableString(source);
/utils\StringUtil.java:53:            }
/utils\StringUtil.java:54:            return spannableString;
/utils\StringUtil.java:55:        }
/utils\StringUtil.java:56:    }
/utils\StringUtil.java:58:    public static String getUsernameString(Context context, String username, String nickname) {
/utils\StringUtil.java:59:        boolean showBoth = SharedPreferencesUtil.get(context, SharedPreferencesUtil.SP_SETTINGS).getBoolean("show_both_username_and_nickname", false);
/utils\StringUtil.java:60:        if (TextUtils.isEmpty(nickname)) {
/utils\StringUtil.java:61:            return TextUtils.isEmpty(username) ? "" : username;
/utils\StringUtil.java:62:        } else if (showBoth && !TextUtils.isEmpty(username) && !TextUtils.equals(username, nickname)) {
/utils\StringUtil.java:63:            return context.getString(R.string.username_both, nickname, username);
/utils\StringUtil.java:64:        }
/utils\StringUtil.java:65:        return nickname;
/utils\StringUtil.java:66:    }
/utils\StringUtil.java:68:    public static String getAvatarUrl(String portrait) {
/utils\StringUtil.java:69:        if (TextUtils.isEmpty(portrait)) {
/utils\StringUtil.java:70:            return "";
/utils\StringUtil.java:71:        }
/utils\StringUtil.java:72:        if (portrait.startsWith("http://tb.himg.baidu.com/sys/portrait/item/")) {
/utils\StringUtil.java:73:            return portrait;
/utils\StringUtil.java:74:        }
/utils\StringUtil.java:75:        return "http://tb.himg.baidu.com/sys/portrait/item/" + portrait;
/utils\StringUtil.java:76:    }
/utils\StringUtil.java:77:}
/utils\ThemeUtil.java:1:package com.huanchengfly.tieba.post.utils;
/utils\ThemeUtil.java:3:import android.annotation.SuppressLint;
/utils\ThemeUtil.java:4:import android.app.Activity;
/utils\ThemeUtil.java:5:import android.content.Context;
/utils\ThemeUtil.java:6:import android.content.SharedPreferences;
/utils\ThemeUtil.java:7:import android.content.res.ColorStateList;
/utils\ThemeUtil.java:8:import android.content.res.Resources;
/utils\ThemeUtil.java:9:import android.graphics.Color;
/utils\ThemeUtil.java:10:import android.graphics.drawable.BitmapDrawable;
/utils\ThemeUtil.java:11:import android.graphics.drawable.Drawable;
/utils\ThemeUtil.java:12:import android.view.View;
/utils\ThemeUtil.java:13:import android.view.ViewGroup;
/utils\ThemeUtil.java:14:import android.webkit.WebView;
/utils\ThemeUtil.java:15:import android.widget.TextView;
/utils\ThemeUtil.java:17:import androidx.annotation.ColorInt;
/utils\ThemeUtil.java:18:import androidx.annotation.NonNull;
/utils\ThemeUtil.java:19:import androidx.annotation.Nullable;
/utils\ThemeUtil.java:20:import androidx.annotation.StringDef;
/utils\ThemeUtil.java:21:import androidx.annotation.StyleRes;
/utils\ThemeUtil.java:22:import androidx.coordinatorlayout.widget.CoordinatorLayout;
/utils\ThemeUtil.java:23:import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
/utils\ThemeUtil.java:25:import com.bumptech.glide.Glide;
/utils\ThemeUtil.java:26:import com.bumptech.glide.load.engine.DiskCacheStrategy;
/utils\ThemeUtil.java:27:import com.bumptech.glide.load.resource.bitmap.BitmapTransformation;
/utils\ThemeUtil.java:28:import com.bumptech.glide.request.RequestOptions;
/utils\ThemeUtil.java:29:import com.bumptech.glide.request.target.CustomViewTarget;
/utils\ThemeUtil.java:30:import com.bumptech.glide.request.transition.Transition;
/utils\ThemeUtil.java:31:import com.google.android.material.appbar.AppBarLayout;
/utils\ThemeUtil.java:32:import com.huanchengfly.tieba.post.BaseApplication;
/utils\ThemeUtil.java:33:import com.huanchengfly.tieba.post.R;
/utils\ThemeUtil.java:34:import com.huanchengfly.tieba.post.activities.BaseActivity;
/utils\ThemeUtil.java:35:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/utils\ThemeUtil.java:36:import com.huanchengfly.tieba.post.widgets.theme.TintSwipeRefreshLayout;
/utils\ThemeUtil.java:38:import org.jetbrains.annotations.NotNull;
/utils\ThemeUtil.java:40:import java.io.File;
/utils\ThemeUtil.java:42:public class ThemeUtil {
/utils\ThemeUtil.java:43:    public static final String TAG = "ThemeUtil";
/utils\ThemeUtil.java:45:    public static final String SP_THEME = "theme";
/utils\ThemeUtil.java:46:    public static final String SP_DARK_THEME = "dark_theme";
/utils\ThemeUtil.java:47:    public static final String SP_OLD_THEME = "old_theme";
/utils\ThemeUtil.java:48:    public static final String SP_SWITCH_REASON = "switch_reason";
/utils\ThemeUtil.java:50:    public static final String THEME_TRANSLUCENT = "translucent";
/utils\ThemeUtil.java:51:    public static final String THEME_TRANSLUCENT_LIGHT = "translucent_light";
/utils\ThemeUtil.java:52:    public static final String THEME_TRANSLUCENT_DARK = "translucent_dark";
/utils\ThemeUtil.java:53:    public static final String THEME_CUSTOM = "custom";
/utils\ThemeUtil.java:54:    public static final String THEME_WHITE = "white";
/utils\ThemeUtil.java:55:    public static final String THEME_TIEBA = "tieba";
/utils\ThemeUtil.java:56:    public static final String THEME_BLACK = "black";
/utils\ThemeUtil.java:57:    public static final String THEME_PURPLE = "purple";
/utils\ThemeUtil.java:58:    public static final String THEME_PINK = "pink";
/utils\ThemeUtil.java:59:    public static final String THEME_RED = "red";
/utils\ThemeUtil.java:60:    public static final String THEME_BLUE_DARK = "dark";
/utils\ThemeUtil.java:61:    public static final String THEME_GREY_DARK = "grey_dark";
/utils\ThemeUtil.java:62:    public static final String THEME_AMOLED_DARK = "amoled_dark";
/utils\ThemeUtil.java:64:    public static final String SP_TRANSLUCENT_PRIMARY_COLOR = "translucent_primary_color";
/utils\ThemeUtil.java:65:    public static final String SP_CUSTOM_STATUS_BAR_FONT_DARK = "custom_status_bar_font_dark";
/utils\ThemeUtil.java:66:    public static final String SP_CUSTOM_TOOLBAR_PRIMARY_COLOR = "custom_toolbar_primary_color";
/utils\ThemeUtil.java:68:    public static final String REASON_MANUALLY = "manually";
/utils\ThemeUtil.java:69:    public static final String REASON_FOLLOW_SYSTEM = "follow_system";
/utils\ThemeUtil.java:70:    public static final String REASON_TIME = "time";
/utils\ThemeUtil.java:71:    public static final String SP_TRANSLUCENT_THEME_BACKGROUND_PATH = "translucent_theme_background_path";
/utils\ThemeUtil.java:73:    public static int getTextColor(Context context) {
/utils\ThemeUtil.java:74:        return ThemeUtils.getColorByAttr(context, R.attr.colorText);
/utils\ThemeUtil.java:75:    }
/utils\ThemeUtil.java:77:    public static int getSecondaryTextColor(Context context) {
/utils\ThemeUtil.java:78:        return ThemeUtils.getColorByAttr(context, R.attr.colorTextSecondary);
/utils\ThemeUtil.java:79:    }
/utils\ThemeUtil.java:81:    public static void switchToNightMode(Activity context) {
/utils\ThemeUtil.java:82:        switchToNightMode(context, REASON_MANUALLY);
/utils\ThemeUtil.java:83:    }
/utils\ThemeUtil.java:85:    public static void switchToNightMode(Activity context, @Reason String reason) {
/utils\ThemeUtil.java:86:        switchToNightMode(context, reason, true);
/utils\ThemeUtil.java:87:    }
/utils\ThemeUtil.java:89:    public static void refreshUI(Activity activity) {
/utils\ThemeUtil.java:90:        if (activity instanceof BaseActivity) {
/utils\ThemeUtil.java:91:            ((BaseActivity) activity).refreshUIIfNeed();
/utils\ThemeUtil.java:92:            return;
/utils\ThemeUtil.java:93:        }
/utils\ThemeUtil.java:94:        ThemeUtils.refreshUI(activity);
/utils\ThemeUtil.java:95:    }
/utils\ThemeUtil.java:97:    @SuppressLint("ApplySharedPref")
/utils\ThemeUtil.java:98:    public static void switchToNightMode(Activity context, @Reason String reason, boolean recreate) {
/utils\ThemeUtil.java:99:        getSharedPreferences(context)
/utils\ThemeUtil.java:100:                .edit()
/utils\ThemeUtil.java:101:                .putString(SP_SWITCH_REASON, reason)
/utils\ThemeUtil.java:102:                .putString(SP_OLD_THEME, getTheme(context))
/utils\ThemeUtil.java:103:                .putString(SP_THEME, getSharedPreferences(context).getString(SP_DARK_THEME, THEME_BLUE_DARK))
/utils\ThemeUtil.java:104:                .commit();
/utils\ThemeUtil.java:105:        if (recreate) {
/utils\ThemeUtil.java:106:            refreshUI(context);
/utils\ThemeUtil.java:107:        }
/utils\ThemeUtil.java:108:    }
/utils\ThemeUtil.java:110:    @SuppressLint("ApplySharedPref")
/utils\ThemeUtil.java:111:    public static void switchFromNightMode(Activity context) {
/utils\ThemeUtil.java:112:        switchFromNightMode(context, REASON_MANUALLY);
/utils\ThemeUtil.java:113:    }
/utils\ThemeUtil.java:115:    @SuppressLint("ApplySharedPref")
/utils\ThemeUtil.java:116:    public static void switchFromNightMode(Activity context, boolean recreate) {
/utils\ThemeUtil.java:117:        switchFromNightMode(context, REASON_MANUALLY, recreate);
/utils\ThemeUtil.java:118:    }
/utils\ThemeUtil.java:120:    @SuppressLint("ApplySharedPref")
/utils\ThemeUtil.java:121:    public static void switchFromNightMode(Activity context, @Reason String reason) {
/utils\ThemeUtil.java:122:        switchFromNightMode(context, reason, true);
/utils\ThemeUtil.java:123:    }
/utils\ThemeUtil.java:125:    @SuppressLint("ApplySharedPref")
/utils\ThemeUtil.java:126:    public static void switchFromNightMode(Activity context, @Reason String reason, boolean recreate) {
/utils\ThemeUtil.java:127:        getSharedPreferences(context)
/utils\ThemeUtil.java:128:                .edit()
/utils\ThemeUtil.java:129:                .putString(SP_SWITCH_REASON, reason)
/utils\ThemeUtil.java:130:                .putString(SP_THEME, getSharedPreferences(context).getString(SP_OLD_THEME, ThemeUtil.THEME_WHITE))
/utils\ThemeUtil.java:131:                .commit();
/utils\ThemeUtil.java:132:        //context.recreate();
/utils\ThemeUtil.java:133:        if (recreate) refreshUI(context);
/utils\ThemeUtil.java:134:    }
/utils\ThemeUtil.java:136:    public static SharedPreferences getSharedPreferences(Context context) {
/utils\ThemeUtil.java:137:        return context.getSharedPreferences("settings", Context.MODE_PRIVATE);
/utils\ThemeUtil.java:138:    }
/utils\ThemeUtil.java:140:    public static void setChipThemeByLevel(String level, View parent, TextView... textViews) {
/utils\ThemeUtil.java:141:        setChipTheme(Util.getIconColorByLevel(level), parent, textViews);
/utils\ThemeUtil.java:142:    }
/utils\ThemeUtil.java:144:    public static void setChipTheme(@ColorInt int color, View parent, TextView... textViews) {
/utils\ThemeUtil.java:145:        if (getSharedPreferences(parent.getContext()).getBoolean("level_icon_old_style", false)) {
/utils\ThemeUtil.java:146:            parent.setBackgroundTintList(ColorStateList.valueOf(color));
/utils\ThemeUtil.java:147:            for (TextView textView : textViews) {
/utils\ThemeUtil.java:148:                textView.setTextColor(ThemeUtils.getColorByAttr(parent.getContext(), R.attr.colorBg));
/utils\ThemeUtil.java:149:            }
/utils\ThemeUtil.java:150:        } else {
/utils\ThemeUtil.java:151:            parent.setBackgroundTintList(ColorStateList.valueOf(color).withAlpha(60));
/utils\ThemeUtil.java:152:            for (TextView textView : textViews) {
/utils\ThemeUtil.java:153:                textView.setTextColor(color);
/utils\ThemeUtil.java:154:            }
/utils\ThemeUtil.java:155:        }
/utils\ThemeUtil.java:156:    }
/utils\ThemeUtil.java:158:    public static void setThemeForSwipeRefreshLayout(SwipeRefreshLayout swipeRefreshLayout) {
/utils\ThemeUtil.java:159:        if (swipeRefreshLayout instanceof TintSwipeRefreshLayout) {
/utils\ThemeUtil.java:160:            ((TintSwipeRefreshLayout) swipeRefreshLayout).tint();
/utils\ThemeUtil.java:161:            return;
/utils\ThemeUtil.java:162:        }
/utils\ThemeUtil.java:163:        Context context = swipeRefreshLayout.getContext();
/utils\ThemeUtil.java:164:        Resources resources = context.getResources();
/utils\ThemeUtil.java:165:        if (resources != null) {
/utils\ThemeUtil.java:166:            swipeRefreshLayout.setProgressBackgroundColorSchemeColor(resources.getColor(R.color.color_swipe_refresh_bg));
/utils\ThemeUtil.java:167:            swipeRefreshLayout.setColorSchemeColors(ThemeUtils.getColorByAttr(context, R.attr.colorAccent));
/utils\ThemeUtil.java:168:        }
/utils\ThemeUtil.java:169:    }
/utils\ThemeUtil.java:171:    public static boolean isNightMode(Context context) {
/utils\ThemeUtil.java:172:        return isNightMode(getTheme(context));
/utils\ThemeUtil.java:173:    }
/utils\ThemeUtil.java:175:    public static boolean isNightMode(String theme) {
/utils\ThemeUtil.java:176:        return theme.toLowerCase().contains("dark");
/utils\ThemeUtil.java:177:    }
/utils\ThemeUtil.java:179:    public static boolean isStatusBarFontDark(Context context) {
/utils\ThemeUtil.java:180:        boolean isDark = false;
/utils\ThemeUtil.java:181:        switch (getTheme(context)) {
/utils\ThemeUtil.java:182:            case THEME_WHITE:
/utils\ThemeUtil.java:183:                isDark = true;
/utils\ThemeUtil.java:184:                break;
/utils\ThemeUtil.java:185:            case THEME_CUSTOM:
/utils\ThemeUtil.java:186:                isDark = SharedPreferencesUtil.get(context, SharedPreferencesUtil.SP_SETTINGS)
/utils\ThemeUtil.java:187:                        .getBoolean(SP_CUSTOM_STATUS_BAR_FONT_DARK, false);
/utils\ThemeUtil.java:188:                break;
/utils\ThemeUtil.java:189:        }
/utils\ThemeUtil.java:190:        return isDark;
/utils\ThemeUtil.java:191:    }
/utils\ThemeUtil.java:193:    public static boolean isNavigationBarFontDark(Context context) {
/utils\ThemeUtil.java:194:        return !isNightMode(context);
/utils\ThemeUtil.java:195:    }
/utils\ThemeUtil.java:197:    public static void setTheme(Activity context) {
/utils\ThemeUtil.java:198:        String nowTheme = getTheme(context);
/utils\ThemeUtil.java:199:        context.setTheme(getThemeByName(nowTheme));
/utils\ThemeUtil.java:200:    }
/utils\ThemeUtil.java:202:    public static void setTranslucentThemeWebViewBackground(WebView webView) {
/utils\ThemeUtil.java:203:        if (webView == null) {
/utils\ThemeUtil.java:204:            return;
/utils\ThemeUtil.java:205:        }
/utils\ThemeUtil.java:206:        if (!THEME_TRANSLUCENT.equals(ThemeUtil.getTheme(webView.getContext()))) {
/utils\ThemeUtil.java:207:            return;
/utils\ThemeUtil.java:208:        }
/utils\ThemeUtil.java:209:        webView.setBackgroundColor(Color.WHITE);
/utils\ThemeUtil.java:210:    }
/utils\ThemeUtil.java:212:    public static void setAppBarFitsSystemWindow(View view, boolean appBarFitsSystemWindow) {
/utils\ThemeUtil.java:213:        if (view == null) return;
/utils\ThemeUtil.java:214:        if (view instanceof AppBarLayout) {
/utils\ThemeUtil.java:215:            view.setFitsSystemWindows(appBarFitsSystemWindow);
/utils\ThemeUtil.java:216:            ((AppBarLayout) view).setClipToPadding(!appBarFitsSystemWindow);
/utils\ThemeUtil.java:217:            return;
/utils\ThemeUtil.java:218:        }
/utils\ThemeUtil.java:219:        if (view instanceof ViewGroup) {
/utils\ThemeUtil.java:220:            for (int i = 0; i < ((ViewGroup) view).getChildCount(); i++) {
/utils\ThemeUtil.java:221:                setAppBarFitsSystemWindow(((ViewGroup) view).getChildAt(i), appBarFitsSystemWindow);
/utils\ThemeUtil.java:222:            }
/utils\ThemeUtil.java:223:        }
/utils\ThemeUtil.java:224:    }
/utils\ThemeUtil.java:226:    public static void setTranslucentBackground(View view) {
/utils\ThemeUtil.java:227:        if (view == null) {
/utils\ThemeUtil.java:228:            return;
/utils\ThemeUtil.java:229:        }
/utils\ThemeUtil.java:230:        if (!THEME_TRANSLUCENT.equals(ThemeUtil.getTheme(view.getContext()))) {
/utils\ThemeUtil.java:231:            return;
/utils\ThemeUtil.java:232:        }
/utils\ThemeUtil.java:233:        view.setBackgroundTintList(null);
/utils\ThemeUtil.java:234:        view.setBackgroundColor(Color.TRANSPARENT);
/utils\ThemeUtil.java:235:    }
/utils\ThemeUtil.java:237:    public static void setTranslucentDialogBackground(View view) {
/utils\ThemeUtil.java:238:        if (view == null) {
/utils\ThemeUtil.java:239:            return;
/utils\ThemeUtil.java:240:        }
/utils\ThemeUtil.java:241:        if (!THEME_TRANSLUCENT.equals(ThemeUtil.getTheme(view.getContext()))) {
/utils\ThemeUtil.java:242:            return;
/utils\ThemeUtil.java:243:        }
/utils\ThemeUtil.java:244:        view.setBackgroundTintList(null);
/utils\ThemeUtil.java:245:        view.setBackgroundColor(ThemeUtils.getColorById(view.getContext(), R.color.theme_color_card_grey_dark));
/utils\ThemeUtil.java:246:    }
/utils\ThemeUtil.java:248:    public static void setTranslucentThemeBackground(View view, boolean setFitsSystemWindow, boolean useCache, BitmapTransformation... transformations) {
/utils\ThemeUtil.java:249:        if (view == null) {
/utils\ThemeUtil.java:250:            return;
/utils\ThemeUtil.java:251:        }
/utils\ThemeUtil.java:252:        if (!THEME_TRANSLUCENT.equals(ThemeUtil.getTheme(BaseApplication.getInstance()))) {
/utils\ThemeUtil.java:253:            if (setFitsSystemWindow) {
/utils\ThemeUtil.java:254:                setAppBarFitsSystemWindow(view, false);
/utils\ThemeUtil.java:255:                view.setFitsSystemWindows(false);
/utils\ThemeUtil.java:256:                ((ViewGroup) view).setClipToPadding(true);
/utils\ThemeUtil.java:257:            }
/utils\ThemeUtil.java:258:            return;
/utils\ThemeUtil.java:259:        }
/utils\ThemeUtil.java:260:        if (setFitsSystemWindow) {
/utils\ThemeUtil.java:261:            if (view instanceof CoordinatorLayout) {
/utils\ThemeUtil.java:262:                setAppBarFitsSystemWindow(view, true);
/utils\ThemeUtil.java:263:                view.setFitsSystemWindows(false);
/utils\ThemeUtil.java:264:                ((ViewGroup) view).setClipToPadding(true);
/utils\ThemeUtil.java:265:            } else {
/utils\ThemeUtil.java:266:                setAppBarFitsSystemWindow(view, false);
/utils\ThemeUtil.java:267:                view.setFitsSystemWindows(true);
/utils\ThemeUtil.java:268:                ((ViewGroup) view).setClipToPadding(false);
/utils\ThemeUtil.java:269:            }
/utils\ThemeUtil.java:270:        }
/utils\ThemeUtil.java:271:        view.setBackgroundTintList(null);
/utils\ThemeUtil.java:272:        String backgroundFilePath = SharedPreferencesUtil.get(BaseApplication.getInstance(), SharedPreferencesUtil.SP_SETTINGS)
/utils\ThemeUtil.java:273:                .getString(SP_TRANSLUCENT_THEME_BACKGROUND_PATH, null);
/utils\ThemeUtil.java:274:        if (backgroundFilePath == null) {
/utils\ThemeUtil.java:275:            view.setBackgroundColor(Color.BLACK);
/utils\ThemeUtil.java:276:            return;
/utils\ThemeUtil.java:277:        }
/utils\ThemeUtil.java:278:        if (useCache &&
/utils\ThemeUtil.java:279:                BaseApplication.getTranslucentBackground() != null &&
/utils\ThemeUtil.java:280:                (!(BaseApplication.getTranslucentBackground() instanceof BitmapDrawable)
/utils\ThemeUtil.java:281:                        || (BaseApplication.getTranslucentBackground() instanceof BitmapDrawable &&
/utils\ThemeUtil.java:282:                        !((BitmapDrawable) BaseApplication.getTranslucentBackground()).getBitmap().isRecycled())) &&
/utils\ThemeUtil.java:283:                (transformations == null || transformations.length == 0)) {
/utils\ThemeUtil.java:284:            view.setBackground(BaseApplication.getTranslucentBackground());
/utils\ThemeUtil.java:285:            return;
/utils\ThemeUtil.java:286:        }
/utils\ThemeUtil.java:287:        RequestOptions bgOptions = RequestOptions.centerCropTransform()
/utils\ThemeUtil.java:288:                .optionalFitCenter()
/utils\ThemeUtil.java:289:                .skipMemoryCache(true)
/utils\ThemeUtil.java:290:                .diskCacheStrategy(DiskCacheStrategy.NONE);
/utils\ThemeUtil.java:291:        if (transformations != null && transformations.length > 0) {
/utils\ThemeUtil.java:292:            bgOptions = bgOptions.transform(transformations);
/utils\ThemeUtil.java:293:        }
/utils\ThemeUtil.java:294:        Glide.with(BaseApplication.getInstance())
/utils\ThemeUtil.java:295:                .asDrawable()
/utils\ThemeUtil.java:296:                .load(new File(backgroundFilePath))
/utils\ThemeUtil.java:297:                .apply(bgOptions)
/utils\ThemeUtil.java:298:                .into(new CustomViewTarget<View, Drawable>(view) {
/utils\ThemeUtil.java:299:                    @Override
/utils\ThemeUtil.java:300:                    public void onLoadFailed(@Nullable Drawable errorDrawable) {
/utils\ThemeUtil.java:301:                        getView().setBackgroundColor(Color.BLACK);
/utils\ThemeUtil.java:302:                    }
/utils\ThemeUtil.java:304:                    @Override
/utils\ThemeUtil.java:305:                    public void onResourceReady(@NonNull Drawable resource, @Nullable Transition<? super Drawable> transition) {
/utils\ThemeUtil.java:306:                        if (useCache && (transformations == null || transformations.length == 0)) {
/utils\ThemeUtil.java:307:                            BaseApplication.setTranslucentBackground(resource);
/utils\ThemeUtil.java:308:                        }
/utils\ThemeUtil.java:309:                        getView().setBackground(resource);
/utils\ThemeUtil.java:310:                    }
/utils\ThemeUtil.java:312:                    @Override
/utils\ThemeUtil.java:313:                    protected void onResourceCleared(@Nullable Drawable placeholder) {
/utils\ThemeUtil.java:314:                        getView().setBackgroundColor(Color.BLACK);
/utils\ThemeUtil.java:315:                    }
/utils\ThemeUtil.java:316:                });
/utils\ThemeUtil.java:317:    }
/utils\ThemeUtil.java:319:    public static void setTranslucentThemeBackground(View view) {
/utils\ThemeUtil.java:320:        setTranslucentThemeBackground(view, true, true);
/utils\ThemeUtil.java:321:    }
/utils\ThemeUtil.java:323:    @StyleRes
/utils\ThemeUtil.java:324:    private static int getThemeByName(@NotNull String themeName) {
/utils\ThemeUtil.java:325:        switch (themeName.toLowerCase()) {
/utils\ThemeUtil.java:326:            case THEME_TRANSLUCENT:
/utils\ThemeUtil.java:327:            case THEME_TRANSLUCENT_LIGHT:
/utils\ThemeUtil.java:328:                return R.style.TiebaLite_Translucent_Light;
/utils\ThemeUtil.java:329:            case THEME_TRANSLUCENT_DARK:
/utils\ThemeUtil.java:330:                return R.style.TiebaLite_Translucent_Dark;
/utils\ThemeUtil.java:331:            case THEME_TIEBA:
/utils\ThemeUtil.java:332:                return R.style.TiebaLite_Tieba;
/utils\ThemeUtil.java:333:            case THEME_BLACK:
/utils\ThemeUtil.java:334:                return R.style.TiebaLite_Black;
/utils\ThemeUtil.java:335:            case THEME_PURPLE:
/utils\ThemeUtil.java:336:                return R.style.TiebaLite_Purple;
/utils\ThemeUtil.java:337:            case THEME_PINK:
/utils\ThemeUtil.java:338:                return R.style.TiebaLite_Pink;
/utils\ThemeUtil.java:339:            case THEME_RED:
/utils\ThemeUtil.java:340:                return R.style.TiebaLite_Red;
/utils\ThemeUtil.java:341:            case THEME_BLUE_DARK:
/utils\ThemeUtil.java:342:                return R.style.TiebaLite_Dark;
/utils\ThemeUtil.java:343:            case THEME_GREY_DARK:
/utils\ThemeUtil.java:344:                return R.style.TiebaLite_Dark_Grey;
/utils\ThemeUtil.java:345:            case THEME_AMOLED_DARK:
/utils\ThemeUtil.java:346:                return R.style.TiebaLite_Dark_Amoled;
/utils\ThemeUtil.java:347:            case THEME_CUSTOM:
/utils\ThemeUtil.java:348:                return R.style.TiebaLite_Custom;
/utils\ThemeUtil.java:349:            case THEME_WHITE:
/utils\ThemeUtil.java:350:            default:
/utils\ThemeUtil.java:351:                return R.style.TiebaLite_White;
/utils\ThemeUtil.java:352:        }
/utils\ThemeUtil.java:353:    }
/utils\ThemeUtil.java:355:    public static String getTheme(Context context) {
/utils\ThemeUtil.java:356:        String theme = getSharedPreferences(context).getString(SP_THEME, THEME_WHITE);
/utils\ThemeUtil.java:357:        switch (theme.toLowerCase()) {
/utils\ThemeUtil.java:358:            case THEME_TRANSLUCENT:
/utils\ThemeUtil.java:359:            case THEME_CUSTOM:
/utils\ThemeUtil.java:360:            case THEME_WHITE:
/utils\ThemeUtil.java:361:            case THEME_TIEBA:
/utils\ThemeUtil.java:362:            case THEME_BLACK:
/utils\ThemeUtil.java:363:            case THEME_PURPLE:
/utils\ThemeUtil.java:364:            case THEME_PINK:
/utils\ThemeUtil.java:365:            case THEME_RED:
/utils\ThemeUtil.java:366:            case THEME_BLUE_DARK:
/utils\ThemeUtil.java:367:            case THEME_GREY_DARK:
/utils\ThemeUtil.java:368:            case THEME_AMOLED_DARK:
/utils\ThemeUtil.java:369:                return theme.toLowerCase();
/utils\ThemeUtil.java:370:            default:
/utils\ThemeUtil.java:371:                return THEME_WHITE;
/utils\ThemeUtil.java:372:        }
/utils\ThemeUtil.java:373:    }
/utils\ThemeUtil.java:375:    @StringDef({REASON_MANUALLY, REASON_FOLLOW_SYSTEM, REASON_TIME})
/utils\ThemeUtil.java:376:    public @interface Reason {
/utils\ThemeUtil.java:377:    }
/utils\ThemeUtil.java:378:}/utils\TiebaLiteJavaScript.java:1:package com.huanchengfly.tieba.post.utils;
/utils\TiebaLiteJavaScript.java:3:import android.content.Context;
/utils\TiebaLiteJavaScript.java:4:import android.os.Handler;
/utils\TiebaLiteJavaScript.java:5:import android.text.format.DateUtils;
/utils\TiebaLiteJavaScript.java:6:import android.util.Log;
/utils\TiebaLiteJavaScript.java:7:import android.webkit.JavascriptInterface;
/utils\TiebaLiteJavaScript.java:8:import android.webkit.WebView;
/utils\TiebaLiteJavaScript.java:9:import android.widget.Toast;
/utils\TiebaLiteJavaScript.java:11:public class TiebaLiteJavaScript {
/utils\TiebaLiteJavaScript.java:12:    public static final String TAG = "JsBridge";
/utils\TiebaLiteJavaScript.java:14:    private static Handler handler = new Handler();
/utils\TiebaLiteJavaScript.java:15:    public Context context;
/utils\TiebaLiteJavaScript.java:16:    public WebView webView;
/utils\TiebaLiteJavaScript.java:18:    public TiebaLiteJavaScript(WebView webView) {
/utils\TiebaLiteJavaScript.java:19:        this.context = webView.getContext();
/utils\TiebaLiteJavaScript.java:20:        this.webView = webView;
/utils\TiebaLiteJavaScript.java:21:    }
/utils\TiebaLiteJavaScript.java:23:    @JavascriptInterface
/utils\TiebaLiteJavaScript.java:24:    public void toast(final String text) {
/utils\TiebaLiteJavaScript.java:25:        handler.post(() -> {
/utils\TiebaLiteJavaScript.java:26:            Toast.makeText(context, text, Toast.LENGTH_SHORT).show();
/utils\TiebaLiteJavaScript.java:27:        });
/utils\TiebaLiteJavaScript.java:28:    }
/utils\TiebaLiteJavaScript.java:30:    @JavascriptInterface
/utils\TiebaLiteJavaScript.java:31:    public String getTimeFromNow(String time) {
/utils\TiebaLiteJavaScript.java:32:        return String.valueOf(DateUtils.getRelativeTimeSpanString(Long.valueOf(time) * 1000L));
/utils\TiebaLiteJavaScript.java:33:    }
/utils\TiebaLiteJavaScript.java:35:    @JavascriptInterface
/utils\TiebaLiteJavaScript.java:36:    public String getTheme() {
/utils\TiebaLiteJavaScript.java:37:        return ThemeUtil.getTheme(context);
/utils\TiebaLiteJavaScript.java:38:    }
/utils\TiebaLiteJavaScript.java:40:    @JavascriptInterface
/utils\TiebaLiteJavaScript.java:41:    public void copyText(String content) {
/utils\TiebaLiteJavaScript.java:42:        TiebaUtil.copyText(context, content);
/utils\TiebaLiteJavaScript.java:43:    }
/utils\TiebaLiteJavaScript.java:45:    @JavascriptInterface
/utils\TiebaLiteJavaScript.java:46:    public void putString(String key, String value) {
/utils\TiebaLiteJavaScript.java:47:        SharedPreferencesUtil.get(context, SharedPreferencesUtil.SP_WEBVIEW_INFO)
/utils\TiebaLiteJavaScript.java:48:                .edit()
/utils\TiebaLiteJavaScript.java:49:                .putString(key, value)
/utils\TiebaLiteJavaScript.java:50:                .apply();
/utils\TiebaLiteJavaScript.java:51:        Log.i(TAG, "putString: " + key + ": " + value);
/utils\TiebaLiteJavaScript.java:52:    }
/utils\TiebaLiteJavaScript.java:54:    @JavascriptInterface
/utils\TiebaLiteJavaScript.java:55:    public String getString(String key) {
/utils\TiebaLiteJavaScript.java:56:        return SharedPreferencesUtil.get(context, SharedPreferencesUtil.SP_WEBVIEW_INFO)
/utils\TiebaLiteJavaScript.java:57:                .getString(key, "");
/utils\TiebaLiteJavaScript.java:58:    }
/utils\TiebaLiteJavaScript.java:60:    @JavascriptInterface
/utils\TiebaLiteJavaScript.java:61:    public int getInt(String key, int defValue) {
/utils\TiebaLiteJavaScript.java:62:        return SharedPreferencesUtil.get(context, SharedPreferencesUtil.SP_WEBVIEW_INFO)
/utils\TiebaLiteJavaScript.java:63:                .getInt(key, defValue);
/utils\TiebaLiteJavaScript.java:64:    }
/utils\TiebaLiteJavaScript.java:66:    @JavascriptInterface
/utils\TiebaLiteJavaScript.java:67:    public void putInt(String key, int value) {
/utils\TiebaLiteJavaScript.java:68:        SharedPreferencesUtil.get(context, SharedPreferencesUtil.SP_WEBVIEW_INFO)
/utils\TiebaLiteJavaScript.java:69:                .edit()
/utils\TiebaLiteJavaScript.java:70:                .putInt(key, value)
/utils\TiebaLiteJavaScript.java:71:                .apply();
/utils\TiebaLiteJavaScript.java:72:        Log.i(TAG, "putInt: " + key + ": " + value);
/utils\TiebaLiteJavaScript.java:73:    }
/utils\TiebaLiteJavaScript.java:74:}/utils\UIDUtil.java:1:package com.huanchengfly.tieba.post.utils;
/utils\UIDUtil.java:3:import android.annotation.SuppressLint;
/utils\UIDUtil.java:4:import android.os.Build;
/utils\UIDUtil.java:5:import android.provider.Settings;
/utils\UIDUtil.java:6:import android.text.TextUtils;
/utils\UIDUtil.java:8:import com.huanchengfly.tieba.post.BaseApplication;
/utils\UIDUtil.java:10:import java.util.UUID;
/utils\UIDUtil.java:12:public class UIDUtil {
/utils\UIDUtil.java:13:    @SuppressLint("HardwareIds")
/utils\UIDUtil.java:14:    public static String getAndroidId() {
/utils\UIDUtil.java:15:        String androidId = Settings.Secure.getString(BaseApplication.getInstance().getContentResolver(), Settings.Secure.ANDROID_ID);
/utils\UIDUtil.java:16:        return androidId == null ? "" : androidId;
/utils\UIDUtil.java:17:    }
/utils\UIDUtil.java:19:    public static String getNewCUID() {
/utils\UIDUtil.java:20:        return "baidutiebaapp" + getUUID();
/utils\UIDUtil.java:21:    }
/utils\UIDUtil.java:23:    private static String getCUID() {
/utils\UIDUtil.java:24:        String androidId = getAndroidId();
/utils\UIDUtil.java:25:        String imei = MobileInfoUtil.getIMEI(BaseApplication.getInstance());
/utils\UIDUtil.java:26:        return MD5Util.toMd5((Build.VERSION.SDK_INT < Build.VERSION_CODES.M ? imei + androidId + getUUID() : "com.baidu" + androidId).getBytes()).toUpperCase();
/utils\UIDUtil.java:27:    }
/utils\UIDUtil.java:29:    public static String getFinalCUID() {
/utils\UIDUtil.java:30:        String imei = MobileInfoUtil.getIMEI(BaseApplication.getInstance());
/utils\UIDUtil.java:31:        if (TextUtils.isEmpty(imei)) {
/utils\UIDUtil.java:32:            imei = "0";
/utils\UIDUtil.java:33:        }
/utils\UIDUtil.java:34:        return getCUID() + "|" + new StringBuffer(imei).reverse().toString();
/utils\UIDUtil.java:35:    }
/utils\UIDUtil.java:37:    @SuppressLint("ApplySharedPref")
/utils\UIDUtil.java:38:    public static String getUUID() {
/utils\UIDUtil.java:39:        String uuid = SharedPreferencesUtil.get(BaseApplication.getInstance(), SharedPreferencesUtil.SP_APP_DATA)
/utils\UIDUtil.java:40:                .getString("uuid", null);
/utils\UIDUtil.java:41:        if (uuid == null) {
/utils\UIDUtil.java:42:            uuid = UUID.randomUUID().toString();
/utils\UIDUtil.java:43:            SharedPreferencesUtil.get(BaseApplication.getInstance(), SharedPreferencesUtil.SP_APP_DATA)
/utils\UIDUtil.java:44:                    .edit()
/utils\UIDUtil.java:45:                    .putString("uuid", uuid)
/utils\UIDUtil.java:46:                    .apply();
/utils\UIDUtil.java:47:        }
/utils\UIDUtil.java:48:        return uuid;
/utils\UIDUtil.java:49:    }
/utils\UIDUtil.java:50:}/utils\UploadHelper.java:1:package com.huanchengfly.tieba.post.utils;
/utils\UploadHelper.java:3:import android.content.Context;
/utils\UploadHelper.java:5:import com.huanchengfly.tieba.post.api.TiebaApi;
/utils\UploadHelper.java:6:import com.huanchengfly.tieba.post.api.models.WebUploadPicBean;
/utils\UploadHelper.java:7:import com.huanchengfly.tieba.post.interfaces.UploadCallback;
/utils\UploadHelper.java:8:import com.huanchengfly.tieba.post.models.PhotoInfoBean;
/utils\UploadHelper.java:10:import org.jetbrains.annotations.NotNull;
/utils\UploadHelper.java:12:import java.util.ArrayList;
/utils\UploadHelper.java:13:import java.util.List;
/utils\UploadHelper.java:15:import retrofit2.Call;
/utils\UploadHelper.java:16:import retrofit2.Callback;
/utils\UploadHelper.java:17:import retrofit2.Response;
/utils\UploadHelper.java:19:public class UploadHelper {
/utils\UploadHelper.java:20:    public static final String TAG = UploadHelper.class.getSimpleName();
/utils\UploadHelper.java:21:    private Context mContext;
/utils\UploadHelper.java:22:    private List<PhotoInfoBean> fileList;
/utils\UploadHelper.java:23:    private List<PhotoInfoBean> uploadList;
/utils\UploadHelper.java:24:    private UploadCallback callback;
/utils\UploadHelper.java:25:    private int now;
/utils\UploadHelper.java:27:    private UploadHelper(Context context) {
/utils\UploadHelper.java:28:        this.mContext = context;
/utils\UploadHelper.java:29:        this.now = 0;
/utils\UploadHelper.java:30:    }
/utils\UploadHelper.java:32:    public static UploadHelper with(Context context) {
/utils\UploadHelper.java:33:        return new UploadHelper(context);
/utils\UploadHelper.java:34:    }
/utils\UploadHelper.java:36:    private void upload() {
/utils\UploadHelper.java:37:        if (callback == null) return;
/utils\UploadHelper.java:38:        if (now >= uploadList.size()) {
/utils\UploadHelper.java:39:            callback.onSuccess(fileList);
/utils\UploadHelper.java:40:            return;
/utils\UploadHelper.java:41:        }
/utils\UploadHelper.java:42:        PhotoInfoBean photoInfoBean = uploadList.get(now);
/utils\UploadHelper.java:43:        if (photoInfoBean.getFileUri() == null) {
/utils\UploadHelper.java:44:            callback.onFailure("文件对象为空");
/utils\UploadHelper.java:45:            return;
/utils\UploadHelper.java:46:        }
/utils\UploadHelper.java:47:        if (photoInfoBean.getWebUploadPicBean() != null) {
/utils\UploadHelper.java:48:            callback.onProgress(this.now + 1, uploadList.size());
/utils\UploadHelper.java:49:            next();
/utils\UploadHelper.java:50:            return;
/utils\UploadHelper.java:51:        }
/utils\UploadHelper.java:52:        TiebaApi.getInstance()
/utils\UploadHelper.java:53:                .webUploadPic(photoInfoBean)
/utils\UploadHelper.java:54:                .enqueue(new Callback<WebUploadPicBean>() {
/utils\UploadHelper.java:55:                    @Override
/utils\UploadHelper.java:56:                    public void onResponse(@NotNull Call<WebUploadPicBean> call, @NotNull Response<WebUploadPicBean> response) {
/utils\UploadHelper.java:57:                        photoInfoBean.setWebUploadPicBean(response.body());
/utils\UploadHelper.java:58:                        callback.onProgress(now + 1, uploadList.size());
/utils\UploadHelper.java:59:                        next();
/utils\UploadHelper.java:60:                    }
/utils\UploadHelper.java:62:                    @Override
/utils\UploadHelper.java:63:                    public void onFailure(@NotNull Call<WebUploadPicBean> call, @NotNull Throwable t) {
/utils\UploadHelper.java:64:                        callback.onFailure(t.getMessage());
/utils\UploadHelper.java:65:                    }
/utils\UploadHelper.java:66:                });
/utils\UploadHelper.java:67:    }
/utils\UploadHelper.java:69:    public void start() {
/utils\UploadHelper.java:70:        if (callback == null) return;
/utils\UploadHelper.java:71:        if (fileList.isEmpty()) {
/utils\UploadHelper.java:72:            callback.onFailure("文件列表为空");
/utils\UploadHelper.java:73:            return;
/utils\UploadHelper.java:74:        }
/utils\UploadHelper.java:75:        uploadList = new ArrayList<>();
/utils\UploadHelper.java:76:        for (PhotoInfoBean photoInfoBean : fileList) {
/utils\UploadHelper.java:77:            if (photoInfoBean.getFile() != null && /*photoInfoBean.getUploadResult() == null*/ photoInfoBean.getWebUploadPicBean() == null) {
/utils\UploadHelper.java:78:                uploadList.add(photoInfoBean);
/utils\UploadHelper.java:79:            }
/utils\UploadHelper.java:80:        }
/utils\UploadHelper.java:81:        if (!uploadList.isEmpty()) {
/utils\UploadHelper.java:82:            this.now = 0;
/utils\UploadHelper.java:83:            callback.onStart(uploadList.size());
/utils\UploadHelper.java:84:            upload();
/utils\UploadHelper.java:85:        } else {
/utils\UploadHelper.java:86:            callback.onSuccess(fileList);
/utils\UploadHelper.java:87:        }
/utils\UploadHelper.java:88:    }
/utils\UploadHelper.java:90:    private void next() {
/utils\UploadHelper.java:91:        this.now += 1;
/utils\UploadHelper.java:92:        upload();
/utils\UploadHelper.java:93:    }
/utils\UploadHelper.java:95:    public UploadHelper setFileList(List<PhotoInfoBean> fileList) {
/utils\UploadHelper.java:96:        this.fileList = fileList;
/utils\UploadHelper.java:97:        return this;
/utils\UploadHelper.java:98:    }
/utils\UploadHelper.java:100:    public UploadHelper setCallback(UploadCallback callback) {
/utils\UploadHelper.java:101:        this.callback = callback;
/utils\UploadHelper.java:102:        return this;
/utils\UploadHelper.java:103:    }
/utils\UploadHelper.java:104:}
/utils\Util.java:1:package com.huanchengfly.tieba.post.utils;
/utils\Util.java:3:import android.annotation.SuppressLint;
/utils\Util.java:4:import android.app.Activity;
/utils\Util.java:5:import android.content.Context;
/utils\Util.java:6:import android.content.Intent;
/utils\Util.java:7:import android.content.res.ColorStateList;
/utils\Util.java:8:import android.content.res.TypedArray;
/utils\Util.java:9:import android.graphics.Bitmap;
/utils\Util.java:10:import android.graphics.Canvas;
/utils\Util.java:11:import android.graphics.Color;
/utils\Util.java:12:import android.graphics.Paint;
/utils\Util.java:13:import android.graphics.PorterDuff;
/utils\Util.java:14:import android.graphics.PorterDuffColorFilter;
/utils\Util.java:15:import android.graphics.drawable.Drawable;
/utils\Util.java:16:import android.os.Build;
/utils\Util.java:17:import android.os.Bundle;
/utils\Util.java:18:import android.text.format.DateUtils;
/utils\Util.java:19:import android.view.LayoutInflater;
/utils\Util.java:20:import android.view.View;
/utils\Util.java:21:import android.widget.Button;
/utils\Util.java:22:import android.widget.TextView;
/utils\Util.java:24:import androidx.annotation.AttrRes;
/utils\Util.java:25:import androidx.annotation.ColorInt;
/utils\Util.java:26:import androidx.annotation.ColorRes;
/utils\Util.java:27:import androidx.annotation.Dimension;
/utils\Util.java:28:import androidx.annotation.IntRange;
/utils\Util.java:29:import androidx.annotation.NonNull;
/utils\Util.java:30:import androidx.annotation.Px;
/utils\Util.java:31:import androidx.annotation.StringRes;
/utils\Util.java:32:import androidx.appcompat.app.AppCompatActivity;
/utils\Util.java:33:import androidx.appcompat.widget.AppCompatDrawableManager;
/utils\Util.java:35:import com.google.android.material.snackbar.Snackbar;
/utils\Util.java:36:import com.gyf.immersionbar.OSUtils;
/utils\Util.java:37:import com.huanchengfly.tieba.post.BundleConfig;
/utils\Util.java:38:import com.huanchengfly.tieba.post.IntentConfig;
/utils\Util.java:39:import com.huanchengfly.tieba.post.R;
/utils\Util.java:40:import com.huanchengfly.tieba.post.components.dialogs.CopyTextDialog;
/utils\Util.java:41:import com.huanchengfly.tieba.post.fragments.MenuDialogFragment;
/utils\Util.java:42:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/utils\Util.java:44:import java.lang.reflect.Field;
/utils\Util.java:45:import java.util.ArrayList;
/utils\Util.java:46:import java.util.Calendar;
/utils\Util.java:48:import static android.content.Intent.ACTION_VIEW;
/utils\Util.java:49:import static com.huanchengfly.tieba.post.utils.ColorUtils.greifyColor;
/utils\Util.java:51:public class Util {
/utils\Util.java:52:    public static final String TAG = "Util";
/utils\Util.java:54:    public static boolean isMIUI9Later() {
/utils\Util.java:55:        String version = OSUtils.getMIUIVersion();
/utils\Util.java:56:        int num;
/utils\Util.java:57:        if ((!version.isEmpty())) {
/utils\Util.java:58:            try {
/utils\Util.java:59:                num = Integer.valueOf(version.substring(1));
/utils\Util.java:60:                return num >= 9;
/utils\Util.java:61:            } catch (NumberFormatException e) {
/utils\Util.java:62:                return false;
/utils\Util.java:63:            }
/utils\Util.java:64:        } else
/utils\Util.java:65:            return false;
/utils\Util.java:66:    }
/utils\Util.java:68:    public static void miuiFav(Context context, String title, String url) {
/utils\Util.java:69:        if (!isMIUI9Later()) {
/utils\Util.java:70:            return;
/utils\Util.java:71:        }
/utils\Util.java:72:        Bundle bundle = new Bundle();
/utils\Util.java:73:        bundle.putString(BundleConfig.MATCH_ACTION, ACTION_VIEW);
/utils\Util.java:74:        bundle.putString(BundleConfig.TARGET_URL, url);
/utils\Util.java:75:        bundle.putString(BundleConfig.TARGET_DATA, url);
/utils\Util.java:76:        bundle.putString(BundleConfig.TARGET_TITLE, title);
/utils\Util.java:77:        ArrayList<Bundle> bundleList = new ArrayList<>();
/utils\Util.java:78:        bundleList.add(bundle);
/utils\Util.java:79:        Intent intent = new Intent(IntentConfig.ACTION);
/utils\Util.java:80:        intent.putParcelableArrayListExtra(IntentConfig.BUNDLES, bundleList);
/utils\Util.java:81:        intent.putExtra(IntentConfig.ACTION_FAV, true);
/utils\Util.java:82:        intent.setPackage(IntentConfig.PACKAGE);// 限定当前收藏广播接收者的包名和权限
/utils\Util.java:83:        try {
/utils\Util.java:84:            context.sendBroadcast(intent, IntentConfig.PERMISSION);
/utils\Util.java:85:        } catch (Exception e) {
/utils\Util.java:86:            e.printStackTrace();
/utils\Util.java:87:        }
/utils\Util.java:88:    }
/utils\Util.java:90:    public static Snackbar createSnackbar(@NonNull View view, @NonNull CharSequence text, @Snackbar.Duration int duration) {
/utils\Util.java:91:        Snackbar snackbar = Snackbar.make(view, text, duration);
/utils\Util.java:92:        snackbar.setActionTextColor(ThemeUtils.getColorByAttr(view.getContext(), R.attr.colorAccent));
/utils\Util.java:93:        View mView = snackbar.getView();
/utils\Util.java:94:        Button mButton = mView.findViewById(R.id.snackbar_action);
/utils\Util.java:95:        TextView mTextView = mView.findViewById(R.id.snackbar_text);
/utils\Util.java:96:        mButton.setTextAppearance(view.getContext(), R.style.TextAppearance_Bold);
/utils\Util.java:97:        if (ThemeUtil.THEME_TRANSLUCENT.equals(ThemeUtil.getTheme(view.getContext()))) {
/utils\Util.java:98:            mView.setBackgroundTintList(ColorStateList.valueOf(view.getResources().getColor(R.color.white)));
/utils\Util.java:99:            mTextView.setTextColor(view.getResources().getColor(R.color.color_text));
/utils\Util.java:100:        } else {
/utils\Util.java:101:            mView.setBackgroundTintList(ColorStateList.valueOf(ThemeUtils.getColorByAttr(view.getContext(), R.attr.colorCard)));
/utils\Util.java:102:            mTextView.setTextColor(ThemeUtils.getColorByAttr(view.getContext(), R.attr.colorText));
/utils\Util.java:103:        }
/utils\Util.java:104:        mTextView.setTextAppearance(view.getContext(), R.style.TextAppearance_Bold);
/utils\Util.java:105:        return snackbar;
/utils\Util.java:106:    }
/utils\Util.java:108:    public static Snackbar createSnackbar(@NonNull View view, @StringRes int resId, @Snackbar.Duration int duration) {
/utils\Util.java:109:        return createSnackbar(view, view.getResources().getText(resId), duration);
/utils\Util.java:110:    }
/utils\Util.java:112:    public static Bitmap tintBitmap(Bitmap inBitmap, int tintColor) {
/utils\Util.java:113:        if (inBitmap == null) {
/utils\Util.java:114:            return null;
/utils\Util.java:115:        }
/utils\Util.java:116:        Bitmap outBitmap = Bitmap.createBitmap(inBitmap.getWidth(), inBitmap.getHeight(), inBitmap.getConfig());
/utils\Util.java:117:        Canvas canvas = new Canvas(outBitmap);
/utils\Util.java:118:        Paint paint = new Paint();
/utils\Util.java:119:        paint.setColorFilter(new PorterDuffColorFilter(tintColor, PorterDuff.Mode.SRC_IN));
/utils\Util.java:120:        canvas.drawBitmap(inBitmap, 0, 0, paint);
/utils\Util.java:121:        return outBitmap;
/utils\Util.java:122:    }
/utils\Util.java:124:    public static Bitmap getBitmapFromVectorDrawable(Context context, int drawableId) {
/utils\Util.java:125:        @SuppressLint("RestrictedApi") Drawable drawable = AppCompatDrawableManager.get().getDrawable(context, drawableId);
/utils\Util.java:126:        Bitmap bitmap = Bitmap.createBitmap(drawable.getIntrinsicWidth(),
/utils\Util.java:127:                drawable.getIntrinsicHeight(), Bitmap.Config.ARGB_8888);
/utils\Util.java:128:        Canvas canvas = new Canvas(bitmap);
/utils\Util.java:129:        drawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());
/utils\Util.java:130:        drawable.draw(canvas);
/utils\Util.java:131:        return bitmap;
/utils\Util.java:132:    }
/utils\Util.java:134:    public static void showNetworkErrorSnackbar(View view, Runnable runnable) {
/utils\Util.java:135:        try {
/utils\Util.java:136:            createSnackbar(view, R.string.toast_network_error, Snackbar.LENGTH_LONG)
/utils\Util.java:137:                    .setAction(R.string.button_retry, v -> runnable.run())
/utils\Util.java:138:                    .show();
/utils\Util.java:139:        } catch (Exception ignored) {
/utils\Util.java:140:        }
/utils\Util.java:141:    }
/utils\Util.java:143:    public static int changeAlpha(int color, float fraction) {
/utils\Util.java:144:        int red = Color.red(color);
/utils\Util.java:145:        int green = Color.green(color);
/utils\Util.java:146:        int blue = Color.blue(color);
/utils\Util.java:147:        int alpha = (int) (Color.alpha(color) * fraction);
/utils\Util.java:148:        return Color.argb(alpha, red, green, blue);
/utils\Util.java:149:    }
/utils\Util.java:151:    public static Drawable getMaskDrawable(Context context, int maskId) {
/utils\Util.java:152:        Drawable drawable;
/utils\Util.java:153:        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
/utils\Util.java:154:            drawable = context.getDrawable(maskId);
/utils\Util.java:155:        } else {
/utils\Util.java:156:            drawable = context.getResources().getDrawable(maskId);
/utils\Util.java:157:        }
/utils\Util.java:159:        if (drawable == null) {
/utils\Util.java:160:            throw new IllegalArgumentException("maskId is invalid");
/utils\Util.java:161:        }
/utils\Util.java:163:        return drawable;
/utils\Util.java:164:    }
/utils\Util.java:166:    public static void showCopyDialog(AppCompatActivity activity, String text, String tag) {
/utils\Util.java:167:        MenuDialogFragment.newInstance(R.menu.menu_copy_dialog, null)
/utils\Util.java:168:                .setOnNavigationItemSelectedListener(item1 -> {
/utils\Util.java:169:                    switch (item1.getItemId()) {
/utils\Util.java:170:                        case R.id.menu_copy:
/utils\Util.java:171:                            TiebaUtil.copyText(activity, text);
/utils\Util.java:172:                            break;
/utils\Util.java:173:                        case R.id.menu_copy_selectable:
/utils\Util.java:174:                            new CopyTextDialog(activity, text).show();
/utils\Util.java:175:                            break;
/utils\Util.java:176:                    }
/utils\Util.java:177:                    return true;
/utils\Util.java:178:                })
/utils\Util.java:179:                .show(activity.getSupportFragmentManager(), tag + "_Copy");
/utils\Util.java:180:    }
/utils\Util.java:182:    /**
/utils\Util.java:183:     * StaggeredGridLayoutManager时，查找position最大的列
/utils\Util.java:184:     *
/utils\Util.java:185:     * @param lastVisiblePositions
/utils\Util.java:186:     * @return
/utils\Util.java:187:     */
/utils\Util.java:188:    public static int findMax(int[] lastVisiblePositions) {
/utils\Util.java:189:        int max = lastVisiblePositions[0];
/utils\Util.java:190:        for (int value : lastVisiblePositions) {
/utils\Util.java:191:            if (value > max) {
/utils\Util.java:192:                max = value;
/utils\Util.java:193:            }
/utils\Util.java:194:        }
/utils\Util.java:195:        return max;
/utils\Util.java:196:    }
/utils\Util.java:198:    public static View inflate(Context context, int layoutId) {
/utils\Util.java:199:        if (layoutId <= 0) {
/utils\Util.java:200:            return null;
/utils\Util.java:201:        }
/utils\Util.java:202:        return LayoutInflater.from(context).inflate(layoutId, null);
/utils\Util.java:203:    }
/utils\Util.java:206:    @ColorInt
/utils\Util.java:207:    public static int getIconColorByLevel(String levelStr) {
/utils\Util.java:208:        @ColorInt int color = 0xFFB7BCB6;
/utils\Util.java:209:        if (levelStr == null) return color;
/utils\Util.java:210:        switch (levelStr) {
/utils\Util.java:211:            case "1":
/utils\Util.java:212:            case "2":
/utils\Util.java:213:            case "3":
/utils\Util.java:214:                color = 0xFF2FBEAB;
/utils\Util.java:215:                break;
/utils\Util.java:216:            case "4":
/utils\Util.java:217:            case "5":
/utils\Util.java:218:            case "6":
/utils\Util.java:219:            case "7":
/utils\Util.java:220:            case "8":
/utils\Util.java:221:            case "9":
/utils\Util.java:222:                color = 0xFF3AA7E9;
/utils\Util.java:223:                break;
/utils\Util.java:224:            case "10":
/utils\Util.java:225:            case "11":
/utils\Util.java:226:            case "12":
/utils\Util.java:227:            case "13":
/utils\Util.java:228:            case "14":
/utils\Util.java:229:            case "15":
/utils\Util.java:230:                color = 0xFFFFA126;
/utils\Util.java:231:                break;
/utils\Util.java:232:            case "16":
/utils\Util.java:233:            case "17":
/utils\Util.java:234:            case "18":
/utils\Util.java:235:                color = 0xFFFF9C19;
/utils\Util.java:236:                break;
/utils\Util.java:237:        }
/utils\Util.java:238:        return greifyColor(color, 0.25f);
/utils\Util.java:239:    }
/utils\Util.java:241:    public static @ColorInt
/utils\Util.java:242:    int getColorByAttr(Context context, @AttrRes int attr, @ColorRes int defaultColor) {
/utils\Util.java:243:        int[] attrs = new int[]{attr};
/utils\Util.java:244:        TypedArray typedArray = context.obtainStyledAttributes(attrs);
/utils\Util.java:245:        int color = typedArray.getColor(0, context.getResources().getColor(defaultColor));
/utils\Util.java:246:        typedArray.recycle();
/utils\Util.java:247:        return color;
/utils\Util.java:248:    }
/utils\Util.java:250:    public static @Dimension
/utils\Util.java:251:    int getDimenByAttr(Context context, @AttrRes int attr, @Px int defaultDimen) {
/utils\Util.java:252:        int[] attrs = new int[]{attr};
/utils\Util.java:253:        TypedArray typedArray = context.obtainStyledAttributes(attrs);
/utils\Util.java:254:        int dimensionPixelSize = typedArray.getDimensionPixelSize(0, defaultDimen);
/utils\Util.java:255:        typedArray.recycle();
/utils\Util.java:256:        return dimensionPixelSize;
/utils\Util.java:257:    }
/utils\Util.java:259:    public static Drawable getDrawableByAttr(Context context, @AttrRes int attr) {
/utils\Util.java:260:        int[] attrs = new int[]{attr};
/utils\Util.java:261:        TypedArray typedArray = context.obtainStyledAttributes(attrs);
/utils\Util.java:262:        Drawable drawable = typedArray.getDrawable(0);
/utils\Util.java:263:        typedArray.recycle();
/utils\Util.java:264:        return drawable;
/utils\Util.java:265:    }
/utils\Util.java:267:    public static boolean canLoadGlide(Context context) {
/utils\Util.java:268:        if (context instanceof Activity) {
/utils\Util.java:269:            return !((Activity) context).isDestroyed();
/utils\Util.java:270:        }
/utils\Util.java:271:        return context != null;
/utils\Util.java:272:    }
/utils\Util.java:274:    public static long getTimeInMillis(String timeStr) {
/utils\Util.java:275:        return time2Calendar(timeStr).getTimeInMillis();
/utils\Util.java:276:    }
/utils\Util.java:278:    public static Calendar time2Calendar(String timeStr) {
/utils\Util.java:279:        String[] time = timeStr.split(":");
/utils\Util.java:280:        int hour = 0, minute = 0, second = 0;
/utils\Util.java:281:        if (time.length >= 2) {
/utils\Util.java:282:            hour = Integer.parseInt(time[0]);
/utils\Util.java:283:            minute = Integer.parseInt(time[1]);
/utils\Util.java:284:            if (time.length >= 3) {
/utils\Util.java:285:                second = Integer.parseInt(time[2]);
/utils\Util.java:286:            }
/utils\Util.java:287:        }
/utils\Util.java:288:        Calendar calendar = Calendar.getInstance();
/utils\Util.java:289:        calendar.set(Calendar.HOUR_OF_DAY, hour);
/utils\Util.java:290:        calendar.set(Calendar.MINUTE, minute);
/utils\Util.java:291:        calendar.set(Calendar.SECOND, second);
/utils\Util.java:292:        return calendar;
/utils\Util.java:293:    }
/utils\Util.java:295:    @SuppressLint("PrivateApi")
/utils\Util.java:296:    public static void setStatusBarTransparent(Activity activity) {
/utils\Util.java:297:        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) try {
/utils\Util.java:298:            Class decorViewClazz = Class.forName("com.android.internal.policy.DecorView");
/utils\Util.java:299:            Field field = decorViewClazz.getDeclaredField("mSemiTransparentStatusBarColor");
/utils\Util.java:300:            field.setAccessible(true);
/utils\Util.java:301:            field.setInt(activity.getWindow().getDecorView(), Color.TRANSPARENT);
/utils\Util.java:302:        } catch (Exception ignored) {
/utils\Util.java:303:        }
/utils\Util.java:304:    }
/utils\Util.java:306:    public static int alphaColor(@ColorInt int color, @IntRange(from = 0, to = 255) int alpha) {
/utils\Util.java:307:        int red = Color.red(color);
/utils\Util.java:308:        int green = Color.green(color);
/utils\Util.java:309:        int blue = Color.blue(color);
/utils\Util.java:310:        return Color.argb(alpha, red, green, blue);
/utils\Util.java:311:    }
/utils\Util.java:313:    public static String getTime(String replyTime) {
/utils\Util.java:314:        replyTime = fixTimestampStr(replyTime);
/utils\Util.java:315:        if (replyTime == null) {
/utils\Util.java:316:            return null;
/utils\Util.java:317:        }
/utils\Util.java:318:        return DateUtils.getRelativeTimeSpanString(Long.valueOf(replyTime)).toString();
/utils\Util.java:319:    }
/utils\Util.java:321:    public static String fixTimestampStr(String timestampStr) {
/utils\Util.java:322:        if (timestampStr == null) {
/utils\Util.java:323:            return null;
/utils\Util.java:324:        }
/utils\Util.java:325:        StringBuilder timestampStrBuilder = new StringBuilder(timestampStr);
/utils\Util.java:326:        while (timestampStrBuilder.length() < 13) {
/utils\Util.java:327:            timestampStrBuilder.append("0");
/utils\Util.java:328:        }
/utils\Util.java:329:        return timestampStrBuilder.toString();
/utils\Util.java:330:    }
/utils\Util.java:331:}/utils\VersionUtil.java:1:package com.huanchengfly.tieba.post.utils;
/utils\VersionUtil.java:3:import android.content.Context;
/utils\VersionUtil.java:4:import android.content.Intent;
/utils\VersionUtil.java:5:import android.content.pm.PackageManager;
/utils\VersionUtil.java:6:import android.net.Uri;
/utils\VersionUtil.java:8:import com.huanchengfly.tieba.post.api.models.NewUpdateBean;
/utils\VersionUtil.java:9:import com.huanchengfly.tieba.post.R;
/utils\VersionUtil.java:11:import java.util.ArrayList;
/utils\VersionUtil.java:12:import java.util.List;
/utils\VersionUtil.java:14:public class VersionUtil {
/utils\VersionUtil.java:15:    public static int getVersionCode(Context mContext) {
/utils\VersionUtil.java:16:        int versionCode = 0;
/utils\VersionUtil.java:17:        try {
/utils\VersionUtil.java:18:            versionCode = mContext.getPackageManager().
/utils\VersionUtil.java:19:                    getPackageInfo(mContext.getPackageName(), 0).versionCode;
/utils\VersionUtil.java:20:        } catch (PackageManager.NameNotFoundException e) {
/utils\VersionUtil.java:21:            e.printStackTrace();
/utils\VersionUtil.java:22:        }
/utils\VersionUtil.java:23:        return versionCode;
/utils\VersionUtil.java:24:    }
/utils\VersionUtil.java:26:    public static String getPackageName(Context context) {
/utils\VersionUtil.java:27:        String packageName = "";
/utils\VersionUtil.java:28:        try {
/utils\VersionUtil.java:29:            packageName = context.getPackageManager().
/utils\VersionUtil.java:30:                    getPackageInfo(context.getPackageName(), 0).packageName;
/utils\VersionUtil.java:31:        } catch (PackageManager.NameNotFoundException e) {
/utils\VersionUtil.java:32:            e.printStackTrace();
/utils\VersionUtil.java:33:        }
/utils\VersionUtil.java:34:        return packageName;
/utils\VersionUtil.java:35:    }
/utils\VersionUtil.java:37:    public static String getVersionName(Context context) {
/utils\VersionUtil.java:38:        String verName = "";
/utils\VersionUtil.java:39:        try {
/utils\VersionUtil.java:40:            verName = context.getPackageManager().
/utils\VersionUtil.java:41:                    getPackageInfo(context.getPackageName(), 0).versionName;
/utils\VersionUtil.java:42:        } catch (PackageManager.NameNotFoundException e) {
/utils\VersionUtil.java:43:            e.printStackTrace();
/utils\VersionUtil.java:44:        }
/utils\VersionUtil.java:45:        return verName;
/utils\VersionUtil.java:46:    }
/utils\VersionUtil.java:48:    public static void showDownloadDialog(Context context, NewUpdateBean.ResultBean versionInfo) {
/utils\VersionUtil.java:49:        List<String> list = new ArrayList<>();
/utils\VersionUtil.java:50:        for (NewUpdateBean.DownloadBean downloadBean : versionInfo.getDownloads()) {
/utils\VersionUtil.java:51:            list.add(downloadBean.getName());
/utils\VersionUtil.java:52:        }
/utils\VersionUtil.java:53:        String[] arr = list.toArray(new String[0]);
/utils\VersionUtil.java:54:        DialogUtil.build(context)
/utils\VersionUtil.java:55:                .setTitle(R.string.title_dialog_download)
/utils\VersionUtil.java:56:                .setCancelable(versionInfo.isCancelable())
/utils\VersionUtil.java:57:                .setItems(arr, (dialog, which) -> {
/utils\VersionUtil.java:58:                    NewUpdateBean.DownloadBean downloadBean = versionInfo.getDownloads().get(which);
/utils\VersionUtil.java:59:                    context.startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(downloadBean.getUrl())));
/utils\VersionUtil.java:60:                })
/utils\VersionUtil.java:61:                .create()
/utils\VersionUtil.java:62:                .show();
/utils\VersionUtil.java:63:    }
/utils\VersionUtil.java:64:}
/utils\AppPreferencesUtils.kt:1:package com.huanchengfly.tieba.post.utils
/utils\AppPreferencesUtils.kt:3:import android.content.Context
/utils\AppPreferencesUtils.kt:4:import android.content.SharedPreferences
/utils\AppPreferencesUtils.kt:5:import io.michaelrocks.paranoid.Obfuscate
/utils\AppPreferencesUtils.kt:6:import kotlin.properties.ReadWriteProperty
/utils\AppPreferencesUtils.kt:7:import kotlin.reflect.KProperty
/utils\AppPreferencesUtils.kt:9:@Obfuscate
/utils\AppPreferencesUtils.kt:10:open class AppPreferencesUtils(context: Context) {
/utils\AppPreferencesUtils.kt:11:    private val preferences: SharedPreferences =
/utils\AppPreferencesUtils.kt:12:            context.getSharedPreferences("settings", Context.MODE_PRIVATE)
/utils\AppPreferencesUtils.kt:14:    var autoSign by SharedPreferenceDelegates.boolean(defaultValue = false, key = "auto_sign")
/utils\AppPreferencesUtils.kt:16:    var autoSignTime by SharedPreferenceDelegates.string(defaultValue = "09:00", key = "auto_sign_time")
/utils\AppPreferencesUtils.kt:18:    var checkBetaUpdate by SharedPreferenceDelegates.boolean(defaultValue = false, key = "check_beta_update")
/utils\AppPreferencesUtils.kt:20:    var collectThreadSeeLz by SharedPreferenceDelegates.boolean(defaultValue = true, key = "collect_thread_see_lz")
/utils\AppPreferencesUtils.kt:22:    var customPrimaryColor by SharedPreferenceDelegates.string(key = "custom_primary_color")
/utils\AppPreferencesUtils.kt:24:    var customStatusBarFontDark by SharedPreferenceDelegates.boolean(defaultValue = false, key = "custom_status_bar_font_dark")
/utils\AppPreferencesUtils.kt:26:    var customToolbarPrimaryColor by SharedPreferenceDelegates.boolean(defaultValue = true, key = "custom_toolbar_primary_color")
/utils\AppPreferencesUtils.kt:28:    var defaultSortType by SharedPreferenceDelegates.string(key = "default_sort_type", defaultValue = "0")
/utils\AppPreferencesUtils.kt:30:    var darkTheme by SharedPreferenceDelegates.string(key = "dark_theme", defaultValue = "dark")
/utils\AppPreferencesUtils.kt:32:    var followSystemNight by SharedPreferenceDelegates.boolean(defaultValue = true, key = "follow_system_night")
/utils\AppPreferencesUtils.kt:34:    var hideExplore by SharedPreferenceDelegates.boolean(defaultValue = false)
/utils\AppPreferencesUtils.kt:36:    var imageLoadType by SharedPreferenceDelegates.string(key = "image_load_type", defaultValue = "0")
/utils\AppPreferencesUtils.kt:38:    var listSingle by SharedPreferenceDelegates.boolean(defaultValue = false)
/utils\AppPreferencesUtils.kt:40:    var levelIconOldStyle by SharedPreferenceDelegates.boolean(defaultValue = false, key = "level_icon_old_style")
/utils\AppPreferencesUtils.kt:42:    var littleTail by SharedPreferenceDelegates.string(key = "little_tail")
/utils\AppPreferencesUtils.kt:44:    var loadPictureWhenScroll by SharedPreferenceDelegates.boolean(defaultValue = true)
/utils\AppPreferencesUtils.kt:46:    var radius by SharedPreferenceDelegates.int(defaultValue = 8)
/utils\AppPreferencesUtils.kt:48:    var signDay by SharedPreferenceDelegates.int(defaultValue = -1, key = "sign_day")
/utils\AppPreferencesUtils.kt:50:    var showBothUsernameAndNickname by SharedPreferenceDelegates.boolean(defaultValue = false, key = "show_both_username_and_nickname")
/utils\AppPreferencesUtils.kt:52:    var showShortcutInThread by SharedPreferenceDelegates.boolean(defaultValue = true)
/utils\AppPreferencesUtils.kt:54:    var showTopForumInNormalList by SharedPreferenceDelegates.boolean(defaultValue = true, key = "show_top_forum_in_normal_list")
/utils\AppPreferencesUtils.kt:56:    var statusBarDarker by SharedPreferenceDelegates.boolean(defaultValue = true, key = "status_bar_darker")
/utils\AppPreferencesUtils.kt:58:    var translucentBackgroundAlpha by SharedPreferenceDelegates.int(defaultValue = 255, key = "translucent_background_alpha")
/utils\AppPreferencesUtils.kt:60:    var translucentBackgroundBlur by SharedPreferenceDelegates.int(key = "translucent_background_blur")
/utils\AppPreferencesUtils.kt:62:    var translucentThemeBackgroundPath by SharedPreferenceDelegates.string(key = "translucent_theme_background_path")
/utils\AppPreferencesUtils.kt:64:    var translucentPrimaryColor by SharedPreferenceDelegates.string(key = "translucent_primary_color")
/utils\AppPreferencesUtils.kt:66:    var useCustomTabs by SharedPreferenceDelegates.boolean(defaultValue = true, key = "use_custom_tabs")
/utils\AppPreferencesUtils.kt:68:    var useWebView by SharedPreferenceDelegates.boolean(defaultValue = true, key = "use_webview")
/utils\AppPreferencesUtils.kt:70:    private object SharedPreferenceDelegates {
/utils\AppPreferencesUtils.kt:71:        fun int(
/utils\AppPreferencesUtils.kt:72:                defaultValue: Int = 0,
/utils\AppPreferencesUtils.kt:73:                key: String? = null
/utils\AppPreferencesUtils.kt:74:        ) = object : ReadWriteProperty<AppPreferencesUtils, Int> {
/utils\AppPreferencesUtils.kt:75:            override fun getValue(thisRef: AppPreferencesUtils, property: KProperty<*>): Int {
/utils\AppPreferencesUtils.kt:76:                return thisRef.preferences.getInt(key ?: property.name, defaultValue)
/utils\AppPreferencesUtils.kt:77:            }
/utils\AppPreferencesUtils.kt:79:            override fun setValue(
/utils\AppPreferencesUtils.kt:80:                    thisRef: AppPreferencesUtils,
/utils\AppPreferencesUtils.kt:81:                    property: KProperty<*>,
/utils\AppPreferencesUtils.kt:82:                    value: Int
/utils\AppPreferencesUtils.kt:83:            ) {
/utils\AppPreferencesUtils.kt:84:                thisRef.preferences.edit().putInt(key ?: property.name, value).apply()
/utils\AppPreferencesUtils.kt:85:            }
/utils\AppPreferencesUtils.kt:86:        }
/utils\AppPreferencesUtils.kt:88:        fun long(defaultValue: Long = 0L) =
/utils\AppPreferencesUtils.kt:89:                object : ReadWriteProperty<AppPreferencesUtils, Long> {
/utils\AppPreferencesUtils.kt:90:                    override fun getValue(
/utils\AppPreferencesUtils.kt:91:                            thisRef: AppPreferencesUtils,
/utils\AppPreferencesUtils.kt:92:                            property: KProperty<*>
/utils\AppPreferencesUtils.kt:93:                    ): Long {
/utils\AppPreferencesUtils.kt:94:                        return thisRef.preferences.getLong(property.name, defaultValue)
/utils\AppPreferencesUtils.kt:95:                    }
/utils\AppPreferencesUtils.kt:97:                    override fun setValue(
/utils\AppPreferencesUtils.kt:98:                            thisRef: AppPreferencesUtils,
/utils\AppPreferencesUtils.kt:99:                            property: KProperty<*>,
/utils\AppPreferencesUtils.kt:100:                            value: Long
/utils\AppPreferencesUtils.kt:101:                    ) {
/utils\AppPreferencesUtils.kt:102:                        thisRef.preferences.edit().putLong(property.name, value).apply()
/utils\AppPreferencesUtils.kt:103:                    }
/utils\AppPreferencesUtils.kt:104:                }
/utils\AppPreferencesUtils.kt:106:        fun boolean(
/utils\AppPreferencesUtils.kt:107:                defaultValue: Boolean = false,
/utils\AppPreferencesUtils.kt:108:                key: String? = null
/utils\AppPreferencesUtils.kt:109:        ) =
/utils\AppPreferencesUtils.kt:110:                object : ReadWriteProperty<AppPreferencesUtils, Boolean> {
/utils\AppPreferencesUtils.kt:111:                    override fun getValue(
/utils\AppPreferencesUtils.kt:112:                            thisRef: AppPreferencesUtils,
/utils\AppPreferencesUtils.kt:113:                            property: KProperty<*>
/utils\AppPreferencesUtils.kt:114:                    ): Boolean {
/utils\AppPreferencesUtils.kt:115:                        return thisRef.preferences.getBoolean(key ?: property.name, defaultValue)
/utils\AppPreferencesUtils.kt:116:                    }
/utils\AppPreferencesUtils.kt:118:                    override fun setValue(
/utils\AppPreferencesUtils.kt:119:                            thisRef: AppPreferencesUtils,
/utils\AppPreferencesUtils.kt:120:                            property: KProperty<*>,
/utils\AppPreferencesUtils.kt:121:                            value: Boolean
/utils\AppPreferencesUtils.kt:122:                    ) {
/utils\AppPreferencesUtils.kt:123:                        thisRef.preferences.edit().putBoolean(key ?: property.name, value).apply()
/utils\AppPreferencesUtils.kt:124:                    }
/utils\AppPreferencesUtils.kt:125:                }
/utils\AppPreferencesUtils.kt:127:        fun float(defaultValue: Float = 0.0f) =
/utils\AppPreferencesUtils.kt:128:                object : ReadWriteProperty<AppPreferencesUtils, Float> {
/utils\AppPreferencesUtils.kt:129:                    override fun getValue(
/utils\AppPreferencesUtils.kt:130:                            thisRef: AppPreferencesUtils,
/utils\AppPreferencesUtils.kt:131:                            property: KProperty<*>
/utils\AppPreferencesUtils.kt:132:                    ): Float {
/utils\AppPreferencesUtils.kt:133:                        return thisRef.preferences.getFloat(property.name, defaultValue)
/utils\AppPreferencesUtils.kt:134:                    }
/utils\AppPreferencesUtils.kt:136:                    override fun setValue(
/utils\AppPreferencesUtils.kt:137:                            thisRef: AppPreferencesUtils,
/utils\AppPreferencesUtils.kt:138:                            property: KProperty<*>,
/utils\AppPreferencesUtils.kt:139:                            value: Float
/utils\AppPreferencesUtils.kt:140:                    ) {
/utils\AppPreferencesUtils.kt:141:                        thisRef.preferences.edit().putFloat(property.name, value).apply()
/utils\AppPreferencesUtils.kt:142:                    }
/utils\AppPreferencesUtils.kt:143:                }
/utils\AppPreferencesUtils.kt:145:        fun string(
/utils\AppPreferencesUtils.kt:146:                defaultValue: String? = null,
/utils\AppPreferencesUtils.kt:147:                key: String? = null
/utils\AppPreferencesUtils.kt:148:        ) =
/utils\AppPreferencesUtils.kt:149:                object : ReadWriteProperty<AppPreferencesUtils, String?> {
/utils\AppPreferencesUtils.kt:150:                    override fun getValue(
/utils\AppPreferencesUtils.kt:151:                            thisRef: AppPreferencesUtils,
/utils\AppPreferencesUtils.kt:152:                            property: KProperty<*>
/utils\AppPreferencesUtils.kt:153:                    ): String? {
/utils\AppPreferencesUtils.kt:154:                        return thisRef.preferences.getString(key ?: property.name, defaultValue)
/utils\AppPreferencesUtils.kt:155:                    }
/utils\AppPreferencesUtils.kt:157:                    override fun setValue(
/utils\AppPreferencesUtils.kt:158:                            thisRef: AppPreferencesUtils,
/utils\AppPreferencesUtils.kt:159:                            property: KProperty<*>,
/utils\AppPreferencesUtils.kt:160:                            value: String?
/utils\AppPreferencesUtils.kt:161:                    ) {
/utils\AppPreferencesUtils.kt:162:                        thisRef.preferences.edit().putString(key ?: property.name, value).apply()
/utils\AppPreferencesUtils.kt:163:                    }
/utils\AppPreferencesUtils.kt:164:                }
/utils\AppPreferencesUtils.kt:166:        fun stringSet(defaultValue: Set<String>? = null) =
/utils\AppPreferencesUtils.kt:167:                object : ReadWriteProperty<AppPreferencesUtils, Set<String>?> {
/utils\AppPreferencesUtils.kt:168:                    override fun getValue(
/utils\AppPreferencesUtils.kt:169:                            thisRef: AppPreferencesUtils,
/utils\AppPreferencesUtils.kt:170:                            property: KProperty<*>
/utils\AppPreferencesUtils.kt:171:                    ): Set<String>? {
/utils\AppPreferencesUtils.kt:172:                        return thisRef.preferences.getStringSet(property.name, defaultValue)
/utils\AppPreferencesUtils.kt:173:                    }
/utils\AppPreferencesUtils.kt:175:                    override fun setValue(
/utils\AppPreferencesUtils.kt:176:                            thisRef: AppPreferencesUtils,
/utils\AppPreferencesUtils.kt:177:                            property: KProperty<*>,
/utils\AppPreferencesUtils.kt:178:                            value: Set<String>?
/utils\AppPreferencesUtils.kt:179:                    ) {
/utils\AppPreferencesUtils.kt:180:                        thisRef.preferences.edit().putStringSet(property.name, value).apply()
/utils\AppPreferencesUtils.kt:181:                    }
/utils\AppPreferencesUtils.kt:182:                }
/utils\AppPreferencesUtils.kt:183:    }
/utils\AppPreferencesUtils.kt:184:}
/utils\AppPreferencesUtils.kt:186:val Context.appPreferences: AppPreferencesUtils
/utils\AppPreferencesUtils.kt:187:    get() = AppPreferencesUtils(this)/utils\BilibiliUtil.kt:1:package com.huanchengfly.tieba.post.utils
/utils\BilibiliUtil.kt:3:import android.content.Context
/utils\BilibiliUtil.kt:4:import android.text.SpannableString
/utils\BilibiliUtil.kt:5:import android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE
/utils\BilibiliUtil.kt:6:import com.huanchengfly.tieba.post.components.spans.MyURLSpan
/utils\BilibiliUtil.kt:7:import org.intellij.lang.annotations.RegExp
/utils\BilibiliUtil.kt:8:import java.util.regex.Pattern
/utils\BilibiliUtil.kt:10:object BilibiliUtil {
/utils\BilibiliUtil.kt:11:    @RegExp
/utils\BilibiliUtil.kt:12:    const val REGEX_BV = "BV([a-zA-Z0-9]{10})"
/utils\BilibiliUtil.kt:14:    @RegExp
/utils\BilibiliUtil.kt:15:    const val REGEX_AV = "av([0-9]{1,})"
/utils\BilibiliUtil.kt:17:    @RegExp
/utils\BilibiliUtil.kt:18:    const val REGEX_CV = "cv([0-9]{1,})"
/utils\BilibiliUtil.kt:20:    @RegExp
/utils\BilibiliUtil.kt:21:    const val REGEX_AU = "au([0-9]{1,})"
/utils\BilibiliUtil.kt:23:    @JvmStatic
/utils\BilibiliUtil.kt:24:    fun replaceVideoNumberSpan(
/utils\BilibiliUtil.kt:25:            context: Context,
/utils\BilibiliUtil.kt:26:            source: CharSequence?
/utils\BilibiliUtil.kt:27:    ): SpannableString {
/utils\BilibiliUtil.kt:28:        if (source == null) {
/utils\BilibiliUtil.kt:29:            return SpannableString("")
/utils\BilibiliUtil.kt:30:        }
/utils\BilibiliUtil.kt:31:        return if (source is SpannableString) {
/utils\BilibiliUtil.kt:32:            source
/utils\BilibiliUtil.kt:33:        } else {
/utils\BilibiliUtil.kt:34:            SpannableString(source)
/utils\BilibiliUtil.kt:35:        }.also {
/utils\BilibiliUtil.kt:36:            replace(context, REGEX_BV, it)
/utils\BilibiliUtil.kt:37:            replace(context, REGEX_AV, it)
/utils\BilibiliUtil.kt:38:            replace(context, REGEX_CV, it, "https://www.bilibili.com/read/")
/utils\BilibiliUtil.kt:39:            replace(context, REGEX_AU, it, "https://www.bilibili.com/audio/")
/utils\BilibiliUtil.kt:40:        }
/utils\BilibiliUtil.kt:41:    }
/utils\BilibiliUtil.kt:43:    private fun replace(
/utils\BilibiliUtil.kt:44:            context: Context,
/utils\BilibiliUtil.kt:45:            regex: String,
/utils\BilibiliUtil.kt:46:            source: SpannableString,
/utils\BilibiliUtil.kt:47:            urlPrefix: String = "https://www.bilibili.com/video/"
/utils\BilibiliUtil.kt:48:    ): CharSequence {
/utils\BilibiliUtil.kt:49:        try {
/utils\BilibiliUtil.kt:50:            val pattern = Pattern.compile(regex)
/utils\BilibiliUtil.kt:51:            val matcher = pattern.matcher(source)
/utils\BilibiliUtil.kt:52:            while (matcher.find()) {
/utils\BilibiliUtil.kt:53:                val found: String = matcher.group()
/utils\BilibiliUtil.kt:54:                val start: Int = matcher.start()
/utils\BilibiliUtil.kt:55:                val span = MyURLSpan(context, "$urlPrefix$found")
/utils\BilibiliUtil.kt:56:                source.setSpan(span, start, start + found.length, SPAN_EXCLUSIVE_EXCLUSIVE)
/utils\BilibiliUtil.kt:57:            }
/utils\BilibiliUtil.kt:58:        } catch (e: Exception) {
/utils\BilibiliUtil.kt:59:            e.printStackTrace()
/utils\BilibiliUtil.kt:60:        }
/utils\BilibiliUtil.kt:61:        return source
/utils\BilibiliUtil.kt:62:    }
/utils\BilibiliUtil.kt:63:}/utils\QuickPreviewUtil.kt:1:package com.huanchengfly.tieba.post.utils
/utils\QuickPreviewUtil.kt:3:import android.content.Context
/utils\QuickPreviewUtil.kt:4:import android.net.Uri
/utils\QuickPreviewUtil.kt:5:import android.text.TextUtils
/utils\QuickPreviewUtil.kt:6:import androidx.annotation.DrawableRes
/utils\QuickPreviewUtil.kt:7:import com.huanchengfly.tieba.post.api.TiebaApi
/utils\QuickPreviewUtil.kt:8:import com.huanchengfly.tieba.post.api.interfaces.CommonCallback
/utils\QuickPreviewUtil.kt:9:import com.huanchengfly.tieba.post.api.models.ForumPageBean
/utils\QuickPreviewUtil.kt:10:import com.huanchengfly.tieba.post.api.models.ThreadContentBean
/utils\QuickPreviewUtil.kt:11:import com.huanchengfly.tieba.post.api.retrofit.exception.TiebaException
/utils\QuickPreviewUtil.kt:12:import com.huanchengfly.tieba.post.R
/utils\QuickPreviewUtil.kt:13:import retrofit2.Call
/utils\QuickPreviewUtil.kt:14:import retrofit2.Callback
/utils\QuickPreviewUtil.kt:15:import retrofit2.Response
/utils\QuickPreviewUtil.kt:17:object QuickPreviewUtil {
/utils\QuickPreviewUtil.kt:18:    private fun isTiebaUrl(host: String?): Boolean {
/utils\QuickPreviewUtil.kt:19:        return host != null && (host.equals("wapp.baidu.com", ignoreCase = true) ||
/utils\QuickPreviewUtil.kt:20:                host.equals("tieba.baidu.com", ignoreCase = true) ||
/utils\QuickPreviewUtil.kt:21:                host.equals("tiebac.baidu.com", ignoreCase = true))
/utils\QuickPreviewUtil.kt:22:    }
/utils\QuickPreviewUtil.kt:24:    @JvmStatic
/utils\QuickPreviewUtil.kt:25:    fun isForumUrl(uri: Uri?): Boolean {
/utils\QuickPreviewUtil.kt:26:        if (uri == null || uri.host == null || uri.path == null) {
/utils\QuickPreviewUtil.kt:27:            return false
/utils\QuickPreviewUtil.kt:28:        }
/utils\QuickPreviewUtil.kt:29:        val path = uri.path
/utils\QuickPreviewUtil.kt:30:        val kw = uri.getQueryParameter("kw")
/utils\QuickPreviewUtil.kt:31:        val word = uri.getQueryParameter("word")
/utils\QuickPreviewUtil.kt:32:        return (path.equals("/f", ignoreCase = true) || path.equals("/mo/q/m", ignoreCase = true)) &&
/utils\QuickPreviewUtil.kt:33:                kw != null || word != null
/utils\QuickPreviewUtil.kt:34:    }
/utils\QuickPreviewUtil.kt:36:    @JvmStatic
/utils\QuickPreviewUtil.kt:37:    fun isThreadUrl(uri: Uri?): Boolean {
/utils\QuickPreviewUtil.kt:38:        if (uri == null || uri.host == null || uri.path == null) {
/utils\QuickPreviewUtil.kt:39:            return false
/utils\QuickPreviewUtil.kt:40:        }
/utils\QuickPreviewUtil.kt:41:        val path = uri.path
/utils\QuickPreviewUtil.kt:42:        val kz = uri.getQueryParameter("kz")
/utils\QuickPreviewUtil.kt:43:        return (path.equals("/f", ignoreCase = true) || path.equals("/mo/q/m", ignoreCase = true)) &&
/utils\QuickPreviewUtil.kt:44:                kz != null || path!!.startsWith("/p/")
/utils\QuickPreviewUtil.kt:45:    }
/utils\QuickPreviewUtil.kt:47:    @JvmStatic
/utils\QuickPreviewUtil.kt:48:    fun getForumName(uri: Uri?): String? {
/utils\QuickPreviewUtil.kt:49:        if (uri == null || uri.host == null || uri.path == null) {
/utils\QuickPreviewUtil.kt:50:            return null
/utils\QuickPreviewUtil.kt:51:        }
/utils\QuickPreviewUtil.kt:52:        val path = uri.path
/utils\QuickPreviewUtil.kt:53:        val kw = uri.getQueryParameter("kw")
/utils\QuickPreviewUtil.kt:54:        val word = uri.getQueryParameter("word")
/utils\QuickPreviewUtil.kt:55:        if (path.equals("/f", ignoreCase = true) || path.equals("/mo/q/m", ignoreCase = true)) {
/utils\QuickPreviewUtil.kt:56:            if (kw != null) {
/utils\QuickPreviewUtil.kt:57:                return kw
/utils\QuickPreviewUtil.kt:58:            } else if (word != null) {
/utils\QuickPreviewUtil.kt:59:                return word
/utils\QuickPreviewUtil.kt:60:            }
/utils\QuickPreviewUtil.kt:61:        }
/utils\QuickPreviewUtil.kt:62:        return null
/utils\QuickPreviewUtil.kt:63:    }
/utils\QuickPreviewUtil.kt:65:    private fun getThreadPreviewInfo(context: Context, uri: Uri, threadId: String, callback: CommonCallback<PreviewInfo>) {
/utils\QuickPreviewUtil.kt:66:        TiebaApi.getInstance().threadContent(threadId).enqueue(object : Callback<ThreadContentBean> {
/utils\QuickPreviewUtil.kt:67:            override fun onFailure(call: Call<ThreadContentBean>, t: Throwable) {
/utils\QuickPreviewUtil.kt:68:                val code = if (t is TiebaException) t.code else -1
/utils\QuickPreviewUtil.kt:69:                callback.onFailure(code, t.message)
/utils\QuickPreviewUtil.kt:70:            }
/utils\QuickPreviewUtil.kt:72:            override fun onResponse(call: Call<ThreadContentBean>, response: Response<ThreadContentBean>) {
/utils\QuickPreviewUtil.kt:73:                val threadContentBean = response.body()!!
/utils\QuickPreviewUtil.kt:74:                callback.onSuccess(PreviewInfo()
/utils\QuickPreviewUtil.kt:75:                        .setTitle(threadContentBean.thread?.title)
/utils\QuickPreviewUtil.kt:76:                        .setSubtitle(context.getString(R.string.subtitle_quick_preview_thread, threadContentBean.forum?.name, threadContentBean.thread?.replyNum))
/utils\QuickPreviewUtil.kt:77:                        .setUrl(uri.toString())
/utils\QuickPreviewUtil.kt:78:                        .setIconUrl(threadContentBean.thread?.author?.portrait))
/utils\QuickPreviewUtil.kt:79:            }
/utils\QuickPreviewUtil.kt:80:        })
/utils\QuickPreviewUtil.kt:81:    }
/utils\QuickPreviewUtil.kt:83:    private fun getForumPreviewInfo(context: Context, uri: Uri, forumName: String, callback: CommonCallback<PreviewInfo>) {
/utils\QuickPreviewUtil.kt:84:        TiebaApi.getInstance().forumPage(forumName).enqueue(object : Callback<ForumPageBean> {
/utils\QuickPreviewUtil.kt:85:            override fun onFailure(call: Call<ForumPageBean>, t: Throwable) {
/utils\QuickPreviewUtil.kt:86:                val code = if (t is TiebaException) t.code else -1
/utils\QuickPreviewUtil.kt:87:                callback.onFailure(code, t.message)
/utils\QuickPreviewUtil.kt:88:            }
/utils\QuickPreviewUtil.kt:90:            override fun onResponse(call: Call<ForumPageBean>, response: Response<ForumPageBean>) {
/utils\QuickPreviewUtil.kt:91:                val forumPageBean = response.body()!!
/utils\QuickPreviewUtil.kt:92:                callback.onSuccess(PreviewInfo()
/utils\QuickPreviewUtil.kt:93:                        .setTitle(context.getString(R.string.title_forum, forumPageBean.forum?.name))
/utils\QuickPreviewUtil.kt:94:                        .setSubtitle(forumPageBean.forum?.slogan)
/utils\QuickPreviewUtil.kt:95:                        .setUrl(uri.toString())
/utils\QuickPreviewUtil.kt:96:                        .setIconUrl(forumPageBean.forum?.avatar))
/utils\QuickPreviewUtil.kt:97:            }
/utils\QuickPreviewUtil.kt:98:        })
/utils\QuickPreviewUtil.kt:99:    }
/utils\QuickPreviewUtil.kt:101:    @JvmStatic
/utils\QuickPreviewUtil.kt:102:    fun getPreviewInfo(context: Context, url: String?, callback: CommonCallback<PreviewInfo>) {
/utils\QuickPreviewUtil.kt:103:        val uri = Uri.parse(url)
/utils\QuickPreviewUtil.kt:104:        if (isTiebaUrl(uri.host) && !TextUtils.isEmpty(uri.path)) {
/utils\QuickPreviewUtil.kt:105:            val path = uri.path
/utils\QuickPreviewUtil.kt:106:            if (path!!.startsWith("/p/")) {
/utils\QuickPreviewUtil.kt:107:                getThreadPreviewInfo(context, uri, path.substring(3), callback)
/utils\QuickPreviewUtil.kt:108:            } else if (path.equals("/f", ignoreCase = true) || path.equals("/mo/q/m", ignoreCase = true)) {
/utils\QuickPreviewUtil.kt:109:                val kw = uri.getQueryParameter("kw")
/utils\QuickPreviewUtil.kt:110:                val word = uri.getQueryParameter("word")
/utils\QuickPreviewUtil.kt:111:                val kz = uri.getQueryParameter("kz")
/utils\QuickPreviewUtil.kt:112:                kw?.let { getForumPreviewInfo(context, uri, it, callback) }
/utils\QuickPreviewUtil.kt:113:                        ?: (word?.let { getForumPreviewInfo(context, uri, it, callback) }
/utils\QuickPreviewUtil.kt:114:                                ?: kz?.let { getThreadPreviewInfo(context, uri, it, callback) })
/utils\QuickPreviewUtil.kt:115:            } else {
/utils\QuickPreviewUtil.kt:116:                callback.onSuccess(PreviewInfo()
/utils\QuickPreviewUtil.kt:117:                        .setUrl(url)
/utils\QuickPreviewUtil.kt:118:                        .setTitle(url)
/utils\QuickPreviewUtil.kt:119:                        .setSubtitle(context.getString(R.string.subtitle_link))
/utils\QuickPreviewUtil.kt:120:                        .setIconRes(R.drawable.ic_link))
/utils\QuickPreviewUtil.kt:121:            }
/utils\QuickPreviewUtil.kt:122:        } else {
/utils\QuickPreviewUtil.kt:123:            callback.onSuccess(PreviewInfo()
/utils\QuickPreviewUtil.kt:124:                    .setUrl(url)
/utils\QuickPreviewUtil.kt:125:                    .setTitle(url)
/utils\QuickPreviewUtil.kt:126:                    .setSubtitle(context.getString(R.string.subtitle_link))
/utils\QuickPreviewUtil.kt:127:                    .setIconRes(R.drawable.ic_link))
/utils\QuickPreviewUtil.kt:128:        }
/utils\QuickPreviewUtil.kt:129:    }
/utils\QuickPreviewUtil.kt:131:    class PreviewInfo {
/utils\QuickPreviewUtil.kt:132:        var icon: Icon? = null
/utils\QuickPreviewUtil.kt:133:            private set
/utils\QuickPreviewUtil.kt:134:        var title: String? = null
/utils\QuickPreviewUtil.kt:135:            private set
/utils\QuickPreviewUtil.kt:136:        var subtitle: String? = null
/utils\QuickPreviewUtil.kt:137:            private set
/utils\QuickPreviewUtil.kt:138:        var url: String? = null
/utils\QuickPreviewUtil.kt:139:            private set
/utils\QuickPreviewUtil.kt:141:        fun setIconRes(@DrawableRes res: Int): PreviewInfo {
/utils\QuickPreviewUtil.kt:142:            icon = Icon(res)
/utils\QuickPreviewUtil.kt:143:            return this
/utils\QuickPreviewUtil.kt:144:        }
/utils\QuickPreviewUtil.kt:146:        fun setIconUrl(url: String?): PreviewInfo {
/utils\QuickPreviewUtil.kt:147:            icon = Icon(url)
/utils\QuickPreviewUtil.kt:148:            return this
/utils\QuickPreviewUtil.kt:149:        }
/utils\QuickPreviewUtil.kt:151:        fun setTitle(title: String?): PreviewInfo {
/utils\QuickPreviewUtil.kt:152:            this.title = title
/utils\QuickPreviewUtil.kt:153:            return this
/utils\QuickPreviewUtil.kt:154:        }
/utils\QuickPreviewUtil.kt:156:        fun setSubtitle(subtitle: String?): PreviewInfo {
/utils\QuickPreviewUtil.kt:157:            this.subtitle = subtitle
/utils\QuickPreviewUtil.kt:158:            return this
/utils\QuickPreviewUtil.kt:159:        }
/utils\QuickPreviewUtil.kt:161:        fun setUrl(url: String?): PreviewInfo {
/utils\QuickPreviewUtil.kt:162:            this.url = url
/utils\QuickPreviewUtil.kt:163:            return this
/utils\QuickPreviewUtil.kt:164:        }
/utils\QuickPreviewUtil.kt:165:    }
/utils\QuickPreviewUtil.kt:167:    class Icon {
/utils\QuickPreviewUtil.kt:169:        fun setType(type: Int): Icon {
/utils\QuickPreviewUtil.kt:170:            this.type = type
/utils\QuickPreviewUtil.kt:171:            return this
/utils\QuickPreviewUtil.kt:172:        }
/utils\QuickPreviewUtil.kt:174:        fun setUrl(url: String?): Icon {
/utils\QuickPreviewUtil.kt:175:            this.url = url
/utils\QuickPreviewUtil.kt:176:            return this
/utils\QuickPreviewUtil.kt:177:        }
/utils\QuickPreviewUtil.kt:179:        fun setRes(res: Int): Icon {
/utils\QuickPreviewUtil.kt:180:            this.res = res
/utils\QuickPreviewUtil.kt:181:            return this
/utils\QuickPreviewUtil.kt:182:        }
/utils\QuickPreviewUtil.kt:184:        var type: Int
/utils\QuickPreviewUtil.kt:185:            private set
/utils\QuickPreviewUtil.kt:186:        var url: String? = null
/utils\QuickPreviewUtil.kt:187:            private set
/utils\QuickPreviewUtil.kt:188:        @DrawableRes
/utils\QuickPreviewUtil.kt:189:        var res = 0
/utils\QuickPreviewUtil.kt:190:            private set
/utils\QuickPreviewUtil.kt:192:        constructor(url: String?) {
/utils\QuickPreviewUtil.kt:193:            type = TYPE_URL
/utils\QuickPreviewUtil.kt:194:            this.url = url
/utils\QuickPreviewUtil.kt:195:        }
/utils\QuickPreviewUtil.kt:197:        constructor(@DrawableRes res: Int) {
/utils\QuickPreviewUtil.kt:198:            type = TYPE_DRAWABLE_RES
/utils\QuickPreviewUtil.kt:199:            this.res = res
/utils\QuickPreviewUtil.kt:200:        }
/utils\QuickPreviewUtil.kt:202:        companion object {
/utils\QuickPreviewUtil.kt:203:            const val TYPE_DRAWABLE_RES = 0
/utils\QuickPreviewUtil.kt:204:            const val TYPE_URL = 1
/utils\QuickPreviewUtil.kt:205:        }
/utils\QuickPreviewUtil.kt:206:    }
/utils\QuickPreviewUtil.kt:207:}/utils\TiebaUtil.kt:1:package com.huanchengfly.tieba.post.utils
/utils\TiebaUtil.kt:3:import android.app.AlarmManager
/utils\TiebaUtil.kt:4:import android.app.PendingIntent
/utils\TiebaUtil.kt:5:import android.content.ClipData
/utils\TiebaUtil.kt:6:import android.content.ClipboardManager
/utils\TiebaUtil.kt:7:import android.content.Context
/utils\TiebaUtil.kt:8:import android.content.Intent
/utils\TiebaUtil.kt:9:import android.os.Build
/utils\TiebaUtil.kt:10:import com.huanchengfly.tieba.post.R
/utils\TiebaUtil.kt:11:import com.huanchengfly.tieba.post.receivers.AutoSignAlarm
/utils\TiebaUtil.kt:12:import com.huanchengfly.tieba.post.services.OKSignService
/utils\TiebaUtil.kt:13:import com.huanchengfly.tieba.post.toastShort
/utils\TiebaUtil.kt:14:import java.util.*
/utils\TiebaUtil.kt:16:object TiebaUtil {
/utils\TiebaUtil.kt:17:    @JvmStatic
/utils\TiebaUtil.kt:18:    @JvmOverloads
/utils\TiebaUtil.kt:19:    fun copyText(context: Context, text: String?, toast: String = context.getString(R.string.toast_copy_success)) {
/utils\TiebaUtil.kt:20:        val cm = context.getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager
/utils\TiebaUtil.kt:21:        val clipData = ClipData.newPlainText("Tieba Lite", text)
/utils\TiebaUtil.kt:22:        cm.setPrimaryClip(clipData)
/utils\TiebaUtil.kt:23:        context.toastShort(toast)
/utils\TiebaUtil.kt:24:    }
/utils\TiebaUtil.kt:26:    fun initAutoSign(context: Context) {
/utils\TiebaUtil.kt:27:        val alarmManager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager
/utils\TiebaUtil.kt:28:        val autoSign = context.appPreferences.autoSign
/utils\TiebaUtil.kt:29:        val pendingIntent = PendingIntent.getBroadcast(context, 0, Intent(context, AutoSignAlarm::class.java), 0)
/utils\TiebaUtil.kt:30:        if (autoSign) {
/utils\TiebaUtil.kt:31:            val autoSignTimeStr = context.appPreferences.autoSignTime!!
/utils\TiebaUtil.kt:32:            val time = autoSignTimeStr.split(":".toRegex()).toTypedArray()
/utils\TiebaUtil.kt:33:            val hour = time[0].toInt()
/utils\TiebaUtil.kt:34:            val minute = time[1].toInt()
/utils\TiebaUtil.kt:35:            val calendar = Calendar.getInstance()
/utils\TiebaUtil.kt:36:            calendar[Calendar.HOUR_OF_DAY] = hour
/utils\TiebaUtil.kt:37:            calendar[Calendar.MINUTE] = minute
/utils\TiebaUtil.kt:38:            if (calendar.timeInMillis >= System.currentTimeMillis()) {
/utils\TiebaUtil.kt:39:                alarmManager.setInexactRepeating(AlarmManager.RTC, calendar.timeInMillis, AlarmManager.INTERVAL_DAY, pendingIntent)
/utils\TiebaUtil.kt:40:            }
/utils\TiebaUtil.kt:41:        } else {
/utils\TiebaUtil.kt:42:            alarmManager.cancel(pendingIntent)
/utils\TiebaUtil.kt:43:        }
/utils\TiebaUtil.kt:44:    }
/utils\TiebaUtil.kt:46:    @JvmStatic
/utils\TiebaUtil.kt:47:    fun startSign(context: Context) {
/utils\TiebaUtil.kt:48:        context.appPreferences.signDay = Calendar.getInstance()[Calendar.DAY_OF_MONTH]
/utils\TiebaUtil.kt:49:        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
/utils\TiebaUtil.kt:50:            context.startForegroundService(Intent(context, OKSignService::class.java)
/utils\TiebaUtil.kt:51:                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
/utils\TiebaUtil.kt:52:                    .setAction(OKSignService.ACTION_START_SIGN))
/utils\TiebaUtil.kt:53:        } else {
/utils\TiebaUtil.kt:54:            context.startService(Intent(context, OKSignService::class.java)
/utils\TiebaUtil.kt:55:                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
/utils\TiebaUtil.kt:56:                    .setAction(OKSignService.ACTION_START_SIGN))
/utils\TiebaUtil.kt:57:        }
/utils\TiebaUtil.kt:58:    }
/utils\TiebaUtil.kt:60:    @JvmStatic
/utils\TiebaUtil.kt:61:    @JvmOverloads
/utils\TiebaUtil.kt:62:    fun shareText(context: Context, text: String, title: String? = null) {
/utils\TiebaUtil.kt:63:        context.startActivity(Intent().apply {
/utils\TiebaUtil.kt:64:            action = Intent.ACTION_SEND
/utils\TiebaUtil.kt:65:            type = "text/plain"
/utils\TiebaUtil.kt:66:            putExtra(Intent.EXTRA_TEXT, "${if (title != null) "「$title」\n" else ""}$text\n（分享自贴吧 Lite）")
/utils\TiebaUtil.kt:67:        })
/utils\TiebaUtil.kt:68:    }
/utils\TiebaUtil.kt:69:}/utils\preload\PreloadUtil.java:1:package com.huanchengfly.tieba.post.utils.preload;
/utils\preload\PreloadUtil.java:3:import android.app.Activity;
/utils\preload\PreloadUtil.java:4:import android.content.Context;
/utils\preload\PreloadUtil.java:5:import android.content.Intent;
/utils\preload\PreloadUtil.java:7:import com.billy.android.preloader.PreLoader;
/utils\preload\PreloadUtil.java:8:import com.billy.android.preloader.interfaces.DataLoader;
/utils\preload\PreloadUtil.java:10:public final class PreloadUtil {
/utils\preload\PreloadUtil.java:11:    public static final String EXTRA_PRELOAD_ID = "preload_id";
/utils\preload\PreloadUtil.java:13:    public static void startActivityWithPreload(Context context, Intent intent, DataLoader dataLoader) {
/utils\preload\PreloadUtil.java:14:        context.startActivity(intent.putExtra(EXTRA_PRELOAD_ID, PreLoader.preLoad(dataLoader)));
/utils\preload\PreloadUtil.java:15:    }
/utils\preload\PreloadUtil.java:17:    public static boolean isPreloading(Activity context) {
/utils\preload\PreloadUtil.java:18:        return getPreloadId(context) != -1;
/utils\preload\PreloadUtil.java:19:    }
/utils\preload\PreloadUtil.java:21:    public static int getPreloadId(Activity context) {
/utils\preload\PreloadUtil.java:22:        return context.getIntent().getIntExtra(EXTRA_PRELOAD_ID, -1);
/utils\preload\PreloadUtil.java:23:    }
/utils\preload\PreloadUtil.java:24:}
/utils\preload\loaders\ForumLoader.kt:1:package com.huanchengfly.tieba.post.utils.preload.loaders
/utils\preload\loaders\ForumLoader.kt:3:import com.billy.android.preloader.interfaces.DataLoader
/utils\preload\loaders\ForumLoader.kt:4:import com.huanchengfly.tieba.post.api.ForumSortType
/utils\preload\loaders\ForumLoader.kt:5:import com.huanchengfly.tieba.post.api.TiebaApi
/utils\preload\loaders\ForumLoader.kt:6:import com.huanchengfly.tieba.post.api.models.ForumPageBean
/utils\preload\loaders\ForumLoader.kt:8:class ForumLoader constructor(
/utils\preload\loaders\ForumLoader.kt:9:        private val forumName: String,
/utils\preload\loaders\ForumLoader.kt:10:        private val page: Int,
/utils\preload\loaders\ForumLoader.kt:11:        private val sortType: ForumSortType = ForumSortType.REPLY_TIME
/utils\preload\loaders\ForumLoader.kt:12:) : DataLoader<ForumPageBean> {
/utils\preload\loaders\ForumLoader.kt:13:    override fun loadData(): ForumPageBean? {
/utils\preload\loaders\ForumLoader.kt:14:        val call = TiebaApi.getInstance().forumPage(forumName = forumName,
/utils\preload\loaders\ForumLoader.kt:15:                page = page,
/utils\preload\loaders\ForumLoader.kt:16:                sortType = sortType)
/utils\preload\loaders\ForumLoader.kt:17:        try {
/utils\preload\loaders\ForumLoader.kt:18:            val response = call.execute()
/utils\preload\loaders\ForumLoader.kt:19:            if (response.isSuccessful) {
/utils\preload\loaders\ForumLoader.kt:20:                return response.body()
/utils\preload\loaders\ForumLoader.kt:21:            }
/utils\preload\loaders\ForumLoader.kt:22:        } catch (e: Exception) {
/utils\preload\loaders\ForumLoader.kt:23:            e.printStackTrace()
/utils\preload\loaders\ForumLoader.kt:24:        }
/utils\preload\loaders\ForumLoader.kt:25:        return null
/utils\preload\loaders\ForumLoader.kt:26:    }
/utils\preload\loaders\ForumLoader.kt:28:}/utils\preload\loaders\LikeForumListLoader.kt:1:package com.huanchengfly.tieba.post.utils.preload.loaders
/utils\preload\loaders\LikeForumListLoader.kt:3:import com.billy.android.preloader.interfaces.DataLoader
/utils\preload\loaders\LikeForumListLoader.kt:4:import com.huanchengfly.tieba.post.api.TiebaApi
/utils\preload\loaders\LikeForumListLoader.kt:5:import com.huanchengfly.tieba.post.api.models.ForumRecommend
/utils\preload\loaders\LikeForumListLoader.kt:7:class LikeForumListLoader : DataLoader<ForumRecommend> {
/utils\preload\loaders\LikeForumListLoader.kt:8:    override fun loadData(): ForumRecommend? {
/utils\preload\loaders\LikeForumListLoader.kt:9:        val call = TiebaApi.getInstance().forumRecommend()
/utils\preload\loaders\LikeForumListLoader.kt:10:        try {
/utils\preload\loaders\LikeForumListLoader.kt:11:            val response = call.execute()
/utils\preload\loaders\LikeForumListLoader.kt:12:            if (response.isSuccessful) {
/utils\preload\loaders\LikeForumListLoader.kt:13:                return response.body()
/utils\preload\loaders\LikeForumListLoader.kt:14:            }
/utils\preload\loaders\LikeForumListLoader.kt:15:        } catch (e: Exception) {
/utils\preload\loaders\LikeForumListLoader.kt:16:            e.printStackTrace()
/utils\preload\loaders\LikeForumListLoader.kt:17:        }
/utils\preload\loaders\LikeForumListLoader.kt:18:        return null
/utils\preload\loaders\LikeForumListLoader.kt:19:    }
/utils\preload\loaders\LikeForumListLoader.kt:20:}/utils\preload\loaders\ThreadContentLoader.kt:1:package com.huanchengfly.tieba.post.utils.preload.loaders
/utils\preload\loaders\ThreadContentLoader.kt:3:import com.billy.android.preloader.interfaces.DataLoader
/utils\preload\loaders\ThreadContentLoader.kt:4:import com.huanchengfly.tieba.post.api.TiebaApi
/utils\preload\loaders\ThreadContentLoader.kt:5:import com.huanchengfly.tieba.post.api.models.ThreadContentBean
/utils\preload\loaders\ThreadContentLoader.kt:7:class ThreadContentLoader(
/utils\preload\loaders\ThreadContentLoader.kt:8:        private val threadId: String,
/utils\preload\loaders\ThreadContentLoader.kt:9:        private val page: Int = 1,
/utils\preload\loaders\ThreadContentLoader.kt:10:        private val lz: Boolean = false
/utils\preload\loaders\ThreadContentLoader.kt:11:) : DataLoader<ThreadContentBean> {
/utils\preload\loaders\ThreadContentLoader.kt:12:    override fun loadData(): ThreadContentBean? {
/utils\preload\loaders\ThreadContentLoader.kt:13:        val call = TiebaApi.getInstance().threadContent(threadId = threadId, page = page, seeLz = lz)
/utils\preload\loaders\ThreadContentLoader.kt:14:        try {
/utils\preload\loaders\ThreadContentLoader.kt:15:            val response = call.execute()
/utils\preload\loaders\ThreadContentLoader.kt:16:            if (response.isSuccessful) {
/utils\preload\loaders\ThreadContentLoader.kt:17:                return response.body()
/utils\preload\loaders\ThreadContentLoader.kt:18:            }
/utils\preload\loaders\ThreadContentLoader.kt:19:        } catch (e: Exception) {
/utils\preload\loaders\ThreadContentLoader.kt:20:            e.printStackTrace()
/utils\preload\loaders\ThreadContentLoader.kt:21:        }
/utils\preload\loaders\ThreadContentLoader.kt:22:        return null
/utils\preload\loaders\ThreadContentLoader.kt:23:    }
/utils\preload\loaders\ThreadContentLoader.kt:24:}/widgets\MarkedImageView.java:1:package com.huanchengfly.tieba.post.widgets;
/widgets\MarkedImageView.java:3:import android.annotation.SuppressLint;
/widgets\MarkedImageView.java:4:import android.content.Context;
/widgets\MarkedImageView.java:5:import android.graphics.Canvas;
/widgets\MarkedImageView.java:6:import android.graphics.Color;
/widgets\MarkedImageView.java:7:import android.graphics.Paint;
/widgets\MarkedImageView.java:8:import android.graphics.RectF;
/widgets\MarkedImageView.java:9:import android.util.AttributeSet;
/widgets\MarkedImageView.java:11:import androidx.appcompat.widget.AppCompatImageView;
/widgets\MarkedImageView.java:13:import com.huanchengfly.tieba.post.utils.DisplayUtil;
/widgets\MarkedImageView.java:15:public class MarkedImageView extends AppCompatImageView {
/widgets\MarkedImageView.java:16:    private Paint mCirclePaint;
/widgets\MarkedImageView.java:17:    private Paint mTextPaint;
/widgets\MarkedImageView.java:18:    private String mMarkText;
/widgets\MarkedImageView.java:19:    private boolean mIsMarkVisible = false;
/widgets\MarkedImageView.java:21:    private Context mContext;
/widgets\MarkedImageView.java:22:    private int mPaddingPx;
/widgets\MarkedImageView.java:23:    private float mMarkRadius;
/widgets\MarkedImageView.java:24:    private int mTextSize;
/widgets\MarkedImageView.java:26:    public MarkedImageView(Context context) {
/widgets\MarkedImageView.java:27:        this(context, null);
/widgets\MarkedImageView.java:28:    }
/widgets\MarkedImageView.java:30:    public MarkedImageView(Context context, AttributeSet attrs) {
/widgets\MarkedImageView.java:31:        this(context, attrs, 0);
/widgets\MarkedImageView.java:32:    }
/widgets\MarkedImageView.java:34:    public MarkedImageView(Context context, AttributeSet attrs, int defStyleAttr) {
/widgets\MarkedImageView.java:35:        super(context, attrs, defStyleAttr);
/widgets\MarkedImageView.java:36:        this.mContext = context;
/widgets\MarkedImageView.java:37:        mCirclePaint = new Paint(Paint.ANTI_ALIAS_FLAG);
/widgets\MarkedImageView.java:38:        mCirclePaint.setColor(Color.parseColor("#66000000"));
/widgets\MarkedImageView.java:39:        mTextPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
/widgets\MarkedImageView.java:40:        mTextPaint.setColor(Color.WHITE);
/widgets\MarkedImageView.java:41:        mTextPaint.setTextAlign(Paint.Align.CENTER);
/widgets\MarkedImageView.java:42:        mPaddingPx = DisplayUtil.dp2px(mContext, 8);
/widgets\MarkedImageView.java:43:        mMarkRadius = DisplayUtil.dp2px(mContext, 8);
/widgets\MarkedImageView.java:44:        mTextSize = DisplayUtil.dp2px(mContext, 10);
/widgets\MarkedImageView.java:45:        mTextPaint.setTextSize(mTextSize);
/widgets\MarkedImageView.java:46:    }
/widgets\MarkedImageView.java:48:    @Override
/widgets\MarkedImageView.java:49:    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
/widgets\MarkedImageView.java:50:        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
/widgets\MarkedImageView.java:51:    }
/widgets\MarkedImageView.java:53:    @SuppressLint("DrawAllocation")
/widgets\MarkedImageView.java:54:    @Override
/widgets\MarkedImageView.java:55:    protected void onDraw(Canvas canvas) {
/widgets\MarkedImageView.java:56:        super.onDraw(canvas);
/widgets\MarkedImageView.java:57:        if (mIsMarkVisible && mMarkText != null) {
/widgets\MarkedImageView.java:58:            float textWidth = mTextPaint.measureText(mMarkText);
/widgets\MarkedImageView.java:59:            RectF rectF = new RectF(getMeasuredWidth() - 2 * mMarkRadius - mPaddingPx - textWidth,
/widgets\MarkedImageView.java:60:                    mPaddingPx,
/widgets\MarkedImageView.java:61:                    getMeasuredWidth() + (2 / 3) * mMarkRadius - mPaddingPx,
/widgets\MarkedImageView.java:62:                    2 * mMarkRadius + mPaddingPx);
/widgets\MarkedImageView.java:63:            canvas.drawRoundRect(rectF, mMarkRadius, mMarkRadius, mCirclePaint);
/widgets\MarkedImageView.java:64:            canvas.drawText(mMarkText, getMeasuredWidth() - mMarkRadius - textWidth, mMarkRadius + mTextSize / 3 + mPaddingPx, mTextPaint);
/widgets\MarkedImageView.java:65:        }
/widgets\MarkedImageView.java:66:    }
/widgets\MarkedImageView.java:68:    public void setMarkText(String markText) {
/widgets\MarkedImageView.java:69:        mMarkText = markText;
/widgets\MarkedImageView.java:70:        invalidate();
/widgets\MarkedImageView.java:71:    }
/widgets\MarkedImageView.java:73:    public void setMarkVisible(boolean isMarkVisible) {
/widgets\MarkedImageView.java:74:        mIsMarkVisible = isMarkVisible;
/widgets\MarkedImageView.java:75:        invalidate();
/widgets\MarkedImageView.java:76:    }
/widgets\MarkedImageView.java:78:    @Override
/widgets\MarkedImageView.java:79:    public void draw(Canvas canvas) {
/widgets\MarkedImageView.java:80:        try {
/widgets\MarkedImageView.java:81:            super.draw(canvas);
/widgets\MarkedImageView.java:82:        } catch (Exception e) {
/widgets\MarkedImageView.java:83:            e.printStackTrace();
/widgets\MarkedImageView.java:84:        }
/widgets\MarkedImageView.java:85:    }
/widgets\MarkedImageView.java:86:}
/widgets\MyImageView.java:1:package com.huanchengfly.tieba.post.widgets;
/widgets\MyImageView.java:3:import android.content.Context;
/widgets\MyImageView.java:4:import android.graphics.Canvas;
/widgets\MyImageView.java:5:import android.util.AttributeSet;
/widgets\MyImageView.java:7:import androidx.appcompat.widget.AppCompatImageView;
/widgets\MyImageView.java:9:import com.huanchengfly.tieba.post.interfaces.OnPhotoErrorListener;
/widgets\MyImageView.java:11:public class MyImageView extends AppCompatImageView {
/widgets\MyImageView.java:12:    protected OnPhotoErrorListener onPhotoErrorListener;
/widgets\MyImageView.java:14:    public MyImageView(Context context) {
/widgets\MyImageView.java:15:        super(context);
/widgets\MyImageView.java:16:    }
/widgets\MyImageView.java:18:    public MyImageView(Context context, AttributeSet attrs) {
/widgets\MyImageView.java:19:        super(context, attrs);
/widgets\MyImageView.java:20:    }
/widgets\MyImageView.java:22:    public MyImageView(Context context, AttributeSet attrs, int defStyleAttr) {
/widgets\MyImageView.java:23:        super(context, attrs, defStyleAttr);
/widgets\MyImageView.java:24:    }
/widgets\MyImageView.java:26:    public OnPhotoErrorListener getOnPhotoErrorListener() {
/widgets\MyImageView.java:27:        return onPhotoErrorListener;
/widgets\MyImageView.java:28:    }
/widgets\MyImageView.java:30:    public MyImageView setOnPhotoErrorListener(OnPhotoErrorListener onPhotoErrorListener) {
/widgets\MyImageView.java:31:        this.onPhotoErrorListener = onPhotoErrorListener;
/widgets\MyImageView.java:32:        return this;
/widgets\MyImageView.java:33:    }
/widgets\MyImageView.java:35:    @Override
/widgets\MyImageView.java:36:    public void draw(Canvas canvas) {
/widgets\MyImageView.java:37:        try {
/widgets\MyImageView.java:38:            super.draw(canvas);
/widgets\MyImageView.java:39:        } catch (Exception e) {
/widgets\MyImageView.java:40:            e.printStackTrace();
/widgets\MyImageView.java:41:            if (getOnPhotoErrorListener() != null) {
/widgets\MyImageView.java:42:                getOnPhotoErrorListener().onError(e);
/widgets\MyImageView.java:43:            }
/widgets\MyImageView.java:44:        }
/widgets\MyImageView.java:45:    }
/widgets\MyImageView.java:46:}
/widgets\MyLinearLayout.java:1:package com.huanchengfly.tieba.post.widgets;
/widgets\MyLinearLayout.java:3:import android.content.Context;
/widgets\MyLinearLayout.java:4:import android.util.AttributeSet;
/widgets\MyLinearLayout.java:5:import android.view.View;
/widgets\MyLinearLayout.java:6:import android.widget.LinearLayout;
/widgets\MyLinearLayout.java:8:import java.util.List;
/widgets\MyLinearLayout.java:10:public class MyLinearLayout extends LinearLayout {
/widgets\MyLinearLayout.java:11:    public MyLinearLayout(Context context) {
/widgets\MyLinearLayout.java:12:        this(context, null);
/widgets\MyLinearLayout.java:13:    }
/widgets\MyLinearLayout.java:15:    public MyLinearLayout(Context context, AttributeSet attrs) {
/widgets\MyLinearLayout.java:16:        this(context, attrs, 0);
/widgets\MyLinearLayout.java:17:    }
/widgets\MyLinearLayout.java:19:    public MyLinearLayout(Context context, AttributeSet attrs, int defStyleAttr) {
/widgets\MyLinearLayout.java:20:        super(context, attrs, defStyleAttr);
/widgets\MyLinearLayout.java:21:    }
/widgets\MyLinearLayout.java:23:    public void addViews(List<View> views) {
/widgets\MyLinearLayout.java:24:        for (View view : views) {
/widgets\MyLinearLayout.java:25:            addViewInLayout(view, -1, view.getLayoutParams(), true);
/widgets\MyLinearLayout.java:26:        }
/widgets\MyLinearLayout.java:27:        requestLayout();
/widgets\MyLinearLayout.java:28:        invalidate();
/widgets\MyLinearLayout.java:29:    }
/widgets\MyLinearLayout.java:30:}/widgets\MyPhotoView.java:1:package com.huanchengfly.tieba.post.widgets;
/widgets\MyPhotoView.java:3:import android.content.Context;
/widgets\MyPhotoView.java:4:import android.graphics.Canvas;
/widgets\MyPhotoView.java:5:import android.util.AttributeSet;
/widgets\MyPhotoView.java:6:import android.view.MotionEvent;
/widgets\MyPhotoView.java:8:import com.bm.library.PhotoView;
/widgets\MyPhotoView.java:9:import com.huanchengfly.tieba.post.interfaces.OnDispatchTouchEvent;
/widgets\MyPhotoView.java:10:import com.huanchengfly.tieba.post.interfaces.OnPhotoErrorListener;
/widgets\MyPhotoView.java:12:public class MyPhotoView extends PhotoView {
/widgets\MyPhotoView.java:13:    public static final String TAG = MyPhotoView.class.getSimpleName();
/widgets\MyPhotoView.java:15:    protected OnPhotoErrorListener onPhotoErrorListener;
/widgets\MyPhotoView.java:16:    protected OnDispatchTouchEvent onDispatchTouchEvent;
/widgets\MyPhotoView.java:17:    private int startX, startY;
/widgets\MyPhotoView.java:19:    public MyPhotoView(Context context) {
/widgets\MyPhotoView.java:20:        super(context);
/widgets\MyPhotoView.java:21:    }
/widgets\MyPhotoView.java:23:    public MyPhotoView(Context context, AttributeSet attrs) {
/widgets\MyPhotoView.java:24:        super(context, attrs);
/widgets\MyPhotoView.java:25:    }
/widgets\MyPhotoView.java:27:    public MyPhotoView(Context context, AttributeSet attrs, int defStyleAttr) {
/widgets\MyPhotoView.java:28:        super(context, attrs, defStyleAttr);
/widgets\MyPhotoView.java:29:    }
/widgets\MyPhotoView.java:31:    public OnDispatchTouchEvent getOnDispatchTouchEvent() {
/widgets\MyPhotoView.java:32:        return onDispatchTouchEvent;
/widgets\MyPhotoView.java:33:    }
/widgets\MyPhotoView.java:35:    public MyPhotoView setOnDispatchTouchEvent(OnDispatchTouchEvent onDispatchTouchEvent) {
/widgets\MyPhotoView.java:36:        this.onDispatchTouchEvent = onDispatchTouchEvent;
/widgets\MyPhotoView.java:37:        return this;
/widgets\MyPhotoView.java:38:    }
/widgets\MyPhotoView.java:40:    public OnPhotoErrorListener getOnPhotoErrorListener() {
/widgets\MyPhotoView.java:41:        return onPhotoErrorListener;
/widgets\MyPhotoView.java:42:    }
/widgets\MyPhotoView.java:44:    public MyPhotoView setOnPhotoErrorListener(OnPhotoErrorListener onPhotoErrorListener) {
/widgets\MyPhotoView.java:45:        this.onPhotoErrorListener = onPhotoErrorListener;
/widgets\MyPhotoView.java:46:        return this;
/widgets\MyPhotoView.java:47:    }
/widgets\MyPhotoView.java:49:    @Override
/widgets\MyPhotoView.java:50:    public boolean dispatchTouchEvent(MotionEvent event) {
/widgets\MyPhotoView.java:51:        if (getOnDispatchTouchEvent() != null) {
/widgets\MyPhotoView.java:52:            getOnDispatchTouchEvent().onDispatchTouchEvent(event);
/widgets\MyPhotoView.java:53:        }
/widgets\MyPhotoView.java:54:        switch (event.getAction()) {
/widgets\MyPhotoView.java:55:            case MotionEvent.ACTION_DOWN:
/widgets\MyPhotoView.java:56:                startX = (int) event.getX();
/widgets\MyPhotoView.java:57:                startY = (int) event.getY();
/widgets\MyPhotoView.java:58:                getParent().requestDisallowInterceptTouchEvent(true);
/widgets\MyPhotoView.java:59:                break;
/widgets\MyPhotoView.java:60:            case MotionEvent.ACTION_MOVE:
/widgets\MyPhotoView.java:61:                int endX = (int) event.getX();
/widgets\MyPhotoView.java:62:                int endY = (int) event.getY();
/widgets\MyPhotoView.java:63:                int disX = Math.abs(endX - startX);
/widgets\MyPhotoView.java:64:                int disY = Math.abs(endY - startY);
/widgets\MyPhotoView.java:65:                if (disX > disY) {
/widgets\MyPhotoView.java:66:                    getParent().requestDisallowInterceptTouchEvent(canScrollHorizontally(startX - endX));
/widgets\MyPhotoView.java:67:                } else {
/widgets\MyPhotoView.java:68:                    getParent().requestDisallowInterceptTouchEvent(canScrollVertically(startY - endY));
/widgets\MyPhotoView.java:69:                }
/widgets\MyPhotoView.java:70:                break;
/widgets\MyPhotoView.java:71:            case MotionEvent.ACTION_UP:
/widgets\MyPhotoView.java:72:            case MotionEvent.ACTION_CANCEL:
/widgets\MyPhotoView.java:73:                getParent().requestDisallowInterceptTouchEvent(false);
/widgets\MyPhotoView.java:74:                break;
/widgets\MyPhotoView.java:75:        }
/widgets\MyPhotoView.java:76:        return super.dispatchTouchEvent(event);
/widgets\MyPhotoView.java:77:    }
/widgets\MyPhotoView.java:79:    @Override
/widgets\MyPhotoView.java:80:    public void draw(Canvas canvas) {
/widgets\MyPhotoView.java:81:        try {
/widgets\MyPhotoView.java:82:            super.draw(canvas);
/widgets\MyPhotoView.java:83:        } catch (Exception e) {
/widgets\MyPhotoView.java:84:            e.printStackTrace();
/widgets\MyPhotoView.java:85:            if (getOnPhotoErrorListener() != null) {
/widgets\MyPhotoView.java:86:                getOnPhotoErrorListener().onError(e);
/widgets\MyPhotoView.java:87:            }
/widgets\MyPhotoView.java:88:        }
/widgets\MyPhotoView.java:89:    }
/widgets\MyPhotoView.java:90:}
/widgets\MyRecyclerView.java:1:package com.huanchengfly.tieba.post.widgets;
/widgets\MyRecyclerView.java:3:import android.content.Context;
/widgets\MyRecyclerView.java:4:import android.util.AttributeSet;
/widgets\MyRecyclerView.java:6:import androidx.annotation.NonNull;
/widgets\MyRecyclerView.java:7:import androidx.annotation.Nullable;
/widgets\MyRecyclerView.java:8:import androidx.recyclerview.widget.RecyclerView;
/widgets\MyRecyclerView.java:10:public class MyRecyclerView extends RecyclerView {
/widgets\MyRecyclerView.java:11:    public MyRecyclerView(@NonNull Context context) {
/widgets\MyRecyclerView.java:12:        super(context);
/widgets\MyRecyclerView.java:13:    }
/widgets\MyRecyclerView.java:15:    public MyRecyclerView(@NonNull Context context, @Nullable AttributeSet attrs) {
/widgets\MyRecyclerView.java:16:        super(context, attrs);
/widgets\MyRecyclerView.java:17:    }
/widgets\MyRecyclerView.java:19:    public MyRecyclerView(@NonNull Context context, @Nullable AttributeSet attrs, int defStyle) {
/widgets\MyRecyclerView.java:20:        super(context, attrs, defStyle);
/widgets\MyRecyclerView.java:21:    }
/widgets\MyRecyclerView.java:22:}
/widgets\MyScaleImageView.java:1:package com.huanchengfly.tieba.post.widgets;
/widgets\MyScaleImageView.java:3:import android.content.Context;
/widgets\MyScaleImageView.java:4:import android.util.AttributeSet;
/widgets\MyScaleImageView.java:5:import android.view.MotionEvent;
/widgets\MyScaleImageView.java:7:import com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView;
/widgets\MyScaleImageView.java:9:public class MyScaleImageView extends SubsamplingScaleImageView {
/widgets\MyScaleImageView.java:10:    private int startX, startY;
/widgets\MyScaleImageView.java:12:    public MyScaleImageView(Context context, AttributeSet attr) {
/widgets\MyScaleImageView.java:13:        super(context, attr);
/widgets\MyScaleImageView.java:14:    }
/widgets\MyScaleImageView.java:16:    public MyScaleImageView(Context context) {
/widgets\MyScaleImageView.java:17:        this(context, null);
/widgets\MyScaleImageView.java:18:    }
/widgets\MyScaleImageView.java:20:    @Override
/widgets\MyScaleImageView.java:21:    public boolean dispatchTouchEvent(MotionEvent ev) {
/widgets\MyScaleImageView.java:22:        switch (ev.getAction()) {
/widgets\MyScaleImageView.java:23:            case MotionEvent.ACTION_DOWN:
/widgets\MyScaleImageView.java:24:                startX = (int) ev.getX();
/widgets\MyScaleImageView.java:25:                startY = (int) ev.getY();
/widgets\MyScaleImageView.java:26:                getParent().requestDisallowInterceptTouchEvent(true);
/widgets\MyScaleImageView.java:27:                break;
/widgets\MyScaleImageView.java:28:            case MotionEvent.ACTION_MOVE:
/widgets\MyScaleImageView.java:29:                int endX = (int) ev.getX();
/widgets\MyScaleImageView.java:30:                int endY = (int) ev.getY();
/widgets\MyScaleImageView.java:31:                int disX = Math.abs(endX - startX);
/widgets\MyScaleImageView.java:32:                int disY = Math.abs(endY - startY);
/widgets\MyScaleImageView.java:33:                if (disX > disY) {
/widgets\MyScaleImageView.java:34:                    getParent().requestDisallowInterceptTouchEvent(canScrollHorizontally(startX - endX));
/widgets\MyScaleImageView.java:35:                } else {
/widgets\MyScaleImageView.java:36:                    getParent().requestDisallowInterceptTouchEvent(canScrollVertically(startY - endY));
/widgets\MyScaleImageView.java:37:                }
/widgets\MyScaleImageView.java:38:                break;
/widgets\MyScaleImageView.java:39:            case MotionEvent.ACTION_UP:
/widgets\MyScaleImageView.java:40:            case MotionEvent.ACTION_CANCEL:
/widgets\MyScaleImageView.java:41:                getParent().requestDisallowInterceptTouchEvent(false);
/widgets\MyScaleImageView.java:42:                break;
/widgets\MyScaleImageView.java:43:        }
/widgets\MyScaleImageView.java:44:        return super.dispatchTouchEvent(ev);
/widgets\MyScaleImageView.java:45:    }
/widgets\MyScaleImageView.java:46:}
/widgets\MySpannableTextView.java:1:package com.huanchengfly.tieba.post.widgets;
/widgets\MySpannableTextView.java:3:import android.content.Context;
/widgets\MySpannableTextView.java:4:import android.util.AttributeSet;
/widgets\MySpannableTextView.java:5:import android.view.MotionEvent;
/widgets\MySpannableTextView.java:7:import androidx.annotation.Nullable;
/widgets\MySpannableTextView.java:8:import androidx.appcompat.widget.AppCompatTextView;
/widgets\MySpannableTextView.java:10:import com.huanchengfly.tieba.post.components.LinkTouchMovementMethod;
/widgets\MySpannableTextView.java:12:public class MySpannableTextView extends AppCompatTextView {
/widgets\MySpannableTextView.java:14:    private LinkTouchMovementMethod mLinkTouchMovementMethod;
/widgets\MySpannableTextView.java:16:    public MySpannableTextView(Context context) {
/widgets\MySpannableTextView.java:17:        super(context);
/widgets\MySpannableTextView.java:18:    }
/widgets\MySpannableTextView.java:20:    public MySpannableTextView(Context context, @Nullable AttributeSet attrs) {
/widgets\MySpannableTextView.java:21:        super(context, attrs);
/widgets\MySpannableTextView.java:22:    }
/widgets\MySpannableTextView.java:24:    public MySpannableTextView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
/widgets\MySpannableTextView.java:25:        super(context, attrs, defStyleAttr);
/widgets\MySpannableTextView.java:26:    }
/widgets\MySpannableTextView.java:28:    @Override
/widgets\MySpannableTextView.java:29:    public boolean onTouchEvent(MotionEvent event) {
/widgets\MySpannableTextView.java:30:        boolean result = super.onTouchEvent(event);
/widgets\MySpannableTextView.java:31:        return mLinkTouchMovementMethod != null ? mLinkTouchMovementMethod.isPressedSpan() : result;
/widgets\MySpannableTextView.java:32:    }
/widgets\MySpannableTextView.java:34:    public void setLinkTouchMovementMethod(LinkTouchMovementMethod linkTouchMovementMethod) {
/widgets\MySpannableTextView.java:35:        mLinkTouchMovementMethod = linkTouchMovementMethod;
/widgets\MySpannableTextView.java:36:        setMovementMethod(linkTouchMovementMethod);
/widgets\MySpannableTextView.java:37:    }
/widgets\MySpannableTextView.java:38:}
/widgets\MyViewPager.java:1:package com.huanchengfly.tieba.post.widgets;
/widgets\MyViewPager.java:3:import android.content.Context;
/widgets\MyViewPager.java:4:import android.util.AttributeSet;
/widgets\MyViewPager.java:5:import android.view.MotionEvent;
/widgets\MyViewPager.java:7:import androidx.viewpager.widget.ViewPager;
/widgets\MyViewPager.java:9:/**
/widgets\MyViewPager.java:10: * Created by Administrator on 2017/5/19.
/widgets\MyViewPager.java:11: */
/widgets\MyViewPager.java:13:public class MyViewPager extends ViewPager {
/widgets\MyViewPager.java:14:    public static final String TAG = MyViewPager.class.getSimpleName();
/widgets\MyViewPager.java:16:    private boolean mCanScroll = true;
/widgets\MyViewPager.java:18:    public MyViewPager(Context context) {
/widgets\MyViewPager.java:19:        this(context, null);
/widgets\MyViewPager.java:20:    }
/widgets\MyViewPager.java:22:    public MyViewPager(Context context, AttributeSet attrs) {
/widgets\MyViewPager.java:23:        super(context, attrs);
/widgets\MyViewPager.java:24:    }
/widgets\MyViewPager.java:26:    public boolean isCanScroll() {
/widgets\MyViewPager.java:27:        return mCanScroll;
/widgets\MyViewPager.java:28:    }
/widgets\MyViewPager.java:30:    /**
/widgets\MyViewPager.java:31:     * 设置其是否能滑动换页
/widgets\MyViewPager.java:32:     *
/widgets\MyViewPager.java:33:     * @param isCanScroll false 不能换页， true 可以滑动换页
/widgets\MyViewPager.java:34:     */
/widgets\MyViewPager.java:35:    public void setCanScroll(boolean isCanScroll) {
/widgets\MyViewPager.java:36:        this.mCanScroll = isCanScroll;
/widgets\MyViewPager.java:37:    }
/widgets\MyViewPager.java:39:    @Override
/widgets\MyViewPager.java:40:    public boolean onInterceptTouchEvent(MotionEvent ev) {
/widgets\MyViewPager.java:41:        try {
/widgets\MyViewPager.java:42:            return isCanScroll() && super.onInterceptTouchEvent(ev);
/widgets\MyViewPager.java:43:        } catch (IllegalArgumentException ex) {
/widgets\MyViewPager.java:44:            ex.printStackTrace();
/widgets\MyViewPager.java:45:        }
/widgets\MyViewPager.java:46:        return false;
/widgets\MyViewPager.java:47:    }
/widgets\MyViewPager.java:49:    /**
/widgets\MyViewPager.java:50:     * 修复 Crash
/widgets\MyViewPager.java:51:     */
/widgets\MyViewPager.java:52:    @Override
/widgets\MyViewPager.java:53:    public boolean onTouchEvent(MotionEvent ev) {
/widgets\MyViewPager.java:54:        try {
/widgets\MyViewPager.java:55:            return isCanScroll() && super.onTouchEvent(ev);
/widgets\MyViewPager.java:56:        } catch (IllegalArgumentException ex) {
/widgets\MyViewPager.java:57:            ex.printStackTrace();
/widgets\MyViewPager.java:58:        }
/widgets\MyViewPager.java:59:        return false;
/widgets\MyViewPager.java:60:    }
/widgets\MyViewPager.java:61:}
/widgets\ShadowLayout.java:1:package com.huanchengfly.tieba.post.widgets;
/widgets\ShadowLayout.java:3:import android.content.Context;
/widgets\ShadowLayout.java:4:import android.content.res.TypedArray;
/widgets\ShadowLayout.java:5:import android.graphics.Bitmap;
/widgets\ShadowLayout.java:6:import android.graphics.Bitmap.Config;
/widgets\ShadowLayout.java:7:import android.graphics.Canvas;
/widgets\ShadowLayout.java:8:import android.graphics.Color;
/widgets\ShadowLayout.java:9:import android.graphics.Paint;
/widgets\ShadowLayout.java:10:import android.graphics.Paint.Style;
/widgets\ShadowLayout.java:11:import android.graphics.RectF;
/widgets\ShadowLayout.java:12:import android.graphics.drawable.BitmapDrawable;
/widgets\ShadowLayout.java:13:import android.util.AttributeSet;
/widgets\ShadowLayout.java:14:import android.widget.FrameLayout;
/widgets\ShadowLayout.java:16:import androidx.annotation.NonNull;
/widgets\ShadowLayout.java:18:import com.huanchengfly.tieba.post.R;
/widgets\ShadowLayout.java:20:public class ShadowLayout extends FrameLayout {
/widgets\ShadowLayout.java:21:    private int mShadowColor;
/widgets\ShadowLayout.java:22:    private float mShadowRadius;
/widgets\ShadowLayout.java:23:    private float mCornerRadius;
/widgets\ShadowLayout.java:24:    private float mDx;
/widgets\ShadowLayout.java:25:    private float mDy;
/widgets\ShadowLayout.java:26:    private int mBackgroundColor;
/widgets\ShadowLayout.java:27:    private boolean mInvalidateShadowOnSizeChanged;
/widgets\ShadowLayout.java:28:    private boolean mForceInvalidateShadow;
/widgets\ShadowLayout.java:30:    public ShadowLayout(@NonNull Context context) {
/widgets\ShadowLayout.java:31:        super(context);
/widgets\ShadowLayout.java:32:        this.mInvalidateShadowOnSizeChanged = true;
/widgets\ShadowLayout.java:33:        this.initView(context, null);
/widgets\ShadowLayout.java:34:    }
/widgets\ShadowLayout.java:36:    public ShadowLayout(@NonNull Context context, @NonNull AttributeSet attrs) {
/widgets\ShadowLayout.java:37:        super(context, attrs);
/widgets\ShadowLayout.java:38:        this.mInvalidateShadowOnSizeChanged = true;
/widgets\ShadowLayout.java:39:        this.initView(context, attrs);
/widgets\ShadowLayout.java:40:    }
/widgets\ShadowLayout.java:42:    public ShadowLayout(@NonNull Context context, @NonNull AttributeSet attrs, int defStyleAttr) {
/widgets\ShadowLayout.java:43:        super(context, attrs, defStyleAttr);
/widgets\ShadowLayout.java:44:        this.mInvalidateShadowOnSizeChanged = true;
/widgets\ShadowLayout.java:45:        this.initView(context, attrs);
/widgets\ShadowLayout.java:46:    }
/widgets\ShadowLayout.java:48:    public ShadowLayout(@NonNull Context context, @NonNull AttributeSet attrs, int defStyleAttr, int defStyleRes) {
/widgets\ShadowLayout.java:49:        super(context, attrs, defStyleAttr, defStyleRes);
/widgets\ShadowLayout.java:50:        this.mInvalidateShadowOnSizeChanged = true;
/widgets\ShadowLayout.java:51:        this.initView(context, attrs);
/widgets\ShadowLayout.java:52:    }
/widgets\ShadowLayout.java:54:    public final int getShadowColor() {
/widgets\ShadowLayout.java:55:        return this.mShadowColor;
/widgets\ShadowLayout.java:56:    }
/widgets\ShadowLayout.java:58:    public final void setShadowColor(int var1) {
/widgets\ShadowLayout.java:59:        this.mShadowColor = var1;
/widgets\ShadowLayout.java:60:        invalidateShadow();
/widgets\ShadowLayout.java:61:    }
/widgets\ShadowLayout.java:63:    public final float getShadowRadius() {
/widgets\ShadowLayout.java:64:        return this.mShadowRadius;
/widgets\ShadowLayout.java:65:    }
/widgets\ShadowLayout.java:67:    public final void setShadowRadius(float var1) {
/widgets\ShadowLayout.java:68:        this.mShadowRadius = var1;
/widgets\ShadowLayout.java:69:        invalidateShadow();
/widgets\ShadowLayout.java:70:    }
/widgets\ShadowLayout.java:72:    public final float getCornerRadius() {
/widgets\ShadowLayout.java:73:        return this.mCornerRadius;
/widgets\ShadowLayout.java:74:    }
/widgets\ShadowLayout.java:76:    public final void setCornerRadius(float var1) {
/widgets\ShadowLayout.java:77:        this.mCornerRadius = var1;
/widgets\ShadowLayout.java:78:        invalidateShadow();
/widgets\ShadowLayout.java:79:    }
/widgets\ShadowLayout.java:81:    public final float getDx() {
/widgets\ShadowLayout.java:82:        return this.mDx;
/widgets\ShadowLayout.java:83:    }
/widgets\ShadowLayout.java:85:    public final void setDx(float var1) {
/widgets\ShadowLayout.java:86:        this.mDx = var1;
/widgets\ShadowLayout.java:87:        invalidateShadow();
/widgets\ShadowLayout.java:88:    }
/widgets\ShadowLayout.java:90:    public final float getDy() {
/widgets\ShadowLayout.java:91:        return this.mDy;
/widgets\ShadowLayout.java:92:    }
/widgets\ShadowLayout.java:94:    public final void setDy(float var1) {
/widgets\ShadowLayout.java:95:        this.mDy = var1;
/widgets\ShadowLayout.java:96:        invalidateShadow();
/widgets\ShadowLayout.java:97:    }
/widgets\ShadowLayout.java:99:    public final int getBackgroundColor() {
/widgets\ShadowLayout.java:100:        return this.mBackgroundColor;
/widgets\ShadowLayout.java:101:    }
/widgets\ShadowLayout.java:103:    public final void setBackgroundColor(int var1) {
/widgets\ShadowLayout.java:104:        this.mBackgroundColor = var1;
/widgets\ShadowLayout.java:105:        invalidateShadow();
/widgets\ShadowLayout.java:106:    }
/widgets\ShadowLayout.java:108:    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
/widgets\ShadowLayout.java:109:        super.onSizeChanged(w, h, oldw, oldh);
/widgets\ShadowLayout.java:110:        if (w > 0 && h > 0 && (this.getBackground() == null || this.mInvalidateShadowOnSizeChanged || this.mForceInvalidateShadow)) {
/widgets\ShadowLayout.java:111:            this.mForceInvalidateShadow = false;
/widgets\ShadowLayout.java:112:            this.setBackgroundCompat(w, h);
/widgets\ShadowLayout.java:113:        }
/widgets\ShadowLayout.java:115:    }
/widgets\ShadowLayout.java:117:    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
/widgets\ShadowLayout.java:118:        super.onLayout(changed, left, top, right, bottom);
/widgets\ShadowLayout.java:119:        if (this.mForceInvalidateShadow) {
/widgets\ShadowLayout.java:120:            this.mForceInvalidateShadow = false;
/widgets\ShadowLayout.java:121:            this.setBackgroundCompat(right - left, bottom - top);
/widgets\ShadowLayout.java:122:        }
/widgets\ShadowLayout.java:124:    }
/widgets\ShadowLayout.java:126:    public final void setInvalidateShadowOnSizeChanged(boolean invalidateShadowOnSizeChanged) {
/widgets\ShadowLayout.java:127:        this.mInvalidateShadowOnSizeChanged = invalidateShadowOnSizeChanged;
/widgets\ShadowLayout.java:128:    }
/widgets\ShadowLayout.java:130:    public final void invalidateShadow() {
/widgets\ShadowLayout.java:131:        this.mForceInvalidateShadow = true;
/widgets\ShadowLayout.java:132:        this.requestLayout();
/widgets\ShadowLayout.java:133:        this.invalidate();
/widgets\ShadowLayout.java:134:    }
/widgets\ShadowLayout.java:136:    private final void initView(Context context, AttributeSet attrs) {
/widgets\ShadowLayout.java:137:        this.initAttributes(context, attrs);
/widgets\ShadowLayout.java:138:        this.refreshPadding();
/widgets\ShadowLayout.java:139:    }
/widgets\ShadowLayout.java:141:    public final void refreshPadding() {
/widgets\ShadowLayout.java:142:        int xPadding = (int) (this.mShadowRadius + Math.abs(this.mDx));
/widgets\ShadowLayout.java:143:        int yPadding = (int) (this.mShadowRadius + Math.abs(this.mDy));
/widgets\ShadowLayout.java:144:        this.setPadding(xPadding, yPadding, xPadding, yPadding);
/widgets\ShadowLayout.java:145:    }
/widgets\ShadowLayout.java:147:    private void setBackgroundCompat(int w, int h) {
/widgets\ShadowLayout.java:148:        Bitmap bitmap = this.createShadowBitmap(w, h, this.mCornerRadius, this.mShadowRadius, this.mDx, this.mDy, this.mShadowColor, 0);
/widgets\ShadowLayout.java:149:        BitmapDrawable drawable = new BitmapDrawable(this.getResources(), bitmap);
/widgets\ShadowLayout.java:150:        this.setBackground(drawable);
/widgets\ShadowLayout.java:151:    }
/widgets\ShadowLayout.java:153:    private void initAttributes(Context context, AttributeSet attrs) {
/widgets\ShadowLayout.java:154:        int[] styleable = R.styleable.ShadowLayout;
/widgets\ShadowLayout.java:155:        TypedArray attr = this.getTypedArray(context, attrs, styleable);
/widgets\ShadowLayout.java:156:        if (attr != null) {
/widgets\ShadowLayout.java:157:            try {
/widgets\ShadowLayout.java:158:                this.mCornerRadius = attr.getDimension(R.styleable.ShadowLayout_shadow_layout_radius, 0.0F);
/widgets\ShadowLayout.java:159:                this.mShadowRadius = attr.getDimension(R.styleable.ShadowLayout_shadow_layout_blur, 0.0F);
/widgets\ShadowLayout.java:160:                this.mDx = attr.getDimension(R.styleable.ShadowLayout_shadow_layout_offsetX, 0.0F);
/widgets\ShadowLayout.java:161:                this.mDy = attr.getDimension(R.styleable.ShadowLayout_shadow_layout_offsetY, 0.0F);
/widgets\ShadowLayout.java:162:                this.mShadowColor = attr.getColor(R.styleable.ShadowLayout_shadow_layout_color, Color.parseColor("#22000000"));
/widgets\ShadowLayout.java:163:                this.mBackgroundColor = attr.getColor(R.styleable.ShadowLayout_shadow_layout_background_color, Integer.MIN_VALUE);
/widgets\ShadowLayout.java:164:            } finally {
/widgets\ShadowLayout.java:165:                attr.recycle();
/widgets\ShadowLayout.java:166:            }
/widgets\ShadowLayout.java:168:        }
/widgets\ShadowLayout.java:169:    }
/widgets\ShadowLayout.java:171:    private final TypedArray getTypedArray(Context context, AttributeSet attributeSet, int[] attr) {
/widgets\ShadowLayout.java:172:        return context.obtainStyledAttributes(attributeSet, attr, 0, 0);
/widgets\ShadowLayout.java:173:    }
/widgets\ShadowLayout.java:175:    private final Bitmap createShadowBitmap(int shadowWidth, int shadowHeight, float cornerRadius, float shadowRadius, float dx, float dy, int shadowColor, int fillColor) {
/widgets\ShadowLayout.java:176:        Bitmap output = Bitmap.createBitmap(shadowWidth, shadowHeight, Config.ARGB_8888);
/widgets\ShadowLayout.java:177:        Canvas canvas = new Canvas(output);
/widgets\ShadowLayout.java:178:        RectF shadowRect = new RectF(shadowRadius, shadowRadius, (float) shadowWidth - shadowRadius, (float) shadowHeight - shadowRadius);
/widgets\ShadowLayout.java:179:        if (dy > (float) 0) {
/widgets\ShadowLayout.java:180:            shadowRect.top += dy;
/widgets\ShadowLayout.java:181:            shadowRect.bottom -= dy;
/widgets\ShadowLayout.java:182:        } else if (dy < (float) 0) {
/widgets\ShadowLayout.java:183:            shadowRect.top += Math.abs(dy);
/widgets\ShadowLayout.java:184:            shadowRect.bottom -= Math.abs(dy);
/widgets\ShadowLayout.java:185:        }
/widgets\ShadowLayout.java:187:        if (dx > (float) 0) {
/widgets\ShadowLayout.java:188:            shadowRect.left += dx;
/widgets\ShadowLayout.java:189:            shadowRect.right -= dx;
/widgets\ShadowLayout.java:190:        } else if (dx < (float) 0) {
/widgets\ShadowLayout.java:191:            shadowRect.left += Math.abs(dx);
/widgets\ShadowLayout.java:192:            shadowRect.right -= Math.abs(dx);
/widgets\ShadowLayout.java:193:        }
/widgets\ShadowLayout.java:195:        Paint paint = new Paint();
/widgets\ShadowLayout.java:196:        paint.setAntiAlias(true);
/widgets\ShadowLayout.java:197:        paint.setColor(fillColor);
/widgets\ShadowLayout.java:198:        paint.setStyle(Style.FILL);
/widgets\ShadowLayout.java:199:        paint.setShadowLayer(shadowRadius, dx, dy, shadowColor);
/widgets\ShadowLayout.java:200:        canvas.drawRoundRect(shadowRect, cornerRadius, cornerRadius, paint);
/widgets\ShadowLayout.java:201:        if (this.mBackgroundColor != Integer.MIN_VALUE) {
/widgets\ShadowLayout.java:202:            paint.clearShadowLayer();
/widgets\ShadowLayout.java:203:            paint.setColor(this.mBackgroundColor);
/widgets\ShadowLayout.java:204:            RectF backgroundRect = new RectF((float) this.getPaddingLeft(), (float) this.getPaddingTop(), (float) (this.getWidth() - this.getPaddingRight()), (float) (this.getHeight() - this.getPaddingBottom()));
/widgets\ShadowLayout.java:205:            canvas.drawRoundRect(backgroundRect, cornerRadius, cornerRadius, paint);
/widgets\ShadowLayout.java:206:        }
/widgets\ShadowLayout.java:208:        return output;
/widgets\ShadowLayout.java:209:    }
/widgets\ShadowLayout.java:210:}/widgets\UnPressableLinearLayout.java:1:package com.huanchengfly.tieba.post.widgets;
/widgets\UnPressableLinearLayout.java:3:import android.content.Context;
/widgets\UnPressableLinearLayout.java:4:import android.util.AttributeSet;
/widgets\UnPressableLinearLayout.java:5:import android.widget.LinearLayout;
/widgets\UnPressableLinearLayout.java:7:public class UnPressableLinearLayout extends LinearLayout {
/widgets\UnPressableLinearLayout.java:8:    public UnPressableLinearLayout(Context context) {
/widgets\UnPressableLinearLayout.java:9:        this(context, null);
/widgets\UnPressableLinearLayout.java:10:    }
/widgets\UnPressableLinearLayout.java:12:    public UnPressableLinearLayout(Context context, AttributeSet attrs) {
/widgets\UnPressableLinearLayout.java:13:        super(context, attrs);
/widgets\UnPressableLinearLayout.java:14:    }
/widgets\UnPressableLinearLayout.java:16:    @Override
/widgets\UnPressableLinearLayout.java:17:    protected void dispatchSetPressed(boolean pressed) {
/widgets\UnPressableLinearLayout.java:18:        // Skip dispatching the pressed key state to the children so that they don't trigger any
/widgets\UnPressableLinearLayout.java:19:        // pressed state animation on their stateful drawables.
/widgets\UnPressableLinearLayout.java:20:    }
/widgets\UnPressableLinearLayout.java:21:}
/widgets\VideoPlayerStandard.java:1:package com.huanchengfly.tieba.post.widgets;
/widgets\VideoPlayerStandard.java:3:import android.content.Context;
/widgets\VideoPlayerStandard.java:4:import android.content.DialogInterface;
/widgets\VideoPlayerStandard.java:5:import android.graphics.Color;
/widgets\VideoPlayerStandard.java:6:import android.util.AttributeSet;
/widgets\VideoPlayerStandard.java:7:import android.view.View;
/widgets\VideoPlayerStandard.java:8:import android.widget.ImageButton;
/widgets\VideoPlayerStandard.java:9:import android.widget.Toast;
/widgets\VideoPlayerStandard.java:11:import androidx.cardview.widget.CardView;
/widgets\VideoPlayerStandard.java:13:import com.huanchengfly.tieba.post.R;
/widgets\VideoPlayerStandard.java:14:import com.huanchengfly.tieba.post.utils.DialogUtil;
/widgets\VideoPlayerStandard.java:15:import com.huanchengfly.tieba.post.utils.FileUtil;
/widgets\VideoPlayerStandard.java:16:import com.huanchengfly.tieba.post.utils.ImageUtil;
/widgets\VideoPlayerStandard.java:18:import cn.jzvd.JzvdStd;
/widgets\VideoPlayerStandard.java:20:public class VideoPlayerStandard extends JzvdStd {
/widgets\VideoPlayerStandard.java:21:    private ImageButton downloadBtn;
/widgets\VideoPlayerStandard.java:22:    private CardView background;
/widgets\VideoPlayerStandard.java:24:    public VideoPlayerStandard(Context context) {
/widgets\VideoPlayerStandard.java:25:        super(context);
/widgets\VideoPlayerStandard.java:26:    }
/widgets\VideoPlayerStandard.java:28:    public VideoPlayerStandard(Context context, AttributeSet attrs) {
/widgets\VideoPlayerStandard.java:29:        super(context, attrs);
/widgets\VideoPlayerStandard.java:30:    }
/widgets\VideoPlayerStandard.java:32:    @Override
/widgets\VideoPlayerStandard.java:33:    public void init(Context context) {
/widgets\VideoPlayerStandard.java:34:        super.init(context);
/widgets\VideoPlayerStandard.java:35:        background = findViewById(R.id.background);
/widgets\VideoPlayerStandard.java:36:        background.setCardBackgroundColor(Color.TRANSPARENT);
/widgets\VideoPlayerStandard.java:37:        background.setRadius(ImageUtil.getRadiusPx(getContext()));
/widgets\VideoPlayerStandard.java:38:        downloadBtn = findViewById(R.id.download_btn);
/widgets\VideoPlayerStandard.java:39:        downloadBtn.setOnClickListener(this);
/widgets\VideoPlayerStandard.java:40:    }
/widgets\VideoPlayerStandard.java:42:    @Override
/widgets\VideoPlayerStandard.java:43:    public void setScreenTiny() {
/widgets\VideoPlayerStandard.java:44:        super.setScreenTiny();
/widgets\VideoPlayerStandard.java:45:        background.setCardBackgroundColor(Color.TRANSPARENT);
/widgets\VideoPlayerStandard.java:46:        background.setRadius(ImageUtil.getRadiusPx(getContext()));
/widgets\VideoPlayerStandard.java:47:        batteryTimeLayout.setVisibility(GONE);
/widgets\VideoPlayerStandard.java:48:        downloadBtn.setVisibility(INVISIBLE);
/widgets\VideoPlayerStandard.java:49:    }
/widgets\VideoPlayerStandard.java:51:    @Override
/widgets\VideoPlayerStandard.java:52:    public int getLayoutId() {
/widgets\VideoPlayerStandard.java:53:        return R.layout.layout_video_player;
/widgets\VideoPlayerStandard.java:54:    }
/widgets\VideoPlayerStandard.java:56:    @Override
/widgets\VideoPlayerStandard.java:57:    public void setScreenNormal() {
/widgets\VideoPlayerStandard.java:58:        super.setScreenNormal();
/widgets\VideoPlayerStandard.java:59:        background.setCardBackgroundColor(Color.TRANSPARENT);
/widgets\VideoPlayerStandard.java:60:        background.setRadius(ImageUtil.getRadiusPx(getContext()));
/widgets\VideoPlayerStandard.java:61:        fullscreenButton.setImageResource(R.drawable.ic_round_fullscreen);
/widgets\VideoPlayerStandard.java:62:        batteryTimeLayout.setVisibility(GONE);
/widgets\VideoPlayerStandard.java:63:        downloadBtn.setVisibility(INVISIBLE);
/widgets\VideoPlayerStandard.java:64:    }
/widgets\VideoPlayerStandard.java:66:    @Override
/widgets\VideoPlayerStandard.java:67:    public void setScreenFullscreen() {
/widgets\VideoPlayerStandard.java:68:        super.setScreenFullscreen();
/widgets\VideoPlayerStandard.java:69:        background.setCardBackgroundColor(Color.BLACK);
/widgets\VideoPlayerStandard.java:70:        background.setRadius(0);
/widgets\VideoPlayerStandard.java:71:        fullscreenButton.setImageResource(R.drawable.ic_round_fullscreen_exit);
/widgets\VideoPlayerStandard.java:72:        batteryTimeLayout.setVisibility(GONE);
/widgets\VideoPlayerStandard.java:73:        downloadBtn.setVisibility(VISIBLE);
/widgets\VideoPlayerStandard.java:74:    }
/widgets\VideoPlayerStandard.java:76:    @Override
/widgets\VideoPlayerStandard.java:77:    public void gotoScreenNormal() {
/widgets\VideoPlayerStandard.java:78:        try {
/widgets\VideoPlayerStandard.java:79:            super.gotoScreenNormal();
/widgets\VideoPlayerStandard.java:80:        } catch (Exception e) {
/widgets\VideoPlayerStandard.java:81:            e.printStackTrace();
/widgets\VideoPlayerStandard.java:82:        }
/widgets\VideoPlayerStandard.java:83:    }
/widgets\VideoPlayerStandard.java:85:    @Override
/widgets\VideoPlayerStandard.java:86:    public void gotoScreenFullscreen() {
/widgets\VideoPlayerStandard.java:87:        try {
/widgets\VideoPlayerStandard.java:88:            super.gotoScreenFullscreen();
/widgets\VideoPlayerStandard.java:89:        } catch (Exception e) {
/widgets\VideoPlayerStandard.java:90:            e.printStackTrace();
/widgets\VideoPlayerStandard.java:91:        }
/widgets\VideoPlayerStandard.java:92:    }
/widgets\VideoPlayerStandard.java:94:    @Override
/widgets\VideoPlayerStandard.java:95:    public void updateStartImage() {
/widgets\VideoPlayerStandard.java:96:        if (state == STATE_PLAYING) {
/widgets\VideoPlayerStandard.java:97:            startButton.setVisibility(VISIBLE);
/widgets\VideoPlayerStandard.java:98:            startButton.setImageResource(R.drawable.ic_round_pause);
/widgets\VideoPlayerStandard.java:99:            replayTextView.setVisibility(GONE);
/widgets\VideoPlayerStandard.java:100:        } else if (state == STATE_ERROR) {
/widgets\VideoPlayerStandard.java:101:            startButton.setVisibility(INVISIBLE);
/widgets\VideoPlayerStandard.java:102:            replayTextView.setVisibility(GONE);
/widgets\VideoPlayerStandard.java:103:        } else if (state == STATE_AUTO_COMPLETE) {
/widgets\VideoPlayerStandard.java:104:            startButton.setVisibility(VISIBLE);
/widgets\VideoPlayerStandard.java:105:            startButton.setImageResource(R.drawable.ic_round_replay);
/widgets\VideoPlayerStandard.java:106:            replayTextView.setVisibility(VISIBLE);
/widgets\VideoPlayerStandard.java:107:        } else {
/widgets\VideoPlayerStandard.java:108:            startButton.setImageResource(R.drawable.ic_round_play_arrow);
/widgets\VideoPlayerStandard.java:109:            replayTextView.setVisibility(GONE);
/widgets\VideoPlayerStandard.java:110:        }
/widgets\VideoPlayerStandard.java:111:    }
/widgets\VideoPlayerStandard.java:113:    @Override
/widgets\VideoPlayerStandard.java:114:    public void showWifiDialog() {
/widgets\VideoPlayerStandard.java:115:        DialogUtil.build(getContext())
/widgets\VideoPlayerStandard.java:116:                .setMessage(getResources().getString(R.string.tips_not_wifi))
/widgets\VideoPlayerStandard.java:117:                .setPositiveButton(getResources().getString(R.string.tips_not_wifi_confirm), (dialog, which) -> {
/widgets\VideoPlayerStandard.java:118:                    dialog.dismiss();
/widgets\VideoPlayerStandard.java:119:                    startVideo();
/widgets\VideoPlayerStandard.java:120:                    WIFI_TIP_DIALOG_SHOWED = true;
/widgets\VideoPlayerStandard.java:121:                })
/widgets\VideoPlayerStandard.java:122:                .setNegativeButton(getResources().getString(R.string.tips_not_wifi_cancel), (dialog, which) -> {
/widgets\VideoPlayerStandard.java:123:                    dialog.dismiss();
/widgets\VideoPlayerStandard.java:124:                    try {
/widgets\VideoPlayerStandard.java:125:                        clearFloatScreen();
/widgets\VideoPlayerStandard.java:126:                    } catch (NullPointerException e) {
/widgets\VideoPlayerStandard.java:127:                        e.printStackTrace();
/widgets\VideoPlayerStandard.java:128:                    }
/widgets\VideoPlayerStandard.java:129:                })
/widgets\VideoPlayerStandard.java:130:                .setOnCancelListener(DialogInterface::dismiss).create().show();
/widgets\VideoPlayerStandard.java:131:    }
/widgets\VideoPlayerStandard.java:133:    @Override
/widgets\VideoPlayerStandard.java:134:    public void onClick(View v) {
/widgets\VideoPlayerStandard.java:135:        switch (v.getId()) {
/widgets\VideoPlayerStandard.java:136:            case R.id.download_btn:
/widgets\VideoPlayerStandard.java:137:                String url = (String) jzDataSource.getCurrentUrl();
/widgets\VideoPlayerStandard.java:138:                FileUtil.downloadBySystem(getContext(), FileUtil.FILE_TYPE_VIDEO, url);
/widgets\VideoPlayerStandard.java:139:                Toast.makeText(getContext(), R.string.toast_start_download, Toast.LENGTH_SHORT).show();
/widgets\VideoPlayerStandard.java:140:                break;
/widgets\VideoPlayerStandard.java:141:            default:
/widgets\VideoPlayerStandard.java:142:                super.onClick(v);
/widgets\VideoPlayerStandard.java:143:                break;
/widgets\VideoPlayerStandard.java:144:        }
/widgets\VideoPlayerStandard.java:145:    }
/widgets\VideoPlayerStandard.java:146:}
/widgets\VoicePlayerView.java:1:package com.huanchengfly.tieba.post.widgets;
/widgets\VoicePlayerView.java:3:import android.content.Context;
/widgets\VoicePlayerView.java:4:import android.content.res.ColorStateList;
/widgets\VoicePlayerView.java:5:import android.graphics.Color;
/widgets\VoicePlayerView.java:6:import android.media.AudioManager;
/widgets\VoicePlayerView.java:7:import android.media.MediaPlayer;
/widgets\VoicePlayerView.java:8:import android.net.Uri;
/widgets\VoicePlayerView.java:9:import android.os.Build;
/widgets\VoicePlayerView.java:10:import android.text.TextUtils;
/widgets\VoicePlayerView.java:11:import android.util.AttributeSet;
/widgets\VoicePlayerView.java:12:import android.util.Log;
/widgets\VoicePlayerView.java:13:import android.view.MenuItem;
/widgets\VoicePlayerView.java:14:import android.view.View;
/widgets\VoicePlayerView.java:15:import android.view.ViewGroup;
/widgets\VoicePlayerView.java:16:import android.widget.ImageView;
/widgets\VoicePlayerView.java:17:import android.widget.ProgressBar;
/widgets\VoicePlayerView.java:18:import android.widget.RelativeLayout;
/widgets\VoicePlayerView.java:19:import android.widget.SeekBar;
/widgets\VoicePlayerView.java:20:import android.widget.TextView;
/widgets\VoicePlayerView.java:21:import android.widget.Toast;
/widgets\VoicePlayerView.java:23:import androidx.annotation.IntDef;
/widgets\VoicePlayerView.java:24:import androidx.annotation.Nullable;
/widgets\VoicePlayerView.java:25:import androidx.appcompat.widget.PopupMenu;
/widgets\VoicePlayerView.java:26:import androidx.core.content.ContextCompat;
/widgets\VoicePlayerView.java:28:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/widgets\VoicePlayerView.java:29:import com.huanchengfly.tieba.post.R;
/widgets\VoicePlayerView.java:30:import com.huanchengfly.tieba.post.utils.DisplayUtil;
/widgets\VoicePlayerView.java:31:import com.huanchengfly.tieba.post.utils.FileUtil;
/widgets\VoicePlayerView.java:32:import com.huanchengfly.tieba.post.utils.PopupUtil;
/widgets\VoicePlayerView.java:34:import java.io.IOException;
/widgets\VoicePlayerView.java:35:import java.lang.annotation.Retention;
/widgets\VoicePlayerView.java:36:import java.lang.annotation.RetentionPolicy;
/widgets\VoicePlayerView.java:37:import java.util.Timer;
/widgets\VoicePlayerView.java:38:import java.util.TimerTask;
/widgets\VoicePlayerView.java:40:public class VoicePlayerView extends RelativeLayout implements View.OnClickListener, MediaPlayer.OnCompletionListener, MediaPlayer.OnErrorListener, MediaPlayer.OnPreparedListener, SeekBar.OnSeekBarChangeListener, View.OnLongClickListener, PopupMenu.OnMenuItemClickListener {
/widgets\VoicePlayerView.java:41:    public static final String TAG = "AudioView";
/widgets\VoicePlayerView.java:42:    public static final int STATE_LOADING = 0;
/widgets\VoicePlayerView.java:43:    public static final int STATE_PLAYING = 1;
/widgets\VoicePlayerView.java:44:    public static final int STATE_PAUSING = 2;
/widgets\VoicePlayerView.java:45:    TextView time;
/widgets\VoicePlayerView.java:46:    ImageView icon;
/widgets\VoicePlayerView.java:47:    SeekBar seekBar;
/widgets\VoicePlayerView.java:48:    ProgressBar progressBar;
/widgets\VoicePlayerView.java:49:    String mUrl;
/widgets\VoicePlayerView.java:50:    Timer timer;
/widgets\VoicePlayerView.java:51:    Player player;
/widgets\VoicePlayerView.java:52:    boolean hasPrepared = false;
/widgets\VoicePlayerView.java:53:    boolean completed = false;
/widgets\VoicePlayerView.java:54:    boolean forceReset = false;
/widgets\VoicePlayerView.java:55:    boolean isSeekbarChaning = false;
/widgets\VoicePlayerView.java:56:    boolean mini = false;
/widgets\VoicePlayerView.java:57:    int duration = 0;
/widgets\VoicePlayerView.java:59:    public VoicePlayerView(Context context) {
/widgets\VoicePlayerView.java:60:        this(context, null);
/widgets\VoicePlayerView.java:61:    }
/widgets\VoicePlayerView.java:63:    public VoicePlayerView(Context context, AttributeSet attrs) {
/widgets\VoicePlayerView.java:64:        this(context, attrs, 0);
/widgets\VoicePlayerView.java:65:    }
/widgets\VoicePlayerView.java:67:    public VoicePlayerView(Context context, AttributeSet attrs, int defStyleAttr) {
/widgets\VoicePlayerView.java:68:        super(context, attrs, defStyleAttr);
/widgets\VoicePlayerView.java:69:        initView();
/widgets\VoicePlayerView.java:70:        initMediaPlayer();
/widgets\VoicePlayerView.java:71:    }
/widgets\VoicePlayerView.java:73:    public boolean isMini() {
/widgets\VoicePlayerView.java:74:        return mini;
/widgets\VoicePlayerView.java:75:    }
/widgets\VoicePlayerView.java:77:    public VoicePlayerView setMini(boolean mini) {
/widgets\VoicePlayerView.java:78:        this.mini = mini;
/widgets\VoicePlayerView.java:79:        reloadView();
/widgets\VoicePlayerView.java:80:        return this;
/widgets\VoicePlayerView.java:81:    }
/widgets\VoicePlayerView.java:83:    public String getUrl() {
/widgets\VoicePlayerView.java:84:        return mUrl;
/widgets\VoicePlayerView.java:85:    }
/widgets\VoicePlayerView.java:87:    public VoicePlayerView setUrl(String url) {
/widgets\VoicePlayerView.java:88:        this.mUrl = url;
/widgets\VoicePlayerView.java:89:        return this;
/widgets\VoicePlayerView.java:90:    }
/widgets\VoicePlayerView.java:92:    private void reloadView() {
/widgets\VoicePlayerView.java:93:        ViewGroup.LayoutParams layoutParams = seekBar.getLayoutParams();
/widgets\VoicePlayerView.java:94:        if (isMini()) {
/widgets\VoicePlayerView.java:95:            layoutParams.width = DisplayUtil.dp2px(getContext(), 64);
/widgets\VoicePlayerView.java:96:            layoutParams.height = DisplayUtil.dp2px(getContext(), 12);
/widgets\VoicePlayerView.java:97:            setPadding(DisplayUtil.dp2px(getContext(), 4), DisplayUtil.dp2px(getContext(), 2), DisplayUtil.dp2px(getContext(), 4), DisplayUtil.dp2px(getContext(), 2));
/widgets\VoicePlayerView.java:98:        } else {
/widgets\VoicePlayerView.java:99:            layoutParams.width = DisplayUtil.dp2px(getContext(), 96);
/widgets\VoicePlayerView.java:100:            layoutParams.height = DisplayUtil.dp2px(getContext(), 18);
/widgets\VoicePlayerView.java:101:            setPadding(DisplayUtil.dp2px(getContext(), 8), DisplayUtil.dp2px(getContext(), 4), DisplayUtil.dp2px(getContext(), 8), DisplayUtil.dp2px(getContext(), 4));
/widgets\VoicePlayerView.java:102:        }
/widgets\VoicePlayerView.java:103:        seekBar.setLayoutParams(layoutParams);
/widgets\VoicePlayerView.java:104:    }
/widgets\VoicePlayerView.java:106:    private void initView() {
/widgets\VoicePlayerView.java:107:        setBackgroundTintList(ColorStateList.valueOf(ThemeUtils.getColorByAttr(getContext(), R.attr.colorAccent)));
/widgets\VoicePlayerView.java:108:        setBackgroundResource(R.drawable.bg_audio);
/widgets\VoicePlayerView.java:109:        setOnClickListener(this);
/widgets\VoicePlayerView.java:110:        setOnLongClickListener(this);
/widgets\VoicePlayerView.java:111:        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
/widgets\VoicePlayerView.java:112:            setForeground(ContextCompat.getDrawable(getContext(), R.drawable.fg_ripple_radius_50dp));
/widgets\VoicePlayerView.java:113:        }
/widgets\VoicePlayerView.java:114:        inflate(getContext(), R.layout.layout_audio, this);
/widgets\VoicePlayerView.java:115:        time = findViewById(R.id.audio_text);
/widgets\VoicePlayerView.java:116:        icon = findViewById(R.id.audio_play_icon);
/widgets\VoicePlayerView.java:117:        seekBar = findViewById(R.id.seek_progress);
/widgets\VoicePlayerView.java:118:        int color = ThemeUtils.getColorByAttr(getContext(), R.attr.colorAccent);
/widgets\VoicePlayerView.java:119:        color = Color.argb((int) (0.15F * 255), Color.red(color), Color.green(color), Color.blue(color));
/widgets\VoicePlayerView.java:120:        seekBar.setProgressBackgroundTintList(ColorStateList.valueOf(color));
/widgets\VoicePlayerView.java:121:        progressBar = findViewById(R.id.audio_play_progress);
/widgets\VoicePlayerView.java:122:        seekBar.setOnSeekBarChangeListener(this);
/widgets\VoicePlayerView.java:123:        reloadView();
/widgets\VoicePlayerView.java:124:    }
/widgets\VoicePlayerView.java:126:    public String calculateTime(long sec) {
/widgets\VoicePlayerView.java:127:        long min = sec / 60;
/widgets\VoicePlayerView.java:128:        if (min > 0) {
/widgets\VoicePlayerView.java:129:            return min + "'" + sec % 60 + "''";
/widgets\VoicePlayerView.java:130:        } else {
/widgets\VoicePlayerView.java:131:            return sec + "''";
/widgets\VoicePlayerView.java:132:        }
/widgets\VoicePlayerView.java:133:    }
/widgets\VoicePlayerView.java:135:    private void initMediaPlayer() {
/widgets\VoicePlayerView.java:136:        if (isInEditMode()) {
/widgets\VoicePlayerView.java:137:            return;
/widgets\VoicePlayerView.java:138:        }
/widgets\VoicePlayerView.java:139:        if (timer != null) {
/widgets\VoicePlayerView.java:140:            timer.cancel();
/widgets\VoicePlayerView.java:141:            timer = null;
/widgets\VoicePlayerView.java:142:        }
/widgets\VoicePlayerView.java:143:        timer = new Timer();
/widgets\VoicePlayerView.java:144:        player = new Player(this);
/widgets\VoicePlayerView.java:145:    }
/widgets\VoicePlayerView.java:147:    public void setText(String text) {
/widgets\VoicePlayerView.java:148:        time.setText(text);
/widgets\VoicePlayerView.java:149:    }
/widgets\VoicePlayerView.java:151:    @Override
/widgets\VoicePlayerView.java:152:    public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
/widgets\VoicePlayerView.java:153:        setText(calculateTime((seekBar.getMax() - progress) / 1000));
/widgets\VoicePlayerView.java:154:    }
/widgets\VoicePlayerView.java:156:    @Override
/widgets\VoicePlayerView.java:157:    public void onStartTrackingTouch(SeekBar seekBar) {
/widgets\VoicePlayerView.java:158:        isSeekbarChaning = true;
/widgets\VoicePlayerView.java:159:    }
/widgets\VoicePlayerView.java:161:    public int getDuration() {
/widgets\VoicePlayerView.java:162:        return duration;
/widgets\VoicePlayerView.java:163:    }
/widgets\VoicePlayerView.java:165:    public void setDuration(int duration) {
/widgets\VoicePlayerView.java:166:        this.duration = duration;
/widgets\VoicePlayerView.java:167:        setText(calculateTime(duration / 1000));
/widgets\VoicePlayerView.java:168:        seekBar.setProgress(0);
/widgets\VoicePlayerView.java:169:        seekBar.setMax(duration);
/widgets\VoicePlayerView.java:170:    }
/widgets\VoicePlayerView.java:172:    @Override
/widgets\VoicePlayerView.java:173:    public void onStopTrackingTouch(SeekBar seekBar) {
/widgets\VoicePlayerView.java:174:        isSeekbarChaning = false;
/widgets\VoicePlayerView.java:175:        player.seekTo(seekBar.getProgress());
/widgets\VoicePlayerView.java:176:        setText(calculateTime((getDuration() - player.getCurrentPosition()) / 1000));
/widgets\VoicePlayerView.java:177:    }
/widgets\VoicePlayerView.java:179:    @Override
/widgets\VoicePlayerView.java:180:    public boolean onLongClick(View v) {
/widgets\VoicePlayerView.java:181:        if (mUrl == null) return false;
/widgets\VoicePlayerView.java:182:        PopupMenu popupMenu = PopupUtil.create(this);
/widgets\VoicePlayerView.java:183:        popupMenu.inflate(R.menu.menu_audio_long_click);
/widgets\VoicePlayerView.java:184:        popupMenu.setOnMenuItemClickListener(this);
/widgets\VoicePlayerView.java:185:        popupMenu.show();
/widgets\VoicePlayerView.java:186:        return true;
/widgets\VoicePlayerView.java:187:    }
/widgets\VoicePlayerView.java:189:    @Override
/widgets\VoicePlayerView.java:190:    public boolean onMenuItemClick(MenuItem item) {
/widgets\VoicePlayerView.java:191:        if (item.getItemId() == R.id.menu_download) {
/widgets\VoicePlayerView.java:192:            if (mUrl != null) {
/widgets\VoicePlayerView.java:193:                Uri uri = Uri.parse(mUrl);
/widgets\VoicePlayerView.java:194:                String md5 = uri.getQueryParameter("voice_md5");
/widgets\VoicePlayerView.java:195:                FileUtil.downloadBySystem(getContext(), FileUtil.FILE_TYPE_AUDIO, mUrl, (md5 == null ? String.valueOf(System.currentTimeMillis()) : md5) + ".mp3");
/widgets\VoicePlayerView.java:196:            }
/widgets\VoicePlayerView.java:197:            return true;
/widgets\VoicePlayerView.java:198:        }
/widgets\VoicePlayerView.java:199:        return false;
/widgets\VoicePlayerView.java:200:    }
/widgets\VoicePlayerView.java:202:    public void reset() {
/widgets\VoicePlayerView.java:203:        if (player == null) {
/widgets\VoicePlayerView.java:204:            initMediaPlayer();
/widgets\VoicePlayerView.java:205:        } else {
/widgets\VoicePlayerView.java:206:            try {
/widgets\VoicePlayerView.java:207:                player.reset();
/widgets\VoicePlayerView.java:208:            } catch (IllegalStateException e) {
/widgets\VoicePlayerView.java:209:                e.printStackTrace();
/widgets\VoicePlayerView.java:210:                player = null;
/widgets\VoicePlayerView.java:211:                initMediaPlayer();
/widgets\VoicePlayerView.java:212:            }
/widgets\VoicePlayerView.java:213:        }
/widgets\VoicePlayerView.java:214:        forceReset = true;
/widgets\VoicePlayerView.java:215:        hasPrepared = false;
/widgets\VoicePlayerView.java:216:        completed = false;
/widgets\VoicePlayerView.java:217:        setIconState(STATE_PAUSING);
/widgets\VoicePlayerView.java:218:        seekBar.setVisibility(GONE);
/widgets\VoicePlayerView.java:219:        seekBar.setProgress(0);
/widgets\VoicePlayerView.java:220:        if (timer != null) {
/widgets\VoicePlayerView.java:221:            timer.cancel();
/widgets\VoicePlayerView.java:222:            timer = null;
/widgets\VoicePlayerView.java:223:        }
/widgets\VoicePlayerView.java:224:        timer = new Timer();
/widgets\VoicePlayerView.java:225:    }
/widgets\VoicePlayerView.java:227:    public void startPlay() {
/widgets\VoicePlayerView.java:228:        if (mUrl == null) {
/widgets\VoicePlayerView.java:229:            throw new NullPointerException("Url is null.");
/widgets\VoicePlayerView.java:230:        }
/widgets\VoicePlayerView.java:231:        startPlay(mUrl);
/widgets\VoicePlayerView.java:232:    }
/widgets\VoicePlayerView.java:234:    private void setIconState(@IconState int state) {
/widgets\VoicePlayerView.java:235:        switch (state) {
/widgets\VoicePlayerView.java:236:            case STATE_LOADING:
/widgets\VoicePlayerView.java:237:                icon.setVisibility(GONE);
/widgets\VoicePlayerView.java:238:                progressBar.setVisibility(VISIBLE);
/widgets\VoicePlayerView.java:239:                break;
/widgets\VoicePlayerView.java:240:            case STATE_PLAYING:
/widgets\VoicePlayerView.java:241:                icon.setVisibility(VISIBLE);
/widgets\VoicePlayerView.java:242:                icon.setImageResource(R.drawable.ic_round_pause_circle_filled_18dp);
/widgets\VoicePlayerView.java:243:                progressBar.setVisibility(GONE);
/widgets\VoicePlayerView.java:244:                break;
/widgets\VoicePlayerView.java:245:            case STATE_PAUSING:
/widgets\VoicePlayerView.java:246:                icon.setVisibility(VISIBLE);
/widgets\VoicePlayerView.java:247:                icon.setImageResource(R.drawable.ic_round_play_circle_filled_18dp);
/widgets\VoicePlayerView.java:248:                progressBar.setVisibility(GONE);
/widgets\VoicePlayerView.java:249:                break;
/widgets\VoicePlayerView.java:250:        }
/widgets\VoicePlayerView.java:251:    }
/widgets\VoicePlayerView.java:253:    public void startPlay(String url) {
/widgets\VoicePlayerView.java:254:        if (url == null) {
/widgets\VoicePlayerView.java:255:            throw new NullPointerException("Url is null.");
/widgets\VoicePlayerView.java:256:        }
/widgets\VoicePlayerView.java:257:        Player.notifyReset();
/widgets\VoicePlayerView.java:258:        try {
/widgets\VoicePlayerView.java:259:            player.reset();
/widgets\VoicePlayerView.java:260:        } catch (IllegalStateException e) {
/widgets\VoicePlayerView.java:261:            e.printStackTrace();
/widgets\VoicePlayerView.java:262:            player = null;
/widgets\VoicePlayerView.java:263:            initMediaPlayer();
/widgets\VoicePlayerView.java:264:        }
/widgets\VoicePlayerView.java:265:        mUrl = url;
/widgets\VoicePlayerView.java:266:        forceReset = false;
/widgets\VoicePlayerView.java:267:        hasPrepared = false;
/widgets\VoicePlayerView.java:268:        completed = false;
/widgets\VoicePlayerView.java:269:        try {
/widgets\VoicePlayerView.java:270:            player.setDataSource(url);
/widgets\VoicePlayerView.java:271:            player.prepare();
/widgets\VoicePlayerView.java:272:            setIconState(STATE_LOADING);
/widgets\VoicePlayerView.java:273:        } catch (IOException e) {
/widgets\VoicePlayerView.java:274:            e.printStackTrace();
/widgets\VoicePlayerView.java:275:            Log.e(TAG, "set dataSource error", e);
/widgets\VoicePlayerView.java:276:        } catch (IllegalStateException e) {
/widgets\VoicePlayerView.java:277:            Log.e(TAG, "set dataSource error", e);
/widgets\VoicePlayerView.java:278:        }
/widgets\VoicePlayerView.java:279:    }
/widgets\VoicePlayerView.java:281:    public void release() {
/widgets\VoicePlayerView.java:282:        if (timer != null) {
/widgets\VoicePlayerView.java:283:            timer.cancel();
/widgets\VoicePlayerView.java:284:            timer = null;
/widgets\VoicePlayerView.java:285:        }
/widgets\VoicePlayerView.java:286:        if (player != null) {
/widgets\VoicePlayerView.java:287:            player.release();
/widgets\VoicePlayerView.java:288:            player = null;
/widgets\VoicePlayerView.java:289:        }
/widgets\VoicePlayerView.java:290:    }
/widgets\VoicePlayerView.java:292:    @Override
/widgets\VoicePlayerView.java:293:    public void onCompletion(MediaPlayer mp) {
/widgets\VoicePlayerView.java:294:        setIconState(STATE_PAUSING);
/widgets\VoicePlayerView.java:295:        completed = true;
/widgets\VoicePlayerView.java:296:        seekBar.setProgress(0);
/widgets\VoicePlayerView.java:297:    }
/widgets\VoicePlayerView.java:299:    @Override
/widgets\VoicePlayerView.java:300:    public void onClick(View v) {
/widgets\VoicePlayerView.java:301:        toggleStatus();
/widgets\VoicePlayerView.java:302:    }
/widgets\VoicePlayerView.java:304:    public void toggleStatus() {
/widgets\VoicePlayerView.java:305:        if (player == null) {
/widgets\VoicePlayerView.java:306:            initMediaPlayer();
/widgets\VoicePlayerView.java:307:        }
/widgets\VoicePlayerView.java:308:        if (!isThisPlaying()) {
/widgets\VoicePlayerView.java:309:            Log.i(TAG, "toggleStatus: startPlay");
/widgets\VoicePlayerView.java:310:            startPlay();
/widgets\VoicePlayerView.java:311:        } else if (player.isPlaying()) {
/widgets\VoicePlayerView.java:312:            Log.i(TAG, "toggleStatus: pause");
/widgets\VoicePlayerView.java:313:            pause();
/widgets\VoicePlayerView.java:314:        } else {
/widgets\VoicePlayerView.java:315:            Log.i(TAG, "toggleStatus: play");
/widgets\VoicePlayerView.java:316:            play();
/widgets\VoicePlayerView.java:317:        }
/widgets\VoicePlayerView.java:318:    }
/widgets\VoicePlayerView.java:320:    public void play() {
/widgets\VoicePlayerView.java:321:        if (player != null && hasPrepared && !player.isPlaying()) {
/widgets\VoicePlayerView.java:322:            if (completed || forceReset) {
/widgets\VoicePlayerView.java:323:                startPlay();
/widgets\VoicePlayerView.java:324:                return;
/widgets\VoicePlayerView.java:325:            }
/widgets\VoicePlayerView.java:326:            player.start();
/widgets\VoicePlayerView.java:327:            setIconState(STATE_PLAYING);
/widgets\VoicePlayerView.java:328:        }
/widgets\VoicePlayerView.java:329:    }
/widgets\VoicePlayerView.java:331:    private boolean isThisPlaying() {
/widgets\VoicePlayerView.java:332:        return TextUtils.equals(Player.PLAYING_DATA_SOURCE, mUrl);
/widgets\VoicePlayerView.java:333:    }
/widgets\VoicePlayerView.java:335:    public void pause() {
/widgets\VoicePlayerView.java:336:        if (player != null && hasPrepared && player.isPlaying()) {
/widgets\VoicePlayerView.java:337:            player.pause();
/widgets\VoicePlayerView.java:338:            setIconState(STATE_PAUSING);
/widgets\VoicePlayerView.java:339:        }
/widgets\VoicePlayerView.java:340:    }
/widgets\VoicePlayerView.java:342:    @Override
/widgets\VoicePlayerView.java:343:    public boolean onError(MediaPlayer mp, int what, int extra) {
/widgets\VoicePlayerView.java:344:        Log.i(TAG, "onError: " + what + " " + extra);
/widgets\VoicePlayerView.java:345:        Toast.makeText(getContext(), R.string.toast_play_failed, Toast.LENGTH_SHORT).show();
/widgets\VoicePlayerView.java:346:        setIconState(STATE_PAUSING);
/widgets\VoicePlayerView.java:347:        return false;
/widgets\VoicePlayerView.java:348:    }
/widgets\VoicePlayerView.java:350:    @Override
/widgets\VoicePlayerView.java:351:    public void onPrepared(MediaPlayer mp) {
/widgets\VoicePlayerView.java:352:        Log.i(TAG, "onPrepared: ");
/widgets\VoicePlayerView.java:353:        hasPrepared = true;
/widgets\VoicePlayerView.java:354:        seekBar.setVisibility(VISIBLE);
/widgets\VoicePlayerView.java:355:        mp.start();
/widgets\VoicePlayerView.java:356:        setIconState(STATE_PLAYING);
/widgets\VoicePlayerView.java:357:        duration = mp.getDuration();
/widgets\VoicePlayerView.java:358:        setText(calculateTime(duration / 1000));
/widgets\VoicePlayerView.java:359:        seekBar.setProgress(0);
/widgets\VoicePlayerView.java:360:        seekBar.setMax(duration);
/widgets\VoicePlayerView.java:361:        timer.schedule(new TimerTask() {
/widgets\VoicePlayerView.java:362:            @Override
/widgets\VoicePlayerView.java:363:            public void run() {
/widgets\VoicePlayerView.java:364:                if (!(isSeekbarChaning || completed)) {
/widgets\VoicePlayerView.java:365:                    seekBar.setProgress(player.getCurrentPosition());
/widgets\VoicePlayerView.java:366:                }
/widgets\VoicePlayerView.java:367:            }
/widgets\VoicePlayerView.java:368:        }, 0, 50);
/widgets\VoicePlayerView.java:369:    }
/widgets\VoicePlayerView.java:371:    @IntDef({STATE_LOADING, STATE_PLAYING, STATE_PAUSING})
/widgets\VoicePlayerView.java:372:    @Retention(RetentionPolicy.SOURCE)
/widgets\VoicePlayerView.java:373:    private @interface IconState {
/widgets\VoicePlayerView.java:374:    }
/widgets\VoicePlayerView.java:376:    static abstract class PlayerInterface {
/widgets\VoicePlayerView.java:377:        protected VoicePlayerView voicePlayerView;
/widgets\VoicePlayerView.java:379:        PlayerInterface(VoicePlayerView voicePlayerView) {
/widgets\VoicePlayerView.java:380:            this.voicePlayerView = voicePlayerView;
/widgets\VoicePlayerView.java:381:        }
/widgets\VoicePlayerView.java:383:        public abstract void reset();
/widgets\VoicePlayerView.java:385:        public abstract void setDataSource(String url) throws IOException;
/widgets\VoicePlayerView.java:387:        public abstract void prepare();
/widgets\VoicePlayerView.java:389:        public abstract void stop();
/widgets\VoicePlayerView.java:391:        public abstract void release();
/widgets\VoicePlayerView.java:393:        public abstract boolean isPlaying();
/widgets\VoicePlayerView.java:395:        public abstract void start();
/widgets\VoicePlayerView.java:397:        public abstract void pause();
/widgets\VoicePlayerView.java:399:        public abstract void seekTo(int msec);
/widgets\VoicePlayerView.java:401:        public abstract int getCurrentPosition();
/widgets\VoicePlayerView.java:403:        public abstract int getDuration();
/widgets\VoicePlayerView.java:404:    }
/widgets\VoicePlayerView.java:406:    static class Player extends PlayerInterface {
/widgets\VoicePlayerView.java:407:        static VoicePlayerView CURRENT;
/widgets\VoicePlayerView.java:408:        static String PLAYING_DATA_SOURCE;
/widgets\VoicePlayerView.java:409:        MediaPlayer mediaPlayer;
/widgets\VoicePlayerView.java:410:        String dataSource;
/widgets\VoicePlayerView.java:412:        Player(VoicePlayerView voicePlayerView) {
/widgets\VoicePlayerView.java:413:            super(voicePlayerView);
/widgets\VoicePlayerView.java:414:            mediaPlayer = Manager.getMediaPlayer();
/widgets\VoicePlayerView.java:415:        }
/widgets\VoicePlayerView.java:417:        public static void notifyReset() {
/widgets\VoicePlayerView.java:418:            if (CURRENT != null) {
/widgets\VoicePlayerView.java:419:                CURRENT.reset();
/widgets\VoicePlayerView.java:420:            }
/widgets\VoicePlayerView.java:421:        }
/widgets\VoicePlayerView.java:423:        @Override
/widgets\VoicePlayerView.java:424:        public void reset() {
/widgets\VoicePlayerView.java:425:            mediaPlayer.reset();
/widgets\VoicePlayerView.java:426:            PLAYING_DATA_SOURCE = null;
/widgets\VoicePlayerView.java:427:            setCurrent(null);
/widgets\VoicePlayerView.java:428:        }
/widgets\VoicePlayerView.java:430:        @Override
/widgets\VoicePlayerView.java:431:        public void setDataSource(String url) throws IOException {
/widgets\VoicePlayerView.java:432:            mediaPlayer.setDataSource(url);
/widgets\VoicePlayerView.java:433:            dataSource = url;
/widgets\VoicePlayerView.java:434:            setCurrent(voicePlayerView);
/widgets\VoicePlayerView.java:435:        }
/widgets\VoicePlayerView.java:437:        @Override
/widgets\VoicePlayerView.java:438:        public void prepare() {
/widgets\VoicePlayerView.java:439:            mediaPlayer.prepareAsync();
/widgets\VoicePlayerView.java:440:            PLAYING_DATA_SOURCE = dataSource;
/widgets\VoicePlayerView.java:441:            setCurrent(voicePlayerView);
/widgets\VoicePlayerView.java:442:        }
/widgets\VoicePlayerView.java:444:        private void setCurrent(@Nullable VoicePlayerView current) {
/widgets\VoicePlayerView.java:445:            CURRENT = current;
/widgets\VoicePlayerView.java:446:            if (current != null) {
/widgets\VoicePlayerView.java:447:                Manager.notifyPlaying(CURRENT);
/widgets\VoicePlayerView.java:448:                mediaPlayer.setOnCompletionListener(CURRENT);
/widgets\VoicePlayerView.java:449:                mediaPlayer.setOnErrorListener(CURRENT);
/widgets\VoicePlayerView.java:450:                mediaPlayer.setOnPreparedListener(CURRENT);
/widgets\VoicePlayerView.java:451:            } else {
/widgets\VoicePlayerView.java:452:                mediaPlayer.setOnCompletionListener(null);
/widgets\VoicePlayerView.java:453:                mediaPlayer.setOnErrorListener(null);
/widgets\VoicePlayerView.java:454:                mediaPlayer.setOnPreparedListener(null);
/widgets\VoicePlayerView.java:455:            }
/widgets\VoicePlayerView.java:456:        }
/widgets\VoicePlayerView.java:458:        @Override
/widgets\VoicePlayerView.java:459:        public void stop() {
/widgets\VoicePlayerView.java:460:            mediaPlayer.stop();
/widgets\VoicePlayerView.java:461:        }
/widgets\VoicePlayerView.java:463:        @Override
/widgets\VoicePlayerView.java:464:        public void release() {
/widgets\VoicePlayerView.java:465:            if (CURRENT != null) CURRENT.reset();
/widgets\VoicePlayerView.java:466:            mediaPlayer.release();
/widgets\VoicePlayerView.java:467:            PLAYING_DATA_SOURCE = null;
/widgets\VoicePlayerView.java:468:            setCurrent(null);
/widgets\VoicePlayerView.java:469:        }
/widgets\VoicePlayerView.java:471:        @Override
/widgets\VoicePlayerView.java:472:        public boolean isPlaying() {
/widgets\VoicePlayerView.java:473:            return mediaPlayer.isPlaying();
/widgets\VoicePlayerView.java:474:        }
/widgets\VoicePlayerView.java:476:        @Override
/widgets\VoicePlayerView.java:477:        public void start() {
/widgets\VoicePlayerView.java:478:            mediaPlayer.start();
/widgets\VoicePlayerView.java:479:            PLAYING_DATA_SOURCE = dataSource;
/widgets\VoicePlayerView.java:480:            setCurrent(voicePlayerView);
/widgets\VoicePlayerView.java:481:        }
/widgets\VoicePlayerView.java:483:        @Override
/widgets\VoicePlayerView.java:484:        public void pause() {
/widgets\VoicePlayerView.java:485:            mediaPlayer.pause();
/widgets\VoicePlayerView.java:486:        }
/widgets\VoicePlayerView.java:488:        @Override
/widgets\VoicePlayerView.java:489:        public void seekTo(int msec) {
/widgets\VoicePlayerView.java:490:            mediaPlayer.seekTo(msec);
/widgets\VoicePlayerView.java:491:        }
/widgets\VoicePlayerView.java:493:        @Override
/widgets\VoicePlayerView.java:494:        public int getCurrentPosition() {
/widgets\VoicePlayerView.java:495:            if (mediaPlayer != null) {
/widgets\VoicePlayerView.java:496:                return mediaPlayer.getCurrentPosition();
/widgets\VoicePlayerView.java:497:            }
/widgets\VoicePlayerView.java:498:            return 0;
/widgets\VoicePlayerView.java:499:        }
/widgets\VoicePlayerView.java:501:        @Override
/widgets\VoicePlayerView.java:502:        public int getDuration() {
/widgets\VoicePlayerView.java:503:            if (mediaPlayer != null) {
/widgets\VoicePlayerView.java:504:                return mediaPlayer.getDuration();
/widgets\VoicePlayerView.java:505:            }
/widgets\VoicePlayerView.java:506:            return 0;
/widgets\VoicePlayerView.java:507:        }
/widgets\VoicePlayerView.java:508:    }
/widgets\VoicePlayerView.java:510:    public static class Manager {
/widgets\VoicePlayerView.java:511:        private static MediaPlayer sMediaPlayer;
/widgets\VoicePlayerView.java:513:        private static VoicePlayerView current;
/widgets\VoicePlayerView.java:515:        public static MediaPlayer getMediaPlayer() {
/widgets\VoicePlayerView.java:516:            if (sMediaPlayer == null) {
/widgets\VoicePlayerView.java:517:                synchronized (Manager.class) {
/widgets\VoicePlayerView.java:518:                    if (sMediaPlayer == null) {
/widgets\VoicePlayerView.java:519:                        sMediaPlayer = new MediaPlayer();
/widgets\VoicePlayerView.java:520:                        sMediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
/widgets\VoicePlayerView.java:521:                    }
/widgets\VoicePlayerView.java:522:                }
/widgets\VoicePlayerView.java:523:            }
/widgets\VoicePlayerView.java:524:            return sMediaPlayer;
/widgets\VoicePlayerView.java:525:        }
/widgets\VoicePlayerView.java:527:        public static void notifyPlaying(VoicePlayerView voicePlayerView) {
/widgets\VoicePlayerView.java:528:            current = voicePlayerView;
/widgets\VoicePlayerView.java:529:        }
/widgets\VoicePlayerView.java:531:        public static void release() {
/widgets\VoicePlayerView.java:532:            if (current != null) {
/widgets\VoicePlayerView.java:533:                current.release();
/widgets\VoicePlayerView.java:534:            } else if (sMediaPlayer != null) {
/widgets\VoicePlayerView.java:535:                sMediaPlayer.release();
/widgets\VoicePlayerView.java:536:            }
/widgets\VoicePlayerView.java:537:            sMediaPlayer = null;
/widgets\VoicePlayerView.java:538:        }
/widgets\VoicePlayerView.java:539:    }
/widgets\VoicePlayerView.java:540:}/widgets\edittext\OperationManager.java:1:package com.huanchengfly.tieba.post.widgets.edittext;
/widgets\edittext\OperationManager.java:3:import android.os.Bundle;
/widgets\edittext\OperationManager.java:4:import android.os.Parcel;
/widgets\edittext\OperationManager.java:5:import android.os.Parcelable;
/widgets\edittext\OperationManager.java:6:import android.text.Editable;
/widgets\edittext\OperationManager.java:7:import android.text.TextWatcher;
/widgets\edittext\OperationManager.java:8:import android.widget.EditText;
/widgets\edittext\OperationManager.java:10:import java.io.Serializable;
/widgets\edittext\OperationManager.java:11:import java.util.Collection;
/widgets\edittext\OperationManager.java:12:import java.util.LinkedList;
/widgets\edittext\OperationManager.java:14:public class OperationManager implements TextWatcher {
/widgets\edittext\OperationManager.java:15:    private static final String KEY_UNDO_OPTS = "KEY_UNDO_OPTS";
/widgets\edittext\OperationManager.java:16:    private static final String KEY_REDO_OPTS = "KEY_REDO_OPTS";
/widgets\edittext\OperationManager.java:17:    private final EditText editText;
/widgets\edittext\OperationManager.java:19:    /*编辑记录*/
/widgets\edittext\OperationManager.java:20:    private final LinkedList<EditOperation> undoOpts = new LinkedList<>();
/widgets\edittext\OperationManager.java:21:    private final LinkedList<EditOperation> redoOpts = new LinkedList<>();
/widgets\edittext\OperationManager.java:22:    private EditOperation opt;
/widgets\edittext\OperationManager.java:23:    private boolean enable = true;
/widgets\edittext\OperationManager.java:25:    public OperationManager(EditText editText) {
/widgets\edittext\OperationManager.java:26:        this.editText = editText;
/widgets\edittext\OperationManager.java:27:    }
/widgets\edittext\OperationManager.java:29:    public static OperationManager setup(EditText editText) {
/widgets\edittext\OperationManager.java:30:        OperationManager mgr = new OperationManager(editText);
/widgets\edittext\OperationManager.java:31:        editText.addTextChangedListener(mgr);
/widgets\edittext\OperationManager.java:32:        return mgr;
/widgets\edittext\OperationManager.java:33:    }
/widgets\edittext\OperationManager.java:35:    public OperationManager disable() {
/widgets\edittext\OperationManager.java:36:        enable = false;
/widgets\edittext\OperationManager.java:37:        return this;
/widgets\edittext\OperationManager.java:38:    }
/widgets\edittext\OperationManager.java:40:    public OperationManager enable() {
/widgets\edittext\OperationManager.java:41:        enable = true;
/widgets\edittext\OperationManager.java:42:        return this;
/widgets\edittext\OperationManager.java:43:    }
/widgets\edittext\OperationManager.java:45:    @Override
/widgets\edittext\OperationManager.java:46:    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
/widgets\edittext\OperationManager.java:47:        if (count > 0) {
/widgets\edittext\OperationManager.java:48:            int end = start + count;
/widgets\edittext\OperationManager.java:49:            if (enable) {
/widgets\edittext\OperationManager.java:50:                if (opt == null) {
/widgets\edittext\OperationManager.java:51:                    opt = new EditOperation();
/widgets\edittext\OperationManager.java:52:                }
/widgets\edittext\OperationManager.java:53:                opt.setSrc(s.subSequence(start, end), start, end);
/widgets\edittext\OperationManager.java:54:            }
/widgets\edittext\OperationManager.java:55:        }
/widgets\edittext\OperationManager.java:56:    }
/widgets\edittext\OperationManager.java:58:    @Override
/widgets\edittext\OperationManager.java:59:    public void onTextChanged(CharSequence s, int start, int before, int count) {
/widgets\edittext\OperationManager.java:60:        if (count > 0) {
/widgets\edittext\OperationManager.java:61:            int end = start + count;
/widgets\edittext\OperationManager.java:62:            if (enable) {
/widgets\edittext\OperationManager.java:63:                if (opt == null) {
/widgets\edittext\OperationManager.java:64:                    opt = new EditOperation();
/widgets\edittext\OperationManager.java:65:                }
/widgets\edittext\OperationManager.java:66:                opt.setDst(s.subSequence(start, end), start, end);
/widgets\edittext\OperationManager.java:67:            }
/widgets\edittext\OperationManager.java:68:        }
/widgets\edittext\OperationManager.java:69:    }
/widgets\edittext\OperationManager.java:71:    @Override
/widgets\edittext\OperationManager.java:72:    public void afterTextChanged(Editable s) {
/widgets\edittext\OperationManager.java:73:        if (enable && opt != null) {
/widgets\edittext\OperationManager.java:74:            if (!redoOpts.isEmpty()) {
/widgets\edittext\OperationManager.java:75:                redoOpts.clear();
/widgets\edittext\OperationManager.java:76:            }
/widgets\edittext\OperationManager.java:78:            undoOpts.push(opt);
/widgets\edittext\OperationManager.java:79:        }
/widgets\edittext\OperationManager.java:80:        opt = null;
/widgets\edittext\OperationManager.java:81:    }
/widgets\edittext\OperationManager.java:83:    public boolean canUndo() {
/widgets\edittext\OperationManager.java:84:        return !undoOpts.isEmpty();
/widgets\edittext\OperationManager.java:85:    }
/widgets\edittext\OperationManager.java:87:    public boolean canRedo() {
/widgets\edittext\OperationManager.java:88:        return !redoOpts.isEmpty();
/widgets\edittext\OperationManager.java:89:    }
/widgets\edittext\OperationManager.java:91:    public boolean undo() {
/widgets\edittext\OperationManager.java:92:        if (canUndo()) {
/widgets\edittext\OperationManager.java:93:            EditOperation undoOpt = undoOpts.pop();
/widgets\edittext\OperationManager.java:95:            //屏蔽撤销产生的事件
/widgets\edittext\OperationManager.java:96:            disable();
/widgets\edittext\OperationManager.java:97:            undoOpt.undo(editText);
/widgets\edittext\OperationManager.java:98:            enable();
/widgets\edittext\OperationManager.java:100:            //填入重做栈
/widgets\edittext\OperationManager.java:101:            redoOpts.push(undoOpt);
/widgets\edittext\OperationManager.java:102:            return true;
/widgets\edittext\OperationManager.java:103:        }
/widgets\edittext\OperationManager.java:104:        return false;
/widgets\edittext\OperationManager.java:105:    }
/widgets\edittext\OperationManager.java:107:    /*保存/回复*/
/widgets\edittext\OperationManager.java:109:    public boolean redo() {
/widgets\edittext\OperationManager.java:110:        if (canRedo()) {
/widgets\edittext\OperationManager.java:111:            EditOperation redoOpt = redoOpts.pop();
/widgets\edittext\OperationManager.java:113:            //屏蔽重做产生的事件
/widgets\edittext\OperationManager.java:114:            disable();
/widgets\edittext\OperationManager.java:115:            redoOpt.redo(editText);
/widgets\edittext\OperationManager.java:116:            enable();
/widgets\edittext\OperationManager.java:118:            //填入撤销
/widgets\edittext\OperationManager.java:119:            undoOpts.push(redoOpt);
/widgets\edittext\OperationManager.java:120:            return true;
/widgets\edittext\OperationManager.java:121:        }
/widgets\edittext\OperationManager.java:122:        return false;
/widgets\edittext\OperationManager.java:123:    }
/widgets\edittext\OperationManager.java:125:    public Bundle exportState() {
/widgets\edittext\OperationManager.java:126:        Bundle state = new Bundle();
/widgets\edittext\OperationManager.java:128:        state.putSerializable(KEY_UNDO_OPTS, undoOpts);
/widgets\edittext\OperationManager.java:129:        state.putSerializable(KEY_REDO_OPTS, redoOpts);
/widgets\edittext\OperationManager.java:131:        return state;
/widgets\edittext\OperationManager.java:132:    }
/widgets\edittext\OperationManager.java:134:    public void importState(Bundle state) {
/widgets\edittext\OperationManager.java:135:        Collection<EditOperation> savedUndoOpts = (Collection<EditOperation>) state.getSerializable(KEY_UNDO_OPTS);
/widgets\edittext\OperationManager.java:136:        undoOpts.clear();
/widgets\edittext\OperationManager.java:137:        undoOpts.addAll(savedUndoOpts);
/widgets\edittext\OperationManager.java:139:        Collection<EditOperation> savedRedoOpts = (Collection<EditOperation>) state.getSerializable(KEY_REDO_OPTS);
/widgets\edittext\OperationManager.java:140:        redoOpts.clear();
/widgets\edittext\OperationManager.java:141:        redoOpts.addAll(savedRedoOpts);
/widgets\edittext\OperationManager.java:142:    }
/widgets\edittext\OperationManager.java:144:    private static class EditOperation implements Parcelable, Serializable {
/widgets\edittext\OperationManager.java:145:        public static final Creator<EditOperation> CREATOR = new Creator<EditOperation>() {
/widgets\edittext\OperationManager.java:146:            @Override
/widgets\edittext\OperationManager.java:147:            public EditOperation createFromParcel(Parcel source) {
/widgets\edittext\OperationManager.java:148:                return new EditOperation(source);
/widgets\edittext\OperationManager.java:149:            }
/widgets\edittext\OperationManager.java:151:            @Override
/widgets\edittext\OperationManager.java:152:            public EditOperation[] newArray(int size) {
/widgets\edittext\OperationManager.java:153:                return new EditOperation[size];
/widgets\edittext\OperationManager.java:154:            }
/widgets\edittext\OperationManager.java:155:        };
/widgets\edittext\OperationManager.java:156:        private String src;
/widgets\edittext\OperationManager.java:157:        private int srcStart;
/widgets\edittext\OperationManager.java:158:        private int srcEnd;
/widgets\edittext\OperationManager.java:159:        private String dst;
/widgets\edittext\OperationManager.java:160:        private int dstStart;
/widgets\edittext\OperationManager.java:161:        private int dstEnd;
/widgets\edittext\OperationManager.java:163:        EditOperation() {
/widgets\edittext\OperationManager.java:164:        }
/widgets\edittext\OperationManager.java:166:        EditOperation(Parcel in) {
/widgets\edittext\OperationManager.java:167:            this.src = in.readString();
/widgets\edittext\OperationManager.java:168:            this.srcStart = in.readInt();
/widgets\edittext\OperationManager.java:169:            this.srcEnd = in.readInt();
/widgets\edittext\OperationManager.java:170:            this.dst = in.readString();
/widgets\edittext\OperationManager.java:171:            this.dstStart = in.readInt();
/widgets\edittext\OperationManager.java:172:            this.dstEnd = in.readInt();
/widgets\edittext\OperationManager.java:173:        }
/widgets\edittext\OperationManager.java:175:        EditOperation setSrc(CharSequence src, int srcStart, int srcEnd) {
/widgets\edittext\OperationManager.java:176:            this.src = src != null ? src.toString() : "";
/widgets\edittext\OperationManager.java:177:            this.srcStart = srcStart;
/widgets\edittext\OperationManager.java:178:            this.srcEnd = srcEnd;
/widgets\edittext\OperationManager.java:179:            return this;
/widgets\edittext\OperationManager.java:180:        }
/widgets\edittext\OperationManager.java:182:        EditOperation setDst(CharSequence dst, int dstStart, int dstEnd) {
/widgets\edittext\OperationManager.java:183:            this.dst = dst != null ? dst.toString() : "";
/widgets\edittext\OperationManager.java:184:            this.dstStart = dstStart;
/widgets\edittext\OperationManager.java:185:            this.dstEnd = dstEnd;
/widgets\edittext\OperationManager.java:186:            return this;
/widgets\edittext\OperationManager.java:187:        }
/widgets\edittext\OperationManager.java:189:        void undo(EditText text) {
/widgets\edittext\OperationManager.java:190:            Editable editable = text.getText();
/widgets\edittext\OperationManager.java:192:            int idx = -1;
/widgets\edittext\OperationManager.java:193:            if (dstEnd > 0) {
/widgets\edittext\OperationManager.java:194:                editable.delete(dstStart, dstEnd);
/widgets\edittext\OperationManager.java:196:                if (src == null) {
/widgets\edittext\OperationManager.java:197:                    idx = dstStart;
/widgets\edittext\OperationManager.java:198:                }
/widgets\edittext\OperationManager.java:199:            }
/widgets\edittext\OperationManager.java:200:            if (src != null) {
/widgets\edittext\OperationManager.java:201:                editable.insert(srcStart, src);
/widgets\edittext\OperationManager.java:202:                idx = srcStart + src.length();
/widgets\edittext\OperationManager.java:203:            }
/widgets\edittext\OperationManager.java:204:            if (idx >= 0) {
/widgets\edittext\OperationManager.java:205:                text.setSelection(idx);
/widgets\edittext\OperationManager.java:206:            }
/widgets\edittext\OperationManager.java:207:        }
/widgets\edittext\OperationManager.java:209:        void redo(EditText text) {
/widgets\edittext\OperationManager.java:210:            Editable editable = text.getText();
/widgets\edittext\OperationManager.java:212:            int idx = -1;
/widgets\edittext\OperationManager.java:213:            if (srcEnd > 0) {
/widgets\edittext\OperationManager.java:214:                editable.delete(srcStart, srcEnd);
/widgets\edittext\OperationManager.java:215:                if (dst == null) {
/widgets\edittext\OperationManager.java:216:                    idx = srcStart;
/widgets\edittext\OperationManager.java:217:                }
/widgets\edittext\OperationManager.java:218:            }
/widgets\edittext\OperationManager.java:219:            if (dst != null) {
/widgets\edittext\OperationManager.java:220:                editable.insert(dstStart, dst);
/widgets\edittext\OperationManager.java:221:                idx = dstStart + dst.length();
/widgets\edittext\OperationManager.java:222:            }
/widgets\edittext\OperationManager.java:223:            if (idx >= 0) {
/widgets\edittext\OperationManager.java:224:                text.setSelection(idx);
/widgets\edittext\OperationManager.java:225:            }
/widgets\edittext\OperationManager.java:226:        }
/widgets\edittext\OperationManager.java:228:        @Override
/widgets\edittext\OperationManager.java:229:        public int describeContents() {
/widgets\edittext\OperationManager.java:230:            return 0;
/widgets\edittext\OperationManager.java:231:        }
/widgets\edittext\OperationManager.java:233:        @Override
/widgets\edittext\OperationManager.java:234:        public void writeToParcel(Parcel dest, int flags) {
/widgets\edittext\OperationManager.java:235:            dest.writeString(this.src);
/widgets\edittext\OperationManager.java:236:            dest.writeInt(this.srcStart);
/widgets\edittext\OperationManager.java:237:            dest.writeInt(this.srcEnd);
/widgets\edittext\OperationManager.java:238:            dest.writeString(this.dst);
/widgets\edittext\OperationManager.java:239:            dest.writeInt(this.dstStart);
/widgets\edittext\OperationManager.java:240:            dest.writeInt(this.dstEnd);
/widgets\edittext\OperationManager.java:241:        }
/widgets\edittext\OperationManager.java:242:    }
/widgets\edittext\OperationManager.java:243:}
/widgets\edittext\widget\UndoableEditText.java:1:package com.huanchengfly.tieba.post.widgets.edittext.widget;
/widgets\edittext\widget\UndoableEditText.java:3:import android.content.Context;
/widgets\edittext\widget\UndoableEditText.java:4:import android.os.Bundle;
/widgets\edittext\widget\UndoableEditText.java:5:import android.os.Parcelable;
/widgets\edittext\widget\UndoableEditText.java:6:import android.util.AttributeSet;
/widgets\edittext\widget\UndoableEditText.java:8:import androidx.appcompat.widget.AppCompatEditText;
/widgets\edittext\widget\UndoableEditText.java:10:import com.huanchengfly.tieba.post.widgets.edittext.OperationManager;
/widgets\edittext\widget\UndoableEditText.java:12:public class UndoableEditText extends AppCompatEditText {
/widgets\edittext\widget\UndoableEditText.java:13:    private static final String KEY_SUPER = "KEY_SUPER";
/widgets\edittext\widget\UndoableEditText.java:14:    private static final String KEY_OPT = OperationManager.class.getCanonicalName();
/widgets\edittext\widget\UndoableEditText.java:15:    private final OperationManager mgr = new OperationManager(this);
/widgets\edittext\widget\UndoableEditText.java:17:    public UndoableEditText(Context context) {
/widgets\edittext\widget\UndoableEditText.java:18:        super(context);
/widgets\edittext\widget\UndoableEditText.java:19:        init();
/widgets\edittext\widget\UndoableEditText.java:20:    }
/widgets\edittext\widget\UndoableEditText.java:22:    public UndoableEditText(Context context, AttributeSet attrs) {
/widgets\edittext\widget\UndoableEditText.java:23:        super(context, attrs);
/widgets\edittext\widget\UndoableEditText.java:24:        init();
/widgets\edittext\widget\UndoableEditText.java:25:    }
/widgets\edittext\widget\UndoableEditText.java:27:    public UndoableEditText(Context context, AttributeSet attrs, int defStyleAttr) {
/widgets\edittext\widget\UndoableEditText.java:28:        super(context, attrs, defStyleAttr);
/widgets\edittext\widget\UndoableEditText.java:29:        init();
/widgets\edittext\widget\UndoableEditText.java:30:    }
/widgets\edittext\widget\UndoableEditText.java:32:    public OperationManager getMgr() {
/widgets\edittext\widget\UndoableEditText.java:33:        return mgr;
/widgets\edittext\widget\UndoableEditText.java:34:    }
/widgets\edittext\widget\UndoableEditText.java:36:    public boolean canUndo() {
/widgets\edittext\widget\UndoableEditText.java:37:        return mgr.canUndo();
/widgets\edittext\widget\UndoableEditText.java:38:    }
/widgets\edittext\widget\UndoableEditText.java:40:    public boolean canRedo() {
/widgets\edittext\widget\UndoableEditText.java:41:        return mgr.canRedo();
/widgets\edittext\widget\UndoableEditText.java:42:    }
/widgets\edittext\widget\UndoableEditText.java:44:    public boolean undo() {
/widgets\edittext\widget\UndoableEditText.java:45:        return mgr.undo();
/widgets\edittext\widget\UndoableEditText.java:46:    }
/widgets\edittext\widget\UndoableEditText.java:48:    public boolean redo() {
/widgets\edittext\widget\UndoableEditText.java:49:        return mgr.redo();
/widgets\edittext\widget\UndoableEditText.java:50:    }
/widgets\edittext\widget\UndoableEditText.java:52:    private void init() {
/widgets\edittext\widget\UndoableEditText.java:53:        addTextChangedListener(mgr);
/widgets\edittext\widget\UndoableEditText.java:54:    }
/widgets\edittext\widget\UndoableEditText.java:56:    @Override
/widgets\edittext\widget\UndoableEditText.java:57:    public Parcelable onSaveInstanceState() {
/widgets\edittext\widget\UndoableEditText.java:58:        Bundle bundle = new Bundle();
/widgets\edittext\widget\UndoableEditText.java:59:        bundle.putParcelable(KEY_SUPER, super.onSaveInstanceState());
/widgets\edittext\widget\UndoableEditText.java:60:        bundle.putBundle(KEY_OPT, mgr.exportState());
/widgets\edittext\widget\UndoableEditText.java:61:        return bundle;
/widgets\edittext\widget\UndoableEditText.java:62:    }
/widgets\edittext\widget\UndoableEditText.java:64:    @Override
/widgets\edittext\widget\UndoableEditText.java:65:    public void onRestoreInstanceState(Parcelable state) {
/widgets\edittext\widget\UndoableEditText.java:66:        Bundle bundle = (Bundle) state;
/widgets\edittext\widget\UndoableEditText.java:67:        Parcelable superState = bundle.getParcelable(KEY_SUPER);
/widgets\edittext\widget\UndoableEditText.java:69:        mgr.disable();
/widgets\edittext\widget\UndoableEditText.java:70:        super.onRestoreInstanceState(superState);
/widgets\edittext\widget\UndoableEditText.java:71:        mgr.enable();
/widgets\edittext\widget\UndoableEditText.java:73:        mgr.importState(bundle.getBundle(KEY_OPT));
/widgets\edittext\widget\UndoableEditText.java:74:    }
/widgets\edittext\widget\UndoableEditText.java:75:}/widgets\theme\TintAlertDialogLayout.java:1:package com.huanchengfly.tieba.post.widgets.theme;
/widgets\theme\TintAlertDialogLayout.java:3:import android.annotation.SuppressLint;
/widgets\theme\TintAlertDialogLayout.java:4:import android.content.Context;
/widgets\theme\TintAlertDialogLayout.java:5:import android.content.res.TypedArray;
/widgets\theme\TintAlertDialogLayout.java:6:import android.util.AttributeSet;
/widgets\theme\TintAlertDialogLayout.java:8:import androidx.annotation.Nullable;
/widgets\theme\TintAlertDialogLayout.java:9:import androidx.appcompat.widget.AlertDialogLayout;
/widgets\theme\TintAlertDialogLayout.java:11:import com.huanchengfly.tieba.post.R;
/widgets\theme\TintAlertDialogLayout.java:12:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/widgets\theme\TintAlertDialogLayout.java:13:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/widgets\theme\TintAlertDialogLayout.java:14:import com.huanchengfly.tieba.post.utils.ThemeUtil;
/widgets\theme\TintAlertDialogLayout.java:16:@SuppressLint("RestrictedApi")
/widgets\theme\TintAlertDialogLayout.java:17:public class TintAlertDialogLayout extends AlertDialogLayout implements Tintable {
/widgets\theme\TintAlertDialogLayout.java:18:    private int mBackgroundTintResId;
/widgets\theme\TintAlertDialogLayout.java:20:    public TintAlertDialogLayout(@Nullable Context context) {
/widgets\theme\TintAlertDialogLayout.java:21:        this(context, null);
/widgets\theme\TintAlertDialogLayout.java:22:    }
/widgets\theme\TintAlertDialogLayout.java:24:    public TintAlertDialogLayout(@Nullable Context context, @Nullable AttributeSet attrs) {
/widgets\theme\TintAlertDialogLayout.java:25:        super(context, attrs);
/widgets\theme\TintAlertDialogLayout.java:26:        if (isInEditMode()) {
/widgets\theme\TintAlertDialogLayout.java:27:            return;
/widgets\theme\TintAlertDialogLayout.java:28:        }
/widgets\theme\TintAlertDialogLayout.java:29:        if (attrs == null) {
/widgets\theme\TintAlertDialogLayout.java:30:            mBackgroundTintResId = R.color.default_color_background;
/widgets\theme\TintAlertDialogLayout.java:31:            applyTintColor();
/widgets\theme\TintAlertDialogLayout.java:32:            return;
/widgets\theme\TintAlertDialogLayout.java:33:        }
/widgets\theme\TintAlertDialogLayout.java:34:        @SuppressLint("CustomViewStyleable") TypedArray array = getContext().obtainStyledAttributes(attrs, R.styleable.TintView, 0, 0);
/widgets\theme\TintAlertDialogLayout.java:35:        mBackgroundTintResId = array.getResourceId(R.styleable.TintView_backgroundTint, R.color.default_color_background);
/widgets\theme\TintAlertDialogLayout.java:36:        array.recycle();
/widgets\theme\TintAlertDialogLayout.java:37:        applyTintColor();
/widgets\theme\TintAlertDialogLayout.java:38:    }
/widgets\theme\TintAlertDialogLayout.java:40:    @Override
/widgets\theme\TintAlertDialogLayout.java:41:    public void tint() {
/widgets\theme\TintAlertDialogLayout.java:42:        applyTintColor();
/widgets\theme\TintAlertDialogLayout.java:43:    }
/widgets\theme\TintAlertDialogLayout.java:45:    private void applyTintColor() {
/widgets\theme\TintAlertDialogLayout.java:46:        if (getBackground() == null) {
/widgets\theme\TintAlertDialogLayout.java:47:            setBackgroundColor(ThemeUtils.getColorById(getContext(), mBackgroundTintResId));
/widgets\theme\TintAlertDialogLayout.java:48:        } else {
/widgets\theme\TintAlertDialogLayout.java:49:            setBackground(ThemeUtils.tintDrawable(getBackground(), ThemeUtils.getColorById(getContext(), mBackgroundTintResId)));
/widgets\theme\TintAlertDialogLayout.java:50:        }
/widgets\theme\TintAlertDialogLayout.java:51:        ThemeUtil.setTranslucentDialogBackground(this);
/widgets\theme\TintAlertDialogLayout.java:52:    }
/widgets\theme\TintAlertDialogLayout.java:53:}
/widgets\theme\TintAppBarLayout.java:1:package com.huanchengfly.tieba.post.widgets.theme;
/widgets\theme\TintAppBarLayout.java:3:import android.annotation.SuppressLint;
/widgets\theme\TintAppBarLayout.java:4:import android.content.Context;
/widgets\theme\TintAppBarLayout.java:5:import android.content.res.ColorStateList;
/widgets\theme\TintAppBarLayout.java:6:import android.content.res.TypedArray;
/widgets\theme\TintAppBarLayout.java:7:import android.util.AttributeSet;
/widgets\theme\TintAppBarLayout.java:9:import androidx.annotation.NonNull;
/widgets\theme\TintAppBarLayout.java:10:import androidx.annotation.Nullable;
/widgets\theme\TintAppBarLayout.java:12:import com.google.android.material.appbar.AppBarLayout;
/widgets\theme\TintAppBarLayout.java:13:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/widgets\theme\TintAppBarLayout.java:14:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/widgets\theme\TintAppBarLayout.java:15:import com.huanchengfly.tieba.post.R;
/widgets\theme\TintAppBarLayout.java:17:@SuppressLint("CustomViewStyleable")
/widgets\theme\TintAppBarLayout.java:18:public class TintAppBarLayout extends AppBarLayout implements Tintable {
/widgets\theme\TintAppBarLayout.java:19:    private int mBackgroundTintResId;
/widgets\theme\TintAppBarLayout.java:21:    public TintAppBarLayout(@NonNull Context context) {
/widgets\theme\TintAppBarLayout.java:22:        this(context, null);
/widgets\theme\TintAppBarLayout.java:23:    }
/widgets\theme\TintAppBarLayout.java:25:    public TintAppBarLayout(@NonNull Context context, @Nullable AttributeSet attrs) {
/widgets\theme\TintAppBarLayout.java:26:        this(context, attrs, 0);
/widgets\theme\TintAppBarLayout.java:27:    }
/widgets\theme\TintAppBarLayout.java:29:    public TintAppBarLayout(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
/widgets\theme\TintAppBarLayout.java:30:        super(context, attrs, defStyleAttr);
/widgets\theme\TintAppBarLayout.java:31:        if (isInEditMode()) {
/widgets\theme\TintAppBarLayout.java:32:            return;
/widgets\theme\TintAppBarLayout.java:33:        }
/widgets\theme\TintAppBarLayout.java:34:        if (attrs == null) {
/widgets\theme\TintAppBarLayout.java:35:            mBackgroundTintResId = R.color.default_color_background;
/widgets\theme\TintAppBarLayout.java:36:            applyTintColor();
/widgets\theme\TintAppBarLayout.java:37:            return;
/widgets\theme\TintAppBarLayout.java:38:        }
/widgets\theme\TintAppBarLayout.java:39:        TypedArray array = getContext().obtainStyledAttributes(attrs, R.styleable.TintView, defStyleAttr, 0);
/widgets\theme\TintAppBarLayout.java:40:        mBackgroundTintResId = array.getResourceId(R.styleable.TintView_backgroundTint, R.color.default_color_background);
/widgets\theme\TintAppBarLayout.java:41:        array.recycle();
/widgets\theme\TintAppBarLayout.java:42:        applyTintColor();
/widgets\theme\TintAppBarLayout.java:43:    }
/widgets\theme\TintAppBarLayout.java:45:    @Override
/widgets\theme\TintAppBarLayout.java:46:    public void tint() {
/widgets\theme\TintAppBarLayout.java:47:        applyTintColor();
/widgets\theme\TintAppBarLayout.java:48:    }
/widgets\theme\TintAppBarLayout.java:50:    private void applyTintColor() {
/widgets\theme\TintAppBarLayout.java:51:        if (getBackground() == null) {
/widgets\theme\TintAppBarLayout.java:52:            setBackgroundColor(ThemeUtils.getColorById(getContext(), mBackgroundTintResId));
/widgets\theme\TintAppBarLayout.java:53:        } else {
/widgets\theme\TintAppBarLayout.java:54:            setBackgroundTintList(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mBackgroundTintResId)));
/widgets\theme\TintAppBarLayout.java:55:        }
/widgets\theme\TintAppBarLayout.java:56:    }
/widgets\theme\TintAppBarLayout.java:57:}
/widgets\theme\TintBottomNavigationView.java:1:package com.huanchengfly.tieba.post.widgets.theme;
/widgets\theme\TintBottomNavigationView.java:3:import android.annotation.SuppressLint;
/widgets\theme\TintBottomNavigationView.java:4:import android.content.Context;
/widgets\theme\TintBottomNavigationView.java:5:import android.content.res.ColorStateList;
/widgets\theme\TintBottomNavigationView.java:6:import android.content.res.TypedArray;
/widgets\theme\TintBottomNavigationView.java:7:import android.util.AttributeSet;
/widgets\theme\TintBottomNavigationView.java:9:import com.google.android.material.bottomnavigation.BottomNavigationView;
/widgets\theme\TintBottomNavigationView.java:10:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/widgets\theme\TintBottomNavigationView.java:11:import com.huanchengfly.tieba.post.ui.theme.utils.ColorStateListUtils;
/widgets\theme\TintBottomNavigationView.java:12:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/widgets\theme\TintBottomNavigationView.java:13:import com.huanchengfly.tieba.post.R;
/widgets\theme\TintBottomNavigationView.java:15:public class TintBottomNavigationView extends BottomNavigationView implements Tintable {
/widgets\theme\TintBottomNavigationView.java:16:    private int mBackgroundTintResId;
/widgets\theme\TintBottomNavigationView.java:17:    private int mItemIconTintResId;
/widgets\theme\TintBottomNavigationView.java:18:    private int mItemTextTintResId;
/widgets\theme\TintBottomNavigationView.java:20:    public TintBottomNavigationView(Context context) {
/widgets\theme\TintBottomNavigationView.java:21:        this(context, null);
/widgets\theme\TintBottomNavigationView.java:22:    }
/widgets\theme\TintBottomNavigationView.java:24:    public TintBottomNavigationView(Context context, AttributeSet attrs) {
/widgets\theme\TintBottomNavigationView.java:25:        this(context, attrs, 0);
/widgets\theme\TintBottomNavigationView.java:26:    }
/widgets\theme\TintBottomNavigationView.java:28:    @SuppressLint("CustomViewStyleable")
/widgets\theme\TintBottomNavigationView.java:29:    public TintBottomNavigationView(Context context, AttributeSet attrs, int defStyleAttr) {
/widgets\theme\TintBottomNavigationView.java:30:        super(context, attrs, defStyleAttr);
/widgets\theme\TintBottomNavigationView.java:31:        if (isInEditMode()) {
/widgets\theme\TintBottomNavigationView.java:32:            return;
/widgets\theme\TintBottomNavigationView.java:33:        }
/widgets\theme\TintBottomNavigationView.java:34:        if (attrs == null) {
/widgets\theme\TintBottomNavigationView.java:35:            mBackgroundTintResId = R.color.transparent;
/widgets\theme\TintBottomNavigationView.java:36:            mItemIconTintResId = 0;
/widgets\theme\TintBottomNavigationView.java:37:            mItemTextTintResId = 0;
/widgets\theme\TintBottomNavigationView.java:38:            applyTintColor();
/widgets\theme\TintBottomNavigationView.java:39:            return;
/widgets\theme\TintBottomNavigationView.java:40:        }
/widgets\theme\TintBottomNavigationView.java:41:        TypedArray array = getContext().obtainStyledAttributes(attrs, R.styleable.TintBottomNavigationView, defStyleAttr, 0);
/widgets\theme\TintBottomNavigationView.java:42:        mBackgroundTintResId = array.getResourceId(R.styleable.TintBottomNavigationView_bottomNavigationBackgroundTint, R.color.transparent);
/widgets\theme\TintBottomNavigationView.java:43:        mItemIconTintResId = array.getResourceId(R.styleable.TintBottomNavigationView_itemIconTintList, 0);
/widgets\theme\TintBottomNavigationView.java:44:        mItemTextTintResId = array.getResourceId(R.styleable.TintBottomNavigationView_itemTextTintList, 0);
/widgets\theme\TintBottomNavigationView.java:45:        array.recycle();
/widgets\theme\TintBottomNavigationView.java:46:        applyTintColor();
/widgets\theme\TintBottomNavigationView.java:47:    }
/widgets\theme\TintBottomNavigationView.java:49:    private void applyTintColor() {
/widgets\theme\TintBottomNavigationView.java:50:        if (getBackground() == null) {
/widgets\theme\TintBottomNavigationView.java:51:            setBackgroundColor(ThemeUtils.getColorById(getContext(), mBackgroundTintResId));
/widgets\theme\TintBottomNavigationView.java:52:        } else {
/widgets\theme\TintBottomNavigationView.java:53:            setBackgroundTintList(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mBackgroundTintResId)));
/widgets\theme\TintBottomNavigationView.java:54:        }
/widgets\theme\TintBottomNavigationView.java:55:        if (mItemIconTintResId != 0) {
/widgets\theme\TintBottomNavigationView.java:56:            setItemIconTintList(ColorStateListUtils.createColorStateList(getContext(), mItemIconTintResId));
/widgets\theme\TintBottomNavigationView.java:57:        }
/widgets\theme\TintBottomNavigationView.java:58:        if (mItemTextTintResId != 0) {
/widgets\theme\TintBottomNavigationView.java:59:            setItemTextColor(ColorStateListUtils.createColorStateList(getContext(), mItemTextTintResId));
/widgets\theme\TintBottomNavigationView.java:60:        }
/widgets\theme\TintBottomNavigationView.java:61:    }
/widgets\theme\TintBottomNavigationView.java:63:    @Override
/widgets\theme\TintBottomNavigationView.java:64:    public void tint() {
/widgets\theme\TintBottomNavigationView.java:65:        applyTintColor();
/widgets\theme\TintBottomNavigationView.java:66:    }
/widgets\theme\TintBottomNavigationView.java:67:}
/widgets\theme\TintCheckBox.java:1:package com.huanchengfly.tieba.post.widgets.theme;
/widgets\theme\TintCheckBox.java:3:import android.annotation.SuppressLint;
/widgets\theme\TintCheckBox.java:4:import android.content.Context;
/widgets\theme\TintCheckBox.java:5:import android.content.res.ColorStateList;
/widgets\theme\TintCheckBox.java:6:import android.content.res.TypedArray;
/widgets\theme\TintCheckBox.java:7:import android.util.AttributeSet;
/widgets\theme\TintCheckBox.java:9:import androidx.appcompat.widget.AppCompatCheckBox;
/widgets\theme\TintCheckBox.java:11:import com.huanchengfly.tieba.post.ui.theme.utils.ColorStateListUtils;
/widgets\theme\TintCheckBox.java:12:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/widgets\theme\TintCheckBox.java:13:import com.huanchengfly.tieba.post.R;
/widgets\theme\TintCheckBox.java:15:public class TintCheckBox extends AppCompatCheckBox {
/widgets\theme\TintCheckBox.java:16:    private int mBackgroundTintResId;
/widgets\theme\TintCheckBox.java:17:    private int mTextColorResId;
/widgets\theme\TintCheckBox.java:18:    private int mButtonTintResId;
/widgets\theme\TintCheckBox.java:20:    public TintCheckBox(Context context) {
/widgets\theme\TintCheckBox.java:21:        this(context, null);
/widgets\theme\TintCheckBox.java:22:    }
/widgets\theme\TintCheckBox.java:24:    public TintCheckBox(Context context, AttributeSet attrs) {
/widgets\theme\TintCheckBox.java:25:        this(context, attrs, R.attr.checkboxStyle);
/widgets\theme\TintCheckBox.java:26:    }
/widgets\theme\TintCheckBox.java:28:    public TintCheckBox(Context context, AttributeSet attrs, int defStyleAttr) {
/widgets\theme\TintCheckBox.java:29:        super(context, attrs, defStyleAttr);
/widgets\theme\TintCheckBox.java:30:        if (isInEditMode()) {
/widgets\theme\TintCheckBox.java:31:            return;
/widgets\theme\TintCheckBox.java:32:        }
/widgets\theme\TintCheckBox.java:33:        if (attrs == null) {
/widgets\theme\TintCheckBox.java:34:            mBackgroundTintResId = 0;
/widgets\theme\TintCheckBox.java:35:            mButtonTintResId = 0;
/widgets\theme\TintCheckBox.java:36:            mTextColorResId = 0;
/widgets\theme\TintCheckBox.java:37:            applyTintColor();
/widgets\theme\TintCheckBox.java:38:            return;
/widgets\theme\TintCheckBox.java:39:        }
/widgets\theme\TintCheckBox.java:40:        TypedArray array = getContext().obtainStyledAttributes(attrs, R.styleable.TintCheckBox, defStyleAttr, 0);
/widgets\theme\TintCheckBox.java:41:        mBackgroundTintResId = array.getResourceId(R.styleable.TintCheckBox_checkboxBackgroundTint, 0);
/widgets\theme\TintCheckBox.java:42:        mButtonTintResId = array.getResourceId(R.styleable.TintCheckBox_buttonTint, 0);
/widgets\theme\TintCheckBox.java:43:        mTextColorResId = array.getResourceId(R.styleable.TintCheckBox_textColor, 0);
/widgets\theme\TintCheckBox.java:44:        array.recycle();
/widgets\theme\TintCheckBox.java:45:        applyTintColor();
/widgets\theme\TintCheckBox.java:46:    }
/widgets\theme\TintCheckBox.java:48:    @SuppressLint("RestrictedApi")
/widgets\theme\TintCheckBox.java:49:    private void applyTintColor() {
/widgets\theme\TintCheckBox.java:50:        if (mBackgroundTintResId != 0) {
/widgets\theme\TintCheckBox.java:51:            setBackgroundTintList(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mBackgroundTintResId)));
/widgets\theme\TintCheckBox.java:52:        }
/widgets\theme\TintCheckBox.java:53:        if (mButtonTintResId != 0) {
/widgets\theme\TintCheckBox.java:54:            setSupportButtonTintList(ColorStateListUtils.createColorStateList(getContext(), mButtonTintResId));
/widgets\theme\TintCheckBox.java:55:        }
/widgets\theme\TintCheckBox.java:56:        if (mTextColorResId != 0) {
/widgets\theme\TintCheckBox.java:57:            setTextColor(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mTextColorResId)));
/widgets\theme\TintCheckBox.java:58:        }
/widgets\theme\TintCheckBox.java:59:    }
/widgets\theme\TintCheckBox.java:60:}
/widgets\theme\TintConstraintLayout.java:1:package com.huanchengfly.tieba.post.widgets.theme;
/widgets\theme\TintConstraintLayout.java:3:import android.annotation.SuppressLint;
/widgets\theme\TintConstraintLayout.java:4:import android.content.Context;
/widgets\theme\TintConstraintLayout.java:5:import android.content.res.ColorStateList;
/widgets\theme\TintConstraintLayout.java:6:import android.content.res.TypedArray;
/widgets\theme\TintConstraintLayout.java:7:import android.util.AttributeSet;
/widgets\theme\TintConstraintLayout.java:9:import androidx.annotation.NonNull;
/widgets\theme\TintConstraintLayout.java:10:import androidx.annotation.Nullable;
/widgets\theme\TintConstraintLayout.java:11:import androidx.constraintlayout.widget.ConstraintLayout;
/widgets\theme\TintConstraintLayout.java:13:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/widgets\theme\TintConstraintLayout.java:14:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/widgets\theme\TintConstraintLayout.java:15:import com.huanchengfly.tieba.post.R;
/widgets\theme\TintConstraintLayout.java:17:@SuppressLint("CustomViewStyleable")
/widgets\theme\TintConstraintLayout.java:18:public class TintConstraintLayout extends ConstraintLayout implements Tintable {
/widgets\theme\TintConstraintLayout.java:19:    private int mBackgroundTintResId;
/widgets\theme\TintConstraintLayout.java:21:    public TintConstraintLayout(@NonNull Context context) {
/widgets\theme\TintConstraintLayout.java:22:        this(context, null);
/widgets\theme\TintConstraintLayout.java:23:    }
/widgets\theme\TintConstraintLayout.java:25:    public TintConstraintLayout(@NonNull Context context, @Nullable AttributeSet attrs) {
/widgets\theme\TintConstraintLayout.java:26:        this(context, attrs, 0);
/widgets\theme\TintConstraintLayout.java:27:    }
/widgets\theme\TintConstraintLayout.java:29:    public TintConstraintLayout(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
/widgets\theme\TintConstraintLayout.java:30:        super(context, attrs, defStyleAttr);
/widgets\theme\TintConstraintLayout.java:31:        if (isInEditMode()) {
/widgets\theme\TintConstraintLayout.java:32:            return;
/widgets\theme\TintConstraintLayout.java:33:        }
/widgets\theme\TintConstraintLayout.java:34:        if (attrs == null) {
/widgets\theme\TintConstraintLayout.java:35:            mBackgroundTintResId = 0;
/widgets\theme\TintConstraintLayout.java:36:            applyTintColor();
/widgets\theme\TintConstraintLayout.java:37:            return;
/widgets\theme\TintConstraintLayout.java:38:        }
/widgets\theme\TintConstraintLayout.java:39:        TypedArray array = getContext().obtainStyledAttributes(attrs, R.styleable.TintView, defStyleAttr, 0);
/widgets\theme\TintConstraintLayout.java:40:        mBackgroundTintResId = array.getResourceId(R.styleable.TintView_backgroundTint, 0);
/widgets\theme\TintConstraintLayout.java:41:        array.recycle();
/widgets\theme\TintConstraintLayout.java:42:        applyTintColor();
/widgets\theme\TintConstraintLayout.java:43:    }
/widgets\theme\TintConstraintLayout.java:45:    @Override
/widgets\theme\TintConstraintLayout.java:46:    public void tint() {
/widgets\theme\TintConstraintLayout.java:47:        applyTintColor();
/widgets\theme\TintConstraintLayout.java:48:    }
/widgets\theme\TintConstraintLayout.java:50:    private void applyTintColor() {
/widgets\theme\TintConstraintLayout.java:51:        if (mBackgroundTintResId != 0) {
/widgets\theme\TintConstraintLayout.java:52:            if (getBackground() == null) {
/widgets\theme\TintConstraintLayout.java:53:                setBackgroundColor(ThemeUtils.getColorById(getContext(), mBackgroundTintResId));
/widgets\theme\TintConstraintLayout.java:54:            } else {
/widgets\theme\TintConstraintLayout.java:55:                setBackgroundTintList(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mBackgroundTintResId)));
/widgets\theme\TintConstraintLayout.java:56:            }
/widgets\theme\TintConstraintLayout.java:57:        }
/widgets\theme\TintConstraintLayout.java:58:    }
/widgets\theme\TintConstraintLayout.java:60:    public int getBackgroundTintResId() {
/widgets\theme\TintConstraintLayout.java:61:        return mBackgroundTintResId;
/widgets\theme\TintConstraintLayout.java:62:    }
/widgets\theme\TintConstraintLayout.java:64:    public void setBackgroundTintResId(int backgroundTintResId) {
/widgets\theme\TintConstraintLayout.java:65:        mBackgroundTintResId = backgroundTintResId;
/widgets\theme\TintConstraintLayout.java:66:        tint();
/widgets\theme\TintConstraintLayout.java:67:    }
/widgets\theme\TintConstraintLayout.java:68:}
/widgets\theme\TintCoordinatorLayout.java:1:package com.huanchengfly.tieba.post.widgets.theme;
/widgets\theme\TintCoordinatorLayout.java:3:import android.annotation.SuppressLint;
/widgets\theme\TintCoordinatorLayout.java:4:import android.content.Context;
/widgets\theme\TintCoordinatorLayout.java:5:import android.content.res.ColorStateList;
/widgets\theme\TintCoordinatorLayout.java:6:import android.content.res.TypedArray;
/widgets\theme\TintCoordinatorLayout.java:7:import android.util.AttributeSet;
/widgets\theme\TintCoordinatorLayout.java:9:import androidx.annotation.NonNull;
/widgets\theme\TintCoordinatorLayout.java:10:import androidx.annotation.Nullable;
/widgets\theme\TintCoordinatorLayout.java:11:import androidx.coordinatorlayout.widget.CoordinatorLayout;
/widgets\theme\TintCoordinatorLayout.java:13:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/widgets\theme\TintCoordinatorLayout.java:14:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/widgets\theme\TintCoordinatorLayout.java:15:import com.huanchengfly.tieba.post.R;
/widgets\theme\TintCoordinatorLayout.java:17:@SuppressLint("CustomViewStyleable")
/widgets\theme\TintCoordinatorLayout.java:18:public class TintCoordinatorLayout extends CoordinatorLayout implements Tintable {
/widgets\theme\TintCoordinatorLayout.java:19:    private int mBackgroundTintResId;
/widgets\theme\TintCoordinatorLayout.java:21:    public TintCoordinatorLayout(@NonNull Context context) {
/widgets\theme\TintCoordinatorLayout.java:22:        this(context, null);
/widgets\theme\TintCoordinatorLayout.java:23:    }
/widgets\theme\TintCoordinatorLayout.java:25:    public TintCoordinatorLayout(@NonNull Context context, @Nullable AttributeSet attrs) {
/widgets\theme\TintCoordinatorLayout.java:26:        this(context, attrs, 0);
/widgets\theme\TintCoordinatorLayout.java:27:    }
/widgets\theme\TintCoordinatorLayout.java:29:    public TintCoordinatorLayout(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
/widgets\theme\TintCoordinatorLayout.java:30:        super(context, attrs, defStyleAttr);
/widgets\theme\TintCoordinatorLayout.java:31:        if (isInEditMode()) {
/widgets\theme\TintCoordinatorLayout.java:32:            return;
/widgets\theme\TintCoordinatorLayout.java:33:        }
/widgets\theme\TintCoordinatorLayout.java:34:        if (attrs == null) {
/widgets\theme\TintCoordinatorLayout.java:35:            mBackgroundTintResId = 0;
/widgets\theme\TintCoordinatorLayout.java:36:            applyTintColor();
/widgets\theme\TintCoordinatorLayout.java:37:            return;
/widgets\theme\TintCoordinatorLayout.java:38:        }
/widgets\theme\TintCoordinatorLayout.java:39:        TypedArray array = getContext().obtainStyledAttributes(attrs, R.styleable.TintView, defStyleAttr, 0);
/widgets\theme\TintCoordinatorLayout.java:40:        mBackgroundTintResId = array.getResourceId(R.styleable.TintView_backgroundTint, 0);
/widgets\theme\TintCoordinatorLayout.java:41:        array.recycle();
/widgets\theme\TintCoordinatorLayout.java:42:        applyTintColor();
/widgets\theme\TintCoordinatorLayout.java:43:    }
/widgets\theme\TintCoordinatorLayout.java:45:    @Override
/widgets\theme\TintCoordinatorLayout.java:46:    public void tint() {
/widgets\theme\TintCoordinatorLayout.java:47:        applyTintColor();
/widgets\theme\TintCoordinatorLayout.java:48:    }
/widgets\theme\TintCoordinatorLayout.java:50:    private void applyTintColor() {
/widgets\theme\TintCoordinatorLayout.java:51:        if (mBackgroundTintResId != 0) {
/widgets\theme\TintCoordinatorLayout.java:52:            if (getBackground() == null) {
/widgets\theme\TintCoordinatorLayout.java:53:                setBackgroundColor(ThemeUtils.getColorById(getContext(), mBackgroundTintResId));
/widgets\theme\TintCoordinatorLayout.java:54:            } else {
/widgets\theme\TintCoordinatorLayout.java:55:                setBackgroundTintList(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mBackgroundTintResId)));
/widgets\theme\TintCoordinatorLayout.java:56:            }
/widgets\theme\TintCoordinatorLayout.java:57:        }
/widgets\theme\TintCoordinatorLayout.java:58:    }
/widgets\theme\TintCoordinatorLayout.java:59:}
/widgets\theme\TintDialogTitle.java:1:package com.huanchengfly.tieba.post.widgets.theme;
/widgets\theme\TintDialogTitle.java:3:import android.annotation.SuppressLint;
/widgets\theme\TintDialogTitle.java:4:import android.content.Context;
/widgets\theme\TintDialogTitle.java:5:import android.content.res.ColorStateList;
/widgets\theme\TintDialogTitle.java:6:import android.content.res.TypedArray;
/widgets\theme\TintDialogTitle.java:7:import android.util.AttributeSet;
/widgets\theme\TintDialogTitle.java:9:import androidx.appcompat.widget.DialogTitle;
/widgets\theme\TintDialogTitle.java:11:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/widgets\theme\TintDialogTitle.java:12:import com.huanchengfly.tieba.post.ui.theme.utils.ColorStateListUtils;
/widgets\theme\TintDialogTitle.java:13:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/widgets\theme\TintDialogTitle.java:14:import com.huanchengfly.tieba.post.R;
/widgets\theme\TintDialogTitle.java:16:@SuppressLint({"CustomViewStyleable", "RestrictedApi"})
/widgets\theme\TintDialogTitle.java:17:public class TintDialogTitle extends DialogTitle implements Tintable {
/widgets\theme\TintDialogTitle.java:18:    private int mBackgroundTintResId;
/widgets\theme\TintDialogTitle.java:19:    private int mTintResId;
/widgets\theme\TintDialogTitle.java:20:    private int mTintListResId;
/widgets\theme\TintDialogTitle.java:22:    public TintDialogTitle(Context context) {
/widgets\theme\TintDialogTitle.java:23:        this(context, null);
/widgets\theme\TintDialogTitle.java:24:    }
/widgets\theme\TintDialogTitle.java:26:    public TintDialogTitle(Context context, AttributeSet attrs) {
/widgets\theme\TintDialogTitle.java:27:        this(context, attrs, 0);
/widgets\theme\TintDialogTitle.java:28:    }
/widgets\theme\TintDialogTitle.java:30:    public TintDialogTitle(Context context, AttributeSet attrs, int defStyleAttr) {
/widgets\theme\TintDialogTitle.java:31:        super(context, attrs, defStyleAttr);
/widgets\theme\TintDialogTitle.java:32:        if (isInEditMode()) {
/widgets\theme\TintDialogTitle.java:33:            return;
/widgets\theme\TintDialogTitle.java:34:        }
/widgets\theme\TintDialogTitle.java:35:        if (attrs == null) {
/widgets\theme\TintDialogTitle.java:36:            mBackgroundTintResId = R.color.transparent;
/widgets\theme\TintDialogTitle.java:37:            mTintResId = 0;
/widgets\theme\TintDialogTitle.java:38:            mTintListResId = 0;
/widgets\theme\TintDialogTitle.java:39:            applyTintColor();
/widgets\theme\TintDialogTitle.java:40:            return;
/widgets\theme\TintDialogTitle.java:41:        }
/widgets\theme\TintDialogTitle.java:42:        TypedArray array = getContext().obtainStyledAttributes(attrs, R.styleable.TintView, defStyleAttr, 0);
/widgets\theme\TintDialogTitle.java:43:        mBackgroundTintResId = array.getResourceId(R.styleable.TintView_backgroundTint, R.color.transparent);
/widgets\theme\TintDialogTitle.java:44:        mTintResId = array.getResourceId(R.styleable.TintView_tint, 0);
/widgets\theme\TintDialogTitle.java:45:        mTintListResId = array.getResourceId(R.styleable.TintView_tintList, 0);
/widgets\theme\TintDialogTitle.java:46:        array.recycle();
/widgets\theme\TintDialogTitle.java:47:        applyTintColor();
/widgets\theme\TintDialogTitle.java:48:    }
/widgets\theme\TintDialogTitle.java:50:    public void setBackgroundTintResId(int mBackgroundTintResId) {
/widgets\theme\TintDialogTitle.java:51:        this.mBackgroundTintResId = mBackgroundTintResId;
/widgets\theme\TintDialogTitle.java:52:        applyTintColor();
/widgets\theme\TintDialogTitle.java:53:    }
/widgets\theme\TintDialogTitle.java:55:    public void setTintResId(int mTintResId) {
/widgets\theme\TintDialogTitle.java:56:        this.mTintResId = mTintResId;
/widgets\theme\TintDialogTitle.java:57:        applyTintColor();
/widgets\theme\TintDialogTitle.java:58:    }
/widgets\theme\TintDialogTitle.java:60:    private void applyTintColor() {
/widgets\theme\TintDialogTitle.java:61:        if (getBackground() == null) {
/widgets\theme\TintDialogTitle.java:62:            setBackgroundColor(ThemeUtils.getColorById(getContext(), mBackgroundTintResId));
/widgets\theme\TintDialogTitle.java:63:        } else {
/widgets\theme\TintDialogTitle.java:64:            setBackground(ThemeUtils.tintDrawable(getBackground(), ThemeUtils.getColorById(getContext(), mBackgroundTintResId)));
/widgets\theme\TintDialogTitle.java:65:        }
/widgets\theme\TintDialogTitle.java:66:        if (mTintResId != 0 && mTintListResId == 0) {
/widgets\theme\TintDialogTitle.java:67:            setTextColor(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mTintResId)));
/widgets\theme\TintDialogTitle.java:68:        } else if (mTintListResId != 0) {
/widgets\theme\TintDialogTitle.java:69:            setTextColor(ColorStateListUtils.createColorStateList(getContext(), mTintListResId));
/widgets\theme\TintDialogTitle.java:70:        }
/widgets\theme\TintDialogTitle.java:71:    }
/widgets\theme\TintDialogTitle.java:73:    @Override
/widgets\theme\TintDialogTitle.java:74:    public void tint() {
/widgets\theme\TintDialogTitle.java:75:        applyTintColor();
/widgets\theme\TintDialogTitle.java:76:    }
/widgets\theme\TintDialogTitle.java:77:}
/widgets\theme\TintFloatingActionButton.java:1:package com.huanchengfly.tieba.post.widgets.theme;
/widgets\theme\TintFloatingActionButton.java:3:import android.annotation.SuppressLint;
/widgets\theme\TintFloatingActionButton.java:4:import android.content.Context;
/widgets\theme\TintFloatingActionButton.java:5:import android.content.res.ColorStateList;
/widgets\theme\TintFloatingActionButton.java:6:import android.content.res.TypedArray;
/widgets\theme\TintFloatingActionButton.java:7:import android.util.AttributeSet;
/widgets\theme\TintFloatingActionButton.java:9:import androidx.annotation.NonNull;
/widgets\theme\TintFloatingActionButton.java:10:import androidx.annotation.Nullable;
/widgets\theme\TintFloatingActionButton.java:12:import com.google.android.material.floatingactionbutton.FloatingActionButton;
/widgets\theme\TintFloatingActionButton.java:13:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/widgets\theme\TintFloatingActionButton.java:14:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/widgets\theme\TintFloatingActionButton.java:15:import com.huanchengfly.tieba.post.R;
/widgets\theme\TintFloatingActionButton.java:17:@SuppressLint("CustomViewStyleable")
/widgets\theme\TintFloatingActionButton.java:18:public class TintFloatingActionButton extends FloatingActionButton implements Tintable {
/widgets\theme\TintFloatingActionButton.java:19:    private int mBackgroundTintResId;
/widgets\theme\TintFloatingActionButton.java:21:    public TintFloatingActionButton(@NonNull Context context) {
/widgets\theme\TintFloatingActionButton.java:22:        this(context, null);
/widgets\theme\TintFloatingActionButton.java:23:    }
/widgets\theme\TintFloatingActionButton.java:25:    public TintFloatingActionButton(@NonNull Context context, @Nullable AttributeSet attrs) {
/widgets\theme\TintFloatingActionButton.java:26:        this(context, attrs, 0);
/widgets\theme\TintFloatingActionButton.java:27:    }
/widgets\theme\TintFloatingActionButton.java:29:    public TintFloatingActionButton(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
/widgets\theme\TintFloatingActionButton.java:30:        super(context, attrs, defStyleAttr);
/widgets\theme\TintFloatingActionButton.java:31:        if (isInEditMode()) {
/widgets\theme\TintFloatingActionButton.java:32:            return;
/widgets\theme\TintFloatingActionButton.java:33:        }
/widgets\theme\TintFloatingActionButton.java:34:        if (attrs == null) {
/widgets\theme\TintFloatingActionButton.java:35:            mBackgroundTintResId = R.color.default_color_background;
/widgets\theme\TintFloatingActionButton.java:36:            applyTintColor();
/widgets\theme\TintFloatingActionButton.java:37:            return;
/widgets\theme\TintFloatingActionButton.java:38:        }
/widgets\theme\TintFloatingActionButton.java:39:        TypedArray array = getContext().obtainStyledAttributes(attrs, R.styleable.TintView, defStyleAttr, 0);
/widgets\theme\TintFloatingActionButton.java:40:        mBackgroundTintResId = array.getResourceId(R.styleable.TintView_backgroundTint, R.color.default_color_background);
/widgets\theme\TintFloatingActionButton.java:41:        array.recycle();
/widgets\theme\TintFloatingActionButton.java:42:        applyTintColor();
/widgets\theme\TintFloatingActionButton.java:43:    }
/widgets\theme\TintFloatingActionButton.java:45:    @Override
/widgets\theme\TintFloatingActionButton.java:46:    public void tint() {
/widgets\theme\TintFloatingActionButton.java:47:        applyTintColor();
/widgets\theme\TintFloatingActionButton.java:48:    }
/widgets\theme\TintFloatingActionButton.java:50:    private void applyTintColor() {
/widgets\theme\TintFloatingActionButton.java:51:        setBackgroundTintList(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mBackgroundTintResId)));
/widgets\theme\TintFloatingActionButton.java:52:    }
/widgets\theme\TintFloatingActionButton.java:53:}
/widgets\theme\TintFloorMaterialCardView.java:1:package com.huanchengfly.tieba.post.widgets.theme;
/widgets\theme\TintFloorMaterialCardView.java:3:import android.annotation.SuppressLint;
/widgets\theme\TintFloorMaterialCardView.java:4:import android.content.Context;
/widgets\theme\TintFloorMaterialCardView.java:5:import android.content.res.ColorStateList;
/widgets\theme\TintFloorMaterialCardView.java:6:import android.util.AttributeSet;
/widgets\theme\TintFloorMaterialCardView.java:8:import androidx.annotation.NonNull;
/widgets\theme\TintFloorMaterialCardView.java:9:import androidx.annotation.Nullable;
/widgets\theme\TintFloorMaterialCardView.java:11:import com.google.android.material.card.MaterialCardView;
/widgets\theme\TintFloorMaterialCardView.java:12:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/widgets\theme\TintFloorMaterialCardView.java:13:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/widgets\theme\TintFloorMaterialCardView.java:14:import com.huanchengfly.tieba.post.R;
/widgets\theme\TintFloorMaterialCardView.java:16:import java.lang.reflect.Field;
/widgets\theme\TintFloorMaterialCardView.java:17:import java.lang.reflect.InvocationTargetException;
/widgets\theme\TintFloorMaterialCardView.java:18:import java.lang.reflect.Method;
/widgets\theme\TintFloorMaterialCardView.java:20:@SuppressLint("CustomViewStyleable")
/widgets\theme\TintFloorMaterialCardView.java:21:public class TintFloorMaterialCardView extends MaterialCardView implements Tintable {
/widgets\theme\TintFloorMaterialCardView.java:22:    private static final String TAG = "TintMaterialCardView";
/widgets\theme\TintFloorMaterialCardView.java:23:    /*
/widgets\theme\TintFloorMaterialCardView.java:24:    private int mBackgroundTintResId;
/widgets\theme\TintFloorMaterialCardView.java:25:    private int mStrokeColorResId;
/widgets\theme\TintFloorMaterialCardView.java:26:    */
/widgets\theme\TintFloorMaterialCardView.java:28:    public TintFloorMaterialCardView(@NonNull Context context) {
/widgets\theme\TintFloorMaterialCardView.java:29:        this(context, null);
/widgets\theme\TintFloorMaterialCardView.java:30:    }
/widgets\theme\TintFloorMaterialCardView.java:32:    public TintFloorMaterialCardView(@NonNull Context context, @Nullable AttributeSet attrs) {
/widgets\theme\TintFloorMaterialCardView.java:33:        this(context, attrs, 0);
/widgets\theme\TintFloorMaterialCardView.java:34:    }
/widgets\theme\TintFloorMaterialCardView.java:36:    public TintFloorMaterialCardView(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
/widgets\theme\TintFloorMaterialCardView.java:37:        super(context, attrs, defStyleAttr);
/widgets\theme\TintFloorMaterialCardView.java:38:    /*
/widgets\theme\TintFloorMaterialCardView.java:39:    if (isInEditMode()) {
/widgets\theme\TintFloorMaterialCardView.java:40:        return;
/widgets\theme\TintFloorMaterialCardView.java:41:    }
/widgets\theme\TintFloorMaterialCardView.java:42:    if (attrs == null) {
/widgets\theme\TintFloorMaterialCardView.java:43:        mBackgroundTintResId = R.color.default_color_card;
/widgets\theme\TintFloorMaterialCardView.java:44:        mStrokeColorResId = 0;
/widgets\theme\TintFloorMaterialCardView.java:45:        applyTintColor();
/widgets\theme\TintFloorMaterialCardView.java:46:        return;
/widgets\theme\TintFloorMaterialCardView.java:47:    }
/widgets\theme\TintFloorMaterialCardView.java:48:    TypedArray array = getContext().obtainStyledAttributes(attrs, R.styleable.TintMaterialCardView, defStyleAttr, 0);
/widgets\theme\TintFloorMaterialCardView.java:49:    mBackgroundTintResId = array.getResourceId(R.styleable.TintMaterialCardView_materialCardBackgroundTint, R.color.default_color_card);
/widgets\theme\TintFloorMaterialCardView.java:50:    mStrokeColorResId = array.getResourceId(R.styleable.TintMaterialCardView_strokeColor, 0);
/widgets\theme\TintFloorMaterialCardView.java:51:    array.recycle();
/widgets\theme\TintFloorMaterialCardView.java:52:    */
/widgets\theme\TintFloorMaterialCardView.java:53:        applyTintColor();
/widgets\theme\TintFloorMaterialCardView.java:54:    }
/widgets\theme\TintFloorMaterialCardView.java:56:    @Override
/widgets\theme\TintFloorMaterialCardView.java:57:    public void tint() {
/widgets\theme\TintFloorMaterialCardView.java:58:        applyTintColor();
/widgets\theme\TintFloorMaterialCardView.java:59:    }
/widgets\theme\TintFloorMaterialCardView.java:61:    private void applyTintColor() {
/widgets\theme\TintFloorMaterialCardView.java:62:        //int bg = ThemeUtils.getColorById(getContext(), mBackgroundTintResId);
/widgets\theme\TintFloorMaterialCardView.java:63:        int bg = ThemeUtils.getColorById(getContext(), R.color.default_color_floor_card);
/widgets\theme\TintFloorMaterialCardView.java:64:        try {
/widgets\theme\TintFloorMaterialCardView.java:65:            Field field = Class.forName("com.google.android.material.card.MaterialCardView").getDeclaredField("cardViewHelper");
/widgets\theme\TintFloorMaterialCardView.java:66:            field.setAccessible(true);
/widgets\theme\TintFloorMaterialCardView.java:67:            Method method = Class.forName("com.google.android.material.card.MaterialCardViewHelper").getDeclaredMethod("setCardBackgroundColor", ColorStateList.class);
/widgets\theme\TintFloorMaterialCardView.java:68:            method.setAccessible(true);
/widgets\theme\TintFloorMaterialCardView.java:69:            method.invoke(field.get(this), ColorStateList.valueOf(bg));
/widgets\theme\TintFloorMaterialCardView.java:70:        } catch (NoSuchFieldException e) {
/widgets\theme\TintFloorMaterialCardView.java:71:            e.printStackTrace();
/widgets\theme\TintFloorMaterialCardView.java:72:        } catch (ClassNotFoundException e) {
/widgets\theme\TintFloorMaterialCardView.java:73:            e.printStackTrace();
/widgets\theme\TintFloorMaterialCardView.java:74:        } catch (NoSuchMethodException e) {
/widgets\theme\TintFloorMaterialCardView.java:75:            e.printStackTrace();
/widgets\theme\TintFloorMaterialCardView.java:76:        } catch (IllegalAccessException e) {
/widgets\theme\TintFloorMaterialCardView.java:77:            e.printStackTrace();
/widgets\theme\TintFloorMaterialCardView.java:78:        } catch (InvocationTargetException e) {
/widgets\theme\TintFloorMaterialCardView.java:79:            e.printStackTrace();
/widgets\theme\TintFloorMaterialCardView.java:80:        }
/widgets\theme\TintFloorMaterialCardView.java:81:        setStrokeColor(ThemeUtils.getColorById(getContext(), R.color.default_color_divider));
/widgets\theme\TintFloorMaterialCardView.java:82:        /*
/widgets\theme\TintFloorMaterialCardView.java:83:        setCardBackgroundColor(ThemeUtils.getColorById(getContext(), mBackgroundTintResId));
/widgets\theme\TintFloorMaterialCardView.java:84:        if (mStrokeColorResId != 0) {
/widgets\theme\TintFloorMaterialCardView.java:85:            setStrokeColor(ThemeUtils.getColorById(getContext(), mStrokeColorResId));
/widgets\theme\TintFloorMaterialCardView.java:86:        }
/widgets\theme\TintFloorMaterialCardView.java:87:        */
/widgets\theme\TintFloorMaterialCardView.java:88:    }
/widgets\theme\TintFloorMaterialCardView.java:89:}
/widgets\theme\TintFrameLayout.java:1:package com.huanchengfly.tieba.post.widgets.theme;
/widgets\theme\TintFrameLayout.java:3:import android.annotation.SuppressLint;
/widgets\theme\TintFrameLayout.java:4:import android.content.Context;
/widgets\theme\TintFrameLayout.java:5:import android.content.res.ColorStateList;
/widgets\theme\TintFrameLayout.java:6:import android.content.res.TypedArray;
/widgets\theme\TintFrameLayout.java:7:import android.util.AttributeSet;
/widgets\theme\TintFrameLayout.java:8:import android.widget.FrameLayout;
/widgets\theme\TintFrameLayout.java:10:import androidx.annotation.NonNull;
/widgets\theme\TintFrameLayout.java:11:import androidx.annotation.Nullable;
/widgets\theme\TintFrameLayout.java:13:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/widgets\theme\TintFrameLayout.java:14:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/widgets\theme\TintFrameLayout.java:15:import com.huanchengfly.tieba.post.R;
/widgets\theme\TintFrameLayout.java:17:@SuppressLint("CustomViewStyleable")
/widgets\theme\TintFrameLayout.java:18:public class TintFrameLayout extends FrameLayout implements Tintable {
/widgets\theme\TintFrameLayout.java:19:    private int mBackgroundTintResId;
/widgets\theme\TintFrameLayout.java:21:    public TintFrameLayout(@NonNull Context context) {
/widgets\theme\TintFrameLayout.java:22:        this(context, null);
/widgets\theme\TintFrameLayout.java:23:    }
/widgets\theme\TintFrameLayout.java:25:    public TintFrameLayout(@NonNull Context context, @Nullable AttributeSet attrs) {
/widgets\theme\TintFrameLayout.java:26:        this(context, attrs, 0);
/widgets\theme\TintFrameLayout.java:27:    }
/widgets\theme\TintFrameLayout.java:29:    public TintFrameLayout(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
/widgets\theme\TintFrameLayout.java:30:        super(context, attrs, defStyleAttr);
/widgets\theme\TintFrameLayout.java:31:        if (isInEditMode()) {
/widgets\theme\TintFrameLayout.java:32:            return;
/widgets\theme\TintFrameLayout.java:33:        }
/widgets\theme\TintFrameLayout.java:34:        if (attrs == null) {
/widgets\theme\TintFrameLayout.java:35:            mBackgroundTintResId = 0;
/widgets\theme\TintFrameLayout.java:36:            applyTintColor();
/widgets\theme\TintFrameLayout.java:37:            return;
/widgets\theme\TintFrameLayout.java:38:        }
/widgets\theme\TintFrameLayout.java:39:        TypedArray array = getContext().obtainStyledAttributes(attrs, R.styleable.TintView, defStyleAttr, 0);
/widgets\theme\TintFrameLayout.java:40:        mBackgroundTintResId = array.getResourceId(R.styleable.TintView_backgroundTint, 0);
/widgets\theme\TintFrameLayout.java:41:        array.recycle();
/widgets\theme\TintFrameLayout.java:42:        applyTintColor();
/widgets\theme\TintFrameLayout.java:43:    }
/widgets\theme\TintFrameLayout.java:45:    @Override
/widgets\theme\TintFrameLayout.java:46:    public void tint() {
/widgets\theme\TintFrameLayout.java:47:        applyTintColor();
/widgets\theme\TintFrameLayout.java:48:    }
/widgets\theme\TintFrameLayout.java:50:    private void applyTintColor() {
/widgets\theme\TintFrameLayout.java:51:        if (mBackgroundTintResId != 0) {
/widgets\theme\TintFrameLayout.java:52:            if (getBackground() == null) {
/widgets\theme\TintFrameLayout.java:53:                setBackgroundColor(ThemeUtils.getColorById(getContext(), mBackgroundTintResId));
/widgets\theme\TintFrameLayout.java:54:            } else {
/widgets\theme\TintFrameLayout.java:55:                setBackgroundTintList(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mBackgroundTintResId)));
/widgets\theme\TintFrameLayout.java:56:            }
/widgets\theme\TintFrameLayout.java:57:        }
/widgets\theme\TintFrameLayout.java:58:    }
/widgets\theme\TintFrameLayout.java:59:}
/widgets\theme\TintImageView.java:1:package com.huanchengfly.tieba.post.widgets.theme;
/widgets\theme\TintImageView.java:3:import android.annotation.SuppressLint;
/widgets\theme\TintImageView.java:4:import android.content.Context;
/widgets\theme\TintImageView.java:5:import android.content.res.ColorStateList;
/widgets\theme\TintImageView.java:6:import android.content.res.TypedArray;
/widgets\theme\TintImageView.java:7:import android.util.AttributeSet;
/widgets\theme\TintImageView.java:9:import androidx.appcompat.widget.AppCompatImageView;
/widgets\theme\TintImageView.java:11:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/widgets\theme\TintImageView.java:12:import com.huanchengfly.tieba.post.ui.theme.utils.ColorStateListUtils;
/widgets\theme\TintImageView.java:13:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/widgets\theme\TintImageView.java:14:import com.huanchengfly.tieba.post.R;
/widgets\theme\TintImageView.java:16:@SuppressLint("CustomViewStyleable")
/widgets\theme\TintImageView.java:17:public class TintImageView extends AppCompatImageView implements Tintable {
/widgets\theme\TintImageView.java:18:    private int mTintListResId;
/widgets\theme\TintImageView.java:19:    private int mBackgroundTintResId;
/widgets\theme\TintImageView.java:20:    private int mTintResId;
/widgets\theme\TintImageView.java:22:    public TintImageView(Context context) {
/widgets\theme\TintImageView.java:23:        this(context, null);
/widgets\theme\TintImageView.java:24:    }
/widgets\theme\TintImageView.java:26:    public TintImageView(Context context, AttributeSet attrs) {
/widgets\theme\TintImageView.java:27:        this(context, attrs, 0);
/widgets\theme\TintImageView.java:28:    }
/widgets\theme\TintImageView.java:30:    public TintImageView(Context context, AttributeSet attrs, int defStyleAttr) {
/widgets\theme\TintImageView.java:31:        super(context, attrs, defStyleAttr);
/widgets\theme\TintImageView.java:32:        if (isInEditMode()) {
/widgets\theme\TintImageView.java:33:            return;
/widgets\theme\TintImageView.java:34:        }
/widgets\theme\TintImageView.java:35:        if (attrs == null) {
/widgets\theme\TintImageView.java:36:            mBackgroundTintResId = 0;
/widgets\theme\TintImageView.java:37:            mTintResId = R.color.default_color_text;
/widgets\theme\TintImageView.java:38:            mTintListResId = 0;
/widgets\theme\TintImageView.java:39:            applyTintColor();
/widgets\theme\TintImageView.java:40:            return;
/widgets\theme\TintImageView.java:41:        }
/widgets\theme\TintImageView.java:42:        TypedArray array = getContext().obtainStyledAttributes(attrs, R.styleable.TintView, defStyleAttr, 0);
/widgets\theme\TintImageView.java:43:        mBackgroundTintResId = array.getResourceId(R.styleable.TintView_backgroundTint, 0);
/widgets\theme\TintImageView.java:44:        mTintResId = array.getResourceId(R.styleable.TintView_tint, R.color.default_color_text);
/widgets\theme\TintImageView.java:45:        mTintListResId = array.getResourceId(R.styleable.TintView_tintList, 0);
/widgets\theme\TintImageView.java:46:        array.recycle();
/widgets\theme\TintImageView.java:47:        applyTintColor();
/widgets\theme\TintImageView.java:48:    }
/widgets\theme\TintImageView.java:50:    private void applyTintColor() {
/widgets\theme\TintImageView.java:51:        if (mBackgroundTintResId != 0) {
/widgets\theme\TintImageView.java:52:            if (getBackground() == null) {
/widgets\theme\TintImageView.java:53:                setBackgroundColor(ThemeUtils.getColorById(getContext(), mBackgroundTintResId));
/widgets\theme\TintImageView.java:54:            } else {
/widgets\theme\TintImageView.java:55:                setBackgroundTintList(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mBackgroundTintResId)));
/widgets\theme\TintImageView.java:56:            }
/widgets\theme\TintImageView.java:57:        }
/widgets\theme\TintImageView.java:58:        if (mTintListResId != 0) {
/widgets\theme\TintImageView.java:59:            setImageTintList(ColorStateListUtils.createColorStateList(getContext(), mTintListResId));
/widgets\theme\TintImageView.java:60:        } else {
/widgets\theme\TintImageView.java:61:            setImageTintList(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mTintResId)));
/widgets\theme\TintImageView.java:62:        }
/widgets\theme\TintImageView.java:63:    }
/widgets\theme\TintImageView.java:65:    @Override
/widgets\theme\TintImageView.java:66:    public void tint() {
/widgets\theme\TintImageView.java:67:        applyTintColor();
/widgets\theme\TintImageView.java:68:    }
/widgets\theme\TintImageView.java:69:}
/widgets\theme\TintLinearLayout.java:1:package com.huanchengfly.tieba.post.widgets.theme;
/widgets\theme\TintLinearLayout.java:3:import android.annotation.SuppressLint;
/widgets\theme\TintLinearLayout.java:4:import android.content.Context;
/widgets\theme\TintLinearLayout.java:5:import android.content.res.ColorStateList;
/widgets\theme\TintLinearLayout.java:6:import android.content.res.TypedArray;
/widgets\theme\TintLinearLayout.java:7:import android.util.AttributeSet;
/widgets\theme\TintLinearLayout.java:8:import android.widget.LinearLayout;
/widgets\theme\TintLinearLayout.java:10:import androidx.annotation.NonNull;
/widgets\theme\TintLinearLayout.java:11:import androidx.annotation.Nullable;
/widgets\theme\TintLinearLayout.java:13:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/widgets\theme\TintLinearLayout.java:14:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/widgets\theme\TintLinearLayout.java:15:import com.huanchengfly.tieba.post.R;
/widgets\theme\TintLinearLayout.java:17:@SuppressLint("CustomViewStyleable")
/widgets\theme\TintLinearLayout.java:18:public class TintLinearLayout extends LinearLayout implements Tintable {
/widgets\theme\TintLinearLayout.java:19:    private int mBackgroundTintResId;
/widgets\theme\TintLinearLayout.java:21:    public TintLinearLayout(@NonNull Context context) {
/widgets\theme\TintLinearLayout.java:22:        this(context, null);
/widgets\theme\TintLinearLayout.java:23:    }
/widgets\theme\TintLinearLayout.java:25:    public TintLinearLayout(@NonNull Context context, @Nullable AttributeSet attrs) {
/widgets\theme\TintLinearLayout.java:26:        this(context, attrs, 0);
/widgets\theme\TintLinearLayout.java:27:    }
/widgets\theme\TintLinearLayout.java:29:    public TintLinearLayout(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
/widgets\theme\TintLinearLayout.java:30:        super(context, attrs, defStyleAttr);
/widgets\theme\TintLinearLayout.java:31:        if (isInEditMode()) {
/widgets\theme\TintLinearLayout.java:32:            return;
/widgets\theme\TintLinearLayout.java:33:        }
/widgets\theme\TintLinearLayout.java:34:        if (attrs == null) {
/widgets\theme\TintLinearLayout.java:35:            mBackgroundTintResId = 0;
/widgets\theme\TintLinearLayout.java:36:            applyTintColor();
/widgets\theme\TintLinearLayout.java:37:            return;
/widgets\theme\TintLinearLayout.java:38:        }
/widgets\theme\TintLinearLayout.java:39:        TypedArray array = getContext().obtainStyledAttributes(attrs, R.styleable.TintView, defStyleAttr, 0);
/widgets\theme\TintLinearLayout.java:40:        mBackgroundTintResId = array.getResourceId(R.styleable.TintView_backgroundTint, 0);
/widgets\theme\TintLinearLayout.java:41:        array.recycle();
/widgets\theme\TintLinearLayout.java:42:        applyTintColor();
/widgets\theme\TintLinearLayout.java:43:    }
/widgets\theme\TintLinearLayout.java:45:    @Override
/widgets\theme\TintLinearLayout.java:46:    public void tint() {
/widgets\theme\TintLinearLayout.java:47:        applyTintColor();
/widgets\theme\TintLinearLayout.java:48:    }
/widgets\theme\TintLinearLayout.java:50:    private void applyTintColor() {
/widgets\theme\TintLinearLayout.java:51:        if (mBackgroundTintResId != 0) {
/widgets\theme\TintLinearLayout.java:52:            if (getBackground() == null) {
/widgets\theme\TintLinearLayout.java:53:                setBackgroundColor(ThemeUtils.getColorById(getContext(), mBackgroundTintResId));
/widgets\theme\TintLinearLayout.java:54:            } else {
/widgets\theme\TintLinearLayout.java:55:                setBackgroundTintList(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mBackgroundTintResId)));
/widgets\theme\TintLinearLayout.java:56:            }
/widgets\theme\TintLinearLayout.java:57:        }
/widgets\theme\TintLinearLayout.java:58:    }
/widgets\theme\TintLinearLayout.java:59:}
/widgets\theme\TintMaterialButton.java:1:package com.huanchengfly.tieba.post.widgets.theme;
/widgets\theme\TintMaterialButton.java:3:import android.content.Context;
/widgets\theme\TintMaterialButton.java:4:import android.content.res.TypedArray;
/widgets\theme\TintMaterialButton.java:5:import android.util.AttributeSet;
/widgets\theme\TintMaterialButton.java:7:import androidx.annotation.NonNull;
/widgets\theme\TintMaterialButton.java:8:import androidx.annotation.Nullable;
/widgets\theme\TintMaterialButton.java:10:import com.google.android.material.button.MaterialButton;
/widgets\theme\TintMaterialButton.java:11:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/widgets\theme\TintMaterialButton.java:12:import com.huanchengfly.tieba.post.ui.theme.utils.ColorStateListUtils;
/widgets\theme\TintMaterialButton.java:13:import com.huanchengfly.tieba.post.R;
/widgets\theme\TintMaterialButton.java:15:public class TintMaterialButton extends MaterialButton implements Tintable {
/widgets\theme\TintMaterialButton.java:16:    private int mBackgroundTintResId;
/widgets\theme\TintMaterialButton.java:17:    private int mTextColorResId;
/widgets\theme\TintMaterialButton.java:18:    private int mStrokeColorResId;
/widgets\theme\TintMaterialButton.java:20:    public TintMaterialButton(@NonNull Context context) {
/widgets\theme\TintMaterialButton.java:21:        this(context, null);
/widgets\theme\TintMaterialButton.java:22:    }
/widgets\theme\TintMaterialButton.java:24:    public TintMaterialButton(@NonNull Context context, @Nullable AttributeSet attrs) {
/widgets\theme\TintMaterialButton.java:25:        this(context, attrs, 0);
/widgets\theme\TintMaterialButton.java:26:    }
/widgets\theme\TintMaterialButton.java:28:    public TintMaterialButton(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
/widgets\theme\TintMaterialButton.java:29:        super(context, attrs, defStyleAttr);
/widgets\theme\TintMaterialButton.java:30:        if (isInEditMode()) {
/widgets\theme\TintMaterialButton.java:31:            return;
/widgets\theme\TintMaterialButton.java:32:        }
/widgets\theme\TintMaterialButton.java:33:        if (attrs == null) {
/widgets\theme\TintMaterialButton.java:34:            mBackgroundTintResId = 0;
/widgets\theme\TintMaterialButton.java:35:            mTextColorResId = 0;
/widgets\theme\TintMaterialButton.java:36:            mStrokeColorResId = 0;
/widgets\theme\TintMaterialButton.java:37:            applyTintColor();
/widgets\theme\TintMaterialButton.java:38:            return;
/widgets\theme\TintMaterialButton.java:39:        }
/widgets\theme\TintMaterialButton.java:40:        TypedArray array = getContext().obtainStyledAttributes(attrs, R.styleable.TintMaterialButton, defStyleAttr, 0);
/widgets\theme\TintMaterialButton.java:41:        mBackgroundTintResId = array.getResourceId(R.styleable.TintMaterialButton_buttonBackgroundTint, 0);
/widgets\theme\TintMaterialButton.java:42:        mTextColorResId = array.getResourceId(R.styleable.TintMaterialButton_buttonTextColor, 0);
/widgets\theme\TintMaterialButton.java:43:        mStrokeColorResId = array.getResourceId(R.styleable.TintMaterialButton_buttonStrokeColor, 0);
/widgets\theme\TintMaterialButton.java:44:        array.recycle();
/widgets\theme\TintMaterialButton.java:45:        applyTintColor();
/widgets\theme\TintMaterialButton.java:46:    }
/widgets\theme\TintMaterialButton.java:48:    @Override
/widgets\theme\TintMaterialButton.java:49:    public void tint() {
/widgets\theme\TintMaterialButton.java:50:        applyTintColor();
/widgets\theme\TintMaterialButton.java:51:    }
/widgets\theme\TintMaterialButton.java:53:    private void applyTintColor() {
/widgets\theme\TintMaterialButton.java:54:        if (mTextColorResId != 0) {
/widgets\theme\TintMaterialButton.java:55:            setTextColor(ColorStateListUtils.createColorStateList(getContext(), mTextColorResId));
/widgets\theme\TintMaterialButton.java:56:        }
/widgets\theme\TintMaterialButton.java:57:        if (mBackgroundTintResId != 0) {
/widgets\theme\TintMaterialButton.java:58:            setBackgroundTintList(ColorStateListUtils.createColorStateList(getContext(), mBackgroundTintResId));
/widgets\theme\TintMaterialButton.java:59:        }
/widgets\theme\TintMaterialButton.java:60:        if (mStrokeColorResId != 0) {
/widgets\theme\TintMaterialButton.java:61:            setStrokeColor(ColorStateListUtils.createColorStateList(getContext(), mStrokeColorResId));
/widgets\theme\TintMaterialButton.java:62:        }
/widgets\theme\TintMaterialButton.java:63:    }
/widgets\theme\TintMaterialButton.java:64:}
/widgets\theme\TintMaterialCardView.java:1:package com.huanchengfly.tieba.post.widgets.theme;
/widgets\theme\TintMaterialCardView.java:3:import android.annotation.SuppressLint;
/widgets\theme\TintMaterialCardView.java:4:import android.content.Context;
/widgets\theme\TintMaterialCardView.java:5:import android.content.res.ColorStateList;
/widgets\theme\TintMaterialCardView.java:6:import android.util.AttributeSet;
/widgets\theme\TintMaterialCardView.java:8:import androidx.annotation.NonNull;
/widgets\theme\TintMaterialCardView.java:9:import androidx.annotation.Nullable;
/widgets\theme\TintMaterialCardView.java:11:import com.google.android.material.card.MaterialCardView;
/widgets\theme\TintMaterialCardView.java:12:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/widgets\theme\TintMaterialCardView.java:13:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/widgets\theme\TintMaterialCardView.java:14:import com.huanchengfly.tieba.post.R;
/widgets\theme\TintMaterialCardView.java:16:import java.lang.reflect.Field;
/widgets\theme\TintMaterialCardView.java:17:import java.lang.reflect.InvocationTargetException;
/widgets\theme\TintMaterialCardView.java:18:import java.lang.reflect.Method;
/widgets\theme\TintMaterialCardView.java:20:@SuppressLint("CustomViewStyleable")
/widgets\theme\TintMaterialCardView.java:21:public class TintMaterialCardView extends MaterialCardView implements Tintable {
/widgets\theme\TintMaterialCardView.java:22:    private static final String TAG = "TintMaterialCardView";
/widgets\theme\TintMaterialCardView.java:23:    /*
/widgets\theme\TintMaterialCardView.java:24:    private int mBackgroundTintResId;
/widgets\theme\TintMaterialCardView.java:25:    private int mStrokeColorResId;
/widgets\theme\TintMaterialCardView.java:26:    */
/widgets\theme\TintMaterialCardView.java:28:    public TintMaterialCardView(@NonNull Context context) {
/widgets\theme\TintMaterialCardView.java:29:        this(context, null);
/widgets\theme\TintMaterialCardView.java:30:    }
/widgets\theme\TintMaterialCardView.java:32:    public TintMaterialCardView(@NonNull Context context, @Nullable AttributeSet attrs) {
/widgets\theme\TintMaterialCardView.java:33:        this(context, attrs, 0);
/widgets\theme\TintMaterialCardView.java:34:    }
/widgets\theme\TintMaterialCardView.java:36:    public TintMaterialCardView(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
/widgets\theme\TintMaterialCardView.java:37:        super(context, attrs, defStyleAttr);
/widgets\theme\TintMaterialCardView.java:38:    /*
/widgets\theme\TintMaterialCardView.java:39:    if (isInEditMode()) {
/widgets\theme\TintMaterialCardView.java:40:        return;
/widgets\theme\TintMaterialCardView.java:41:    }
/widgets\theme\TintMaterialCardView.java:42:    if (attrs == null) {
/widgets\theme\TintMaterialCardView.java:43:        mBackgroundTintResId = R.color.default_color_card;
/widgets\theme\TintMaterialCardView.java:44:        mStrokeColorResId = 0;
/widgets\theme\TintMaterialCardView.java:45:        applyTintColor();
/widgets\theme\TintMaterialCardView.java:46:        return;
/widgets\theme\TintMaterialCardView.java:47:    }
/widgets\theme\TintMaterialCardView.java:48:    TypedArray array = getContext().obtainStyledAttributes(attrs, R.styleable.TintMaterialCardView, defStyleAttr, 0);
/widgets\theme\TintMaterialCardView.java:49:    mBackgroundTintResId = array.getResourceId(R.styleable.TintMaterialCardView_materialCardBackgroundTint, R.color.default_color_card);
/widgets\theme\TintMaterialCardView.java:50:    mStrokeColorResId = array.getResourceId(R.styleable.TintMaterialCardView_strokeColor, 0);
/widgets\theme\TintMaterialCardView.java:51:    array.recycle();
/widgets\theme\TintMaterialCardView.java:52:    */
/widgets\theme\TintMaterialCardView.java:53:        applyTintColor();
/widgets\theme\TintMaterialCardView.java:54:    }
/widgets\theme\TintMaterialCardView.java:56:    @Override
/widgets\theme\TintMaterialCardView.java:57:    public void tint() {
/widgets\theme\TintMaterialCardView.java:58:        applyTintColor();
/widgets\theme\TintMaterialCardView.java:59:    }
/widgets\theme\TintMaterialCardView.java:61:    private void applyTintColor() {
/widgets\theme\TintMaterialCardView.java:62:        //int bg = ThemeUtils.getColorById(getContext(), mBackgroundTintResId);
/widgets\theme\TintMaterialCardView.java:63:        int bg = ThemeUtils.getColorById(getContext(), R.color.default_color_card);
/widgets\theme\TintMaterialCardView.java:64:        try {
/widgets\theme\TintMaterialCardView.java:65:            Field field = Class.forName("com.google.android.material.card.MaterialCardView").getDeclaredField("cardViewHelper");
/widgets\theme\TintMaterialCardView.java:66:            field.setAccessible(true);
/widgets\theme\TintMaterialCardView.java:67:            Method method = Class.forName("com.google.android.material.card.MaterialCardViewHelper").getDeclaredMethod("setCardBackgroundColor", ColorStateList.class);
/widgets\theme\TintMaterialCardView.java:68:            method.setAccessible(true);
/widgets\theme\TintMaterialCardView.java:69:            method.invoke(field.get(this), ColorStateList.valueOf(bg));
/widgets\theme\TintMaterialCardView.java:70:        } catch (NoSuchFieldException e) {
/widgets\theme\TintMaterialCardView.java:71:            e.printStackTrace();
/widgets\theme\TintMaterialCardView.java:72:        } catch (ClassNotFoundException e) {
/widgets\theme\TintMaterialCardView.java:73:            e.printStackTrace();
/widgets\theme\TintMaterialCardView.java:74:        } catch (NoSuchMethodException e) {
/widgets\theme\TintMaterialCardView.java:75:            e.printStackTrace();
/widgets\theme\TintMaterialCardView.java:76:        } catch (IllegalAccessException e) {
/widgets\theme\TintMaterialCardView.java:77:            e.printStackTrace();
/widgets\theme\TintMaterialCardView.java:78:        } catch (InvocationTargetException e) {
/widgets\theme\TintMaterialCardView.java:79:            e.printStackTrace();
/widgets\theme\TintMaterialCardView.java:80:        }
/widgets\theme\TintMaterialCardView.java:81:        setStrokeColor(ThemeUtils.getColorById(getContext(), R.color.default_color_divider));
/widgets\theme\TintMaterialCardView.java:82:        /*
/widgets\theme\TintMaterialCardView.java:83:        setCardBackgroundColor(ThemeUtils.getColorById(getContext(), mBackgroundTintResId));
/widgets\theme\TintMaterialCardView.java:84:        if (mStrokeColorResId != 0) {
/widgets\theme\TintMaterialCardView.java:85:            setStrokeColor(ThemeUtils.getColorById(getContext(), mStrokeColorResId));
/widgets\theme\TintMaterialCardView.java:86:        }
/widgets\theme\TintMaterialCardView.java:87:        */
/widgets\theme\TintMaterialCardView.java:88:    }
/widgets\theme\TintMaterialCardView.java:89:}
/widgets\theme\TintMySpannableTextView.java:1:package com.huanchengfly.tieba.post.widgets.theme;
/widgets\theme\TintMySpannableTextView.java:3:import android.annotation.SuppressLint;
/widgets\theme\TintMySpannableTextView.java:4:import android.content.Context;
/widgets\theme\TintMySpannableTextView.java:5:import android.content.res.ColorStateList;
/widgets\theme\TintMySpannableTextView.java:6:import android.content.res.TypedArray;
/widgets\theme\TintMySpannableTextView.java:7:import android.util.AttributeSet;
/widgets\theme\TintMySpannableTextView.java:9:import com.huanchengfly.tieba.post.R;
/widgets\theme\TintMySpannableTextView.java:10:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/widgets\theme\TintMySpannableTextView.java:11:import com.huanchengfly.tieba.post.ui.theme.utils.ColorStateListUtils;
/widgets\theme\TintMySpannableTextView.java:12:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/widgets\theme\TintMySpannableTextView.java:13:import com.huanchengfly.tieba.post.widgets.MySpannableTextView;
/widgets\theme\TintMySpannableTextView.java:15:@SuppressLint("CustomViewStyleable")
/widgets\theme\TintMySpannableTextView.java:16:public class TintMySpannableTextView extends MySpannableTextView implements Tintable {
/widgets\theme\TintMySpannableTextView.java:17:    private int mBackgroundTintResId;
/widgets\theme\TintMySpannableTextView.java:18:    private int mTintResId;
/widgets\theme\TintMySpannableTextView.java:19:    private int mTintListResId;
/widgets\theme\TintMySpannableTextView.java:21:    public TintMySpannableTextView(Context context) {
/widgets\theme\TintMySpannableTextView.java:22:        this(context, null);
/widgets\theme\TintMySpannableTextView.java:23:    }
/widgets\theme\TintMySpannableTextView.java:25:    public TintMySpannableTextView(Context context, AttributeSet attrs) {
/widgets\theme\TintMySpannableTextView.java:26:        this(context, attrs, 0);
/widgets\theme\TintMySpannableTextView.java:27:    }
/widgets\theme\TintMySpannableTextView.java:29:    public TintMySpannableTextView(Context context, AttributeSet attrs, int defStyleAttr) {
/widgets\theme\TintMySpannableTextView.java:30:        super(context, attrs, defStyleAttr);
/widgets\theme\TintMySpannableTextView.java:31:        if (isInEditMode()) {
/widgets\theme\TintMySpannableTextView.java:32:            return;
/widgets\theme\TintMySpannableTextView.java:33:        }
/widgets\theme\TintMySpannableTextView.java:34:        if (attrs == null) {
/widgets\theme\TintMySpannableTextView.java:35:            mBackgroundTintResId = 0;
/widgets\theme\TintMySpannableTextView.java:36:            mTintResId = 0;
/widgets\theme\TintMySpannableTextView.java:37:            mTintListResId = 0;
/widgets\theme\TintMySpannableTextView.java:38:            applyTintColor();
/widgets\theme\TintMySpannableTextView.java:39:            return;
/widgets\theme\TintMySpannableTextView.java:40:        }
/widgets\theme\TintMySpannableTextView.java:41:        TypedArray array = getContext().obtainStyledAttributes(attrs, R.styleable.TintView, defStyleAttr, 0);
/widgets\theme\TintMySpannableTextView.java:42:        mBackgroundTintResId = array.getResourceId(R.styleable.TintView_backgroundTint, 0);
/widgets\theme\TintMySpannableTextView.java:43:        mTintResId = array.getResourceId(R.styleable.TintView_tint, 0);
/widgets\theme\TintMySpannableTextView.java:44:        mTintListResId = array.getResourceId(R.styleable.TintView_tintList, 0);
/widgets\theme\TintMySpannableTextView.java:45:        array.recycle();
/widgets\theme\TintMySpannableTextView.java:46:        applyTintColor();
/widgets\theme\TintMySpannableTextView.java:47:    }
/widgets\theme\TintMySpannableTextView.java:49:    public void setBackgroundTintResId(int mBackgroundTintResId) {
/widgets\theme\TintMySpannableTextView.java:50:        this.mBackgroundTintResId = mBackgroundTintResId;
/widgets\theme\TintMySpannableTextView.java:51:        applyTintColor();
/widgets\theme\TintMySpannableTextView.java:52:    }
/widgets\theme\TintMySpannableTextView.java:54:    public void setTintResId(int mTintResId) {
/widgets\theme\TintMySpannableTextView.java:55:        this.mTintResId = mTintResId;
/widgets\theme\TintMySpannableTextView.java:56:        applyTintColor();
/widgets\theme\TintMySpannableTextView.java:57:    }
/widgets\theme\TintMySpannableTextView.java:59:    private void applyTintColor() {
/widgets\theme\TintMySpannableTextView.java:60:        if (mBackgroundTintResId != 0) {
/widgets\theme\TintMySpannableTextView.java:61:            if (getBackground() == null) {
/widgets\theme\TintMySpannableTextView.java:62:                setBackgroundColor(ThemeUtils.getColorById(getContext(), mBackgroundTintResId));
/widgets\theme\TintMySpannableTextView.java:63:            } else {
/widgets\theme\TintMySpannableTextView.java:64:                setBackgroundTintList(ColorStateListUtils.createColorStateList(getContext(), mBackgroundTintResId));
/widgets\theme\TintMySpannableTextView.java:65:            }
/widgets\theme\TintMySpannableTextView.java:66:        }
/widgets\theme\TintMySpannableTextView.java:67:        if (mTintResId != 0 && mTintListResId == 0) {
/widgets\theme\TintMySpannableTextView.java:68:            setTextColor(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mTintResId)));
/widgets\theme\TintMySpannableTextView.java:69:        } else if (mTintListResId != 0) {
/widgets\theme\TintMySpannableTextView.java:70:            setTextColor(ColorStateListUtils.createColorStateList(getContext(), mTintListResId));
/widgets\theme\TintMySpannableTextView.java:71:        }
/widgets\theme\TintMySpannableTextView.java:72:    }
/widgets\theme\TintMySpannableTextView.java:74:    @Override
/widgets\theme\TintMySpannableTextView.java:75:    public void tint() {
/widgets\theme\TintMySpannableTextView.java:76:        applyTintColor();
/widgets\theme\TintMySpannableTextView.java:77:    }
/widgets\theme\TintMySpannableTextView.java:78:}
/widgets\theme\TintNavigationView.java:1:package com.huanchengfly.tieba.post.widgets.theme;
/widgets\theme\TintNavigationView.java:3:import android.content.Context;
/widgets\theme\TintNavigationView.java:4:import android.content.res.ColorStateList;
/widgets\theme\TintNavigationView.java:5:import android.content.res.TypedArray;
/widgets\theme\TintNavigationView.java:6:import android.util.AttributeSet;
/widgets\theme\TintNavigationView.java:8:import com.google.android.material.navigation.NavigationView;
/widgets\theme\TintNavigationView.java:9:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/widgets\theme\TintNavigationView.java:10:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/widgets\theme\TintNavigationView.java:11:import com.huanchengfly.tieba.post.R;
/widgets\theme\TintNavigationView.java:13:public class TintNavigationView extends NavigationView implements Tintable {
/widgets\theme\TintNavigationView.java:14:    private int mBackgroundTintResId;
/widgets\theme\TintNavigationView.java:15:    private int mItemIconTintResId;
/widgets\theme\TintNavigationView.java:16:    private int mItemTextTintResId;
/widgets\theme\TintNavigationView.java:18:    public TintNavigationView(Context context) {
/widgets\theme\TintNavigationView.java:19:        this(context, null);
/widgets\theme\TintNavigationView.java:20:    }
/widgets\theme\TintNavigationView.java:22:    public TintNavigationView(Context context, AttributeSet attrs) {
/widgets\theme\TintNavigationView.java:23:        this(context, attrs, 0);
/widgets\theme\TintNavigationView.java:24:    }
/widgets\theme\TintNavigationView.java:26:    public TintNavigationView(Context context, AttributeSet attrs, int defStyleAttr) {
/widgets\theme\TintNavigationView.java:27:        super(context, attrs, defStyleAttr);
/widgets\theme\TintNavigationView.java:28:        if (isInEditMode()) {
/widgets\theme\TintNavigationView.java:29:            return;
/widgets\theme\TintNavigationView.java:30:        }
/widgets\theme\TintNavigationView.java:31:        if (attrs == null) {
/widgets\theme\TintNavigationView.java:32:            mBackgroundTintResId = R.color.transparent;
/widgets\theme\TintNavigationView.java:33:            mItemIconTintResId = 0;
/widgets\theme\TintNavigationView.java:34:            mItemTextTintResId = 0;
/widgets\theme\TintNavigationView.java:35:            applyTintColor();
/widgets\theme\TintNavigationView.java:36:            return;
/widgets\theme\TintNavigationView.java:37:        }
/widgets\theme\TintNavigationView.java:38:        TypedArray array = getContext().obtainStyledAttributes(attrs, R.styleable.TintNavigationView, defStyleAttr, 0);
/widgets\theme\TintNavigationView.java:39:        mBackgroundTintResId = array.getResourceId(R.styleable.TintNavigationView_navigationBackgroundTint, R.color.transparent);
/widgets\theme\TintNavigationView.java:40:        mItemIconTintResId = array.getResourceId(R.styleable.TintNavigationView_itemIconTint, 0);
/widgets\theme\TintNavigationView.java:41:        mItemTextTintResId = array.getResourceId(R.styleable.TintNavigationView_itemTextTint, 0);
/widgets\theme\TintNavigationView.java:42:        array.recycle();
/widgets\theme\TintNavigationView.java:43:        applyTintColor();
/widgets\theme\TintNavigationView.java:44:    }
/widgets\theme\TintNavigationView.java:46:    private void applyTintColor() {
/widgets\theme\TintNavigationView.java:47:        if (getBackground() == null) {
/widgets\theme\TintNavigationView.java:48:            setBackgroundColor(ThemeUtils.getColorById(getContext(), mBackgroundTintResId));
/widgets\theme\TintNavigationView.java:49:        } else {
/widgets\theme\TintNavigationView.java:50:            setBackgroundTintList(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mBackgroundTintResId)));
/widgets\theme\TintNavigationView.java:51:        }
/widgets\theme\TintNavigationView.java:52:        if (mItemIconTintResId != 0) {
/widgets\theme\TintNavigationView.java:53:            setItemIconTintList(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mItemIconTintResId)));
/widgets\theme\TintNavigationView.java:54:        } else {
/widgets\theme\TintNavigationView.java:55:            setItemIconTintList(null);
/widgets\theme\TintNavigationView.java:56:        }
/widgets\theme\TintNavigationView.java:57:        if (mItemTextTintResId != 0) {
/widgets\theme\TintNavigationView.java:58:            setItemTextColor(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mItemTextTintResId)));
/widgets\theme\TintNavigationView.java:59:        } else {
/widgets\theme\TintNavigationView.java:60:            setItemTextColor(null);
/widgets\theme\TintNavigationView.java:61:        }
/widgets\theme\TintNavigationView.java:62:    }
/widgets\theme\TintNavigationView.java:64:    @Override
/widgets\theme\TintNavigationView.java:65:    public void tint() {
/widgets\theme\TintNavigationView.java:66:        applyTintColor();
/widgets\theme\TintNavigationView.java:67:    }
/widgets\theme\TintNavigationView.java:68:}
/widgets\theme\TintPreferenceImageView.java:1:package com.huanchengfly.tieba.post.widgets.theme;
/widgets\theme\TintPreferenceImageView.java:3:import android.annotation.SuppressLint;
/widgets\theme\TintPreferenceImageView.java:4:import android.content.Context;
/widgets\theme\TintPreferenceImageView.java:5:import android.content.res.ColorStateList;
/widgets\theme\TintPreferenceImageView.java:6:import android.content.res.TypedArray;
/widgets\theme\TintPreferenceImageView.java:7:import android.util.AttributeSet;
/widgets\theme\TintPreferenceImageView.java:9:import androidx.preference.internal.PreferenceImageView;
/widgets\theme\TintPreferenceImageView.java:11:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/widgets\theme\TintPreferenceImageView.java:12:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/widgets\theme\TintPreferenceImageView.java:13:import com.huanchengfly.tieba.post.R;
/widgets\theme\TintPreferenceImageView.java:15:@SuppressLint("RestrictedApi")
/widgets\theme\TintPreferenceImageView.java:16:public class TintPreferenceImageView extends PreferenceImageView implements Tintable {
/widgets\theme\TintPreferenceImageView.java:17:    private int mBackgroundTintResId;
/widgets\theme\TintPreferenceImageView.java:18:    private int mTintResId;
/widgets\theme\TintPreferenceImageView.java:20:    public TintPreferenceImageView(Context context) {
/widgets\theme\TintPreferenceImageView.java:21:        this(context, null);
/widgets\theme\TintPreferenceImageView.java:22:    }
/widgets\theme\TintPreferenceImageView.java:24:    public TintPreferenceImageView(Context context, AttributeSet attrs) {
/widgets\theme\TintPreferenceImageView.java:25:        this(context, attrs, 0);
/widgets\theme\TintPreferenceImageView.java:26:    }
/widgets\theme\TintPreferenceImageView.java:28:    public TintPreferenceImageView(Context context, AttributeSet attrs, int defStyleAttr) {
/widgets\theme\TintPreferenceImageView.java:29:        super(context, attrs, defStyleAttr);
/widgets\theme\TintPreferenceImageView.java:30:        if (isInEditMode()) {
/widgets\theme\TintPreferenceImageView.java:31:            return;
/widgets\theme\TintPreferenceImageView.java:32:        }
/widgets\theme\TintPreferenceImageView.java:33:        if (attrs == null) {
/widgets\theme\TintPreferenceImageView.java:34:            mBackgroundTintResId = R.color.transparent;
/widgets\theme\TintPreferenceImageView.java:35:            mTintResId = R.color.default_color_text;
/widgets\theme\TintPreferenceImageView.java:36:            applyTintColor();
/widgets\theme\TintPreferenceImageView.java:37:            return;
/widgets\theme\TintPreferenceImageView.java:38:        }
/widgets\theme\TintPreferenceImageView.java:39:        TypedArray array = getContext().obtainStyledAttributes(attrs, R.styleable.TintView, defStyleAttr, 0);
/widgets\theme\TintPreferenceImageView.java:40:        mBackgroundTintResId = array.getResourceId(R.styleable.TintView_backgroundTint, R.color.transparent);
/widgets\theme\TintPreferenceImageView.java:41:        mTintResId = array.getResourceId(R.styleable.TintView_tint, R.color.default_color_text);
/widgets\theme\TintPreferenceImageView.java:42:        array.recycle();
/widgets\theme\TintPreferenceImageView.java:43:        applyTintColor();
/widgets\theme\TintPreferenceImageView.java:44:    }
/widgets\theme\TintPreferenceImageView.java:46:    @Override
/widgets\theme\TintPreferenceImageView.java:47:    public void tint() {
/widgets\theme\TintPreferenceImageView.java:48:        applyTintColor();
/widgets\theme\TintPreferenceImageView.java:49:    }
/widgets\theme\TintPreferenceImageView.java:51:    private void applyTintColor() {
/widgets\theme\TintPreferenceImageView.java:52:        if (getBackground() == null) {
/widgets\theme\TintPreferenceImageView.java:53:            setBackgroundColor(ThemeUtils.getColorById(getContext(), mBackgroundTintResId));
/widgets\theme\TintPreferenceImageView.java:54:        } else {
/widgets\theme\TintPreferenceImageView.java:55:            setBackgroundTintList(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mBackgroundTintResId)));
/widgets\theme\TintPreferenceImageView.java:56:        }
/widgets\theme\TintPreferenceImageView.java:57:        setImageTintList(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mTintResId)));
/widgets\theme\TintPreferenceImageView.java:58:    }
/widgets\theme\TintPreferenceImageView.java:59:}
/widgets\theme\TintProgressBar.java:1:package com.huanchengfly.tieba.post.widgets.theme;
/widgets\theme\TintProgressBar.java:3:import android.annotation.SuppressLint;
/widgets\theme\TintProgressBar.java:4:import android.content.Context;
/widgets\theme\TintProgressBar.java:5:import android.content.res.ColorStateList;
/widgets\theme\TintProgressBar.java:6:import android.content.res.TypedArray;
/widgets\theme\TintProgressBar.java:7:import android.util.AttributeSet;
/widgets\theme\TintProgressBar.java:9:import androidx.annotation.NonNull;
/widgets\theme\TintProgressBar.java:10:import androidx.annotation.Nullable;
/widgets\theme\TintProgressBar.java:11:import androidx.core.widget.ContentLoadingProgressBar;
/widgets\theme\TintProgressBar.java:13:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/widgets\theme\TintProgressBar.java:14:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/widgets\theme\TintProgressBar.java:15:import com.huanchengfly.tieba.post.R;
/widgets\theme\TintProgressBar.java:17:@SuppressLint("CustomViewStyleable")
/widgets\theme\TintProgressBar.java:18:public class TintProgressBar extends ContentLoadingProgressBar implements Tintable {
/widgets\theme\TintProgressBar.java:19:    private int mBackgroundTintResId;
/widgets\theme\TintProgressBar.java:20:    private int mProgressTintResId;
/widgets\theme\TintProgressBar.java:21:    private int mProgressBackgroundTintResId;
/widgets\theme\TintProgressBar.java:23:    public TintProgressBar(@NonNull Context context) {
/widgets\theme\TintProgressBar.java:24:        this(context, null);
/widgets\theme\TintProgressBar.java:25:    }
/widgets\theme\TintProgressBar.java:27:    public TintProgressBar(@NonNull Context context, @Nullable AttributeSet attrs) {
/widgets\theme\TintProgressBar.java:28:        super(context, attrs);
/widgets\theme\TintProgressBar.java:29:        if (isInEditMode()) {
/widgets\theme\TintProgressBar.java:30:            return;
/widgets\theme\TintProgressBar.java:31:        }
/widgets\theme\TintProgressBar.java:32:        if (attrs == null) {
/widgets\theme\TintProgressBar.java:33:            mBackgroundTintResId = 0;
/widgets\theme\TintProgressBar.java:34:            mProgressTintResId = R.color.default_color_primary;
/widgets\theme\TintProgressBar.java:35:            mProgressBackgroundTintResId = 0;
/widgets\theme\TintProgressBar.java:36:            applyTintColor();
/widgets\theme\TintProgressBar.java:37:            return;
/widgets\theme\TintProgressBar.java:38:        }
/widgets\theme\TintProgressBar.java:39:        TypedArray array = getContext().obtainStyledAttributes(attrs, R.styleable.TintSeekbar, 0, 0);
/widgets\theme\TintProgressBar.java:40:        mBackgroundTintResId = array.getResourceId(R.styleable.TintSeekbar_seekbarBackgroundTint, 0);
/widgets\theme\TintProgressBar.java:41:        mProgressTintResId = array.getResourceId(R.styleable.TintSeekbar_progressTint, R.color.default_color_primary);
/widgets\theme\TintProgressBar.java:42:        mProgressBackgroundTintResId = array.getResourceId(R.styleable.TintSeekbar_progressBackgroundTint, 0);
/widgets\theme\TintProgressBar.java:43:        array.recycle();
/widgets\theme\TintProgressBar.java:44:        applyTintColor();
/widgets\theme\TintProgressBar.java:45:    }
/widgets\theme\TintProgressBar.java:47:    @Override
/widgets\theme\TintProgressBar.java:48:    public void tint() {
/widgets\theme\TintProgressBar.java:49:        applyTintColor();
/widgets\theme\TintProgressBar.java:50:    }
/widgets\theme\TintProgressBar.java:52:    private void applyTintColor() {
/widgets\theme\TintProgressBar.java:53:        if (mBackgroundTintResId != 0) {
/widgets\theme\TintProgressBar.java:54:            if (getBackground() == null) {
/widgets\theme\TintProgressBar.java:55:                setBackgroundColor(ThemeUtils.getColorById(getContext(), mBackgroundTintResId));
/widgets\theme\TintProgressBar.java:56:            } else {
/widgets\theme\TintProgressBar.java:57:                setBackgroundTintList(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mBackgroundTintResId)));
/widgets\theme\TintProgressBar.java:58:            }
/widgets\theme\TintProgressBar.java:59:        }
/widgets\theme\TintProgressBar.java:60:        setProgressTintList(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mProgressTintResId)));
/widgets\theme\TintProgressBar.java:61:        setIndeterminateTintList(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mProgressTintResId)));
/widgets\theme\TintProgressBar.java:62:        if (mProgressBackgroundTintResId != 0) {
/widgets\theme\TintProgressBar.java:63:            setProgressBackgroundTintList(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mProgressBackgroundTintResId)));
/widgets\theme\TintProgressBar.java:64:        }
/widgets\theme\TintProgressBar.java:65:    }
/widgets\theme\TintProgressBar.java:67:    public TintProgressBar setBackgroundTintResId(int backgroundTintResId) {
/widgets\theme\TintProgressBar.java:68:        this.mBackgroundTintResId = backgroundTintResId;
/widgets\theme\TintProgressBar.java:69:        tint();
/widgets\theme\TintProgressBar.java:70:        return this;
/widgets\theme\TintProgressBar.java:71:    }
/widgets\theme\TintProgressBar.java:73:    public TintProgressBar setProgressTintResId(int progressTintResId) {
/widgets\theme\TintProgressBar.java:74:        this.mProgressTintResId = progressTintResId;
/widgets\theme\TintProgressBar.java:75:        tint();
/widgets\theme\TintProgressBar.java:76:        return this;
/widgets\theme\TintProgressBar.java:77:    }
/widgets\theme\TintProgressBar.java:79:    public TintProgressBar setProgressBackgroundTintResId(int progressBackgroundTintResId) {
/widgets\theme\TintProgressBar.java:80:        this.mProgressBackgroundTintResId = progressBackgroundTintResId;
/widgets\theme\TintProgressBar.java:81:        tint();
/widgets\theme\TintProgressBar.java:82:        return this;
/widgets\theme\TintProgressBar.java:83:    }
/widgets\theme\TintProgressBar.java:84:}
/widgets\theme\TintRelativeLayout.java:1:package com.huanchengfly.tieba.post.widgets.theme;
/widgets\theme\TintRelativeLayout.java:3:import android.annotation.SuppressLint;
/widgets\theme\TintRelativeLayout.java:4:import android.content.Context;
/widgets\theme\TintRelativeLayout.java:5:import android.content.res.ColorStateList;
/widgets\theme\TintRelativeLayout.java:6:import android.content.res.TypedArray;
/widgets\theme\TintRelativeLayout.java:7:import android.util.AttributeSet;
/widgets\theme\TintRelativeLayout.java:8:import android.widget.RelativeLayout;
/widgets\theme\TintRelativeLayout.java:10:import androidx.annotation.NonNull;
/widgets\theme\TintRelativeLayout.java:11:import androidx.annotation.Nullable;
/widgets\theme\TintRelativeLayout.java:13:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/widgets\theme\TintRelativeLayout.java:14:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/widgets\theme\TintRelativeLayout.java:15:import com.huanchengfly.tieba.post.R;
/widgets\theme\TintRelativeLayout.java:17:@SuppressLint("CustomViewStyleable")
/widgets\theme\TintRelativeLayout.java:18:public class TintRelativeLayout extends RelativeLayout implements Tintable {
/widgets\theme\TintRelativeLayout.java:19:    private int mBackgroundTintResId;
/widgets\theme\TintRelativeLayout.java:21:    public TintRelativeLayout(@NonNull Context context) {
/widgets\theme\TintRelativeLayout.java:22:        this(context, null);
/widgets\theme\TintRelativeLayout.java:23:    }
/widgets\theme\TintRelativeLayout.java:25:    public TintRelativeLayout(@NonNull Context context, @Nullable AttributeSet attrs) {
/widgets\theme\TintRelativeLayout.java:26:        this(context, attrs, 0);
/widgets\theme\TintRelativeLayout.java:27:    }
/widgets\theme\TintRelativeLayout.java:29:    public TintRelativeLayout(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
/widgets\theme\TintRelativeLayout.java:30:        super(context, attrs, defStyleAttr);
/widgets\theme\TintRelativeLayout.java:31:        if (isInEditMode()) {
/widgets\theme\TintRelativeLayout.java:32:            return;
/widgets\theme\TintRelativeLayout.java:33:        }
/widgets\theme\TintRelativeLayout.java:34:        if (attrs == null) {
/widgets\theme\TintRelativeLayout.java:35:            mBackgroundTintResId = 0;
/widgets\theme\TintRelativeLayout.java:36:            applyTintColor();
/widgets\theme\TintRelativeLayout.java:37:            return;
/widgets\theme\TintRelativeLayout.java:38:        }
/widgets\theme\TintRelativeLayout.java:39:        TypedArray array = getContext().obtainStyledAttributes(attrs, R.styleable.TintView, defStyleAttr, 0);
/widgets\theme\TintRelativeLayout.java:40:        mBackgroundTintResId = array.getResourceId(R.styleable.TintView_backgroundTint, 0);
/widgets\theme\TintRelativeLayout.java:41:        array.recycle();
/widgets\theme\TintRelativeLayout.java:42:        applyTintColor();
/widgets\theme\TintRelativeLayout.java:43:    }
/widgets\theme\TintRelativeLayout.java:45:    @Override
/widgets\theme\TintRelativeLayout.java:46:    public void tint() {
/widgets\theme\TintRelativeLayout.java:47:        applyTintColor();
/widgets\theme\TintRelativeLayout.java:48:    }
/widgets\theme\TintRelativeLayout.java:50:    private void applyTintColor() {
/widgets\theme\TintRelativeLayout.java:51:        if (mBackgroundTintResId != 0) {
/widgets\theme\TintRelativeLayout.java:52:            if (getBackground() == null) {
/widgets\theme\TintRelativeLayout.java:53:                setBackgroundColor(ThemeUtils.getColorById(getContext(), mBackgroundTintResId));
/widgets\theme\TintRelativeLayout.java:54:            } else {
/widgets\theme\TintRelativeLayout.java:55:                setBackgroundTintList(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mBackgroundTintResId)));
/widgets\theme\TintRelativeLayout.java:56:            }
/widgets\theme\TintRelativeLayout.java:57:        }
/widgets\theme\TintRelativeLayout.java:58:    }
/widgets\theme\TintRelativeLayout.java:59:}
/widgets\theme\TintSearchView.java:1:package com.huanchengfly.tieba.post.widgets.theme;
/widgets\theme\TintSearchView.java:3:import android.content.Context;
/widgets\theme\TintSearchView.java:4:import android.content.res.TypedArray;
/widgets\theme\TintSearchView.java:5:import android.util.AttributeSet;
/widgets\theme\TintSearchView.java:7:import androidx.annotation.NonNull;
/widgets\theme\TintSearchView.java:8:import androidx.annotation.Nullable;
/widgets\theme\TintSearchView.java:10:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/widgets\theme\TintSearchView.java:11:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/widgets\theme\TintSearchView.java:12:import com.huanchengfly.tieba.post.R;
/widgets\theme\TintSearchView.java:13:import com.lapism.searchview.widget.SearchView;
/widgets\theme\TintSearchView.java:15:import java.lang.reflect.InvocationTargetException;
/widgets\theme\TintSearchView.java:16:import java.lang.reflect.Method;
/widgets\theme\TintSearchView.java:18:public class TintSearchView extends SearchView implements Tintable {
/widgets\theme\TintSearchView.java:19:    private int mBackgroundTintResId;
/widgets\theme\TintSearchView.java:20:    private int mSearchItemColorResId;
/widgets\theme\TintSearchView.java:21:    private int mHintColorResId;
/widgets\theme\TintSearchView.java:23:    public TintSearchView(@NonNull Context context) {
/widgets\theme\TintSearchView.java:24:        this(context, null);
/widgets\theme\TintSearchView.java:25:    }
/widgets\theme\TintSearchView.java:27:    public TintSearchView(@NonNull Context context, @Nullable AttributeSet attrs) {
/widgets\theme\TintSearchView.java:28:        this(context, attrs, 0);
/widgets\theme\TintSearchView.java:29:    }
/widgets\theme\TintSearchView.java:31:    public TintSearchView(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
/widgets\theme\TintSearchView.java:32:        this(context, attrs, defStyleAttr, 0);
/widgets\theme\TintSearchView.java:33:    }
/widgets\theme\TintSearchView.java:35:    public TintSearchView(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr, int defStyleRes) {
/widgets\theme\TintSearchView.java:36:        super(context, attrs, defStyleAttr, defStyleRes);
/widgets\theme\TintSearchView.java:37:        if (isInEditMode()) {
/widgets\theme\TintSearchView.java:38:            return;
/widgets\theme\TintSearchView.java:39:        }
/widgets\theme\TintSearchView.java:40:        if (attrs == null) {
/widgets\theme\TintSearchView.java:41:            mBackgroundTintResId = 0;
/widgets\theme\TintSearchView.java:42:            mSearchItemColorResId = 0;
/widgets\theme\TintSearchView.java:43:            mHintColorResId = 0;
/widgets\theme\TintSearchView.java:44:            return;
/widgets\theme\TintSearchView.java:45:        }
/widgets\theme\TintSearchView.java:46:        TypedArray array = getContext().obtainStyledAttributes(attrs, R.styleable.TintSearchView, defStyleAttr, 0);
/widgets\theme\TintSearchView.java:47:        mBackgroundTintResId = array.getResourceId(R.styleable.TintSearchView_searchBackground, 0);
/widgets\theme\TintSearchView.java:48:        mSearchItemColorResId = array.getResourceId(R.styleable.TintSearchView_searchItemColor, 0);
/widgets\theme\TintSearchView.java:49:        mHintColorResId = array.getResourceId(R.styleable.TintSearchView_hintColor, 0);
/widgets\theme\TintSearchView.java:50:        array.recycle();
/widgets\theme\TintSearchView.java:51:        applyTintColor();
/widgets\theme\TintSearchView.java:52:    }
/widgets\theme\TintSearchView.java:54:    private void applyTintColor() {
/widgets\theme\TintSearchView.java:55:        if (mBackgroundTintResId != 0) {
/widgets\theme\TintSearchView.java:56:            setBackgroundColor(ThemeUtils.getColorById(getContext(), mBackgroundTintResId));
/widgets\theme\TintSearchView.java:57:        }
/widgets\theme\TintSearchView.java:58:        if (mSearchItemColorResId != 0) {
/widgets\theme\TintSearchView.java:59:            setLogoColor(ThemeUtils.getColorById(getContext(), mBackgroundTintResId));
/widgets\theme\TintSearchView.java:60:            setMicColor(ThemeUtils.getColorById(getContext(), mBackgroundTintResId));
/widgets\theme\TintSearchView.java:61:            setClearColor(ThemeUtils.getColorById(getContext(), mBackgroundTintResId));
/widgets\theme\TintSearchView.java:62:            try {
/widgets\theme\TintSearchView.java:63:                Method method = Class.forName("com.lapism.searchview.widget.SearchView").getDeclaredMethod("setMenuColor", int.class);
/widgets\theme\TintSearchView.java:64:                method.setAccessible(true);
/widgets\theme\TintSearchView.java:65:                method.invoke(this, ThemeUtils.getColorById(getContext(), mBackgroundTintResId));
/widgets\theme\TintSearchView.java:66:            } catch (NoSuchMethodException e) {
/widgets\theme\TintSearchView.java:67:                e.printStackTrace();
/widgets\theme\TintSearchView.java:68:            } catch (ClassNotFoundException e) {
/widgets\theme\TintSearchView.java:69:                e.printStackTrace();
/widgets\theme\TintSearchView.java:70:            } catch (IllegalAccessException e) {
/widgets\theme\TintSearchView.java:71:                e.printStackTrace();
/widgets\theme\TintSearchView.java:72:            } catch (InvocationTargetException e) {
/widgets\theme\TintSearchView.java:73:                e.printStackTrace();
/widgets\theme\TintSearchView.java:74:            }
/widgets\theme\TintSearchView.java:75:            setTextColor(ThemeUtils.getColorById(getContext(), mBackgroundTintResId));
/widgets\theme\TintSearchView.java:76:        }
/widgets\theme\TintSearchView.java:77:        if (mHintColorResId != 0) {
/widgets\theme\TintSearchView.java:78:            setHintColor(ThemeUtils.getColorById(getContext(), mBackgroundTintResId));
/widgets\theme\TintSearchView.java:79:        }
/widgets\theme\TintSearchView.java:80:    }
/widgets\theme\TintSearchView.java:82:    @Override
/widgets\theme\TintSearchView.java:83:    public void tint() {
/widgets\theme\TintSearchView.java:85:    }
/widgets\theme\TintSearchView.java:86:}
/widgets\theme\TintSeekBar.java:1:package com.huanchengfly.tieba.post.widgets.theme;
/widgets\theme\TintSeekBar.java:3:import android.annotation.SuppressLint;
/widgets\theme\TintSeekBar.java:4:import android.content.Context;
/widgets\theme\TintSeekBar.java:5:import android.content.res.ColorStateList;
/widgets\theme\TintSeekBar.java:6:import android.content.res.TypedArray;
/widgets\theme\TintSeekBar.java:7:import android.util.AttributeSet;
/widgets\theme\TintSeekBar.java:9:import androidx.annotation.NonNull;
/widgets\theme\TintSeekBar.java:10:import androidx.annotation.Nullable;
/widgets\theme\TintSeekBar.java:11:import androidx.appcompat.widget.AppCompatSeekBar;
/widgets\theme\TintSeekBar.java:13:import com.huanchengfly.tieba.post.R;
/widgets\theme\TintSeekBar.java:14:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/widgets\theme\TintSeekBar.java:15:import com.huanchengfly.tieba.post.ui.theme.utils.ColorStateListUtils;
/widgets\theme\TintSeekBar.java:16:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/widgets\theme\TintSeekBar.java:18:@SuppressLint("CustomViewStyleable")
/widgets\theme\TintSeekBar.java:19:public class TintSeekBar extends AppCompatSeekBar implements Tintable {
/widgets\theme\TintSeekBar.java:20:    private int mBackgroundTintResId;
/widgets\theme\TintSeekBar.java:21:    private int mProgressTintResId;
/widgets\theme\TintSeekBar.java:22:    private int mProgressBackgroundTintResId;
/widgets\theme\TintSeekBar.java:23:    private int mThumbColorResId;
/widgets\theme\TintSeekBar.java:25:    public TintSeekBar(@NonNull Context context) {
/widgets\theme\TintSeekBar.java:26:        this(context, null);
/widgets\theme\TintSeekBar.java:27:    }
/widgets\theme\TintSeekBar.java:29:    public TintSeekBar(@NonNull Context context, @Nullable AttributeSet attrs) {
/widgets\theme\TintSeekBar.java:30:        this(context, attrs, 0);
/widgets\theme\TintSeekBar.java:31:    }
/widgets\theme\TintSeekBar.java:33:    public TintSeekBar(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
/widgets\theme\TintSeekBar.java:34:        super(context, attrs, defStyleAttr);
/widgets\theme\TintSeekBar.java:35:        if (isInEditMode()) {
/widgets\theme\TintSeekBar.java:36:            return;
/widgets\theme\TintSeekBar.java:37:        }
/widgets\theme\TintSeekBar.java:38:        if (attrs == null) {
/widgets\theme\TintSeekBar.java:39:            mBackgroundTintResId = 0;
/widgets\theme\TintSeekBar.java:40:            mProgressTintResId = 0;
/widgets\theme\TintSeekBar.java:41:            mProgressBackgroundTintResId = 0;
/widgets\theme\TintSeekBar.java:42:            mThumbColorResId = 0;
/widgets\theme\TintSeekBar.java:43:            applyTintColor();
/widgets\theme\TintSeekBar.java:44:            return;
/widgets\theme\TintSeekBar.java:45:        }
/widgets\theme\TintSeekBar.java:46:        TypedArray array = getContext().obtainStyledAttributes(attrs, R.styleable.TintSeekbar, defStyleAttr, 0);
/widgets\theme\TintSeekBar.java:47:        mBackgroundTintResId = array.getResourceId(R.styleable.TintSeekbar_seekbarBackgroundTint, 0);
/widgets\theme\TintSeekBar.java:48:        mProgressTintResId = array.getResourceId(R.styleable.TintSeekbar_progressTint, 0);
/widgets\theme\TintSeekBar.java:49:        mProgressBackgroundTintResId = array.getResourceId(R.styleable.TintSeekbar_progressBackgroundTint, 0);
/widgets\theme\TintSeekBar.java:50:        mThumbColorResId = array.getResourceId(R.styleable.TintSeekbar_thumbColor, 0);
/widgets\theme\TintSeekBar.java:51:        array.recycle();
/widgets\theme\TintSeekBar.java:52:        applyTintColor();
/widgets\theme\TintSeekBar.java:53:    }
/widgets\theme\TintSeekBar.java:55:    @Override
/widgets\theme\TintSeekBar.java:56:    public void tint() {
/widgets\theme\TintSeekBar.java:57:        applyTintColor();
/widgets\theme\TintSeekBar.java:58:    }
/widgets\theme\TintSeekBar.java:60:    private void applyTintColor() {
/widgets\theme\TintSeekBar.java:61:        if (mBackgroundTintResId != 0) {
/widgets\theme\TintSeekBar.java:62:            if (getBackground() == null) {
/widgets\theme\TintSeekBar.java:63:                setBackgroundColor(ThemeUtils.getColorById(getContext(), mBackgroundTintResId));
/widgets\theme\TintSeekBar.java:64:            } else {
/widgets\theme\TintSeekBar.java:65:                setBackgroundTintList(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mBackgroundTintResId)));
/widgets\theme\TintSeekBar.java:66:            }
/widgets\theme\TintSeekBar.java:67:        }
/widgets\theme\TintSeekBar.java:68:        if (mProgressTintResId != 0)
/widgets\theme\TintSeekBar.java:69:            setProgressTintList(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mProgressTintResId)));
/widgets\theme\TintSeekBar.java:70:        if (mProgressBackgroundTintResId != 0) {
/widgets\theme\TintSeekBar.java:71:            setProgressBackgroundTintList(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mProgressBackgroundTintResId)));
/widgets\theme\TintSeekBar.java:72:        }
/widgets\theme\TintSeekBar.java:73:        if (mThumbColorResId != 0) {
/widgets\theme\TintSeekBar.java:74:            setThumbTintList(ColorStateListUtils.createColorStateList(getContext(), mThumbColorResId));
/widgets\theme\TintSeekBar.java:75:        }
/widgets\theme\TintSeekBar.java:76:    }
/widgets\theme\TintSeekBar.java:77:}
/widgets\theme\TintSuperTextView.java:1:package com.huanchengfly.tieba.post.widgets.theme;
/widgets\theme\TintSuperTextView.java:3:import android.content.Context;
/widgets\theme\TintSuperTextView.java:4:import android.content.res.ColorStateList;
/widgets\theme\TintSuperTextView.java:5:import android.content.res.TypedArray;
/widgets\theme\TintSuperTextView.java:6:import android.util.AttributeSet;
/widgets\theme\TintSuperTextView.java:7:import android.util.Log;
/widgets\theme\TintSuperTextView.java:9:import com.allen.library.SuperTextView;
/widgets\theme\TintSuperTextView.java:10:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/widgets\theme\TintSuperTextView.java:11:import com.huanchengfly.tieba.post.ui.theme.utils.ColorStateListUtils;
/widgets\theme\TintSuperTextView.java:12:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/widgets\theme\TintSuperTextView.java:13:import com.huanchengfly.tieba.post.R;
/widgets\theme\TintSuperTextView.java:15:public class TintSuperTextView extends SuperTextView implements Tintable {
/widgets\theme\TintSuperTextView.java:16:    public static final String TAG = "TintSuperTextView";
/widgets\theme\TintSuperTextView.java:18:    private int mBackgroundTintResId;
/widgets\theme\TintSuperTextView.java:19:    private int mLeftTextColorResId;
/widgets\theme\TintSuperTextView.java:20:    private int mLeftTopTextColorResId;
/widgets\theme\TintSuperTextView.java:21:    private int mLeftBottomTextColorResId;
/widgets\theme\TintSuperTextView.java:22:    private int mCenterTextColorResId;
/widgets\theme\TintSuperTextView.java:23:    private int mCenterTopTextColorResId;
/widgets\theme\TintSuperTextView.java:24:    private int mCenterBottomTextColorResId;
/widgets\theme\TintSuperTextView.java:25:    private int mRightTextColorResId;
/widgets\theme\TintSuperTextView.java:26:    private int mRightTopTextColorResId;
/widgets\theme\TintSuperTextView.java:27:    private int mRightBottomTextColorResId;
/widgets\theme\TintSuperTextView.java:28:    private int mDividerLineColorResId;
/widgets\theme\TintSuperTextView.java:29:    private int mLeftIconTintResId;
/widgets\theme\TintSuperTextView.java:30:    private int mRightIconTintResId;
/widgets\theme\TintSuperTextView.java:32:    public TintSuperTextView(Context context) {
/widgets\theme\TintSuperTextView.java:33:        this(context, null);
/widgets\theme\TintSuperTextView.java:34:    }
/widgets\theme\TintSuperTextView.java:36:    public TintSuperTextView(Context context, AttributeSet attrs) {
/widgets\theme\TintSuperTextView.java:37:        this(context, attrs, 0);
/widgets\theme\TintSuperTextView.java:38:    }
/widgets\theme\TintSuperTextView.java:40:    public TintSuperTextView(Context context, AttributeSet attrs, int defStyleAttr) {
/widgets\theme\TintSuperTextView.java:41:        super(context, attrs, defStyleAttr);
/widgets\theme\TintSuperTextView.java:42:        if (isInEditMode()) {
/widgets\theme\TintSuperTextView.java:43:            return;
/widgets\theme\TintSuperTextView.java:44:        }
/widgets\theme\TintSuperTextView.java:45:        if (attrs == null) {
/widgets\theme\TintSuperTextView.java:46:            mBackgroundTintResId = 0;
/widgets\theme\TintSuperTextView.java:47:            mLeftTextColorResId = R.color.default_color_text;
/widgets\theme\TintSuperTextView.java:48:            mLeftTopTextColorResId = R.color.default_color_text;
/widgets\theme\TintSuperTextView.java:49:            mLeftBottomTextColorResId = R.color.default_color_text;
/widgets\theme\TintSuperTextView.java:50:            mCenterTextColorResId = R.color.default_color_text;
/widgets\theme\TintSuperTextView.java:51:            mCenterTopTextColorResId = R.color.default_color_text;
/widgets\theme\TintSuperTextView.java:52:            mCenterBottomTextColorResId = R.color.default_color_text;
/widgets\theme\TintSuperTextView.java:53:            mRightTextColorResId = R.color.default_color_text;
/widgets\theme\TintSuperTextView.java:54:            mRightTopTextColorResId = R.color.default_color_text;
/widgets\theme\TintSuperTextView.java:55:            mRightBottomTextColorResId = R.color.default_color_text;
/widgets\theme\TintSuperTextView.java:56:            mDividerLineColorResId = R.color.default_color_divider;
/widgets\theme\TintSuperTextView.java:57:            mLeftIconTintResId = 0;
/widgets\theme\TintSuperTextView.java:58:            mRightIconTintResId = 0;
/widgets\theme\TintSuperTextView.java:59:            applyTintColor();
/widgets\theme\TintSuperTextView.java:60:            return;
/widgets\theme\TintSuperTextView.java:61:        }
/widgets\theme\TintSuperTextView.java:62:        TypedArray array = getContext().obtainStyledAttributes(attrs, R.styleable.TintSuperTextView, defStyleAttr, 0);
/widgets\theme\TintSuperTextView.java:63:        mBackgroundTintResId = array.getResourceId(R.styleable.TintSuperTextView_superTextViewBackgroundTint, 0);
/widgets\theme\TintSuperTextView.java:64:        mLeftTextColorResId = array.getResourceId(R.styleable.TintSuperTextView_leftTextColor, R.color.transparent);
/widgets\theme\TintSuperTextView.java:65:        mLeftTopTextColorResId = array.getResourceId(R.styleable.TintSuperTextView_leftTopTextColor, R.color.transparent);
/widgets\theme\TintSuperTextView.java:66:        mLeftBottomTextColorResId = array.getResourceId(R.styleable.TintSuperTextView_leftBottomTextColor, R.color.transparent);
/widgets\theme\TintSuperTextView.java:67:        mCenterTextColorResId = array.getResourceId(R.styleable.TintSuperTextView_centerTextColor, R.color.transparent);
/widgets\theme\TintSuperTextView.java:68:        mCenterTopTextColorResId = array.getResourceId(R.styleable.TintSuperTextView_centerTopTextColor, R.color.transparent);
/widgets\theme\TintSuperTextView.java:69:        mCenterBottomTextColorResId = array.getResourceId(R.styleable.TintSuperTextView_centerBottomTextColor, R.color.transparent);
/widgets\theme\TintSuperTextView.java:70:        mRightTextColorResId = array.getResourceId(R.styleable.TintSuperTextView_rightTextColor, R.color.transparent);
/widgets\theme\TintSuperTextView.java:71:        mRightTopTextColorResId = array.getResourceId(R.styleable.TintSuperTextView_rightTopTextColor, R.color.transparent);
/widgets\theme\TintSuperTextView.java:72:        mRightBottomTextColorResId = array.getResourceId(R.styleable.TintSuperTextView_rightBottomTextColor, R.color.transparent);
/widgets\theme\TintSuperTextView.java:73:        mDividerLineColorResId = array.getResourceId(R.styleable.TintSuperTextView_dividerLineColor, R.color.transparent);
/widgets\theme\TintSuperTextView.java:74:        mLeftIconTintResId = array.getResourceId(R.styleable.TintSuperTextView_leftIconTint, 0);
/widgets\theme\TintSuperTextView.java:75:        mRightIconTintResId = array.getResourceId(R.styleable.TintSuperTextView_rightIconTint, 0);
/widgets\theme\TintSuperTextView.java:76:        array.recycle();
/widgets\theme\TintSuperTextView.java:77:        applyTintColor();
/widgets\theme\TintSuperTextView.java:78:    }
/widgets\theme\TintSuperTextView.java:80:    private void applyTintColor() {
/widgets\theme\TintSuperTextView.java:81:        if (mBackgroundTintResId != 0) {
/widgets\theme\TintSuperTextView.java:82:            setBackgroundTintList(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mBackgroundTintResId)));
/widgets\theme\TintSuperTextView.java:83:        }
/widgets\theme\TintSuperTextView.java:84:        setLeftTextColor(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mLeftTextColorResId)));
/widgets\theme\TintSuperTextView.java:85:        setLeftTopTextColor(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mLeftTopTextColorResId)));
/widgets\theme\TintSuperTextView.java:86:        setLeftBottomTextColor(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mLeftBottomTextColorResId)));
/widgets\theme\TintSuperTextView.java:87:        setCenterTextColor(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mCenterTextColorResId)));
/widgets\theme\TintSuperTextView.java:88:        setCenterTopTextColor(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mCenterTopTextColorResId)));
/widgets\theme\TintSuperTextView.java:89:        setCenterBottomTextColor(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mCenterBottomTextColorResId)));
/widgets\theme\TintSuperTextView.java:90:        setRightTextColor(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mRightTextColorResId)));
/widgets\theme\TintSuperTextView.java:91:        setRightTopTextColor(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mRightTopTextColorResId)));
/widgets\theme\TintSuperTextView.java:92:        setRightBottomTextColor(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mRightBottomTextColorResId)));
/widgets\theme\TintSuperTextView.java:93:        setBottomDividerLineColor(ThemeUtils.getColorById(getContext(), mDividerLineColorResId));
/widgets\theme\TintSuperTextView.java:94:        if (mLeftIconTintResId != 0) {
/widgets\theme\TintSuperTextView.java:95:            getLeftIconIV().setImageTintList(ColorStateListUtils.createColorStateList(getContext(), mRightTextColorResId));
/widgets\theme\TintSuperTextView.java:96:            Log.i(TAG, "applyTintColor: left");
/widgets\theme\TintSuperTextView.java:97:        }
/widgets\theme\TintSuperTextView.java:98:        if (mRightIconTintResId != 0) {
/widgets\theme\TintSuperTextView.java:99:            getRightIconIV().setImageTintList(ColorStateListUtils.createColorStateList(getContext(), mRightTextColorResId));
/widgets\theme\TintSuperTextView.java:100:            Log.i(TAG, "applyTintColor: right");
/widgets\theme\TintSuperTextView.java:101:        }
/widgets\theme\TintSuperTextView.java:102:    }
/widgets\theme\TintSuperTextView.java:104:    @Override
/widgets\theme\TintSuperTextView.java:105:    public void tint() {
/widgets\theme\TintSuperTextView.java:106:        applyTintColor();
/widgets\theme\TintSuperTextView.java:107:    }
/widgets\theme\TintSuperTextView.java:108:}
/widgets\theme\TintSwipeRefreshLayout.java:1:package com.huanchengfly.tieba.post.widgets.theme;
/widgets\theme\TintSwipeRefreshLayout.java:3:import android.content.Context;
/widgets\theme\TintSwipeRefreshLayout.java:4:import android.util.AttributeSet;
/widgets\theme\TintSwipeRefreshLayout.java:6:import androidx.annotation.NonNull;
/widgets\theme\TintSwipeRefreshLayout.java:7:import androidx.annotation.Nullable;
/widgets\theme\TintSwipeRefreshLayout.java:8:import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
/widgets\theme\TintSwipeRefreshLayout.java:10:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/widgets\theme\TintSwipeRefreshLayout.java:11:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/widgets\theme\TintSwipeRefreshLayout.java:12:import com.huanchengfly.tieba.post.R;
/widgets\theme\TintSwipeRefreshLayout.java:14:public class TintSwipeRefreshLayout extends SwipeRefreshLayout implements Tintable {
/widgets\theme\TintSwipeRefreshLayout.java:15:    public TintSwipeRefreshLayout(@NonNull Context context) {
/widgets\theme\TintSwipeRefreshLayout.java:16:        this(context, null);
/widgets\theme\TintSwipeRefreshLayout.java:17:    }
/widgets\theme\TintSwipeRefreshLayout.java:19:    public TintSwipeRefreshLayout(@NonNull Context context, @Nullable AttributeSet attrs) {
/widgets\theme\TintSwipeRefreshLayout.java:20:        super(context, attrs);
/widgets\theme\TintSwipeRefreshLayout.java:21:        if (isInEditMode()) {
/widgets\theme\TintSwipeRefreshLayout.java:22:            return;
/widgets\theme\TintSwipeRefreshLayout.java:23:        }
/widgets\theme\TintSwipeRefreshLayout.java:24:        applyTintColor();
/widgets\theme\TintSwipeRefreshLayout.java:25:    }
/widgets\theme\TintSwipeRefreshLayout.java:27:    private void applyTintColor() {
/widgets\theme\TintSwipeRefreshLayout.java:28:        setColorSchemeColors(ThemeUtils.getColorByAttr(getContext(), R.attr.colorAccent));
/widgets\theme\TintSwipeRefreshLayout.java:29:        setProgressBackgroundColorSchemeColor(ThemeUtils.getColorByAttr(getContext(), R.attr.color_swipe_refresh_layout_background));
/widgets\theme\TintSwipeRefreshLayout.java:30:    }
/widgets\theme\TintSwipeRefreshLayout.java:32:    @Override
/widgets\theme\TintSwipeRefreshLayout.java:33:    public void tint() {
/widgets\theme\TintSwipeRefreshLayout.java:34:        applyTintColor();
/widgets\theme\TintSwipeRefreshLayout.java:35:    }
/widgets\theme\TintSwipeRefreshLayout.java:36:}
/widgets\theme\TintSwitch.java:1:package com.huanchengfly.tieba.post.widgets.theme;
/widgets\theme\TintSwitch.java:3:import android.content.Context;
/widgets\theme\TintSwitch.java:4:import android.content.res.ColorStateList;
/widgets\theme\TintSwitch.java:5:import android.content.res.TypedArray;
/widgets\theme\TintSwitch.java:6:import android.util.AttributeSet;
/widgets\theme\TintSwitch.java:8:import androidx.appcompat.widget.SwitchCompat;
/widgets\theme\TintSwitch.java:10:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/widgets\theme\TintSwitch.java:11:import com.huanchengfly.tieba.post.ui.theme.utils.ColorStateListUtils;
/widgets\theme\TintSwitch.java:12:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/widgets\theme\TintSwitch.java:13:import com.huanchengfly.tieba.post.R;
/widgets\theme\TintSwitch.java:15:public class TintSwitch extends SwitchCompat implements Tintable {
/widgets\theme\TintSwitch.java:16:    private int mBackgroundTintResId;
/widgets\theme\TintSwitch.java:17:    private int mThumbTintResId;
/widgets\theme\TintSwitch.java:18:    private int mTrackTintListResId;
/widgets\theme\TintSwitch.java:20:    public TintSwitch(Context context) {
/widgets\theme\TintSwitch.java:21:        this(context, null);
/widgets\theme\TintSwitch.java:22:    }
/widgets\theme\TintSwitch.java:24:    public TintSwitch(Context context, AttributeSet attrs) {
/widgets\theme\TintSwitch.java:25:        this(context, attrs, R.style.Widget_Switch);
/widgets\theme\TintSwitch.java:26:    }
/widgets\theme\TintSwitch.java:28:    public TintSwitch(Context context, AttributeSet attrs, int defStyleAttr) {
/widgets\theme\TintSwitch.java:29:        super(context, attrs, defStyleAttr);
/widgets\theme\TintSwitch.java:30:        if (isInEditMode()) {
/widgets\theme\TintSwitch.java:31:            return;
/widgets\theme\TintSwitch.java:32:        }
/widgets\theme\TintSwitch.java:33:        if (attrs == null) {
/widgets\theme\TintSwitch.java:34:            mBackgroundTintResId = R.color.transparent;
/widgets\theme\TintSwitch.java:35:            mThumbTintResId = R.color.white;
/widgets\theme\TintSwitch.java:36:            mTrackTintListResId = R.drawable.selector_switch_track;
/widgets\theme\TintSwitch.java:37:            applyTintColor();
/widgets\theme\TintSwitch.java:38:            return;
/widgets\theme\TintSwitch.java:39:        }
/widgets\theme\TintSwitch.java:40:        TypedArray array = getContext().obtainStyledAttributes(attrs, R.styleable.TintSwitch, defStyleAttr, 0);
/widgets\theme\TintSwitch.java:41:        mBackgroundTintResId = array.getResourceId(R.styleable.TintSwitch_switchBackgroundTint, R.color.transparent);
/widgets\theme\TintSwitch.java:42:        mThumbTintResId = array.getResourceId(R.styleable.TintSwitch_thumbTint, R.color.white);
/widgets\theme\TintSwitch.java:43:        mTrackTintListResId = array.getResourceId(R.styleable.TintSwitch_trackTintList, R.drawable.selector_switch_track);
/widgets\theme\TintSwitch.java:44:        array.recycle();
/widgets\theme\TintSwitch.java:45:        applyTintColor();
/widgets\theme\TintSwitch.java:46:    }
/widgets\theme\TintSwitch.java:48:    private void applyTintColor() {
/widgets\theme\TintSwitch.java:49:        fixColor();
/widgets\theme\TintSwitch.java:50:        if (getBackground() == null) {
/widgets\theme\TintSwitch.java:51:            setBackgroundColor(ThemeUtils.getColorById(getContext(), mBackgroundTintResId));
/widgets\theme\TintSwitch.java:52:        } else {
/widgets\theme\TintSwitch.java:53:            setBackgroundTintList(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mBackgroundTintResId)));
/widgets\theme\TintSwitch.java:54:        }
/widgets\theme\TintSwitch.java:55:        setThumbTintList(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mThumbTintResId)));
/widgets\theme\TintSwitch.java:56:        setTrackTintList(ColorStateListUtils.createColorStateList(getContext(), mTrackTintListResId));
/widgets\theme\TintSwitch.java:57:    }
/widgets\theme\TintSwitch.java:59:    private void fixColor() {
/widgets\theme\TintSwitch.java:60:        if (mBackgroundTintResId == 0) {
/widgets\theme\TintSwitch.java:61:            mBackgroundTintResId = R.color.transparent;
/widgets\theme\TintSwitch.java:62:        }
/widgets\theme\TintSwitch.java:63:        if (mThumbTintResId == 0) {
/widgets\theme\TintSwitch.java:64:            mThumbTintResId = R.color.white;
/widgets\theme\TintSwitch.java:65:        }
/widgets\theme\TintSwitch.java:66:        if (mTrackTintListResId == 0) {
/widgets\theme\TintSwitch.java:67:            mTrackTintListResId = R.drawable.selector_switch_track;
/widgets\theme\TintSwitch.java:68:        }
/widgets\theme\TintSwitch.java:69:    }
/widgets\theme\TintSwitch.java:71:    @Override
/widgets\theme\TintSwitch.java:72:    public void tint() {
/widgets\theme\TintSwitch.java:73:        applyTintColor();
/widgets\theme\TintSwitch.java:74:    }
/widgets\theme\TintSwitch.java:75:}
/widgets\theme\TintTabLayout.java:1:package com.huanchengfly.tieba.post.widgets.theme;
/widgets\theme\TintTabLayout.java:3:import android.content.Context;
/widgets\theme\TintTabLayout.java:4:import android.content.res.ColorStateList;
/widgets\theme\TintTabLayout.java:5:import android.content.res.TypedArray;
/widgets\theme\TintTabLayout.java:6:import android.util.AttributeSet;
/widgets\theme\TintTabLayout.java:8:import com.google.android.material.tabs.TabLayout;
/widgets\theme\TintTabLayout.java:9:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/widgets\theme\TintTabLayout.java:10:import com.huanchengfly.tieba.post.ui.theme.utils.ColorStateListUtils;
/widgets\theme\TintTabLayout.java:11:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/widgets\theme\TintTabLayout.java:12:import com.huanchengfly.tieba.post.R;
/widgets\theme\TintTabLayout.java:14:public class TintTabLayout extends TabLayout implements Tintable {
/widgets\theme\TintTabLayout.java:15:    private int mBackgroundTintResId;
/widgets\theme\TintTabLayout.java:16:    private int mTabTextColorResId;
/widgets\theme\TintTabLayout.java:17:    private int mTabIconTintResId;
/widgets\theme\TintTabLayout.java:18:    private int mTabSelectedTextColorResId;
/widgets\theme\TintTabLayout.java:20:    public TintTabLayout(Context context) {
/widgets\theme\TintTabLayout.java:21:        this(context, null);
/widgets\theme\TintTabLayout.java:22:    }
/widgets\theme\TintTabLayout.java:24:    public TintTabLayout(Context context, AttributeSet attrs) {
/widgets\theme\TintTabLayout.java:25:        this(context, attrs, 0);
/widgets\theme\TintTabLayout.java:26:    }
/widgets\theme\TintTabLayout.java:28:    public TintTabLayout(Context context, AttributeSet attrs, int defStyleAttr) {
/widgets\theme\TintTabLayout.java:29:        super(context, attrs, defStyleAttr);
/widgets\theme\TintTabLayout.java:30:        if (isInEditMode()) {
/widgets\theme\TintTabLayout.java:31:            return;
/widgets\theme\TintTabLayout.java:32:        }
/widgets\theme\TintTabLayout.java:33:        if (attrs == null) {
/widgets\theme\TintTabLayout.java:34:            mBackgroundTintResId = R.color.default_color_background;
/widgets\theme\TintTabLayout.java:35:            mTabTextColorResId = R.color.default_color_text_secondary;
/widgets\theme\TintTabLayout.java:36:            mTabIconTintResId = 0;
/widgets\theme\TintTabLayout.java:37:            mTabSelectedTextColorResId = R.color.default_color_primary;
/widgets\theme\TintTabLayout.java:38:            applyTintColor();
/widgets\theme\TintTabLayout.java:39:            return;
/widgets\theme\TintTabLayout.java:40:        }
/widgets\theme\TintTabLayout.java:41:        TypedArray array = getContext().obtainStyledAttributes(attrs, R.styleable.TintTabLayout, defStyleAttr, 0);
/widgets\theme\TintTabLayout.java:42:        mBackgroundTintResId = array.getResourceId(R.styleable.TintTabLayout_layoutBackground, R.color.default_color_background);
/widgets\theme\TintTabLayout.java:43:        mTabTextColorResId = array.getResourceId(R.styleable.TintTabLayout_tabTextColor, R.color.default_color_text_secondary);
/widgets\theme\TintTabLayout.java:44:        mTabIconTintResId = array.getResourceId(R.styleable.TintTabLayout_tabIconTint, 0);
/widgets\theme\TintTabLayout.java:45:        mTabSelectedTextColorResId = array.getResourceId(R.styleable.TintTabLayout_tabSelectedTextColor, R.color.default_color_primary);
/widgets\theme\TintTabLayout.java:46:        array.recycle();
/widgets\theme\TintTabLayout.java:47:        applyTintColor();
/widgets\theme\TintTabLayout.java:48:    }
/widgets\theme\TintTabLayout.java:50:    private void applyTintColor() {
/widgets\theme\TintTabLayout.java:51:        if (getBackground() == null) {
/widgets\theme\TintTabLayout.java:52:            setBackgroundColor(ThemeUtils.getColorById(getContext(), mBackgroundTintResId));
/widgets\theme\TintTabLayout.java:53:        } else {
/widgets\theme\TintTabLayout.java:54:            setBackgroundTintList(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mBackgroundTintResId)));
/widgets\theme\TintTabLayout.java:55:        }
/widgets\theme\TintTabLayout.java:56:        if (mTabIconTintResId != 0) {
/widgets\theme\TintTabLayout.java:57:            setTabIconTint(ColorStateListUtils.createColorStateList(getContext(), mTabIconTintResId));
/widgets\theme\TintTabLayout.java:58:        }
/widgets\theme\TintTabLayout.java:59:        setTabTextColors(ThemeUtils.getColorById(getContext(), mTabTextColorResId), ThemeUtils.getColorById(getContext(), mTabSelectedTextColorResId));
/widgets\theme\TintTabLayout.java:60:        setSelectedTabIndicatorColor(ThemeUtils.getColorById(getContext(), mTabSelectedTextColorResId));
/widgets\theme\TintTabLayout.java:61:    }
/widgets\theme\TintTabLayout.java:63:    @Override
/widgets\theme\TintTabLayout.java:64:    public void tint() {
/widgets\theme\TintTabLayout.java:65:        applyTintColor();
/widgets\theme\TintTabLayout.java:66:    }
/widgets\theme\TintTabLayout.java:67:}
/widgets\theme\TintTextInputLayout.java:1:package com.huanchengfly.tieba.post.widgets.theme;
/widgets\theme\TintTextInputLayout.java:3:import android.content.Context;
/widgets\theme\TintTextInputLayout.java:4:import android.content.res.TypedArray;
/widgets\theme\TintTextInputLayout.java:5:import android.util.AttributeSet;
/widgets\theme\TintTextInputLayout.java:7:import androidx.annotation.NonNull;
/widgets\theme\TintTextInputLayout.java:8:import androidx.annotation.Nullable;
/widgets\theme\TintTextInputLayout.java:10:import com.google.android.material.textfield.TextInputLayout;
/widgets\theme\TintTextInputLayout.java:11:import com.huanchengfly.tieba.post.R;
/widgets\theme\TintTextInputLayout.java:12:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/widgets\theme\TintTextInputLayout.java:13:import com.huanchengfly.tieba.post.ui.theme.utils.ColorStateListUtils;
/widgets\theme\TintTextInputLayout.java:15:import java.util.Objects;
/widgets\theme\TintTextInputLayout.java:17:public class TintTextInputLayout extends TextInputLayout implements Tintable {
/widgets\theme\TintTextInputLayout.java:18:    private int mBoxStrokeColorResId;
/widgets\theme\TintTextInputLayout.java:19:    private int mHintTextColorResId;
/widgets\theme\TintTextInputLayout.java:20:    private int mPlaceholderTextColorResId;
/widgets\theme\TintTextInputLayout.java:22:    public TintTextInputLayout(@NonNull Context context) {
/widgets\theme\TintTextInputLayout.java:23:        super(context);
/widgets\theme\TintTextInputLayout.java:24:        init(context, null, 0);
/widgets\theme\TintTextInputLayout.java:25:    }
/widgets\theme\TintTextInputLayout.java:27:    public TintTextInputLayout(@NonNull Context context, @Nullable AttributeSet attrs) {
/widgets\theme\TintTextInputLayout.java:28:        super(context, attrs);
/widgets\theme\TintTextInputLayout.java:29:        init(context, attrs, 0);
/widgets\theme\TintTextInputLayout.java:30:    }
/widgets\theme\TintTextInputLayout.java:32:    public TintTextInputLayout(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
/widgets\theme\TintTextInputLayout.java:33:        super(context, attrs, defStyleAttr);
/widgets\theme\TintTextInputLayout.java:34:        init(context, attrs, defStyleAttr);
/widgets\theme\TintTextInputLayout.java:35:    }
/widgets\theme\TintTextInputLayout.java:37:    private void init(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
/widgets\theme\TintTextInputLayout.java:38:        if (isInEditMode()) {
/widgets\theme\TintTextInputLayout.java:39:            return;
/widgets\theme\TintTextInputLayout.java:40:        }
/widgets\theme\TintTextInputLayout.java:41:        if (attrs == null) {
/widgets\theme\TintTextInputLayout.java:42:            mBoxStrokeColorResId = 0;
/widgets\theme\TintTextInputLayout.java:43:            mHintTextColorResId = 0;
/widgets\theme\TintTextInputLayout.java:44:            mPlaceholderTextColorResId = 0;
/widgets\theme\TintTextInputLayout.java:45:            tint();
/widgets\theme\TintTextInputLayout.java:46:            return;
/widgets\theme\TintTextInputLayout.java:47:        }
/widgets\theme\TintTextInputLayout.java:48:        TypedArray array = getContext().obtainStyledAttributes(attrs, R.styleable.TintTextInputLayout, defStyleAttr, 0);
/widgets\theme\TintTextInputLayout.java:49:        mBoxStrokeColorResId = array.getResourceId(R.styleable.TintTextInputLayout_boxStrokeColor, 0);
/widgets\theme\TintTextInputLayout.java:50:        mHintTextColorResId = array.getResourceId(R.styleable.TintTextInputLayout_hintTextColor, 0);
/widgets\theme\TintTextInputLayout.java:51:        mPlaceholderTextColorResId = array.getResourceId(R.styleable.TintTextInputLayout_placeholderTextColor, 0);
/widgets\theme\TintTextInputLayout.java:52:        array.recycle();
/widgets\theme\TintTextInputLayout.java:53:        tint();
/widgets\theme\TintTextInputLayout.java:54:    }
/widgets\theme\TintTextInputLayout.java:56:    @Override
/widgets\theme\TintTextInputLayout.java:57:    public void tint() {
/widgets\theme\TintTextInputLayout.java:58:        if (mBoxStrokeColorResId != 0) {
/widgets\theme\TintTextInputLayout.java:59:            setBoxStrokeColorStateList(Objects.requireNonNull(ColorStateListUtils.createColorStateList(getContext(), mBoxStrokeColorResId)));
/widgets\theme\TintTextInputLayout.java:60:        }
/widgets\theme\TintTextInputLayout.java:61:        if (mHintTextColorResId != 0) {
/widgets\theme\TintTextInputLayout.java:62:            setHintTextColor(ColorStateListUtils.createColorStateList(getContext(), mHintTextColorResId));
/widgets\theme\TintTextInputLayout.java:63:        }
/widgets\theme\TintTextInputLayout.java:64:        if (mPlaceholderTextColorResId != 0) {
/widgets\theme\TintTextInputLayout.java:65:            setPlaceholderTextColor(ColorStateListUtils.createColorStateList(getContext(), mPlaceholderTextColorResId));
/widgets\theme\TintTextInputLayout.java:66:        }
/widgets\theme\TintTextInputLayout.java:67:    }
/widgets\theme\TintTextInputLayout.java:68:}
/widgets\theme\TintTextView.java:1:package com.huanchengfly.tieba.post.widgets.theme;
/widgets\theme\TintTextView.java:3:import android.annotation.SuppressLint;
/widgets\theme\TintTextView.java:4:import android.content.Context;
/widgets\theme\TintTextView.java:5:import android.content.res.ColorStateList;
/widgets\theme\TintTextView.java:6:import android.content.res.TypedArray;
/widgets\theme\TintTextView.java:7:import android.util.AttributeSet;
/widgets\theme\TintTextView.java:9:import androidx.appcompat.widget.AppCompatTextView;
/widgets\theme\TintTextView.java:11:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/widgets\theme\TintTextView.java:12:import com.huanchengfly.tieba.post.ui.theme.utils.ColorStateListUtils;
/widgets\theme\TintTextView.java:13:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/widgets\theme\TintTextView.java:14:import com.huanchengfly.tieba.post.R;
/widgets\theme\TintTextView.java:16:@SuppressLint("CustomViewStyleable")
/widgets\theme\TintTextView.java:17:public class TintTextView extends AppCompatTextView implements Tintable {
/widgets\theme\TintTextView.java:18:    private int mBackgroundTintResId;
/widgets\theme\TintTextView.java:19:    private int mTintResId;
/widgets\theme\TintTextView.java:20:    private int mTintListResId;
/widgets\theme\TintTextView.java:22:    public TintTextView(Context context) {
/widgets\theme\TintTextView.java:23:        this(context, null);
/widgets\theme\TintTextView.java:24:    }
/widgets\theme\TintTextView.java:26:    public TintTextView(Context context, AttributeSet attrs) {
/widgets\theme\TintTextView.java:27:        this(context, attrs, 0);
/widgets\theme\TintTextView.java:28:    }
/widgets\theme\TintTextView.java:30:    public TintTextView(Context context, AttributeSet attrs, int defStyleAttr) {
/widgets\theme\TintTextView.java:31:        super(context, attrs, defStyleAttr);
/widgets\theme\TintTextView.java:32:        if (isInEditMode()) {
/widgets\theme\TintTextView.java:33:            return;
/widgets\theme\TintTextView.java:34:        }
/widgets\theme\TintTextView.java:35:        if (attrs == null) {
/widgets\theme\TintTextView.java:36:            mBackgroundTintResId = 0;
/widgets\theme\TintTextView.java:37:            mTintResId = 0;
/widgets\theme\TintTextView.java:38:            mTintListResId = 0;
/widgets\theme\TintTextView.java:39:            applyTintColor();
/widgets\theme\TintTextView.java:40:            return;
/widgets\theme\TintTextView.java:41:        }
/widgets\theme\TintTextView.java:42:        TypedArray array = getContext().obtainStyledAttributes(attrs, R.styleable.TintView, defStyleAttr, 0);
/widgets\theme\TintTextView.java:43:        mBackgroundTintResId = array.getResourceId(R.styleable.TintView_backgroundTint, 0);
/widgets\theme\TintTextView.java:44:        mTintResId = array.getResourceId(R.styleable.TintView_tint, 0);
/widgets\theme\TintTextView.java:45:        mTintListResId = array.getResourceId(R.styleable.TintView_tintList, 0);
/widgets\theme\TintTextView.java:46:        array.recycle();
/widgets\theme\TintTextView.java:47:        applyTintColor();
/widgets\theme\TintTextView.java:48:    }
/widgets\theme\TintTextView.java:50:    public void setBackgroundTintResId(int mBackgroundTintResId) {
/widgets\theme\TintTextView.java:51:        this.mBackgroundTintResId = mBackgroundTintResId;
/widgets\theme\TintTextView.java:52:        applyTintColor();
/widgets\theme\TintTextView.java:53:    }
/widgets\theme\TintTextView.java:55:    public void setTintResId(int mTintResId) {
/widgets\theme\TintTextView.java:56:        this.mTintResId = mTintResId;
/widgets\theme\TintTextView.java:57:        applyTintColor();
/widgets\theme\TintTextView.java:58:    }
/widgets\theme\TintTextView.java:60:    private void applyTintColor() {
/widgets\theme\TintTextView.java:61:        if (mBackgroundTintResId != 0) {
/widgets\theme\TintTextView.java:62:            if (getBackground() == null) {
/widgets\theme\TintTextView.java:63:                setBackgroundColor(ThemeUtils.getColorById(getContext(), mBackgroundTintResId));
/widgets\theme\TintTextView.java:64:            } else {
/widgets\theme\TintTextView.java:65:                setBackgroundTintList(ColorStateListUtils.createColorStateList(getContext(), mBackgroundTintResId));
/widgets\theme\TintTextView.java:66:            }
/widgets\theme\TintTextView.java:67:        }
/widgets\theme\TintTextView.java:68:        if (mTintResId != 0 && mTintListResId == 0) {
/widgets\theme\TintTextView.java:69:            setTextColor(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mTintResId)));
/widgets\theme\TintTextView.java:70:        } else if (mTintListResId != 0) {
/widgets\theme\TintTextView.java:71:            setTextColor(ColorStateListUtils.createColorStateList(getContext(), mTintListResId));
/widgets\theme\TintTextView.java:72:        }
/widgets\theme\TintTextView.java:73:    }
/widgets\theme\TintTextView.java:75:    @Override
/widgets\theme\TintTextView.java:76:    public void tint() {
/widgets\theme\TintTextView.java:77:        applyTintColor();
/widgets\theme\TintTextView.java:78:    }
/widgets\theme\TintTextView.java:79:}
/widgets\theme\TintToolbar.java:1:package com.huanchengfly.tieba.post.widgets.theme;
/widgets\theme\TintToolbar.java:3:import android.annotation.SuppressLint;
/widgets\theme\TintToolbar.java:4:import android.content.Context;
/widgets\theme\TintToolbar.java:5:import android.content.res.ColorStateList;
/widgets\theme\TintToolbar.java:6:import android.content.res.TypedArray;
/widgets\theme\TintToolbar.java:7:import android.graphics.drawable.Drawable;
/widgets\theme\TintToolbar.java:8:import android.util.AttributeSet;
/widgets\theme\TintToolbar.java:9:import android.util.Log;
/widgets\theme\TintToolbar.java:10:import android.view.MenuItem;
/widgets\theme\TintToolbar.java:12:import androidx.annotation.Nullable;
/widgets\theme\TintToolbar.java:13:import androidx.appcompat.widget.Toolbar;
/widgets\theme\TintToolbar.java:15:import com.huanchengfly.tieba.post.R;
/widgets\theme\TintToolbar.java:16:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/widgets\theme\TintToolbar.java:17:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/widgets\theme\TintToolbar.java:19:public class TintToolbar extends Toolbar implements Tintable {
/widgets\theme\TintToolbar.java:20:    public static final String TAG = "TintToolbar";
/widgets\theme\TintToolbar.java:22:    private int mBackgroundTintResId;
/widgets\theme\TintToolbar.java:23:    private int mItemTintResId;
/widgets\theme\TintToolbar.java:24:    private int mSecondaryItemTintResId;
/widgets\theme\TintToolbar.java:25:    private int mActiveItemTintResId;
/widgets\theme\TintToolbar.java:27:    public TintToolbar(Context context) {
/widgets\theme\TintToolbar.java:28:        this(context, null);
/widgets\theme\TintToolbar.java:29:    }
/widgets\theme\TintToolbar.java:31:    public TintToolbar(Context context, @Nullable AttributeSet attrs) {
/widgets\theme\TintToolbar.java:32:        this(context, attrs, R.attr.toolbarStyle);
/widgets\theme\TintToolbar.java:33:    }
/widgets\theme\TintToolbar.java:35:    @SuppressLint("CustomViewStyleable")
/widgets\theme\TintToolbar.java:36:    public TintToolbar(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
/widgets\theme\TintToolbar.java:37:        super(context, attrs, defStyleAttr);
/widgets\theme\TintToolbar.java:38:        if (isInEditMode()) {
/widgets\theme\TintToolbar.java:39:            return;
/widgets\theme\TintToolbar.java:40:        }
/widgets\theme\TintToolbar.java:41:        if (attrs == null) {
/widgets\theme\TintToolbar.java:42:            mBackgroundTintResId = R.color.default_color_toolbar;
/widgets\theme\TintToolbar.java:43:            mItemTintResId = R.color.default_color_toolbar_item;
/widgets\theme\TintToolbar.java:44:            mSecondaryItemTintResId = R.color.default_color_toolbar_item_secondary;
/widgets\theme\TintToolbar.java:45:            mActiveItemTintResId = R.color.default_color_toolbar_item_active;
/widgets\theme\TintToolbar.java:46:            applyTintColor();
/widgets\theme\TintToolbar.java:47:            return;
/widgets\theme\TintToolbar.java:48:        }
/widgets\theme\TintToolbar.java:49:        TypedArray array = getContext().obtainStyledAttributes(attrs, R.styleable.TintToolbar, defStyleAttr, 0);
/widgets\theme\TintToolbar.java:50:        mBackgroundTintResId = array.getResourceId(R.styleable.TintToolbar_toolbarBackgroundTint, R.color.default_color_toolbar);
/widgets\theme\TintToolbar.java:51:        mItemTintResId = array.getResourceId(R.styleable.TintToolbar_itemTint, R.color.default_color_toolbar_item);
/widgets\theme\TintToolbar.java:52:        mSecondaryItemTintResId = array.getResourceId(R.styleable.TintToolbar_secondaryItemTint, R.color.default_color_toolbar_item_secondary);
/widgets\theme\TintToolbar.java:53:        mActiveItemTintResId = array.getResourceId(R.styleable.TintToolbar_activeItemTint, R.color.default_color_toolbar_item_active);
/widgets\theme\TintToolbar.java:54:        array.recycle();
/widgets\theme\TintToolbar.java:55:        applyTintColor();
/widgets\theme\TintToolbar.java:56:    }
/widgets\theme\TintToolbar.java:58:    @Override
/widgets\theme\TintToolbar.java:59:    public void tint() {
/widgets\theme\TintToolbar.java:60:        applyTintColor();
/widgets\theme\TintToolbar.java:61:    }
/widgets\theme\TintToolbar.java:63:    private void applyTintColor() {
/widgets\theme\TintToolbar.java:64:        setTitleTextAppearance(getContext(), R.style.TextAppearance_Title);
/widgets\theme\TintToolbar.java:65:        setSubtitleTextAppearance(getContext(), R.style.TextAppearance_Subtitle);
/widgets\theme\TintToolbar.java:66:        fixColor();
/widgets\theme\TintToolbar.java:67:        tintBackground();
/widgets\theme\TintToolbar.java:68:        tintNavigationIcon();
/widgets\theme\TintToolbar.java:69:        tintOverflowIcon();
/widgets\theme\TintToolbar.java:70:        //tintOverflowMenu();
/widgets\theme\TintToolbar.java:71:        tintMenuIcon();
/widgets\theme\TintToolbar.java:72:        setTitleTextColor(ThemeUtils.getColorById(getContext(), mItemTintResId));
/widgets\theme\TintToolbar.java:73:        setSubtitleTextColor(ThemeUtils.getColorById(getContext(), mSecondaryItemTintResId));
/widgets\theme\TintToolbar.java:74:    }
/widgets\theme\TintToolbar.java:76:    private void fixColor() {
/widgets\theme\TintToolbar.java:77:        if (mBackgroundTintResId == 0) {
/widgets\theme\TintToolbar.java:78:            mBackgroundTintResId = R.color.default_color_toolbar;
/widgets\theme\TintToolbar.java:79:        }
/widgets\theme\TintToolbar.java:80:        if (mItemTintResId == 0) {
/widgets\theme\TintToolbar.java:81:            mItemTintResId = R.color.default_color_toolbar_item;
/widgets\theme\TintToolbar.java:82:        }
/widgets\theme\TintToolbar.java:83:        if (mSecondaryItemTintResId == 0) {
/widgets\theme\TintToolbar.java:84:            mSecondaryItemTintResId = R.color.default_color_toolbar_item_secondary;
/widgets\theme\TintToolbar.java:85:        }
/widgets\theme\TintToolbar.java:86:        if (mActiveItemTintResId == 0) {
/widgets\theme\TintToolbar.java:87:            mActiveItemTintResId = R.color.default_color_toolbar_item_active;
/widgets\theme\TintToolbar.java:88:        }
/widgets\theme\TintToolbar.java:89:    }
/widgets\theme\TintToolbar.java:91:    private void tintBackground() {
/widgets\theme\TintToolbar.java:92:        if (getBackground() == null) {
/widgets\theme\TintToolbar.java:93:            setBackgroundColor(ThemeUtils.getColorById(getContext(), mBackgroundTintResId));
/widgets\theme\TintToolbar.java:94:        } else {
/widgets\theme\TintToolbar.java:95:            setBackgroundTintList(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mBackgroundTintResId)));
/widgets\theme\TintToolbar.java:96:        }
/widgets\theme\TintToolbar.java:97:    }
/widgets\theme\TintToolbar.java:99:    @Override
/widgets\theme\TintToolbar.java:100:    public void setNavigationIcon(int resId) {
/widgets\theme\TintToolbar.java:101:        super.setNavigationIcon(resId);
/widgets\theme\TintToolbar.java:102:        applyTintColor();
/widgets\theme\TintToolbar.java:103:    }
/widgets\theme\TintToolbar.java:105:    private void tintMenuIcon() {
/widgets\theme\TintToolbar.java:106:        for (int i = 0; i < getMenu().size(); i++) {
/widgets\theme\TintToolbar.java:107:            MenuItem menuItem = getMenu().getItem(i);
/widgets\theme\TintToolbar.java:108:            Drawable drawable = menuItem.getIcon();
/widgets\theme\TintToolbar.java:109:            if (drawable == null) {
/widgets\theme\TintToolbar.java:110:                continue;
/widgets\theme\TintToolbar.java:111:            }
/widgets\theme\TintToolbar.java:112:            int[][] states = new int[3][];
/widgets\theme\TintToolbar.java:113:            states[0] = new int[]{android.R.attr.state_checked};
/widgets\theme\TintToolbar.java:114:            states[1] = new int[]{android.R.attr.state_enabled};
/widgets\theme\TintToolbar.java:115:            states[2] = new int[]{};
/widgets\theme\TintToolbar.java:116:            ColorStateList colorStateList = new ColorStateList(states, new int[]{ThemeUtils.getColorById(getContext(), mActiveItemTintResId),
/widgets\theme\TintToolbar.java:117:                    ThemeUtils.getColorById(getContext(), mItemTintResId),
/widgets\theme\TintToolbar.java:118:                    ThemeUtils.getColorById(getContext(), mSecondaryItemTintResId),
/widgets\theme\TintToolbar.java:119:            });
/widgets\theme\TintToolbar.java:120:            drawable.setTintList(colorStateList);
/widgets\theme\TintToolbar.java:121:            drawable.invalidateSelf();
/widgets\theme\TintToolbar.java:122:            menuItem.setIcon(drawable);
/widgets\theme\TintToolbar.java:123:            Log.i(TAG, "tintMenuIcon: " + i + "finish");
/widgets\theme\TintToolbar.java:124:        }
/widgets\theme\TintToolbar.java:125:    }
/widgets\theme\TintToolbar.java:127:    private void tintNavigationIcon() {
/widgets\theme\TintToolbar.java:128:        Drawable drawable = getNavigationIcon();
/widgets\theme\TintToolbar.java:129:        if (drawable == null) {
/widgets\theme\TintToolbar.java:130:            return;
/widgets\theme\TintToolbar.java:131:        }
/widgets\theme\TintToolbar.java:132:        setNavigationIcon(ThemeUtils.tintDrawable(drawable, ThemeUtils.getColorById(getContext(), mItemTintResId)));
/widgets\theme\TintToolbar.java:133:    }
/widgets\theme\TintToolbar.java:135:    private void tintOverflowIcon() {
/widgets\theme\TintToolbar.java:136:        Drawable drawable = getOverflowIcon();
/widgets\theme\TintToolbar.java:137:        if (drawable == null) {
/widgets\theme\TintToolbar.java:138:            return;
/widgets\theme\TintToolbar.java:139:        }
/widgets\theme\TintToolbar.java:140:        setOverflowIcon(ThemeUtils.tintDrawable(drawable, ThemeUtils.getColorById(getContext(), mItemTintResId)));
/widgets\theme\TintToolbar.java:141:    }
/widgets\theme\TintToolbar.java:143:    @Override
/widgets\theme\TintToolbar.java:144:    public void inflateMenu(int resId) {
/widgets\theme\TintToolbar.java:145:        super.inflateMenu(resId);
/widgets\theme\TintToolbar.java:146:        applyTintColor();
/widgets\theme\TintToolbar.java:147:    }
/widgets\theme\TintToolbar.java:149:    public void setBackgroundTintResId(int mBackgroundTintResId) {
/widgets\theme\TintToolbar.java:150:        this.mBackgroundTintResId = mBackgroundTintResId;
/widgets\theme\TintToolbar.java:151:        tint();
/widgets\theme\TintToolbar.java:152:    }
/widgets\theme\TintToolbar.java:154:    public void setItemTintResId(int mItemTintResId) {
/widgets\theme\TintToolbar.java:155:        this.mItemTintResId = mItemTintResId;
/widgets\theme\TintToolbar.java:156:        tint();
/widgets\theme\TintToolbar.java:157:    }
/widgets\theme\TintToolbar.java:159:    public void setSecondaryItemTintResId(int mSecondaryItemTintResId) {
/widgets\theme\TintToolbar.java:160:        this.mSecondaryItemTintResId = mSecondaryItemTintResId;
/widgets\theme\TintToolbar.java:161:        tint();
/widgets\theme\TintToolbar.java:162:    }
/widgets\theme\TintToolbar.java:164:    public void setActiveItemTintResId(int mActiveItemTintResId) {
/widgets\theme\TintToolbar.java:165:        this.mActiveItemTintResId = mActiveItemTintResId;
/widgets\theme\TintToolbar.java:166:        tint();
/widgets\theme\TintToolbar.java:167:    }
/widgets\theme\TintToolbar.java:168:}
/widgets\theme\TintUndoableEditText.java:1:package com.huanchengfly.tieba.post.widgets.theme;
/widgets\theme\TintUndoableEditText.java:3:import android.content.Context;
/widgets\theme\TintUndoableEditText.java:4:import android.content.res.TypedArray;
/widgets\theme\TintUndoableEditText.java:5:import android.util.AttributeSet;
/widgets\theme\TintUndoableEditText.java:7:import com.huanchengfly.tieba.post.R;
/widgets\theme\TintUndoableEditText.java:8:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/widgets\theme\TintUndoableEditText.java:9:import com.huanchengfly.tieba.post.ui.theme.utils.ColorStateListUtils;
/widgets\theme\TintUndoableEditText.java:10:import com.huanchengfly.tieba.post.widgets.edittext.widget.UndoableEditText;
/widgets\theme\TintUndoableEditText.java:12:public class TintUndoableEditText extends UndoableEditText implements Tintable {
/widgets\theme\TintUndoableEditText.java:13:    private int mTextColorResId;
/widgets\theme\TintUndoableEditText.java:14:    private int mHintTextColorResId;
/widgets\theme\TintUndoableEditText.java:16:    public TintUndoableEditText(Context context) {
/widgets\theme\TintUndoableEditText.java:17:        super(context);
/widgets\theme\TintUndoableEditText.java:18:        init(null, 0);
/widgets\theme\TintUndoableEditText.java:19:    }
/widgets\theme\TintUndoableEditText.java:21:    public TintUndoableEditText(Context context, AttributeSet attrs) {
/widgets\theme\TintUndoableEditText.java:22:        super(context, attrs);
/widgets\theme\TintUndoableEditText.java:23:        init(attrs, 0);
/widgets\theme\TintUndoableEditText.java:24:    }
/widgets\theme\TintUndoableEditText.java:26:    public TintUndoableEditText(Context context, AttributeSet attrs, int defStyleAttr) {
/widgets\theme\TintUndoableEditText.java:27:        super(context, attrs, defStyleAttr);
/widgets\theme\TintUndoableEditText.java:28:        init(attrs, defStyleAttr);
/widgets\theme\TintUndoableEditText.java:29:    }
/widgets\theme\TintUndoableEditText.java:31:    private void init(AttributeSet attrs, int defStyleAttr) {
/widgets\theme\TintUndoableEditText.java:32:        if (isInEditMode()) {
/widgets\theme\TintUndoableEditText.java:33:            return;
/widgets\theme\TintUndoableEditText.java:34:        }
/widgets\theme\TintUndoableEditText.java:35:        if (attrs == null) {
/widgets\theme\TintUndoableEditText.java:36:            mTextColorResId = 0;
/widgets\theme\TintUndoableEditText.java:37:            mHintTextColorResId = 0;
/widgets\theme\TintUndoableEditText.java:38:            tint();
/widgets\theme\TintUndoableEditText.java:39:            return;
/widgets\theme\TintUndoableEditText.java:40:        }
/widgets\theme\TintUndoableEditText.java:41:        TypedArray array = getContext().obtainStyledAttributes(attrs, R.styleable.TintUndoableEditText, defStyleAttr, 0);
/widgets\theme\TintUndoableEditText.java:42:        mTextColorResId = array.getResourceId(R.styleable.TintUndoableEditText_textColor, 0);
/widgets\theme\TintUndoableEditText.java:43:        mHintTextColorResId = array.getResourceId(R.styleable.TintUndoableEditText_hintTextColor, 0);
/widgets\theme\TintUndoableEditText.java:44:        array.recycle();
/widgets\theme\TintUndoableEditText.java:45:        tint();
/widgets\theme\TintUndoableEditText.java:46:    }
/widgets\theme\TintUndoableEditText.java:48:    @Override
/widgets\theme\TintUndoableEditText.java:49:    public void tint() {
/widgets\theme\TintUndoableEditText.java:50:        if (mTextColorResId != 0) {
/widgets\theme\TintUndoableEditText.java:51:            setTextColor(ColorStateListUtils.createColorStateList(getContext(), mTextColorResId));
/widgets\theme\TintUndoableEditText.java:52:        }
/widgets\theme\TintUndoableEditText.java:53:        if (mHintTextColorResId != 0) {
/widgets\theme\TintUndoableEditText.java:54:            setHintTextColor(ColorStateListUtils.createColorStateList(getContext(), mHintTextColorResId));
/widgets\theme\TintUndoableEditText.java:55:        }
/widgets\theme\TintUndoableEditText.java:56:    }
/widgets\theme\TintUndoableEditText.java:57:}
/widgets\theme\TintView.java:1:package com.huanchengfly.tieba.post.widgets.theme;
/widgets\theme\TintView.java:3:import android.annotation.SuppressLint;
/widgets\theme\TintView.java:4:import android.content.Context;
/widgets\theme\TintView.java:5:import android.content.res.ColorStateList;
/widgets\theme\TintView.java:6:import android.content.res.TypedArray;
/widgets\theme\TintView.java:7:import android.util.AttributeSet;
/widgets\theme\TintView.java:8:import android.view.View;
/widgets\theme\TintView.java:10:import androidx.annotation.NonNull;
/widgets\theme\TintView.java:11:import androidx.annotation.Nullable;
/widgets\theme\TintView.java:13:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable;
/widgets\theme\TintView.java:14:import com.huanchengfly.tieba.post.ui.theme.utils.ThemeUtils;
/widgets\theme\TintView.java:15:import com.huanchengfly.tieba.post.R;
/widgets\theme\TintView.java:17:@SuppressLint("CustomViewStyleable")
/widgets\theme\TintView.java:18:public class TintView extends View implements Tintable {
/widgets\theme\TintView.java:19:    private int mBackgroundTintResId;
/widgets\theme\TintView.java:21:    public TintView(@NonNull Context context) {
/widgets\theme\TintView.java:22:        this(context, null);
/widgets\theme\TintView.java:23:    }
/widgets\theme\TintView.java:25:    public TintView(@NonNull Context context, @Nullable AttributeSet attrs) {
/widgets\theme\TintView.java:26:        this(context, attrs, 0);
/widgets\theme\TintView.java:27:    }
/widgets\theme\TintView.java:29:    public TintView(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
/widgets\theme\TintView.java:30:        super(context, attrs, defStyleAttr);
/widgets\theme\TintView.java:31:        if (isInEditMode()) {
/widgets\theme\TintView.java:32:            return;
/widgets\theme\TintView.java:33:        }
/widgets\theme\TintView.java:34:        if (attrs == null) {
/widgets\theme\TintView.java:35:            mBackgroundTintResId = 0;
/widgets\theme\TintView.java:36:            applyTintColor();
/widgets\theme\TintView.java:37:            return;
/widgets\theme\TintView.java:38:        }
/widgets\theme\TintView.java:39:        TypedArray array = getContext().obtainStyledAttributes(attrs, R.styleable.TintView, defStyleAttr, 0);
/widgets\theme\TintView.java:40:        mBackgroundTintResId = array.getResourceId(R.styleable.TintView_backgroundTint, 0);
/widgets\theme\TintView.java:41:        array.recycle();
/widgets\theme\TintView.java:42:        applyTintColor();
/widgets\theme\TintView.java:43:    }
/widgets\theme\TintView.java:45:    @Override
/widgets\theme\TintView.java:46:    public void tint() {
/widgets\theme\TintView.java:47:        applyTintColor();
/widgets\theme\TintView.java:48:    }
/widgets\theme\TintView.java:50:    private void applyTintColor() {
/widgets\theme\TintView.java:51:        if (mBackgroundTintResId != 0) {
/widgets\theme\TintView.java:52:            if (getBackground() == null) {
/widgets\theme\TintView.java:53:                setBackgroundColor(ThemeUtils.getColorById(getContext(), mBackgroundTintResId));
/widgets\theme\TintView.java:54:            } else {
/widgets\theme\TintView.java:55:                setBackgroundTintList(ColorStateList.valueOf(ThemeUtils.getColorById(getContext(), mBackgroundTintResId)));
/widgets\theme\TintView.java:56:            }
/widgets\theme\TintView.java:57:        }
/widgets\theme\TintView.java:58:    }
/widgets\theme\TintView.java:59:}
/widgets\theme\TintEditText.kt:1:package com.huanchengfly.tieba.post.widgets.theme
/widgets\theme\TintEditText.kt:3:import android.content.Context
/widgets\theme\TintEditText.kt:4:import android.util.AttributeSet
/widgets\theme\TintEditText.kt:5:import androidx.appcompat.widget.AppCompatEditText
/widgets\theme\TintEditText.kt:6:import com.huanchengfly.tieba.post.R
/widgets\theme\TintEditText.kt:7:import com.huanchengfly.tieba.post.ui.theme.interfaces.Tintable
/widgets\theme\TintEditText.kt:8:import com.huanchengfly.tieba.post.ui.theme.utils.ColorStateListUtils
/widgets\theme\TintEditText.kt:10:class TintEditText @JvmOverloads constructor(
/widgets\theme\TintEditText.kt:11:        context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = R.attr.editTextStyle
/widgets\theme\TintEditText.kt:12:) : AppCompatEditText(context, attrs, defStyleAttr), Tintable {
/widgets\theme\TintEditText.kt:13:    private var textColorResId: Int
/widgets\theme\TintEditText.kt:14:    private var textColorHintResId: Int
/widgets\theme\TintEditText.kt:16:    init {
/widgets\theme\TintEditText.kt:17:        if (isInEditMode || attrs == null) {
/widgets\theme\TintEditText.kt:18:            textColorResId = 0
/widgets\theme\TintEditText.kt:19:            textColorHintResId = 0
/widgets\theme\TintEditText.kt:20:        } else {
/widgets\theme\TintEditText.kt:21:            val array = getContext().obtainStyledAttributes(attrs, R.styleable.TintEditText, defStyleAttr, 0)
/widgets\theme\TintEditText.kt:22:            textColorResId = array.getResourceId(R.styleable.TintEditText_textColor, 0)
/widgets\theme\TintEditText.kt:23:            textColorHintResId = array.getResourceId(R.styleable.TintEditText_android_textColorHint, 0)
/widgets\theme\TintEditText.kt:24:            array.recycle()
/widgets\theme\TintEditText.kt:25:        }
/widgets\theme\TintEditText.kt:26:        tint()
/widgets\theme\TintEditText.kt:27:    }
/widgets\theme\TintEditText.kt:29:    override fun tint() {
/widgets\theme\TintEditText.kt:30:        if (textColorResId != 0) {
/widgets\theme\TintEditText.kt:31:            setTextColor(ColorStateListUtils.createColorStateList(context, textColorResId))
/widgets\theme\TintEditText.kt:32:        }
/widgets\theme\TintEditText.kt:33:        if (textColorHintResId != 0) {
/widgets\theme\TintEditText.kt:34:            setHintTextColor(ColorStateListUtils.createColorStateList(context, textColorHintResId))
/widgets\theme\TintEditText.kt:35:        }
/widgets\theme\TintEditText.kt:36:    }
/widgets\theme\TintEditText.kt:37:}